/**
 * Identity Security Cloud V3 API
 * Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
 *
 * The version of the OpenAPI document: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from '../configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Access
 */
export interface Access {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof Access
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof Access
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Access
     */
    'displayName'?: string;
    /**
     *
     * @type {DtoType}
     * @memberof Access
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof Access
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface AccessAllOf
 */
export interface AccessAllOf {
    /**
     *
     * @type {DtoType}
     * @memberof AccessAllOf
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof AccessAllOf
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface AccessConstraint
 */
export interface AccessConstraint {
    /**
     * Type of Access
     * @type {string}
     * @memberof AccessConstraint
     */
    'type': AccessConstraintTypeEnum;
    /**
     * Must be set only if operator is SELECTED.
     * @type {Array<string>}
     * @memberof AccessConstraint
     */
    'ids'?: Array<string>;
    /**
     * Used to determine whether the scope of the campaign should be reduced for selected ids or all.
     * @type {string}
     * @memberof AccessConstraint
     */
    'operator': AccessConstraintOperatorEnum;
}
export declare const AccessConstraintTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
};
export type AccessConstraintTypeEnum = typeof AccessConstraintTypeEnum[keyof typeof AccessConstraintTypeEnum];
export declare const AccessConstraintOperatorEnum: {
    readonly All: "ALL";
    readonly Selected: "SELECTED";
};
export type AccessConstraintOperatorEnum = typeof AccessConstraintOperatorEnum[keyof typeof AccessConstraintOperatorEnum];
/**
 *
 * @export
 * @interface AccessCriteria
 */
export interface AccessCriteria {
    /**
     * Business name for the access construct list
     * @type {string}
     * @memberof AccessCriteria
     */
    'name'?: string;
    /**
     * List of criteria. There is a min of 1 and max of 50 items in the list.
     * @type {Array<AccessCriteriaCriteriaListInner>}
     * @memberof AccessCriteria
     */
    'criteriaList'?: Array<AccessCriteriaCriteriaListInner>;
}
/**
 *
 * @export
 * @interface AccessCriteriaCriteriaListInner
 */
export interface AccessCriteriaCriteriaListInner {
    /**
     * Type of the propery to which this reference applies to
     * @type {string}
     * @memberof AccessCriteriaCriteriaListInner
     */
    'type'?: AccessCriteriaCriteriaListInnerTypeEnum;
    /**
     * ID of the object to which this reference applies to
     * @type {string}
     * @memberof AccessCriteriaCriteriaListInner
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies to
     * @type {string}
     * @memberof AccessCriteriaCriteriaListInner
     */
    'name'?: string;
}
export declare const AccessCriteriaCriteriaListInnerTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessCriteriaCriteriaListInnerTypeEnum = typeof AccessCriteriaCriteriaListInnerTypeEnum[keyof typeof AccessCriteriaCriteriaListInnerTypeEnum];
/**
 * Identity the access item is requested for.
 * @export
 * @interface AccessItemRequestedFor
 */
export interface AccessItemRequestedFor {
    /**
     * DTO type of identity the access item is requested for.
     * @type {string}
     * @memberof AccessItemRequestedFor
     */
    'type'?: AccessItemRequestedForTypeEnum;
    /**
     * ID of identity the access item is requested for.
     * @type {string}
     * @memberof AccessItemRequestedFor
     */
    'id'?: string;
    /**
     * Human-readable display name of identity the access item is requested for.
     * @type {string}
     * @memberof AccessItemRequestedFor
     */
    'name'?: string;
}
export declare const AccessItemRequestedForTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemRequestedForTypeEnum = typeof AccessItemRequestedForTypeEnum[keyof typeof AccessItemRequestedForTypeEnum];
/**
 * Access item requester\'s identity.
 * @export
 * @interface AccessItemRequester
 */
export interface AccessItemRequester {
    /**
     * Access item requester\'s DTO type.
     * @type {string}
     * @memberof AccessItemRequester
     */
    'type'?: AccessItemRequesterTypeEnum;
    /**
     * Access item requester\'s identity ID.
     * @type {string}
     * @memberof AccessItemRequester
     */
    'id'?: string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof AccessItemRequester
     */
    'name'?: string;
}
export declare const AccessItemRequesterTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemRequesterTypeEnum = typeof AccessItemRequesterTypeEnum[keyof typeof AccessItemRequesterTypeEnum];
/**
 * Identity who reviewed the access item request.
 * @export
 * @interface AccessItemReviewedBy
 */
export interface AccessItemReviewedBy {
    /**
     * DTO type of identity who reviewed the access item request.
     * @type {string}
     * @memberof AccessItemReviewedBy
     */
    'type'?: AccessItemReviewedByTypeEnum;
    /**
     * ID of identity who reviewed the access item request.
     * @type {string}
     * @memberof AccessItemReviewedBy
     */
    'id'?: string;
    /**
     * Human-readable display name of identity who reviewed the access item request.
     * @type {string}
     * @memberof AccessItemReviewedBy
     */
    'name'?: string;
}
export declare const AccessItemReviewedByTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemReviewedByTypeEnum = typeof AccessItemReviewedByTypeEnum[keyof typeof AccessItemReviewedByTypeEnum];
/**
 * Access Profile
 * @export
 * @interface AccessProfile
 */
export interface AccessProfile {
    /**
     * The ID of the Access Profile
     * @type {string}
     * @memberof AccessProfile
     */
    'id'?: string;
    /**
     * Name of the Access Profile
     * @type {string}
     * @memberof AccessProfile
     */
    'name': string;
    /**
     * Information about the Access Profile
     * @type {string}
     * @memberof AccessProfile
     */
    'description'?: string | null;
    /**
     * Date the Access Profile was created
     * @type {string}
     * @memberof AccessProfile
     */
    'created'?: string;
    /**
     * Date the Access Profile was last modified.
     * @type {string}
     * @memberof AccessProfile
     */
    'modified'?: string;
    /**
     * Whether the Access Profile is enabled. If the Access Profile is enabled then you must include at least one Entitlement.
     * @type {boolean}
     * @memberof AccessProfile
     */
    'enabled'?: boolean;
    /**
     *
     * @type {OwnerReference}
     * @memberof AccessProfile
     */
    'owner': OwnerReference;
    /**
     *
     * @type {AccessProfileSourceRef}
     * @memberof AccessProfile
     */
    'source': AccessProfileSourceRef;
    /**
     * A list of entitlements associated with the Access Profile. If enabled is false this is allowed to be empty otherwise it needs to contain at least one Entitlement.
     * @type {Array<EntitlementRef>}
     * @memberof AccessProfile
     */
    'entitlements'?: Array<EntitlementRef> | null;
    /**
     * Whether the Access Profile is requestable via access request. Currently, making an Access Profile non-requestable is only supported  for customers enabled with the new Request Center. Otherwise, attempting to create an Access Profile with a value  **false** in this field results in a 400 error.
     * @type {boolean}
     * @memberof AccessProfile
     */
    'requestable'?: boolean;
    /**
     *
     * @type {Requestability}
     * @memberof AccessProfile
     */
    'accessRequestConfig'?: Requestability | null;
    /**
     *
     * @type {Revocability}
     * @memberof AccessProfile
     */
    'revocationRequestConfig'?: Revocability | null;
    /**
     * List of IDs of segments, if any, to which this Access Profile is assigned.
     * @type {Array<string>}
     * @memberof AccessProfile
     */
    'segments'?: Array<string> | null;
    /**
     *
     * @type {ProvisioningCriteriaLevel1}
     * @memberof AccessProfile
     */
    'provisioningCriteria'?: ProvisioningCriteriaLevel1 | null;
}
/**
 *
 * @export
 * @interface AccessProfileApprovalScheme
 */
export interface AccessProfileApprovalScheme {
    /**
     * Describes the individual or group that is responsible for an approval step. Values are as follows. **APP_OWNER**: The owner of the Application  **OWNER**: Owner of the associated Access Profile or Role  **SOURCE_OWNER**: Owner of the Source associated with an Access Profile  **MANAGER**: Manager of the Identity making the request  **GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field
     * @type {string}
     * @memberof AccessProfileApprovalScheme
     */
    'approverType'?: AccessProfileApprovalSchemeApproverTypeEnum;
    /**
     * Id of the specific approver, used only when approverType is GOVERNANCE_GROUP
     * @type {string}
     * @memberof AccessProfileApprovalScheme
     */
    'approverId'?: string | null;
}
export declare const AccessProfileApprovalSchemeApproverTypeEnum: {
    readonly AppOwner: "APP_OWNER";
    readonly Owner: "OWNER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Manager: "MANAGER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type AccessProfileApprovalSchemeApproverTypeEnum = typeof AccessProfileApprovalSchemeApproverTypeEnum[keyof typeof AccessProfileApprovalSchemeApproverTypeEnum];
/**
 *
 * @export
 * @interface AccessProfileBulkDeleteRequest
 */
export interface AccessProfileBulkDeleteRequest {
    /**
     * List of IDs of Access Profiles to be deleted.
     * @type {Array<string>}
     * @memberof AccessProfileBulkDeleteRequest
     */
    'accessProfileIds'?: Array<string>;
    /**
     * If **true**, silently skip over any of the specified Access Profiles if they cannot be deleted because they are in use. If **false**, no deletions will be attempted if any of the Access Profiles are in use.
     * @type {boolean}
     * @memberof AccessProfileBulkDeleteRequest
     */
    'bestEffortOnly'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileBulkDeleteResponse
 */
export interface AccessProfileBulkDeleteResponse {
    /**
     * ID of the task which is executing the bulk deletion. This can be passed to the **_/task-status** API to track status.
     * @type {string}
     * @memberof AccessProfileBulkDeleteResponse
     */
    'taskId'?: string;
    /**
     * List of IDs of Access Profiles which are pending deletion.
     * @type {Array<string>}
     * @memberof AccessProfileBulkDeleteResponse
     */
    'pending'?: Array<string>;
    /**
     * List of usages of Access Profiles targeted for deletion.
     * @type {Array<AccessProfileUsage>}
     * @memberof AccessProfileBulkDeleteResponse
     */
    'inUse'?: Array<AccessProfileUsage>;
}
/**
 * More complete representation of an access profile.
 * @export
 * @interface AccessProfileDocument
 */
export interface AccessProfileDocument {
    /**
     * Access profile\'s ID.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    'id': string;
    /**
     * Access profile\'s name.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    'name': string;
    /**
     * Access item\'s description.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    'description'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    'modified'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    'synced'?: string | null;
    /**
     * Indicates whether the access item is currently enabled.
     * @type {boolean}
     * @memberof AccessProfileDocument
     */
    'enabled'?: boolean;
    /**
     * Indicates whether the access item can be requested.
     * @type {boolean}
     * @memberof AccessProfileDocument
     */
    'requestable'?: boolean;
    /**
     * Indicates whether comments are required for requests to access the item.
     * @type {boolean}
     * @memberof AccessProfileDocument
     */
    'requestCommentsRequired'?: boolean;
    /**
     *
     * @type {BaseAccessAllOfOwner}
     * @memberof AccessProfileDocument
     */
    'owner'?: BaseAccessAllOfOwner;
    /**
     * Access profile\'s document type.  This enum represents the currently supported document types. Additional values may be added in the future without notice.
     * @type {string}
     * @memberof AccessProfileDocument
     */
    '_type': AccessProfileDocumentTypeEnum;
    /**
     *
     * @type {AccessProfileDocumentAllOfSource}
     * @memberof AccessProfileDocument
     */
    'source'?: AccessProfileDocumentAllOfSource;
    /**
     * Entitlements the access profile has access to.
     * @type {Array<BaseEntitlement>}
     * @memberof AccessProfileDocument
     */
    'entitlements'?: Array<BaseEntitlement>;
    /**
     * Number of entitlements.
     * @type {number}
     * @memberof AccessProfileDocument
     */
    'entitlementCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof AccessProfileDocument
     */
    'tags'?: Array<string>;
}
export declare const AccessProfileDocumentTypeEnum: {
    readonly Accessprofile: "accessprofile";
    readonly Accountactivity: "accountactivity";
    readonly Account: "account";
    readonly Aggregation: "aggregation";
    readonly Entitlement: "entitlement";
    readonly Event: "event";
    readonly Identity: "identity";
    readonly Role: "role";
};
export type AccessProfileDocumentTypeEnum = typeof AccessProfileDocumentTypeEnum[keyof typeof AccessProfileDocumentTypeEnum];
/**
 *
 * @export
 * @interface AccessProfileDocumentAllOf
 */
export interface AccessProfileDocumentAllOf {
    /**
     * Access profile\'s ID.
     * @type {string}
     * @memberof AccessProfileDocumentAllOf
     */
    'id': string;
    /**
     * Access profile\'s name.
     * @type {string}
     * @memberof AccessProfileDocumentAllOf
     */
    'name': string;
    /**
     * Access profile\'s document type.  This enum represents the currently supported document types. Additional values may be added in the future without notice.
     * @type {string}
     * @memberof AccessProfileDocumentAllOf
     */
    '_type': AccessProfileDocumentAllOfTypeEnum;
    /**
     *
     * @type {AccessProfileDocumentAllOfSource}
     * @memberof AccessProfileDocumentAllOf
     */
    'source'?: AccessProfileDocumentAllOfSource;
    /**
     * Entitlements the access profile has access to.
     * @type {Array<BaseEntitlement>}
     * @memberof AccessProfileDocumentAllOf
     */
    'entitlements'?: Array<BaseEntitlement>;
    /**
     * Number of entitlements.
     * @type {number}
     * @memberof AccessProfileDocumentAllOf
     */
    'entitlementCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof AccessProfileDocumentAllOf
     */
    'tags'?: Array<string>;
}
export declare const AccessProfileDocumentAllOfTypeEnum: {
    readonly Accessprofile: "accessprofile";
    readonly Accountactivity: "accountactivity";
    readonly Account: "account";
    readonly Aggregation: "aggregation";
    readonly Entitlement: "entitlement";
    readonly Event: "event";
    readonly Identity: "identity";
    readonly Role: "role";
};
export type AccessProfileDocumentAllOfTypeEnum = typeof AccessProfileDocumentAllOfTypeEnum[keyof typeof AccessProfileDocumentAllOfTypeEnum];
/**
 * Access profile\'s source.
 * @export
 * @interface AccessProfileDocumentAllOfSource
 */
export interface AccessProfileDocumentAllOfSource {
    /**
     * Source\'s ID.
     * @type {string}
     * @memberof AccessProfileDocumentAllOfSource
     */
    'id'?: string;
    /**
     * Source\'s name.
     * @type {string}
     * @memberof AccessProfileDocumentAllOfSource
     */
    'name'?: string;
}
/**
 * EntitlementReference
 * @export
 * @interface AccessProfileEntitlement
 */
export interface AccessProfileEntitlement {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof AccessProfileEntitlement
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof AccessProfileEntitlement
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof AccessProfileEntitlement
     */
    'displayName'?: string;
    /**
     *
     * @type {DtoType}
     * @memberof AccessProfileEntitlement
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof AccessProfileEntitlement
     */
    'description'?: string | null;
    /**
     *
     * @type {Reference1}
     * @memberof AccessProfileEntitlement
     */
    'source'?: Reference1;
    /**
     *
     * @type {boolean}
     * @memberof AccessProfileEntitlement
     */
    'privileged'?: boolean;
    /**
     *
     * @type {string}
     * @memberof AccessProfileEntitlement
     */
    'attribute'?: string;
    /**
     *
     * @type {string}
     * @memberof AccessProfileEntitlement
     */
    'value'?: string;
    /**
     *
     * @type {boolean}
     * @memberof AccessProfileEntitlement
     */
    'standalone'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileRef
 */
export interface AccessProfileRef {
    /**
     * ID of the Access Profile
     * @type {string}
     * @memberof AccessProfileRef
     */
    'id'?: string;
    /**
     * Type of requested object. This field must be either left null or set to \'ACCESS_PROFILE\' when creating an Access Profile, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof AccessProfileRef
     */
    'type'?: AccessProfileRefTypeEnum;
    /**
     * Human-readable display name of the Access Profile. This field is ignored on input.
     * @type {string}
     * @memberof AccessProfileRef
     */
    'name'?: string;
}
export declare const AccessProfileRefTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
};
export type AccessProfileRefTypeEnum = typeof AccessProfileRefTypeEnum[keyof typeof AccessProfileRefTypeEnum];
/**
 * Role
 * @export
 * @interface AccessProfileRole
 */
export interface AccessProfileRole {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof AccessProfileRole
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof AccessProfileRole
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof AccessProfileRole
     */
    'displayName'?: string;
    /**
     *
     * @type {DtoType}
     * @memberof AccessProfileRole
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof AccessProfileRole
     */
    'description'?: string | null;
    /**
     *
     * @type {DisplayReference}
     * @memberof AccessProfileRole
     */
    'owner'?: DisplayReference;
    /**
     *
     * @type {boolean}
     * @memberof AccessProfileRole
     */
    'disabled'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AccessProfileRole
     */
    'revocable'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileSourceRef
 */
export interface AccessProfileSourceRef {
    /**
     * The ID of the Source with with which the Access Profile is associated
     * @type {string}
     * @memberof AccessProfileSourceRef
     */
    'id'?: string;
    /**
     * The type of the Source, will always be SOURCE
     * @type {string}
     * @memberof AccessProfileSourceRef
     */
    'type'?: AccessProfileSourceRefTypeEnum;
    /**
     * The display name of the associated Source
     * @type {string}
     * @memberof AccessProfileSourceRef
     */
    'name'?: string;
}
export declare const AccessProfileSourceRefTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccessProfileSourceRefTypeEnum = typeof AccessProfileSourceRefTypeEnum[keyof typeof AccessProfileSourceRefTypeEnum];
/**
 * This is a summary representation of an access profile.
 * @export
 * @interface AccessProfileSummary
 */
export interface AccessProfileSummary {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof AccessProfileSummary
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof AccessProfileSummary
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof AccessProfileSummary
     */
    'displayName'?: string;
    /**
     *
     * @type {DtoType}
     * @memberof AccessProfileSummary
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof AccessProfileSummary
     */
    'description'?: string | null;
    /**
     *
     * @type {Reference1}
     * @memberof AccessProfileSummary
     */
    'source'?: Reference1;
    /**
     *
     * @type {DisplayReference}
     * @memberof AccessProfileSummary
     */
    'owner'?: DisplayReference;
    /**
     *
     * @type {boolean}
     * @memberof AccessProfileSummary
     */
    'revocable'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileSummaryAllOf
 */
export interface AccessProfileSummaryAllOf {
    /**
     *
     * @type {Reference1}
     * @memberof AccessProfileSummaryAllOf
     */
    'source'?: Reference1;
    /**
     *
     * @type {DisplayReference}
     * @memberof AccessProfileSummaryAllOf
     */
    'owner'?: DisplayReference;
    /**
     *
     * @type {boolean}
     * @memberof AccessProfileSummaryAllOf
     */
    'revocable'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileUsage
 */
export interface AccessProfileUsage {
    /**
     * ID of the Access Profile that is in use
     * @type {string}
     * @memberof AccessProfileUsage
     */
    'accessProfileId'?: string;
    /**
     * List of references to objects which are using the indicated Access Profile
     * @type {Array<AccessProfileUsageUsedByInner>}
     * @memberof AccessProfileUsage
     */
    'usedBy'?: Array<AccessProfileUsageUsedByInner>;
}
/**
 * Role using the access profile.
 * @export
 * @interface AccessProfileUsageUsedByInner
 */
export interface AccessProfileUsageUsedByInner {
    /**
     * DTO type of role using the access profile.
     * @type {string}
     * @memberof AccessProfileUsageUsedByInner
     */
    'type'?: AccessProfileUsageUsedByInnerTypeEnum;
    /**
     * ID of role using the access profile.
     * @type {string}
     * @memberof AccessProfileUsageUsedByInner
     */
    'id'?: string;
    /**
     * Display name of role using the access profile.
     * @type {string}
     * @memberof AccessProfileUsageUsedByInner
     */
    'name'?: string;
}
export declare const AccessProfileUsageUsedByInnerTypeEnum: {
    readonly Role: "ROLE";
};
export type AccessProfileUsageUsedByInnerTypeEnum = typeof AccessProfileUsageUsedByInnerTypeEnum[keyof typeof AccessProfileUsageUsedByInnerTypeEnum];
/**
 *
 * @export
 * @interface AccessRequest
 */
export interface AccessRequest {
    /**
     * A list of Identity IDs for whom the Access is requested. If it\'s a Revoke request, there can only be one Identity ID.
     * @type {Array<string>}
     * @memberof AccessRequest
     */
    'requestedFor': Array<string>;
    /**
     *
     * @type {AccessRequestType}
     * @memberof AccessRequest
     */
    'requestType'?: AccessRequestType | null;
    /**
     *
     * @type {Array<AccessRequestItem>}
     * @memberof AccessRequest
     */
    'requestedItems': Array<AccessRequestItem>;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities.
     * @type {{ [key: string]: string; }}
     * @memberof AccessRequest
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface AccessRequestConfig
 */
export interface AccessRequestConfig {
    /**
     * If this is true, approvals must be processed by an external system. Also, if this is true, it blocks Request Center access requests and returns an error for any user who isn\'t an org admin.
     * @type {boolean}
     * @memberof AccessRequestConfig
     */
    'approvalsMustBeExternal'?: boolean;
    /**
     * If this is true and the requester and reviewer are the same, the request is automatically approved.
     * @type {boolean}
     * @memberof AccessRequestConfig
     */
    'autoApprovalEnabled'?: boolean;
    /**
     *
     * @type {RequestOnBehalfOfConfig}
     * @memberof AccessRequestConfig
     */
    'requestOnBehalfOfConfig'?: RequestOnBehalfOfConfig;
    /**
     *
     * @type {ApprovalReminderAndEscalationConfig}
     * @memberof AccessRequestConfig
     */
    'approvalReminderAndEscalationConfig'?: ApprovalReminderAndEscalationConfig;
    /**
     *
     * @type {EntitlementRequestConfig}
     * @memberof AccessRequestConfig
     */
    'entitlementRequestConfig'?: EntitlementRequestConfig;
}
/**
 *
 * @export
 * @interface AccessRequestItem
 */
export interface AccessRequestItem {
    /**
     * The type of the item being requested.
     * @type {string}
     * @memberof AccessRequestItem
     */
    'type': AccessRequestItemTypeEnum;
    /**
     * ID of Role, Access Profile or Entitlement being requested.
     * @type {string}
     * @memberof AccessRequestItem
     */
    'id': string;
    /**
     * Comment provided by requester. * Comment is required when the request is of type Revoke Access.
     * @type {string}
     * @memberof AccessRequestItem
     */
    'comment'?: string;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities and /access-request-status.
     * @type {{ [key: string]: string; }}
     * @memberof AccessRequestItem
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity. Also known as the expiration date. * Specify a date in the future. * The current SLA for the deprovisioning is 24 hours. * This date can be modified to either extend or decrease the duration of access item assignments for the specified identity. You can change the expiration date for requests for yourself or direct reports, but you cannot remove an expiration date on an already approved item. If the access request has not been approved, you can cancel it and submit a new one without the expiration. If it has already been approved, then you have to revoke the access and then re-request without the expiration.
     * @type {string}
     * @memberof AccessRequestItem
     */
    'removeDate'?: string;
}
export declare const AccessRequestItemTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessRequestItemTypeEnum = typeof AccessRequestItemTypeEnum[keyof typeof AccessRequestItemTypeEnum];
/**
 * Provides additional details about this access request phase.
 * @export
 * @interface AccessRequestPhases
 */
export interface AccessRequestPhases {
    /**
     * The time that this phase started.
     * @type {string}
     * @memberof AccessRequestPhases
     */
    'started'?: string;
    /**
     * The time that this phase finished.
     * @type {string}
     * @memberof AccessRequestPhases
     */
    'finished'?: string | null;
    /**
     * The name of this phase.
     * @type {string}
     * @memberof AccessRequestPhases
     */
    'name'?: string;
    /**
     * The state of this phase.
     * @type {string}
     * @memberof AccessRequestPhases
     */
    'state'?: AccessRequestPhasesStateEnum;
    /**
     * The state of this phase.
     * @type {string}
     * @memberof AccessRequestPhases
     */
    'result'?: AccessRequestPhasesResultEnum;
    /**
     * A reference to another object on the RequestedItemStatus that contains more details about the phase. Note that for the Provisioning phase, this will be empty if there are no manual work items.
     * @type {string}
     * @memberof AccessRequestPhases
     */
    'phaseReference'?: string | null;
}
export declare const AccessRequestPhasesStateEnum: {
    readonly Pending: "PENDING";
    readonly Executing: "EXECUTING";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly NotExecuted: "NOT_EXECUTED";
};
export type AccessRequestPhasesStateEnum = typeof AccessRequestPhasesStateEnum[keyof typeof AccessRequestPhasesStateEnum];
export declare const AccessRequestPhasesResultEnum: {
    readonly Successful: "SUCCESSFUL";
    readonly Failed: "FAILED";
    readonly Null: "null";
};
export type AccessRequestPhasesResultEnum = typeof AccessRequestPhasesResultEnum[keyof typeof AccessRequestPhasesResultEnum];
/**
 * Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field.
 * @export
 * @enum {string}
 */
export declare const AccessRequestType: {
    readonly GrantAccess: "GRANT_ACCESS";
    readonly RevokeAccess: "REVOKE_ACCESS";
    readonly Null: "null";
};
export type AccessRequestType = typeof AccessRequestType[keyof typeof AccessRequestType];
/**
 *
 * @export
 * @interface AccessReviewItem
 */
export interface AccessReviewItem {
    /**
     *
     * @type {AccessSummary}
     * @memberof AccessReviewItem
     */
    'accessSummary'?: AccessSummary;
    /**
     *
     * @type {CertificationIdentitySummary}
     * @memberof AccessReviewItem
     */
    'identitySummary'?: CertificationIdentitySummary;
    /**
     * The review item\'s id
     * @type {string}
     * @memberof AccessReviewItem
     */
    'id'?: string;
    /**
     * Whether the review item is complete
     * @type {boolean}
     * @memberof AccessReviewItem
     */
    'completed'?: boolean;
    /**
     * Indicates whether the review item is for new access to a source
     * @type {boolean}
     * @memberof AccessReviewItem
     */
    'newAccess'?: boolean;
    /**
     *
     * @type {CertificationDecision}
     * @memberof AccessReviewItem
     */
    'decision'?: CertificationDecision;
    /**
     * Comments for this review item
     * @type {string}
     * @memberof AccessReviewItem
     */
    'comments'?: string | null;
}
/**
 *
 * @export
 * @interface AccessReviewReassignment
 */
export interface AccessReviewReassignment {
    /**
     *
     * @type {Array<ReassignReference>}
     * @memberof AccessReviewReassignment
     */
    'reassign': Array<ReassignReference>;
    /**
     * The ID of the identity to which the certification is reassigned
     * @type {string}
     * @memberof AccessReviewReassignment
     */
    'reassignTo': string;
    /**
     * The reason comment for why the reassign was made
     * @type {string}
     * @memberof AccessReviewReassignment
     */
    'reason': string;
}
/**
 * An object holding the access that is being reviewed
 * @export
 * @interface AccessSummary
 */
export interface AccessSummary {
    /**
     *
     * @type {AccessSummaryAccess}
     * @memberof AccessSummary
     */
    'access'?: AccessSummaryAccess;
    /**
     *
     * @type {ReviewableEntitlement}
     * @memberof AccessSummary
     */
    'entitlement'?: ReviewableEntitlement | null;
    /**
     *
     * @type {ReviewableAccessProfile}
     * @memberof AccessSummary
     */
    'accessProfile'?: ReviewableAccessProfile;
    /**
     *
     * @type {ReviewableRole}
     * @memberof AccessSummary
     */
    'role'?: ReviewableRole | null;
}
/**
 *
 * @export
 * @interface AccessSummaryAccess
 */
export interface AccessSummaryAccess {
    /**
     *
     * @type {DtoType}
     * @memberof AccessSummaryAccess
     */
    'type'?: DtoType;
    /**
     * The ID of the item being certified
     * @type {string}
     * @memberof AccessSummaryAccess
     */
    'id'?: string;
    /**
     * The name of the item being certified
     * @type {string}
     * @memberof AccessSummaryAccess
     */
    'name'?: string;
}
/**
 * Access type of API Client indicating online or offline use
 * @export
 * @enum {string}
 */
export declare const AccessType: {
    readonly Online: "ONLINE";
    readonly Offline: "OFFLINE";
};
export type AccessType = typeof AccessType[keyof typeof AccessType];
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof Account
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof Account
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof Account
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof Account
     */
    'modified'?: string;
    /**
     * The unique ID of the source this account belongs to
     * @type {string}
     * @memberof Account
     */
    'sourceId': string;
    /**
     * The display name of the source this account belongs to
     * @type {string}
     * @memberof Account
     */
    'sourceName': string;
    /**
     * The unique ID of the identity this account is correlated to
     * @type {string}
     * @memberof Account
     */
    'identityId'?: string;
    /**
     * The lifecycle state of the identity this account is correlated to
     * @type {string}
     * @memberof Account
     */
    'cloudLifecycleState'?: string | null;
    /**
     * The identity state of the identity this account is correlated to
     * @type {string}
     * @memberof Account
     */
    'identityState'?: string | null;
    /**
     * The connection type of the source this account is from
     * @type {string}
     * @memberof Account
     */
    'connectionType'?: string | null;
    /**
     * The type of the account
     * @type {string}
     * @memberof Account
     */
    'type'?: string | null;
    /**
     * The account attributes that are aggregated
     * @type {{ [key: string]: any; }}
     * @memberof Account
     */
    'attributes': {
        [key: string]: any;
    } | null;
    /**
     * Indicates if this account is from an authoritative source
     * @type {boolean}
     * @memberof Account
     */
    'authoritative': boolean;
    /**
     * A description of the account
     * @type {string}
     * @memberof Account
     */
    'description'?: string | null;
    /**
     * Indicates if the account is currently disabled
     * @type {boolean}
     * @memberof Account
     */
    'disabled': boolean;
    /**
     * Indicates if the account is currently locked
     * @type {boolean}
     * @memberof Account
     */
    'locked': boolean;
    /**
     * The unique ID of the account generated by the source system
     * @type {string}
     * @memberof Account
     */
    'nativeIdentity': string;
    /**
     * If true, this is a user account within IdentityNow.  If false, this is an account from a source system.
     * @type {boolean}
     * @memberof Account
     */
    'systemAccount': boolean;
    /**
     * Indicates if this account is not correlated to an identity
     * @type {boolean}
     * @memberof Account
     */
    'uncorrelated': boolean;
    /**
     * The unique ID of the account as determined by the account schema
     * @type {string}
     * @memberof Account
     */
    'uuid'?: string | null;
    /**
     * Indicates if the account has been manually correlated to an identity
     * @type {boolean}
     * @memberof Account
     */
    'manuallyCorrelated': boolean;
    /**
     * Indicates if the account has entitlements
     * @type {boolean}
     * @memberof Account
     */
    'hasEntitlements': boolean;
    /**
     *
     * @type {BaseReferenceDto}
     * @memberof Account
     */
    'identity'?: BaseReferenceDto;
    /**
     *
     * @type {AccountAllOfSourceOwner}
     * @memberof Account
     */
    'sourceOwner'?: AccountAllOfSourceOwner | null;
    /**
     * A string list containing the owning source\'s features
     * @type {string}
     * @memberof Account
     */
    'features'?: string | null;
    /**
     * The origin of the account either aggregated or provisioned
     * @type {string}
     * @memberof Account
     */
    'origin'?: AccountOriginEnum;
    /**
     *
     * @type {AccountAllOfOwnerIdentity}
     * @memberof Account
     */
    'ownerIdentity'?: AccountAllOfOwnerIdentity | null;
    /**
     *
     * @type {AccountAllOfOwnerGroup}
     * @memberof Account
     */
    'ownerGroup'?: AccountAllOfOwnerGroup | null;
}
export declare const AccountOriginEnum: {
    readonly Aggregated: "AGGREGATED";
    readonly Provisioned: "PROVISIONED";
    readonly Null: "null";
};
export type AccountOriginEnum = typeof AccountOriginEnum[keyof typeof AccountOriginEnum];
/**
 * Object for specifying Actions to be performed on a specified list of sources\' account.
 * @export
 * @interface AccountAction
 */
export interface AccountAction {
    /**
     * Describes if action will be enabled or disabled
     * @type {string}
     * @memberof AccountAction
     */
    'action'?: AccountActionActionEnum;
    /**
     * List of unique source IDs. The sources must have the ENABLE feature or flat file source. See \"/sources\" endpoint for source features.
     * @type {Set<string>}
     * @memberof AccountAction
     */
    'sourceIds'?: Set<string>;
}
export declare const AccountActionActionEnum: {
    readonly Enable: "ENABLE";
    readonly Disable: "DISABLE";
};
export type AccountActionActionEnum = typeof AccountActionActionEnum[keyof typeof AccountActionActionEnum];
/**
 *
 * @export
 * @interface AccountActivity
 */
export interface AccountActivity {
    /**
     * Id of the account activity
     * @type {string}
     * @memberof AccountActivity
     */
    'id'?: string;
    /**
     * The name of the activity
     * @type {string}
     * @memberof AccountActivity
     */
    'name'?: string;
    /**
     * When the activity was first created
     * @type {string}
     * @memberof AccountActivity
     */
    'created'?: string;
    /**
     * When the activity was last modified
     * @type {string}
     * @memberof AccountActivity
     */
    'modified'?: string | null;
    /**
     * When the activity was completed
     * @type {string}
     * @memberof AccountActivity
     */
    'completed'?: string | null;
    /**
     *
     * @type {CompletionStatus & object}
     * @memberof AccountActivity
     */
    'completionStatus'?: CompletionStatus & object;
    /**
     * The type of action the activity performed.  Please see the following list of types.  This list may grow over time.  - CloudAutomated - IdentityAttributeUpdate - appRequest - LifecycleStateChange - AccountStateUpdate - AccountAttributeUpdate - CloudPasswordRequest - Attribute Synchronization Refresh - Certification - Identity Refresh - Lifecycle Change Refresh   [Learn more here](https://documentation.sailpoint.com/saas/help/search/searchable-fields.html#searching-account-activity-data).
     * @type {string}
     * @memberof AccountActivity
     */
    'type'?: string | null;
    /**
     *
     * @type {IdentitySummary}
     * @memberof AccountActivity
     */
    'requesterIdentitySummary'?: IdentitySummary | null;
    /**
     *
     * @type {IdentitySummary}
     * @memberof AccountActivity
     */
    'targetIdentitySummary'?: IdentitySummary | null;
    /**
     * A list of error messages, if any, that were encountered.
     * @type {Array<string>}
     * @memberof AccountActivity
     */
    'errors'?: Array<string> | null;
    /**
     * A list of warning messages, if any, that were encountered.
     * @type {Array<string>}
     * @memberof AccountActivity
     */
    'warnings'?: Array<string> | null;
    /**
     * Individual actions performed as part of this account activity
     * @type {Array<AccountActivityItem>}
     * @memberof AccountActivity
     */
    'items'?: Array<AccountActivityItem> | null;
    /**
     *
     * @type {ExecutionStatus}
     * @memberof AccountActivity
     */
    'executionStatus'?: ExecutionStatus;
    /**
     * Arbitrary key-value pairs, if any were included in the corresponding access request
     * @type {{ [key: string]: string; }}
     * @memberof AccountActivity
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
}
/**
 * The state of an approval status
 * @export
 * @enum {string}
 */
export declare const AccountActivityApprovalStatus: {
    readonly Finished: "FINISHED";
    readonly Rejected: "REJECTED";
    readonly Returned: "RETURNED";
    readonly Expired: "EXPIRED";
    readonly Pending: "PENDING";
    readonly Canceled: "CANCELED";
    readonly Null: "null";
};
export type AccountActivityApprovalStatus = typeof AccountActivityApprovalStatus[keyof typeof AccountActivityApprovalStatus];
/**
 * AccountActivity
 * @export
 * @interface AccountActivityDocument
 */
export interface AccountActivityDocument {
    /**
     *
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof AccountActivityDocument
     */
    '_type': DocumentType;
    /**
     * Type of action performed in the activity.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'action'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'modified'?: string | null;
    /**
     * Activity\'s current stage.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'stage'?: string;
    /**
     * Activity\'s origin.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'origin'?: string | null;
    /**
     * Activity\'s current status.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'status'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountActivityDocument
     */
    'requester'?: AccountSource;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountActivityDocument
     */
    'recipient'?: AccountSource;
    /**
     * Account activity\'s tracking number.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'trackingNumber'?: string;
    /**
     * Errors provided by the source while completing account actions.
     * @type {Array<string>}
     * @memberof AccountActivityDocument
     */
    'errors'?: Array<string> | null;
    /**
     * Warnings provided by the source while completing account actions.
     * @type {Array<string>}
     * @memberof AccountActivityDocument
     */
    'warnings'?: Array<string> | null;
    /**
     * Approvals performed on an item during activity.
     * @type {Array<Approval>}
     * @memberof AccountActivityDocument
     */
    'approvals'?: Array<Approval>;
    /**
     * Original actions that triggered all individual source actions related to the account action.
     * @type {Array<OriginalRequest>}
     * @memberof AccountActivityDocument
     */
    'originalRequests'?: Array<OriginalRequest>;
    /**
     * Controls that translated the attribute requests into actual provisioning actions on the source.
     * @type {Array<ExpansionItem>}
     * @memberof AccountActivityDocument
     */
    'expansionItems'?: Array<ExpansionItem>;
    /**
     * Account data for each individual source action triggered by the original requests.
     * @type {Array<AccountRequest>}
     * @memberof AccountActivityDocument
     */
    'accountRequests'?: Array<AccountRequest>;
    /**
     * Sources involved in the account activity.
     * @type {string}
     * @memberof AccountActivityDocument
     */
    'sources'?: string;
}
/**
 *
 * @export
 * @interface AccountActivityItem
 */
export interface AccountActivityItem {
    /**
     * Item id
     * @type {string}
     * @memberof AccountActivityItem
     */
    'id'?: string;
    /**
     * Human-readable display name of item
     * @type {string}
     * @memberof AccountActivityItem
     */
    'name'?: string;
    /**
     * Date and time item was requested
     * @type {string}
     * @memberof AccountActivityItem
     */
    'requested'?: string;
    /**
     *
     * @type {AccountActivityApprovalStatus & object}
     * @memberof AccountActivityItem
     */
    'approvalStatus'?: AccountActivityApprovalStatus & object;
    /**
     *
     * @type {ProvisioningState}
     * @memberof AccountActivityItem
     */
    'provisioningStatus'?: ProvisioningState;
    /**
     *
     * @type {Comment}
     * @memberof AccountActivityItem
     */
    'requesterComment'?: Comment | null;
    /**
     *
     * @type {IdentitySummary}
     * @memberof AccountActivityItem
     */
    'reviewerIdentitySummary'?: IdentitySummary | null;
    /**
     *
     * @type {Comment}
     * @memberof AccountActivityItem
     */
    'reviewerComment'?: Comment | null;
    /**
     *
     * @type {AccountActivityItemOperation & object}
     * @memberof AccountActivityItem
     */
    'operation'?: AccountActivityItemOperation & object;
    /**
     * Attribute to which account activity applies
     * @type {string}
     * @memberof AccountActivityItem
     */
    'attribute'?: string | null;
    /**
     * Value of attribute
     * @type {string}
     * @memberof AccountActivityItem
     */
    'value'?: string | null;
    /**
     * Native identity in the target system to which the account activity applies
     * @type {string}
     * @memberof AccountActivityItem
     */
    'nativeIdentity'?: string | null;
    /**
     * Id of Source to which account activity applies
     * @type {string}
     * @memberof AccountActivityItem
     */
    'sourceId'?: string;
    /**
     *
     * @type {AccountRequestInfo}
     * @memberof AccountActivityItem
     */
    'accountRequestInfo'?: AccountRequestInfo | null;
    /**
     * Arbitrary key-value pairs, if any were included in the corresponding access request item
     * @type {{ [key: string]: string; }}
     * @memberof AccountActivityItem
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof AccountActivityItem
     */
    'removeDate'?: string | null;
}
/**
 * Represents an operation in an account activity item
 * @export
 * @enum {string}
 */
export declare const AccountActivityItemOperation: {
    readonly Add: "ADD";
    readonly Create: "CREATE";
    readonly Modify: "MODIFY";
    readonly Delete: "DELETE";
    readonly Disable: "DISABLE";
    readonly Enable: "ENABLE";
    readonly Unlock: "UNLOCK";
    readonly Lock: "LOCK";
    readonly Remove: "REMOVE";
    readonly Set: "SET";
    readonly Null: "null";
};
export type AccountActivityItemOperation = typeof AccountActivityItemOperation[keyof typeof AccountActivityItemOperation];
/**
 * AccountActivity
 * @export
 * @interface AccountActivitySearchedItem
 */
export interface AccountActivitySearchedItem {
    /**
     *
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof AccountActivitySearchedItem
     */
    '_type': DocumentType;
    /**
     * Type of action performed in the activity.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'action'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'modified'?: string | null;
    /**
     * Activity\'s current stage.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'stage'?: string;
    /**
     * Activity\'s origin.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'origin'?: string | null;
    /**
     * Activity\'s current status.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'status'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountActivitySearchedItem
     */
    'requester'?: AccountSource;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountActivitySearchedItem
     */
    'recipient'?: AccountSource;
    /**
     * Account activity\'s tracking number.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'trackingNumber'?: string;
    /**
     * Errors provided by the source while completing account actions.
     * @type {Array<string>}
     * @memberof AccountActivitySearchedItem
     */
    'errors'?: Array<string> | null;
    /**
     * Warnings provided by the source while completing account actions.
     * @type {Array<string>}
     * @memberof AccountActivitySearchedItem
     */
    'warnings'?: Array<string> | null;
    /**
     * Approvals performed on an item during activity.
     * @type {Array<Approval>}
     * @memberof AccountActivitySearchedItem
     */
    'approvals'?: Array<Approval>;
    /**
     * Original actions that triggered all individual source actions related to the account action.
     * @type {Array<OriginalRequest>}
     * @memberof AccountActivitySearchedItem
     */
    'originalRequests'?: Array<OriginalRequest>;
    /**
     * Controls that translated the attribute requests into actual provisioning actions on the source.
     * @type {Array<ExpansionItem>}
     * @memberof AccountActivitySearchedItem
     */
    'expansionItems'?: Array<ExpansionItem>;
    /**
     * Account data for each individual source action triggered by the original requests.
     * @type {Array<AccountRequest>}
     * @memberof AccountActivitySearchedItem
     */
    'accountRequests'?: Array<AccountRequest>;
    /**
     * Sources involved in the account activity.
     * @type {string}
     * @memberof AccountActivitySearchedItem
     */
    'sources'?: string;
}
/**
 *
 * @export
 * @interface AccountActivitySearchedItemAllOf
 */
export interface AccountActivitySearchedItemAllOf {
    /**
     * Type of action performed in the activity.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'action'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'modified'?: string | null;
    /**
     * Activity\'s current stage.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'stage'?: string;
    /**
     * Activity\'s origin.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'origin'?: string | null;
    /**
     * Activity\'s current status.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'status'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'requester'?: AccountSource;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'recipient'?: AccountSource;
    /**
     * Account activity\'s tracking number.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'trackingNumber'?: string;
    /**
     * Errors provided by the source while completing account actions.
     * @type {Array<string>}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'errors'?: Array<string> | null;
    /**
     * Warnings provided by the source while completing account actions.
     * @type {Array<string>}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'warnings'?: Array<string> | null;
    /**
     * Approvals performed on an item during activity.
     * @type {Array<Approval>}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'approvals'?: Array<Approval>;
    /**
     * Original actions that triggered all individual source actions related to the account action.
     * @type {Array<OriginalRequest>}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'originalRequests'?: Array<OriginalRequest>;
    /**
     * Controls that translated the attribute requests into actual provisioning actions on the source.
     * @type {Array<ExpansionItem>}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'expansionItems'?: Array<ExpansionItem>;
    /**
     * Account data for each individual source action triggered by the original requests.
     * @type {Array<AccountRequest>}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'accountRequests'?: Array<AccountRequest>;
    /**
     * Sources involved in the account activity.
     * @type {string}
     * @memberof AccountActivitySearchedItemAllOf
     */
    'sources'?: string;
}
/**
 *
 * @export
 * @interface AccountAllOf
 */
export interface AccountAllOf {
    /**
     * The unique ID of the source this account belongs to
     * @type {string}
     * @memberof AccountAllOf
     */
    'sourceId': string;
    /**
     * The display name of the source this account belongs to
     * @type {string}
     * @memberof AccountAllOf
     */
    'sourceName': string;
    /**
     * The unique ID of the identity this account is correlated to
     * @type {string}
     * @memberof AccountAllOf
     */
    'identityId'?: string;
    /**
     * The lifecycle state of the identity this account is correlated to
     * @type {string}
     * @memberof AccountAllOf
     */
    'cloudLifecycleState'?: string | null;
    /**
     * The identity state of the identity this account is correlated to
     * @type {string}
     * @memberof AccountAllOf
     */
    'identityState'?: string | null;
    /**
     * The connection type of the source this account is from
     * @type {string}
     * @memberof AccountAllOf
     */
    'connectionType'?: string | null;
    /**
     * The type of the account
     * @type {string}
     * @memberof AccountAllOf
     */
    'type'?: string | null;
    /**
     * The account attributes that are aggregated
     * @type {{ [key: string]: any; }}
     * @memberof AccountAllOf
     */
    'attributes': {
        [key: string]: any;
    } | null;
    /**
     * Indicates if this account is from an authoritative source
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'authoritative': boolean;
    /**
     * A description of the account
     * @type {string}
     * @memberof AccountAllOf
     */
    'description'?: string | null;
    /**
     * Indicates if the account is currently disabled
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'disabled': boolean;
    /**
     * Indicates if the account is currently locked
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'locked': boolean;
    /**
     * The unique ID of the account generated by the source system
     * @type {string}
     * @memberof AccountAllOf
     */
    'nativeIdentity': string;
    /**
     * If true, this is a user account within IdentityNow.  If false, this is an account from a source system.
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'systemAccount': boolean;
    /**
     * Indicates if this account is not correlated to an identity
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'uncorrelated': boolean;
    /**
     * The unique ID of the account as determined by the account schema
     * @type {string}
     * @memberof AccountAllOf
     */
    'uuid'?: string | null;
    /**
     * Indicates if the account has been manually correlated to an identity
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'manuallyCorrelated': boolean;
    /**
     * Indicates if the account has entitlements
     * @type {boolean}
     * @memberof AccountAllOf
     */
    'hasEntitlements': boolean;
    /**
     *
     * @type {BaseReferenceDto}
     * @memberof AccountAllOf
     */
    'identity'?: BaseReferenceDto;
    /**
     *
     * @type {AccountAllOfSourceOwner}
     * @memberof AccountAllOf
     */
    'sourceOwner'?: AccountAllOfSourceOwner | null;
    /**
     * A string list containing the owning source\'s features
     * @type {string}
     * @memberof AccountAllOf
     */
    'features'?: string | null;
    /**
     * The origin of the account either aggregated or provisioned
     * @type {string}
     * @memberof AccountAllOf
     */
    'origin'?: AccountAllOfOriginEnum;
    /**
     *
     * @type {AccountAllOfOwnerIdentity}
     * @memberof AccountAllOf
     */
    'ownerIdentity'?: AccountAllOfOwnerIdentity | null;
    /**
     *
     * @type {AccountAllOfOwnerGroup}
     * @memberof AccountAllOf
     */
    'ownerGroup'?: AccountAllOfOwnerGroup | null;
}
export declare const AccountAllOfOriginEnum: {
    readonly Aggregated: "AGGREGATED";
    readonly Provisioned: "PROVISIONED";
    readonly Null: "null";
};
export type AccountAllOfOriginEnum = typeof AccountAllOfOriginEnum[keyof typeof AccountAllOfOriginEnum];
/**
 * The governance group who owns this account, typically used for non-human accounts
 * @export
 * @interface AccountAllOfOwnerGroup
 */
export interface AccountAllOfOwnerGroup {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AccountAllOfOwnerGroup
     */
    'type'?: AccountAllOfOwnerGroupTypeEnum;
    /**
     * ID of the governance group
     * @type {string}
     * @memberof AccountAllOfOwnerGroup
     */
    'id'?: string;
    /**
     * Human-readable display name of the governance group
     * @type {string}
     * @memberof AccountAllOfOwnerGroup
     */
    'name'?: string;
}
export declare const AccountAllOfOwnerGroupTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type AccountAllOfOwnerGroupTypeEnum = typeof AccountAllOfOwnerGroupTypeEnum[keyof typeof AccountAllOfOwnerGroupTypeEnum];
/**
 * The identity who owns this account, typically used for non-human accounts
 * @export
 * @interface AccountAllOfOwnerIdentity
 */
export interface AccountAllOfOwnerIdentity {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AccountAllOfOwnerIdentity
     */
    'type'?: AccountAllOfOwnerIdentityTypeEnum;
    /**
     * ID of the identity
     * @type {string}
     * @memberof AccountAllOfOwnerIdentity
     */
    'id'?: string;
    /**
     * Human-readable display name of the identity
     * @type {string}
     * @memberof AccountAllOfOwnerIdentity
     */
    'name'?: string;
}
export declare const AccountAllOfOwnerIdentityTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountAllOfOwnerIdentityTypeEnum = typeof AccountAllOfOwnerIdentityTypeEnum[keyof typeof AccountAllOfOwnerIdentityTypeEnum];
/**
 * The owner of this object.
 * @export
 * @interface AccountAllOfSourceOwner
 */
export interface AccountAllOfSourceOwner {
    /**
     * Type of owner object.
     * @type {string}
     * @memberof AccountAllOfSourceOwner
     */
    'type'?: AccountAllOfSourceOwnerTypeEnum;
    /**
     * Identity id
     * @type {string}
     * @memberof AccountAllOfSourceOwner
     */
    'id'?: string;
    /**
     * Human-readable display name of the owner.
     * @type {string}
     * @memberof AccountAllOfSourceOwner
     */
    'name'?: string;
}
export declare const AccountAllOfSourceOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountAllOfSourceOwnerTypeEnum = typeof AccountAllOfSourceOwnerTypeEnum[keyof typeof AccountAllOfSourceOwnerTypeEnum];
/**
 *
 * @export
 * @interface AccountAttribute
 */
export interface AccountAttribute {
    /**
     * A reference to the source to search for the account
     * @type {string}
     * @memberof AccountAttribute
     */
    'sourceName': string;
    /**
     * The name of the attribute on the account to return. This should match the name of the account attribute name visible in the user interface, or on the source schema.
     * @type {string}
     * @memberof AccountAttribute
     */
    'attributeName': string;
    /**
     * The value of this configuration is a string name of the attribute to use when determining the ordering of returned accounts when there are multiple entries
     * @type {string}
     * @memberof AccountAttribute
     */
    'accountSortAttribute'?: string;
    /**
     * The value of this configuration is a boolean (true/false). Controls the order of the sort when there are multiple accounts. If not defined, the transform will default to false (ascending order)
     * @type {boolean}
     * @memberof AccountAttribute
     */
    'accountSortDescending'?: boolean;
    /**
     * The value of this configuration is a boolean (true/false). Controls which account to source a value from for an attribute.  If this flag is set to true, the transform returns the value from the first account in the list, even if it is null. If it is set to false, the transform returns the first non-null value. If not defined, the transform will default to false
     * @type {boolean}
     * @memberof AccountAttribute
     */
    'accountReturnFirstLink'?: boolean;
    /**
     * This expression queries the database to narrow search results. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the database.  The default filter will always include the source and identity, and any subsequent expressions will be combined in an AND operation to the existing search criteria. Only certain searchable attributes are available:  - `nativeIdentity` - the Account ID  - `displayName` - the Account Name  - `entitlements` - a boolean value to determine if the account has entitlements
     * @type {string}
     * @memberof AccountAttribute
     */
    'accountFilter'?: string;
    /**
     * This expression is used to search and filter accounts in memory. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the returned resultset.  All account attributes are available for filtering as this operation is performed in memory.
     * @type {string}
     * @memberof AccountAttribute
     */
    'accountPropertyFilter'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof AccountAttribute
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof AccountAttribute
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface AccountAttributes
 */
export interface AccountAttributes {
    /**
     * The schema attribute values for the account
     * @type {{ [key: string]: any; }}
     * @memberof AccountAttributes
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface AccountAttributesCreate
 */
export interface AccountAttributesCreate {
    /**
     *
     * @type {AccountAttributesCreateAttributes}
     * @memberof AccountAttributesCreate
     */
    'attributes': AccountAttributesCreateAttributes;
}
/**
 * The schema attribute values for the account
 * @export
 * @interface AccountAttributesCreateAttributes
 */
export interface AccountAttributesCreateAttributes {
    [key: string]: string | any;
    /**
     * Target source to create an account
     * @type {string}
     * @memberof AccountAttributesCreateAttributes
     */
    'sourceId': string;
}
/**
 *
 * @export
 * @interface AccountRequest
 */
export interface AccountRequest {
    /**
     * Unique ID of the account
     * @type {string}
     * @memberof AccountRequest
     */
    'accountId'?: string;
    /**
     *
     * @type {Array<AttributeRequest>}
     * @memberof AccountRequest
     */
    'attributeRequests'?: Array<AttributeRequest>;
    /**
     * The operation that was performed
     * @type {string}
     * @memberof AccountRequest
     */
    'op'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountRequest
     */
    'provisioningTarget'?: AccountSource;
    /**
     *
     * @type {AccountRequestResult}
     * @memberof AccountRequest
     */
    'result'?: AccountRequestResult;
    /**
     *
     * @type {AccountSource}
     * @memberof AccountRequest
     */
    'source'?: AccountSource;
}
/**
 * If an account activity item is associated with an access request, captures details of that request.
 * @export
 * @interface AccountRequestInfo
 */
export interface AccountRequestInfo {
    /**
     * Id of requested object
     * @type {string}
     * @memberof AccountRequestInfo
     */
    'requestedObjectId'?: string;
    /**
     * Human-readable name of requested object
     * @type {string}
     * @memberof AccountRequestInfo
     */
    'requestedObjectName'?: string;
    /**
     *
     * @type {RequestableObjectType}
     * @memberof AccountRequestInfo
     */
    'requestedObjectType'?: RequestableObjectType;
}
/**
 *
 * @export
 * @interface AccountRequestResult
 */
export interface AccountRequestResult {
    /**
     *
     * @type {Array<string>}
     * @memberof AccountRequestResult
     */
    'errors'?: Array<string>;
    /**
     * The status of the account request
     * @type {string}
     * @memberof AccountRequestResult
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountRequestResult
     */
    'ticketId'?: string | null;
}
/**
 *
 * @export
 * @interface AccountSource
 */
export interface AccountSource {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof AccountSource
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof AccountSource
     */
    'name'?: string;
    /**
     * Type of source returned.
     * @type {string}
     * @memberof AccountSource
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface AccountSourceAllOf
 */
export interface AccountSourceAllOf {
    /**
     * Type of source returned.
     * @type {string}
     * @memberof AccountSourceAllOf
     */
    'type'?: string;
}
/**
 * Request used for account enable/disable
 * @export
 * @interface AccountToggleRequest
 */
export interface AccountToggleRequest {
    /**
     * If set, an external process validates that the user wants to proceed with this request.
     * @type {string}
     * @memberof AccountToggleRequest
     */
    'externalVerificationId'?: string;
    /**
     * If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated. Providing \'true\' for an unlocked account will add and process \'Unlock\' operation by the workflow.
     * @type {boolean}
     * @memberof AccountToggleRequest
     */
    'forceProvisioning'?: boolean;
}
/**
 * Request used for account unlock
 * @export
 * @interface AccountUnlockRequest
 */
export interface AccountUnlockRequest {
    /**
     * If set, an external process validates that the user wants to proceed with this request.
     * @type {string}
     * @memberof AccountUnlockRequest
     */
    'externalVerificationId'?: string;
    /**
     * If set, the IDN account is unlocked after the workflow completes.
     * @type {boolean}
     * @memberof AccountUnlockRequest
     */
    'unlockIDNAccount'?: boolean;
    /**
     * If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.
     * @type {boolean}
     * @memberof AccountUnlockRequest
     */
    'forceProvisioning'?: boolean;
}
/**
 *
 * @export
 * @interface AccountUsage
 */
export interface AccountUsage {
    /**
     * The first day of the month for which activity is aggregated.
     * @type {string}
     * @memberof AccountUsage
     */
    'date'?: string;
    /**
     * The number of days within the month that the account was active in a source.
     * @type {number}
     * @memberof AccountUsage
     */
    'count'?: number;
}
/**
 * Accounts async response containing details on started async process
 * @export
 * @interface AccountsAsyncResult
 */
export interface AccountsAsyncResult {
    /**
     * id of the task
     * @type {string}
     * @memberof AccountsAsyncResult
     */
    'id': string;
}
/**
 * Arguments for Account Export (ACCOUNTS)
 * @export
 * @interface AccountsExportReportArguments
 */
export interface AccountsExportReportArguments {
    /**
     * Id of the authoritative source to export related accounts e.g. identities
     * @type {string}
     * @memberof AccountsExportReportArguments
     */
    'application': string;
    /**
     * Name of the authoritative source for accounts export
     * @type {string}
     * @memberof AccountsExportReportArguments
     */
    'sourceName': string;
}
/**
 *
 * @export
 * @interface ActivateCampaignOptions
 */
export interface ActivateCampaignOptions {
    /**
     * The timezone must be in a valid ISO 8601 format. Timezones in ISO 8601 are represented as UTC (represented as \'Z\') or as an offset from UTC. The offset format can be +/-hh:mm, +/-hhmm, or +/-hh.
     * @type {string}
     * @memberof ActivateCampaignOptions
     */
    'timeZone'?: string;
}
/**
 * Insights into account activity
 * @export
 * @interface ActivityInsights
 */
export interface ActivityInsights {
    /**
     * UUID of the account
     * @type {string}
     * @memberof ActivityInsights
     */
    'accountID'?: string;
    /**
     * The number of days of activity
     * @type {number}
     * @memberof ActivityInsights
     */
    'usageDays'?: number;
    /**
     * Status indicating if the activity is complete or unknown
     * @type {string}
     * @memberof ActivityInsights
     */
    'usageDaysState'?: ActivityInsightsUsageDaysStateEnum;
}
export declare const ActivityInsightsUsageDaysStateEnum: {
    readonly Complete: "COMPLETE";
    readonly Unknown: "UNKNOWN";
};
export type ActivityInsightsUsageDaysStateEnum = typeof ActivityInsightsUsageDaysStateEnum[keyof typeof ActivityInsightsUsageDaysStateEnum];
/**
 *
 * @export
 * @interface AdminReviewReassign
 */
export interface AdminReviewReassign {
    /**
     * List of certification IDs to reassign
     * @type {Array<string>}
     * @memberof AdminReviewReassign
     */
    'certificationIds'?: Array<string>;
    /**
     *
     * @type {AdminReviewReassignReassignTo}
     * @memberof AdminReviewReassign
     */
    'reassignTo'?: AdminReviewReassignReassignTo;
    /**
     * Comment to explain why the certification was reassigned
     * @type {string}
     * @memberof AdminReviewReassign
     */
    'reason'?: string;
}
/**
 *
 * @export
 * @interface AdminReviewReassignReassignTo
 */
export interface AdminReviewReassignReassignTo {
    /**
     * The identity ID to which the review is being assigned.
     * @type {string}
     * @memberof AdminReviewReassignReassignTo
     */
    'id'?: string;
    /**
     * The type of the ID provided.
     * @type {string}
     * @memberof AdminReviewReassignReassignTo
     */
    'type'?: AdminReviewReassignReassignToTypeEnum;
}
export declare const AdminReviewReassignReassignToTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AdminReviewReassignReassignToTypeEnum = typeof AdminReviewReassignReassignToTypeEnum[keyof typeof AdminReviewReassignReassignToTypeEnum];
/**
 *
 * @export
 * @interface AggregationResult
 */
export interface AggregationResult {
    /**
     * The document containing the results of the aggregation. This document is controlled by Elasticsearch and depends on the type of aggregation query that is run.  See Elasticsearch [Aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations.html) documentation for information.
     * @type {object}
     * @memberof AggregationResult
     */
    'aggregations'?: object;
    /**
     * The results of the aggregation search query.
     * @type {Array<SearchDocument>}
     * @memberof AggregationResult
     */
    'hits'?: Array<SearchDocument>;
}
/**
 * Enum representing the currently available query languages for aggregations, which are used to perform calculations or groupings on search results.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const AggregationType: {
    readonly Dsl: "DSL";
    readonly Sailpoint: "SAILPOINT";
};
export type AggregationType = typeof AggregationType[keyof typeof AggregationType];
/**
 *
 * @export
 * @interface Aggregations
 */
export interface Aggregations {
    /**
     *
     * @type {NestedAggregation}
     * @memberof Aggregations
     */
    'nested'?: NestedAggregation;
    /**
     *
     * @type {MetricAggregation}
     * @memberof Aggregations
     */
    'metric'?: MetricAggregation;
    /**
     *
     * @type {FilterAggregation}
     * @memberof Aggregations
     */
    'filter'?: FilterAggregation;
    /**
     *
     * @type {BucketAggregation}
     * @memberof Aggregations
     */
    'bucket'?: BucketAggregation;
}
/**
 *
 * @export
 * @interface App
 */
export interface App {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof App
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof App
     */
    'name'?: string;
    /**
     *
     * @type {Reference1}
     * @memberof App
     */
    'source'?: Reference1;
    /**
     *
     * @type {AppAllOfAccount}
     * @memberof App
     */
    'account'?: AppAllOfAccount;
}
/**
 *
 * @export
 * @interface AppAllOf
 */
export interface AppAllOf {
    /**
     *
     * @type {Reference1}
     * @memberof AppAllOf
     */
    'source'?: Reference1;
    /**
     *
     * @type {AppAllOfAccount}
     * @memberof AppAllOf
     */
    'account'?: AppAllOfAccount;
}
/**
 *
 * @export
 * @interface AppAllOfAccount
 */
export interface AppAllOfAccount {
    /**
     * The SailPoint generated unique ID
     * @type {string}
     * @memberof AppAllOfAccount
     */
    'id'?: string;
    /**
     * The account ID generated by the source
     * @type {string}
     * @memberof AppAllOfAccount
     */
    'accountId'?: string;
}
/**
 *
 * @export
 * @interface Approval
 */
export interface Approval {
    /**
     *
     * @type {Array<ApprovalComment>}
     * @memberof Approval
     */
    'comments'?: Array<ApprovalComment>;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof Approval
     */
    'created'?: string | null;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof Approval
     */
    'modified'?: string | null;
    /**
     *
     * @type {AccountSource}
     * @memberof Approval
     */
    'owner'?: AccountSource;
    /**
     * The result of the approval
     * @type {string}
     * @memberof Approval
     */
    'result'?: string;
    /**
     *
     * @type {string}
     * @memberof Approval
     */
    'type'?: string | null;
}
/**
 *
 * @export
 * @interface ApprovalComment
 */
export interface ApprovalComment {
    /**
     * The comment text
     * @type {string}
     * @memberof ApprovalComment
     */
    'comment'?: string;
    /**
     * The name of the commenter
     * @type {string}
     * @memberof ApprovalComment
     */
    'commenter'?: string;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof ApprovalComment
     */
    'date'?: string | null;
}
/**
 *
 * @export
 * @interface ApprovalForwardHistory
 */
export interface ApprovalForwardHistory {
    /**
     * Display name of approver from whom the approval was forwarded.
     * @type {string}
     * @memberof ApprovalForwardHistory
     */
    'oldApproverName'?: string;
    /**
     * Display name of approver to whom the approval was forwarded.
     * @type {string}
     * @memberof ApprovalForwardHistory
     */
    'newApproverName'?: string;
    /**
     * Comment made while forwarding.
     * @type {string}
     * @memberof ApprovalForwardHistory
     */
    'comment'?: string | null;
    /**
     * Time at which approval was forwarded.
     * @type {string}
     * @memberof ApprovalForwardHistory
     */
    'modified'?: string;
    /**
     * Display name of forwarder who forwarded the approval.
     * @type {string}
     * @memberof ApprovalForwardHistory
     */
    'forwarderName'?: string | null;
    /**
     *
     * @type {ReassignmentType}
     * @memberof ApprovalForwardHistory
     */
    'reassignmentType'?: ReassignmentType;
}
/**
 *
 * @export
 * @interface ApprovalItemDetails
 */
export interface ApprovalItemDetails {
    /**
     * The approval item\'s ID
     * @type {string}
     * @memberof ApprovalItemDetails
     */
    'id'?: string;
    /**
     * The account referenced by the approval item
     * @type {string}
     * @memberof ApprovalItemDetails
     */
    'account'?: string | null;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof ApprovalItemDetails
     */
    'application'?: string;
    /**
     * The attribute\'s name
     * @type {string}
     * @memberof ApprovalItemDetails
     */
    'name'?: string | null;
    /**
     * The attribute\'s operation
     * @type {string}
     * @memberof ApprovalItemDetails
     */
    'operation'?: string;
    /**
     * The attribute\'s value
     * @type {string}
     * @memberof ApprovalItemDetails
     */
    'value'?: string | null;
    /**
     *
     * @type {WorkItemState & object}
     * @memberof ApprovalItemDetails
     */
    'state'?: WorkItemState & object;
}
/**
 *
 * @export
 * @interface ApprovalItems
 */
export interface ApprovalItems {
    /**
     * The approval item\'s ID
     * @type {string}
     * @memberof ApprovalItems
     */
    'id'?: string;
    /**
     * The account referenced by the approval item
     * @type {string}
     * @memberof ApprovalItems
     */
    'account'?: string | null;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof ApprovalItems
     */
    'application'?: string;
    /**
     * The attribute\'s name
     * @type {string}
     * @memberof ApprovalItems
     */
    'name'?: string | null;
    /**
     * The attribute\'s operation
     * @type {string}
     * @memberof ApprovalItems
     */
    'operation'?: string;
    /**
     * The attribute\'s value
     * @type {string}
     * @memberof ApprovalItems
     */
    'value'?: string | null;
    /**
     *
     * @type {WorkItemState & object}
     * @memberof ApprovalItems
     */
    'state'?: WorkItemState & object;
}
/**
 *
 * @export
 * @interface ApprovalReminderAndEscalationConfig
 */
export interface ApprovalReminderAndEscalationConfig {
    /**
     * Number of days to wait before the first reminder. If no reminders are configured, then this is the number of days to wait before escalation.
     * @type {number}
     * @memberof ApprovalReminderAndEscalationConfig
     */
    'daysUntilEscalation'?: number | null;
    /**
     * Number of days to wait between reminder notifications.
     * @type {number}
     * @memberof ApprovalReminderAndEscalationConfig
     */
    'daysBetweenReminders'?: number | null;
    /**
     * Maximum number of reminder notification to send to the reviewer before approval escalation.
     * @type {number}
     * @memberof ApprovalReminderAndEscalationConfig
     */
    'maxReminders'?: number | null;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmail}
     * @memberof ApprovalReminderAndEscalationConfig
     */
    'fallbackApproverRef'?: IdentityReferenceWithNameAndEmail | null;
}
/**
 * Describes the individual or group that is responsible for an approval step.
 * @export
 * @enum {string}
 */
export declare const ApprovalScheme: {
    readonly AppOwner: "APP_OWNER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Manager: "MANAGER";
    readonly RoleOwner: "ROLE_OWNER";
    readonly AccessProfileOwner: "ACCESS_PROFILE_OWNER";
    readonly EntitlementOwner: "ENTITLEMENT_OWNER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type ApprovalScheme = typeof ApprovalScheme[keyof typeof ApprovalScheme];
/**
 *
 * @export
 * @interface ApprovalSchemeForRole
 */
export interface ApprovalSchemeForRole {
    /**
     * Describes the individual or group that is responsible for an approval step. Values are as follows.  **OWNER**: Owner of the associated Role  **MANAGER**: Manager of the Identity making the request  **GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field
     * @type {string}
     * @memberof ApprovalSchemeForRole
     */
    'approverType'?: ApprovalSchemeForRoleApproverTypeEnum;
    /**
     * Id of the specific approver, used only when approverType is GOVERNANCE_GROUP
     * @type {string}
     * @memberof ApprovalSchemeForRole
     */
    'approverId'?: string | null;
}
export declare const ApprovalSchemeForRoleApproverTypeEnum: {
    readonly Owner: "OWNER";
    readonly Manager: "MANAGER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type ApprovalSchemeForRoleApproverTypeEnum = typeof ApprovalSchemeForRoleApproverTypeEnum[keyof typeof ApprovalSchemeForRoleApproverTypeEnum];
/**
 * Enum representing the non-employee request approval status
 * @export
 * @enum {string}
 */
export declare const ApprovalStatus: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
    readonly Pending: "PENDING";
    readonly NotReady: "NOT_READY";
    readonly Cancelled: "CANCELLED";
};
export type ApprovalStatus = typeof ApprovalStatus[keyof typeof ApprovalStatus];
/**
 *
 * @export
 * @interface ApprovalStatusDto
 */
export interface ApprovalStatusDto {
    /**
     * True if the request for this item was forwarded from one owner to another.
     * @type {boolean}
     * @memberof ApprovalStatusDto
     */
    'forwarded'?: boolean;
    /**
     *
     * @type {ApprovalStatusDtoOriginalOwner}
     * @memberof ApprovalStatusDto
     */
    'originalOwner'?: ApprovalStatusDtoOriginalOwner;
    /**
     *
     * @type {ApprovalStatusDtoCurrentOwner}
     * @memberof ApprovalStatusDto
     */
    'currentOwner'?: ApprovalStatusDtoCurrentOwner;
    /**
     * Time at which item was modified.
     * @type {string}
     * @memberof ApprovalStatusDto
     */
    'modified'?: string | null;
    /**
     *
     * @type {ManualWorkItemState}
     * @memberof ApprovalStatusDto
     */
    'status'?: ManualWorkItemState;
    /**
     *
     * @type {ApprovalScheme}
     * @memberof ApprovalStatusDto
     */
    'scheme'?: ApprovalScheme;
    /**
     * If the request failed, includes any error messages that were generated.
     * @type {Array<ErrorMessageDto>}
     * @memberof ApprovalStatusDto
     */
    'errorMessages'?: Array<ErrorMessageDto> | null;
    /**
     * Comment, if any, provided by the approver.
     * @type {string}
     * @memberof ApprovalStatusDto
     */
    'comment'?: string | null;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof ApprovalStatusDto
     */
    'removeDate'?: string | null;
}
/**
 *
 * @export
 * @interface ApprovalStatusDtoCurrentOwner
 */
export interface ApprovalStatusDtoCurrentOwner {
    /**
     * DTO type of identity who reviewed the access item request.
     * @type {string}
     * @memberof ApprovalStatusDtoCurrentOwner
     */
    'type'?: ApprovalStatusDtoCurrentOwnerTypeEnum;
    /**
     * ID of identity who reviewed the access item request.
     * @type {string}
     * @memberof ApprovalStatusDtoCurrentOwner
     */
    'id'?: string;
    /**
     * Human-readable display name of identity who reviewed the access item request.
     * @type {string}
     * @memberof ApprovalStatusDtoCurrentOwner
     */
    'name'?: string;
}
export declare const ApprovalStatusDtoCurrentOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ApprovalStatusDtoCurrentOwnerTypeEnum = typeof ApprovalStatusDtoCurrentOwnerTypeEnum[keyof typeof ApprovalStatusDtoCurrentOwnerTypeEnum];
/**
 * Identity of orginal approval owner.
 * @export
 * @interface ApprovalStatusDtoOriginalOwner
 */
export interface ApprovalStatusDtoOriginalOwner {
    /**
     * DTO type of original approval owner\'s identity.
     * @type {string}
     * @memberof ApprovalStatusDtoOriginalOwner
     */
    'type'?: ApprovalStatusDtoOriginalOwnerTypeEnum;
    /**
     * ID of original approval owner\'s identity.
     * @type {string}
     * @memberof ApprovalStatusDtoOriginalOwner
     */
    'id'?: string;
    /**
     * Display name of original approval owner.
     * @type {string}
     * @memberof ApprovalStatusDtoOriginalOwner
     */
    'name'?: string;
}
export declare const ApprovalStatusDtoOriginalOwnerTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type ApprovalStatusDtoOriginalOwnerTypeEnum = typeof ApprovalStatusDtoOriginalOwnerTypeEnum[keyof typeof ApprovalStatusDtoOriginalOwnerTypeEnum];
/**
 *
 * @export
 * @interface ApprovalSummary
 */
export interface ApprovalSummary {
    /**
     * The number of pending access requests approvals.
     * @type {number}
     * @memberof ApprovalSummary
     */
    'pending'?: number;
    /**
     * The number of approved access requests approvals.
     * @type {number}
     * @memberof ApprovalSummary
     */
    'approved'?: number;
    /**
     * The number of rejected access requests approvals.
     * @type {number}
     * @memberof ApprovalSummary
     */
    'rejected'?: number;
}
/**
 *
 * @export
 * @interface ArrayInner
 */
export interface ArrayInner {
}
/**
 *
 * @export
 * @interface AttributeDefinition
 */
export interface AttributeDefinition {
    /**
     * The name of the attribute.
     * @type {string}
     * @memberof AttributeDefinition
     */
    'name'?: string;
    /**
     *
     * @type {AttributeDefinitionType}
     * @memberof AttributeDefinition
     */
    'type'?: AttributeDefinitionType;
    /**
     *
     * @type {AttributeDefinitionSchema}
     * @memberof AttributeDefinition
     */
    'schema'?: AttributeDefinitionSchema;
    /**
     * A human-readable description of the attribute.
     * @type {string}
     * @memberof AttributeDefinition
     */
    'description'?: string;
    /**
     * Flag indicating whether or not the attribute is multi-valued.
     * @type {boolean}
     * @memberof AttributeDefinition
     */
    'isMulti'?: boolean;
    /**
     * Flag indicating whether or not the attribute is an entitlement.
     * @type {boolean}
     * @memberof AttributeDefinition
     */
    'isEntitlement'?: boolean;
    /**
     * Flag indicating whether or not the attribute represents a group. This can only be `true` if `isEntitlement` is also `true` **and** there is a schema defined for the attribute..
     * @type {boolean}
     * @memberof AttributeDefinition
     */
    'isGroup'?: boolean;
}
/**
 * A reference to the schema on the source to the attribute values map to.
 * @export
 * @interface AttributeDefinitionSchema
 */
export interface AttributeDefinitionSchema {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AttributeDefinitionSchema
     */
    'type'?: AttributeDefinitionSchemaTypeEnum;
    /**
     * The object ID this reference applies to.
     * @type {string}
     * @memberof AttributeDefinitionSchema
     */
    'id'?: string;
    /**
     * The human-readable display name of the object.
     * @type {string}
     * @memberof AttributeDefinitionSchema
     */
    'name'?: string;
}
export declare const AttributeDefinitionSchemaTypeEnum: {
    readonly ConnectorSchema: "CONNECTOR_SCHEMA";
};
export type AttributeDefinitionSchemaTypeEnum = typeof AttributeDefinitionSchemaTypeEnum[keyof typeof AttributeDefinitionSchemaTypeEnum];
/**
 * The underlying type of the value which an AttributeDefinition represents.
 * @export
 * @enum {string}
 */
export declare const AttributeDefinitionType: {
    readonly String: "STRING";
    readonly Long: "LONG";
    readonly Int: "INT";
    readonly Boolean: "BOOLEAN";
};
export type AttributeDefinitionType = typeof AttributeDefinitionType[keyof typeof AttributeDefinitionType];
/**
 *
 * @export
 * @interface AttributeRequest
 */
export interface AttributeRequest {
    /**
     * Attribute name.
     * @type {string}
     * @memberof AttributeRequest
     */
    'name'?: string;
    /**
     * Operation to perform on attribute.
     * @type {string}
     * @memberof AttributeRequest
     */
    'op'?: string;
    /**
     * Value of attribute.
     * @type {string}
     * @memberof AttributeRequest
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     * Tenant name.
     * @type {string}
     * @memberof AuthUser
     */
    'tenant'?: string;
    /**
     * Identity ID.
     * @type {string}
     * @memberof AuthUser
     */
    'id'?: string;
    /**
     * Identity\'s unique identitifier.
     * @type {string}
     * @memberof AuthUser
     */
    'uid'?: string;
    /**
     * ID of the auth profile associated with the auth user.
     * @type {string}
     * @memberof AuthUser
     */
    'profile'?: string;
    /**
     * Auth user\'s employee number.
     * @type {string}
     * @memberof AuthUser
     */
    'identificationNumber'?: string;
    /**
     * Auth user\'s email.
     * @type {string}
     * @memberof AuthUser
     */
    'email'?: string;
    /**
     * Auth user\'s phone number.
     * @type {string}
     * @memberof AuthUser
     */
    'phone'?: string;
    /**
     * Auth user\'s work phone number.
     * @type {string}
     * @memberof AuthUser
     */
    'workPhone'?: string;
    /**
     * Auth user\'s personal email.
     * @type {string}
     * @memberof AuthUser
     */
    'personalEmail'?: string;
    /**
     * Auth user\'s first name.
     * @type {string}
     * @memberof AuthUser
     */
    'firstname'?: string;
    /**
     * Auth user\'s last name.
     * @type {string}
     * @memberof AuthUser
     */
    'lastname'?: string;
    /**
     * Auth user\'s name in displayed format.
     * @type {string}
     * @memberof AuthUser
     */
    'displayName'?: string;
    /**
     * Auth user\'s alias.
     * @type {string}
     * @memberof AuthUser
     */
    'alias'?: string;
    /**
     * Date of last password change.
     * @type {string}
     * @memberof AuthUser
     */
    'lastPasswordChangeDate'?: string;
    /**
     * Timestamp of the last login (long type value).
     * @type {number}
     * @memberof AuthUser
     */
    'lastLoginTimestamp'?: number;
    /**
     * Timestamp of the current login (long type value).
     * @type {number}
     * @memberof AuthUser
     */
    'currentLoginTimestamp'?: number;
    /**
     * Array of the auth user\'s capabilities.
     * @type {Array<string>}
     * @memberof AuthUser
     */
    'capabilities'?: Array<AuthUserCapabilitiesEnum>;
}
export declare const AuthUserCapabilitiesEnum: {
    readonly CertAdmin: "CERT_ADMIN";
    readonly CloudGovAdmin: "CLOUD_GOV_ADMIN";
    readonly CloudGovUser: "CLOUD_GOV_USER";
    readonly Helpdesk: "HELPDESK";
    readonly OrgAdmin: "ORG_ADMIN";
    readonly ReportAdmin: "REPORT_ADMIN";
    readonly RoleAdmin: "ROLE_ADMIN";
    readonly RoleSubadmin: "ROLE_SUBADMIN";
    readonly SaasManagementAdmin: "SAAS_MANAGEMENT_ADMIN";
    readonly SaasManagementReader: "SAAS_MANAGEMENT_READER";
    readonly SourceAdmin: "SOURCE_ADMIN";
    readonly SourceSubadmin: "SOURCE_SUBADMIN";
    readonly DasuiAdministrator: "das:ui-administrator";
    readonly DasuiComplianceManager: "das:ui-compliance_manager";
    readonly DasuiAuditor: "das:ui-auditor";
    readonly DasuiDataScope: "das:ui-data-scope";
    readonly SpaicDashboardRead: "sp:aic-dashboard-read";
    readonly SpaicDashboardWrite: "sp:aic-dashboard-write";
    readonly SpuiConfigHubAdmin: "sp:ui-config-hub-admin";
    readonly SpuiConfigHubBackupAdmin: "sp:ui-config-hub-backup-admin";
    readonly SpuiConfigHubRead: "sp:ui-config-hub-read";
};
export type AuthUserCapabilitiesEnum = typeof AuthUserCapabilitiesEnum[keyof typeof AuthUserCapabilitiesEnum];
/**
 *
 * @export
 * @interface Base64Decode
 */
export interface Base64Decode {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Base64Decode
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Base64Decode
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Base64Encode
 */
export interface Base64Encode {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Base64Encode
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Base64Encode
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface BaseAccess
 */
export interface BaseAccess {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof BaseAccess
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof BaseAccess
     */
    'name'?: string;
    /**
     * Access item\'s description.
     * @type {string}
     * @memberof BaseAccess
     */
    'description'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof BaseAccess
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof BaseAccess
     */
    'modified'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof BaseAccess
     */
    'synced'?: string | null;
    /**
     * Indicates whether the access item is currently enabled.
     * @type {boolean}
     * @memberof BaseAccess
     */
    'enabled'?: boolean;
    /**
     * Indicates whether the access item can be requested.
     * @type {boolean}
     * @memberof BaseAccess
     */
    'requestable'?: boolean;
    /**
     * Indicates whether comments are required for requests to access the item.
     * @type {boolean}
     * @memberof BaseAccess
     */
    'requestCommentsRequired'?: boolean;
    /**
     *
     * @type {BaseAccessAllOfOwner}
     * @memberof BaseAccess
     */
    'owner'?: BaseAccessAllOfOwner;
}
/**
 *
 * @export
 * @interface BaseAccessAllOf
 */
export interface BaseAccessAllOf {
    /**
     * Access item\'s description.
     * @type {string}
     * @memberof BaseAccessAllOf
     */
    'description'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof BaseAccessAllOf
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof BaseAccessAllOf
     */
    'modified'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof BaseAccessAllOf
     */
    'synced'?: string | null;
    /**
     * Indicates whether the access item is currently enabled.
     * @type {boolean}
     * @memberof BaseAccessAllOf
     */
    'enabled'?: boolean;
    /**
     * Indicates whether the access item can be requested.
     * @type {boolean}
     * @memberof BaseAccessAllOf
     */
    'requestable'?: boolean;
    /**
     * Indicates whether comments are required for requests to access the item.
     * @type {boolean}
     * @memberof BaseAccessAllOf
     */
    'requestCommentsRequired'?: boolean;
    /**
     *
     * @type {BaseAccessAllOfOwner}
     * @memberof BaseAccessAllOf
     */
    'owner'?: BaseAccessAllOfOwner;
}
/**
 * Owner\'s identity.
 * @export
 * @interface BaseAccessAllOfOwner
 */
export interface BaseAccessAllOfOwner {
    /**
     * Owner\'s DTO type.
     * @type {string}
     * @memberof BaseAccessAllOfOwner
     */
    'type'?: BaseAccessAllOfOwnerTypeEnum;
    /**
     * Owner\'s identity ID.
     * @type {string}
     * @memberof BaseAccessAllOfOwner
     */
    'id'?: string;
    /**
     * Owner\'s display name.
     * @type {string}
     * @memberof BaseAccessAllOfOwner
     */
    'name'?: string;
    /**
     * Owner\'s email.
     * @type {string}
     * @memberof BaseAccessAllOfOwner
     */
    'email'?: string;
}
export declare const BaseAccessAllOfOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type BaseAccessAllOfOwnerTypeEnum = typeof BaseAccessAllOfOwnerTypeEnum[keyof typeof BaseAccessAllOfOwnerTypeEnum];
/**
 *
 * @export
 * @interface BaseAccessProfile
 */
export interface BaseAccessProfile {
    /**
     * Access profile\'s unique ID.
     * @type {string}
     * @memberof BaseAccessProfile
     */
    'id'?: string;
    /**
     * Access profile\'s display name.
     * @type {string}
     * @memberof BaseAccessProfile
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface BaseAccount
 */
export interface BaseAccount {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof BaseAccount
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof BaseAccount
     */
    'name'?: string;
    /**
     * Account ID.
     * @type {string}
     * @memberof BaseAccount
     */
    'accountId'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof BaseAccount
     */
    'source'?: AccountSource;
    /**
     * Indicates whether the account is disabled.
     * @type {boolean}
     * @memberof BaseAccount
     */
    'disabled'?: boolean;
    /**
     * Indicates whether the account is locked.
     * @type {boolean}
     * @memberof BaseAccount
     */
    'locked'?: boolean;
    /**
     * Indicates whether the account is privileged.
     * @type {boolean}
     * @memberof BaseAccount
     */
    'privileged'?: boolean;
    /**
     * Indicates whether the account has been manually correlated to an identity.
     * @type {boolean}
     * @memberof BaseAccount
     */
    'manuallyCorrelated'?: boolean;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof BaseAccount
     */
    'passwordLastSet'?: string | null;
    /**
     * Map or dictionary of key/value pairs.
     * @type {{ [key: string]: any; }}
     * @memberof BaseAccount
     */
    'entitlementAttributes'?: {
        [key: string]: any;
    } | null;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof BaseAccount
     */
    'created'?: string | null;
}
/**
 *
 * @export
 * @interface BaseAccountAllOf
 */
export interface BaseAccountAllOf {
    /**
     * Account ID.
     * @type {string}
     * @memberof BaseAccountAllOf
     */
    'accountId'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof BaseAccountAllOf
     */
    'source'?: AccountSource;
    /**
     * Indicates whether the account is disabled.
     * @type {boolean}
     * @memberof BaseAccountAllOf
     */
    'disabled'?: boolean;
    /**
     * Indicates whether the account is locked.
     * @type {boolean}
     * @memberof BaseAccountAllOf
     */
    'locked'?: boolean;
    /**
     * Indicates whether the account is privileged.
     * @type {boolean}
     * @memberof BaseAccountAllOf
     */
    'privileged'?: boolean;
    /**
     * Indicates whether the account has been manually correlated to an identity.
     * @type {boolean}
     * @memberof BaseAccountAllOf
     */
    'manuallyCorrelated'?: boolean;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof BaseAccountAllOf
     */
    'passwordLastSet'?: string | null;
    /**
     * Map or dictionary of key/value pairs.
     * @type {{ [key: string]: any; }}
     * @memberof BaseAccountAllOf
     */
    'entitlementAttributes'?: {
        [key: string]: any;
    } | null;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof BaseAccountAllOf
     */
    'created'?: string | null;
}
/**
 *
 * @export
 * @interface BaseCommonDto
 */
export interface BaseCommonDto {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof BaseCommonDto
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof BaseCommonDto
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof BaseCommonDto
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof BaseCommonDto
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface BaseDocument
 */
export interface BaseDocument {
    /**
     *
     * @type {string}
     * @memberof BaseDocument
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof BaseDocument
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof BaseDocument
     */
    '_type': DocumentType;
}
/**
 *
 * @export
 * @interface BaseEntitlement
 */
export interface BaseEntitlement {
    /**
     * Indicates whether the entitlement has permissions.
     * @type {boolean}
     * @memberof BaseEntitlement
     */
    'hasPermissions'?: boolean;
    /**
     * Entitlement\'s description.
     * @type {string}
     * @memberof BaseEntitlement
     */
    'description'?: string;
    /**
     * Entitlement attribute\'s name.
     * @type {string}
     * @memberof BaseEntitlement
     */
    'attribute'?: string;
    /**
     * Entitlement\'s value.
     * @type {string}
     * @memberof BaseEntitlement
     */
    'value'?: string;
    /**
     * Entitlement\'s schema.
     * @type {string}
     * @memberof BaseEntitlement
     */
    'schema'?: string;
    /**
     * Indicates whether the entitlement is privileged.
     * @type {boolean}
     * @memberof BaseEntitlement
     */
    'privileged'?: boolean;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof BaseEntitlement
     */
    'id'?: string;
    /**
     * Entitlement\'s name.
     * @type {string}
     * @memberof BaseEntitlement
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface BaseReferenceDto
 */
export interface BaseReferenceDto {
    /**
     *
     * @type {DtoType}
     * @memberof BaseReferenceDto
     */
    'type'?: DtoType;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof BaseReferenceDto
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof BaseReferenceDto
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface BaseSegment
 */
export interface BaseSegment {
    /**
     * Segment\'s unique ID.
     * @type {string}
     * @memberof BaseSegment
     */
    'id'?: string;
    /**
     * Segment\'s display name.
     * @type {string}
     * @memberof BaseSegment
     */
    'name'?: string;
}
/**
 * Before Provisioning Rule.
 * @export
 * @interface BeforeProvisioningRuleDto
 */
export interface BeforeProvisioningRuleDto {
    /**
     * Before Provisioning Rule DTO type.
     * @type {string}
     * @memberof BeforeProvisioningRuleDto
     */
    'type'?: BeforeProvisioningRuleDtoTypeEnum;
    /**
     * Before Provisioning Rule ID.
     * @type {string}
     * @memberof BeforeProvisioningRuleDto
     */
    'id'?: string;
    /**
     * Rule display name.
     * @type {string}
     * @memberof BeforeProvisioningRuleDto
     */
    'name'?: string;
}
export declare const BeforeProvisioningRuleDtoTypeEnum: {
    readonly Rule: "RULE";
};
export type BeforeProvisioningRuleDtoTypeEnum = typeof BeforeProvisioningRuleDtoTypeEnum[keyof typeof BeforeProvisioningRuleDtoTypeEnum];
/**
 *
 * @export
 * @interface Bound
 */
export interface Bound {
    /**
     * The value of the range\'s endpoint.
     * @type {string}
     * @memberof Bound
     */
    'value': string;
    /**
     * Indicates if the endpoint is included in the range.
     * @type {boolean}
     * @memberof Bound
     */
    'inclusive'?: boolean;
}
/**
 *
 * @export
 * @interface BrandingItem
 */
export interface BrandingItem {
    /**
     * name of branding item
     * @type {string}
     * @memberof BrandingItem
     */
    'name'?: string;
    /**
     * product name
     * @type {string}
     * @memberof BrandingItem
     */
    'productName'?: string | null;
    /**
     * hex value of color for action button
     * @type {string}
     * @memberof BrandingItem
     */
    'actionButtonColor'?: string | null;
    /**
     * hex value of color for link
     * @type {string}
     * @memberof BrandingItem
     */
    'activeLinkColor'?: string | null;
    /**
     * hex value of color for navigation bar
     * @type {string}
     * @memberof BrandingItem
     */
    'navigationColor'?: string | null;
    /**
     * email from address
     * @type {string}
     * @memberof BrandingItem
     */
    'emailFromAddress'?: string | null;
    /**
     * url to standard logo
     * @type {string}
     * @memberof BrandingItem
     */
    'standardLogoURL'?: string | null;
    /**
     * login information message
     * @type {string}
     * @memberof BrandingItem
     */
    'loginInformationalMessage'?: string | null;
}
/**
 *
 * @export
 * @interface BrandingItemCreate
 */
export interface BrandingItemCreate {
    /**
     * name of branding item
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'name': string;
    /**
     * product name
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'productName': string | null;
    /**
     * hex value of color for action button
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'actionButtonColor'?: string;
    /**
     * hex value of color for link
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'activeLinkColor'?: string;
    /**
     * hex value of color for navigation bar
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'navigationColor'?: string;
    /**
     * email from address
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'emailFromAddress'?: string;
    /**
     * login information message
     * @type {string}
     * @memberof BrandingItemCreate
     */
    'loginInformationalMessage'?: string;
    /**
     * png file with logo
     * @type {any}
     * @memberof BrandingItemCreate
     */
    'fileStandard'?: any;
}
/**
 * The bucket to group the results of the aggregation query by.
 * @export
 * @interface BucketAggregation
 */
export interface BucketAggregation {
    /**
     * The name of the bucket aggregate to be included in the result.
     * @type {string}
     * @memberof BucketAggregation
     */
    'name': string;
    /**
     *
     * @type {BucketType}
     * @memberof BucketAggregation
     */
    'type'?: BucketType;
    /**
     * The field to bucket on. Prefix the field name with \'@\' to reference a nested object.
     * @type {string}
     * @memberof BucketAggregation
     */
    'field': string;
    /**
     * Maximum number of buckets to include.
     * @type {number}
     * @memberof BucketAggregation
     */
    'size'?: number;
    /**
     * Minimum number of documents a bucket should have.
     * @type {number}
     * @memberof BucketAggregation
     */
    'minDocCount'?: number;
}
/**
 * Enum representing the currently supported bucket aggregation types. Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const BucketType: {
    readonly Terms: "TERMS";
};
export type BucketType = typeof BucketType[keyof typeof BucketType];
/**
 *
 * @export
 * @interface BulkAddTaggedObject
 */
export interface BulkAddTaggedObject {
    /**
     *
     * @type {Array<TaggedObjectDto>}
     * @memberof BulkAddTaggedObject
     */
    'objectRefs'?: Array<TaggedObjectDto>;
    /**
     * Label to be applied to an Object
     * @type {Array<string>}
     * @memberof BulkAddTaggedObject
     */
    'tags'?: Array<string>;
    /**
     * If APPEND, tags are appended to the list of tags for the object. A 400 error is returned if this would add duplicate tags to the object.  If MERGE, tags are merged with the existing tags. Duplicate tags are silently ignored.
     * @type {string}
     * @memberof BulkAddTaggedObject
     */
    'operation'?: BulkAddTaggedObjectOperationEnum;
}
export declare const BulkAddTaggedObjectOperationEnum: {
    readonly Append: "APPEND";
    readonly Merge: "MERGE";
};
export type BulkAddTaggedObjectOperationEnum = typeof BulkAddTaggedObjectOperationEnum[keyof typeof BulkAddTaggedObjectOperationEnum];
/**
 *
 * @export
 * @interface BulkRemoveTaggedObject
 */
export interface BulkRemoveTaggedObject {
    /**
     *
     * @type {Array<TaggedObjectDto>}
     * @memberof BulkRemoveTaggedObject
     */
    'objectRefs'?: Array<TaggedObjectDto>;
    /**
     * Label to be applied to an Object
     * @type {Array<string>}
     * @memberof BulkRemoveTaggedObject
     */
    'tags'?: Array<string>;
}
/**
 *
 * @export
 * @interface BulkTaggedObjectResponse
 */
export interface BulkTaggedObjectResponse {
    /**
     *
     * @type {Array<TaggedObjectDto>}
     * @memberof BulkTaggedObjectResponse
     */
    'objectRefs'?: Array<TaggedObjectDto>;
    /**
     * Label to be applied to an Object
     * @type {Array<string>}
     * @memberof BulkTaggedObjectResponse
     */
    'tags'?: Array<string>;
}
/**
 *
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * Id of the campaign
     * @type {string}
     * @memberof Campaign
     */
    'id'?: string;
    /**
     * The campaign name. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof Campaign
     */
    'name': string;
    /**
     * The campaign description. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof Campaign
     */
    'description': string;
    /**
     * The campaign\'s completion deadline.  This date must be in the future in order to activate the campaign.  If you try to activate a campaign with a deadline of today or in the past, you will receive a 400 error response.
     * @type {string}
     * @memberof Campaign
     */
    'deadline'?: string;
    /**
     * The type of campaign. Could be extended in the future.
     * @type {string}
     * @memberof Campaign
     */
    'type': CampaignTypeEnum;
    /**
     * Enables email notification for this campaign
     * @type {boolean}
     * @memberof Campaign
     */
    'emailNotificationEnabled'?: boolean;
    /**
     * Allows auto revoke for this campaign
     * @type {boolean}
     * @memberof Campaign
     */
    'autoRevokeAllowed'?: boolean;
    /**
     * Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off then campaigns generated from this template will indicate false. The real value will then be returned if IAI is ever enabled for the org in the future.
     * @type {boolean}
     * @memberof Campaign
     */
    'recommendationsEnabled'?: boolean;
    /**
     * The campaign\'s current status.
     * @type {string}
     * @memberof Campaign
     */
    'status'?: CampaignStatusEnum;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof Campaign
     */
    'correlatedStatus'?: CampaignCorrelatedStatusEnum;
    /**
     * Created time of the campaign
     * @type {string}
     * @memberof Campaign
     */
    'created'?: string;
    /**
     * The total number of certifications in this campaign.
     * @type {number}
     * @memberof Campaign
     */
    'totalCertifications'?: number;
    /**
     * The number of completed certifications in this campaign.
     * @type {number}
     * @memberof Campaign
     */
    'completedCertifications'?: number;
    /**
     * A list of errors and warnings that have accumulated.
     * @type {Array<CampaignAlert>}
     * @memberof Campaign
     */
    'alerts'?: Array<CampaignAlert>;
    /**
     * Modified time of the campaign
     * @type {string}
     * @memberof Campaign
     */
    'modified'?: string;
    /**
     *
     * @type {CampaignAllOfFilter}
     * @memberof Campaign
     */
    'filter'?: CampaignAllOfFilter;
    /**
     * Determines if comments on sunset date changes are required.
     * @type {boolean}
     * @memberof Campaign
     */
    'sunsetCommentsRequired'?: boolean;
    /**
     *
     * @type {CampaignAllOfSourceOwnerCampaignInfo}
     * @memberof Campaign
     */
    'sourceOwnerCampaignInfo'?: CampaignAllOfSourceOwnerCampaignInfo;
    /**
     *
     * @type {CampaignAllOfSearchCampaignInfo}
     * @memberof Campaign
     */
    'searchCampaignInfo'?: CampaignAllOfSearchCampaignInfo;
    /**
     *
     * @type {CampaignAllOfRoleCompositionCampaignInfo}
     * @memberof Campaign
     */
    'roleCompositionCampaignInfo'?: CampaignAllOfRoleCompositionCampaignInfo;
    /**
     * A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).
     * @type {Array<CampaignAllOfSourcesWithOrphanEntitlements>}
     * @memberof Campaign
     */
    'sourcesWithOrphanEntitlements'?: Array<CampaignAllOfSourcesWithOrphanEntitlements>;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof Campaign
     */
    'mandatoryCommentRequirement'?: CampaignMandatoryCommentRequirementEnum;
}
export declare const CampaignTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type CampaignTypeEnum = typeof CampaignTypeEnum[keyof typeof CampaignTypeEnum];
export declare const CampaignStatusEnum: {
    readonly Pending: "PENDING";
    readonly Staged: "STAGED";
    readonly Canceling: "CANCELING";
    readonly Activating: "ACTIVATING";
    readonly Active: "ACTIVE";
    readonly Completing: "COMPLETING";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
    readonly Archived: "ARCHIVED";
};
export type CampaignStatusEnum = typeof CampaignStatusEnum[keyof typeof CampaignStatusEnum];
export declare const CampaignCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type CampaignCorrelatedStatusEnum = typeof CampaignCorrelatedStatusEnum[keyof typeof CampaignCorrelatedStatusEnum];
export declare const CampaignMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type CampaignMandatoryCommentRequirementEnum = typeof CampaignMandatoryCommentRequirementEnum[keyof typeof CampaignMandatoryCommentRequirementEnum];
/**
 *
 * @export
 * @interface CampaignAlert
 */
export interface CampaignAlert {
    /**
     * Denotes the level of the message
     * @type {string}
     * @memberof CampaignAlert
     */
    'level'?: CampaignAlertLevelEnum;
    /**
     *
     * @type {Array<ErrorMessageDto>}
     * @memberof CampaignAlert
     */
    'localizations'?: Array<ErrorMessageDto>;
}
export declare const CampaignAlertLevelEnum: {
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
};
export type CampaignAlertLevelEnum = typeof CampaignAlertLevelEnum[keyof typeof CampaignAlertLevelEnum];
/**
 *
 * @export
 * @interface CampaignAllOf
 */
export interface CampaignAllOf {
    /**
     * Modified time of the campaign
     * @type {string}
     * @memberof CampaignAllOf
     */
    'modified'?: string;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof CampaignAllOf
     */
    'correlatedStatus'?: CampaignAllOfCorrelatedStatusEnum;
    /**
     *
     * @type {CampaignAllOfFilter}
     * @memberof CampaignAllOf
     */
    'filter'?: CampaignAllOfFilter;
    /**
     * Determines if comments on sunset date changes are required.
     * @type {boolean}
     * @memberof CampaignAllOf
     */
    'sunsetCommentsRequired'?: boolean;
    /**
     *
     * @type {CampaignAllOfSourceOwnerCampaignInfo}
     * @memberof CampaignAllOf
     */
    'sourceOwnerCampaignInfo'?: CampaignAllOfSourceOwnerCampaignInfo;
    /**
     *
     * @type {CampaignAllOfSearchCampaignInfo}
     * @memberof CampaignAllOf
     */
    'searchCampaignInfo'?: CampaignAllOfSearchCampaignInfo;
    /**
     *
     * @type {CampaignAllOfRoleCompositionCampaignInfo}
     * @memberof CampaignAllOf
     */
    'roleCompositionCampaignInfo'?: CampaignAllOfRoleCompositionCampaignInfo;
    /**
     * A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).
     * @type {Array<CampaignAllOfSourcesWithOrphanEntitlements>}
     * @memberof CampaignAllOf
     */
    'sourcesWithOrphanEntitlements'?: Array<CampaignAllOfSourcesWithOrphanEntitlements>;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof CampaignAllOf
     */
    'mandatoryCommentRequirement'?: CampaignAllOfMandatoryCommentRequirementEnum;
}
export declare const CampaignAllOfCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type CampaignAllOfCorrelatedStatusEnum = typeof CampaignAllOfCorrelatedStatusEnum[keyof typeof CampaignAllOfCorrelatedStatusEnum];
export declare const CampaignAllOfMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type CampaignAllOfMandatoryCommentRequirementEnum = typeof CampaignAllOfMandatoryCommentRequirementEnum[keyof typeof CampaignAllOfMandatoryCommentRequirementEnum];
/**
 * Determines which items will be included in this campaign. The default campaign filter is used if this field is left blank.
 * @export
 * @interface CampaignAllOfFilter
 */
export interface CampaignAllOfFilter {
    /**
     * The ID of whatever type of filter is being used.
     * @type {string}
     * @memberof CampaignAllOfFilter
     */
    'id'?: string;
    /**
     * Type of the filter
     * @type {string}
     * @memberof CampaignAllOfFilter
     */
    'type'?: CampaignAllOfFilterTypeEnum;
    /**
     * Name of the filter
     * @type {string}
     * @memberof CampaignAllOfFilter
     */
    'name'?: string;
}
export declare const CampaignAllOfFilterTypeEnum: {
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly Rule: "RULE";
};
export type CampaignAllOfFilterTypeEnum = typeof CampaignAllOfFilterTypeEnum[keyof typeof CampaignAllOfFilterTypeEnum];
/**
 * Optional configuration options for role composition campaigns.
 * @export
 * @interface CampaignAllOfRoleCompositionCampaignInfo
 */
export interface CampaignAllOfRoleCompositionCampaignInfo {
    /**
     *
     * @type {CampaignAllOfSearchCampaignInfoReviewer}
     * @memberof CampaignAllOfRoleCompositionCampaignInfo
     */
    'reviewer'?: CampaignAllOfSearchCampaignInfoReviewer;
    /**
     * Optional list of roles to include in this campaign. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.
     * @type {Array<string>}
     * @memberof CampaignAllOfRoleCompositionCampaignInfo
     */
    'roleIds'?: Array<string>;
    /**
     *
     * @type {CampaignAllOfRoleCompositionCampaignInfoRemediatorRef}
     * @memberof CampaignAllOfRoleCompositionCampaignInfo
     */
    'remediatorRef': CampaignAllOfRoleCompositionCampaignInfoRemediatorRef;
    /**
     * Optional search query to scope this campaign to a set of roles. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.
     * @type {string}
     * @memberof CampaignAllOfRoleCompositionCampaignInfo
     */
    'query'?: string;
    /**
     * Describes this role composition campaign. Intended for storing the query used, and possibly the number of roles selected/available.
     * @type {string}
     * @memberof CampaignAllOfRoleCompositionCampaignInfo
     */
    'description'?: string;
}
/**
 * This determines who remediation tasks will be assigned to. Remediation tasks are created for each revoke decision on items in the campaign. The only legal remediator type is \'IDENTITY\', and the chosen identity must be a Role Admin or Org Admin.
 * @export
 * @interface CampaignAllOfRoleCompositionCampaignInfoRemediatorRef
 */
export interface CampaignAllOfRoleCompositionCampaignInfoRemediatorRef {
    /**
     * Legal Remediator Type
     * @type {string}
     * @memberof CampaignAllOfRoleCompositionCampaignInfoRemediatorRef
     */
    'type': CampaignAllOfRoleCompositionCampaignInfoRemediatorRefTypeEnum;
    /**
     * The ID of the remediator.
     * @type {string}
     * @memberof CampaignAllOfRoleCompositionCampaignInfoRemediatorRef
     */
    'id': string;
    /**
     * The name of the remediator.
     * @type {string}
     * @memberof CampaignAllOfRoleCompositionCampaignInfoRemediatorRef
     */
    'name'?: string;
}
export declare const CampaignAllOfRoleCompositionCampaignInfoRemediatorRefTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CampaignAllOfRoleCompositionCampaignInfoRemediatorRefTypeEnum = typeof CampaignAllOfRoleCompositionCampaignInfoRemediatorRefTypeEnum[keyof typeof CampaignAllOfRoleCompositionCampaignInfoRemediatorRefTypeEnum];
/**
 * Must be set only if the campaign type is SEARCH.
 * @export
 * @interface CampaignAllOfSearchCampaignInfo
 */
export interface CampaignAllOfSearchCampaignInfo {
    /**
     * The type of search campaign represented.
     * @type {string}
     * @memberof CampaignAllOfSearchCampaignInfo
     */
    'type': CampaignAllOfSearchCampaignInfoTypeEnum;
    /**
     * Describes this search campaign. Intended for storing the query used, and possibly the number of identities selected/available.
     * @type {string}
     * @memberof CampaignAllOfSearchCampaignInfo
     */
    'description'?: string;
    /**
     *
     * @type {CampaignAllOfSearchCampaignInfoReviewer}
     * @memberof CampaignAllOfSearchCampaignInfo
     */
    'reviewer'?: CampaignAllOfSearchCampaignInfoReviewer;
    /**
     * The scope for the campaign. The campaign will cover identities returned by the query and identities that have access items returned by the query. One of `query` or `identityIds` must be set.
     * @type {string}
     * @memberof CampaignAllOfSearchCampaignInfo
     */
    'query'?: string;
    /**
     * A direct list of identities to include in this campaign. One of `identityIds` or `query` must be set.
     * @type {Array<string>}
     * @memberof CampaignAllOfSearchCampaignInfo
     */
    'identityIds'?: Array<string>;
    /**
     * Further reduces the scope of the campaign by excluding identities (from `query` or `identityIds`) that do not have this access.
     * @type {Array<AccessConstraint>}
     * @memberof CampaignAllOfSearchCampaignInfo
     */
    'accessConstraints'?: Array<AccessConstraint>;
}
export declare const CampaignAllOfSearchCampaignInfoTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly Access: "ACCESS";
};
export type CampaignAllOfSearchCampaignInfoTypeEnum = typeof CampaignAllOfSearchCampaignInfoTypeEnum[keyof typeof CampaignAllOfSearchCampaignInfoTypeEnum];
/**
 * If specified, this identity or governance group will be the reviewer for all certifications in this campaign. The allowed DTO types are IDENTITY and GOVERNANCE_GROUP.
 * @export
 * @interface CampaignAllOfSearchCampaignInfoReviewer
 */
export interface CampaignAllOfSearchCampaignInfoReviewer {
    /**
     * The reviewer\'s DTO type.
     * @type {string}
     * @memberof CampaignAllOfSearchCampaignInfoReviewer
     */
    'type'?: CampaignAllOfSearchCampaignInfoReviewerTypeEnum;
    /**
     * The reviewer\'s ID.
     * @type {string}
     * @memberof CampaignAllOfSearchCampaignInfoReviewer
     */
    'id'?: string;
    /**
     * The reviewer\'s name.
     * @type {string}
     * @memberof CampaignAllOfSearchCampaignInfoReviewer
     */
    'name'?: string;
}
export declare const CampaignAllOfSearchCampaignInfoReviewerTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type CampaignAllOfSearchCampaignInfoReviewerTypeEnum = typeof CampaignAllOfSearchCampaignInfoReviewerTypeEnum[keyof typeof CampaignAllOfSearchCampaignInfoReviewerTypeEnum];
/**
 * Must be set only if the campaign type is SOURCE_OWNER.
 * @export
 * @interface CampaignAllOfSourceOwnerCampaignInfo
 */
export interface CampaignAllOfSourceOwnerCampaignInfo {
    /**
     * The list of sources to be included in the campaign.
     * @type {Array<string>}
     * @memberof CampaignAllOfSourceOwnerCampaignInfo
     */
    'sourceIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface CampaignAllOfSourcesWithOrphanEntitlements
 */
export interface CampaignAllOfSourcesWithOrphanEntitlements {
    /**
     * Id of the source
     * @type {string}
     * @memberof CampaignAllOfSourcesWithOrphanEntitlements
     */
    'id'?: string;
    /**
     * Type
     * @type {string}
     * @memberof CampaignAllOfSourcesWithOrphanEntitlements
     */
    'type'?: CampaignAllOfSourcesWithOrphanEntitlementsTypeEnum;
    /**
     * Name of the source
     * @type {string}
     * @memberof CampaignAllOfSourcesWithOrphanEntitlements
     */
    'name'?: string;
}
export declare const CampaignAllOfSourcesWithOrphanEntitlementsTypeEnum: {
    readonly Source: "SOURCE";
};
export type CampaignAllOfSourcesWithOrphanEntitlementsTypeEnum = typeof CampaignAllOfSourcesWithOrphanEntitlementsTypeEnum[keyof typeof CampaignAllOfSourcesWithOrphanEntitlementsTypeEnum];
/**
 *
 * @export
 * @interface CampaignCompleteOptions
 */
export interface CampaignCompleteOptions {
    /**
     * Determines whether to auto-approve(APPROVE) or auto-revoke(REVOKE) upon campaign completion.
     * @type {string}
     * @memberof CampaignCompleteOptions
     */
    'autoCompleteAction'?: CampaignCompleteOptionsAutoCompleteActionEnum;
}
export declare const CampaignCompleteOptionsAutoCompleteActionEnum: {
    readonly Approve: "APPROVE";
    readonly Revoke: "REVOKE";
};
export type CampaignCompleteOptionsAutoCompleteActionEnum = typeof CampaignCompleteOptionsAutoCompleteActionEnum[keyof typeof CampaignCompleteOptionsAutoCompleteActionEnum];
/**
 * Campaign Filter Details
 * @export
 * @interface CampaignFilterDetails
 */
export interface CampaignFilterDetails {
    /**
     * Campaign filter name.
     * @type {string}
     * @memberof CampaignFilterDetails
     */
    'name': string;
    /**
     * Campaign filter description.
     * @type {string}
     * @memberof CampaignFilterDetails
     */
    'description'?: string;
    /**
     * Owner of the filter. This field automatically populates at creation time with the current user.
     * @type {string}
     * @memberof CampaignFilterDetails
     */
    'owner': string | null;
    /**
     * Mode/type of filter, either the INCLUSION or EXCLUSION type. The INCLUSION type includes the data in generated campaigns  as per specified in the criteria, whereas the EXCLUSION type excludes the data in generated campaigns as per specified in criteria.
     * @type {object}
     * @memberof CampaignFilterDetails
     */
    'mode': CampaignFilterDetailsModeEnum;
    /**
     * List of criteria.
     * @type {Array<CampaignFilterDetailsCriteriaListInner>}
     * @memberof CampaignFilterDetails
     */
    'criteriaList'?: Array<CampaignFilterDetailsCriteriaListInner>;
}
export declare const CampaignFilterDetailsModeEnum: {
    readonly Inclusion: "INCLUSION";
    readonly Exclusion: "EXCLUSION";
};
export type CampaignFilterDetailsModeEnum = typeof CampaignFilterDetailsModeEnum[keyof typeof CampaignFilterDetailsModeEnum];
/**
 *
 * @export
 * @interface CampaignFilterDetailsCriteriaListInner
 */
export interface CampaignFilterDetailsCriteriaListInner {
    /**
     *
     * @type {CriteriaType}
     * @memberof CampaignFilterDetailsCriteriaListInner
     */
    'type': CriteriaType;
    /**
     *
     * @type {Operation & object}
     * @memberof CampaignFilterDetailsCriteriaListInner
     */
    'operation': Operation & object;
    /**
     * Specified key from the type of criteria.
     * @type {string}
     * @memberof CampaignFilterDetailsCriteriaListInner
     */
    'property': string | null;
    /**
     * Value for the specified key from the type of criteria.
     * @type {string}
     * @memberof CampaignFilterDetailsCriteriaListInner
     */
    'value': string | null;
}
/**
 *
 * @export
 * @interface CampaignReference
 */
export interface CampaignReference {
    /**
     * The unique ID of the campaign.
     * @type {string}
     * @memberof CampaignReference
     */
    'id': string;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CampaignReference
     */
    'name': string;
    /**
     * The type of object that is being referenced.
     * @type {string}
     * @memberof CampaignReference
     */
    'type': CampaignReferenceTypeEnum;
    /**
     * The type of the campaign.
     * @type {string}
     * @memberof CampaignReference
     */
    'campaignType': CampaignReferenceCampaignTypeEnum;
    /**
     * The description of the campaign set by the admin who created it.
     * @type {string}
     * @memberof CampaignReference
     */
    'description': string | null;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof CampaignReference
     */
    'correlatedStatus': CampaignReferenceCorrelatedStatusEnum;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof CampaignReference
     */
    'mandatoryCommentRequirement': CampaignReferenceMandatoryCommentRequirementEnum;
}
export declare const CampaignReferenceTypeEnum: {
    readonly Campaign: "CAMPAIGN";
};
export type CampaignReferenceTypeEnum = typeof CampaignReferenceTypeEnum[keyof typeof CampaignReferenceTypeEnum];
export declare const CampaignReferenceCampaignTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
};
export type CampaignReferenceCampaignTypeEnum = typeof CampaignReferenceCampaignTypeEnum[keyof typeof CampaignReferenceCampaignTypeEnum];
export declare const CampaignReferenceCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type CampaignReferenceCorrelatedStatusEnum = typeof CampaignReferenceCorrelatedStatusEnum[keyof typeof CampaignReferenceCorrelatedStatusEnum];
export declare const CampaignReferenceMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type CampaignReferenceMandatoryCommentRequirementEnum = typeof CampaignReferenceMandatoryCommentRequirementEnum[keyof typeof CampaignReferenceMandatoryCommentRequirementEnum];
/**
 *
 * @export
 * @interface CampaignReport
 */
export interface CampaignReport {
    /**
     * SOD policy violation report result DTO type.
     * @type {string}
     * @memberof CampaignReport
     */
    'type'?: CampaignReportTypeEnum;
    /**
     * SOD policy violation report result ID.
     * @type {string}
     * @memberof CampaignReport
     */
    'id'?: string;
    /**
     * Human-readable name of the SOD policy violation report result.
     * @type {string}
     * @memberof CampaignReport
     */
    'name'?: string;
    /**
     * Status of a SOD policy violation report.
     * @type {string}
     * @memberof CampaignReport
     */
    'status'?: CampaignReportStatusEnum;
    /**
     *
     * @type {ReportType}
     * @memberof CampaignReport
     */
    'reportType': ReportType;
    /**
     * The most recent date and time this report was run
     * @type {string}
     * @memberof CampaignReport
     */
    'lastRunAt'?: string;
}
export declare const CampaignReportTypeEnum: {
    readonly ReportResult: "REPORT_RESULT";
};
export type CampaignReportTypeEnum = typeof CampaignReportTypeEnum[keyof typeof CampaignReportTypeEnum];
export declare const CampaignReportStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
    readonly Pending: "PENDING";
};
export type CampaignReportStatusEnum = typeof CampaignReportStatusEnum[keyof typeof CampaignReportStatusEnum];
/**
 *
 * @export
 * @interface CampaignReportAllOf
 */
export interface CampaignReportAllOf {
    /**
     *
     * @type {ReportType}
     * @memberof CampaignReportAllOf
     */
    'reportType'?: ReportType;
    /**
     * The most recent date and time this report was run
     * @type {string}
     * @memberof CampaignReportAllOf
     */
    'lastRunAt'?: string;
}
/**
 *
 * @export
 * @interface CampaignReportsConfig
 */
export interface CampaignReportsConfig {
    /**
     * list of identity attribute columns
     * @type {Array<string>}
     * @memberof CampaignReportsConfig
     */
    'identityAttributeColumns'?: Array<string> | null;
}
/**
 * Campaign Template
 * @export
 * @interface CampaignTemplate
 */
export interface CampaignTemplate {
    /**
     * Id of the campaign template
     * @type {string}
     * @memberof CampaignTemplate
     */
    'id'?: string;
    /**
     * This template\'s name. Has no bearing on generated campaigns\' names.
     * @type {string}
     * @memberof CampaignTemplate
     */
    'name': string;
    /**
     * This template\'s description. Has no bearing on generated campaigns\' descriptions.
     * @type {string}
     * @memberof CampaignTemplate
     */
    'description': string;
    /**
     * Creation date of Campaign Template
     * @type {string}
     * @memberof CampaignTemplate
     */
    'created': string;
    /**
     * Modification date of Campaign Template
     * @type {string}
     * @memberof CampaignTemplate
     */
    'modified': string;
    /**
     * Indicates if this campaign template has been scheduled.
     * @type {boolean}
     * @memberof CampaignTemplate
     */
    'scheduled'?: boolean;
    /**
     *
     * @type {CampaignTemplateOwnerRef}
     * @memberof CampaignTemplate
     */
    'ownerRef'?: CampaignTemplateOwnerRef;
    /**
     * The time period during which the campaign should be completed, formatted as an ISO-8601 Duration. When this template generates a campaign, the campaign\'s deadline will be the current date plus this duration. For example, if generation occurred on 2020-01-01 and this field was \"P2W\" (two weeks), the resulting campaign\'s deadline would be 2020-01-15 (the current date plus 14 days).
     * @type {string}
     * @memberof CampaignTemplate
     */
    'deadlineDuration'?: string;
    /**
     * This will hold campaign related information like name, description etc.
     * @type {Campaign}
     * @memberof CampaignTemplate
     */
    'campaign': Campaign;
}
/**
 * The owner of this template, and the owner of campaigns generated from this template via a schedule. This field is automatically populated at creation time with the current user.
 * @export
 * @interface CampaignTemplateOwnerRef
 */
export interface CampaignTemplateOwnerRef {
    /**
     * Id of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRef
     */
    'id'?: string;
    /**
     * Type of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRef
     */
    'type'?: CampaignTemplateOwnerRefTypeEnum;
    /**
     * Name of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRef
     */
    'name'?: string;
    /**
     * Email of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRef
     */
    'email'?: string;
}
export declare const CampaignTemplateOwnerRefTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CampaignTemplateOwnerRefTypeEnum = typeof CampaignTemplateOwnerRefTypeEnum[keyof typeof CampaignTemplateOwnerRefTypeEnum];
/**
 *
 * @export
 * @interface CampaignsDeleteRequest
 */
export interface CampaignsDeleteRequest {
    /**
     * The ids of the campaigns to delete
     * @type {Array<string>}
     * @memberof CampaignsDeleteRequest
     */
    'ids'?: Array<string>;
}
/**
 * Request body payload for cancel access request endpoint.
 * @export
 * @interface CancelAccessRequest
 */
export interface CancelAccessRequest {
    /**
     * This refers to the identityRequestId. To successfully cancel an access request, you must provide the identityRequestId.
     * @type {string}
     * @memberof CancelAccessRequest
     */
    'accountActivityId': string;
    /**
     * Reason for cancelling the pending access request.
     * @type {string}
     * @memberof CancelAccessRequest
     */
    'comment': string;
}
/**
 * Provides additional details for a request that has been cancelled.
 * @export
 * @interface CancelledRequestDetails
 */
export interface CancelledRequestDetails {
    /**
     * Comment made by the owner when cancelling the associated request.
     * @type {string}
     * @memberof CancelledRequestDetails
     */
    'comment'?: string;
    /**
     *
     * @type {OwnerDto}
     * @memberof CancelledRequestDetails
     */
    'owner'?: OwnerDto;
    /**
     * Date comment was added by the owner when cancelling the associated request.
     * @type {string}
     * @memberof CancelledRequestDetails
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface Certification
 */
export interface Certification {
    /**
     * id of the certification
     * @type {string}
     * @memberof Certification
     */
    'id'?: string;
    /**
     * name of the certification
     * @type {string}
     * @memberof Certification
     */
    'name'?: string;
    /**
     *
     * @type {CampaignReference}
     * @memberof Certification
     */
    'campaign'?: CampaignReference;
    /**
     * Have all decisions been made?
     * @type {boolean}
     * @memberof Certification
     */
    'completed'?: boolean;
    /**
     * The number of identities for whom all decisions have been made and are complete.
     * @type {number}
     * @memberof Certification
     */
    'identitiesCompleted'?: number;
    /**
     * The total number of identities in the Certification, both complete and incomplete.
     * @type {number}
     * @memberof Certification
     */
    'identitiesTotal'?: number;
    /**
     * created date
     * @type {string}
     * @memberof Certification
     */
    'created'?: string;
    /**
     * modified date
     * @type {string}
     * @memberof Certification
     */
    'modified'?: string;
    /**
     * The number of approve/revoke/acknowledge decisions that have been made.
     * @type {number}
     * @memberof Certification
     */
    'decisionsMade'?: number;
    /**
     * The total number of approve/revoke/acknowledge decisions.
     * @type {number}
     * @memberof Certification
     */
    'decisionsTotal'?: number;
    /**
     * The due date of the certification.
     * @type {string}
     * @memberof Certification
     */
    'due'?: string;
    /**
     * The date the reviewer signed off on the Certification.
     * @type {string}
     * @memberof Certification
     */
    'signed'?: string | null;
    /**
     *
     * @type {Reviewer}
     * @memberof Certification
     */
    'reviewer'?: Reviewer;
    /**
     *
     * @type {Reassignment}
     * @memberof Certification
     */
    'reassignment'?: Reassignment | null;
    /**
     * Identifies if the certification has an error
     * @type {boolean}
     * @memberof Certification
     */
    'hasErrors'?: boolean;
    /**
     * Description of the certification error
     * @type {string}
     * @memberof Certification
     */
    'errorMessage'?: string | null;
    /**
     *
     * @type {CertificationPhase}
     * @memberof Certification
     */
    'phase'?: CertificationPhase;
}
/**
 * The decision to approve or revoke the review item
 * @export
 * @enum {string}
 */
export declare const CertificationDecision: {
    readonly Approve: "APPROVE";
    readonly Revoke: "REVOKE";
};
export type CertificationDecision = typeof CertificationDecision[keyof typeof CertificationDecision];
/**
 *
 * @export
 * @interface CertificationIdentitySummary
 */
export interface CertificationIdentitySummary {
    /**
     * The ID of the identity summary
     * @type {string}
     * @memberof CertificationIdentitySummary
     */
    'id'?: string;
    /**
     * Name of the linked identity
     * @type {string}
     * @memberof CertificationIdentitySummary
     */
    'name'?: string;
    /**
     * The ID of the identity being certified
     * @type {string}
     * @memberof CertificationIdentitySummary
     */
    'identityId'?: string;
    /**
     * Indicates whether the review items for the linked identity\'s certification have been completed
     * @type {boolean}
     * @memberof CertificationIdentitySummary
     */
    'completed'?: boolean;
}
/**
 * The current phase of the campaign. * `STAGED`: The campaign is waiting to be activated. * `ACTIVE`: The campaign is active. * `SIGNED`: The reviewer has signed off on the campaign, and it is considered complete.
 * @export
 * @enum {string}
 */
export declare const CertificationPhase: {
    readonly Staged: "STAGED";
    readonly Active: "ACTIVE";
    readonly Signed: "SIGNED";
};
export type CertificationPhase = typeof CertificationPhase[keyof typeof CertificationPhase];
/**
 *
 * @export
 * @interface CertificationReference
 */
export interface CertificationReference {
    /**
     * The id of the certification.
     * @type {string}
     * @memberof CertificationReference
     */
    'id'?: string;
    /**
     * The name of the certification.
     * @type {string}
     * @memberof CertificationReference
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof CertificationReference
     */
    'type'?: CertificationReferenceTypeEnum;
    /**
     *
     * @type {Reviewer}
     * @memberof CertificationReference
     */
    'reviewer'?: Reviewer;
}
export declare const CertificationReferenceTypeEnum: {
    readonly Certification: "CERTIFICATION";
};
export type CertificationReferenceTypeEnum = typeof CertificationReferenceTypeEnum[keyof typeof CertificationReferenceTypeEnum];
/**
 *
 * @export
 * @interface CertificationTask
 */
export interface CertificationTask {
    /**
     * The ID of the certification task.
     * @type {string}
     * @memberof CertificationTask
     */
    'id'?: string;
    /**
     * The type of the certification task. More values may be added in the future.
     * @type {string}
     * @memberof CertificationTask
     */
    'type'?: CertificationTaskTypeEnum;
    /**
     * The type of item that is being operated on by this task whose ID is stored in the targetId field.
     * @type {string}
     * @memberof CertificationTask
     */
    'targetType'?: CertificationTaskTargetTypeEnum;
    /**
     * The ID of the item being operated on by this task.
     * @type {string}
     * @memberof CertificationTask
     */
    'targetId'?: string;
    /**
     * The status of the task.
     * @type {string}
     * @memberof CertificationTask
     */
    'status'?: CertificationTaskStatusEnum;
    /**
     *
     * @type {Array<ErrorMessageDto>}
     * @memberof CertificationTask
     */
    'errors'?: Array<ErrorMessageDto>;
    /**
     * Reassignment trails that lead to self certification identity
     * @type {Array<ReassignmentTrailDTO>}
     * @memberof CertificationTask
     */
    'reassignmentTrailDTOs'?: Array<ReassignmentTrailDTO>;
    /**
     * The date and time on which this task was created.
     * @type {string}
     * @memberof CertificationTask
     */
    'created'?: string;
}
export declare const CertificationTaskTypeEnum: {
    readonly Reassign: "REASSIGN";
    readonly AdminReassign: "ADMIN_REASSIGN";
    readonly CompleteCertification: "COMPLETE_CERTIFICATION";
    readonly FinishCertification: "FINISH_CERTIFICATION";
    readonly CompleteCampaign: "COMPLETE_CAMPAIGN";
    readonly ActivateCampaign: "ACTIVATE_CAMPAIGN";
    readonly CampaignCreate: "CAMPAIGN_CREATE";
    readonly CampaignDelete: "CAMPAIGN_DELETE";
};
export type CertificationTaskTypeEnum = typeof CertificationTaskTypeEnum[keyof typeof CertificationTaskTypeEnum];
export declare const CertificationTaskTargetTypeEnum: {
    readonly Certification: "CERTIFICATION";
    readonly Campaign: "CAMPAIGN";
};
export type CertificationTaskTargetTypeEnum = typeof CertificationTaskTargetTypeEnum[keyof typeof CertificationTaskTargetTypeEnum];
export declare const CertificationTaskStatusEnum: {
    readonly Queued: "QUEUED";
    readonly InProgress: "IN_PROGRESS";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type CertificationTaskStatusEnum = typeof CertificationTaskStatusEnum[keyof typeof CertificationTaskStatusEnum];
/**
 * Client Runtime Logging Configuration
 * @export
 * @interface ClientLogConfiguration
 */
export interface ClientLogConfiguration {
    /**
     * Log configuration\'s client ID
     * @type {string}
     * @memberof ClientLogConfiguration
     */
    'clientId'?: string;
    /**
     * Duration in minutes for log configuration to remain in effect before resetting to defaults
     * @type {number}
     * @memberof ClientLogConfiguration
     */
    'durationMinutes': number;
    /**
     * Expiration date-time of the log configuration request
     * @type {string}
     * @memberof ClientLogConfiguration
     */
    'expiration'?: string;
    /**
     *
     * @type {StandardLevel}
     * @memberof ClientLogConfiguration
     */
    'rootLevel': StandardLevel;
    /**
     * Mapping of identifiers to Standard Log Level values
     * @type {{ [key: string]: StandardLevel; }}
     * @memberof ClientLogConfiguration
     */
    'logLevels'?: {
        [key: string]: StandardLevel;
    };
}
/**
 * Type of an API Client indicating public or confidentials use
 * @export
 * @enum {string}
 */
export declare const ClientType: {
    readonly Confidential: "CONFIDENTIAL";
    readonly Public: "PUBLIC";
};
export type ClientType = typeof ClientType[keyof typeof ClientType];
/**
 *
 * @export
 * @interface Column
 */
export interface Column {
    /**
     * The name of the field.
     * @type {string}
     * @memberof Column
     */
    'field': string;
    /**
     * The value of the header.
     * @type {string}
     * @memberof Column
     */
    'header'?: string;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * Id of the identity making the comment
     * @type {string}
     * @memberof Comment
     */
    'commenterId'?: string;
    /**
     * Human-readable display name of the identity making the comment
     * @type {string}
     * @memberof Comment
     */
    'commenterName'?: string;
    /**
     * Content of the comment
     * @type {string}
     * @memberof Comment
     */
    'body'?: string;
    /**
     * Date and time comment was made
     * @type {string}
     * @memberof Comment
     */
    'date'?: string;
}
/**
 *
 * @export
 * @interface CommentDto
 */
export interface CommentDto {
    /**
     * Comment content.
     * @type {string}
     * @memberof CommentDto
     */
    'comment'?: string | null;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof CommentDto
     */
    'created'?: string;
    /**
     *
     * @type {CommentDtoAuthor}
     * @memberof CommentDto
     */
    'author'?: CommentDtoAuthor;
}
/**
 * Author of the comment
 * @export
 * @interface CommentDtoAuthor
 */
export interface CommentDtoAuthor {
    /**
     * The type of object
     * @type {string}
     * @memberof CommentDtoAuthor
     */
    'type'?: CommentDtoAuthorTypeEnum;
    /**
     * The unique ID of the object
     * @type {string}
     * @memberof CommentDtoAuthor
     */
    'id'?: string;
    /**
     * The display name of the object
     * @type {string}
     * @memberof CommentDtoAuthor
     */
    'name'?: string;
}
export declare const CommentDtoAuthorTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CommentDtoAuthorTypeEnum = typeof CommentDtoAuthorTypeEnum[keyof typeof CommentDtoAuthorTypeEnum];
/**
 *
 * @export
 * @interface CompletedApproval
 */
export interface CompletedApproval {
    /**
     * The approval id.
     * @type {string}
     * @memberof CompletedApproval
     */
    'id'?: string;
    /**
     * The name of the approval.
     * @type {string}
     * @memberof CompletedApproval
     */
    'name'?: string;
    /**
     * When the approval was created.
     * @type {string}
     * @memberof CompletedApproval
     */
    'created'?: string;
    /**
     * When the approval was modified last time.
     * @type {string}
     * @memberof CompletedApproval
     */
    'modified'?: string;
    /**
     * When the access-request was created.
     * @type {string}
     * @memberof CompletedApproval
     */
    'requestCreated'?: string;
    /**
     *
     * @type {AccessRequestType}
     * @memberof CompletedApproval
     */
    'requestType'?: AccessRequestType | null;
    /**
     *
     * @type {AccessItemRequester}
     * @memberof CompletedApproval
     */
    'requester'?: AccessItemRequester;
    /**
     *
     * @type {RequestedItemStatusRequestedFor}
     * @memberof CompletedApproval
     */
    'requestedFor'?: RequestedItemStatusRequestedFor;
    /**
     *
     * @type {AccessItemReviewedBy}
     * @memberof CompletedApproval
     */
    'reviewedBy'?: AccessItemReviewedBy;
    /**
     *
     * @type {OwnerDto}
     * @memberof CompletedApproval
     */
    'owner'?: OwnerDto;
    /**
     *
     * @type {RequestableObjectReference}
     * @memberof CompletedApproval
     */
    'requestedObject'?: RequestableObjectReference;
    /**
     *
     * @type {CompletedApprovalRequesterComment}
     * @memberof CompletedApproval
     */
    'requesterComment'?: CompletedApprovalRequesterComment;
    /**
     *
     * @type {CompletedApprovalReviewerComment}
     * @memberof CompletedApproval
     */
    'reviewerComment'?: CompletedApprovalReviewerComment;
    /**
     * The history of the previous reviewers comments.
     * @type {Array<CommentDto>}
     * @memberof CompletedApproval
     */
    'previousReviewersComments'?: Array<CommentDto>;
    /**
     * The history of approval forward action.
     * @type {Array<ApprovalForwardHistory>}
     * @memberof CompletedApproval
     */
    'forwardHistory'?: Array<ApprovalForwardHistory>;
    /**
     * When true the rejector has to provide comments when rejecting
     * @type {boolean}
     * @memberof CompletedApproval
     */
    'commentRequiredWhenRejected'?: boolean;
    /**
     *
     * @type {CompletedApprovalState}
     * @memberof CompletedApproval
     */
    'state'?: CompletedApprovalState;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof CompletedApproval
     */
    'removeDate'?: string | null;
    /**
     * If true, then the request was to change the remove date or sunset date.
     * @type {boolean}
     * @memberof CompletedApproval
     */
    'removeDateUpdateRequested'?: boolean;
    /**
     * The remove date or sunset date that was assigned at the time of the request.
     * @type {string}
     * @memberof CompletedApproval
     */
    'currentRemoveDate'?: string | null;
    /**
     *
     * @type {SodViolationContextCheckCompleted}
     * @memberof CompletedApproval
     */
    'sodViolationContext'?: SodViolationContextCheckCompleted | null;
    /**
     *
     * @type {CompletedApprovalPreApprovalTriggerResult}
     * @memberof CompletedApproval
     */
    'preApprovalTriggerResult'?: CompletedApprovalPreApprovalTriggerResult | null;
    /**
     * Arbitrary key-value pairs provided during the request.
     * @type {{ [key: string]: string; }}
     * @memberof CompletedApproval
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
}
/**
 * If the access request submitted event trigger is configured and this access request was intercepted by it, then this is the result of the trigger\'s decision to either approve or deny the request.
 * @export
 * @interface CompletedApprovalPreApprovalTriggerResult
 */
export interface CompletedApprovalPreApprovalTriggerResult {
    /**
     * The comment from the trigger
     * @type {string}
     * @memberof CompletedApprovalPreApprovalTriggerResult
     */
    'comment'?: string;
    /**
     *
     * @type {CompletedApprovalState}
     * @memberof CompletedApprovalPreApprovalTriggerResult
     */
    'decision'?: CompletedApprovalState;
    /**
     * The name of the approver
     * @type {string}
     * @memberof CompletedApprovalPreApprovalTriggerResult
     */
    'reviewer'?: string;
    /**
     * The date and time the trigger decided on the request
     * @type {string}
     * @memberof CompletedApprovalPreApprovalTriggerResult
     */
    'date'?: string;
}
/**
 *
 * @export
 * @interface CompletedApprovalRequesterComment
 */
export interface CompletedApprovalRequesterComment {
    /**
     * Comment content.
     * @type {string}
     * @memberof CompletedApprovalRequesterComment
     */
    'comment'?: string | null;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof CompletedApprovalRequesterComment
     */
    'created'?: string;
    /**
     *
     * @type {CommentDtoAuthor}
     * @memberof CompletedApprovalRequesterComment
     */
    'author'?: CommentDtoAuthor;
}
/**
 *
 * @export
 * @interface CompletedApprovalReviewerComment
 */
export interface CompletedApprovalReviewerComment {
    /**
     * Comment content.
     * @type {string}
     * @memberof CompletedApprovalReviewerComment
     */
    'comment'?: string | null;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof CompletedApprovalReviewerComment
     */
    'created'?: string;
    /**
     *
     * @type {CommentDtoAuthor}
     * @memberof CompletedApprovalReviewerComment
     */
    'author'?: CommentDtoAuthor;
}
/**
 * Enum represents completed approval object\'s state.
 * @export
 * @enum {string}
 */
export declare const CompletedApprovalState: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type CompletedApprovalState = typeof CompletedApprovalState[keyof typeof CompletedApprovalState];
/**
 * The status after completion.
 * @export
 * @enum {string}
 */
export declare const CompletionStatus: {
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
    readonly Incomplete: "INCOMPLETE";
    readonly Pending: "PENDING";
    readonly Null: "null";
};
export type CompletionStatus = typeof CompletionStatus[keyof typeof CompletionStatus];
/**
 *
 * @export
 * @interface Concatenation
 */
export interface Concatenation {
    /**
     * An array of items to join together
     * @type {Array<object>}
     * @memberof Concatenation
     */
    'values': Array<object>;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Concatenation
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Concatenation
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Conditional
 */
export interface Conditional {
    /**
     * A comparison statement that follows the structure of `ValueA eq ValueB` where `ValueA` and `ValueB` are static strings or outputs of other transforms.   The `eq` operator is the only valid comparison
     * @type {string}
     * @memberof Conditional
     */
    'expression': string;
    /**
     * The output of the transform if the expression evalutes to true
     * @type {string}
     * @memberof Conditional
     */
    'positiveCondition': string;
    /**
     * The output of the transform if the expression evalutes to false
     * @type {string}
     * @memberof Conditional
     */
    'negativeCondition': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Conditional
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Conditional
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ConflictingAccessCriteria
 */
export interface ConflictingAccessCriteria {
    /**
     *
     * @type {AccessCriteria}
     * @memberof ConflictingAccessCriteria
     */
    'leftCriteria'?: AccessCriteria;
    /**
     *
     * @type {AccessCriteria}
     * @memberof ConflictingAccessCriteria
     */
    'rightCriteria'?: AccessCriteria;
}
/**
 *
 * @export
 * @interface ConnectorDetail
 */
export interface ConnectorDetail {
    /**
     * The connector name
     * @type {string}
     * @memberof ConnectorDetail
     */
    'name'?: string;
    /**
     * The connector type
     * @type {string}
     * @memberof ConnectorDetail
     */
    'type'?: string;
    /**
     * The connector class name
     * @type {string}
     * @memberof ConnectorDetail
     */
    'className'?: string;
    /**
     * The connector script name
     * @type {string}
     * @memberof ConnectorDetail
     */
    'scriptName'?: string;
    /**
     * The connector application xml
     * @type {string}
     * @memberof ConnectorDetail
     */
    'applicationXml'?: string;
    /**
     * The connector correlation config xml
     * @type {string}
     * @memberof ConnectorDetail
     */
    'correlationConfigXml'?: string;
    /**
     * The connector source config xml
     * @type {string}
     * @memberof ConnectorDetail
     */
    'sourceConfigXml'?: string;
    /**
     * The connector source config
     * @type {string}
     * @memberof ConnectorDetail
     */
    'sourceConfig'?: string;
    /**
     * The connector source config origin
     * @type {string}
     * @memberof ConnectorDetail
     */
    'sourceConfigFrom'?: string;
    /**
     * storage path key for this connector
     * @type {string}
     * @memberof ConnectorDetail
     */
    's3Location'?: string;
    /**
     * The list of uploaded files supported by the connector. If there was any executable files uploaded to thee connector. Typically this be empty as the executable be uploaded at source creation.
     * @type {Array<string>}
     * @memberof ConnectorDetail
     */
    'uploadedFiles'?: Array<string> | null;
    /**
     * true if the source is file upload
     * @type {boolean}
     * @memberof ConnectorDetail
     */
    'fileUpload'?: boolean;
    /**
     * true if the source is a direct connect source
     * @type {boolean}
     * @memberof ConnectorDetail
     */
    'directConnect'?: boolean;
    /**
     * A map containing translation attributes by loacale key
     * @type {{ [key: string]: any; }}
     * @memberof ConnectorDetail
     */
    'translationProperties'?: {
        [key: string]: any;
    };
    /**
     * A map containing metadata pertinent to the UI to be used
     * @type {{ [key: string]: any; }}
     * @memberof ConnectorDetail
     */
    'connectorMetadata'?: {
        [key: string]: any;
    };
    /**
     * The connector status
     * @type {string}
     * @memberof ConnectorDetail
     */
    'status'?: ConnectorDetailStatusEnum;
}
export declare const ConnectorDetailStatusEnum: {
    readonly Deprecated: "DEPRECATED";
    readonly Development: "DEVELOPMENT";
    readonly Demo: "DEMO";
    readonly Released: "RELEASED";
};
export type ConnectorDetailStatusEnum = typeof ConnectorDetailStatusEnum[keyof typeof ConnectorDetailStatusEnum];
/**
 *
 * @export
 * @interface CreateExternalExecuteWorkflow200Response
 */
export interface CreateExternalExecuteWorkflow200Response {
    /**
     * The workflow execution id
     * @type {string}
     * @memberof CreateExternalExecuteWorkflow200Response
     */
    'workflowExecutionId'?: string;
    /**
     * An error message if any errors occurred
     * @type {string}
     * @memberof CreateExternalExecuteWorkflow200Response
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface CreateExternalExecuteWorkflowRequest
 */
export interface CreateExternalExecuteWorkflowRequest {
    /**
     * The input for the workflow
     * @type {object}
     * @memberof CreateExternalExecuteWorkflowRequest
     */
    'input'?: object;
}
/**
 *
 * @export
 * @interface CreateOAuthClientRequest
 */
export interface CreateOAuthClientRequest {
    /**
     * The name of the business the API Client should belong to
     * @type {string}
     * @memberof CreateOAuthClientRequest
     */
    'businessName'?: string | null;
    /**
     * The homepage URL associated with the owner of the API Client
     * @type {string}
     * @memberof CreateOAuthClientRequest
     */
    'homepageUrl'?: string | null;
    /**
     * A human-readable name for the API Client
     * @type {string}
     * @memberof CreateOAuthClientRequest
     */
    'name': string | null;
    /**
     * A description of the API Client
     * @type {string}
     * @memberof CreateOAuthClientRequest
     */
    'description': string | null;
    /**
     * The number of seconds an access token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientRequest
     */
    'accessTokenValiditySeconds': number;
    /**
     * The number of seconds a refresh token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientRequest
     */
    'refreshTokenValiditySeconds'?: number;
    /**
     * A list of the approved redirect URIs. Provide one or more URIs when assigning the AUTHORIZATION_CODE grant type to a new OAuth Client.
     * @type {Array<string>}
     * @memberof CreateOAuthClientRequest
     */
    'redirectUris'?: Array<string> | null;
    /**
     * A list of OAuth 2.0 grant types this API Client can be used with
     * @type {Array<GrantType>}
     * @memberof CreateOAuthClientRequest
     */
    'grantTypes': Array<GrantType> | null;
    /**
     *
     * @type {AccessType}
     * @memberof CreateOAuthClientRequest
     */
    'accessType': AccessType;
    /**
     *
     * @type {ClientType}
     * @memberof CreateOAuthClientRequest
     */
    'type'?: ClientType;
    /**
     * An indicator of whether the API Client can be used for requests internal within the product.
     * @type {boolean}
     * @memberof CreateOAuthClientRequest
     */
    'internal'?: boolean;
    /**
     * An indicator of whether the API Client is enabled for use
     * @type {boolean}
     * @memberof CreateOAuthClientRequest
     */
    'enabled': boolean;
    /**
     * An indicator of whether the API Client supports strong authentication
     * @type {boolean}
     * @memberof CreateOAuthClientRequest
     */
    'strongAuthSupported'?: boolean;
    /**
     * An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow
     * @type {boolean}
     * @memberof CreateOAuthClientRequest
     */
    'claimsSupported'?: boolean;
    /**
     * Scopes of the API Client. If no scope is specified, the client will be created with the default scope \"sp:scopes:all\". This means the API Client will have all the rights of the owner who created it.
     * @type {Array<string>}
     * @memberof CreateOAuthClientRequest
     */
    'scope'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface CreateOAuthClientResponse
 */
export interface CreateOAuthClientResponse {
    /**
     * ID of the OAuth client
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'id': string;
    /**
     * Secret of the OAuth client (This field is only returned on the intial create call.)
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'secret': string;
    /**
     * The name of the business the API Client should belong to
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'businessName': string;
    /**
     * The homepage URL associated with the owner of the API Client
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'homepageUrl': string;
    /**
     * A human-readable name for the API Client
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'name': string;
    /**
     * A description of the API Client
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'description': string;
    /**
     * The number of seconds an access token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientResponse
     */
    'accessTokenValiditySeconds': number;
    /**
     * The number of seconds a refresh token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientResponse
     */
    'refreshTokenValiditySeconds': number;
    /**
     * A list of the approved redirect URIs used with the authorization_code flow
     * @type {Array<string>}
     * @memberof CreateOAuthClientResponse
     */
    'redirectUris': Array<string>;
    /**
     * A list of OAuth 2.0 grant types this API Client can be used with
     * @type {Array<GrantType>}
     * @memberof CreateOAuthClientResponse
     */
    'grantTypes': Array<GrantType>;
    /**
     *
     * @type {AccessType}
     * @memberof CreateOAuthClientResponse
     */
    'accessType': AccessType;
    /**
     *
     * @type {ClientType}
     * @memberof CreateOAuthClientResponse
     */
    'type': ClientType;
    /**
     * An indicator of whether the API Client can be used for requests internal to IDN
     * @type {boolean}
     * @memberof CreateOAuthClientResponse
     */
    'internal': boolean;
    /**
     * An indicator of whether the API Client is enabled for use
     * @type {boolean}
     * @memberof CreateOAuthClientResponse
     */
    'enabled': boolean;
    /**
     * An indicator of whether the API Client supports strong authentication
     * @type {boolean}
     * @memberof CreateOAuthClientResponse
     */
    'strongAuthSupported': boolean;
    /**
     * An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow
     * @type {boolean}
     * @memberof CreateOAuthClientResponse
     */
    'claimsSupported': boolean;
    /**
     * The date and time, down to the millisecond, when the API Client was created
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'created': string;
    /**
     * The date and time, down to the millisecond, when the API Client was last updated
     * @type {string}
     * @memberof CreateOAuthClientResponse
     */
    'modified': string;
    /**
     * Scopes of the API Client.
     * @type {Array<string>}
     * @memberof CreateOAuthClientResponse
     */
    'scope': Array<string> | null;
}
/**
 * Object for specifying the name of a personal access token to create
 * @export
 * @interface CreatePersonalAccessTokenRequest
 */
export interface CreatePersonalAccessTokenRequest {
    /**
     * The name of the personal access token (PAT) to be created. Cannot be the same as another PAT owned by the user for whom this PAT is being created.
     * @type {string}
     * @memberof CreatePersonalAccessTokenRequest
     */
    'name': string;
    /**
     * Scopes of the personal  access token. If no scope is specified, the token will be created with the default scope \"sp:scopes:all\". This means the personal access token will have all the rights of the owner who created it.
     * @type {Array<string>}
     * @memberof CreatePersonalAccessTokenRequest
     */
    'scope'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenResponse
 */
export interface CreatePersonalAccessTokenResponse {
    /**
     * The ID of the personal access token (to be used as the username for Basic Auth).
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'id': string;
    /**
     * The secret of the personal access token (to be used as the password for Basic Auth).
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'secret': string;
    /**
     * Scopes of the personal  access token.
     * @type {Array<string>}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'scope': Array<string> | null;
    /**
     * The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'name': string;
    /**
     *
     * @type {PatOwner}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'owner': PatOwner;
    /**
     * The date and time, down to the millisecond, when this personal access token was created.
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponse
     */
    'created': string;
}
/**
 *
 * @export
 * @interface CreateSavedSearchRequest
 */
export interface CreateSavedSearchRequest {
    /**
     * The name of the saved search.
     * @type {string}
     * @memberof CreateSavedSearchRequest
     */
    'name'?: string;
    /**
     * The description of the saved search.
     * @type {string}
     * @memberof CreateSavedSearchRequest
     */
    'description'?: string | null;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof CreateSavedSearchRequest
     */
    'created'?: string | null;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof CreateSavedSearchRequest
     */
    'modified'?: string | null;
    /**
     * The names of the Elasticsearch indices in which to search.
     * @type {Array<Index>}
     * @memberof CreateSavedSearchRequest
     */
    'indices': Array<Index>;
    /**
     * The columns to be returned (specifies the order in which they will be presented) for each document type.  The currently supported document types are: _accessprofile_, _accountactivity_, _account_, _aggregation_, _entitlement_, _event_, _identity_, and _role_.
     * @type {{ [key: string]: Array<Column>; }}
     * @memberof CreateSavedSearchRequest
     */
    'columns'?: {
        [key: string]: Array<Column>;
    };
    /**
     * The search query using Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL.
     * @type {string}
     * @memberof CreateSavedSearchRequest
     */
    'query': string;
    /**
     * The fields to be searched against in a multi-field query.
     * @type {Array<string>}
     * @memberof CreateSavedSearchRequest
     */
    'fields'?: Array<string> | null;
    /**
     * Sort by index. This takes precedence over the `sort` property.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof CreateSavedSearchRequest
     */
    'orderBy'?: {
        [key: string]: Array<string>;
    } | null;
    /**
     * The fields to be used to sort the search results.
     * @type {Array<string>}
     * @memberof CreateSavedSearchRequest
     */
    'sort'?: Array<string> | null;
    /**
     *
     * @type {SavedSearchDetailFilters}
     * @memberof CreateSavedSearchRequest
     */
    'filters'?: SavedSearchDetailFilters | null;
}
/**
 *
 * @export
 * @interface CreateScheduledSearchRequest
 */
export interface CreateScheduledSearchRequest {
    /**
     * The name of the scheduled search.
     * @type {string}
     * @memberof CreateScheduledSearchRequest
     */
    'name'?: string | null;
    /**
     * The description of the scheduled search.
     * @type {string}
     * @memberof CreateScheduledSearchRequest
     */
    'description'?: string | null;
    /**
     * The ID of the saved search that will be executed.
     * @type {string}
     * @memberof CreateScheduledSearchRequest
     */
    'savedSearchId': string;
    /**
     * The date the scheduled search was initially created.
     * @type {string}
     * @memberof CreateScheduledSearchRequest
     */
    'created'?: string;
    /**
     * The last date the scheduled search was modified.
     * @type {string}
     * @memberof CreateScheduledSearchRequest
     */
    'modified'?: string;
    /**
     *
     * @type {Schedule1}
     * @memberof CreateScheduledSearchRequest
     */
    'schedule': Schedule1;
    /**
     * A list of identities that should receive the scheduled search report via email.
     * @type {Array<SearchScheduleRecipientsInner>}
     * @memberof CreateScheduledSearchRequest
     */
    'recipients': Array<SearchScheduleRecipientsInner>;
    /**
     * Indicates if the scheduled search is enabled.
     * @type {boolean}
     * @memberof CreateScheduledSearchRequest
     */
    'enabled'?: boolean;
    /**
     * Indicates if email generation should occur when search returns no results.
     * @type {boolean}
     * @memberof CreateScheduledSearchRequest
     */
    'emailEmptyResults'?: boolean;
    /**
     * Indicates if the generated email should include the query and search results preview (which could include PII).
     * @type {boolean}
     * @memberof CreateScheduledSearchRequest
     */
    'displayQueryDetails'?: boolean;
}
/**
 *
 * @export
 * @interface CreateWorkflowRequest
 */
export interface CreateWorkflowRequest {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'name': string;
    /**
     *
     * @type {WorkflowBodyOwner}
     * @memberof CreateWorkflowRequest
     */
    'owner': WorkflowBodyOwner;
    /**
     * Description of what the workflow accomplishes
     * @type {string}
     * @memberof CreateWorkflowRequest
     */
    'description'?: string;
    /**
     *
     * @type {WorkflowDefinition}
     * @memberof CreateWorkflowRequest
     */
    'definition'?: WorkflowDefinition;
    /**
     * Enable or disable the workflow.  Workflows cannot be created in an enabled state.
     * @type {boolean}
     * @memberof CreateWorkflowRequest
     */
    'enabled'?: boolean;
    /**
     *
     * @type {WorkflowTrigger}
     * @memberof CreateWorkflowRequest
     */
    'trigger'?: WorkflowTrigger;
}
/**
 * Type of the criteria in the filter. The `COMPOSITE` filter can contain multiple filters in an AND/OR relationship.
 * @export
 * @enum {string}
 */
export declare const CriteriaType: {
    readonly Composite: "COMPOSITE";
    readonly Role: "ROLE";
    readonly Identity: "IDENTITY";
    readonly IdentityAttribute: "IDENTITY_ATTRIBUTE";
    readonly Entitlement: "ENTITLEMENT";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Source: "SOURCE";
    readonly Account: "ACCOUNT";
    readonly AggregatedEntitlement: "AGGREGATED_ENTITLEMENT";
    readonly InvalidCertifiableEntity: "INVALID_CERTIFIABLE_ENTITY";
};
export type CriteriaType = typeof CriteriaType[keyof typeof CriteriaType];
/**
 * DAS data for the entitlement
 * @export
 * @interface DataAccess
 */
export interface DataAccess {
    /**
     * List of classification policies that apply to resources the entitlement \\ groups has access to
     * @type {Array<DataAccessPoliciesInner>}
     * @memberof DataAccess
     */
    'policies'?: Array<DataAccessPoliciesInner>;
    /**
     * List of classification categories that apply to resources the entitlement \\ groups has access to
     * @type {Array<DataAccessCategoriesInner>}
     * @memberof DataAccess
     */
    'categories'?: Array<DataAccessCategoriesInner>;
    /**
     *
     * @type {DataAccessImpactScore}
     * @memberof DataAccess
     */
    'impactScore'?: DataAccessImpactScore;
}
/**
 *
 * @export
 * @interface DataAccessCategoriesInner
 */
export interface DataAccessCategoriesInner {
    /**
     * Value of the category
     * @type {string}
     * @memberof DataAccessCategoriesInner
     */
    'value'?: string;
    /**
     * Number of matched for each category
     * @type {number}
     * @memberof DataAccessCategoriesInner
     */
    'matchCount'?: number;
}
/**
 *
 * @export
 * @interface DataAccessImpactScore
 */
export interface DataAccessImpactScore {
    /**
     * Impact Score for this data
     * @type {string}
     * @memberof DataAccessImpactScore
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface DataAccessPoliciesInner
 */
export interface DataAccessPoliciesInner {
    /**
     * Value of the policy
     * @type {string}
     * @memberof DataAccessPoliciesInner
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface DateCompare
 */
export interface DateCompare {
    /**
     *
     * @type {DateCompareFirstDate}
     * @memberof DateCompare
     */
    'firstDate': DateCompareFirstDate;
    /**
     *
     * @type {DateCompareSecondDate}
     * @memberof DateCompare
     */
    'secondDate': DateCompareSecondDate;
    /**
     * This is the comparison to perform. | Operation | Description | | --------- | ------- | | LT        | Strictly less than: firstDate < secondDate | | LTE       | Less than or equal to: firstDate <= secondDate | | GT        | Strictly greater than: firstDate > secondDate | | GTE       | Greater than or equal to: firstDate >= secondDate |
     * @type {string}
     * @memberof DateCompare
     */
    'operator': DateCompareOperatorEnum;
    /**
     * The output of the transform if the expression evalutes to true
     * @type {string}
     * @memberof DateCompare
     */
    'positiveCondition': string;
    /**
     * The output of the transform if the expression evalutes to false
     * @type {string}
     * @memberof DateCompare
     */
    'negativeCondition': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DateCompare
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DateCompare
     */
    'input'?: {
        [key: string]: any;
    };
}
export declare const DateCompareOperatorEnum: {
    readonly Lt: "LT";
    readonly Lte: "LTE";
    readonly Gt: "GT";
    readonly Gte: "GTE";
};
export type DateCompareOperatorEnum = typeof DateCompareOperatorEnum[keyof typeof DateCompareOperatorEnum];
/**
 * @type DateCompareFirstDate
 * This is the first date to consider (The date that would be on the left hand side of the comparison operation).
 * @export
 */
export type DateCompareFirstDate = AccountAttribute | DateFormat;
/**
 * @type DateCompareSecondDate
 * This is the second date to consider (The date that would be on the right hand side of the comparison operation).
 * @export
 */
export type DateCompareSecondDate = AccountAttribute | DateFormat;
/**
 *
 * @export
 * @interface DateFormat
 */
export interface DateFormat {
    /**
     *
     * @type {DateFormatInputFormat}
     * @memberof DateFormat
     */
    'inputFormat'?: DateFormatInputFormat;
    /**
     *
     * @type {DateFormatOutputFormat}
     * @memberof DateFormat
     */
    'outputFormat'?: DateFormatOutputFormat;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DateFormat
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DateFormat
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * @type DateFormatInputFormat
 * A string value indicating either the explicit SimpleDateFormat or the built-in named format that the data is coming in as.  *If no inputFormat is provided, the transform assumes that it is in ISO8601 format*
 * @export
 */
export type DateFormatInputFormat = NamedConstructs | string;
/**
 * @type DateFormatOutputFormat
 * A string value indicating either the explicit SimpleDateFormat or the built-in named format that the data should be formatted into.  *If no inputFormat is provided, the transform assumes that it is in ISO8601 format*
 * @export
 */
export type DateFormatOutputFormat = NamedConstructs | string;
/**
 *
 * @export
 * @interface DateMath
 */
export interface DateMath {
    /**
     * A string value of the date and time components to operation on, along with the math operations to execute.
     * @type {string}
     * @memberof DateMath
     */
    'expression': string;
    /**
     * A boolean value to indicate whether the transform should round up or down when a rounding `/` operation is defined in the expression.    If not provided, the transform will default to `false`   `true` indicates the transform should round up (i.e., truncate the fractional date/time component indicated and then add one unit of that component)   `false` indicates the transform should round down (i.e., truncate the fractional date/time component indicated)
     * @type {boolean}
     * @memberof DateMath
     */
    'roundUp'?: boolean;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DateMath
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DateMath
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface DecomposeDiacriticalMarks
 */
export interface DecomposeDiacriticalMarks {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DecomposeDiacriticalMarks
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DecomposeDiacriticalMarks
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface DeleteNonEmployeeRecordsInBulkRequest
 */
export interface DeleteNonEmployeeRecordsInBulkRequest {
    /**
     * List of non-employee ids.
     * @type {Array<string>}
     * @memberof DeleteNonEmployeeRecordsInBulkRequest
     */
    'ids': Array<string>;
}
/**
 *
 * @export
 * @interface DeleteSource202Response
 */
export interface DeleteSource202Response {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof DeleteSource202Response
     */
    'type'?: DeleteSource202ResponseTypeEnum;
    /**
     * Task result ID.
     * @type {string}
     * @memberof DeleteSource202Response
     */
    'id'?: string;
    /**
     * Task result\'s human-readable display name (this should be null/empty).
     * @type {string}
     * @memberof DeleteSource202Response
     */
    'name'?: string;
}
export declare const DeleteSource202ResponseTypeEnum: {
    readonly TaskResult: "TASK_RESULT";
};
export type DeleteSource202ResponseTypeEnum = typeof DeleteSource202ResponseTypeEnum[keyof typeof DeleteSource202ResponseTypeEnum];
/**
 *
 * @export
 * @interface DeleteVendorConnectorMapping200Response
 */
export interface DeleteVendorConnectorMapping200Response {
    /**
     * The number of vendor connector mappings successfully deleted.
     * @type {number}
     * @memberof DeleteVendorConnectorMapping200Response
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface DiscoveredApplicationsInner
 */
export interface DiscoveredApplicationsInner {
    /**
     * Unique identifier for the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInner
     */
    'id'?: string;
    /**
     * Name of the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInner
     */
    'name'?: string;
    /**
     * Source from which the application was discovered.
     * @type {string}
     * @memberof DiscoveredApplicationsInner
     */
    'discoverySource'?: string;
    /**
     * The vendor associated with the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInner
     */
    'discoveredVendor'?: string;
    /**
     * A brief description of the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInner
     */
    'description'?: string;
    /**
     * List of recommended connectors for the application.
     * @type {Array<string>}
     * @memberof DiscoveredApplicationsInner
     */
    'recommendedConnectors'?: Array<string>;
    /**
     * The timestamp when the application was discovered, in ISO 8601 format.
     * @type {string}
     * @memberof DiscoveredApplicationsInner
     */
    'discoveredTimestamp'?: string;
}
/**
 *
 * @export
 * @interface DisplayReference
 */
export interface DisplayReference {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof DisplayReference
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof DisplayReference
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof DisplayReference
     */
    'displayName'?: string;
}
/**
 *
 * @export
 * @interface DisplayReferenceAllOf
 */
export interface DisplayReferenceAllOf {
    /**
     *
     * @type {string}
     * @memberof DisplayReferenceAllOf
     */
    'displayName'?: string;
}
/**
 * Enum representing the currently supported document types.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const DocumentType: {
    readonly Accessprofile: "accessprofile";
    readonly Accountactivity: "accountactivity";
    readonly Account: "account";
    readonly Aggregation: "aggregation";
    readonly Entitlement: "entitlement";
    readonly Event: "event";
    readonly Identity: "identity";
    readonly Role: "role";
};
export type DocumentType = typeof DocumentType[keyof typeof DocumentType];
/**
 * An enumeration of the types of DTOs supported within the IdentityNow infrastructure.
 * @export
 * @enum {string}
 */
export declare const DtoType: {
    readonly AccountCorrelationConfig: "ACCOUNT_CORRELATION_CONFIG";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestApproval: "ACCESS_REQUEST_APPROVAL";
    readonly Account: "ACCOUNT";
    readonly Application: "APPLICATION";
    readonly Campaign: "CAMPAIGN";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly Certification: "CERTIFICATION";
    readonly Cluster: "CLUSTER";
    readonly ConnectorSchema: "CONNECTOR_SCHEMA";
    readonly Entitlement: "ENTITLEMENT";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly IdentityRequest: "IDENTITY_REQUEST";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly TagCategory: "TAG_CATEGORY";
    readonly TaskResult: "TASK_RESULT";
    readonly ReportResult: "REPORT_RESULT";
    readonly SodViolation: "SOD_VIOLATION";
    readonly AccountActivity: "ACCOUNT_ACTIVITY";
    readonly Workgroup: "WORKGROUP";
};
export type DtoType = typeof DtoType[keyof typeof DtoType];
/**
 *
 * @export
 * @interface DuoVerificationRequest
 */
export interface DuoVerificationRequest {
    /**
     * User id for Verification request.
     * @type {string}
     * @memberof DuoVerificationRequest
     */
    'userId': string;
    /**
     * User id for Verification request.
     * @type {string}
     * @memberof DuoVerificationRequest
     */
    'signedResponse': string;
}
/**
 *
 * @export
 * @interface E164phone
 */
export interface E164phone {
    /**
     * This is an optional attribute that can be used to define the region of the phone number to format into.   If defaultRegion is not provided, it will take US as the default country.   The format of the country code should be in [ISO 3166-1 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @type {string}
     * @memberof E164phone
     */
    'defaultRegion'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof E164phone
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof E164phone
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * This is used for representing email configuration for a lifecycle state
 * @export
 * @interface EmailNotificationOption
 */
export interface EmailNotificationOption {
    /**
     * If true, then the manager is notified of the lifecycle state change.
     * @type {boolean}
     * @memberof EmailNotificationOption
     */
    'notifyManagers'?: boolean;
    /**
     * If true, then all the admins are notified of the lifecycle state change.
     * @type {boolean}
     * @memberof EmailNotificationOption
     */
    'notifyAllAdmins'?: boolean;
    /**
     * If true, then the users specified in \"emailAddressList\" below are notified of lifecycle state change.
     * @type {boolean}
     * @memberof EmailNotificationOption
     */
    'notifySpecificUsers'?: boolean;
    /**
     * List of user email addresses. If \"notifySpecificUsers\" option is true, then these users are notified of lifecycle state change.
     * @type {Array<string>}
     * @memberof EmailNotificationOption
     */
    'emailAddressList'?: Array<string>;
}
/**
 *
 * @export
 * @interface Entitlement
 */
export interface Entitlement {
    /**
     * The entitlement id
     * @type {string}
     * @memberof Entitlement
     */
    'id'?: string;
    /**
     * The entitlement name
     * @type {string}
     * @memberof Entitlement
     */
    'name'?: string;
    /**
     * The entitlement attribute name
     * @type {string}
     * @memberof Entitlement
     */
    'attribute'?: string;
    /**
     * The value of the entitlement
     * @type {string}
     * @memberof Entitlement
     */
    'value'?: string;
    /**
     * The object type of the entitlement from the source schema
     * @type {string}
     * @memberof Entitlement
     */
    'sourceSchemaObjectType'?: string;
    /**
     * The description of the entitlement
     * @type {string}
     * @memberof Entitlement
     */
    'description'?: string;
    /**
     * True if the entitlement is privileged
     * @type {boolean}
     * @memberof Entitlement
     */
    'privileged'?: boolean;
    /**
     * True if the entitlement is cloud governed
     * @type {boolean}
     * @memberof Entitlement
     */
    'cloudGoverned'?: boolean;
    /**
     * Time when the entitlement was created
     * @type {string}
     * @memberof Entitlement
     */
    'created'?: string;
    /**
     * Time when the entitlement was last modified
     * @type {string}
     * @memberof Entitlement
     */
    'modified'?: string;
    /**
     *
     * @type {EntitlementSource}
     * @memberof Entitlement
     */
    'source'?: EntitlementSource;
    /**
     * A map of free-form key-value pairs from the source system
     * @type {{ [key: string]: any; }}
     * @memberof Entitlement
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * List of IDs of segments, if any, to which this Entitlement is assigned.
     * @type {Array<string>}
     * @memberof Entitlement
     */
    'segments'?: Array<string> | null;
    /**
     *
     * @type {Array<PermissionDto>}
     * @memberof Entitlement
     */
    'directPermissions'?: Array<PermissionDto>;
}
/**
 * Entitlement
 * @export
 * @interface EntitlementDocument
 */
export interface EntitlementDocument {
    /**
     *
     * @type {string}
     * @memberof EntitlementDocument
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EntitlementDocument
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof EntitlementDocument
     */
    '_type': DocumentType;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof EntitlementDocument
     */
    'modified'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof EntitlementDocument
     */
    'synced'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof EntitlementDocument
     */
    'displayName'?: string;
    /**
     *
     * @type {EntitlementDocumentAllOfSource}
     * @memberof EntitlementDocument
     */
    'source'?: EntitlementDocumentAllOfSource;
    /**
     * Segments with the role.
     * @type {Array<BaseSegment>}
     * @memberof EntitlementDocument
     */
    'segments'?: Array<BaseSegment>;
    /**
     * Number of segments with the role.
     * @type {number}
     * @memberof EntitlementDocument
     */
    'segmentCount'?: number;
    /**
     * Indicates whether the entitlement is requestable.
     * @type {boolean}
     * @memberof EntitlementDocument
     */
    'requestable'?: boolean;
    /**
     * Indicates whether the entitlement is cloud governed.
     * @type {boolean}
     * @memberof EntitlementDocument
     */
    'cloudGoverned'?: boolean;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof EntitlementDocument
     */
    'created'?: string | null;
    /**
     * Indicates whether the entitlement is privileged.
     * @type {boolean}
     * @memberof EntitlementDocument
     */
    'privileged'?: boolean;
    /**
     * Number of identities who have access to the entitlement.
     * @type {number}
     * @memberof EntitlementDocument
     */
    'identityCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof EntitlementDocument
     */
    'tags'?: Array<string>;
}
/**
 *
 * @export
 * @interface EntitlementDocumentAllOf
 */
export interface EntitlementDocumentAllOf {
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof EntitlementDocumentAllOf
     */
    'modified'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof EntitlementDocumentAllOf
     */
    'synced'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof EntitlementDocumentAllOf
     */
    'displayName'?: string;
    /**
     *
     * @type {EntitlementDocumentAllOfSource}
     * @memberof EntitlementDocumentAllOf
     */
    'source'?: EntitlementDocumentAllOfSource;
    /**
     * Segments with the role.
     * @type {Array<BaseSegment>}
     * @memberof EntitlementDocumentAllOf
     */
    'segments'?: Array<BaseSegment>;
    /**
     * Number of segments with the role.
     * @type {number}
     * @memberof EntitlementDocumentAllOf
     */
    'segmentCount'?: number;
    /**
     * Indicates whether the entitlement is requestable.
     * @type {boolean}
     * @memberof EntitlementDocumentAllOf
     */
    'requestable'?: boolean;
    /**
     * Indicates whether the entitlement is cloud governed.
     * @type {boolean}
     * @memberof EntitlementDocumentAllOf
     */
    'cloudGoverned'?: boolean;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof EntitlementDocumentAllOf
     */
    'created'?: string | null;
    /**
     * Indicates whether the entitlement is privileged.
     * @type {boolean}
     * @memberof EntitlementDocumentAllOf
     */
    'privileged'?: boolean;
    /**
     * Number of identities who have access to the entitlement.
     * @type {number}
     * @memberof EntitlementDocumentAllOf
     */
    'identityCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof EntitlementDocumentAllOf
     */
    'tags'?: Array<string>;
}
/**
 * Entitlement\'s source.
 * @export
 * @interface EntitlementDocumentAllOfSource
 */
export interface EntitlementDocumentAllOfSource {
    /**
     * ID of entitlement\'s source.
     * @type {string}
     * @memberof EntitlementDocumentAllOfSource
     */
    'id'?: string;
    /**
     * Display name of entitlement\'s source.
     * @type {string}
     * @memberof EntitlementDocumentAllOfSource
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface EntitlementDto
 */
export interface EntitlementDto {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof EntitlementDto
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof EntitlementDto
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof EntitlementDto
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof EntitlementDto
     */
    'modified'?: string;
    /**
     * Name of the entitlement attribute
     * @type {string}
     * @memberof EntitlementDto
     */
    'attribute'?: string;
    /**
     * Raw value of the entitlement
     * @type {string}
     * @memberof EntitlementDto
     */
    'value'?: string;
    /**
     * Entitlment description
     * @type {string}
     * @memberof EntitlementDto
     */
    'description'?: string;
    /**
     * Entitlement attributes
     * @type {{ [key: string]: any; }}
     * @memberof EntitlementDto
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Schema objectType on the given application that maps to an Account Group
     * @type {string}
     * @memberof EntitlementDto
     */
    'sourceSchemaObjectType'?: string;
    /**
     * Determines if this Entitlement is privileged.
     * @type {boolean}
     * @memberof EntitlementDto
     */
    'privileged'?: boolean;
    /**
     * Determines if this Entitlement is goverened in the cloud.
     * @type {boolean}
     * @memberof EntitlementDto
     */
    'cloudGoverned'?: boolean;
    /**
     *
     * @type {EntitlementSource}
     * @memberof EntitlementDto
     */
    'source'?: EntitlementSource;
}
/**
 * Entitlement object that represents entitlement
 * @export
 * @interface EntitlementDtoAllOf
 */
export interface EntitlementDtoAllOf {
    /**
     * Name of the entitlement attribute
     * @type {string}
     * @memberof EntitlementDtoAllOf
     */
    'attribute'?: string;
    /**
     * Raw value of the entitlement
     * @type {string}
     * @memberof EntitlementDtoAllOf
     */
    'value'?: string;
    /**
     * Entitlment description
     * @type {string}
     * @memberof EntitlementDtoAllOf
     */
    'description'?: string;
    /**
     * Entitlement attributes
     * @type {{ [key: string]: any; }}
     * @memberof EntitlementDtoAllOf
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Schema objectType on the given application that maps to an Account Group
     * @type {string}
     * @memberof EntitlementDtoAllOf
     */
    'sourceSchemaObjectType'?: string;
    /**
     * Determines if this Entitlement is privileged.
     * @type {boolean}
     * @memberof EntitlementDtoAllOf
     */
    'privileged'?: boolean;
    /**
     * Determines if this Entitlement is goverened in the cloud.
     * @type {boolean}
     * @memberof EntitlementDtoAllOf
     */
    'cloudGoverned'?: boolean;
    /**
     *
     * @type {EntitlementSource}
     * @memberof EntitlementDtoAllOf
     */
    'source'?: EntitlementSource;
}
/**
 * Entitlement including a specific set of access.
 * @export
 * @interface EntitlementRef
 */
export interface EntitlementRef {
    /**
     * Entitlement\'s DTO type.
     * @type {string}
     * @memberof EntitlementRef
     */
    'type'?: EntitlementRefTypeEnum;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof EntitlementRef
     */
    'id'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof EntitlementRef
     */
    'name'?: string | null;
}
export declare const EntitlementRefTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type EntitlementRefTypeEnum = typeof EntitlementRefTypeEnum[keyof typeof EntitlementRefTypeEnum];
/**
 * Entitlement including a specific set of access.
 * @export
 * @interface EntitlementRef1
 */
export interface EntitlementRef1 {
    /**
     * Entitlement\'s DTO type.
     * @type {string}
     * @memberof EntitlementRef1
     */
    'type'?: EntitlementRef1TypeEnum;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof EntitlementRef1
     */
    'id'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof EntitlementRef1
     */
    'name'?: string;
}
export declare const EntitlementRef1TypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type EntitlementRef1TypeEnum = typeof EntitlementRef1TypeEnum[keyof typeof EntitlementRef1TypeEnum];
/**
 *
 * @export
 * @interface EntitlementRequestConfig
 */
export interface EntitlementRequestConfig {
    /**
     * If this is true, entitlement requests are allowed.
     * @type {boolean}
     * @memberof EntitlementRequestConfig
     */
    'allowEntitlementRequest'?: boolean;
    /**
     * If this is true, comments are required to submit entitlement requests.
     * @type {boolean}
     * @memberof EntitlementRequestConfig
     */
    'requestCommentsRequired'?: boolean;
    /**
     * If this is true, comments are required to reject entitlement requests.
     * @type {boolean}
     * @memberof EntitlementRequestConfig
     */
    'deniedCommentsRequired'?: boolean;
    /**
     * Approval schemes for granting entitlement request. This can be empty if no approval is needed. Multiple schemes must be comma-separated. The valid schemes are \"entitlementOwner\", \"sourceOwner\", \"manager\" and \"workgroup:{id}\". You can use multiple governance groups (workgroups).
     * @type {string}
     * @memberof EntitlementRequestConfig
     */
    'grantRequestApprovalSchemes'?: string | null;
}
/**
 *
 * @export
 * @interface EntitlementSource
 */
export interface EntitlementSource {
    /**
     * The source ID
     * @type {string}
     * @memberof EntitlementSource
     */
    'id'?: string;
    /**
     * The source type, will always be \"SOURCE\"
     * @type {string}
     * @memberof EntitlementSource
     */
    'type'?: string;
    /**
     * The source name
     * @type {string}
     * @memberof EntitlementSource
     */
    'name'?: string;
}
/**
 * EntitlementReference
 * @export
 * @interface EntitlementSummary
 */
export interface EntitlementSummary {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof EntitlementSummary
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof EntitlementSummary
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof EntitlementSummary
     */
    'displayName'?: string;
    /**
     *
     * @type {DtoType}
     * @memberof EntitlementSummary
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof EntitlementSummary
     */
    'description'?: string | null;
    /**
     *
     * @type {Reference1}
     * @memberof EntitlementSummary
     */
    'source'?: Reference1;
    /**
     *
     * @type {boolean}
     * @memberof EntitlementSummary
     */
    'privileged'?: boolean;
    /**
     *
     * @type {string}
     * @memberof EntitlementSummary
     */
    'attribute'?: string;
    /**
     *
     * @type {string}
     * @memberof EntitlementSummary
     */
    'value'?: string;
    /**
     *
     * @type {boolean}
     * @memberof EntitlementSummary
     */
    'standalone'?: boolean;
}
/**
 *
 * @export
 * @interface EntitlementSummaryAllOf
 */
export interface EntitlementSummaryAllOf {
    /**
     *
     * @type {Reference1}
     * @memberof EntitlementSummaryAllOf
     */
    'source'?: Reference1;
    /**
     *
     * @type {boolean}
     * @memberof EntitlementSummaryAllOf
     */
    'privileged'?: boolean;
    /**
     *
     * @type {string}
     * @memberof EntitlementSummaryAllOf
     */
    'attribute'?: string;
    /**
     *
     * @type {string}
     * @memberof EntitlementSummaryAllOf
     */
    'value'?: string;
    /**
     *
     * @type {boolean}
     * @memberof EntitlementSummaryAllOf
     */
    'standalone'?: boolean;
}
/**
 *
 * @export
 * @interface ErrorMessageDto
 */
export interface ErrorMessageDto {
    /**
     * The locale for the message text, a BCP 47 language tag.
     * @type {string}
     * @memberof ErrorMessageDto
     */
    'locale'?: string | null;
    /**
     *
     * @type {LocaleOrigin}
     * @memberof ErrorMessageDto
     */
    'localeOrigin'?: LocaleOrigin | null;
    /**
     * Actual text of the error message in the indicated locale.
     * @type {string}
     * @memberof ErrorMessageDto
     */
    'text'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponseDto
 */
export interface ErrorResponseDto {
    /**
     * Fine-grained error code providing more detail of the error.
     * @type {string}
     * @memberof ErrorResponseDto
     */
    'detailCode'?: string;
    /**
     * Unique tracking id for the error.
     * @type {string}
     * @memberof ErrorResponseDto
     */
    'trackingId'?: string;
    /**
     * Generic localized reason for error
     * @type {Array<ErrorMessageDto>}
     * @memberof ErrorResponseDto
     */
    'messages'?: Array<ErrorMessageDto>;
    /**
     * Plain-text descriptive reasons to provide additional detail to the text provided in the messages field
     * @type {Array<ErrorMessageDto>}
     * @memberof ErrorResponseDto
     */
    'causes'?: Array<ErrorMessageDto>;
}
/**
 * Event
 * @export
 * @interface Event
 */
export interface Event {
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Event
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof Event
     */
    '_type': DocumentType;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof Event
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof Event
     */
    'synced'?: string;
    /**
     * Name of the event as it\'s displayed in audit reports.
     * @type {string}
     * @memberof Event
     */
    'action'?: string;
    /**
     * Event type. Refer to [Event Types](https://documentation.sailpoint.com/saas/help/search/index.html#event-types) for a list of event types and their meanings.
     * @type {string}
     * @memberof Event
     */
    'type'?: string;
    /**
     * Name of the actor that generated the event.
     * @type {string}
     * @memberof Event
     */
    'actor'?: string;
    /**
     * Name of the target, or recipient, of the event.
     * @type {string}
     * @memberof Event
     */
    'target'?: string;
    /**
     * The event\'s stack.
     * @type {string}
     * @memberof Event
     */
    'stack'?: string;
    /**
     * ID of the group of events.
     * @type {string}
     * @memberof Event
     */
    'trackingNumber'?: string;
    /**
     * Target system\'s IP address.
     * @type {string}
     * @memberof Event
     */
    'ipAddress'?: string;
    /**
     * ID of event\'s details.
     * @type {string}
     * @memberof Event
     */
    'details'?: string;
    /**
     * Attributes involved in the event.
     * @type {{ [key: string]: any; }}
     * @memberof Event
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Objects the event is happening to.
     * @type {Array<string>}
     * @memberof Event
     */
    'objects'?: Array<string>;
    /**
     * Operation, or action, performed during the event.
     * @type {string}
     * @memberof Event
     */
    'operation'?: string;
    /**
     * Event status. Refer to [Event Statuses](https://documentation.sailpoint.com/saas/help/search/index.html#event-statuses) for a list of event statuses and their meanings.
     * @type {string}
     * @memberof Event
     */
    'status'?: string;
    /**
     * Event\'s normalized name. This normalized name always follows the pattern of \'objects_operation_status\'.
     * @type {string}
     * @memberof Event
     */
    'technicalName'?: string;
}
/**
 *
 * @export
 * @interface EventAllOf
 */
export interface EventAllOf {
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof EventAllOf
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof EventAllOf
     */
    'synced'?: string;
    /**
     * Name of the event as it\'s displayed in audit reports.
     * @type {string}
     * @memberof EventAllOf
     */
    'action'?: string;
    /**
     * Event type. Refer to [Event Types](https://documentation.sailpoint.com/saas/help/search/index.html#event-types) for a list of event types and their meanings.
     * @type {string}
     * @memberof EventAllOf
     */
    'type'?: string;
    /**
     * Name of the actor that generated the event.
     * @type {string}
     * @memberof EventAllOf
     */
    'actor'?: string;
    /**
     * Name of the target, or recipient, of the event.
     * @type {string}
     * @memberof EventAllOf
     */
    'target'?: string;
    /**
     * The event\'s stack.
     * @type {string}
     * @memberof EventAllOf
     */
    'stack'?: string;
    /**
     * ID of the group of events.
     * @type {string}
     * @memberof EventAllOf
     */
    'trackingNumber'?: string;
    /**
     * Target system\'s IP address.
     * @type {string}
     * @memberof EventAllOf
     */
    'ipAddress'?: string;
    /**
     * ID of event\'s details.
     * @type {string}
     * @memberof EventAllOf
     */
    'details'?: string;
    /**
     * Attributes involved in the event.
     * @type {{ [key: string]: any; }}
     * @memberof EventAllOf
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Objects the event is happening to.
     * @type {Array<string>}
     * @memberof EventAllOf
     */
    'objects'?: Array<string>;
    /**
     * Operation, or action, performed during the event.
     * @type {string}
     * @memberof EventAllOf
     */
    'operation'?: string;
    /**
     * Event status. Refer to [Event Statuses](https://documentation.sailpoint.com/saas/help/search/index.html#event-statuses) for a list of event statuses and their meanings.
     * @type {string}
     * @memberof EventAllOf
     */
    'status'?: string;
    /**
     * Event\'s normalized name. This normalized name always follows the pattern of \'objects_operation_status\'.
     * @type {string}
     * @memberof EventAllOf
     */
    'technicalName'?: string;
}
/**
 * Attributes related to an IdentityNow ETS event
 * @export
 * @interface EventAttributes
 */
export interface EventAttributes {
    /**
     * The unique ID of the trigger
     * @type {string}
     * @memberof EventAttributes
     */
    'id': string;
    /**
     * JSON path expression that will limit which events the trigger will fire on
     * @type {string}
     * @memberof EventAttributes
     */
    'filter.$'?: string;
    /**
     * Description of the event trigger
     * @type {string}
     * @memberof EventAttributes
     */
    'description'?: string;
}
/**
 * Event
 * @export
 * @interface EventDocument
 */
export interface EventDocument {
    /**
     *
     * @type {string}
     * @memberof EventDocument
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventDocument
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof EventDocument
     */
    '_type': DocumentType;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof EventDocument
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof EventDocument
     */
    'synced'?: string;
    /**
     * Name of the event as it\'s displayed in audit reports.
     * @type {string}
     * @memberof EventDocument
     */
    'action'?: string;
    /**
     * Event type. Refer to [Event Types](https://documentation.sailpoint.com/saas/help/search/index.html#event-types) for a list of event types and their meanings.
     * @type {string}
     * @memberof EventDocument
     */
    'type'?: string;
    /**
     * Name of the actor that generated the event.
     * @type {string}
     * @memberof EventDocument
     */
    'actor'?: string;
    /**
     * Name of the target, or recipient, of the event.
     * @type {string}
     * @memberof EventDocument
     */
    'target'?: string;
    /**
     * The event\'s stack.
     * @type {string}
     * @memberof EventDocument
     */
    'stack'?: string;
    /**
     * ID of the group of events.
     * @type {string}
     * @memberof EventDocument
     */
    'trackingNumber'?: string;
    /**
     * Target system\'s IP address.
     * @type {string}
     * @memberof EventDocument
     */
    'ipAddress'?: string;
    /**
     * ID of event\'s details.
     * @type {string}
     * @memberof EventDocument
     */
    'details'?: string;
    /**
     * Attributes involved in the event.
     * @type {{ [key: string]: any; }}
     * @memberof EventDocument
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Objects the event is happening to.
     * @type {Array<string>}
     * @memberof EventDocument
     */
    'objects'?: Array<string>;
    /**
     * Operation, or action, performed during the event.
     * @type {string}
     * @memberof EventDocument
     */
    'operation'?: string;
    /**
     * Event status. Refer to [Event Statuses](https://documentation.sailpoint.com/saas/help/search/index.html#event-statuses) for a list of event statuses and their meanings.
     * @type {string}
     * @memberof EventDocument
     */
    'status'?: string;
    /**
     * Event\'s normalized name. This normalized name always follows the pattern of \'objects_operation_status\'.
     * @type {string}
     * @memberof EventDocument
     */
    'technicalName'?: string;
}
/**
 *
 * @export
 * @interface ExceptionAccessCriteria
 */
export interface ExceptionAccessCriteria {
    /**
     *
     * @type {ExceptionCriteria}
     * @memberof ExceptionAccessCriteria
     */
    'leftCriteria'?: ExceptionCriteria;
    /**
     *
     * @type {ExceptionCriteria}
     * @memberof ExceptionAccessCriteria
     */
    'rightCriteria'?: ExceptionCriteria;
}
/**
 *
 * @export
 * @interface ExceptionCriteria
 */
export interface ExceptionCriteria {
    /**
     * List of exception criteria. There is a min of 1 and max of 50 items in the list.
     * @type {Array<ExceptionCriteriaCriteriaListInner>}
     * @memberof ExceptionCriteria
     */
    'criteriaList'?: Array<ExceptionCriteriaCriteriaListInner>;
}
/**
 * Access reference with addition of boolean existing flag to indicate whether the access was extant
 * @export
 * @interface ExceptionCriteriaAccess
 */
export interface ExceptionCriteriaAccess {
    /**
     *
     * @type {DtoType}
     * @memberof ExceptionCriteriaAccess
     */
    'type'?: DtoType;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaAccess
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaAccess
     */
    'name'?: string;
    /**
     * Whether the subject identity already had that access or not
     * @type {boolean}
     * @memberof ExceptionCriteriaAccess
     */
    'existing'?: boolean;
}
/**
 * The types of objects supported for SOD violations
 * @export
 * @interface ExceptionCriteriaCriteriaListInner
 */
export interface ExceptionCriteriaCriteriaListInner {
    /**
     * The type of object that is referenced
     * @type {object}
     * @memberof ExceptionCriteriaCriteriaListInner
     */
    'type'?: ExceptionCriteriaCriteriaListInnerTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaCriteriaListInner
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaCriteriaListInner
     */
    'name'?: string;
    /**
     * Whether the subject identity already had that access or not
     * @type {boolean}
     * @memberof ExceptionCriteriaCriteriaListInner
     */
    'existing'?: boolean;
}
export declare const ExceptionCriteriaCriteriaListInnerTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type ExceptionCriteriaCriteriaListInnerTypeEnum = typeof ExceptionCriteriaCriteriaListInnerTypeEnum[keyof typeof ExceptionCriteriaCriteriaListInnerTypeEnum];
/**
 * The current state of execution.
 * @export
 * @enum {string}
 */
export declare const ExecutionStatus: {
    readonly Executing: "EXECUTING";
    readonly Verifying: "VERIFYING";
    readonly Terminated: "TERMINATED";
    readonly Completed: "COMPLETED";
};
export type ExecutionStatus = typeof ExecutionStatus[keyof typeof ExecutionStatus];
/**
 *
 * @export
 * @interface ExpansionItem
 */
export interface ExpansionItem {
    /**
     * The ID of the account
     * @type {string}
     * @memberof ExpansionItem
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof ExpansionItem
     */
    'cause'?: string;
    /**
     * The name of the item
     * @type {string}
     * @memberof ExpansionItem
     */
    'name'?: string;
    /**
     *
     * @type {Array<AttributeRequest>}
     * @memberof ExpansionItem
     */
    'attributeRequests'?: Array<AttributeRequest>;
    /**
     *
     * @type {AccountSource}
     * @memberof ExpansionItem
     */
    'source'?: AccountSource;
}
/**
 *
 * @export
 * @interface Expression
 */
export interface Expression {
    /**
     * Operator for the expression
     * @type {string}
     * @memberof Expression
     */
    'operator'?: ExpressionOperatorEnum;
    /**
     * Name for the attribute
     * @type {string}
     * @memberof Expression
     */
    'attribute'?: string | null;
    /**
     *
     * @type {Value}
     * @memberof Expression
     */
    'value'?: Value | null;
    /**
     * List of expressions
     * @type {Array<ExpressionChildrenInner>}
     * @memberof Expression
     */
    'children'?: Array<ExpressionChildrenInner> | null;
}
export declare const ExpressionOperatorEnum: {
    readonly And: "AND";
    readonly Equals: "EQUALS";
};
export type ExpressionOperatorEnum = typeof ExpressionOperatorEnum[keyof typeof ExpressionOperatorEnum];
/**
 *
 * @export
 * @interface ExpressionChildrenInner
 */
export interface ExpressionChildrenInner {
    /**
     * Operator for the expression
     * @type {string}
     * @memberof ExpressionChildrenInner
     */
    'operator'?: ExpressionChildrenInnerOperatorEnum;
    /**
     * Name for the attribute
     * @type {string}
     * @memberof ExpressionChildrenInner
     */
    'attribute'?: string | null;
    /**
     *
     * @type {Value}
     * @memberof ExpressionChildrenInner
     */
    'value'?: Value | null;
    /**
     * There cannot be anymore nested children. This will always be null.
     * @type {string}
     * @memberof ExpressionChildrenInner
     */
    'children'?: string | null;
}
export declare const ExpressionChildrenInnerOperatorEnum: {
    readonly And: "AND";
    readonly Equals: "EQUALS";
};
export type ExpressionChildrenInnerOperatorEnum = typeof ExpressionChildrenInnerOperatorEnum[keyof typeof ExpressionChildrenInnerOperatorEnum];
/**
 * Attributes related to an external trigger
 * @export
 * @interface ExternalAttributes
 */
export interface ExternalAttributes {
    /**
     * A unique name for the external trigger
     * @type {string}
     * @memberof ExternalAttributes
     */
    'name'?: string;
    /**
     * Additonal context about the external trigger
     * @type {string}
     * @memberof ExternalAttributes
     */
    'description'?: string;
    /**
     * OAuth Client ID to authenticate with this trigger
     * @type {string}
     * @memberof ExternalAttributes
     */
    'clientId'?: string;
    /**
     * URL to invoke this workflow
     * @type {string}
     * @memberof ExternalAttributes
     */
    'url'?: string;
}
/**
 *
 * @export
 * @interface FederationProtocolDetails
 */
export interface FederationProtocolDetails {
    /**
     * Federation protocol role
     * @type {string}
     * @memberof FederationProtocolDetails
     */
    'role'?: FederationProtocolDetailsRoleEnum;
    /**
     * An entity ID is a globally unique name for a SAML entity, either an Identity Provider (IDP) or a Service Provider (SP).
     * @type {string}
     * @memberof FederationProtocolDetails
     */
    'entityId'?: string;
}
export declare const FederationProtocolDetailsRoleEnum: {
    readonly Idp: "SAML_IDP";
    readonly Sp: "SAML_SP";
};
export type FederationProtocolDetailsRoleEnum = typeof FederationProtocolDetailsRoleEnum[keyof typeof FederationProtocolDetailsRoleEnum];
/**
 *
 * @export
 * @interface FieldDetailsDto
 */
export interface FieldDetailsDto {
    /**
     * The name of the attribute.
     * @type {string}
     * @memberof FieldDetailsDto
     */
    'name'?: string;
    /**
     * The transform to apply to the field
     * @type {object}
     * @memberof FieldDetailsDto
     */
    'transform'?: object;
    /**
     * Attributes required for the transform
     * @type {object}
     * @memberof FieldDetailsDto
     */
    'attributes'?: object;
    /**
     * Flag indicating whether or not the attribute is required.
     * @type {boolean}
     * @memberof FieldDetailsDto
     */
    'isRequired'?: boolean;
    /**
     * The type of the attribute.
     * @type {string}
     * @memberof FieldDetailsDto
     */
    'type'?: string;
    /**
     * Flag indicating whether or not the attribute is multi-valued.
     * @type {boolean}
     * @memberof FieldDetailsDto
     */
    'isMultiValued'?: boolean;
}
/**
 *
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     *
     * @type {FilterType}
     * @memberof Filter
     */
    'type'?: FilterType;
    /**
     *
     * @type {Range}
     * @memberof Filter
     */
    'range'?: Range;
    /**
     * The terms to be filtered.
     * @type {Array<string>}
     * @memberof Filter
     */
    'terms'?: Array<string>;
    /**
     * Indicates if the filter excludes results.
     * @type {boolean}
     * @memberof Filter
     */
    'exclude'?: boolean;
}
/**
 * An additional filter to constrain the results of the search query.
 * @export
 * @interface FilterAggregation
 */
export interface FilterAggregation {
    /**
     * The name of the filter aggregate to be included in the result.
     * @type {string}
     * @memberof FilterAggregation
     */
    'name': string;
    /**
     *
     * @type {SearchFilterType}
     * @memberof FilterAggregation
     */
    'type'?: SearchFilterType;
    /**
     * The search field to apply the filter to.  Prefix the field name with \'@\' to reference a nested object.
     * @type {string}
     * @memberof FilterAggregation
     */
    'field': string;
    /**
     * The value to filter on.
     * @type {string}
     * @memberof FilterAggregation
     */
    'value': string;
}
/**
 * Enum representing the currently supported filter types. Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const FilterType: {
    readonly Exists: "EXISTS";
    readonly Range: "RANGE";
    readonly Terms: "TERMS";
};
export type FilterType = typeof FilterType[keyof typeof FilterType];
/**
 *
 * @export
 * @interface FirstValid
 */
export interface FirstValid {
    /**
     * An array of attributes to evaluate for existence.
     * @type {Array<object>}
     * @memberof FirstValid
     */
    'values': Array<object>;
    /**
     * a true or false value representing to move on to the next option if an error (like an Null Pointer Exception) were to occur.
     * @type {boolean}
     * @memberof FirstValid
     */
    'ignoreErrors'?: boolean;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof FirstValid
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface FormDetails
 */
export interface FormDetails {
    /**
     * ID of the form
     * @type {string}
     * @memberof FormDetails
     */
    'id'?: string | null;
    /**
     * Name of the form
     * @type {string}
     * @memberof FormDetails
     */
    'name'?: string | null;
    /**
     * The form title
     * @type {string}
     * @memberof FormDetails
     */
    'title'?: string;
    /**
     * The form subtitle.
     * @type {string}
     * @memberof FormDetails
     */
    'subtitle'?: string;
    /**
     * The name of the user that should be shown this form
     * @type {string}
     * @memberof FormDetails
     */
    'targetUser'?: string;
    /**
     * Sections of the form
     * @type {Array<SectionDetails>}
     * @memberof FormDetails
     */
    'sections'?: Array<SectionDetails>;
}
/**
 *
 * @export
 * @interface FormItemDetails
 */
export interface FormItemDetails {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof FormItemDetails
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ForwardApprovalDto
 */
export interface ForwardApprovalDto {
    /**
     * The Id of the new owner
     * @type {string}
     * @memberof ForwardApprovalDto
     */
    'newOwnerId': string;
    /**
     * The comment provided by the forwarder
     * @type {string}
     * @memberof ForwardApprovalDto
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface GenerateRandomString
 */
export interface GenerateRandomString {
    /**
     * This must always be set to \"Cloud Services Deployment Utility\"
     * @type {string}
     * @memberof GenerateRandomString
     */
    'name': string;
    /**
     * The operation to perform `generateRandomString`
     * @type {string}
     * @memberof GenerateRandomString
     */
    'operation': string;
    /**
     * This must be either \"true\" or \"false\" to indicate whether the generator logic should include numbers
     * @type {boolean}
     * @memberof GenerateRandomString
     */
    'includeNumbers': boolean;
    /**
     * This must be either \"true\" or \"false\" to indicate whether the generator logic should include special characters
     * @type {boolean}
     * @memberof GenerateRandomString
     */
    'includeSpecialChars': boolean;
    /**
     * This specifies how long the randomly generated string needs to be   >NOTE Due to identity attribute data constraints, the maximum allowable value is 450 characters
     * @type {string}
     * @memberof GenerateRandomString
     */
    'length': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof GenerateRandomString
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 * @type GetActiveCampaigns200ResponseInner
 * @export
 */
export type GetActiveCampaigns200ResponseInner = Campaign | SlimCampaign;
/**
 *
 * @export
 * @interface GetOAuthClientResponse
 */
export interface GetOAuthClientResponse {
    /**
     * ID of the OAuth client
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'id': string;
    /**
     * The name of the business the API Client should belong to
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'businessName': string | null;
    /**
     * The homepage URL associated with the owner of the API Client
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'homepageUrl': string | null;
    /**
     * A human-readable name for the API Client
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'name': string;
    /**
     * A description of the API Client
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'description': string | null;
    /**
     * The number of seconds an access token generated for this API Client is valid for
     * @type {number}
     * @memberof GetOAuthClientResponse
     */
    'accessTokenValiditySeconds': number;
    /**
     * The number of seconds a refresh token generated for this API Client is valid for
     * @type {number}
     * @memberof GetOAuthClientResponse
     */
    'refreshTokenValiditySeconds': number;
    /**
     * A list of the approved redirect URIs used with the authorization_code flow
     * @type {Array<string>}
     * @memberof GetOAuthClientResponse
     */
    'redirectUris': Array<string> | null;
    /**
     * A list of OAuth 2.0 grant types this API Client can be used with
     * @type {Array<GrantType>}
     * @memberof GetOAuthClientResponse
     */
    'grantTypes': Array<GrantType>;
    /**
     *
     * @type {AccessType}
     * @memberof GetOAuthClientResponse
     */
    'accessType': AccessType;
    /**
     *
     * @type {ClientType}
     * @memberof GetOAuthClientResponse
     */
    'type': ClientType;
    /**
     * An indicator of whether the API Client can be used for requests internal to IDN
     * @type {boolean}
     * @memberof GetOAuthClientResponse
     */
    'internal': boolean;
    /**
     * An indicator of whether the API Client is enabled for use
     * @type {boolean}
     * @memberof GetOAuthClientResponse
     */
    'enabled': boolean;
    /**
     * An indicator of whether the API Client supports strong authentication
     * @type {boolean}
     * @memberof GetOAuthClientResponse
     */
    'strongAuthSupported': boolean;
    /**
     * An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow
     * @type {boolean}
     * @memberof GetOAuthClientResponse
     */
    'claimsSupported': boolean;
    /**
     * The date and time, down to the millisecond, when the API Client was created
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'created': string;
    /**
     * The date and time, down to the millisecond, when the API Client was last updated
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'modified': string;
    /**
     *
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'secret'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'metadata'?: string | null;
    /**
     * The date and time, down to the millisecond, when this API Client was last used to generate an access token. This timestamp does not get updated on every API Client usage, but only once a day. This property can be useful for identifying which API Clients are no longer actively used and can be removed.
     * @type {string}
     * @memberof GetOAuthClientResponse
     */
    'lastUsed'?: string | null;
    /**
     * Scopes of the API Client.
     * @type {Array<string>}
     * @memberof GetOAuthClientResponse
     */
    'scope': Array<string> | null;
}
/**
 *
 * @export
 * @interface GetPersonalAccessTokenResponse
 */
export interface GetPersonalAccessTokenResponse {
    /**
     * The ID of the personal access token (to be used as the username for Basic Auth).
     * @type {string}
     * @memberof GetPersonalAccessTokenResponse
     */
    'id': string;
    /**
     * The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.
     * @type {string}
     * @memberof GetPersonalAccessTokenResponse
     */
    'name': string;
    /**
     * Scopes of the personal  access token.
     * @type {Array<string>}
     * @memberof GetPersonalAccessTokenResponse
     */
    'scope': Array<string> | null;
    /**
     *
     * @type {PatOwner}
     * @memberof GetPersonalAccessTokenResponse
     */
    'owner': PatOwner;
    /**
     * The date and time, down to the millisecond, when this personal access token was created.
     * @type {string}
     * @memberof GetPersonalAccessTokenResponse
     */
    'created': string;
    /**
     * The date and time, down to the millisecond, when this personal access token was last used to generate an access token. This timestamp does not get updated on every PAT usage, but only once a day. This property can be useful for identifying which PATs are no longer actively used and can be removed.
     * @type {string}
     * @memberof GetPersonalAccessTokenResponse
     */
    'lastUsed'?: string | null;
    /**
     * If true, this token is managed by the SailPoint platform, and is not visible in the user interface. For example, Workflows will create managed personal access tokens for users who create workflows.
     * @type {boolean}
     * @memberof GetPersonalAccessTokenResponse
     */
    'managed'?: boolean;
}
/**
 *
 * @export
 * @interface GetReferenceIdentityAttribute
 */
export interface GetReferenceIdentityAttribute {
    /**
     * This must always be set to \"Cloud Services Deployment Utility\"
     * @type {string}
     * @memberof GetReferenceIdentityAttribute
     */
    'name': string;
    /**
     * The operation to perform `getReferenceIdentityAttribute`
     * @type {string}
     * @memberof GetReferenceIdentityAttribute
     */
    'operation': string;
    /**
     * This is the SailPoint User Name (uid) value of the identity whose attribute is desired  As a convenience feature, you can use the `manager` keyword to dynamically look up the user\'s manager and then get that manager\'s identity attribute.
     * @type {string}
     * @memberof GetReferenceIdentityAttribute
     */
    'uid': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof GetReferenceIdentityAttribute
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface GetVendorConnectorMappings405Response
 */
export interface GetVendorConnectorMappings405Response {
    /**
     * A message describing the error
     * @type {object}
     * @memberof GetVendorConnectorMappings405Response
     */
    'errorName'?: object;
    /**
     * Description of the error
     * @type {object}
     * @memberof GetVendorConnectorMappings405Response
     */
    'errorMessage'?: object;
    /**
     * Unique tracking id for the error.
     * @type {string}
     * @memberof GetVendorConnectorMappings405Response
     */
    'trackingId'?: string;
}
/**
 * OAuth2 Grant Type
 * @export
 * @enum {string}
 */
export declare const GrantType: {
    readonly ClientCredentials: "CLIENT_CREDENTIALS";
    readonly AuthorizationCode: "AUTHORIZATION_CODE";
    readonly RefreshToken: "REFRESH_TOKEN";
};
export type GrantType = typeof GrantType[keyof typeof GrantType];
/**
 *
 * @export
 * @interface ISO3166
 */
export interface ISO3166 {
    /**
     * An optional value to denote which ISO 3166 format to return. Valid values are:   `alpha2` - Two-character country code (e.g., \"US\"); this is the default value if no format is supplied   `alpha3` - Three-character country code (e.g., \"USA\")   `numeric` - The numeric country code (e.g., \"840\")
     * @type {string}
     * @memberof ISO3166
     */
    'format'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ISO3166
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ISO3166
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Arguments for Identities details report (IDENTITIES_DETAILS)
 * @export
 * @interface IdentitiesDetailsReportArguments
 */
export interface IdentitiesDetailsReportArguments {
    /**
     * Boolean FLAG to specify if only correlated identities should be used in report processing
     * @type {boolean}
     * @memberof IdentitiesDetailsReportArguments
     */
    'correlatedOnly': boolean;
}
/**
 * Arguments for Identities report (IDENTITIES)
 * @export
 * @interface IdentitiesReportArguments
 */
export interface IdentitiesReportArguments {
    /**
     * Boolean FLAG to specify if only correlated identities should be used in report processing
     * @type {boolean}
     * @memberof IdentitiesReportArguments
     */
    'correlatedOnly'?: boolean;
}
/**
 * @type IdentityAccess
 * @export
 */
export type IdentityAccess = AccessProfileEntitlement | AccessProfileRole | AccessProfileSummary;
/**
 *
 * @export
 * @interface IdentityAttribute
 */
export interface IdentityAttribute {
    /**
     * The system (camel-cased) name of the identity attribute to bring in
     * @type {string}
     * @memberof IdentityAttribute
     */
    'name': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof IdentityAttribute
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof IdentityAttribute
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface IdentityAttribute1
 */
export interface IdentityAttribute1 {
    /**
     * The attribute key
     * @type {string}
     * @memberof IdentityAttribute1
     */
    'key'?: string;
    /**
     * Human-readable display name of the attribute
     * @type {string}
     * @memberof IdentityAttribute1
     */
    'name'?: string;
    /**
     * The attribute value
     * @type {string}
     * @memberof IdentityAttribute1
     */
    'value'?: string;
}
/**
 * Defines all the identity attribute mapping configurations. This defines how to generate or collect data for each identity attributes in identity refresh process.
 * @export
 * @interface IdentityAttributeConfig
 */
export interface IdentityAttributeConfig {
    /**
     * The backend will only promote values if the profile/mapping is enabled.
     * @type {boolean}
     * @memberof IdentityAttributeConfig
     */
    'enabled'?: boolean;
    /**
     *
     * @type {Array<IdentityAttributeTransform>}
     * @memberof IdentityAttributeConfig
     */
    'attributeTransforms'?: Array<IdentityAttributeTransform>;
}
/**
 *
 * @export
 * @interface IdentityAttributePreview
 */
export interface IdentityAttributePreview {
    /**
     * Name of the attribute that is being previewed.
     * @type {string}
     * @memberof IdentityAttributePreview
     */
    'name'?: string;
    /**
     * Value that was derived during the preview.
     * @type {object}
     * @memberof IdentityAttributePreview
     */
    'value'?: object;
    /**
     * The value of the attribute before the preview.
     * @type {object}
     * @memberof IdentityAttributePreview
     */
    'previousValue'?: object;
    /**
     *
     * @type {Array<ErrorMessageDto>}
     * @memberof IdentityAttributePreview
     */
    'errorMessages'?: Array<ErrorMessageDto>;
}
/**
 * Defines a transformation definition for an identity attribute.
 * @export
 * @interface IdentityAttributeTransform
 */
export interface IdentityAttributeTransform {
    /**
     * Name of the identity attribute.
     * @type {string}
     * @memberof IdentityAttributeTransform
     */
    'identityAttributeName'?: string;
    /**
     *
     * @type {TransformDefinition}
     * @memberof IdentityAttributeTransform
     */
    'transformDefinition'?: TransformDefinition;
}
/**
 *
 * @export
 * @interface IdentityCertDecisionSummary
 */
export interface IdentityCertDecisionSummary {
    /**
     * Number of entitlement decisions that have been made
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'entitlementDecisionsMade'?: number;
    /**
     * Number of access profile decisions that have been made
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accessProfileDecisionsMade'?: number;
    /**
     * Number of role decisions that have been made
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'roleDecisionsMade'?: number;
    /**
     * Number of account decisions that have been made
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accountDecisionsMade'?: number;
    /**
     * The total number of entitlement decisions on the certification, both complete and incomplete
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'entitlementDecisionsTotal'?: number;
    /**
     * The total number of access profile decisions on the certification, both complete and incomplete
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accessProfileDecisionsTotal'?: number;
    /**
     * The total number of role decisions on the certification, both complete and incomplete
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'roleDecisionsTotal'?: number;
    /**
     * The total number of account decisions on the certification, both complete and incomplete
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accountDecisionsTotal'?: number;
    /**
     * The number of entitlement decisions that have been made which were approved
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'entitlementsApproved'?: number;
    /**
     * The number of entitlement decisions that have been made which were revoked
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'entitlementsRevoked'?: number;
    /**
     * The number of access profile decisions that have been made which were approved
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accessProfilesApproved'?: number;
    /**
     * The number of access profile decisions that have been made which were revoked
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accessProfilesRevoked'?: number;
    /**
     * The number of role decisions that have been made which were approved
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'rolesApproved'?: number;
    /**
     * The number of role decisions that have been made which were revoked
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'rolesRevoked'?: number;
    /**
     * The number of account decisions that have been made which were approved
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accountsApproved'?: number;
    /**
     * The number of account decisions that have been made which were revoked
     * @type {number}
     * @memberof IdentityCertDecisionSummary
     */
    'accountsRevoked'?: number;
}
/**
 *
 * @export
 * @interface IdentityCertificationDto
 */
export interface IdentityCertificationDto {
    /**
     * id of the certification
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'id'?: string;
    /**
     * name of the certification
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'name'?: string;
    /**
     *
     * @type {CampaignReference}
     * @memberof IdentityCertificationDto
     */
    'campaign'?: CampaignReference;
    /**
     * Have all decisions been made?
     * @type {boolean}
     * @memberof IdentityCertificationDto
     */
    'completed'?: boolean;
    /**
     * The number of identities for whom all decisions have been made and are complete.
     * @type {number}
     * @memberof IdentityCertificationDto
     */
    'identitiesCompleted'?: number;
    /**
     * The total number of identities in the Certification, both complete and incomplete.
     * @type {number}
     * @memberof IdentityCertificationDto
     */
    'identitiesTotal'?: number;
    /**
     * created date
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'created'?: string;
    /**
     * modified date
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'modified'?: string;
    /**
     * The number of approve/revoke/acknowledge decisions that have been made.
     * @type {number}
     * @memberof IdentityCertificationDto
     */
    'decisionsMade'?: number;
    /**
     * The total number of approve/revoke/acknowledge decisions.
     * @type {number}
     * @memberof IdentityCertificationDto
     */
    'decisionsTotal'?: number;
    /**
     * The due date of the certification.
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'due'?: string;
    /**
     * The date the reviewer signed off on the Certification.
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'signed'?: string | null;
    /**
     *
     * @type {Reviewer}
     * @memberof IdentityCertificationDto
     */
    'reviewer'?: Reviewer;
    /**
     *
     * @type {Reassignment}
     * @memberof IdentityCertificationDto
     */
    'reassignment'?: Reassignment | null;
    /**
     * Identifies if the certification has an error
     * @type {boolean}
     * @memberof IdentityCertificationDto
     */
    'hasErrors'?: boolean;
    /**
     * Description of the certification error
     * @type {string}
     * @memberof IdentityCertificationDto
     */
    'errorMessage'?: string | null;
    /**
     *
     * @type {CertificationPhase}
     * @memberof IdentityCertificationDto
     */
    'phase'?: CertificationPhase;
}
/**
 * Identity
 * @export
 * @interface IdentityDocument
 */
export interface IdentityDocument {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof IdentityDocument
     */
    'id': string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof IdentityDocument
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof IdentityDocument
     */
    '_type': DocumentType;
    /**
     * Identity\'s display name.
     * @type {string}
     * @memberof IdentityDocument
     */
    'displayName'?: string;
    /**
     * Identity\'s first name.
     * @type {string}
     * @memberof IdentityDocument
     */
    'firstName'?: string;
    /**
     * Identity\'s last name.
     * @type {string}
     * @memberof IdentityDocument
     */
    'lastName'?: string;
    /**
     * Identity\'s primary email address.
     * @type {string}
     * @memberof IdentityDocument
     */
    'email'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof IdentityDocument
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof IdentityDocument
     */
    'modified'?: string | null;
    /**
     * Identity\'s phone number.
     * @type {string}
     * @memberof IdentityDocument
     */
    'phone'?: string;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof IdentityDocument
     */
    'synced'?: string;
    /**
     * Indicates whether the identity is inactive.
     * @type {boolean}
     * @memberof IdentityDocument
     */
    'inactive'?: boolean;
    /**
     * Indicates whether the identity is protected.
     * @type {boolean}
     * @memberof IdentityDocument
     */
    'protected'?: boolean;
    /**
     * Identity\'s status in SailPoint.
     * @type {string}
     * @memberof IdentityDocument
     */
    'status'?: string;
    /**
     * Identity\'s employee number.
     * @type {string}
     * @memberof IdentityDocument
     */
    'employeeNumber'?: string;
    /**
     *
     * @type {IdentityDocumentAllOfManager}
     * @memberof IdentityDocument
     */
    'manager'?: IdentityDocumentAllOfManager | null;
    /**
     * Indicates whether the identity is a manager of other identities.
     * @type {boolean}
     * @memberof IdentityDocument
     */
    'isManager'?: boolean;
    /**
     *
     * @type {IdentityDocumentAllOfIdentityProfile}
     * @memberof IdentityDocument
     */
    'identityProfile'?: IdentityDocumentAllOfIdentityProfile;
    /**
     *
     * @type {IdentityDocumentAllOfSource}
     * @memberof IdentityDocument
     */
    'source'?: IdentityDocumentAllOfSource;
    /**
     * Map or dictionary of key/value pairs.
     * @type {{ [key: string]: any; }}
     * @memberof IdentityDocument
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Identity\'s processing state.
     * @type {string}
     * @memberof IdentityDocument
     */
    'processingState'?: string | null;
    /**
     *
     * @type {ProcessingDetails}
     * @memberof IdentityDocument
     */
    'processingDetails'?: ProcessingDetails;
    /**
     * List of accounts associated with the identity.
     * @type {Array<BaseAccount>}
     * @memberof IdentityDocument
     */
    'accounts'?: Array<BaseAccount>;
    /**
     * Number of accounts associated with the identity.
     * @type {number}
     * @memberof IdentityDocument
     */
    'accountCount'?: number;
    /**
     * List of applications the identity has access to.
     * @type {Array<App>}
     * @memberof IdentityDocument
     */
    'apps'?: Array<App>;
    /**
     * Number of applications the identity has access to.
     * @type {number}
     * @memberof IdentityDocument
     */
    'appCount'?: number;
    /**
     * List of access items assigned to the identity.
     * @type {Array<IdentityAccess>}
     * @memberof IdentityDocument
     */
    'access'?: Array<IdentityAccess>;
    /**
     * Number of access items assigned to the identity.
     * @type {number}
     * @memberof IdentityDocument
     */
    'accessCount'?: number;
    /**
     * Number of entitlements assigned to the identity.
     * @type {number}
     * @memberof IdentityDocument
     */
    'entitlementCount'?: number;
    /**
     * Number of roles assigned to the identity.
     * @type {number}
     * @memberof IdentityDocument
     */
    'roleCount'?: number;
    /**
     * Number of access profiles assigned to the identity.
     * @type {number}
     * @memberof IdentityDocument
     */
    'accessProfileCount'?: number;
    /**
     * Access items the identity owns.
     * @type {Array<Owns>}
     * @memberof IdentityDocument
     */
    'owns'?: Array<Owns>;
    /**
     * Number of access items the identity owns.
     * @type {number}
     * @memberof IdentityDocument
     */
    'ownsCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof IdentityDocument
     */
    'tags'?: Array<string>;
}
/**
 *
 * @export
 * @interface IdentityDocumentAllOf
 */
export interface IdentityDocumentAllOf {
    /**
     * Identity\'s display name.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'displayName'?: string;
    /**
     * Identity\'s first name.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'firstName'?: string;
    /**
     * Identity\'s last name.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'lastName'?: string;
    /**
     * Identity\'s primary email address.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'email'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'modified'?: string | null;
    /**
     * Identity\'s phone number.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'phone'?: string;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'synced'?: string;
    /**
     * Indicates whether the identity is inactive.
     * @type {boolean}
     * @memberof IdentityDocumentAllOf
     */
    'inactive'?: boolean;
    /**
     * Indicates whether the identity is protected.
     * @type {boolean}
     * @memberof IdentityDocumentAllOf
     */
    'protected'?: boolean;
    /**
     * Identity\'s status in SailPoint.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'status'?: string;
    /**
     * Identity\'s employee number.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'employeeNumber'?: string;
    /**
     *
     * @type {IdentityDocumentAllOfManager}
     * @memberof IdentityDocumentAllOf
     */
    'manager'?: IdentityDocumentAllOfManager | null;
    /**
     * Indicates whether the identity is a manager of other identities.
     * @type {boolean}
     * @memberof IdentityDocumentAllOf
     */
    'isManager'?: boolean;
    /**
     *
     * @type {IdentityDocumentAllOfIdentityProfile}
     * @memberof IdentityDocumentAllOf
     */
    'identityProfile'?: IdentityDocumentAllOfIdentityProfile;
    /**
     *
     * @type {IdentityDocumentAllOfSource}
     * @memberof IdentityDocumentAllOf
     */
    'source'?: IdentityDocumentAllOfSource;
    /**
     * Map or dictionary of key/value pairs.
     * @type {{ [key: string]: any; }}
     * @memberof IdentityDocumentAllOf
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Identity\'s processing state.
     * @type {string}
     * @memberof IdentityDocumentAllOf
     */
    'processingState'?: string | null;
    /**
     *
     * @type {ProcessingDetails}
     * @memberof IdentityDocumentAllOf
     */
    'processingDetails'?: ProcessingDetails;
    /**
     * List of accounts associated with the identity.
     * @type {Array<BaseAccount>}
     * @memberof IdentityDocumentAllOf
     */
    'accounts'?: Array<BaseAccount>;
    /**
     * Number of accounts associated with the identity.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'accountCount'?: number;
    /**
     * List of applications the identity has access to.
     * @type {Array<App>}
     * @memberof IdentityDocumentAllOf
     */
    'apps'?: Array<App>;
    /**
     * Number of applications the identity has access to.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'appCount'?: number;
    /**
     * List of access items assigned to the identity.
     * @type {Array<IdentityAccess>}
     * @memberof IdentityDocumentAllOf
     */
    'access'?: Array<IdentityAccess>;
    /**
     * Number of access items assigned to the identity.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'accessCount'?: number;
    /**
     * Number of entitlements assigned to the identity.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'entitlementCount'?: number;
    /**
     * Number of roles assigned to the identity.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'roleCount'?: number;
    /**
     * Number of access profiles assigned to the identity.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'accessProfileCount'?: number;
    /**
     * Access items the identity owns.
     * @type {Array<Owns>}
     * @memberof IdentityDocumentAllOf
     */
    'owns'?: Array<Owns>;
    /**
     * Number of access items the identity owns.
     * @type {number}
     * @memberof IdentityDocumentAllOf
     */
    'ownsCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof IdentityDocumentAllOf
     */
    'tags'?: Array<string>;
}
/**
 * Identity\'s identity profile.
 * @export
 * @interface IdentityDocumentAllOfIdentityProfile
 */
export interface IdentityDocumentAllOfIdentityProfile {
    /**
     * Identity profile\'s ID.
     * @type {string}
     * @memberof IdentityDocumentAllOfIdentityProfile
     */
    'id'?: string;
    /**
     * Identity profile\'s name.
     * @type {string}
     * @memberof IdentityDocumentAllOfIdentityProfile
     */
    'name'?: string;
}
/**
 * Identity\'s manager.
 * @export
 * @interface IdentityDocumentAllOfManager
 */
export interface IdentityDocumentAllOfManager {
    /**
     * ID of identity\'s manager.
     * @type {string}
     * @memberof IdentityDocumentAllOfManager
     */
    'id'?: string;
    /**
     * Name of identity\'s manager.
     * @type {string}
     * @memberof IdentityDocumentAllOfManager
     */
    'name'?: string;
    /**
     * Display name of identity\'s manager.
     * @type {string}
     * @memberof IdentityDocumentAllOfManager
     */
    'displayName'?: string;
}
/**
 * Identity\'s source.
 * @export
 * @interface IdentityDocumentAllOfSource
 */
export interface IdentityDocumentAllOfSource {
    /**
     * ID of identity\'s source.
     * @type {string}
     * @memberof IdentityDocumentAllOfSource
     */
    'id'?: string;
    /**
     * Display name of identity\'s source.
     * @type {string}
     * @memberof IdentityDocumentAllOfSource
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface IdentityExceptionReportReference
 */
export interface IdentityExceptionReportReference {
    /**
     * The id of the task result.
     * @type {string}
     * @memberof IdentityExceptionReportReference
     */
    'taskResultId'?: string;
    /**
     * The name of the report.
     * @type {string}
     * @memberof IdentityExceptionReportReference
     */
    'reportName'?: string;
}
/**
 *
 * @export
 * @interface IdentityPreviewRequest
 */
export interface IdentityPreviewRequest {
    /**
     * The Identity id
     * @type {string}
     * @memberof IdentityPreviewRequest
     */
    'identityId'?: string;
    /**
     *
     * @type {Array<IdentityAttributeConfig>}
     * @memberof IdentityPreviewRequest
     */
    'identityAttributeConfig'?: Array<IdentityAttributeConfig>;
}
/**
 *
 * @export
 * @interface IdentityPreviewResponse
 */
export interface IdentityPreviewResponse {
    /**
     *
     * @type {IdentityPreviewResponseIdentity}
     * @memberof IdentityPreviewResponse
     */
    'identity'?: IdentityPreviewResponseIdentity;
    /**
     *
     * @type {Array<IdentityAttributePreview>}
     * @memberof IdentityPreviewResponse
     */
    'previewAttributes'?: Array<IdentityAttributePreview>;
}
/**
 * Identity\'s basic details.
 * @export
 * @interface IdentityPreviewResponseIdentity
 */
export interface IdentityPreviewResponseIdentity {
    /**
     * Identity\'s DTO type.
     * @type {string}
     * @memberof IdentityPreviewResponseIdentity
     */
    'type'?: IdentityPreviewResponseIdentityTypeEnum;
    /**
     * Identity ID.
     * @type {string}
     * @memberof IdentityPreviewResponseIdentity
     */
    'id'?: string;
    /**
     * Identity\'s display name.
     * @type {string}
     * @memberof IdentityPreviewResponseIdentity
     */
    'name'?: string;
}
export declare const IdentityPreviewResponseIdentityTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityPreviewResponseIdentityTypeEnum = typeof IdentityPreviewResponseIdentityTypeEnum[keyof typeof IdentityPreviewResponseIdentityTypeEnum];
/**
 *
 * @export
 * @interface IdentityProfile
 */
export interface IdentityProfile {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof IdentityProfile
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof IdentityProfile
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof IdentityProfile
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof IdentityProfile
     */
    'modified'?: string;
    /**
     * The description of the Identity Profile.
     * @type {string}
     * @memberof IdentityProfile
     */
    'description'?: string | null;
    /**
     *
     * @type {IdentityProfileAllOfOwner}
     * @memberof IdentityProfile
     */
    'owner'?: IdentityProfileAllOfOwner | null;
    /**
     * The priority for an Identity Profile.
     * @type {number}
     * @memberof IdentityProfile
     */
    'priority'?: number;
    /**
     *
     * @type {IdentityProfileAllOfAuthoritativeSource}
     * @memberof IdentityProfile
     */
    'authoritativeSource': IdentityProfileAllOfAuthoritativeSource;
    /**
     * True if a identity refresh is needed. Typically triggered when a change on the source has been made.
     * @type {boolean}
     * @memberof IdentityProfile
     */
    'identityRefreshRequired'?: boolean;
    /**
     * The number of identities that belong to the Identity Profile.
     * @type {number}
     * @memberof IdentityProfile
     */
    'identityCount'?: number;
    /**
     *
     * @type {IdentityAttributeConfig}
     * @memberof IdentityProfile
     */
    'identityAttributeConfig'?: IdentityAttributeConfig;
    /**
     *
     * @type {IdentityExceptionReportReference}
     * @memberof IdentityProfile
     */
    'identityExceptionReportReference'?: IdentityExceptionReportReference | null;
    /**
     * Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
     * @type {boolean}
     * @memberof IdentityProfile
     */
    'hasTimeBasedAttr'?: boolean;
}
/**
 *
 * @export
 * @interface IdentityProfileAllOf
 */
export interface IdentityProfileAllOf {
    /**
     * The description of the Identity Profile.
     * @type {string}
     * @memberof IdentityProfileAllOf
     */
    'description'?: string | null;
    /**
     *
     * @type {IdentityProfileAllOfOwner}
     * @memberof IdentityProfileAllOf
     */
    'owner'?: IdentityProfileAllOfOwner | null;
    /**
     * The priority for an Identity Profile.
     * @type {number}
     * @memberof IdentityProfileAllOf
     */
    'priority'?: number;
    /**
     *
     * @type {IdentityProfileAllOfAuthoritativeSource}
     * @memberof IdentityProfileAllOf
     */
    'authoritativeSource': IdentityProfileAllOfAuthoritativeSource;
    /**
     * True if a identity refresh is needed. Typically triggered when a change on the source has been made.
     * @type {boolean}
     * @memberof IdentityProfileAllOf
     */
    'identityRefreshRequired'?: boolean;
    /**
     * The number of identities that belong to the Identity Profile.
     * @type {number}
     * @memberof IdentityProfileAllOf
     */
    'identityCount'?: number;
    /**
     *
     * @type {IdentityAttributeConfig}
     * @memberof IdentityProfileAllOf
     */
    'identityAttributeConfig'?: IdentityAttributeConfig;
    /**
     *
     * @type {IdentityExceptionReportReference}
     * @memberof IdentityProfileAllOf
     */
    'identityExceptionReportReference'?: IdentityExceptionReportReference | null;
    /**
     * Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
     * @type {boolean}
     * @memberof IdentityProfileAllOf
     */
    'hasTimeBasedAttr'?: boolean;
}
/**
 *
 * @export
 * @interface IdentityProfileAllOfAuthoritativeSource
 */
export interface IdentityProfileAllOfAuthoritativeSource {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfAuthoritativeSource
     */
    'type'?: IdentityProfileAllOfAuthoritativeSourceTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfAuthoritativeSource
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfAuthoritativeSource
     */
    'name'?: string;
}
export declare const IdentityProfileAllOfAuthoritativeSourceTypeEnum: {
    readonly Source: "SOURCE";
};
export type IdentityProfileAllOfAuthoritativeSourceTypeEnum = typeof IdentityProfileAllOfAuthoritativeSourceTypeEnum[keyof typeof IdentityProfileAllOfAuthoritativeSourceTypeEnum];
/**
 * The owner of the Identity Profile.
 * @export
 * @interface IdentityProfileAllOfOwner
 */
export interface IdentityProfileAllOfOwner {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfOwner
     */
    'type'?: IdentityProfileAllOfOwnerTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfOwner
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfOwner
     */
    'name'?: string;
}
export declare const IdentityProfileAllOfOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityProfileAllOfOwnerTypeEnum = typeof IdentityProfileAllOfOwnerTypeEnum[keyof typeof IdentityProfileAllOfOwnerTypeEnum];
/**
 * Identity profile exported object.
 * @export
 * @interface IdentityProfileExportedObject
 */
export interface IdentityProfileExportedObject {
    /**
     * Version or object from the target service.
     * @type {number}
     * @memberof IdentityProfileExportedObject
     */
    'version'?: number;
    /**
     *
     * @type {IdentityProfileExportedObjectSelf}
     * @memberof IdentityProfileExportedObject
     */
    'self'?: IdentityProfileExportedObjectSelf;
    /**
     *
     * @type {IdentityProfile}
     * @memberof IdentityProfileExportedObject
     */
    'object'?: IdentityProfile;
}
/**
 * Self block for exported object.
 * @export
 * @interface IdentityProfileExportedObjectSelf
 */
export interface IdentityProfileExportedObjectSelf {
    /**
     * Exported object\'s DTO type.
     * @type {string}
     * @memberof IdentityProfileExportedObjectSelf
     */
    'type'?: IdentityProfileExportedObjectSelfTypeEnum;
    /**
     * Exported object\'s ID.
     * @type {string}
     * @memberof IdentityProfileExportedObjectSelf
     */
    'id'?: string;
    /**
     * Exported object\'s display name.
     * @type {string}
     * @memberof IdentityProfileExportedObjectSelf
     */
    'name'?: string;
}
export declare const IdentityProfileExportedObjectSelfTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type IdentityProfileExportedObjectSelfTypeEnum = typeof IdentityProfileExportedObjectSelfTypeEnum[keyof typeof IdentityProfileExportedObjectSelfTypeEnum];
/**
 * Arguments for Identity Profile Identity Error report (IDENTITY_PROFILE_IDENTITY_ERROR)
 * @export
 * @interface IdentityProfileIdentityErrorReportArguments
 */
export interface IdentityProfileIdentityErrorReportArguments {
    /**
     * Source Id to be checked on errors of identity profiles aggregation
     * @type {string}
     * @memberof IdentityProfileIdentityErrorReportArguments
     */
    'authoritativeSource': string;
}
/**
 * The manager for the identity.
 * @export
 * @interface IdentityReference
 */
export interface IdentityReference {
    /**
     *
     * @type {DtoType}
     * @memberof IdentityReference
     */
    'type'?: DtoType;
    /**
     * Identity id
     * @type {string}
     * @memberof IdentityReference
     */
    'id'?: string;
    /**
     * Human-readable display name of identity.
     * @type {string}
     * @memberof IdentityReference
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface IdentityReferenceWithNameAndEmail
 */
export interface IdentityReferenceWithNameAndEmail {
    /**
     * The type can only be IDENTITY. This is read-only.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmail
     */
    'type'?: string;
    /**
     * Identity ID.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmail
     */
    'id'?: string;
    /**
     * Identity\'s human-readable display name. This is read-only.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmail
     */
    'name'?: string;
    /**
     * Identity\'s email address. This is read-only.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmail
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface IdentitySummary
 */
export interface IdentitySummary {
    /**
     * ID of this identity summary
     * @type {string}
     * @memberof IdentitySummary
     */
    'id'?: string;
    /**
     * Human-readable display name of identity
     * @type {string}
     * @memberof IdentitySummary
     */
    'name'?: string;
    /**
     * ID of the identity that this summary represents
     * @type {string}
     * @memberof IdentitySummary
     */
    'identityId'?: string;
    /**
     * Indicates if all access items for this summary have been decided on
     * @type {boolean}
     * @memberof IdentitySummary
     */
    'completed'?: boolean;
}
/**
 * An identity with a set of access to be added
 * @export
 * @interface IdentityWithNewAccess
 */
export interface IdentityWithNewAccess {
    /**
     * Identity id to be checked.
     * @type {string}
     * @memberof IdentityWithNewAccess
     */
    'identityId': string;
    /**
     * The list of entitlements to consider for possible violations in a preventive check.
     * @type {Array<IdentityWithNewAccessAccessRefsInner>}
     * @memberof IdentityWithNewAccess
     */
    'accessRefs': Array<IdentityWithNewAccessAccessRefsInner>;
}
/**
 * An identity with a set of access to be added
 * @export
 * @interface IdentityWithNewAccess1
 */
export interface IdentityWithNewAccess1 {
    /**
     * Set of identity IDs to be checked.
     * @type {string}
     * @memberof IdentityWithNewAccess1
     */
    'identityId': string;
    /**
     * The bundle of access profiles to be added to the identities specified. All references must be ENTITLEMENT type.
     * @type {Array<IdentityWithNewAccess1AccessRefsInner>}
     * @memberof IdentityWithNewAccess1
     */
    'accessRefs': Array<IdentityWithNewAccess1AccessRefsInner>;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.
     * @type {{ [key: string]: string; }}
     * @memberof IdentityWithNewAccess1
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface IdentityWithNewAccess1AccessRefsInner
 */
export interface IdentityWithNewAccess1AccessRefsInner {
    /**
     * Entitlement\'s DTO type.
     * @type {string}
     * @memberof IdentityWithNewAccess1AccessRefsInner
     */
    'type'?: IdentityWithNewAccess1AccessRefsInnerTypeEnum;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof IdentityWithNewAccess1AccessRefsInner
     */
    'id'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof IdentityWithNewAccess1AccessRefsInner
     */
    'name'?: string;
}
export declare const IdentityWithNewAccess1AccessRefsInnerTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type IdentityWithNewAccess1AccessRefsInnerTypeEnum = typeof IdentityWithNewAccess1AccessRefsInnerTypeEnum[keyof typeof IdentityWithNewAccess1AccessRefsInnerTypeEnum];
/**
 * Entitlement including a specific set of access.
 * @export
 * @interface IdentityWithNewAccessAccessRefsInner
 */
export interface IdentityWithNewAccessAccessRefsInner {
    /**
     * Entitlement\'s DTO type.
     * @type {string}
     * @memberof IdentityWithNewAccessAccessRefsInner
     */
    'type'?: IdentityWithNewAccessAccessRefsInnerTypeEnum;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof IdentityWithNewAccessAccessRefsInner
     */
    'id'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof IdentityWithNewAccessAccessRefsInner
     */
    'name'?: string;
}
export declare const IdentityWithNewAccessAccessRefsInnerTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type IdentityWithNewAccessAccessRefsInnerTypeEnum = typeof IdentityWithNewAccessAccessRefsInnerTypeEnum[keyof typeof IdentityWithNewAccessAccessRefsInnerTypeEnum];
/**
 *
 * @export
 * @interface IdpDetails
 */
export interface IdpDetails {
    /**
     * Federation protocol role
     * @type {string}
     * @memberof IdpDetails
     */
    'role'?: IdpDetailsRoleEnum;
    /**
     * An entity ID is a globally unique name for a SAML entity, either an Identity Provider (IDP) or a Service Provider (SP).
     * @type {string}
     * @memberof IdpDetails
     */
    'entityId'?: string;
    /**
     * Defines the binding used for the SAML flow. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'binding'?: string;
    /**
     * Specifies the SAML authentication method to use. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'authContext'?: string;
    /**
     * The IDP logout URL. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'logoutUrl'?: string;
    /**
     * Determines if the configured AuthnContext should be used or the default. Used with IDP configurations.
     * @type {boolean}
     * @memberof IdpDetails
     */
    'includeAuthContext'?: boolean;
    /**
     * The name id format to use. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'nameId'?: string;
    /**
     *
     * @type {JITConfiguration}
     * @memberof IdpDetails
     */
    'jitConfiguration'?: JITConfiguration;
    /**
     * The Base64-encoded certificate used by the IDP. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'cert'?: string;
    /**
     * The IDP POST URL, used with IDP HTTP-POST bindings for IDP-initiated logins. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'loginUrlPost'?: string;
    /**
     * The IDP Redirect URL. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'loginUrlRedirect'?: string;
    /**
     * Return the saml Id for the given user, based on the IDN as SP settings of the org. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetails
     */
    'mappingAttribute'?: string;
    /**
     * The expiration date extracted from the certificate.
     * @type {string}
     * @memberof IdpDetails
     */
    'certificateExpirationDate'?: string;
    /**
     * The name extracted from the certificate.
     * @type {string}
     * @memberof IdpDetails
     */
    'certificateName'?: string;
}
export declare const IdpDetailsRoleEnum: {
    readonly SamlIdp: "SAML_IDP";
};
export type IdpDetailsRoleEnum = typeof IdpDetailsRoleEnum[keyof typeof IdpDetailsRoleEnum];
/**
 * Specification of Identity Provider Details section of Service Provider Config
 * @export
 * @interface IdpDetailsAllOf
 */
export interface IdpDetailsAllOf {
    /**
     * Defines the binding used for the SAML flow. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'binding'?: string;
    /**
     * Specifies the SAML authentication method to use. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'authContext'?: string;
    /**
     * The IDP logout URL. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'logoutUrl'?: string;
    /**
     * Determines if the configured AuthnContext should be used or the default. Used with IDP configurations.
     * @type {boolean}
     * @memberof IdpDetailsAllOf
     */
    'includeAuthContext'?: boolean;
    /**
     * The name id format to use. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'nameId'?: string;
    /**
     *
     * @type {JITConfiguration}
     * @memberof IdpDetailsAllOf
     */
    'jitConfiguration'?: JITConfiguration;
    /**
     * The Base64-encoded certificate used by the IDP. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'cert'?: string;
    /**
     * The IDP POST URL, used with IDP HTTP-POST bindings for IDP-initiated logins. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'loginUrlPost'?: string;
    /**
     * The IDP Redirect URL. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'loginUrlRedirect'?: string;
    /**
     * Return the saml Id for the given user, based on the IDN as SP settings of the org. Used with IDP configurations.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'mappingAttribute'?: string;
    /**
     * Federation protocol role
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'role'?: IdpDetailsAllOfRoleEnum;
    /**
     * The expiration date extracted from the certificate.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'certificateExpirationDate'?: string;
    /**
     * The name extracted from the certificate.
     * @type {string}
     * @memberof IdpDetailsAllOf
     */
    'certificateName'?: string;
}
export declare const IdpDetailsAllOfRoleEnum: {
    readonly SamlIdp: "SAML_IDP";
};
export type IdpDetailsAllOfRoleEnum = typeof IdpDetailsAllOfRoleEnum[keyof typeof IdpDetailsAllOfRoleEnum];
/**
 *
 * @export
 * @interface ImportNonEmployeeRecordsInBulkRequest
 */
export interface ImportNonEmployeeRecordsInBulkRequest {
    /**
     *
     * @type {any}
     * @memberof ImportNonEmployeeRecordsInBulkRequest
     */
    'data': any;
}
/**
 * Object created or updated by import.
 * @export
 * @interface ImportObject
 */
export interface ImportObject {
    /**
     * DTO type of object created or updated by import.
     * @type {string}
     * @memberof ImportObject
     */
    'type'?: ImportObjectTypeEnum;
    /**
     * ID of object created or updated by import.
     * @type {string}
     * @memberof ImportObject
     */
    'id'?: string;
    /**
     * Display name of object created or updated by import.
     * @type {string}
     * @memberof ImportObject
     */
    'name'?: string;
}
export declare const ImportObjectTypeEnum: {
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly Rule: "RULE";
    readonly Source: "SOURCE";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
};
export type ImportObjectTypeEnum = typeof ImportObjectTypeEnum[keyof typeof ImportObjectTypeEnum];
/**
 *
 * @export
 * @interface ImportUploadedBackupRequest
 */
export interface ImportUploadedBackupRequest {
    /**
     * JSON file containing the objects to be imported.
     * @type {any}
     * @memberof ImportUploadedBackupRequest
     */
    'data': any;
    /**
     * Name that will be assigned to the uploaded file.
     * @type {string}
     * @memberof ImportUploadedBackupRequest
     */
    'name': string;
}
/**
 * Enum representing the currently supported indices. Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const Index: {
    readonly Accessprofiles: "accessprofiles";
    readonly Accountactivities: "accountactivities";
    readonly Entitlements: "entitlements";
    readonly Events: "events";
    readonly Identities: "identities";
    readonly Roles: "roles";
    readonly Star: "*";
};
export type Index = typeof Index[keyof typeof Index];
/**
 *
 * @export
 * @interface IndexOf
 */
export interface IndexOf {
    /**
     * A substring to search for, searches the entire calling string, and returns the index of the first occurrence of the specified substring.
     * @type {string}
     * @memberof IndexOf
     */
    'substring': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof IndexOf
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof IndexOf
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Inner Hit query object that will cause the specified nested type to be returned as the result matching the supplied query.
 * @export
 * @interface InnerHit
 */
export interface InnerHit {
    /**
     * The search query using the Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL extended by SailPoint to support Nested queries.
     * @type {string}
     * @memberof InnerHit
     */
    'query': string;
    /**
     * The nested type to use in the inner hits query.  The nested type [Nested Type](https://www.elastic.co/guide/en/elasticsearch/reference/current/nested.html) refers to a document \"nested\" within another document. For example, an identity can have nested documents for access, accounts, and apps.
     * @type {string}
     * @memberof InnerHit
     */
    'type': string;
}
/**
 *
 * @export
 * @interface JITConfiguration
 */
export interface JITConfiguration {
    /**
     * The indicator for just-in-time provisioning enabled
     * @type {boolean}
     * @memberof JITConfiguration
     */
    'enabled'?: boolean;
    /**
     * the sourceId that mapped to just-in-time provisioning configuration
     * @type {string}
     * @memberof JITConfiguration
     */
    'sourceId'?: string;
    /**
     * A mapping of identity profile attribute names to SAML assertion attribute names
     * @type {{ [key: string]: string; }}
     * @memberof JITConfiguration
     */
    'sourceAttributeMappings'?: {
        [key: string]: string;
    };
}
/**
 * A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)
 * @export
 * @interface JsonPatchOperation
 */
export interface JsonPatchOperation {
    /**
     * The operation to be performed
     * @type {string}
     * @memberof JsonPatchOperation
     */
    'op': JsonPatchOperationOpEnum;
    /**
     * A string JSON Pointer representing the target path to an element to be affected by the operation
     * @type {string}
     * @memberof JsonPatchOperation
     */
    'path': string;
    /**
     *
     * @type {JsonPatchOperationValue}
     * @memberof JsonPatchOperation
     */
    'value'?: JsonPatchOperationValue;
}
export declare const JsonPatchOperationOpEnum: {
    readonly Add: "add";
    readonly Remove: "remove";
    readonly Replace: "replace";
    readonly Move: "move";
    readonly Copy: "copy";
    readonly Test: "test";
};
export type JsonPatchOperationOpEnum = typeof JsonPatchOperationOpEnum[keyof typeof JsonPatchOperationOpEnum];
/**
 * @type JsonPatchOperationValue
 * The value to be used for the operation, required for \"add\" and \"replace\" operations
 * @export
 */
export type JsonPatchOperationValue = Array<ArrayInner> | boolean | number | object | string;
/**
 *
 * @export
 * @interface KbaAnswerRequestItem
 */
export interface KbaAnswerRequestItem {
    /**
     * Question Id
     * @type {string}
     * @memberof KbaAnswerRequestItem
     */
    'id': string;
    /**
     * An answer for the KBA question
     * @type {string}
     * @memberof KbaAnswerRequestItem
     */
    'answer': string;
}
/**
 *
 * @export
 * @interface KbaAnswerResponseItem
 */
export interface KbaAnswerResponseItem {
    /**
     * Question Id
     * @type {string}
     * @memberof KbaAnswerResponseItem
     */
    'id': string;
    /**
     * Question description
     * @type {string}
     * @memberof KbaAnswerResponseItem
     */
    'question': string;
    /**
     * Denotes whether the KBA question has an answer configured for the current user
     * @type {boolean}
     * @memberof KbaAnswerResponseItem
     */
    'hasAnswer': boolean;
}
/**
 *
 * @export
 * @interface KbaAuthResponse
 */
export interface KbaAuthResponse {
    /**
     *
     * @type {Array<KbaAuthResponseItem>}
     * @memberof KbaAuthResponse
     */
    'kbaAuthResponseItems'?: Array<KbaAuthResponseItem>;
    /**
     * MFA Authentication status
     * @type {string}
     * @memberof KbaAuthResponse
     */
    'status'?: KbaAuthResponseStatusEnum;
}
export declare const KbaAuthResponseStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
    readonly Lockout: "LOCKOUT";
    readonly NotEnoughData: "NOT_ENOUGH_DATA";
};
export type KbaAuthResponseStatusEnum = typeof KbaAuthResponseStatusEnum[keyof typeof KbaAuthResponseStatusEnum];
/**
 *
 * @export
 * @interface KbaAuthResponseItem
 */
export interface KbaAuthResponseItem {
    /**
     * The KBA question id
     * @type {string}
     * @memberof KbaAuthResponseItem
     */
    'questionId'?: string | null;
    /**
     * Return true if verified
     * @type {boolean}
     * @memberof KbaAuthResponseItem
     */
    'isVerified'?: boolean | null;
}
/**
 * KBA Configuration
 * @export
 * @interface KbaQuestion
 */
export interface KbaQuestion {
    /**
     * KBA Question Id
     * @type {string}
     * @memberof KbaQuestion
     */
    'id': string;
    /**
     * KBA Question description
     * @type {string}
     * @memberof KbaQuestion
     */
    'text': string;
    /**
     * Denotes whether the KBA question has an answer configured for any user in the tenant
     * @type {boolean}
     * @memberof KbaQuestion
     */
    'hasAnswer': boolean;
    /**
     * Denotes the number of KBA configurations for this question
     * @type {number}
     * @memberof KbaQuestion
     */
    'numAnswers': number;
}
/**
 *
 * @export
 * @interface LeftPad
 */
export interface LeftPad {
    /**
     * An integer value for the desired length of the final output string
     * @type {string}
     * @memberof LeftPad
     */
    'length': string;
    /**
     * A string value representing the character that the incoming data should be padded with to get to the desired length   If not provided, the transform will default to a single space (\" \") character for padding
     * @type {string}
     * @memberof LeftPad
     */
    'padding'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof LeftPad
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof LeftPad
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface LifecycleState
 */
export interface LifecycleState {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof LifecycleState
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof LifecycleState
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof LifecycleState
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof LifecycleState
     */
    'modified'?: string;
    /**
     * Indicates whether the lifecycle state is enabled or disabled.
     * @type {boolean}
     * @memberof LifecycleState
     */
    'enabled'?: boolean;
    /**
     * The lifecycle state\'s technical name. This is for internal use.
     * @type {string}
     * @memberof LifecycleState
     */
    'technicalName': string;
    /**
     * Lifecycle state\'s description.
     * @type {string}
     * @memberof LifecycleState
     */
    'description'?: string;
    /**
     * Number of identities that have the lifecycle state.
     * @type {number}
     * @memberof LifecycleState
     */
    'identityCount'?: number;
    /**
     *
     * @type {EmailNotificationOption}
     * @memberof LifecycleState
     */
    'emailNotificationOption'?: EmailNotificationOption;
    /**
     *
     * @type {Array<AccountAction>}
     * @memberof LifecycleState
     */
    'accountActions'?: Array<AccountAction>;
    /**
     * List of unique access-profile IDs that are associated with the lifecycle state.
     * @type {Set<string>}
     * @memberof LifecycleState
     */
    'accessProfileIds'?: Set<string>;
    /**
     * The lifecycle state\'s associated identity state. This field is generally \'null\'.
     * @type {string}
     * @memberof LifecycleState
     */
    'identityState'?: string | null;
}
/**
 *
 * @export
 * @interface LifecycleStateAllOf
 */
export interface LifecycleStateAllOf {
    /**
     * Indicates whether the lifecycle state is enabled or disabled.
     * @type {boolean}
     * @memberof LifecycleStateAllOf
     */
    'enabled'?: boolean;
    /**
     * The lifecycle state\'s technical name. This is for internal use.
     * @type {string}
     * @memberof LifecycleStateAllOf
     */
    'technicalName': string;
    /**
     * Lifecycle state\'s description.
     * @type {string}
     * @memberof LifecycleStateAllOf
     */
    'description'?: string;
    /**
     * Number of identities that have the lifecycle state.
     * @type {number}
     * @memberof LifecycleStateAllOf
     */
    'identityCount'?: number;
    /**
     *
     * @type {EmailNotificationOption}
     * @memberof LifecycleStateAllOf
     */
    'emailNotificationOption'?: EmailNotificationOption;
    /**
     *
     * @type {Array<AccountAction>}
     * @memberof LifecycleStateAllOf
     */
    'accountActions'?: Array<AccountAction>;
    /**
     * List of unique access-profile IDs that are associated with the lifecycle state.
     * @type {Set<string>}
     * @memberof LifecycleStateAllOf
     */
    'accessProfileIds'?: Set<string>;
    /**
     * The lifecycle state\'s associated identity state. This field is generally \'null\'.
     * @type {string}
     * @memberof LifecycleStateAllOf
     */
    'identityState'?: string | null;
}
/**
 * Deleted lifecycle state.
 * @export
 * @interface LifecyclestateDeleted
 */
export interface LifecyclestateDeleted {
    /**
     * Deleted lifecycle state\'s DTO type.
     * @type {string}
     * @memberof LifecyclestateDeleted
     */
    'type'?: LifecyclestateDeletedTypeEnum;
    /**
     * Deleted lifecycle state ID.
     * @type {string}
     * @memberof LifecyclestateDeleted
     */
    'id'?: string;
    /**
     * Deleted lifecycle state\'s display name.
     * @type {string}
     * @memberof LifecyclestateDeleted
     */
    'name'?: string;
}
export declare const LifecyclestateDeletedTypeEnum: {
    readonly LifecycleState: "LIFECYCLE_STATE";
};
export type LifecyclestateDeletedTypeEnum = typeof LifecyclestateDeletedTypeEnum[keyof typeof LifecyclestateDeletedTypeEnum];
/**
 *
 * @export
 * @interface ListAccessProfiles401Response
 */
export interface ListAccessProfiles401Response {
    /**
     * A message describing the error
     * @type {object}
     * @memberof ListAccessProfiles401Response
     */
    'error'?: object;
}
/**
 *
 * @export
 * @interface ListAccessProfiles429Response
 */
export interface ListAccessProfiles429Response {
    /**
     * A message describing the error
     * @type {object}
     * @memberof ListAccessProfiles429Response
     */
    'message'?: object;
}
/**
 *
 * @export
 * @interface ListCampaignFilters200Response
 */
export interface ListCampaignFilters200Response {
    /**
     * List of campaign filters.
     * @type {Array<CampaignFilterDetails>}
     * @memberof ListCampaignFilters200Response
     */
    'items'?: Array<CampaignFilterDetails>;
    /**
     * Number of filters returned.
     * @type {number}
     * @memberof ListCampaignFilters200Response
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface ListCompleteWorkflowLibrary200ResponseInner
 */
export interface ListCompleteWorkflowLibrary200ResponseInner {
    /**
     * Operator ID.
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'id'?: string;
    /**
     * Operator friendly name
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'name'?: string;
    /**
     * Operator type
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'type'?: string;
    /**
     * Description of the operator
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'description'?: string;
    /**
     * One or more inputs that the operator accepts
     * @type {Array<WorkflowLibraryFormFields>}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'formFields'?: Array<WorkflowLibraryFormFields> | null;
    /**
     *
     * @type {WorkflowLibraryActionExampleOutput}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'exampleOutput'?: WorkflowLibraryActionExampleOutput;
    /**
     *
     * @type {boolean}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'deprecatedBy'?: string;
    /**
     * Version number
     * @type {number}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'versionNumber'?: number;
    /**
     *
     * @type {boolean}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'isSimulationEnabled'?: boolean;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'isDynamicSchema'?: boolean;
    /**
     * Example output schema
     * @type {object}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'outputSchema'?: object;
    /**
     * Example trigger payload if applicable
     * @type {object}
     * @memberof ListCompleteWorkflowLibrary200ResponseInner
     */
    'inputExample'?: object | null;
}
/**
 * An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const LocaleOrigin: {
    readonly Default: "DEFAULT";
    readonly Request: "REQUEST";
    readonly Null: "null";
};
export type LocaleOrigin = typeof LocaleOrigin[keyof typeof LocaleOrigin];
/**
 *
 * @export
 * @interface LockoutConfiguration
 */
export interface LockoutConfiguration {
    /**
     * The maximum attempts allowed before lockout occurs.
     * @type {number}
     * @memberof LockoutConfiguration
     */
    'maximumAttempts'?: number;
    /**
     * The total time in minutes a user will be locked out.
     * @type {number}
     * @memberof LockoutConfiguration
     */
    'lockoutDuration'?: number;
    /**
     * A rolling window where authentication attempts in a series count towards the maximum before lockout occurs.
     * @type {number}
     * @memberof LockoutConfiguration
     */
    'lockoutWindow'?: number;
}
/**
 *
 * @export
 * @interface Lookup
 */
export interface Lookup {
    /**
     * This is a JSON object of key-value pairs. The key is the string that will attempt to be matched to the input, and the value is the output string that should be returned if the key is matched   >**Note** the use of the optional default key value here; if none of the three countries in the above example match the input string, the transform will return \"Unknown Region\" for the attribute that is mapped to this transform.
     * @type {{ [key: string]: any; }}
     * @memberof Lookup
     */
    'table': {
        [key: string]: any;
    };
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Lookup
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Lookup
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Lower
 */
export interface Lower {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Lower
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Lower
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Managed Client
 * @export
 * @interface ManagedClient
 */
export interface ManagedClient {
    /**
     * ManagedClient ID
     * @type {string}
     * @memberof ManagedClient
     */
    'id'?: string | null;
    /**
     * ManagedClient alert key
     * @type {string}
     * @memberof ManagedClient
     */
    'alertKey'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ManagedClient
     */
    'apiGatewayBaseUrl'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ManagedClient
     */
    'cookbook'?: string | null;
    /**
     * Previous CC ID to be used in data migration. (This field will be deleted after CC migration!)
     * @type {number}
     * @memberof ManagedClient
     */
    'ccId'?: number | null;
    /**
     * The client ID used in API management
     * @type {string}
     * @memberof ManagedClient
     */
    'clientId': string;
    /**
     * Cluster ID that the ManagedClient is linked to
     * @type {string}
     * @memberof ManagedClient
     */
    'clusterId': string;
    /**
     * ManagedClient description
     * @type {string}
     * @memberof ManagedClient
     */
    'description': string;
    /**
     * The public IP address of the ManagedClient
     * @type {string}
     * @memberof ManagedClient
     */
    'ipAddress'?: string | null;
    /**
     * When the ManagedClient was last seen by the server
     * @type {string}
     * @memberof ManagedClient
     */
    'lastSeen'?: string | null;
    /**
     * ManagedClient name
     * @type {string}
     * @memberof ManagedClient
     */
    'name'?: string | null;
    /**
     * Milliseconds since the ManagedClient has polled the server
     * @type {string}
     * @memberof ManagedClient
     */
    'sinceLastSeen'?: string | null;
    /**
     * Status of the ManagedClient
     * @type {string}
     * @memberof ManagedClient
     */
    'status'?: ManagedClientStatusEnum;
    /**
     * Type of the ManagedClient (VA, CCG)
     * @type {string}
     * @memberof ManagedClient
     */
    'type': string;
    /**
     * Cluster Type of the ManagedClient
     * @type {string}
     * @memberof ManagedClient
     */
    'clusterType'?: ManagedClientClusterTypeEnum;
    /**
     * ManagedClient VA download URL
     * @type {string}
     * @memberof ManagedClient
     */
    'vaDownloadUrl'?: string | null;
    /**
     * Version that the ManagedClient\'s VA is running
     * @type {string}
     * @memberof ManagedClient
     */
    'vaVersion'?: string | null;
    /**
     * Client\'s apiKey
     * @type {string}
     * @memberof ManagedClient
     */
    'secret'?: string | null;
    /**
     * The date/time this ManagedClient was created
     * @type {string}
     * @memberof ManagedClient
     */
    'createdAt'?: string | null;
    /**
     * The date/time this ManagedClient was last updated
     * @type {string}
     * @memberof ManagedClient
     */
    'updatedAt'?: string | null;
    /**
     * The provisioning status of the ManagedClient
     * @type {string}
     * @memberof ManagedClient
     */
    'provisionStatus'?: ManagedClientProvisionStatusEnum;
}
export declare const ManagedClientStatusEnum: {
    readonly Normal: "NORMAL";
    readonly Undefined: "UNDEFINED";
    readonly NotConfigured: "NOT_CONFIGURED";
    readonly Configuring: "CONFIGURING";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Failed: "FAILED";
    readonly Null: "null";
};
export type ManagedClientStatusEnum = typeof ManagedClientStatusEnum[keyof typeof ManagedClientStatusEnum];
export declare const ManagedClientClusterTypeEnum: {
    readonly Null: "null";
    readonly Idn: "idn";
    readonly Iai: "iai";
    readonly SpConnectCluster: "spConnectCluster";
    readonly SqsCluster: "sqsCluster";
    readonly DasRc: "das-rc";
    readonly DasPc: "das-pc";
    readonly DasDc: "das-dc";
};
export type ManagedClientClusterTypeEnum = typeof ManagedClientClusterTypeEnum[keyof typeof ManagedClientClusterTypeEnum];
export declare const ManagedClientProvisionStatusEnum: {
    readonly Null: "null";
    readonly Provisioned: "PROVISIONED";
    readonly Draft: "DRAFT";
};
export type ManagedClientProvisionStatusEnum = typeof ManagedClientProvisionStatusEnum[keyof typeof ManagedClientProvisionStatusEnum];
/**
 * Managed Client Request
 * @export
 * @interface ManagedClientRequest
 */
export interface ManagedClientRequest {
    /**
     * Cluster ID that the ManagedClient is linked to
     * @type {string}
     * @memberof ManagedClientRequest
     */
    'clusterId': string;
    /**
     * description for the ManagedClient to create
     * @type {string}
     * @memberof ManagedClientRequest
     */
    'description'?: string | null;
    /**
     * name for the ManagedClient to create
     * @type {string}
     * @memberof ManagedClientRequest
     */
    'name'?: string | null;
    /**
     * Type of the ManagedClient (VA, CCG) to create
     * @type {string}
     * @memberof ManagedClientRequest
     */
    'type'?: string | null;
}
/**
 * Managed Client Status
 * @export
 * @interface ManagedClientStatus
 */
export interface ManagedClientStatus {
    /**
     * ManagedClientStatus body information
     * @type {object}
     * @memberof ManagedClientStatus
     */
    'body': object;
    /**
     *
     * @type {ManagedClientStatusCode}
     * @memberof ManagedClientStatus
     */
    'status': ManagedClientStatusCode;
    /**
     *
     * @type {ManagedClientType}
     * @memberof ManagedClientStatus
     */
    'type': ManagedClientType | null;
    /**
     * timestamp on the Client Status update
     * @type {string}
     * @memberof ManagedClientStatus
     */
    'timestamp': string;
}
/**
 * Status of a Managed Client
 * @export
 * @enum {string}
 */
export declare const ManagedClientStatusCode: {
    readonly Normal: "NORMAL";
    readonly Undefined: "UNDEFINED";
    readonly NotConfigured: "NOT_CONFIGURED";
    readonly Configuring: "CONFIGURING";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Failed: "FAILED";
};
export type ManagedClientStatusCode = typeof ManagedClientStatusCode[keyof typeof ManagedClientStatusCode];
/**
 * Managed Client type
 * @export
 * @enum {string}
 */
export declare const ManagedClientType: {
    readonly Ccg: "CCG";
    readonly Va: "VA";
    readonly Internal: "INTERNAL";
    readonly IiqHarvester: "IIQ_HARVESTER";
    readonly Null: "null";
};
export type ManagedClientType = typeof ManagedClientType[keyof typeof ManagedClientType];
/**
 * Managed Cluster
 * @export
 * @interface ManagedCluster
 */
export interface ManagedCluster {
    /**
     * ManagedCluster ID
     * @type {string}
     * @memberof ManagedCluster
     */
    'id': string;
    /**
     * ManagedCluster name
     * @type {string}
     * @memberof ManagedCluster
     */
    'name'?: string;
    /**
     * ManagedCluster pod
     * @type {string}
     * @memberof ManagedCluster
     */
    'pod'?: string;
    /**
     * ManagedCluster org
     * @type {string}
     * @memberof ManagedCluster
     */
    'org'?: string;
    /**
     *
     * @type {ManagedClusterTypes}
     * @memberof ManagedCluster
     */
    'type'?: ManagedClusterTypes;
    /**
     * ManagedProcess configuration map
     * @type {{ [key: string]: string; }}
     * @memberof ManagedCluster
     */
    'configuration'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ManagedClusterKeyPair}
     * @memberof ManagedCluster
     */
    'keyPair'?: ManagedClusterKeyPair;
    /**
     *
     * @type {ManagedClusterAttributes}
     * @memberof ManagedCluster
     */
    'attributes'?: ManagedClusterAttributes;
    /**
     * ManagedCluster description
     * @type {string}
     * @memberof ManagedCluster
     */
    'description'?: string;
    /**
     *
     * @type {ManagedClusterRedis}
     * @memberof ManagedCluster
     */
    'redis'?: ManagedClusterRedis;
    /**
     *
     * @type {ManagedClientType}
     * @memberof ManagedCluster
     */
    'clientType': ManagedClientType | null;
    /**
     * CCG version used by the ManagedCluster
     * @type {string}
     * @memberof ManagedCluster
     */
    'ccgVersion': string;
    /**
     * boolean flag indiacting whether or not the cluster configuration is pinned
     * @type {boolean}
     * @memberof ManagedCluster
     */
    'pinnedConfig'?: boolean;
    /**
     *
     * @type {ClientLogConfiguration}
     * @memberof ManagedCluster
     */
    'logConfiguration'?: ClientLogConfiguration | null;
    /**
     * Whether or not the cluster is operational or not
     * @type {boolean}
     * @memberof ManagedCluster
     */
    'operational'?: boolean;
    /**
     * Cluster status
     * @type {string}
     * @memberof ManagedCluster
     */
    'status'?: string;
    /**
     * Public key certificate
     * @type {string}
     * @memberof ManagedCluster
     */
    'publicKeyCertificate'?: string | null;
    /**
     * Public key thumbprint
     * @type {string}
     * @memberof ManagedCluster
     */
    'publicKeyThumbprint'?: string | null;
    /**
     * Public key
     * @type {string}
     * @memberof ManagedCluster
     */
    'publicKey'?: string | null;
    /**
     * Key describing any immediate cluster alerts
     * @type {string}
     * @memberof ManagedCluster
     */
    'alertKey'?: string;
    /**
     * List of clients in a cluster
     * @type {Array<string>}
     * @memberof ManagedCluster
     */
    'clientIds'?: Array<string>;
    /**
     * Number of services bound to a cluster
     * @type {number}
     * @memberof ManagedCluster
     */
    'serviceCount'?: number;
    /**
     * CC ID only used in calling CC, will be removed without notice when Migration to CEGS is finished
     * @type {string}
     * @memberof ManagedCluster
     */
    'ccId'?: string;
    /**
     * The date/time this cluster was created
     * @type {string}
     * @memberof ManagedCluster
     */
    'createdAt'?: string | null;
    /**
     * The date/time this cluster was last updated
     * @type {string}
     * @memberof ManagedCluster
     */
    'updatedAt'?: string | null;
}
/**
 * Managed Cluster Attributes for Cluster Configuration. Supported Cluster Types [sqsCluster, spConnectCluster]
 * @export
 * @interface ManagedClusterAttributes
 */
export interface ManagedClusterAttributes {
    /**
     *
     * @type {ManagedClusterQueue}
     * @memberof ManagedClusterAttributes
     */
    'queue'?: ManagedClusterQueue;
    /**
     * ManagedCluster keystore for spConnectCluster type
     * @type {string}
     * @memberof ManagedClusterAttributes
     */
    'keystore'?: string | null;
}
/**
 * Managed Cluster key pair for Cluster
 * @export
 * @interface ManagedClusterKeyPair
 */
export interface ManagedClusterKeyPair {
    /**
     * ManagedCluster publicKey
     * @type {string}
     * @memberof ManagedClusterKeyPair
     */
    'publicKey'?: string | null;
    /**
     * ManagedCluster publicKeyThumbprint
     * @type {string}
     * @memberof ManagedClusterKeyPair
     */
    'publicKeyThumbprint'?: string | null;
    /**
     * ManagedCluster publicKeyCertificate
     * @type {string}
     * @memberof ManagedClusterKeyPair
     */
    'publicKeyCertificate'?: string | null;
}
/**
 * Managed Cluster key pair for Cluster
 * @export
 * @interface ManagedClusterQueue
 */
export interface ManagedClusterQueue {
    /**
     * ManagedCluster queue name
     * @type {string}
     * @memberof ManagedClusterQueue
     */
    'name'?: string;
    /**
     * ManagedCluster queue aws region
     * @type {string}
     * @memberof ManagedClusterQueue
     */
    'region'?: string;
}
/**
 * Managed Cluster Redis Configuration
 * @export
 * @interface ManagedClusterRedis
 */
export interface ManagedClusterRedis {
    /**
     * ManagedCluster redisHost
     * @type {string}
     * @memberof ManagedClusterRedis
     */
    'redisHost'?: string;
    /**
     * ManagedCluster redisPort
     * @type {number}
     * @memberof ManagedClusterRedis
     */
    'redisPort'?: number;
}
/**
 * Request to create Managed Cluster
 * @export
 * @interface ManagedClusterRequest
 */
export interface ManagedClusterRequest {
    /**
     * ManagedCluster name
     * @type {string}
     * @memberof ManagedClusterRequest
     */
    'name': string;
    /**
     *
     * @type {ManagedClusterTypes}
     * @memberof ManagedClusterRequest
     */
    'type'?: ManagedClusterTypes;
    /**
     * ManagedProcess configuration map
     * @type {{ [key: string]: string; }}
     * @memberof ManagedClusterRequest
     */
    'configuration'?: {
        [key: string]: string;
    };
    /**
     * ManagedCluster description
     * @type {string}
     * @memberof ManagedClusterRequest
     */
    'description'?: string | null;
}
/**
 * The Type of Cluster
 * @export
 * @enum {string}
 */
export declare const ManagedClusterTypes: {
    readonly Idn: "idn";
    readonly Iai: "iai";
};
export type ManagedClusterTypes = typeof ManagedClusterTypes[keyof typeof ManagedClusterTypes];
/**
 *
 * @export
 * @interface ManagerCorrelationMapping
 */
export interface ManagerCorrelationMapping {
    /**
     * Name of the attribute to use for manager correlation. The value found on the account attribute will be used to lookup the manager\'s identity.
     * @type {string}
     * @memberof ManagerCorrelationMapping
     */
    'accountAttributeName'?: string;
    /**
     * Name of the identity attribute to search when trying to find a manager using the value from the accountAttribute.
     * @type {string}
     * @memberof ManagerCorrelationMapping
     */
    'identityAttributeName'?: string;
}
/**
 *
 * @export
 * @interface ManualDiscoverApplications
 */
export interface ManualDiscoverApplications {
    /**
     * The CSV file to upload containing `application_name` and `description` columns. Each row represents an application to be discovered.
     * @type {any}
     * @memberof ManualDiscoverApplications
     */
    'file': any;
}
/**
 *
 * @export
 * @interface ManualDiscoverApplicationsTemplate
 */
export interface ManualDiscoverApplicationsTemplate {
    /**
     * Name of the application.
     * @type {string}
     * @memberof ManualDiscoverApplicationsTemplate
     */
    'application_name'?: string;
    /**
     * Description of the application.
     * @type {string}
     * @memberof ManualDiscoverApplicationsTemplate
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface ManualWorkItemDetails
 */
export interface ManualWorkItemDetails {
    /**
     * True if the request for this item was forwarded from one owner to another.
     * @type {boolean}
     * @memberof ManualWorkItemDetails
     */
    'forwarded'?: boolean;
    /**
     *
     * @type {ManualWorkItemDetailsOriginalOwner}
     * @memberof ManualWorkItemDetails
     */
    'originalOwner'?: ManualWorkItemDetailsOriginalOwner | null;
    /**
     *
     * @type {ManualWorkItemDetailsCurrentOwner}
     * @memberof ManualWorkItemDetails
     */
    'currentOwner'?: ManualWorkItemDetailsCurrentOwner | null;
    /**
     * Time at which item was modified.
     * @type {string}
     * @memberof ManualWorkItemDetails
     */
    'modified'?: string;
    /**
     *
     * @type {ManualWorkItemState}
     * @memberof ManualWorkItemDetails
     */
    'status'?: ManualWorkItemState;
    /**
     * The history of approval forward action.
     * @type {Array<ApprovalForwardHistory>}
     * @memberof ManualWorkItemDetails
     */
    'forwardHistory'?: Array<ApprovalForwardHistory> | null;
}
/**
 * Identity of current work item owner.
 * @export
 * @interface ManualWorkItemDetailsCurrentOwner
 */
export interface ManualWorkItemDetailsCurrentOwner {
    /**
     * DTO type of current work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsCurrentOwner
     */
    'type'?: ManualWorkItemDetailsCurrentOwnerTypeEnum;
    /**
     * ID of current work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsCurrentOwner
     */
    'id'?: string;
    /**
     * Display name of current work item owner.
     * @type {string}
     * @memberof ManualWorkItemDetailsCurrentOwner
     */
    'name'?: string;
}
export declare const ManualWorkItemDetailsCurrentOwnerTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type ManualWorkItemDetailsCurrentOwnerTypeEnum = typeof ManualWorkItemDetailsCurrentOwnerTypeEnum[keyof typeof ManualWorkItemDetailsCurrentOwnerTypeEnum];
/**
 * Identity of original work item owner, if the work item has been forwarded.
 * @export
 * @interface ManualWorkItemDetailsOriginalOwner
 */
export interface ManualWorkItemDetailsOriginalOwner {
    /**
     * DTO type of original work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsOriginalOwner
     */
    'type'?: ManualWorkItemDetailsOriginalOwnerTypeEnum;
    /**
     * ID of original work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsOriginalOwner
     */
    'id'?: string;
    /**
     * Display name of original work item owner.
     * @type {string}
     * @memberof ManualWorkItemDetailsOriginalOwner
     */
    'name'?: string;
}
export declare const ManualWorkItemDetailsOriginalOwnerTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type ManualWorkItemDetailsOriginalOwnerTypeEnum = typeof ManualWorkItemDetailsOriginalOwnerTypeEnum[keyof typeof ManualWorkItemDetailsOriginalOwnerTypeEnum];
/**
 * Indicates the state of the request processing for this item: * PENDING: The request for this item is awaiting processing. * APPROVED: The request for this item has been approved. * REJECTED: The request for this item was rejected. * EXPIRED: The request for this item expired with no action taken. * CANCELLED: The request for this item was cancelled with no user action. * ARCHIVED: The request for this item has been archived after completion.
 * @export
 * @enum {string}
 */
export declare const ManualWorkItemState: {
    readonly Pending: "PENDING";
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
    readonly Expired: "EXPIRED";
    readonly Cancelled: "CANCELLED";
    readonly Archived: "ARCHIVED";
};
export type ManualWorkItemState = typeof ManualWorkItemState[keyof typeof ManualWorkItemState];
/**
 * The calculation done on the results of the query
 * @export
 * @interface MetricAggregation
 */
export interface MetricAggregation {
    /**
     * The name of the metric aggregate to be included in the result. If the metric aggregation is omitted, the resulting aggregation will be a count of the documents in the search results.
     * @type {string}
     * @memberof MetricAggregation
     */
    'name': string;
    /**
     *
     * @type {MetricType}
     * @memberof MetricAggregation
     */
    'type'?: MetricType;
    /**
     * The field the calculation is performed on.  Prefix the field name with \'@\' to reference a nested object.
     * @type {string}
     * @memberof MetricAggregation
     */
    'field': string;
}
/**
 * Enum representing the currently supported metric aggregation types. Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const MetricType: {
    readonly Count: "COUNT";
    readonly UniqueCount: "UNIQUE_COUNT";
    readonly Avg: "AVG";
    readonly Sum: "SUM";
    readonly Median: "MEDIAN";
    readonly Min: "MIN";
    readonly Max: "MAX";
};
export type MetricType = typeof MetricType[keyof typeof MetricType];
/**
 * Response model for configuration test of a given MFA method
 * @export
 * @interface MfaConfigTestResponse
 */
export interface MfaConfigTestResponse {
    /**
     * The configuration test result.
     * @type {string}
     * @memberof MfaConfigTestResponse
     */
    'state'?: MfaConfigTestResponseStateEnum;
    /**
     * The error message to indicate the failure of configuration test.
     * @type {string}
     * @memberof MfaConfigTestResponse
     */
    'error'?: string;
}
export declare const MfaConfigTestResponseStateEnum: {
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type MfaConfigTestResponseStateEnum = typeof MfaConfigTestResponseStateEnum[keyof typeof MfaConfigTestResponseStateEnum];
/**
 *
 * @export
 * @interface MfaDuoConfig
 */
export interface MfaDuoConfig {
    /**
     * Mfa method name
     * @type {string}
     * @memberof MfaDuoConfig
     */
    'mfaMethod'?: string | null;
    /**
     * If MFA method is enabled.
     * @type {boolean}
     * @memberof MfaDuoConfig
     */
    'enabled'?: boolean;
    /**
     * The server host name or IP address of the MFA provider.
     * @type {string}
     * @memberof MfaDuoConfig
     */
    'host'?: string | null;
    /**
     * The secret key for authenticating requests to the MFA provider.
     * @type {string}
     * @memberof MfaDuoConfig
     */
    'accessKey'?: string | null;
    /**
     * Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.
     * @type {string}
     * @memberof MfaDuoConfig
     */
    'identityAttribute'?: string | null;
    /**
     * A map with additional config properties for the given MFA method - duo-web.
     * @type {{ [key: string]: any; }}
     * @memberof MfaDuoConfig
     */
    'configProperties'?: {
        [key: string]: any;
    } | null;
}
/**
 *
 * @export
 * @interface MfaOktaConfig
 */
export interface MfaOktaConfig {
    /**
     * Mfa method name
     * @type {string}
     * @memberof MfaOktaConfig
     */
    'mfaMethod'?: string | null;
    /**
     * If MFA method is enabled.
     * @type {boolean}
     * @memberof MfaOktaConfig
     */
    'enabled'?: boolean;
    /**
     * The server host name or IP address of the MFA provider.
     * @type {string}
     * @memberof MfaOktaConfig
     */
    'host'?: string | null;
    /**
     * The secret key for authenticating requests to the MFA provider.
     * @type {string}
     * @memberof MfaOktaConfig
     */
    'accessKey'?: string | null;
    /**
     * Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.
     * @type {string}
     * @memberof MfaOktaConfig
     */
    'identityAttribute'?: string | null;
}
/**
 *
 * @export
 * @interface MultiPolicyRequest
 */
export interface MultiPolicyRequest {
    /**
     * Multi-policy report will be run for this list of ids
     * @type {Array<string>}
     * @memberof MultiPolicyRequest
     */
    'filteredPolicyList'?: Array<string>;
}
/**
 *
 * @export
 * @interface NameNormalizer
 */
export interface NameNormalizer {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof NameNormalizer
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof NameNormalizer
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * | Construct       | Date Time Pattern | Description | | ---------       | ----------------- | ----------- | | ISO8601         | `yyyy-MM-dd\'T\'HH:mm:ss.SSSX` | The ISO8601 standard. |           | LDAP            | `yyyyMMddHHmmss.Z`           | The LDAP standard.    | | PEOPLE_SOFT     | `MM/dd/yyyy`                 | The date format People Soft uses. | | EPOCH_TIME_JAVA | # ms from midnight, January 1st, 1970 | The incoming date value as elapsed time in milliseconds from midnight, January 1st, 1970. | | EPOCH_TIME_WIN32| # intervals of 100ns from midnight, January 1st, 1601 | The incoming date value as elapsed time in 100-nanosecond intervals from midnight, January 1st, 1601. |
 * @export
 * @enum {string}
 */
export declare const NamedConstructs: {
    readonly Iso8601: "ISO8601";
    readonly Ldap: "LDAP";
    readonly PeopleSoft: "PEOPLE_SOFT";
    readonly EpochTimeJava: "EPOCH_TIME_JAVA";
    readonly EpochTimeWin32: "EPOCH_TIME_WIN32";
};
export type NamedConstructs = typeof NamedConstructs[keyof typeof NamedConstructs];
/**
 * The nested aggregation object.
 * @export
 * @interface NestedAggregation
 */
export interface NestedAggregation {
    /**
     * The name of the nested aggregate to be included in the result.
     * @type {string}
     * @memberof NestedAggregation
     */
    'name': string;
    /**
     * The type of the nested object.
     * @type {string}
     * @memberof NestedAggregation
     */
    'type': string;
}
/**
 *
 * @export
 * @interface NetworkConfiguration
 */
export interface NetworkConfiguration {
    /**
     * The collection of ip ranges.
     * @type {Array<string>}
     * @memberof NetworkConfiguration
     */
    'range'?: Array<string> | null;
    /**
     * The collection of country codes.
     * @type {Array<string>}
     * @memberof NetworkConfiguration
     */
    'geolocation'?: Array<string> | null;
    /**
     * Denotes whether the provided lists are whitelisted or blacklisted for geo location.
     * @type {boolean}
     * @memberof NetworkConfiguration
     */
    'whitelisted'?: boolean;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalDecision
 */
export interface NonEmployeeApprovalDecision {
    /**
     * Comment on the approval item.
     * @type {string}
     * @memberof NonEmployeeApprovalDecision
     */
    'comment'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItem
 */
export interface NonEmployeeApprovalItem {
    /**
     * Non-Employee approval item id
     * @type {string}
     * @memberof NonEmployeeApprovalItem
     */
    'id'?: string;
    /**
     *
     * @type {NonEmployeeIdentityReferenceWithId}
     * @memberof NonEmployeeApprovalItem
     */
    'approver'?: NonEmployeeIdentityReferenceWithId;
    /**
     * Requested identity account name
     * @type {string}
     * @memberof NonEmployeeApprovalItem
     */
    'accountName'?: string;
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeApprovalItem
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * Approval order
     * @type {number}
     * @memberof NonEmployeeApprovalItem
     */
    'approvalOrder'?: number;
    /**
     * comment of approver
     * @type {string}
     * @memberof NonEmployeeApprovalItem
     */
    'comment'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeApprovalItem
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeApprovalItem
     */
    'created'?: string;
    /**
     *
     * @type {NonEmployeeRequestLite}
     * @memberof NonEmployeeApprovalItem
     */
    'nonEmployeeRequest'?: NonEmployeeRequestLite;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemAllOf
 */
export interface NonEmployeeApprovalItemAllOf {
    /**
     *
     * @type {NonEmployeeRequestLite}
     * @memberof NonEmployeeApprovalItemAllOf
     */
    'nonEmployeeRequest'?: NonEmployeeRequestLite;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemBase
 */
export interface NonEmployeeApprovalItemBase {
    /**
     * Non-Employee approval item id
     * @type {string}
     * @memberof NonEmployeeApprovalItemBase
     */
    'id'?: string;
    /**
     *
     * @type {NonEmployeeIdentityReferenceWithId}
     * @memberof NonEmployeeApprovalItemBase
     */
    'approver'?: NonEmployeeIdentityReferenceWithId;
    /**
     * Requested identity account name
     * @type {string}
     * @memberof NonEmployeeApprovalItemBase
     */
    'accountName'?: string;
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeApprovalItemBase
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * Approval order
     * @type {number}
     * @memberof NonEmployeeApprovalItemBase
     */
    'approvalOrder'?: number;
    /**
     * comment of approver
     * @type {string}
     * @memberof NonEmployeeApprovalItemBase
     */
    'comment'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeApprovalItemBase
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeApprovalItemBase
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemDetail
 */
export interface NonEmployeeApprovalItemDetail {
    /**
     * Non-Employee approval item id
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'id'?: string;
    /**
     *
     * @type {NonEmployeeIdentityReferenceWithId}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'approver'?: NonEmployeeIdentityReferenceWithId;
    /**
     * Requested identity account name
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'accountName'?: string;
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * Approval order
     * @type {number}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'approvalOrder'?: number;
    /**
     * comment of approver
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'comment'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'created'?: string;
    /**
     *
     * @type {NonEmployeeRequestWithoutApprovalItem}
     * @memberof NonEmployeeApprovalItemDetail
     */
    'nonEmployeeRequest'?: NonEmployeeRequestWithoutApprovalItem;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemDetailAllOf
 */
export interface NonEmployeeApprovalItemDetailAllOf {
    /**
     *
     * @type {NonEmployeeRequestWithoutApprovalItem}
     * @memberof NonEmployeeApprovalItemDetailAllOf
     */
    'nonEmployeeRequest'?: NonEmployeeRequestWithoutApprovalItem;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalSummary
 */
export interface NonEmployeeApprovalSummary {
    /**
     * The number of approved non-employee approval requests.
     * @type {number}
     * @memberof NonEmployeeApprovalSummary
     */
    'approved'?: number;
    /**
     * The number of pending non-employee approval requests.
     * @type {number}
     * @memberof NonEmployeeApprovalSummary
     */
    'pending'?: number;
    /**
     * The number of rejected non-employee approval requests.
     * @type {number}
     * @memberof NonEmployeeApprovalSummary
     */
    'rejected'?: number;
}
/**
 *
 * @export
 * @interface NonEmployeeBulkUploadJob
 */
export interface NonEmployeeBulkUploadJob {
    /**
     * The bulk upload job\'s ID. (UUID)
     * @type {string}
     * @memberof NonEmployeeBulkUploadJob
     */
    'id'?: string;
    /**
     * The ID of the source to bulk-upload non-employees to. (UUID)
     * @type {string}
     * @memberof NonEmployeeBulkUploadJob
     */
    'sourceId'?: string;
    /**
     * The date-time the job was submitted.
     * @type {string}
     * @memberof NonEmployeeBulkUploadJob
     */
    'created'?: string;
    /**
     * The date-time that the job was last updated.
     * @type {string}
     * @memberof NonEmployeeBulkUploadJob
     */
    'modified'?: string;
    /**
     * Returns the following values indicating the progress or result of the bulk upload job. \"PENDING\" means the job is queued and waiting to be processed. \"IN_PROGRESS\" means the job is currently being processed. \"COMPLETED\" means the job has been completed without any errors. \"ERROR\" means the job failed to process with errors.
     * @type {string}
     * @memberof NonEmployeeBulkUploadJob
     */
    'status'?: NonEmployeeBulkUploadJobStatusEnum;
}
export declare const NonEmployeeBulkUploadJobStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
};
export type NonEmployeeBulkUploadJobStatusEnum = typeof NonEmployeeBulkUploadJobStatusEnum[keyof typeof NonEmployeeBulkUploadJobStatusEnum];
/**
 *
 * @export
 * @interface NonEmployeeBulkUploadStatus
 */
export interface NonEmployeeBulkUploadStatus {
    /**
     * Returns the following values indicating the progress or result of the bulk upload job. \"PENDING\" means the job is queued and waiting to be processed. \"IN_PROGRESS\" means the job is currently being processed. \"COMPLETED\" means the job has been completed without any errors. \"ERROR\" means the job failed to process with errors. null means job has been submitted to the source.
     * @type {string}
     * @memberof NonEmployeeBulkUploadStatus
     */
    'status'?: NonEmployeeBulkUploadStatusStatusEnum;
}
export declare const NonEmployeeBulkUploadStatusStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
};
export type NonEmployeeBulkUploadStatusStatusEnum = typeof NonEmployeeBulkUploadStatusStatusEnum[keyof typeof NonEmployeeBulkUploadStatusStatusEnum];
/**
 * Identifies if the identity is a normal identity or a governance group
 * @export
 * @enum {string}
 */
export declare const NonEmployeeIdentityDtoType: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type NonEmployeeIdentityDtoType = typeof NonEmployeeIdentityDtoType[keyof typeof NonEmployeeIdentityDtoType];
/**
 *
 * @export
 * @interface NonEmployeeIdentityReferenceWithId
 */
export interface NonEmployeeIdentityReferenceWithId {
    /**
     *
     * @type {NonEmployeeIdentityDtoType}
     * @memberof NonEmployeeIdentityReferenceWithId
     */
    'type'?: NonEmployeeIdentityDtoType;
    /**
     * Identity id
     * @type {string}
     * @memberof NonEmployeeIdentityReferenceWithId
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeIdnUserRequest
 */
export interface NonEmployeeIdnUserRequest {
    /**
     * Identity id.
     * @type {string}
     * @memberof NonEmployeeIdnUserRequest
     */
    'id': string;
}
/**
 *
 * @export
 * @interface NonEmployeeRecord
 */
export interface NonEmployeeRecord {
    /**
     * Non-Employee record id.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'id'?: string;
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'manager'?: string;
    /**
     * Non-Employee\'s source id.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'sourceId'?: string;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRecord
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRecord
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRejectApprovalDecision
 */
export interface NonEmployeeRejectApprovalDecision {
    /**
     * Comment on the approval item.
     * @type {string}
     * @memberof NonEmployeeRejectApprovalDecision
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequest
 */
export interface NonEmployeeRequest {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'description'?: string;
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLite}
     * @memberof NonEmployeeRequest
     */
    'nonEmployeeSource'?: NonEmployeeSourceLite;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequest
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * List of approval item for the request
     * @type {Array<NonEmployeeApprovalItemBase>}
     * @memberof NonEmployeeRequest
     */
    'approvalItems'?: Array<NonEmployeeApprovalItemBase>;
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeRequest
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequest
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestAllOf
 */
export interface NonEmployeeRequestAllOf {
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLite}
     * @memberof NonEmployeeRequestAllOf
     */
    'nonEmployeeSource'?: NonEmployeeSourceLite;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestAllOf
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * List of approval item for the request
     * @type {Array<NonEmployeeApprovalItemBase>}
     * @memberof NonEmployeeRequestAllOf
     */
    'approvalItems'?: Array<NonEmployeeApprovalItemBase>;
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeRequestAllOf
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestAllOf
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestBody
 */
export interface NonEmployeeRequestBody {
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'accountName': string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'firstName': string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'lastName': string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'email': string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'phone': string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'manager': string;
    /**
     * Non-Employee\'s source id.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'sourceId': string;
    /**
     * Attribute blob/bag for a non-employee, 10 attributes is the maximum size supported.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestBody
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'startDate': string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestBody
     */
    'endDate': string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestLite
 */
export interface NonEmployeeRequestLite {
    /**
     * Non-Employee request id.
     * @type {string}
     * @memberof NonEmployeeRequestLite
     */
    'id'?: string;
    /**
     *
     * @type {NonEmployeeIdentityReferenceWithId}
     * @memberof NonEmployeeRequestLite
     */
    'requester'?: NonEmployeeIdentityReferenceWithId;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestSummary
 */
export interface NonEmployeeRequestSummary {
    /**
     * The number of approved non-employee requests on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummary
     */
    'approved'?: number;
    /**
     * The number of rejected non-employee requests on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummary
     */
    'rejected'?: number;
    /**
     * The number of pending non-employee requests on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummary
     */
    'pending'?: number;
    /**
     * The number of non-employee records on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummary
     */
    'nonEmployeeCount'?: number;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestWithoutApprovalItem
 */
export interface NonEmployeeRequestWithoutApprovalItem {
    /**
     * Non-Employee request id.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'id'?: string;
    /**
     *
     * @type {NonEmployeeIdentityReferenceWithId}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'requester'?: NonEmployeeIdentityReferenceWithId;
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLiteWithSchemaAttributes}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'nonEmployeeSource'?: NonEmployeeSourceLiteWithSchemaAttributes;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItem
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestWithoutApprovalItemAllOf
 */
export interface NonEmployeeRequestWithoutApprovalItemAllOf {
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLiteWithSchemaAttributes}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'nonEmployeeSource'?: NonEmployeeSourceLiteWithSchemaAttributes;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ApprovalStatus}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'approvalStatus'?: ApprovalStatus;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOf
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSchemaAttribute
 */
export interface NonEmployeeSchemaAttribute {
    /**
     * Schema Attribute Id
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'id'?: string;
    /**
     * True if this schema attribute is mandatory on all non-employees sources.
     * @type {boolean}
     * @memberof NonEmployeeSchemaAttribute
     */
    'system'?: boolean;
    /**
     * When the schema attribute was last modified.
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'modified'?: string;
    /**
     * When the schema attribute was created.
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'created'?: string;
    /**
     *
     * @type {NonEmployeeSchemaAttributeType}
     * @memberof NonEmployeeSchemaAttribute
     */
    'type': NonEmployeeSchemaAttributeType;
    /**
     * Label displayed on the UI for this schema attribute.
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'label': string;
    /**
     * The technical name of the attribute. Must be unique per source.
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'technicalName': string;
    /**
     * help text displayed by UI.
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'helpText'?: string;
    /**
     * Hint text that fills UI box.
     * @type {string}
     * @memberof NonEmployeeSchemaAttribute
     */
    'placeholder'?: string;
    /**
     * If true, the schema attribute is required for all non-employees in the source
     * @type {boolean}
     * @memberof NonEmployeeSchemaAttribute
     */
    'required'?: boolean;
}
/**
 *
 * @export
 * @interface NonEmployeeSchemaAttributeBody
 */
export interface NonEmployeeSchemaAttributeBody {
    /**
     * Type of the attribute. Only type \'TEXT\' is supported for custom attributes.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBody
     */
    'type': string;
    /**
     * Label displayed on the UI for this schema attribute.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBody
     */
    'label': string;
    /**
     * The technical name of the attribute. Must be unique per source.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBody
     */
    'technicalName': string;
    /**
     * help text displayed by UI.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBody
     */
    'helpText'?: string;
    /**
     * Hint text that fills UI box.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBody
     */
    'placeholder'?: string;
    /**
     * If true, the schema attribute is required for all non-employees in the source
     * @type {boolean}
     * @memberof NonEmployeeSchemaAttributeBody
     */
    'required'?: boolean;
}
/**
 * Enum representing the type of data a schema attribute accepts.
 * @export
 * @enum {string}
 */
export declare const NonEmployeeSchemaAttributeType: {
    readonly Text: "TEXT";
    readonly Date: "DATE";
    readonly Identity: "IDENTITY";
};
export type NonEmployeeSchemaAttributeType = typeof NonEmployeeSchemaAttributeType[keyof typeof NonEmployeeSchemaAttributeType];
/**
 *
 * @export
 * @interface NonEmployeeSource
 */
export interface NonEmployeeSource {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSource
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSource
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSource
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSource
     */
    'description'?: string;
    /**
     * List of approvers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSource
     */
    'approvers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * List of account managers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSource
     */
    'accountManagers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSource
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSource
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceAllOf
 */
export interface NonEmployeeSourceAllOf {
    /**
     * List of approvers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSourceAllOf
     */
    'approvers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * List of account managers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSourceAllOf
     */
    'accountManagers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceAllOf
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceAllOf
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceLite
 */
export interface NonEmployeeSourceLite {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceLite
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLite
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLite
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLite
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceLiteWithSchemaAttributes
 */
export interface NonEmployeeSourceLiteWithSchemaAttributes {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributes
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributes
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributes
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributes
     */
    'description'?: string;
    /**
     * List of schema attributes associated with this non-employee source.
     * @type {Array<NonEmployeeSchemaAttribute>}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributes
     */
    'schemaAttributes'?: Array<NonEmployeeSchemaAttribute>;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceLiteWithSchemaAttributesAllOf
 */
export interface NonEmployeeSourceLiteWithSchemaAttributesAllOf {
    /**
     * List of schema attributes associated with this non-employee source.
     * @type {Array<NonEmployeeSchemaAttribute>}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesAllOf
     */
    'schemaAttributes'?: Array<NonEmployeeSchemaAttribute>;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceRequestBody
 */
export interface NonEmployeeSourceRequestBody {
    /**
     * Name of non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceRequestBody
     */
    'name': string;
    /**
     * Description of non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceRequestBody
     */
    'description': string;
    /**
     *
     * @type {NonEmployeeIdnUserRequest}
     * @memberof NonEmployeeSourceRequestBody
     */
    'owner': NonEmployeeIdnUserRequest;
    /**
     * The ID for the management workgroup that contains source sub-admins
     * @type {string}
     * @memberof NonEmployeeSourceRequestBody
     */
    'managementWorkgroup'?: string;
    /**
     * List of approvers.
     * @type {Array<NonEmployeeIdnUserRequest>}
     * @memberof NonEmployeeSourceRequestBody
     */
    'approvers'?: Array<NonEmployeeIdnUserRequest>;
    /**
     * List of account managers.
     * @type {Array<NonEmployeeIdnUserRequest>}
     * @memberof NonEmployeeSourceRequestBody
     */
    'accountManagers'?: Array<NonEmployeeIdnUserRequest>;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithCloudExternalId
 */
export interface NonEmployeeSourceWithCloudExternalId {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'description'?: string;
    /**
     * List of approvers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'approvers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * List of account managers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'accountManagers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'created'?: string;
    /**
     * Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalId
     */
    'cloudExternalId'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithCloudExternalIdAllOf
 */
export interface NonEmployeeSourceWithCloudExternalIdAllOf {
    /**
     * Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdAllOf
     */
    'cloudExternalId'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithNECount
 */
export interface NonEmployeeSourceWithNECount {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECount
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECount
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECount
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECount
     */
    'description'?: string;
    /**
     * List of approvers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSourceWithNECount
     */
    'approvers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * List of account managers
     * @type {Array<NonEmployeeIdentityReferenceWithId>}
     * @memberof NonEmployeeSourceWithNECount
     */
    'accountManagers'?: Array<NonEmployeeIdentityReferenceWithId>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECount
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECount
     */
    'created'?: string;
    /**
     * Number of non-employee records associated with this source.
     * @type {number}
     * @memberof NonEmployeeSourceWithNECount
     */
    'nonEmployeeCount'?: number | null;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithNECountAllOf
 */
export interface NonEmployeeSourceWithNECountAllOf {
    /**
     * Number of non-employee records associated with this source.
     * @type {number}
     * @memberof NonEmployeeSourceWithNECountAllOf
     */
    'nonEmployeeCount'?: number | null;
}
/**
 * Response model for import of a single object.
 * @export
 * @interface ObjectImportResult
 */
export interface ObjectImportResult {
    /**
     * Informational messages returned from the target service on import.
     * @type {Array<SpConfigMessage>}
     * @memberof ObjectImportResult
     */
    'infos': Array<SpConfigMessage>;
    /**
     * Warning messages returned from the target service on import.
     * @type {Array<SpConfigMessage>}
     * @memberof ObjectImportResult
     */
    'warnings': Array<SpConfigMessage>;
    /**
     * Error messages returned from the target service on import.
     * @type {Array<SpConfigMessage>}
     * @memberof ObjectImportResult
     */
    'errors': Array<SpConfigMessage>;
    /**
     * References to objects that were created or updated by the import.
     * @type {Array<ImportObject>}
     * @memberof ObjectImportResult
     */
    'importedObjects': Array<ImportObject>;
}
/**
 *
 * @export
 * @interface ObjectMappingBulkCreateRequest
 */
export interface ObjectMappingBulkCreateRequest {
    /**
     *
     * @type {Array<ObjectMappingRequest>}
     * @memberof ObjectMappingBulkCreateRequest
     */
    'newObjectMappings': Array<ObjectMappingRequest>;
}
/**
 *
 * @export
 * @interface ObjectMappingBulkCreateResponse
 */
export interface ObjectMappingBulkCreateResponse {
    /**
     *
     * @type {Array<ObjectMappingResponse>}
     * @memberof ObjectMappingBulkCreateResponse
     */
    'addedObjects'?: Array<ObjectMappingResponse>;
}
/**
 *
 * @export
 * @interface ObjectMappingBulkPatchRequest
 */
export interface ObjectMappingBulkPatchRequest {
    /**
     * Map of id of the object mapping to a JsonPatchOperation describing what to patch on that object mapping.
     * @type {{ [key: string]: Array<JsonPatchOperation>; }}
     * @memberof ObjectMappingBulkPatchRequest
     */
    'patches': {
        [key: string]: Array<JsonPatchOperation>;
    };
}
/**
 *
 * @export
 * @interface ObjectMappingBulkPatchResponse
 */
export interface ObjectMappingBulkPatchResponse {
    /**
     *
     * @type {Array<ObjectMappingResponse>}
     * @memberof ObjectMappingBulkPatchResponse
     */
    'patchedObjects'?: Array<ObjectMappingResponse>;
}
/**
 *
 * @export
 * @interface ObjectMappingRequest
 */
export interface ObjectMappingRequest {
    /**
     * Type of the object the mapping value applies to, must be one from enum
     * @type {string}
     * @memberof ObjectMappingRequest
     */
    'objectType': ObjectMappingRequestObjectTypeEnum;
    /**
     * JSONPath expression denoting the path within the object where the mapping value should be applied
     * @type {string}
     * @memberof ObjectMappingRequest
     */
    'jsonPath': string;
    /**
     * Original value at the jsonPath location within the object
     * @type {string}
     * @memberof ObjectMappingRequest
     */
    'sourceValue': string;
    /**
     * Value to be assigned at the jsonPath location within the object
     * @type {string}
     * @memberof ObjectMappingRequest
     */
    'targetValue': string;
    /**
     * Whether or not this object mapping is enabled
     * @type {boolean}
     * @memberof ObjectMappingRequest
     */
    'enabled'?: boolean;
}
export declare const ObjectMappingRequestObjectTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly Entitlement: "ENTITLEMENT";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type ObjectMappingRequestObjectTypeEnum = typeof ObjectMappingRequestObjectTypeEnum[keyof typeof ObjectMappingRequestObjectTypeEnum];
/**
 *
 * @export
 * @interface ObjectMappingResponse
 */
export interface ObjectMappingResponse {
    /**
     * Id of the object mapping
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'objectMappingId'?: string;
    /**
     * Type of the object the mapping value applies to
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'objectType'?: ObjectMappingResponseObjectTypeEnum;
    /**
     * JSONPath expression denoting the path within the object where the mapping value should be applied
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'jsonPath'?: string;
    /**
     * Original value at the jsonPath location within the object
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'sourceValue'?: string;
    /**
     * Value to be assigned at the jsonPath location within the object
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'targetValue'?: string;
    /**
     * Whether or not this object mapping is enabled
     * @type {boolean}
     * @memberof ObjectMappingResponse
     */
    'enabled'?: boolean;
    /**
     * Object mapping creation timestamp
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'created'?: string;
    /**
     * Object mapping latest update timestamp
     * @type {string}
     * @memberof ObjectMappingResponse
     */
    'modified'?: string;
}
export declare const ObjectMappingResponseObjectTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly Entitlement: "ENTITLEMENT";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type ObjectMappingResponseObjectTypeEnum = typeof ObjectMappingResponseObjectTypeEnum[keyof typeof ObjectMappingResponseObjectTypeEnum];
/**
 *
 * @export
 * @interface OktaVerificationRequest
 */
export interface OktaVerificationRequest {
    /**
     * User identifier for Verification request. The value of the user\'s attribute.
     * @type {string}
     * @memberof OktaVerificationRequest
     */
    'userId': string;
}
/**
 * Operation on a specific criteria
 * @export
 * @enum {string}
 */
export declare const Operation: {
    readonly Equals: "EQUALS";
    readonly NotEquals: "NOT_EQUALS";
    readonly Contains: "CONTAINS";
    readonly StartsWith: "STARTS_WITH";
    readonly EndsWith: "ENDS_WITH";
    readonly And: "AND";
    readonly Or: "OR";
    readonly Null: "null";
};
export type Operation = typeof Operation[keyof typeof Operation];
/**
 *
 * @export
 * @interface OriginalRequest
 */
export interface OriginalRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof OriginalRequest
     */
    'accountId'?: string;
    /**
     * Attribute changes requested for account.
     * @type {Array<AttributeRequest>}
     * @memberof OriginalRequest
     */
    'attributeRequests'?: Array<AttributeRequest>;
    /**
     * Operation used.
     * @type {string}
     * @memberof OriginalRequest
     */
    'op'?: string;
    /**
     *
     * @type {AccountSource}
     * @memberof OriginalRequest
     */
    'source'?: AccountSource;
}
/**
 * Arguments for Orphan Identities report (ORPHAN_IDENTITIES) and Uncorrelated Accounts report (UNCORRELATED_ACCOUNTS)
 * @export
 * @interface OrphanUncorrelatedReportArguments
 */
export interface OrphanUncorrelatedReportArguments {
    /**
     * Output report file formats. This are formats for calling get endpoint as a query parameter \'fileFormat\'.  In case report won\'t have this argument there will be [\'CSV\', \'PDF\'] as default.
     * @type {Array<string>}
     * @memberof OrphanUncorrelatedReportArguments
     */
    'selectedFormats'?: Array<OrphanUncorrelatedReportArgumentsSelectedFormatsEnum>;
}
export declare const OrphanUncorrelatedReportArgumentsSelectedFormatsEnum: {
    readonly Csv: "CSV";
    readonly Pdf: "PDF";
};
export type OrphanUncorrelatedReportArgumentsSelectedFormatsEnum = typeof OrphanUncorrelatedReportArgumentsSelectedFormatsEnum[keyof typeof OrphanUncorrelatedReportArgumentsSelectedFormatsEnum];
/**
 * Owner\'s identity.
 * @export
 * @interface OwnerDto
 */
export interface OwnerDto {
    /**
     * Owner\'s DTO type.
     * @type {string}
     * @memberof OwnerDto
     */
    'type'?: OwnerDtoTypeEnum;
    /**
     * Owner\'s identity ID.
     * @type {string}
     * @memberof OwnerDto
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof OwnerDto
     */
    'name'?: string;
}
export declare const OwnerDtoTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerDtoTypeEnum = typeof OwnerDtoTypeEnum[keyof typeof OwnerDtoTypeEnum];
/**
 * The owner of this object.
 * @export
 * @interface OwnerReference
 */
export interface OwnerReference {
    /**
     * Owner type. This field must be either left null or set to \'IDENTITY\' on input, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReference
     */
    'type'?: OwnerReferenceTypeEnum;
    /**
     * Identity id
     * @type {string}
     * @memberof OwnerReference
     */
    'id'?: string;
    /**
     * Human-readable display name of the owner. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner\'s display name, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReference
     */
    'name'?: string;
}
export declare const OwnerReferenceTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerReferenceTypeEnum = typeof OwnerReferenceTypeEnum[keyof typeof OwnerReferenceTypeEnum];
/**
 * The owner of this object.
 * @export
 * @interface OwnerReferenceSegments
 */
export interface OwnerReferenceSegments {
    /**
     * Owner type. This field must be either left null or set to \'IDENTITY\' on input, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReferenceSegments
     */
    'type'?: OwnerReferenceSegmentsTypeEnum;
    /**
     * Identity id
     * @type {string}
     * @memberof OwnerReferenceSegments
     */
    'id'?: string;
    /**
     * Human-readable display name of the owner. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner\'s display name, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReferenceSegments
     */
    'name'?: string;
}
export declare const OwnerReferenceSegmentsTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerReferenceSegmentsTypeEnum = typeof OwnerReferenceSegmentsTypeEnum[keyof typeof OwnerReferenceSegmentsTypeEnum];
/**
 *
 * @export
 * @interface Owns
 */
export interface Owns {
    /**
     *
     * @type {Array<Reference1>}
     * @memberof Owns
     */
    'sources'?: Array<Reference1>;
    /**
     *
     * @type {Array<Reference1>}
     * @memberof Owns
     */
    'entitlements'?: Array<Reference1>;
    /**
     *
     * @type {Array<Reference1>}
     * @memberof Owns
     */
    'accessProfiles'?: Array<Reference1>;
    /**
     *
     * @type {Array<Reference1>}
     * @memberof Owns
     */
    'roles'?: Array<Reference1>;
    /**
     *
     * @type {Array<Reference1>}
     * @memberof Owns
     */
    'apps'?: Array<Reference1>;
    /**
     *
     * @type {Array<Reference1>}
     * @memberof Owns
     */
    'governanceGroups'?: Array<Reference1>;
    /**
     *
     * @type {boolean}
     * @memberof Owns
     */
    'fallbackApprover'?: boolean;
}
/**
 *
 * @export
 * @interface PasswordChangeRequest
 */
export interface PasswordChangeRequest {
    /**
     * The identity ID that requested the password change
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'identityId'?: string;
    /**
     * The RSA encrypted password
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'encryptedPassword'?: string;
    /**
     * The encryption key ID
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'publicKeyId'?: string;
    /**
     * Account ID of the account This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'accountId'?: string;
    /**
     * The ID of the source for which identity is requesting the password change
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'sourceId'?: string;
}
/**
 *
 * @export
 * @interface PasswordChangeResponse
 */
export interface PasswordChangeResponse {
    /**
     * The password change request ID
     * @type {string}
     * @memberof PasswordChangeResponse
     */
    'requestId'?: string | null;
    /**
     * Password change state
     * @type {string}
     * @memberof PasswordChangeResponse
     */
    'state'?: PasswordChangeResponseStateEnum;
}
export declare const PasswordChangeResponseStateEnum: {
    readonly InProgress: "IN_PROGRESS";
    readonly Finished: "FINISHED";
    readonly Failed: "FAILED";
};
export type PasswordChangeResponseStateEnum = typeof PasswordChangeResponseStateEnum[keyof typeof PasswordChangeResponseStateEnum];
/**
 *
 * @export
 * @interface PasswordInfo
 */
export interface PasswordInfo {
    /**
     * Identity ID
     * @type {string}
     * @memberof PasswordInfo
     */
    'identityId'?: string;
    /**
     * source ID
     * @type {string}
     * @memberof PasswordInfo
     */
    'sourceId'?: string;
    /**
     * public key ID
     * @type {string}
     * @memberof PasswordInfo
     */
    'publicKeyId'?: string;
    /**
     * User\'s public key with Base64 encoding
     * @type {string}
     * @memberof PasswordInfo
     */
    'publicKey'?: string;
    /**
     * Account info related to queried identity and source
     * @type {Array<PasswordInfoAccount>}
     * @memberof PasswordInfo
     */
    'accounts'?: Array<PasswordInfoAccount>;
    /**
     * Password constraints
     * @type {Array<string>}
     * @memberof PasswordInfo
     */
    'policies'?: Array<string>;
}
/**
 *
 * @export
 * @interface PasswordInfoAccount
 */
export interface PasswordInfoAccount {
    /**
     * Account ID of the account. This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350
     * @type {string}
     * @memberof PasswordInfoAccount
     */
    'accountId'?: string;
    /**
     * Display name of the account. This is specified per account schema in the source configuration. It is used to display name of the account. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-Name-for/ta-p/74008
     * @type {string}
     * @memberof PasswordInfoAccount
     */
    'accountName'?: string;
}
/**
 *
 * @export
 * @interface PasswordInfoQueryDTO
 */
export interface PasswordInfoQueryDTO {
    /**
     * The login name of the user
     * @type {string}
     * @memberof PasswordInfoQueryDTO
     */
    'userName'?: string;
    /**
     * The display name of the source
     * @type {string}
     * @memberof PasswordInfoQueryDTO
     */
    'sourceName'?: string;
}
/**
 *
 * @export
 * @interface PasswordOrgConfig
 */
export interface PasswordOrgConfig {
    /**
     * Indicator whether custom password instructions feature is enabled. The default value is false.
     * @type {boolean}
     * @memberof PasswordOrgConfig
     */
    'customInstructionsEnabled'?: boolean;
    /**
     * Indicator whether \"digit token\" feature is enabled. The default value is false.
     * @type {boolean}
     * @memberof PasswordOrgConfig
     */
    'digitTokenEnabled'?: boolean;
    /**
     * The duration of \"digit token\" in minutes. The default value is 5.
     * @type {number}
     * @memberof PasswordOrgConfig
     */
    'digitTokenDurationMinutes'?: number;
    /**
     * The length of \"digit token\". The default value is 6.
     * @type {number}
     * @memberof PasswordOrgConfig
     */
    'digitTokenLength'?: number;
}
/**
 *
 * @export
 * @interface PasswordPolicyV3Dto
 */
export interface PasswordPolicyV3Dto {
    /**
     * The password policy Id.
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'id'?: string;
    /**
     * Description for current password policy.
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'description'?: string | null;
    /**
     * The name of the password policy.
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'name'?: string;
    /**
     * Date the Password Policy was created.
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'dateCreated'?: string;
    /**
     * Date the Password Policy was updated.
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'lastUpdated'?: string | null;
    /**
     * The number of days before expiration remaninder.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'firstExpirationReminder'?: number;
    /**
     * The minimun length of account Id. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'accountIdMinWordLength'?: number;
    /**
     * The minimun length of account name. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'accountNameMinWordLength'?: number;
    /**
     * Maximum alpha. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minAlpha'?: number;
    /**
     * MinCharacterTypes. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minCharacterTypes'?: number;
    /**
     * Maximum length of the password.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'maxLength'?: number;
    /**
     * Minimum length of the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minLength'?: number;
    /**
     * Maximum repetition of the same character in the password. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'maxRepeatedChars'?: number;
    /**
     * Minimum amount of lower case character in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minLower'?: number;
    /**
     * Minimum amount of numeric characters in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minNumeric'?: number;
    /**
     * Minimum amount of special symbols in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minSpecial'?: number;
    /**
     * Minimum amount of upper case symbols in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'minUpper'?: number;
    /**
     * Number of days before current password expires. By default is equals to 90.
     * @type {number}
     * @memberof PasswordPolicyV3Dto
     */
    'passwordExpiration'?: number;
    /**
     * Defines whether this policy is default or not. Default policy is created automatically when an org is setup. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'defaultPolicy'?: boolean;
    /**
     * Defines whether this policy is enabled to expire or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'enablePasswdExpiration'?: boolean;
    /**
     * Defines whether this policy require strong Auth or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'requireStrongAuthn'?: boolean;
    /**
     * Defines whether this policy require strong Auth of network or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'requireStrongAuthOffNetwork'?: boolean;
    /**
     * Defines whether this policy require strong Auth for untrusted geographies. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'requireStrongAuthUntrustedGeographies'?: boolean;
    /**
     * Defines whether this policy uses account attributes or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'useAccountAttributes'?: boolean;
    /**
     * Defines whether this policy uses dictionary or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'useDictionary'?: boolean;
    /**
     * Defines whether this policy uses identity attributes or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'useIdentityAttributes'?: boolean;
    /**
     * Defines whether this policy validate against account id or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'validateAgainstAccountId'?: boolean;
    /**
     * Defines whether this policy validate against account name or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3Dto
     */
    'validateAgainstAccountName'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'created'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PasswordPolicyV3Dto
     */
    'modified'?: string | null;
    /**
     * List of sources IDs managed by this password policy.
     * @type {Array<string>}
     * @memberof PasswordPolicyV3Dto
     */
    'sourceIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface PasswordStatus
 */
export interface PasswordStatus {
    /**
     * The password change request ID
     * @type {string}
     * @memberof PasswordStatus
     */
    'requestId'?: string | null;
    /**
     * Password change state
     * @type {string}
     * @memberof PasswordStatus
     */
    'state'?: PasswordStatusStateEnum;
    /**
     * The errors during the password change request
     * @type {Array<string>}
     * @memberof PasswordStatus
     */
    'errors'?: Array<string>;
    /**
     * List of source IDs in the password change request
     * @type {Array<string>}
     * @memberof PasswordStatus
     */
    'sourceIds'?: Array<string>;
}
export declare const PasswordStatusStateEnum: {
    readonly InProgress: "IN_PROGRESS";
    readonly Finished: "FINISHED";
    readonly Failed: "FAILED";
};
export type PasswordStatusStateEnum = typeof PasswordStatusStateEnum[keyof typeof PasswordStatusStateEnum];
/**
 *
 * @export
 * @interface PasswordSyncGroup
 */
export interface PasswordSyncGroup {
    /**
     * ID of the sync group
     * @type {string}
     * @memberof PasswordSyncGroup
     */
    'id'?: string;
    /**
     * Name of the sync group
     * @type {string}
     * @memberof PasswordSyncGroup
     */
    'name'?: string;
    /**
     * ID of the password policy
     * @type {string}
     * @memberof PasswordSyncGroup
     */
    'passwordPolicyId'?: string;
    /**
     * List of password managed sources IDs
     * @type {Array<string>}
     * @memberof PasswordSyncGroup
     */
    'sourceIds'?: Array<string>;
    /**
     * The date and time this sync group was created
     * @type {string}
     * @memberof PasswordSyncGroup
     */
    'created'?: string | null;
    /**
     * The date and time this sync group was last modified
     * @type {string}
     * @memberof PasswordSyncGroup
     */
    'modified'?: string | null;
}
/**
 * Personal access token owner\'s identity.
 * @export
 * @interface PatOwner
 */
export interface PatOwner {
    /**
     * Personal access token owner\'s DTO type.
     * @type {string}
     * @memberof PatOwner
     */
    'type'?: PatOwnerTypeEnum;
    /**
     * Personal access token owner\'s identity ID.
     * @type {string}
     * @memberof PatOwner
     */
    'id'?: string;
    /**
     * Personal access token owner\'s human-readable display name.
     * @type {string}
     * @memberof PatOwner
     */
    'name'?: string;
}
export declare const PatOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type PatOwnerTypeEnum = typeof PatOwnerTypeEnum[keyof typeof PatOwnerTypeEnum];
/**
 * A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902).  Only `replace` operations are accepted by this endpoint.
 * @export
 * @interface PatchServiceDeskIntegrationRequest
 */
export interface PatchServiceDeskIntegrationRequest {
    /**
     * Operations to be applied
     * @type {Array<JsonPatchOperation>}
     * @memberof PatchServiceDeskIntegrationRequest
     */
    'operations'?: Array<JsonPatchOperation>;
}
/**
 *
 * @export
 * @interface PendingApproval
 */
export interface PendingApproval {
    /**
     * The approval id.
     * @type {string}
     * @memberof PendingApproval
     */
    'id'?: string;
    /**
     * The name of the approval.
     * @type {string}
     * @memberof PendingApproval
     */
    'name'?: string;
    /**
     * When the approval was created.
     * @type {string}
     * @memberof PendingApproval
     */
    'created'?: string;
    /**
     * When the approval was modified last time.
     * @type {string}
     * @memberof PendingApproval
     */
    'modified'?: string;
    /**
     * When the access-request was created.
     * @type {string}
     * @memberof PendingApproval
     */
    'requestCreated'?: string;
    /**
     *
     * @type {AccessRequestType}
     * @memberof PendingApproval
     */
    'requestType'?: AccessRequestType | null;
    /**
     *
     * @type {AccessItemRequester}
     * @memberof PendingApproval
     */
    'requester'?: AccessItemRequester;
    /**
     * Identities access was requested for.
     * @type {Array<AccessItemRequestedFor>}
     * @memberof PendingApproval
     */
    'requestedFor'?: Array<AccessItemRequestedFor>;
    /**
     *
     * @type {PendingApprovalOwner}
     * @memberof PendingApproval
     */
    'owner'?: PendingApprovalOwner;
    /**
     *
     * @type {RequestableObjectReference}
     * @memberof PendingApproval
     */
    'requestedObject'?: RequestableObjectReference;
    /**
     *
     * @type {CommentDto}
     * @memberof PendingApproval
     */
    'requesterComment'?: CommentDto;
    /**
     * The history of the previous reviewers comments.
     * @type {Array<CommentDto>}
     * @memberof PendingApproval
     */
    'previousReviewersComments'?: Array<CommentDto>;
    /**
     * The history of approval forward action.
     * @type {Array<ApprovalForwardHistory>}
     * @memberof PendingApproval
     */
    'forwardHistory'?: Array<ApprovalForwardHistory>;
    /**
     * When true the rejector has to provide comments when rejecting
     * @type {boolean}
     * @memberof PendingApproval
     */
    'commentRequiredWhenRejected'?: boolean;
    /**
     *
     * @type {PendingApprovalAction}
     * @memberof PendingApproval
     */
    'actionInProcess'?: PendingApprovalAction;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof PendingApproval
     */
    'removeDate'?: string;
    /**
     * If true, then the request is to change the remove date or sunset date.
     * @type {boolean}
     * @memberof PendingApproval
     */
    'removeDateUpdateRequested'?: boolean;
    /**
     * The remove date or sunset date that was assigned at the time of the request.
     * @type {string}
     * @memberof PendingApproval
     */
    'currentRemoveDate'?: string;
    /**
     *
     * @type {SodViolationContextCheckCompleted}
     * @memberof PendingApproval
     */
    'sodViolationContext'?: SodViolationContextCheckCompleted | null;
}
/**
 * Enum represents action that is being processed on an approval.
 * @export
 * @enum {string}
 */
export declare const PendingApprovalAction: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
    readonly Forwarded: "FORWARDED";
};
export type PendingApprovalAction = typeof PendingApprovalAction[keyof typeof PendingApprovalAction];
/**
 * Access item owner\'s identity.
 * @export
 * @interface PendingApprovalOwner
 */
export interface PendingApprovalOwner {
    /**
     * Access item owner\'s DTO type.
     * @type {string}
     * @memberof PendingApprovalOwner
     */
    'type'?: PendingApprovalOwnerTypeEnum;
    /**
     * Access item owner\'s identity ID.
     * @type {string}
     * @memberof PendingApprovalOwner
     */
    'id'?: string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof PendingApprovalOwner
     */
    'name'?: string;
}
export declare const PendingApprovalOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type PendingApprovalOwnerTypeEnum = typeof PendingApprovalOwnerTypeEnum[keyof typeof PendingApprovalOwnerTypeEnum];
/**
 * Simplified DTO for the Permission objects stored in SailPoint\'s database. The data is aggregated from customer systems and is free-form, so its appearance can vary largely between different clients/customers.
 * @export
 * @interface PermissionDto
 */
export interface PermissionDto {
    /**
     * All the rights (e.g. actions) that this permission allows on the target
     * @type {Array<string>}
     * @memberof PermissionDto
     */
    'rights'?: Array<string>;
    /**
     * The target the permission would grants rights on.
     * @type {string}
     * @memberof PermissionDto
     */
    'target'?: string;
}
/**
 * Provides additional details about the pre-approval trigger for this request.
 * @export
 * @interface PreApprovalTriggerDetails
 */
export interface PreApprovalTriggerDetails {
    /**
     * Comment left for the pre-approval decision
     * @type {string}
     * @memberof PreApprovalTriggerDetails
     */
    'comment'?: string;
    /**
     * The reviewer of the pre-approval decision
     * @type {string}
     * @memberof PreApprovalTriggerDetails
     */
    'reviewer'?: string;
    /**
     * The decision of the pre-approval trigger
     * @type {string}
     * @memberof PreApprovalTriggerDetails
     */
    'decision'?: PreApprovalTriggerDetailsDecisionEnum;
}
export declare const PreApprovalTriggerDetailsDecisionEnum: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type PreApprovalTriggerDetailsDecisionEnum = typeof PreApprovalTriggerDetailsDecisionEnum[keyof typeof PreApprovalTriggerDetailsDecisionEnum];
/**
 *
 * @export
 * @interface ProcessingDetails
 */
export interface ProcessingDetails {
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof ProcessingDetails
     */
    'date'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProcessingDetails
     */
    'stage'?: string;
    /**
     *
     * @type {number}
     * @memberof ProcessingDetails
     */
    'retryCount'?: number;
    /**
     *
     * @type {string}
     * @memberof ProcessingDetails
     */
    'stackTrace'?: string;
    /**
     *
     * @type {string}
     * @memberof ProcessingDetails
     */
    'message'?: string;
}
/**
 * Specification of a Service Desk integration provisioning configuration.
 * @export
 * @interface ProvisioningConfig
 */
export interface ProvisioningConfig {
    /**
     * Specifies whether this configuration is used to manage provisioning requests for all sources from the org.  If true, no managedResourceRefs are allowed.
     * @type {boolean}
     * @memberof ProvisioningConfig
     */
    'universalManager'?: boolean;
    /**
     * References to sources for the Service Desk integration template.  May only be specified if universalManager is false.
     * @type {Array<ProvisioningConfigManagedResourceRefsInner>}
     * @memberof ProvisioningConfig
     */
    'managedResourceRefs'?: Array<ProvisioningConfigManagedResourceRefsInner>;
    /**
     *
     * @type {ProvisioningConfigPlanInitializerScript}
     * @memberof ProvisioningConfig
     */
    'planInitializerScript'?: ProvisioningConfigPlanInitializerScript | null;
    /**
     * Name of an attribute that when true disables the saving of ProvisioningRequest objects whenever plans are sent through this integration.
     * @type {boolean}
     * @memberof ProvisioningConfig
     */
    'noProvisioningRequests'?: boolean;
    /**
     * When saving pending requests is enabled, this defines the number of hours the request is allowed to live before it is considered expired and no longer affects plan compilation.
     * @type {number}
     * @memberof ProvisioningConfig
     */
    'provisioningRequestExpiration'?: number;
}
/**
 *
 * @export
 * @interface ProvisioningConfigManagedResourceRefsInner
 */
export interface ProvisioningConfigManagedResourceRefsInner {
    /**
     * DTO type of source for service desk integration template.
     * @type {string}
     * @memberof ProvisioningConfigManagedResourceRefsInner
     */
    'type'?: ProvisioningConfigManagedResourceRefsInnerTypeEnum;
    /**
     * ID of source for service desk integration template.
     * @type {string}
     * @memberof ProvisioningConfigManagedResourceRefsInner
     */
    'id'?: string;
    /**
     * Human-readable name of source for service desk integration template.
     * @type {string}
     * @memberof ProvisioningConfigManagedResourceRefsInner
     */
    'name'?: string;
}
export declare const ProvisioningConfigManagedResourceRefsInnerTypeEnum: {
    readonly Source: "SOURCE";
};
export type ProvisioningConfigManagedResourceRefsInnerTypeEnum = typeof ProvisioningConfigManagedResourceRefsInnerTypeEnum[keyof typeof ProvisioningConfigManagedResourceRefsInnerTypeEnum];
/**
 * This is a reference to a plan initializer script.
 * @export
 * @interface ProvisioningConfigPlanInitializerScript
 */
export interface ProvisioningConfigPlanInitializerScript {
    /**
     * This is a Rule that allows provisioning instruction changes.
     * @type {string}
     * @memberof ProvisioningConfigPlanInitializerScript
     */
    'source'?: string;
}
/**
 * Defines matching criteria for an Account to be provisioned with a specific Access Profile
 * @export
 * @interface ProvisioningCriteriaLevel1
 */
export interface ProvisioningCriteriaLevel1 {
    /**
     *
     * @type {ProvisioningCriteriaOperation}
     * @memberof ProvisioningCriteriaLevel1
     */
    'operation'?: ProvisioningCriteriaOperation;
    /**
     * Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel1
     */
    'attribute'?: string | null;
    /**
     * String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel1
     */
    'value'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.
     * @type {Array<ProvisioningCriteriaLevel2>}
     * @memberof ProvisioningCriteriaLevel1
     */
    'children'?: Array<ProvisioningCriteriaLevel2> | null;
}
/**
 * Defines matching criteria for an Account to be provisioned with a specific Access Profile
 * @export
 * @interface ProvisioningCriteriaLevel2
 */
export interface ProvisioningCriteriaLevel2 {
    /**
     *
     * @type {ProvisioningCriteriaOperation}
     * @memberof ProvisioningCriteriaLevel2
     */
    'operation'?: ProvisioningCriteriaOperation;
    /**
     * Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel2
     */
    'attribute'?: string | null;
    /**
     * String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel2
     */
    'value'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.
     * @type {Array<ProvisioningCriteriaLevel3>}
     * @memberof ProvisioningCriteriaLevel2
     */
    'children'?: Array<ProvisioningCriteriaLevel3> | null;
}
/**
 * Defines matching criteria for an Account to be provisioned with a specific Access Profile
 * @export
 * @interface ProvisioningCriteriaLevel3
 */
export interface ProvisioningCriteriaLevel3 {
    /**
     *
     * @type {ProvisioningCriteriaOperation}
     * @memberof ProvisioningCriteriaLevel3
     */
    'operation'?: ProvisioningCriteriaOperation;
    /**
     * Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel3
     */
    'attribute'?: string | null;
    /**
     * String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel3
     */
    'value'?: string;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel3
     */
    'children'?: string | null;
}
/**
 * Supported operations on ProvisioningCriteria
 * @export
 * @enum {string}
 */
export declare const ProvisioningCriteriaOperation: {
    readonly Equals: "EQUALS";
    readonly NotEquals: "NOT_EQUALS";
    readonly Contains: "CONTAINS";
    readonly Has: "HAS";
    readonly And: "AND";
    readonly Or: "OR";
};
export type ProvisioningCriteriaOperation = typeof ProvisioningCriteriaOperation[keyof typeof ProvisioningCriteriaOperation];
/**
 * Provides additional details about provisioning for this request.
 * @export
 * @interface ProvisioningDetails
 */
export interface ProvisioningDetails {
    /**
     * Ordered CSV of sub phase references to objects that contain more information about provisioning. For example, this can contain \"manualWorkItemDetails\" which indicate that there is further information in that object for this phase.
     * @type {string}
     * @memberof ProvisioningDetails
     */
    'orderedSubPhaseReferences'?: string;
}
/**
 *
 * @export
 * @interface ProvisioningPolicy
 */
export interface ProvisioningPolicy {
    /**
     * the provisioning policy name
     * @type {string}
     * @memberof ProvisioningPolicy
     */
    'name': string;
    /**
     * the description of the provisioning policy
     * @type {string}
     * @memberof ProvisioningPolicy
     */
    'description'?: string;
    /**
     *
     * @type {UsageType}
     * @memberof ProvisioningPolicy
     */
    'usageType'?: UsageType;
    /**
     *
     * @type {Array<FieldDetailsDto>}
     * @memberof ProvisioningPolicy
     */
    'fields'?: Array<FieldDetailsDto>;
}
/**
 *
 * @export
 * @interface ProvisioningPolicyDto
 */
export interface ProvisioningPolicyDto {
    /**
     * the provisioning policy name
     * @type {string}
     * @memberof ProvisioningPolicyDto
     */
    'name': string;
    /**
     * the description of the provisioning policy
     * @type {string}
     * @memberof ProvisioningPolicyDto
     */
    'description'?: string;
    /**
     *
     * @type {UsageType}
     * @memberof ProvisioningPolicyDto
     */
    'usageType'?: UsageType;
    /**
     *
     * @type {Array<FieldDetailsDto>}
     * @memberof ProvisioningPolicyDto
     */
    'fields'?: Array<FieldDetailsDto>;
}
/**
 * Provisioning state of an account activity item
 * @export
 * @enum {string}
 */
export declare const ProvisioningState: {
    readonly Pending: "PENDING";
    readonly Finished: "FINISHED";
    readonly Unverifiable: "UNVERIFIABLE";
    readonly Commited: "COMMITED";
    readonly Failed: "FAILED";
    readonly Retry: "RETRY";
};
export type ProvisioningState = typeof ProvisioningState[keyof typeof ProvisioningState];
/**
 * Details about a public identity
 * @export
 * @interface PublicIdentity
 */
export interface PublicIdentity {
    /**
     * Identity id
     * @type {string}
     * @memberof PublicIdentity
     */
    'id'?: string;
    /**
     * Human-readable display name of identity.
     * @type {string}
     * @memberof PublicIdentity
     */
    'name'?: string;
    /**
     * Alternate unique identifier for the identity.
     * @type {string}
     * @memberof PublicIdentity
     */
    'alias'?: string;
    /**
     * Email address of identity.
     * @type {string}
     * @memberof PublicIdentity
     */
    'email'?: string | null;
    /**
     * The lifecycle status for the identity
     * @type {string}
     * @memberof PublicIdentity
     */
    'status'?: string | null;
    /**
     * The current state of the identity, which determines how Identity Security Cloud interacts with the identity. An identity that is Active will be included identity picklists in Request Center, identity processing, and more. Identities that are Inactive will be excluded from these features.
     * @type {string}
     * @memberof PublicIdentity
     */
    'identityState'?: PublicIdentityIdentityStateEnum;
    /**
     *
     * @type {IdentityReference}
     * @memberof PublicIdentity
     */
    'manager'?: IdentityReference | null;
    /**
     * The public identity attributes of the identity
     * @type {Array<IdentityAttribute1>}
     * @memberof PublicIdentity
     */
    'attributes'?: Array<IdentityAttribute1>;
}
export declare const PublicIdentityIdentityStateEnum: {
    readonly Active: "ACTIVE";
    readonly InactiveShortTerm: "INACTIVE_SHORT_TERM";
    readonly InactiveLongTerm: "INACTIVE_LONG_TERM";
    readonly Null: "null";
};
export type PublicIdentityIdentityStateEnum = typeof PublicIdentityIdentityStateEnum[keyof typeof PublicIdentityIdentityStateEnum];
/**
 * Used to map an attribute key for an Identity to its display name.
 * @export
 * @interface PublicIdentityAttributeConfig
 */
export interface PublicIdentityAttributeConfig {
    /**
     * The attribute key
     * @type {string}
     * @memberof PublicIdentityAttributeConfig
     */
    'key'?: string;
    /**
     * The attribute display name
     * @type {string}
     * @memberof PublicIdentityAttributeConfig
     */
    'name'?: string;
}
/**
 * Details of up to 5 Identity attributes that will be publicly accessible for all Identities to anyone in the org.
 * @export
 * @interface PublicIdentityConfig
 */
export interface PublicIdentityConfig {
    /**
     * Up to 5 identity attributes that will be available to everyone in the org for all users in the org.
     * @type {Array<PublicIdentityAttributeConfig>}
     * @memberof PublicIdentityConfig
     */
    'attributes'?: Array<PublicIdentityAttributeConfig>;
    /**
     * When this configuration was last modified.
     * @type {string}
     * @memberof PublicIdentityConfig
     */
    'modified'?: string | null;
    /**
     *
     * @type {IdentityReference}
     * @memberof PublicIdentityConfig
     */
    'modifiedBy'?: IdentityReference | null;
}
/**
 *
 * @export
 * @interface PutCorrelationConfigRequest
 */
export interface PutCorrelationConfigRequest {
    /**
     * connector correlation config xml file
     * @type {any}
     * @memberof PutCorrelationConfigRequest
     */
    'file': any;
}
/**
 *
 * @export
 * @interface PutPasswordDictionaryRequest
 */
export interface PutPasswordDictionaryRequest {
    /**
     *
     * @type {any}
     * @memberof PutPasswordDictionaryRequest
     */
    'file'?: any;
}
/**
 *
 * @export
 * @interface PutSourceConfigRequest
 */
export interface PutSourceConfigRequest {
    /**
     * connector source config xml file
     * @type {any}
     * @memberof PutSourceConfigRequest
     */
    'file': any;
}
/**
 *
 * @export
 * @interface PutSourceTemplateRequest
 */
export interface PutSourceTemplateRequest {
    /**
     * connector source template xml file
     * @type {any}
     * @memberof PutSourceTemplateRequest
     */
    'file': any;
}
/**
 * Query parameters used to construct an Elasticsearch query object.
 * @export
 * @interface Query
 */
export interface Query {
    /**
     * The query using the Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL extended by SailPoint to support Nested queries.
     * @type {string}
     * @memberof Query
     */
    'query'?: string;
    /**
     * The fields the query will be applied to.  Fields provide you with a simple way to add additional fields to search, without making the query too complicated.  For example, you can use the fields to specify that you want your query of \"a*\" to be applied to \"name\", \"firstName\", and the \"source.name\".  The response will include all results matching the \"a*\" query found in those three fields.  A field\'s availability depends on the indices being searched.  For example, if you are searching \"identities\", you can apply your search to the \"firstName\" field, but you couldn\'t use \"firstName\" with a search on \"access profiles\".  Refer to the response schema for the respective lists of available fields.
     * @type {string}
     * @memberof Query
     */
    'fields'?: string;
    /**
     * The time zone to be applied to any range query related to dates.
     * @type {string}
     * @memberof Query
     */
    'timeZone'?: string;
    /**
     *
     * @type {InnerHit}
     * @memberof Query
     */
    'innerHit'?: InnerHit;
}
/**
 * Allows the query results to be filtered by specifying a list of fields to include and/or exclude from the result documents.
 * @export
 * @interface QueryResultFilter
 */
export interface QueryResultFilter {
    /**
     * The list of field names to include in the result documents.
     * @type {Array<string>}
     * @memberof QueryResultFilter
     */
    'includes'?: Array<string>;
    /**
     * The list of field names to exclude from the result documents.
     * @type {Array<string>}
     * @memberof QueryResultFilter
     */
    'excludes'?: Array<string>;
}
/**
 * The type of query to use.  By default, the `SAILPOINT` query type is used, which requires the `query` object to be defined in the request body. To use the `queryDsl` or `typeAheadQuery` objects in the request, you must set the type to `DSL` or `TYPEAHEAD` accordingly. Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const QueryType: {
    readonly Dsl: "DSL";
    readonly Sailpoint: "SAILPOINT";
    readonly Text: "TEXT";
    readonly Typeahead: "TYPEAHEAD";
};
export type QueryType = typeof QueryType[keyof typeof QueryType];
/**
 * Configuration of maximum number days and interval for checking Service Desk integration queue status
 * @export
 * @interface QueuedCheckConfigDetails
 */
export interface QueuedCheckConfigDetails {
    /**
     * interval in minutes between status checks
     * @type {string}
     * @memberof QueuedCheckConfigDetails
     */
    'provisioningStatusCheckIntervalMinutes': string;
    /**
     * maximum number of days to check
     * @type {string}
     * @memberof QueuedCheckConfigDetails
     */
    'provisioningMaxStatusCheckDays': string;
}
/**
 *
 * @export
 * @interface RandomAlphaNumeric
 */
export interface RandomAlphaNumeric {
    /**
     * This is an integer value specifying the size/number of characters the random string must contain   * This value must be a positive number and cannot be blank   * If no length is provided, the transform will default to a value of `32`   * Due to identity attribute data constraints, the maximum allowable value is `450` characters
     * @type {string}
     * @memberof RandomAlphaNumeric
     */
    'length'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof RandomAlphaNumeric
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof RandomAlphaNumeric
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface RandomNumeric
 */
export interface RandomNumeric {
    /**
     * This is an integer value specifying the size/number of characters the random string must contain   * This value must be a positive number and cannot be blank   * If no length is provided, the transform will default to a value of `32`   * Due to identity attribute data constraints, the maximum allowable value is `450` characters
     * @type {string}
     * @memberof RandomNumeric
     */
    'length'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof RandomNumeric
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof RandomNumeric
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * The range of values to be filtered.
 * @export
 * @interface Range
 */
export interface Range {
    /**
     *
     * @type {Bound}
     * @memberof Range
     */
    'lower'?: Bound;
    /**
     *
     * @type {Bound}
     * @memberof Range
     */
    'upper'?: Bound;
}
/**
 *
 * @export
 * @interface ReassignReference
 */
export interface ReassignReference {
    /**
     * The ID of item or identity being reassigned.
     * @type {string}
     * @memberof ReassignReference
     */
    'id': string;
    /**
     * The type of item or identity being reassigned.
     * @type {string}
     * @memberof ReassignReference
     */
    'type': ReassignReferenceTypeEnum;
}
export declare const ReassignReferenceTypeEnum: {
    readonly TargetSummary: "TARGET_SUMMARY";
    readonly Item: "ITEM";
    readonly IdentitySummary: "IDENTITY_SUMMARY";
};
export type ReassignReferenceTypeEnum = typeof ReassignReferenceTypeEnum[keyof typeof ReassignReferenceTypeEnum];
/**
 *
 * @export
 * @interface Reassignment
 */
export interface Reassignment {
    /**
     *
     * @type {CertificationReference}
     * @memberof Reassignment
     */
    'from'?: CertificationReference;
    /**
     * The comment entered when the Certification was reassigned
     * @type {string}
     * @memberof Reassignment
     */
    'comment'?: string;
}
/**
 *
 * @export
 * @interface ReassignmentReference
 */
export interface ReassignmentReference {
    /**
     * The ID of item or identity being reassigned.
     * @type {string}
     * @memberof ReassignmentReference
     */
    'id': string;
    /**
     * The type of item or identity being reassigned.
     * @type {string}
     * @memberof ReassignmentReference
     */
    'type': ReassignmentReferenceTypeEnum;
}
export declare const ReassignmentReferenceTypeEnum: {
    readonly TargetSummary: "TARGET_SUMMARY";
    readonly Item: "ITEM";
    readonly IdentitySummary: "IDENTITY_SUMMARY";
};
export type ReassignmentReferenceTypeEnum = typeof ReassignmentReferenceTypeEnum[keyof typeof ReassignmentReferenceTypeEnum];
/**
 *
 * @export
 * @interface ReassignmentTrailDTO
 */
export interface ReassignmentTrailDTO {
    /**
     * The ID of previous owner identity.
     * @type {string}
     * @memberof ReassignmentTrailDTO
     */
    'previousOwner'?: string;
    /**
     * The ID of new owner identity.
     * @type {string}
     * @memberof ReassignmentTrailDTO
     */
    'newOwner'?: string;
    /**
     * The type of reassignment.
     * @type {string}
     * @memberof ReassignmentTrailDTO
     */
    'reassignmentType'?: string;
}
/**
 * The approval reassignment type.  * MANUAL_REASSIGNMENT: An approval with this reassignment type has been specifically reassigned by the approval task\'s owner, from their queue to someone else\'s.  * AUTOMATIC_REASSIGNMENT: An approval with this reassignment type has been automatically reassigned from another approver\'s queue, according to that approver\'s reassignment configuration. The approver\'s reassignment configuration may be set up to automatically reassign approval tasks for a defined (or possibly open-ended) period of time. * AUTO_ESCALATION: An approval with this reassignment type has been automatically reassigned from another approver\'s queue, according to the request\'s escalation configuration. For more information about escalation configuration, refer to [Setting Global Reminders and Escalation Policies](https://documentation.sailpoint.com/saas/help/requests/config_emails.html). * SELF_REVIEW_DELEGATION: An approval with this reassignment type has been automatically reassigned by the system to prevent self-review. This helps prevent situations like a requester being tasked with approving their own request. For more information about preventing self-review, refer to [Self-review Prevention](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html#self-review-prevention) and [Preventing Self-approval](https://documentation.sailpoint.com/saas/help/requests/config_ap_roles.html#preventing-self-approval).
 * @export
 * @enum {string}
 */
export declare const ReassignmentType: {
    readonly ManualReassignment: "MANUAL_REASSIGNMENT";
    readonly AutomaticReassignment: "AUTOMATIC_REASSIGNMENT";
    readonly AutoEscalation: "AUTO_ESCALATION";
    readonly SelfReviewDelegation: "SELF_REVIEW_DELEGATION";
};
export type ReassignmentType = typeof ReassignmentType[keyof typeof ReassignmentType];
/**
 *
 * @export
 * @interface Reference
 */
export interface Reference {
    /**
     * This ID specifies the name of the pre-existing transform which you want to use within your current transform
     * @type {string}
     * @memberof Reference
     */
    'id': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Reference
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Reference
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Reference1
 */
export interface Reference1 {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof Reference1
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof Reference1
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface RemediationItemDetails
 */
export interface RemediationItemDetails {
    /**
     * The ID of the certification
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'id'?: string;
    /**
     * The ID of the certification target
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'targetId'?: string;
    /**
     * The name of the certification target
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'targetName'?: string;
    /**
     * The display name of the certification target
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'targetDisplayName'?: string;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'applicationName'?: string;
    /**
     * The name of the attribute being certified
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'attributeName'?: string;
    /**
     * The operation of the certification on the attribute
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'attributeOperation'?: string;
    /**
     * The value of the attribute being certified
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'attributeValue'?: string;
    /**
     * The native identity of the target
     * @type {string}
     * @memberof RemediationItemDetails
     */
    'nativeIdentity'?: string;
}
/**
 *
 * @export
 * @interface RemediationItems
 */
export interface RemediationItems {
    /**
     * The ID of the certification
     * @type {string}
     * @memberof RemediationItems
     */
    'id'?: string;
    /**
     * The ID of the certification target
     * @type {string}
     * @memberof RemediationItems
     */
    'targetId'?: string;
    /**
     * The name of the certification target
     * @type {string}
     * @memberof RemediationItems
     */
    'targetName'?: string;
    /**
     * The display name of the certification target
     * @type {string}
     * @memberof RemediationItems
     */
    'targetDisplayName'?: string;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof RemediationItems
     */
    'applicationName'?: string;
    /**
     * The name of the attribute being certified
     * @type {string}
     * @memberof RemediationItems
     */
    'attributeName'?: string;
    /**
     * The operation of the certification on the attribute
     * @type {string}
     * @memberof RemediationItems
     */
    'attributeOperation'?: string;
    /**
     * The value of the attribute being certified
     * @type {string}
     * @memberof RemediationItems
     */
    'attributeValue'?: string;
    /**
     * The native identity of the target
     * @type {string}
     * @memberof RemediationItems
     */
    'nativeIdentity'?: string;
}
/**
 *
 * @export
 * @interface Replace
 */
export interface Replace {
    /**
     * This can be a string or a regex pattern in which you want to replace.
     * @type {string}
     * @memberof Replace
     */
    'regex': string;
    /**
     * This is the replacement string that should be substituded wherever the string or pattern is found.
     * @type {string}
     * @memberof Replace
     */
    'replacement': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Replace
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Replace
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ReplaceAll
 */
export interface ReplaceAll {
    /**
     * An attribute of key-value pairs. Each pair identifies the pattern to search for as its key, and the replacement string as its value.
     * @type {{ [key: string]: any; }}
     * @memberof ReplaceAll
     */
    'table': {
        [key: string]: any;
    };
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ReplaceAll
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ReplaceAll
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Details about report to be processed.
 * @export
 * @interface ReportDetails
 */
export interface ReportDetails {
    /**
     * Use this property to define what report should be processed in the RDE service.
     * @type {string}
     * @memberof ReportDetails
     */
    'reportType'?: ReportDetailsReportTypeEnum;
    /**
     *
     * @type {ReportDetailsArguments}
     * @memberof ReportDetails
     */
    'arguments'?: ReportDetailsArguments;
}
export declare const ReportDetailsReportTypeEnum: {
    readonly Accounts: "ACCOUNTS";
    readonly IdentitiesDetails: "IDENTITIES_DETAILS";
    readonly Identities: "IDENTITIES";
    readonly IdentityProfileIdentityError: "IDENTITY_PROFILE_IDENTITY_ERROR";
    readonly OrphanIdentities: "ORPHAN_IDENTITIES";
    readonly SearchExport: "SEARCH_EXPORT";
    readonly UncorrelatedAccounts: "UNCORRELATED_ACCOUNTS";
};
export type ReportDetailsReportTypeEnum = typeof ReportDetailsReportTypeEnum[keyof typeof ReportDetailsReportTypeEnum];
/**
 * @type ReportDetailsArguments
 * The string-object map(dictionary) with the arguments needed for report processing.
 * @export
 */
export type ReportDetailsArguments = AccountsExportReportArguments | IdentitiesDetailsReportArguments | IdentitiesReportArguments | IdentityProfileIdentityErrorReportArguments | OrphanUncorrelatedReportArguments | SearchExportReportArguments;
/**
 *
 * @export
 * @interface ReportResultReference
 */
export interface ReportResultReference {
    /**
     * SOD policy violation report result DTO type.
     * @type {string}
     * @memberof ReportResultReference
     */
    'type'?: ReportResultReferenceTypeEnum;
    /**
     * SOD policy violation report result ID.
     * @type {string}
     * @memberof ReportResultReference
     */
    'id'?: string;
    /**
     * Human-readable name of the SOD policy violation report result.
     * @type {string}
     * @memberof ReportResultReference
     */
    'name'?: string;
    /**
     * Status of a SOD policy violation report.
     * @type {string}
     * @memberof ReportResultReference
     */
    'status'?: ReportResultReferenceStatusEnum;
}
export declare const ReportResultReferenceTypeEnum: {
    readonly ReportResult: "REPORT_RESULT";
};
export type ReportResultReferenceTypeEnum = typeof ReportResultReferenceTypeEnum[keyof typeof ReportResultReferenceTypeEnum];
export declare const ReportResultReferenceStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
    readonly Pending: "PENDING";
};
export type ReportResultReferenceStatusEnum = typeof ReportResultReferenceStatusEnum[keyof typeof ReportResultReferenceStatusEnum];
/**
 *
 * @export
 * @interface ReportResultReferenceAllOf
 */
export interface ReportResultReferenceAllOf {
    /**
     * Status of a SOD policy violation report.
     * @type {string}
     * @memberof ReportResultReferenceAllOf
     */
    'status'?: ReportResultReferenceAllOfStatusEnum;
}
export declare const ReportResultReferenceAllOfStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
    readonly Pending: "PENDING";
};
export type ReportResultReferenceAllOfStatusEnum = typeof ReportResultReferenceAllOfStatusEnum[keyof typeof ReportResultReferenceAllOfStatusEnum];
/**
 * Details about report result or current state.
 * @export
 * @interface ReportResults
 */
export interface ReportResults {
    /**
     * Use this property to define what report should be processed in the RDE service.
     * @type {string}
     * @memberof ReportResults
     */
    'reportType'?: ReportResultsReportTypeEnum;
    /**
     * Name of the task definition which is started to process requesting report. Usually the same as report name
     * @type {string}
     * @memberof ReportResults
     */
    'taskDefName'?: string;
    /**
     * Unique task definition identifier.
     * @type {string}
     * @memberof ReportResults
     */
    'id'?: string;
    /**
     * Report processing start date
     * @type {string}
     * @memberof ReportResults
     */
    'created'?: string;
    /**
     * Report current state or result status.
     * @type {string}
     * @memberof ReportResults
     */
    'status'?: ReportResultsStatusEnum;
    /**
     * Report processing time in ms.
     * @type {number}
     * @memberof ReportResults
     */
    'duration'?: number;
    /**
     * Report size in rows.
     * @type {number}
     * @memberof ReportResults
     */
    'rows'?: number;
    /**
     * Output report file formats. This are formats for calling get endpoint as a query parameter \'fileFormat\'.  In case report won\'t have this argument there will be [\'CSV\', \'PDF\'] as default.
     * @type {Array<string>}
     * @memberof ReportResults
     */
    'availableFormats'?: Array<ReportResultsAvailableFormatsEnum>;
}
export declare const ReportResultsReportTypeEnum: {
    readonly Accounts: "ACCOUNTS";
    readonly IdentitiesDetails: "IDENTITIES_DETAILS";
    readonly Identities: "IDENTITIES";
    readonly IdentityProfileIdentityError: "IDENTITY_PROFILE_IDENTITY_ERROR";
    readonly OrphanIdentities: "ORPHAN_IDENTITIES";
    readonly SearchExport: "SEARCH_EXPORT";
    readonly UncorrelatedAccounts: "UNCORRELATED_ACCOUNTS";
};
export type ReportResultsReportTypeEnum = typeof ReportResultsReportTypeEnum[keyof typeof ReportResultsReportTypeEnum];
export declare const ReportResultsStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
    readonly Warning: "WARNING";
    readonly Terminated: "TERMINATED";
};
export type ReportResultsStatusEnum = typeof ReportResultsStatusEnum[keyof typeof ReportResultsStatusEnum];
export declare const ReportResultsAvailableFormatsEnum: {
    readonly Csv: "CSV";
    readonly Pdf: "PDF";
};
export type ReportResultsAvailableFormatsEnum = typeof ReportResultsAvailableFormatsEnum[keyof typeof ReportResultsAvailableFormatsEnum];
/**
 * type of a Report
 * @export
 * @enum {string}
 */
export declare const ReportType: {
    readonly CampaignCompositionReport: "CAMPAIGN_COMPOSITION_REPORT";
    readonly CampaignRemediationStatusReport: "CAMPAIGN_REMEDIATION_STATUS_REPORT";
    readonly CampaignStatusReport: "CAMPAIGN_STATUS_REPORT";
    readonly CertificationSignoffReport: "CERTIFICATION_SIGNOFF_REPORT";
};
export type ReportType = typeof ReportType[keyof typeof ReportType];
/**
 *
 * @export
 * @interface RequestOnBehalfOfConfig
 */
export interface RequestOnBehalfOfConfig {
    /**
     * If this is true, anyone can request access for anyone.
     * @type {boolean}
     * @memberof RequestOnBehalfOfConfig
     */
    'allowRequestOnBehalfOfAnyoneByAnyone'?: boolean;
    /**
     * If this is true, a manager can request access for his or her direct reports.
     * @type {boolean}
     * @memberof RequestOnBehalfOfConfig
     */
    'allowRequestOnBehalfOfEmployeeByManager'?: boolean;
}
/**
 *
 * @export
 * @interface Requestability
 */
export interface Requestability {
    /**
     * Whether the requester of the containing object must provide comments justifying the request
     * @type {boolean}
     * @memberof Requestability
     */
    'commentsRequired'?: boolean | null;
    /**
     * Whether an approver must provide comments when denying the request
     * @type {boolean}
     * @memberof Requestability
     */
    'denialCommentsRequired'?: boolean | null;
    /**
     * List describing the steps in approving the request
     * @type {Array<AccessProfileApprovalScheme>}
     * @memberof Requestability
     */
    'approvalSchemes'?: Array<AccessProfileApprovalScheme> | null;
}
/**
 *
 * @export
 * @interface RequestabilityForRole
 */
export interface RequestabilityForRole {
    /**
     * Whether the requester of the containing object must provide comments justifying the request
     * @type {boolean}
     * @memberof RequestabilityForRole
     */
    'commentsRequired'?: boolean | null;
    /**
     * Whether an approver must provide comments when denying the request
     * @type {boolean}
     * @memberof RequestabilityForRole
     */
    'denialCommentsRequired'?: boolean | null;
    /**
     * List describing the steps in approving the request
     * @type {Array<ApprovalSchemeForRole>}
     * @memberof RequestabilityForRole
     */
    'approvalSchemes'?: Array<ApprovalSchemeForRole>;
}
/**
 *
 * @export
 * @interface RequestableObject
 */
export interface RequestableObject {
    /**
     * Id of the requestable object itself
     * @type {string}
     * @memberof RequestableObject
     */
    'id'?: string;
    /**
     * Human-readable display name of the requestable object
     * @type {string}
     * @memberof RequestableObject
     */
    'name'?: string;
    /**
     * The time when the requestable object was created
     * @type {string}
     * @memberof RequestableObject
     */
    'created'?: string;
    /**
     * The time when the requestable object was last modified
     * @type {string}
     * @memberof RequestableObject
     */
    'modified'?: string | null;
    /**
     * Description of the requestable object.
     * @type {string}
     * @memberof RequestableObject
     */
    'description'?: string | null;
    /**
     *
     * @type {RequestableObjectType}
     * @memberof RequestableObject
     */
    'type'?: RequestableObjectType;
    /**
     *
     * @type {RequestableObjectRequestStatus & object}
     * @memberof RequestableObject
     */
    'requestStatus'?: RequestableObjectRequestStatus & object;
    /**
     * If *requestStatus* is *PENDING*, indicates the id of the associated account activity.
     * @type {string}
     * @memberof RequestableObject
     */
    'identityRequestId'?: string | null;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmail}
     * @memberof RequestableObject
     */
    'ownerRef'?: IdentityReferenceWithNameAndEmail | null;
    /**
     * Whether the requester must provide comments when requesting the object.
     * @type {boolean}
     * @memberof RequestableObject
     */
    'requestCommentsRequired'?: boolean;
}
/**
 *
 * @export
 * @interface RequestableObjectReference
 */
export interface RequestableObjectReference {
    /**
     * Id of the object.
     * @type {string}
     * @memberof RequestableObjectReference
     */
    'id'?: string;
    /**
     * Name of the object.
     * @type {string}
     * @memberof RequestableObjectReference
     */
    'name'?: string;
    /**
     * Description of the object.
     * @type {string}
     * @memberof RequestableObjectReference
     */
    'description'?: string;
    /**
     * Type of the object.
     * @type {string}
     * @memberof RequestableObjectReference
     */
    'type'?: RequestableObjectReferenceTypeEnum;
}
export declare const RequestableObjectReferenceTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type RequestableObjectReferenceTypeEnum = typeof RequestableObjectReferenceTypeEnum[keyof typeof RequestableObjectReferenceTypeEnum];
/**
 * Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results.
 * @export
 * @enum {string}
 */
export declare const RequestableObjectRequestStatus: {
    readonly Available: "AVAILABLE";
    readonly Pending: "PENDING";
    readonly Assigned: "ASSIGNED";
    readonly Null: "null";
};
export type RequestableObjectRequestStatus = typeof RequestableObjectRequestStatus[keyof typeof RequestableObjectRequestStatus];
/**
 * The currently supported requestable object types.
 * @export
 * @enum {string}
 */
export declare const RequestableObjectType: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type RequestableObjectType = typeof RequestableObjectType[keyof typeof RequestableObjectType];
/**
 *
 * @export
 * @interface RequestedItemStatus
 */
export interface RequestedItemStatus {
    /**
     * Human-readable display name of the item being requested.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'name'?: string | null;
    /**
     * Type of requested object.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'type'?: RequestedItemStatusTypeEnum;
    /**
     *
     * @type {RequestedItemStatusCancelledRequestDetails}
     * @memberof RequestedItemStatus
     */
    'cancelledRequestDetails'?: RequestedItemStatusCancelledRequestDetails;
    /**
     * List of list of localized error messages, if any, encountered during the approval/provisioning process.
     * @type {Array<Array<ErrorMessageDto>>}
     * @memberof RequestedItemStatus
     */
    'errorMessages'?: Array<Array<ErrorMessageDto>> | null;
    /**
     *
     * @type {RequestedItemStatusRequestState}
     * @memberof RequestedItemStatus
     */
    'state'?: RequestedItemStatusRequestState;
    /**
     * Approval details for each item.
     * @type {Array<ApprovalStatusDto>}
     * @memberof RequestedItemStatus
     */
    'approvalDetails'?: Array<ApprovalStatusDto>;
    /**
     * Manual work items created for provisioning the item.
     * @type {Array<ManualWorkItemDetails>}
     * @memberof RequestedItemStatus
     */
    'manualWorkItemDetails'?: Array<ManualWorkItemDetails> | null;
    /**
     * Id of associated account activity item.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'accountActivityItemId'?: string;
    /**
     *
     * @type {AccessRequestType}
     * @memberof RequestedItemStatus
     */
    'requestType'?: AccessRequestType | null;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'modified'?: string | null;
    /**
     * When the request was created.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'created'?: string;
    /**
     *
     * @type {AccessItemRequester}
     * @memberof RequestedItemStatus
     */
    'requester'?: AccessItemRequester;
    /**
     *
     * @type {RequestedItemStatusRequestedFor}
     * @memberof RequestedItemStatus
     */
    'requestedFor'?: RequestedItemStatusRequestedFor;
    /**
     *
     * @type {RequestedItemStatusRequesterComment}
     * @memberof RequestedItemStatus
     */
    'requesterComment'?: RequestedItemStatusRequesterComment;
    /**
     *
     * @type {RequestedItemStatusSodViolationContext}
     * @memberof RequestedItemStatus
     */
    'sodViolationContext'?: RequestedItemStatusSodViolationContext;
    /**
     *
     * @type {RequestedItemStatusProvisioningDetails}
     * @memberof RequestedItemStatus
     */
    'provisioningDetails'?: RequestedItemStatusProvisioningDetails;
    /**
     *
     * @type {RequestedItemStatusPreApprovalTriggerDetails}
     * @memberof RequestedItemStatus
     */
    'preApprovalTriggerDetails'?: RequestedItemStatusPreApprovalTriggerDetails;
    /**
     * A list of Phases that the Access Request has gone through in order, to help determine the status of the request.
     * @type {Array<AccessRequestPhases>}
     * @memberof RequestedItemStatus
     */
    'accessRequestPhases'?: Array<AccessRequestPhases> | null;
    /**
     * Description associated to the requested object.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'description'?: string | null;
    /**
     * When the role access is scheduled for removal.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'removeDate'?: string | null;
    /**
     * True if the request can be canceled.
     * @type {boolean}
     * @memberof RequestedItemStatus
     */
    'cancelable'?: boolean;
    /**
     * This is the account activity id.
     * @type {string}
     * @memberof RequestedItemStatus
     */
    'accessRequestId'?: string;
    /**
     * Arbitrary key-value pairs, if any were included in the corresponding access request
     * @type {{ [key: string]: string; }}
     * @memberof RequestedItemStatus
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
}
export declare const RequestedItemStatusTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
    readonly Null: "null";
};
export type RequestedItemStatusTypeEnum = typeof RequestedItemStatusTypeEnum[keyof typeof RequestedItemStatusTypeEnum];
/**
 *
 * @export
 * @interface RequestedItemStatusCancelledRequestDetails
 */
export interface RequestedItemStatusCancelledRequestDetails {
    /**
     * Comment made by the owner when cancelling the associated request.
     * @type {string}
     * @memberof RequestedItemStatusCancelledRequestDetails
     */
    'comment'?: string;
    /**
     *
     * @type {OwnerDto}
     * @memberof RequestedItemStatusCancelledRequestDetails
     */
    'owner'?: OwnerDto;
    /**
     * Date comment was added by the owner when cancelling the associated request.
     * @type {string}
     * @memberof RequestedItemStatusCancelledRequestDetails
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface RequestedItemStatusPreApprovalTriggerDetails
 */
export interface RequestedItemStatusPreApprovalTriggerDetails {
    /**
     * Comment left for the pre-approval decision
     * @type {string}
     * @memberof RequestedItemStatusPreApprovalTriggerDetails
     */
    'comment'?: string;
    /**
     * The reviewer of the pre-approval decision
     * @type {string}
     * @memberof RequestedItemStatusPreApprovalTriggerDetails
     */
    'reviewer'?: string;
    /**
     * The decision of the pre-approval trigger
     * @type {string}
     * @memberof RequestedItemStatusPreApprovalTriggerDetails
     */
    'decision'?: RequestedItemStatusPreApprovalTriggerDetailsDecisionEnum;
}
export declare const RequestedItemStatusPreApprovalTriggerDetailsDecisionEnum: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type RequestedItemStatusPreApprovalTriggerDetailsDecisionEnum = typeof RequestedItemStatusPreApprovalTriggerDetailsDecisionEnum[keyof typeof RequestedItemStatusPreApprovalTriggerDetailsDecisionEnum];
/**
 *
 * @export
 * @interface RequestedItemStatusProvisioningDetails
 */
export interface RequestedItemStatusProvisioningDetails {
    /**
     * Ordered CSV of sub phase references to objects that contain more information about provisioning. For example, this can contain \"manualWorkItemDetails\" which indicate that there is further information in that object for this phase.
     * @type {string}
     * @memberof RequestedItemStatusProvisioningDetails
     */
    'orderedSubPhaseReferences'?: string;
}
/**
 * Indicates the state of an access request: * EXECUTING: The request is executing, which indicates the system is doing some processing. * REQUEST_COMPLETED: Indicates the request  has been completed. * CANCELLED: The request was cancelled with no user input. * TERMINATED: The request has been terminated before it was able to complete. * PROVISIONING_VERIFICATION_PENDING: The request has finished any approval steps and provisioning is waiting to be verified. * REJECTED: The request was rejected. * PROVISIONING_FAILED: The request has failed to complete. * NOT_ALL_ITEMS_PROVISIONED: One or more of the requested items failed to complete, but there were one or more  successes. * ERROR: An error occurred during request processing.
 * @export
 * @enum {string}
 */
export declare const RequestedItemStatusRequestState: {
    readonly Executing: "EXECUTING";
    readonly RequestCompleted: "REQUEST_COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Terminated: "TERMINATED";
    readonly ProvisioningVerificationPending: "PROVISIONING_VERIFICATION_PENDING";
    readonly Rejected: "REJECTED";
    readonly ProvisioningFailed: "PROVISIONING_FAILED";
    readonly NotAllItemsProvisioned: "NOT_ALL_ITEMS_PROVISIONED";
    readonly Error: "ERROR";
};
export type RequestedItemStatusRequestState = typeof RequestedItemStatusRequestState[keyof typeof RequestedItemStatusRequestState];
/**
 * Identity access was requested for.
 * @export
 * @interface RequestedItemStatusRequestedFor
 */
export interface RequestedItemStatusRequestedFor {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof RequestedItemStatusRequestedFor
     */
    'type'?: RequestedItemStatusRequestedForTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof RequestedItemStatusRequestedFor
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof RequestedItemStatusRequestedFor
     */
    'name'?: string;
}
export declare const RequestedItemStatusRequestedForTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type RequestedItemStatusRequestedForTypeEnum = typeof RequestedItemStatusRequestedForTypeEnum[keyof typeof RequestedItemStatusRequestedForTypeEnum];
/**
 *
 * @export
 * @interface RequestedItemStatusRequesterComment
 */
export interface RequestedItemStatusRequesterComment {
    /**
     * Comment content.
     * @type {string}
     * @memberof RequestedItemStatusRequesterComment
     */
    'comment'?: string | null;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof RequestedItemStatusRequesterComment
     */
    'created'?: string;
    /**
     *
     * @type {CommentDtoAuthor}
     * @memberof RequestedItemStatusRequesterComment
     */
    'author'?: CommentDtoAuthor;
}
/**
 *
 * @export
 * @interface RequestedItemStatusSodViolationContext
 */
export interface RequestedItemStatusSodViolationContext {
    /**
     * The status of SOD violation check
     * @type {string}
     * @memberof RequestedItemStatusSodViolationContext
     */
    'state'?: RequestedItemStatusSodViolationContextStateEnum;
    /**
     * The id of the Violation check event
     * @type {string}
     * @memberof RequestedItemStatusSodViolationContext
     */
    'uuid'?: string | null;
    /**
     *
     * @type {SodViolationCheckResult}
     * @memberof RequestedItemStatusSodViolationContext
     */
    'violationCheckResult'?: SodViolationCheckResult;
}
export declare const RequestedItemStatusSodViolationContextStateEnum: {
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
    readonly Null: "null";
};
export type RequestedItemStatusSodViolationContextStateEnum = typeof RequestedItemStatusSodViolationContextStateEnum[keyof typeof RequestedItemStatusSodViolationContextStateEnum];
/**
 *
 * @export
 * @interface ReviewDecision
 */
export interface ReviewDecision {
    /**
     * The id of the review decision
     * @type {string}
     * @memberof ReviewDecision
     */
    'id': string;
    /**
     *
     * @type {CertificationDecision}
     * @memberof ReviewDecision
     */
    'decision': CertificationDecision;
    /**
     * The date at which a user\'s access should be taken away. Should only be set for `REVOKE` decisions.
     * @type {string}
     * @memberof ReviewDecision
     */
    'proposedEndDate'?: string;
    /**
     * Indicates whether decision should be marked as part of a larger bulk decision
     * @type {boolean}
     * @memberof ReviewDecision
     */
    'bulk': boolean;
    /**
     *
     * @type {ReviewRecommendation}
     * @memberof ReviewDecision
     */
    'recommendation'?: ReviewRecommendation;
    /**
     * Comments recorded when the decision was made
     * @type {string}
     * @memberof ReviewDecision
     */
    'comments'?: string;
}
/**
 *
 * @export
 * @interface ReviewReassign
 */
export interface ReviewReassign {
    /**
     *
     * @type {Array<ReassignReference>}
     * @memberof ReviewReassign
     */
    'reassign': Array<ReassignReference>;
    /**
     * The ID of the identity to which the certification is reassigned
     * @type {string}
     * @memberof ReviewReassign
     */
    'reassignTo': string;
    /**
     * The reason comment for why the reassign was made
     * @type {string}
     * @memberof ReviewReassign
     */
    'reason': string;
}
/**
 *
 * @export
 * @interface ReviewRecommendation
 */
export interface ReviewRecommendation {
    /**
     * The recommendation from IAI at the time of the decision. This field will be null if no recommendation was made.
     * @type {string}
     * @memberof ReviewRecommendation
     */
    'recommendation'?: string | null;
    /**
     * A list of reasons for the recommendation.
     * @type {Array<string>}
     * @memberof ReviewRecommendation
     */
    'reasons'?: Array<string>;
    /**
     * The time at which the recommendation was recorded.
     * @type {string}
     * @memberof ReviewRecommendation
     */
    'timestamp'?: string;
}
/**
 *
 * @export
 * @interface ReviewableAccessProfile
 */
export interface ReviewableAccessProfile {
    /**
     * The id of the Access Profile
     * @type {string}
     * @memberof ReviewableAccessProfile
     */
    'id'?: string;
    /**
     * Name of the Access Profile
     * @type {string}
     * @memberof ReviewableAccessProfile
     */
    'name'?: string;
    /**
     * Information about the Access Profile
     * @type {string}
     * @memberof ReviewableAccessProfile
     */
    'description'?: string;
    /**
     * Indicates if the entitlement is a privileged entitlement
     * @type {boolean}
     * @memberof ReviewableAccessProfile
     */
    'privileged'?: boolean;
    /**
     * True if the entitlement is cloud governed
     * @type {boolean}
     * @memberof ReviewableAccessProfile
     */
    'cloudGoverned'?: boolean;
    /**
     * The date at which a user\'s access expires
     * @type {string}
     * @memberof ReviewableAccessProfile
     */
    'endDate'?: string | null;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmail}
     * @memberof ReviewableAccessProfile
     */
    'owner'?: IdentityReferenceWithNameAndEmail | null;
    /**
     * A list of entitlements associated with this Access Profile
     * @type {Array<ReviewableEntitlement>}
     * @memberof ReviewableAccessProfile
     */
    'entitlements'?: Array<ReviewableEntitlement>;
    /**
     * Date the Access Profile was created.
     * @type {string}
     * @memberof ReviewableAccessProfile
     */
    'created'?: string;
    /**
     * Date the Access Profile was last modified.
     * @type {string}
     * @memberof ReviewableAccessProfile
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface ReviewableEntitlement
 */
export interface ReviewableEntitlement {
    /**
     * The id for the entitlement
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'id'?: string;
    /**
     * The name of the entitlement
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'name'?: string;
    /**
     * Information about the entitlement
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'description'?: string | null;
    /**
     * Indicates if the entitlement is a privileged entitlement
     * @type {boolean}
     * @memberof ReviewableEntitlement
     */
    'privileged'?: boolean;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmail}
     * @memberof ReviewableEntitlement
     */
    'owner'?: IdentityReferenceWithNameAndEmail | null;
    /**
     * The name of the attribute on the source
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'attributeName'?: string;
    /**
     * The value of the attribute on the source
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'attributeValue'?: string;
    /**
     * The schema object type on the source used to represent the entitlement and its attributes
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'sourceSchemaObjectType'?: string;
    /**
     * The name of the source for which this entitlement belongs
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'sourceName'?: string;
    /**
     * The type of the source for which the entitlement belongs
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'sourceType'?: string;
    /**
     * The ID of the source for which the entitlement belongs
     * @type {string}
     * @memberof ReviewableEntitlement
     */
    'sourceId'?: string;
    /**
     * Indicates if the entitlement has permissions
     * @type {boolean}
     * @memberof ReviewableEntitlement
     */
    'hasPermissions'?: boolean;
    /**
     * Indicates if the entitlement is a representation of an account permission
     * @type {boolean}
     * @memberof ReviewableEntitlement
     */
    'isPermission'?: boolean;
    /**
     * Indicates whether the entitlement can be revoked
     * @type {boolean}
     * @memberof ReviewableEntitlement
     */
    'revocable'?: boolean;
    /**
     * True if the entitlement is cloud governed
     * @type {boolean}
     * @memberof ReviewableEntitlement
     */
    'cloudGoverned'?: boolean;
    /**
     * True if the entitlement has DAS data
     * @type {boolean}
     * @memberof ReviewableEntitlement
     */
    'containsDataAccess'?: boolean;
    /**
     *
     * @type {DataAccess}
     * @memberof ReviewableEntitlement
     */
    'dataAccess'?: DataAccess | null;
    /**
     *
     * @type {ReviewableEntitlementAccount}
     * @memberof ReviewableEntitlement
     */
    'account'?: ReviewableEntitlementAccount | null;
}
/**
 * Information about the status of the entitlement
 * @export
 * @interface ReviewableEntitlementAccount
 */
export interface ReviewableEntitlementAccount {
    /**
     * The native identity for this account
     * @type {string}
     * @memberof ReviewableEntitlementAccount
     */
    'nativeIdentity'?: string;
    /**
     * Indicates whether this account is currently disabled
     * @type {boolean}
     * @memberof ReviewableEntitlementAccount
     */
    'disabled'?: boolean;
    /**
     * Indicates whether this account is currently locked
     * @type {boolean}
     * @memberof ReviewableEntitlementAccount
     */
    'locked'?: boolean;
    /**
     *
     * @type {DtoType}
     * @memberof ReviewableEntitlementAccount
     */
    'type'?: DtoType;
    /**
     * The id associated with the account
     * @type {string}
     * @memberof ReviewableEntitlementAccount
     */
    'id'?: string | null;
    /**
     * The account name
     * @type {string}
     * @memberof ReviewableEntitlementAccount
     */
    'name'?: string | null;
    /**
     * When the account was created
     * @type {string}
     * @memberof ReviewableEntitlementAccount
     */
    'created'?: string | null;
    /**
     * When the account was last modified
     * @type {string}
     * @memberof ReviewableEntitlementAccount
     */
    'modified'?: string | null;
    /**
     *
     * @type {ActivityInsights}
     * @memberof ReviewableEntitlementAccount
     */
    'activityInsights'?: ActivityInsights;
}
/**
 *
 * @export
 * @interface ReviewableRole
 */
export interface ReviewableRole {
    /**
     * The id for the Role
     * @type {string}
     * @memberof ReviewableRole
     */
    'id'?: string;
    /**
     * The name of the Role
     * @type {string}
     * @memberof ReviewableRole
     */
    'name'?: string;
    /**
     * Information about the Role
     * @type {string}
     * @memberof ReviewableRole
     */
    'description'?: string;
    /**
     * Indicates if the entitlement is a privileged entitlement
     * @type {boolean}
     * @memberof ReviewableRole
     */
    'privileged'?: boolean;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmail}
     * @memberof ReviewableRole
     */
    'owner'?: IdentityReferenceWithNameAndEmail | null;
    /**
     * Indicates whether the Role can be revoked or requested
     * @type {boolean}
     * @memberof ReviewableRole
     */
    'revocable'?: boolean;
    /**
     * The date when a user\'s access expires.
     * @type {string}
     * @memberof ReviewableRole
     */
    'endDate'?: string;
    /**
     * The list of Access Profiles associated with this Role
     * @type {Array<ReviewableAccessProfile>}
     * @memberof ReviewableRole
     */
    'accessProfiles'?: Array<ReviewableAccessProfile>;
    /**
     * The list of entitlements associated with this Role
     * @type {Array<ReviewableEntitlement>}
     * @memberof ReviewableRole
     */
    'entitlements'?: Array<ReviewableEntitlement>;
}
/**
 *
 * @export
 * @interface Reviewer
 */
export interface Reviewer {
    /**
     * The id of the reviewer.
     * @type {string}
     * @memberof Reviewer
     */
    'id'?: string;
    /**
     * The name of the reviewer.
     * @type {string}
     * @memberof Reviewer
     */
    'name'?: string;
    /**
     * The email of the reviewing identity.
     * @type {string}
     * @memberof Reviewer
     */
    'email'?: string;
    /**
     * The type of the reviewing identity.
     * @type {string}
     * @memberof Reviewer
     */
    'type'?: ReviewerTypeEnum;
    /**
     * The created date of the reviewing identity.
     * @type {string}
     * @memberof Reviewer
     */
    'created'?: string | null;
    /**
     * The modified date of the reviewing identity.
     * @type {string}
     * @memberof Reviewer
     */
    'modified'?: string | null;
}
export declare const ReviewerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ReviewerTypeEnum = typeof ReviewerTypeEnum[keyof typeof ReviewerTypeEnum];
/**
 *
 * @export
 * @interface Revocability
 */
export interface Revocability {
    /**
     * List describing the steps in approving the revocation request
     * @type {Array<AccessProfileApprovalScheme>}
     * @memberof Revocability
     */
    'approvalSchemes'?: Array<AccessProfileApprovalScheme> | null;
}
/**
 *
 * @export
 * @interface RevocabilityForRole
 */
export interface RevocabilityForRole {
    /**
     * Whether the requester of the containing object must provide comments justifying the request
     * @type {boolean}
     * @memberof RevocabilityForRole
     */
    'commentsRequired'?: boolean | null;
    /**
     * Whether an approver must provide comments when denying the request
     * @type {boolean}
     * @memberof RevocabilityForRole
     */
    'denialCommentsRequired'?: boolean | null;
    /**
     * List describing the steps in approving the revocation request
     * @type {Array<ApprovalSchemeForRole>}
     * @memberof RevocabilityForRole
     */
    'approvalSchemes'?: Array<ApprovalSchemeForRole>;
}
/**
 *
 * @export
 * @interface RightPad
 */
export interface RightPad {
    /**
     * An integer value for the desired length of the final output string
     * @type {string}
     * @memberof RightPad
     */
    'length': string;
    /**
     * A string value representing the character that the incoming data should be padded with to get to the desired length   If not provided, the transform will default to a single space (\" \") character for padding
     * @type {string}
     * @memberof RightPad
     */
    'padding'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof RightPad
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof RightPad
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * A Role
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * The id of the Role. This field must be left null when creating an Role, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof Role
     */
    'id'?: string;
    /**
     * The human-readable display name of the Role
     * @type {string}
     * @memberof Role
     */
    'name': string;
    /**
     * Date the Role was created
     * @type {string}
     * @memberof Role
     */
    'created'?: string;
    /**
     * Date the Role was last modified.
     * @type {string}
     * @memberof Role
     */
    'modified'?: string;
    /**
     * A human-readable description of the Role
     * @type {string}
     * @memberof Role
     */
    'description'?: string | null;
    /**
     *
     * @type {OwnerReference}
     * @memberof Role
     */
    'owner': OwnerReference;
    /**
     *
     * @type {Array<AccessProfileRef>}
     * @memberof Role
     */
    'accessProfiles'?: Array<AccessProfileRef> | null;
    /**
     *
     * @type {Array<EntitlementRef>}
     * @memberof Role
     */
    'entitlements'?: Array<EntitlementRef>;
    /**
     *
     * @type {RoleMembershipSelector}
     * @memberof Role
     */
    'membership'?: RoleMembershipSelector | null;
    /**
     * This field is not directly modifiable and is generally expected to be *null*. In very rare instances, some Roles may have been created using membership selection criteria that are no longer fully supported. While these Roles will still work, they should be migrated to STANDARD or IDENTITY_LIST selection criteria. This field exists for informational purposes as an aid to such migration.
     * @type {{ [key: string]: any; }}
     * @memberof Role
     */
    'legacyMembershipInfo'?: {
        [key: string]: any;
    } | null;
    /**
     * Whether the Role is enabled or not.
     * @type {boolean}
     * @memberof Role
     */
    'enabled'?: boolean;
    /**
     * Whether the Role can be the target of access requests.
     * @type {boolean}
     * @memberof Role
     */
    'requestable'?: boolean;
    /**
     *
     * @type {RequestabilityForRole}
     * @memberof Role
     */
    'accessRequestConfig'?: RequestabilityForRole;
    /**
     *
     * @type {RevocabilityForRole}
     * @memberof Role
     */
    'revocationRequestConfig'?: RevocabilityForRole;
    /**
     * List of IDs of segments, if any, to which this Role is assigned.
     * @type {Array<string>}
     * @memberof Role
     */
    'segments'?: Array<string> | null;
    /**
     *
     * @type {boolean}
     * @memberof Role
     */
    'dimensional'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    'dimensionRefs'?: string | null;
}
/**
 * Type which indicates how a particular Identity obtained a particular Role
 * @export
 * @enum {string}
 */
export declare const RoleAssignmentSourceType: {
    readonly AccessRequest: "ACCESS_REQUEST";
    readonly RoleMembership: "ROLE_MEMBERSHIP";
};
export type RoleAssignmentSourceType = typeof RoleAssignmentSourceType[keyof typeof RoleAssignmentSourceType];
/**
 *
 * @export
 * @interface RoleBulkDeleteRequest
 */
export interface RoleBulkDeleteRequest {
    /**
     * List of IDs of Roles to be deleted.
     * @type {Array<string>}
     * @memberof RoleBulkDeleteRequest
     */
    'roleIds': Array<string>;
}
/**
 * Refers to a specific Identity attribute, Account attibute, or Entitlement used in Role membership criteria
 * @export
 * @interface RoleCriteriaKey
 */
export interface RoleCriteriaKey {
    /**
     *
     * @type {RoleCriteriaKeyType}
     * @memberof RoleCriteriaKey
     */
    'type': RoleCriteriaKeyType;
    /**
     * The name of the attribute or entitlement to which the associated criteria applies.
     * @type {string}
     * @memberof RoleCriteriaKey
     */
    'property': string;
    /**
     * ID of the Source from which an account attribute or entitlement is drawn. Required if type is ACCOUNT or ENTITLEMENT
     * @type {string}
     * @memberof RoleCriteriaKey
     */
    'sourceId'?: string | null;
}
/**
 * Indicates whether the associated criteria represents an expression on identity attributes, account attributes, or entitlements, respectively.
 * @export
 * @enum {string}
 */
export declare const RoleCriteriaKeyType: {
    readonly Identity: "IDENTITY";
    readonly Account: "ACCOUNT";
    readonly Entitlement: "ENTITLEMENT";
};
export type RoleCriteriaKeyType = typeof RoleCriteriaKeyType[keyof typeof RoleCriteriaKeyType];
/**
 * Defines STANDARD type Role membership
 * @export
 * @interface RoleCriteriaLevel1
 */
export interface RoleCriteriaLevel1 {
    /**
     *
     * @type {RoleCriteriaOperation}
     * @memberof RoleCriteriaLevel1
     */
    'operation'?: RoleCriteriaOperation;
    /**
     *
     * @type {RoleCriteriaKey}
     * @memberof RoleCriteriaLevel1
     */
    'key'?: RoleCriteriaKey | null;
    /**
     * String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof RoleCriteriaLevel1
     */
    'stringValue'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa.
     * @type {Array<RoleCriteriaLevel2>}
     * @memberof RoleCriteriaLevel1
     */
    'children'?: Array<RoleCriteriaLevel2> | null;
}
/**
 * Defines STANDARD type Role membership
 * @export
 * @interface RoleCriteriaLevel2
 */
export interface RoleCriteriaLevel2 {
    /**
     *
     * @type {RoleCriteriaOperation}
     * @memberof RoleCriteriaLevel2
     */
    'operation'?: RoleCriteriaOperation;
    /**
     *
     * @type {RoleCriteriaKey}
     * @memberof RoleCriteriaLevel2
     */
    'key'?: RoleCriteriaKey | null;
    /**
     * String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof RoleCriteriaLevel2
     */
    'stringValue'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa.
     * @type {Array<RoleCriteriaLevel3>}
     * @memberof RoleCriteriaLevel2
     */
    'children'?: Array<RoleCriteriaLevel3> | null;
}
/**
 * Defines STANDARD type Role membership
 * @export
 * @interface RoleCriteriaLevel3
 */
export interface RoleCriteriaLevel3 {
    /**
     *
     * @type {RoleCriteriaOperation}
     * @memberof RoleCriteriaLevel3
     */
    'operation'?: RoleCriteriaOperation;
    /**
     *
     * @type {RoleCriteriaKey}
     * @memberof RoleCriteriaLevel3
     */
    'key'?: RoleCriteriaKey | null;
    /**
     * String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof RoleCriteriaLevel3
     */
    'stringValue'?: string;
}
/**
 * An operation
 * @export
 * @enum {string}
 */
export declare const RoleCriteriaOperation: {
    readonly Equals: "EQUALS";
    readonly NotEquals: "NOT_EQUALS";
    readonly Contains: "CONTAINS";
    readonly StartsWith: "STARTS_WITH";
    readonly EndsWith: "ENDS_WITH";
    readonly And: "AND";
    readonly Or: "OR";
};
export type RoleCriteriaOperation = typeof RoleCriteriaOperation[keyof typeof RoleCriteriaOperation];
/**
 * Role
 * @export
 * @interface RoleDocument
 */
export interface RoleDocument {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof RoleDocument
     */
    'id': string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof RoleDocument
     */
    'name': string;
    /**
     *
     * @type {DocumentType}
     * @memberof RoleDocument
     */
    '_type': DocumentType;
    /**
     * Access item\'s description.
     * @type {string}
     * @memberof RoleDocument
     */
    'description'?: string;
    /**
     * ISO-8601 date-time referring to the time when the object was created.
     * @type {string}
     * @memberof RoleDocument
     */
    'created'?: string | null;
    /**
     * ISO-8601 date-time referring to the time when the object was last modified.
     * @type {string}
     * @memberof RoleDocument
     */
    'modified'?: string | null;
    /**
     * ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API.
     * @type {string}
     * @memberof RoleDocument
     */
    'synced'?: string | null;
    /**
     * Indicates whether the access item is currently enabled.
     * @type {boolean}
     * @memberof RoleDocument
     */
    'enabled'?: boolean;
    /**
     * Indicates whether the access item can be requested.
     * @type {boolean}
     * @memberof RoleDocument
     */
    'requestable'?: boolean;
    /**
     * Indicates whether comments are required for requests to access the item.
     * @type {boolean}
     * @memberof RoleDocument
     */
    'requestCommentsRequired'?: boolean;
    /**
     *
     * @type {BaseAccessAllOfOwner}
     * @memberof RoleDocument
     */
    'owner'?: BaseAccessAllOfOwner;
    /**
     * Access profiles included with the role.
     * @type {Array<BaseAccessProfile>}
     * @memberof RoleDocument
     */
    'accessProfiles'?: Array<BaseAccessProfile>;
    /**
     * Number of access profiles included with the role.
     * @type {number}
     * @memberof RoleDocument
     */
    'accessProfileCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof RoleDocument
     */
    'tags'?: Array<string>;
    /**
     * Segments with the role.
     * @type {Array<BaseSegment>}
     * @memberof RoleDocument
     */
    'segments'?: Array<BaseSegment>;
    /**
     * Number of segments with the role.
     * @type {number}
     * @memberof RoleDocument
     */
    'segmentCount'?: number;
    /**
     * Entitlements included with the role.
     * @type {Array<BaseEntitlement>}
     * @memberof RoleDocument
     */
    'entitlements'?: Array<BaseEntitlement>;
    /**
     * Number of entitlements included with the role.
     * @type {number}
     * @memberof RoleDocument
     */
    'entitlementCount'?: number;
}
/**
 *
 * @export
 * @interface RoleDocumentAllOf
 */
export interface RoleDocumentAllOf {
    /**
     * Access profiles included with the role.
     * @type {Array<BaseAccessProfile>}
     * @memberof RoleDocumentAllOf
     */
    'accessProfiles'?: Array<BaseAccessProfile>;
    /**
     * Number of access profiles included with the role.
     * @type {number}
     * @memberof RoleDocumentAllOf
     */
    'accessProfileCount'?: number;
    /**
     * Tags that have been applied to the object.
     * @type {Array<string>}
     * @memberof RoleDocumentAllOf
     */
    'tags'?: Array<string>;
    /**
     * Segments with the role.
     * @type {Array<BaseSegment>}
     * @memberof RoleDocumentAllOf
     */
    'segments'?: Array<BaseSegment>;
    /**
     * Number of segments with the role.
     * @type {number}
     * @memberof RoleDocumentAllOf
     */
    'segmentCount'?: number;
    /**
     * Entitlements included with the role.
     * @type {Array<BaseEntitlement>}
     * @memberof RoleDocumentAllOf
     */
    'entitlements'?: Array<BaseEntitlement>;
    /**
     * Number of entitlements included with the role.
     * @type {number}
     * @memberof RoleDocumentAllOf
     */
    'entitlementCount'?: number;
}
/**
 * A subset of the fields of an Identity which is a member of a Role.
 * @export
 * @interface RoleIdentity
 */
export interface RoleIdentity {
    /**
     * The ID of the Identity
     * @type {string}
     * @memberof RoleIdentity
     */
    'id'?: string;
    /**
     * The alias / username of the Identity
     * @type {string}
     * @memberof RoleIdentity
     */
    'aliasName'?: string;
    /**
     * The human-readable display name of the Identity
     * @type {string}
     * @memberof RoleIdentity
     */
    'name'?: string;
    /**
     * Email address of the Identity
     * @type {string}
     * @memberof RoleIdentity
     */
    'email'?: string;
    /**
     *
     * @type {RoleAssignmentSourceType}
     * @memberof RoleIdentity
     */
    'roleAssignmentSource'?: RoleAssignmentSourceType;
}
/**
 * A reference to an Identity in an IDENTITY_LIST role membership criteria.
 * @export
 * @interface RoleMembershipIdentity
 */
export interface RoleMembershipIdentity {
    /**
     *
     * @type {DtoType}
     * @memberof RoleMembershipIdentity
     */
    'type'?: DtoType;
    /**
     * Identity id
     * @type {string}
     * @memberof RoleMembershipIdentity
     */
    'id'?: string;
    /**
     * Human-readable display name of the Identity.
     * @type {string}
     * @memberof RoleMembershipIdentity
     */
    'name'?: string | null;
    /**
     * User name of the Identity
     * @type {string}
     * @memberof RoleMembershipIdentity
     */
    'aliasName'?: string | null;
}
/**
 * When present, specifies that the Role is to be granted to Identities which either satisfy specific criteria or which are members of a given list of Identities.
 * @export
 * @interface RoleMembershipSelector
 */
export interface RoleMembershipSelector {
    /**
     *
     * @type {RoleMembershipSelectorType}
     * @memberof RoleMembershipSelector
     */
    'type'?: RoleMembershipSelectorType;
    /**
     *
     * @type {RoleCriteriaLevel1}
     * @memberof RoleMembershipSelector
     */
    'criteria'?: RoleCriteriaLevel1 | null;
    /**
     * Defines role membership as being exclusive to the specified Identities, when type is IDENTITY_LIST.
     * @type {Array<RoleMembershipIdentity>}
     * @memberof RoleMembershipSelector
     */
    'identities'?: Array<RoleMembershipIdentity> | null;
}
/**
 * This enum characterizes the type of a Role\'s membership selector. Only the following two are fully supported:  STANDARD: Indicates that Role membership is defined in terms of a criteria expression  IDENTITY_LIST: Indicates that Role membership is conferred on the specific identities listed
 * @export
 * @enum {string}
 */
export declare const RoleMembershipSelectorType: {
    readonly Standard: "STANDARD";
    readonly IdentityList: "IDENTITY_LIST";
};
export type RoleMembershipSelectorType = typeof RoleMembershipSelectorType[keyof typeof RoleMembershipSelectorType];
/**
 * Role
 * @export
 * @interface RoleSummary
 */
export interface RoleSummary {
    /**
     * The unique ID of the referenced object.
     * @type {string}
     * @memberof RoleSummary
     */
    'id'?: string;
    /**
     * The human readable name of the referenced object.
     * @type {string}
     * @memberof RoleSummary
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof RoleSummary
     */
    'displayName'?: string;
    /**
     *
     * @type {DtoType}
     * @memberof RoleSummary
     */
    'type'?: DtoType;
    /**
     *
     * @type {string}
     * @memberof RoleSummary
     */
    'description'?: string | null;
    /**
     *
     * @type {DisplayReference}
     * @memberof RoleSummary
     */
    'owner'?: DisplayReference;
    /**
     *
     * @type {boolean}
     * @memberof RoleSummary
     */
    'disabled'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RoleSummary
     */
    'revocable'?: boolean;
}
/**
 *
 * @export
 * @interface RoleSummaryAllOf
 */
export interface RoleSummaryAllOf {
    /**
     *
     * @type {DisplayReference}
     * @memberof RoleSummaryAllOf
     */
    'owner'?: DisplayReference;
    /**
     *
     * @type {boolean}
     * @memberof RoleSummaryAllOf
     */
    'disabled'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RoleSummaryAllOf
     */
    'revocable'?: boolean;
}
/**
 * @type Rule
 * @export
 */
export type Rule = GenerateRandomString | GetReferenceIdentityAttribute | TransformRule;
/**
 *
 * @export
 * @interface SavedSearch
 */
export interface SavedSearch {
    /**
     * The saved search ID.
     * @type {string}
     * @memberof SavedSearch
     */
    'id'?: string;
    /**
     *
     * @type {TypedReference}
     * @memberof SavedSearch
     */
    'owner'?: TypedReference;
    /**
     * The ID of the identity that owns this saved search.
     * @type {string}
     * @memberof SavedSearch
     */
    'ownerId'?: string;
    /**
     * Whether this saved search is visible to anyone but the owner. This field will always be false as there is no way to set a saved search as public at this time.
     * @type {boolean}
     * @memberof SavedSearch
     */
    'public'?: boolean;
    /**
     * The name of the saved search.
     * @type {string}
     * @memberof SavedSearch
     */
    'name'?: string;
    /**
     * The description of the saved search.
     * @type {string}
     * @memberof SavedSearch
     */
    'description'?: string | null;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof SavedSearch
     */
    'created'?: string | null;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof SavedSearch
     */
    'modified'?: string | null;
    /**
     * The names of the Elasticsearch indices in which to search.
     * @type {Array<Index>}
     * @memberof SavedSearch
     */
    'indices': Array<Index>;
    /**
     * The columns to be returned (specifies the order in which they will be presented) for each document type.  The currently supported document types are: _accessprofile_, _accountactivity_, _account_, _aggregation_, _entitlement_, _event_, _identity_, and _role_.
     * @type {{ [key: string]: Array<Column>; }}
     * @memberof SavedSearch
     */
    'columns'?: {
        [key: string]: Array<Column>;
    };
    /**
     * The search query using Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL.
     * @type {string}
     * @memberof SavedSearch
     */
    'query': string;
    /**
     * The fields to be searched against in a multi-field query.
     * @type {Array<string>}
     * @memberof SavedSearch
     */
    'fields'?: Array<string> | null;
    /**
     * Sort by index. This takes precedence over the `sort` property.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof SavedSearch
     */
    'orderBy'?: {
        [key: string]: Array<string>;
    } | null;
    /**
     * The fields to be used to sort the search results.
     * @type {Array<string>}
     * @memberof SavedSearch
     */
    'sort'?: Array<string> | null;
    /**
     *
     * @type {SavedSearchDetailFilters}
     * @memberof SavedSearch
     */
    'filters'?: SavedSearchDetailFilters | null;
}
/**
 *
 * @export
 * @interface SavedSearchAllOf
 */
export interface SavedSearchAllOf {
    /**
     * The saved search ID.
     * @type {string}
     * @memberof SavedSearchAllOf
     */
    'id'?: string;
    /**
     *
     * @type {TypedReference}
     * @memberof SavedSearchAllOf
     */
    'owner'?: TypedReference;
    /**
     * The ID of the identity that owns this saved search.
     * @type {string}
     * @memberof SavedSearchAllOf
     */
    'ownerId'?: string;
    /**
     * Whether this saved search is visible to anyone but the owner. This field will always be false as there is no way to set a saved search as public at this time.
     * @type {boolean}
     * @memberof SavedSearchAllOf
     */
    'public'?: boolean;
}
/**
 *
 * @export
 * @interface SavedSearchDetail
 */
export interface SavedSearchDetail {
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof SavedSearchDetail
     */
    'created'?: string | null;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof SavedSearchDetail
     */
    'modified'?: string | null;
    /**
     * The names of the Elasticsearch indices in which to search.
     * @type {Array<Index>}
     * @memberof SavedSearchDetail
     */
    'indices': Array<Index>;
    /**
     * The columns to be returned (specifies the order in which they will be presented) for each document type.  The currently supported document types are: _accessprofile_, _accountactivity_, _account_, _aggregation_, _entitlement_, _event_, _identity_, and _role_.
     * @type {{ [key: string]: Array<Column>; }}
     * @memberof SavedSearchDetail
     */
    'columns'?: {
        [key: string]: Array<Column>;
    };
    /**
     * The search query using Elasticsearch [Query String Query](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-query-string-query.html#query-string) syntax from the Query DSL.
     * @type {string}
     * @memberof SavedSearchDetail
     */
    'query': string;
    /**
     * The fields to be searched against in a multi-field query.
     * @type {Array<string>}
     * @memberof SavedSearchDetail
     */
    'fields'?: Array<string> | null;
    /**
     * Sort by index. This takes precedence over the `sort` property.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof SavedSearchDetail
     */
    'orderBy'?: {
        [key: string]: Array<string>;
    } | null;
    /**
     * The fields to be used to sort the search results.
     * @type {Array<string>}
     * @memberof SavedSearchDetail
     */
    'sort'?: Array<string> | null;
    /**
     *
     * @type {SavedSearchDetailFilters}
     * @memberof SavedSearchDetail
     */
    'filters'?: SavedSearchDetailFilters | null;
}
/**
 *
 * @export
 * @interface SavedSearchDetailFilters
 */
export interface SavedSearchDetailFilters {
    /**
     *
     * @type {FilterType}
     * @memberof SavedSearchDetailFilters
     */
    'type'?: FilterType;
    /**
     *
     * @type {Range}
     * @memberof SavedSearchDetailFilters
     */
    'range'?: Range;
    /**
     * The terms to be filtered.
     * @type {Array<string>}
     * @memberof SavedSearchDetailFilters
     */
    'terms'?: Array<string>;
    /**
     * Indicates if the filter excludes results.
     * @type {boolean}
     * @memberof SavedSearchDetailFilters
     */
    'exclude'?: boolean;
}
/**
 *
 * @export
 * @interface SavedSearchName
 */
export interface SavedSearchName {
    /**
     * The name of the saved search.
     * @type {string}
     * @memberof SavedSearchName
     */
    'name'?: string;
    /**
     * The description of the saved search.
     * @type {string}
     * @memberof SavedSearchName
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * Determines the overall schedule cadence. In general, all time period fields smaller than the chosen type can be configured. For example, a DAILY schedule can have \'hours\' set, but not \'days\'; a WEEKLY schedule can have both \'hours\' and \'days\' set.
     * @type {string}
     * @memberof Schedule
     */
    'type': ScheduleTypeEnum;
    /**
     *
     * @type {ScheduleMonths}
     * @memberof Schedule
     */
    'months'?: ScheduleMonths;
    /**
     *
     * @type {ScheduleDays}
     * @memberof Schedule
     */
    'days'?: ScheduleDays;
    /**
     *
     * @type {ScheduleHours}
     * @memberof Schedule
     */
    'hours': ScheduleHours;
    /**
     * Specifies the time after which this schedule will no longer occur.
     * @type {string}
     * @memberof Schedule
     */
    'expiration'?: string;
    /**
     * The time zone to use when running the schedule. For instance, if the schedule is scheduled to run at 1AM, and this field is set to \"CST\", the schedule will run at 1AM CST.
     * @type {string}
     * @memberof Schedule
     */
    'timeZoneId'?: string;
}
export declare const ScheduleTypeEnum: {
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
    readonly Annually: "ANNUALLY";
    readonly Calendar: "CALENDAR";
};
export type ScheduleTypeEnum = typeof ScheduleTypeEnum[keyof typeof ScheduleTypeEnum];
/**
 * The schedule information.
 * @export
 * @interface Schedule1
 */
export interface Schedule1 {
    /**
     *
     * @type {ScheduleType}
     * @memberof Schedule1
     */
    'type': ScheduleType;
    /**
     *
     * @type {Schedule1Months}
     * @memberof Schedule1
     */
    'months'?: Schedule1Months;
    /**
     *
     * @type {Schedule1Days}
     * @memberof Schedule1
     */
    'days'?: Schedule1Days;
    /**
     *
     * @type {Schedule1Hours}
     * @memberof Schedule1
     */
    'hours': Schedule1Hours;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof Schedule1
     */
    'expiration'?: string | null;
    /**
     * The canonical TZ identifier the schedule will run in (ex. America/New_York).  If no timezone is specified, the org\'s default timezone is used.
     * @type {string}
     * @memberof Schedule1
     */
    'timeZoneId'?: string | null;
}
/**
 *
 * @export
 * @interface Schedule1Days
 */
export interface Schedule1Days {
    /**
     *
     * @type {SelectorType}
     * @memberof Schedule1Days
     */
    'type': SelectorType;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Schedule1Days
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Schedule1Days
     */
    'interval'?: number | null;
}
/**
 *
 * @export
 * @interface Schedule1Hours
 */
export interface Schedule1Hours {
    /**
     *
     * @type {SelectorType}
     * @memberof Schedule1Hours
     */
    'type': SelectorType;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Schedule1Hours
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Schedule1Hours
     */
    'interval'?: number | null;
}
/**
 *
 * @export
 * @interface Schedule1Months
 */
export interface Schedule1Months {
    /**
     *
     * @type {SelectorType}
     * @memberof Schedule1Months
     */
    'type': SelectorType;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Schedule1Months
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Schedule1Months
     */
    'interval'?: number | null;
}
/**
 * Specifies which day(s) a schedule is active for. This is required for all schedule types. The \"values\" field holds different data depending on the type of schedule: * WEEKLY: days of the week (1-7) * MONTHLY: days of the month (1-31, L, L-1...) * ANNUALLY: if the \"months\" field is also set: days of the month (1-31, L, L-1...); otherwise: ISO-8601 dates without year (\"--12-31\") * CALENDAR: ISO-8601 dates (\"2020-12-31\")  Note that CALENDAR only supports the LIST type, and ANNUALLY does not support the RANGE type when provided with ISO-8601 dates without year.  Examples:  On Sundays: * type LIST * values \"1\"  The second to last day of the month: * type LIST * values \"L-1\"  From the 20th to the last day of the month: * type RANGE * values \"20\", \"L\"  Every March 2nd: * type LIST * values \"--03-02\"  On March 2nd, 2021: * type: LIST * values \"2021-03-02\"
 * @export
 * @interface ScheduleDays
 */
export interface ScheduleDays {
    /**
     * Enum type to specify days value
     * @type {string}
     * @memberof ScheduleDays
     */
    'type': ScheduleDaysTypeEnum;
    /**
     * Values of the days based on the enum type mentioned above
     * @type {Array<string>}
     * @memberof ScheduleDays
     */
    'values': Array<string>;
    /**
     * Interval between the cert generations
     * @type {number}
     * @memberof ScheduleDays
     */
    'interval'?: number;
}
export declare const ScheduleDaysTypeEnum: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type ScheduleDaysTypeEnum = typeof ScheduleDaysTypeEnum[keyof typeof ScheduleDaysTypeEnum];
/**
 * Specifies which hour(s) a schedule is active for. Examples:  Every three hours starting from 8AM, inclusive: * type LIST * values \"8\" * interval 3  During business hours: * type RANGE * values \"9\", \"5\"  At 5AM, noon, and 5PM: * type LIST * values \"5\", \"12\", \"17\"
 * @export
 * @interface ScheduleHours
 */
export interface ScheduleHours {
    /**
     * Enum type to specify hours value
     * @type {string}
     * @memberof ScheduleHours
     */
    'type': ScheduleHoursTypeEnum;
    /**
     * Values of the days based on the enum type mentioned above
     * @type {Array<string>}
     * @memberof ScheduleHours
     */
    'values': Array<string>;
    /**
     * Interval between the cert generations
     * @type {number}
     * @memberof ScheduleHours
     */
    'interval'?: number;
}
export declare const ScheduleHoursTypeEnum: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type ScheduleHoursTypeEnum = typeof ScheduleHoursTypeEnum[keyof typeof ScheduleHoursTypeEnum];
/**
 * Specifies which months of a schedule are active. Only valid for ANNUALLY schedule types. Examples:  On February and March: * type LIST * values \"2\", \"3\"  Every 3 months, starting in January (quarterly): * type LIST * values \"1\" * interval 3  Every two months between July and December: * type RANGE * values \"7\", \"12\" * interval 2
 * @export
 * @interface ScheduleMonths
 */
export interface ScheduleMonths {
    /**
     * Enum type to specify months value
     * @type {string}
     * @memberof ScheduleMonths
     */
    'type': ScheduleMonthsTypeEnum;
    /**
     * Values of the months based on the enum type mentioned above
     * @type {Array<string>}
     * @memberof ScheduleMonths
     */
    'values': Array<string>;
    /**
     * Interval between the cert generations
     * @type {number}
     * @memberof ScheduleMonths
     */
    'interval'?: number;
}
export declare const ScheduleMonthsTypeEnum: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type ScheduleMonthsTypeEnum = typeof ScheduleMonthsTypeEnum[keyof typeof ScheduleMonthsTypeEnum];
/**
 * Enum representing the currently supported schedule types.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const ScheduleType: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
    readonly Calendar: "CALENDAR";
    readonly Annually: "ANNUALLY";
};
export type ScheduleType = typeof ScheduleType[keyof typeof ScheduleType];
/**
 * Attributes related to a scheduled trigger
 * @export
 * @interface ScheduledAttributes
 */
export interface ScheduledAttributes {
    /**
     * A valid CRON expression
     * @type {string}
     * @memberof ScheduledAttributes
     */
    'cronString'?: string;
    /**
     * Frequency of execution
     * @type {string}
     * @memberof ScheduledAttributes
     */
    'frequency': ScheduledAttributesFrequencyEnum;
    /**
     * Time zone identifier
     * @type {string}
     * @memberof ScheduledAttributes
     */
    'timeZone'?: string;
    /**
     * Scheduled days of the week for execution
     * @type {Array<string>}
     * @memberof ScheduledAttributes
     */
    'weeklyDays'?: Array<string>;
    /**
     * Scheduled execution times
     * @type {Array<string>}
     * @memberof ScheduledAttributes
     */
    'weeklyTimes'?: Array<string>;
}
export declare const ScheduledAttributesFrequencyEnum: {
    readonly Daily: "daily";
    readonly Weekly: "weekly";
    readonly Monthly: "monthly";
    readonly Yearly: "yearly";
    readonly CronSchedule: "cronSchedule";
};
export type ScheduledAttributesFrequencyEnum = typeof ScheduledAttributesFrequencyEnum[keyof typeof ScheduledAttributesFrequencyEnum];
/**
 *
 * @export
 * @interface ScheduledSearch
 */
export interface ScheduledSearch {
    /**
     * The scheduled search ID.
     * @type {string}
     * @memberof ScheduledSearch
     */
    'id': string;
    /**
     *
     * @type {ScheduledSearchAllOfOwner}
     * @memberof ScheduledSearch
     */
    'owner': ScheduledSearchAllOfOwner;
    /**
     * The ID of the scheduled search owner.  Please use the `id` in the `owner` object instead.
     * @type {string}
     * @memberof ScheduledSearch
     * @deprecated
     */
    'ownerId': string;
    /**
     * The name of the scheduled search.
     * @type {string}
     * @memberof ScheduledSearch
     */
    'name'?: string | null;
    /**
     * The description of the scheduled search.
     * @type {string}
     * @memberof ScheduledSearch
     */
    'description'?: string | null;
    /**
     * The ID of the saved search that will be executed.
     * @type {string}
     * @memberof ScheduledSearch
     */
    'savedSearchId': string;
    /**
     * The date the scheduled search was initially created.
     * @type {string}
     * @memberof ScheduledSearch
     */
    'created'?: string;
    /**
     * The last date the scheduled search was modified.
     * @type {string}
     * @memberof ScheduledSearch
     */
    'modified'?: string;
    /**
     *
     * @type {Schedule1}
     * @memberof ScheduledSearch
     */
    'schedule': Schedule1;
    /**
     * A list of identities that should receive the scheduled search report via email.
     * @type {Array<SearchScheduleRecipientsInner>}
     * @memberof ScheduledSearch
     */
    'recipients': Array<SearchScheduleRecipientsInner>;
    /**
     * Indicates if the scheduled search is enabled.
     * @type {boolean}
     * @memberof ScheduledSearch
     */
    'enabled'?: boolean;
    /**
     * Indicates if email generation should occur when search returns no results.
     * @type {boolean}
     * @memberof ScheduledSearch
     */
    'emailEmptyResults'?: boolean;
    /**
     * Indicates if the generated email should include the query and search results preview (which could include PII).
     * @type {boolean}
     * @memberof ScheduledSearch
     */
    'displayQueryDetails'?: boolean;
}
/**
 *
 * @export
 * @interface ScheduledSearchAllOf
 */
export interface ScheduledSearchAllOf {
    /**
     * The scheduled search ID.
     * @type {string}
     * @memberof ScheduledSearchAllOf
     */
    'id'?: string;
    /**
     *
     * @type {ScheduledSearchAllOfOwner}
     * @memberof ScheduledSearchAllOf
     */
    'owner'?: ScheduledSearchAllOfOwner;
    /**
     * The ID of the scheduled search owner.  Please use the `id` in the `owner` object instead.
     * @type {string}
     * @memberof ScheduledSearchAllOf
     * @deprecated
     */
    'ownerId'?: string;
}
/**
 * The owner of the scheduled search
 * @export
 * @interface ScheduledSearchAllOfOwner
 */
export interface ScheduledSearchAllOfOwner {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof ScheduledSearchAllOfOwner
     */
    'type': ScheduledSearchAllOfOwnerTypeEnum;
    /**
     * The ID of the referenced object
     * @type {string}
     * @memberof ScheduledSearchAllOfOwner
     */
    'id': string;
}
export declare const ScheduledSearchAllOfOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ScheduledSearchAllOfOwnerTypeEnum = typeof ScheduledSearchAllOfOwnerTypeEnum[keyof typeof ScheduledSearchAllOfOwnerTypeEnum];
/**
 *
 * @export
 * @interface ScheduledSearchName
 */
export interface ScheduledSearchName {
    /**
     * The name of the scheduled search.
     * @type {string}
     * @memberof ScheduledSearchName
     */
    'name'?: string | null;
    /**
     * The description of the scheduled search.
     * @type {string}
     * @memberof ScheduledSearchName
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * The id of the Schema.
     * @type {string}
     * @memberof Schema
     */
    'id'?: string;
    /**
     * The name of the Schema.
     * @type {string}
     * @memberof Schema
     */
    'name'?: string;
    /**
     * The name of the object type on the native system that the schema represents.
     * @type {string}
     * @memberof Schema
     */
    'nativeObjectType'?: string;
    /**
     * The name of the attribute used to calculate the unique identifier for an object in the schema.
     * @type {string}
     * @memberof Schema
     */
    'identityAttribute'?: string;
    /**
     * The name of the attribute used to calculate the display value for an object in the schema.
     * @type {string}
     * @memberof Schema
     */
    'displayAttribute'?: string;
    /**
     * The name of the attribute whose values represent other objects in a hierarchy. Only relevant to group schemas.
     * @type {string}
     * @memberof Schema
     */
    'hierarchyAttribute'?: string;
    /**
     * Flag indicating whether or not the include permissions with the object data when aggregating the schema.
     * @type {boolean}
     * @memberof Schema
     */
    'includePermissions'?: boolean;
    /**
     * Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure. * PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning. * ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM * ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM * ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM
     * @type {Array<string>}
     * @memberof Schema
     */
    'features'?: Array<SchemaFeaturesEnum>;
    /**
     * Holds any extra configuration data that the schema may require.
     * @type {object}
     * @memberof Schema
     */
    'configuration'?: object;
    /**
     * The attribute definitions which form the schema.
     * @type {Array<AttributeDefinition>}
     * @memberof Schema
     */
    'attributes'?: Array<AttributeDefinition>;
    /**
     * The date the Schema was created.
     * @type {string}
     * @memberof Schema
     */
    'created'?: string;
    /**
     * The date the Schema was last modified.
     * @type {string}
     * @memberof Schema
     */
    'modified'?: string;
}
export declare const SchemaFeaturesEnum: {
    readonly Authenticate: "AUTHENTICATE";
    readonly Composite: "COMPOSITE";
    readonly DirectPermissions: "DIRECT_PERMISSIONS";
    readonly DiscoverSchema: "DISCOVER_SCHEMA";
    readonly Enable: "ENABLE";
    readonly ManagerLookup: "MANAGER_LOOKUP";
    readonly NoRandomAccess: "NO_RANDOM_ACCESS";
    readonly Proxy: "PROXY";
    readonly Search: "SEARCH";
    readonly Template: "TEMPLATE";
    readonly Unlock: "UNLOCK";
    readonly UnstructuredTargets: "UNSTRUCTURED_TARGETS";
    readonly SharepointTarget: "SHAREPOINT_TARGET";
    readonly Provisioning: "PROVISIONING";
    readonly GroupProvisioning: "GROUP_PROVISIONING";
    readonly SyncProvisioning: "SYNC_PROVISIONING";
    readonly Password: "PASSWORD";
    readonly CurrentPassword: "CURRENT_PASSWORD";
    readonly AccountOnlyRequest: "ACCOUNT_ONLY_REQUEST";
    readonly AdditionalAccountRequest: "ADDITIONAL_ACCOUNT_REQUEST";
    readonly NoAggregation: "NO_AGGREGATION";
    readonly GroupsHaveMembers: "GROUPS_HAVE_MEMBERS";
    readonly NoPermissionsProvisioning: "NO_PERMISSIONS_PROVISIONING";
    readonly NoGroupPermissionsProvisioning: "NO_GROUP_PERMISSIONS_PROVISIONING";
    readonly NoUnstructuredTargetsProvisioning: "NO_UNSTRUCTURED_TARGETS_PROVISIONING";
    readonly NoDirectPermissionsProvisioning: "NO_DIRECT_PERMISSIONS_PROVISIONING";
    readonly PreferUuid: "PREFER_UUID";
    readonly ArmSecurityExtract: "ARM_SECURITY_EXTRACT";
    readonly ArmUtilizationExtract: "ARM_UTILIZATION_EXTRACT";
    readonly ArmChangelogExtract: "ARM_CHANGELOG_EXTRACT";
    readonly UsesUuid: "USES_UUID";
};
export type SchemaFeaturesEnum = typeof SchemaFeaturesEnum[keyof typeof SchemaFeaturesEnum];
/**
 *
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * The names of the Elasticsearch indices in which to search. If none are provided, then all indices will be searched.
     * @type {Array<Index>}
     * @memberof Search
     */
    'indices'?: Array<Index>;
    /**
     *
     * @type {QueryType}
     * @memberof Search
     */
    'queryType'?: QueryType;
    /**
     *
     * @type {string}
     * @memberof Search
     */
    'queryVersion'?: string;
    /**
     *
     * @type {Query}
     * @memberof Search
     */
    'query'?: Query;
    /**
     * The search query using the Elasticsearch [Query DSL](https://www.elastic.co/guide/en/elasticsearch/reference/7.10/query-dsl.html) syntax.
     * @type {object}
     * @memberof Search
     */
    'queryDsl'?: object;
    /**
     *
     * @type {TextQuery}
     * @memberof Search
     */
    'textQuery'?: TextQuery;
    /**
     *
     * @type {TypeAheadQuery}
     * @memberof Search
     */
    'typeAheadQuery'?: TypeAheadQuery;
    /**
     * Indicates whether nested objects from returned search results should be included.
     * @type {boolean}
     * @memberof Search
     */
    'includeNested'?: boolean;
    /**
     *
     * @type {QueryResultFilter}
     * @memberof Search
     */
    'queryResultFilter'?: QueryResultFilter;
    /**
     *
     * @type {AggregationType}
     * @memberof Search
     */
    'aggregationType'?: AggregationType;
    /**
     *
     * @type {string}
     * @memberof Search
     */
    'aggregationsVersion'?: string;
    /**
     * The aggregation search query using Elasticsearch [Aggregations](https://www.elastic.co/guide/en/elasticsearch/reference/5.2/search-aggregations.html) syntax.
     * @type {object}
     * @memberof Search
     */
    'aggregationsDsl'?: object;
    /**
     *
     * @type {SearchAggregationSpecification}
     * @memberof Search
     */
    'aggregations'?: SearchAggregationSpecification;
    /**
     * The fields to be used to sort the search results. Use + or - to specify the sort direction.
     * @type {Array<string>}
     * @memberof Search
     */
    'sort'?: Array<string>;
    /**
     * Used to begin the search window at the values specified. This parameter consists of the last values of the sorted fields in the current record set. This is used to expand the Elasticsearch limit of 10K records by shifting the 10K window to begin at this value. It is recommended that you always include the ID of the object in addition to any other fields on this parameter in order to ensure you don\'t get duplicate results while paging. For example, when searching for identities, if you are sorting by displayName you will also want to include ID, for example [\"displayName\", \"id\"].  If the last identity ID in the search result is 2c91808375d8e80a0175e1f88a575221 and the last displayName is \"John Doe\", then using that displayName and ID will start a new search after this identity. The searchAfter value will look like [\"John Doe\",\"2c91808375d8e80a0175e1f88a575221\"]
     * @type {Array<string>}
     * @memberof Search
     */
    'searchAfter'?: Array<string>;
    /**
     * The filters to be applied for each filtered field name.
     * @type {{ [key: string]: Filter; }}
     * @memberof Search
     */
    'filters'?: {
        [key: string]: Filter;
    };
}
/**
 *
 * @export
 * @interface SearchAggregationSpecification
 */
export interface SearchAggregationSpecification {
    /**
     *
     * @type {NestedAggregation}
     * @memberof SearchAggregationSpecification
     */
    'nested'?: NestedAggregation;
    /**
     *
     * @type {MetricAggregation}
     * @memberof SearchAggregationSpecification
     */
    'metric'?: MetricAggregation;
    /**
     *
     * @type {FilterAggregation}
     * @memberof SearchAggregationSpecification
     */
    'filter'?: FilterAggregation;
    /**
     *
     * @type {BucketAggregation}
     * @memberof SearchAggregationSpecification
     */
    'bucket'?: BucketAggregation;
    /**
     *
     * @type {SubSearchAggregationSpecification}
     * @memberof SearchAggregationSpecification
     */
    'subAggregation'?: SubSearchAggregationSpecification;
}
/**
 *
 * @export
 * @interface SearchAggregationSpecificationAllOf
 */
export interface SearchAggregationSpecificationAllOf {
    /**
     *
     * @type {SubSearchAggregationSpecification}
     * @memberof SearchAggregationSpecificationAllOf
     */
    'subAggregation'?: SubSearchAggregationSpecification;
}
/**
 *
 * @export
 * @interface SearchArguments
 */
export interface SearchArguments {
    /**
     * The ID of the scheduled search that triggered the saved search execution.
     * @type {string}
     * @memberof SearchArguments
     */
    'scheduleId'?: string;
    /**
     *
     * @type {SearchArgumentsOwner}
     * @memberof SearchArguments
     */
    'owner'?: SearchArgumentsOwner;
    /**
     * The email recipients of the scheduled search being tested.
     * @type {Array<TypedReference>}
     * @memberof SearchArguments
     */
    'recipients'?: Array<TypedReference>;
}
/**
 * The owner of the scheduled search being tested.
 * @export
 * @interface SearchArgumentsOwner
 */
export interface SearchArgumentsOwner {
    /**
     *
     * @type {DtoType}
     * @memberof SearchArgumentsOwner
     */
    'type': DtoType;
    /**
     * The id of the object.
     * @type {string}
     * @memberof SearchArgumentsOwner
     */
    'id': string;
}
/**
 *
 * @export
 * @interface SearchAttributeConfig
 */
export interface SearchAttributeConfig {
    /**
     * Name of the new attribute
     * @type {string}
     * @memberof SearchAttributeConfig
     */
    'name'?: string;
    /**
     * The display name of the new attribute
     * @type {string}
     * @memberof SearchAttributeConfig
     */
    'displayName'?: string;
    /**
     * Map of application id and their associated attribute.
     * @type {object}
     * @memberof SearchAttributeConfig
     */
    'applicationAttributes'?: object;
}
/**
 * @type SearchDocument
 * @export
 */
export type SearchDocument = AccessProfileDocument | AccountActivityDocument | EntitlementDocument | EventDocument | IdentityDocument | RoleDocument;
/**
 * Arguments for Search Export report (SEARCH_EXPORT)
 * @export
 * @interface SearchExportReportArguments
 */
export interface SearchExportReportArguments {
    /**
     * The names of the Elasticsearch indices in which to search. If none are provided, then all indices will be searched.
     * @type {Array<Index>}
     * @memberof SearchExportReportArguments
     */
    'indices'?: Array<Index>;
    /**
     * The filters to be applied for each filtered field name.
     * @type {{ [key: string]: Filter; }}
     * @memberof SearchExportReportArguments
     */
    'filters'?: {
        [key: string]: Filter;
    };
    /**
     *
     * @type {Query}
     * @memberof SearchExportReportArguments
     */
    'query': Query;
    /**
     * Indicates whether nested objects from returned search results should be included.
     * @type {boolean}
     * @memberof SearchExportReportArguments
     */
    'includeNested'?: boolean;
    /**
     * The fields to be used to sort the search results. Use + or - to specify the sort direction.
     * @type {Array<string>}
     * @memberof SearchExportReportArguments
     */
    'sort'?: Array<string>;
}
/**
 * Enum representing the currently supported filter aggregation types. Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const SearchFilterType: {
    readonly Term: "TERM";
};
export type SearchFilterType = typeof SearchFilterType[keyof typeof SearchFilterType];
/**
 *
 * @export
 * @interface SearchSchedule
 */
export interface SearchSchedule {
    /**
     * The ID of the saved search that will be executed.
     * @type {string}
     * @memberof SearchSchedule
     */
    'savedSearchId': string;
    /**
     * The date the scheduled search was initially created.
     * @type {string}
     * @memberof SearchSchedule
     */
    'created'?: string;
    /**
     * The last date the scheduled search was modified.
     * @type {string}
     * @memberof SearchSchedule
     */
    'modified'?: string;
    /**
     *
     * @type {Schedule1}
     * @memberof SearchSchedule
     */
    'schedule': Schedule1;
    /**
     * A list of identities that should receive the scheduled search report via email.
     * @type {Array<SearchScheduleRecipientsInner>}
     * @memberof SearchSchedule
     */
    'recipients': Array<SearchScheduleRecipientsInner>;
    /**
     * Indicates if the scheduled search is enabled.
     * @type {boolean}
     * @memberof SearchSchedule
     */
    'enabled'?: boolean;
    /**
     * Indicates if email generation should occur when search returns no results.
     * @type {boolean}
     * @memberof SearchSchedule
     */
    'emailEmptyResults'?: boolean;
    /**
     * Indicates if the generated email should include the query and search results preview (which could include PII).
     * @type {boolean}
     * @memberof SearchSchedule
     */
    'displayQueryDetails'?: boolean;
}
/**
 *
 * @export
 * @interface SearchScheduleRecipientsInner
 */
export interface SearchScheduleRecipientsInner {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof SearchScheduleRecipientsInner
     */
    'type': SearchScheduleRecipientsInnerTypeEnum;
    /**
     * The ID of the referenced object
     * @type {string}
     * @memberof SearchScheduleRecipientsInner
     */
    'id': string;
}
export declare const SearchScheduleRecipientsInnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SearchScheduleRecipientsInnerTypeEnum = typeof SearchScheduleRecipientsInnerTypeEnum[keyof typeof SearchScheduleRecipientsInnerTypeEnum];
/**
 *
 * @export
 * @interface SectionDetails
 */
export interface SectionDetails {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof SectionDetails
     */
    'name'?: string;
    /**
     * Label of the section
     * @type {string}
     * @memberof SectionDetails
     */
    'label'?: string;
    /**
     * List of FormItems. FormItems can be SectionDetails and/or FieldDetails
     * @type {Array<object>}
     * @memberof SectionDetails
     */
    'formItems'?: Array<object>;
}
/**
 *
 * @export
 * @interface SectionDetailsAllOf
 */
export interface SectionDetailsAllOf {
    /**
     * Label of the section
     * @type {string}
     * @memberof SectionDetailsAllOf
     */
    'label'?: string;
    /**
     * List of FormItems. FormItems can be SectionDetails and/or FieldDetails
     * @type {Array<object>}
     * @memberof SectionDetailsAllOf
     */
    'formItems'?: Array<object>;
}
/**
 *
 * @export
 * @interface Segment
 */
export interface Segment {
    /**
     * The segment\'s ID.
     * @type {string}
     * @memberof Segment
     */
    'id'?: string;
    /**
     * The segment\'s business name.
     * @type {string}
     * @memberof Segment
     */
    'name'?: string;
    /**
     * The time when the segment is created.
     * @type {string}
     * @memberof Segment
     */
    'created'?: string;
    /**
     * The time when the segment is modified.
     * @type {string}
     * @memberof Segment
     */
    'modified'?: string;
    /**
     * The segment\'s optional description.
     * @type {string}
     * @memberof Segment
     */
    'description'?: string;
    /**
     *
     * @type {OwnerReferenceSegments}
     * @memberof Segment
     */
    'owner'?: OwnerReferenceSegments | null;
    /**
     *
     * @type {SegmentVisibilityCriteria}
     * @memberof Segment
     */
    'visibilityCriteria'?: SegmentVisibilityCriteria;
    /**
     * This boolean indicates whether the segment is currently active. Inactive segments have no effect.
     * @type {boolean}
     * @memberof Segment
     */
    'active'?: boolean;
}
/**
 *
 * @export
 * @interface SegmentVisibilityCriteria
 */
export interface SegmentVisibilityCriteria {
    /**
     *
     * @type {Expression}
     * @memberof SegmentVisibilityCriteria
     */
    'expression'?: Expression;
}
/**
 *
 * @export
 * @interface Selector
 */
export interface Selector {
    /**
     *
     * @type {SelectorType}
     * @memberof Selector
     */
    'type': SelectorType;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Selector
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Selector
     */
    'interval'?: number | null;
}
/**
 * Enum representing the currently supported selector types.  LIST - the *values* array contains one or more distinct values.  RANGE - the *values* array contains two values: the start and end of the range, inclusive.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const SelectorType: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type SelectorType = typeof SelectorType[keyof typeof SelectorType];
/**
 *
 * @export
 * @interface SendTokenRequest
 */
export interface SendTokenRequest {
    /**
     * User alias from table spt_identity field named \'name\'
     * @type {string}
     * @memberof SendTokenRequest
     */
    'userAlias': string;
    /**
     * Token delivery type
     * @type {string}
     * @memberof SendTokenRequest
     */
    'deliveryType': SendTokenRequestDeliveryTypeEnum;
}
export declare const SendTokenRequestDeliveryTypeEnum: {
    readonly SmsPersonal: "SMS_PERSONAL";
    readonly VoicePersonal: "VOICE_PERSONAL";
    readonly SmsWork: "SMS_WORK";
    readonly VoiceWork: "VOICE_WORK";
    readonly EmailWork: "EMAIL_WORK";
    readonly EmailPersonal: "EMAIL_PERSONAL";
};
export type SendTokenRequestDeliveryTypeEnum = typeof SendTokenRequestDeliveryTypeEnum[keyof typeof SendTokenRequestDeliveryTypeEnum];
/**
 *
 * @export
 * @interface SendTokenResponse
 */
export interface SendTokenResponse {
    /**
     * The token request ID
     * @type {string}
     * @memberof SendTokenResponse
     */
    'requestId'?: string | null;
    /**
     * Status of sending token
     * @type {string}
     * @memberof SendTokenResponse
     */
    'status'?: SendTokenResponseStatusEnum;
    /**
     * Error messages from token send request
     * @type {string}
     * @memberof SendTokenResponse
     */
    'errorMessage'?: string | null;
}
export declare const SendTokenResponseStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type SendTokenResponseStatusEnum = typeof SendTokenResponseStatusEnum[keyof typeof SendTokenResponseStatusEnum];
/**
 *
 * @export
 * @interface ServiceDeskIntegrationDto
 */
export interface ServiceDeskIntegrationDto {
    /**
     * Unique identifier for the Service Desk integration
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     */
    'id'?: string;
    /**
     * Service Desk integration\'s name. The name must be unique.
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     */
    'name': string;
    /**
     * The date and time the Service Desk integration was created
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     */
    'created'?: string;
    /**
     * The date and time the Service Desk integration was last modified
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     */
    'modified'?: string;
    /**
     * Service Desk integration\'s description.
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     */
    'description': string;
    /**
     * Service Desk integration types:  - ServiceNowSDIM - ServiceNow
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     */
    'type': string;
    /**
     *
     * @type {OwnerDto}
     * @memberof ServiceDeskIntegrationDto
     */
    'ownerRef'?: OwnerDto;
    /**
     *
     * @type {SourceClusterDto}
     * @memberof ServiceDeskIntegrationDto
     */
    'clusterRef'?: SourceClusterDto;
    /**
     * Cluster ID for the Service Desk integration (replaced by clusterRef, retained for backward compatibility).
     * @type {string}
     * @memberof ServiceDeskIntegrationDto
     * @deprecated
     */
    'cluster'?: string | null;
    /**
     * Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility).
     * @type {Array<string>}
     * @memberof ServiceDeskIntegrationDto
     * @deprecated
     */
    'managedSources'?: Array<string>;
    /**
     *
     * @type {ProvisioningConfig}
     * @memberof ServiceDeskIntegrationDto
     */
    'provisioningConfig'?: ProvisioningConfig;
    /**
     * Service Desk integration\'s attributes. Validation constraints enforced by the implementation.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationDto
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {BeforeProvisioningRuleDto}
     * @memberof ServiceDeskIntegrationDto
     */
    'beforeProvisioningRule'?: BeforeProvisioningRuleDto;
}
/**
 * Service Desk integration\'s specification.
 * @export
 * @interface ServiceDeskIntegrationDtoAllOf
 */
export interface ServiceDeskIntegrationDtoAllOf {
    /**
     * Unique identifier for the Service Desk integration
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'id'?: string;
    /**
     * Service Desk integration\'s name. The name must be unique.
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'name': string;
    /**
     * The date and time the Service Desk integration was created
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'created'?: string;
    /**
     * The date and time the Service Desk integration was last modified
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'modified'?: string;
    /**
     * Service Desk integration\'s description.
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'description': string;
    /**
     * Service Desk integration types:  - ServiceNowSDIM - ServiceNow
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'type': string;
    /**
     *
     * @type {OwnerDto}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'ownerRef'?: OwnerDto;
    /**
     *
     * @type {SourceClusterDto}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'clusterRef'?: SourceClusterDto;
    /**
     * Cluster ID for the Service Desk integration (replaced by clusterRef, retained for backward compatibility).
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOf
     * @deprecated
     */
    'cluster'?: string | null;
    /**
     * Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility).
     * @type {Array<string>}
     * @memberof ServiceDeskIntegrationDtoAllOf
     * @deprecated
     */
    'managedSources'?: Array<string>;
    /**
     *
     * @type {ProvisioningConfig}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'provisioningConfig'?: ProvisioningConfig;
    /**
     * Service Desk integration\'s attributes. Validation constraints enforced by the implementation.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {BeforeProvisioningRuleDto}
     * @memberof ServiceDeskIntegrationDtoAllOf
     */
    'beforeProvisioningRule'?: BeforeProvisioningRuleDto;
}
/**
 *
 * @export
 * @interface ServiceDeskIntegrationTemplateDto
 */
export interface ServiceDeskIntegrationTemplateDto {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'modified'?: string;
    /**
     * The \'type\' property specifies the type of the Service Desk integration template.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'type': string;
    /**
     * The \'attributes\' property value is a map of attributes available for integrations using this Service Desk integration template.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {ProvisioningConfig}
     * @memberof ServiceDeskIntegrationTemplateDto
     */
    'provisioningConfig': ProvisioningConfig;
}
/**
 * This is the model for a Service Desk integration template, used to create and edit Service Desk Integrations.
 * @export
 * @interface ServiceDeskIntegrationTemplateDtoAllOf
 */
export interface ServiceDeskIntegrationTemplateDtoAllOf {
    /**
     * The \'type\' property specifies the type of the Service Desk integration template.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoAllOf
     */
    'type': string;
    /**
     * The \'attributes\' property value is a map of attributes available for integrations using this Service Desk integration template.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationTemplateDtoAllOf
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {ProvisioningConfig}
     * @memberof ServiceDeskIntegrationTemplateDtoAllOf
     */
    'provisioningConfig': ProvisioningConfig;
}
/**
 * This represents a Service Desk Integration template type.
 * @export
 * @interface ServiceDeskIntegrationTemplateType
 */
export interface ServiceDeskIntegrationTemplateType {
    /**
     * This is the name of the type.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateType
     */
    'name'?: string;
    /**
     * This is the type value for the type.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateType
     */
    'type': string;
    /**
     * This is the scriptName attribute value for the type.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateType
     */
    'scriptName': string;
}
/**
 * Source for Service Desk integration template.
 * @export
 * @interface ServiceDeskSource
 */
export interface ServiceDeskSource {
    /**
     * DTO type of source for service desk integration template.
     * @type {string}
     * @memberof ServiceDeskSource
     */
    'type'?: ServiceDeskSourceTypeEnum;
    /**
     * ID of source for service desk integration template.
     * @type {string}
     * @memberof ServiceDeskSource
     */
    'id'?: string;
    /**
     * Human-readable name of source for service desk integration template.
     * @type {string}
     * @memberof ServiceDeskSource
     */
    'name'?: string;
}
export declare const ServiceDeskSourceTypeEnum: {
    readonly Source: "SOURCE";
};
export type ServiceDeskSourceTypeEnum = typeof ServiceDeskSourceTypeEnum[keyof typeof ServiceDeskSourceTypeEnum];
/**
 * Represents the IdentityNow as Service Provider Configuration allowing customers to log into IDN via an Identity Provider
 * @export
 * @interface ServiceProviderConfiguration
 */
export interface ServiceProviderConfiguration {
    /**
     * This determines whether or not the SAML authentication flow is enabled for an org
     * @type {boolean}
     * @memberof ServiceProviderConfiguration
     */
    'enabled'?: boolean;
    /**
     * This allows basic login with the parameter prompt=true. This is often toggled on when debugging SAML authentication setup. When false, only org admins with MFA-enabled can bypass the IDP.
     * @type {boolean}
     * @memberof ServiceProviderConfiguration
     */
    'bypassIdp'?: boolean;
    /**
     * This indicates whether or not the SAML configuration is valid.
     * @type {boolean}
     * @memberof ServiceProviderConfiguration
     */
    'samlConfigurationValid'?: boolean;
    /**
     * A list of the abstract implementations of the Federation Protocol details. Typically, this will include on SpDetails object and one IdpDetails object used in tandem to define a SAML integration between a customer\'s identity provider and a customer\'s SailPoint instance (i.e., the service provider).
     * @type {Array<ServiceProviderConfigurationFederationProtocolDetailsInner>}
     * @memberof ServiceProviderConfiguration
     */
    'federationProtocolDetails'?: Array<ServiceProviderConfigurationFederationProtocolDetailsInner>;
}
/**
 * @type ServiceProviderConfigurationFederationProtocolDetailsInner
 * @export
 */
export type ServiceProviderConfigurationFederationProtocolDetailsInner = IdpDetails | SpDetails;
/**
 *
 * @export
 * @interface SessionConfiguration
 */
export interface SessionConfiguration {
    /**
     * The maximum time in minutes a session can be idle.
     * @type {number}
     * @memberof SessionConfiguration
     */
    'maxIdleTime'?: number;
    /**
     * Denotes if \'remember me\' is enabled.
     * @type {boolean}
     * @memberof SessionConfiguration
     */
    'rememberMe'?: boolean;
    /**
     * The maximum allowable session time in minutes.
     * @type {number}
     * @memberof SessionConfiguration
     */
    'maxSessionTime'?: number;
}
/**
 *
 * @export
 * @interface SetLifecycleState200Response
 */
export interface SetLifecycleState200Response {
    /**
     * ID of the IdentityRequest object that is generated when the workflow launches. To follow the IdentityRequest, you can provide this ID with a [Get Account Activity request](https://developer.sailpoint.com/docs/api/v3/get-account-activity/). The response will contain relevant information about the IdentityRequest, such as its status.
     * @type {string}
     * @memberof SetLifecycleState200Response
     */
    'accountActivityId'?: string;
}
/**
 *
 * @export
 * @interface SetLifecycleStateRequest
 */
export interface SetLifecycleStateRequest {
    /**
     * ID of the lifecycle state to set.
     * @type {string}
     * @memberof SetLifecycleStateRequest
     */
    'lifecycleStateId'?: string;
}
/**
 *
 * @export
 * @interface SlimCampaign
 */
export interface SlimCampaign {
    /**
     * Id of the campaign
     * @type {string}
     * @memberof SlimCampaign
     */
    'id'?: string;
    /**
     * The campaign name. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof SlimCampaign
     */
    'name': string;
    /**
     * The campaign description. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof SlimCampaign
     */
    'description': string;
    /**
     * The campaign\'s completion deadline.  This date must be in the future in order to activate the campaign.  If you try to activate a campaign with a deadline of today or in the past, you will receive a 400 error response.
     * @type {string}
     * @memberof SlimCampaign
     */
    'deadline'?: string;
    /**
     * The type of campaign. Could be extended in the future.
     * @type {string}
     * @memberof SlimCampaign
     */
    'type': SlimCampaignTypeEnum;
    /**
     * Enables email notification for this campaign
     * @type {boolean}
     * @memberof SlimCampaign
     */
    'emailNotificationEnabled'?: boolean;
    /**
     * Allows auto revoke for this campaign
     * @type {boolean}
     * @memberof SlimCampaign
     */
    'autoRevokeAllowed'?: boolean;
    /**
     * Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off then campaigns generated from this template will indicate false. The real value will then be returned if IAI is ever enabled for the org in the future.
     * @type {boolean}
     * @memberof SlimCampaign
     */
    'recommendationsEnabled'?: boolean;
    /**
     * The campaign\'s current status.
     * @type {string}
     * @memberof SlimCampaign
     */
    'status'?: SlimCampaignStatusEnum;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {string}
     * @memberof SlimCampaign
     */
    'correlatedStatus'?: SlimCampaignCorrelatedStatusEnum;
    /**
     * Created time of the campaign
     * @type {string}
     * @memberof SlimCampaign
     */
    'created'?: string;
    /**
     * The total number of certifications in this campaign.
     * @type {number}
     * @memberof SlimCampaign
     */
    'totalCertifications'?: number;
    /**
     * The number of completed certifications in this campaign.
     * @type {number}
     * @memberof SlimCampaign
     */
    'completedCertifications'?: number;
    /**
     * A list of errors and warnings that have accumulated.
     * @type {Array<CampaignAlert>}
     * @memberof SlimCampaign
     */
    'alerts'?: Array<CampaignAlert>;
}
export declare const SlimCampaignTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type SlimCampaignTypeEnum = typeof SlimCampaignTypeEnum[keyof typeof SlimCampaignTypeEnum];
export declare const SlimCampaignStatusEnum: {
    readonly Pending: "PENDING";
    readonly Staged: "STAGED";
    readonly Canceling: "CANCELING";
    readonly Activating: "ACTIVATING";
    readonly Active: "ACTIVE";
    readonly Completing: "COMPLETING";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
    readonly Archived: "ARCHIVED";
};
export type SlimCampaignStatusEnum = typeof SlimCampaignStatusEnum[keyof typeof SlimCampaignStatusEnum];
export declare const SlimCampaignCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type SlimCampaignCorrelatedStatusEnum = typeof SlimCampaignCorrelatedStatusEnum[keyof typeof SlimCampaignCorrelatedStatusEnum];
/**
 * Details of the Entitlement criteria
 * @export
 * @interface SodExemptCriteria
 */
export interface SodExemptCriteria {
    /**
     * If the entitlement already belonged to the user or not.
     * @type {boolean}
     * @memberof SodExemptCriteria
     */
    'existing'?: boolean;
    /**
     *
     * @type {DtoType}
     * @memberof SodExemptCriteria
     */
    'type'?: DtoType;
    /**
     * Entitlement ID
     * @type {string}
     * @memberof SodExemptCriteria
     */
    'id'?: string;
    /**
     * Entitlement name
     * @type {string}
     * @memberof SodExemptCriteria
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface SodPolicy
 */
export interface SodPolicy {
    /**
     * Policy id
     * @type {string}
     * @memberof SodPolicy
     */
    'id'?: string;
    /**
     * Policy Business Name
     * @type {string}
     * @memberof SodPolicy
     */
    'name'?: string;
    /**
     * The time when this SOD policy is created.
     * @type {string}
     * @memberof SodPolicy
     */
    'created'?: string;
    /**
     * The time when this SOD policy is modified.
     * @type {string}
     * @memberof SodPolicy
     */
    'modified'?: string;
    /**
     * Optional description of the SOD policy
     * @type {string}
     * @memberof SodPolicy
     */
    'description'?: string | null;
    /**
     *
     * @type {SodPolicyOwnerRef}
     * @memberof SodPolicy
     */
    'ownerRef'?: SodPolicyOwnerRef;
    /**
     * Optional External Policy Reference
     * @type {string}
     * @memberof SodPolicy
     */
    'externalPolicyReference'?: string | null;
    /**
     * Search query of the SOD policy
     * @type {string}
     * @memberof SodPolicy
     */
    'policyQuery'?: string;
    /**
     * Optional compensating controls(Mitigating Controls)
     * @type {string}
     * @memberof SodPolicy
     */
    'compensatingControls'?: string | null;
    /**
     * Optional correction advice
     * @type {string}
     * @memberof SodPolicy
     */
    'correctionAdvice'?: string | null;
    /**
     * whether the policy is enforced or not
     * @type {string}
     * @memberof SodPolicy
     */
    'state'?: SodPolicyStateEnum;
    /**
     * tags for this policy object
     * @type {Array<string>}
     * @memberof SodPolicy
     */
    'tags'?: Array<string>;
    /**
     * Policy\'s creator ID
     * @type {string}
     * @memberof SodPolicy
     */
    'creatorId'?: string;
    /**
     * Policy\'s modifier ID
     * @type {string}
     * @memberof SodPolicy
     */
    'modifierId'?: string | null;
    /**
     *
     * @type {ViolationOwnerAssignmentConfig}
     * @memberof SodPolicy
     */
    'violationOwnerAssignmentConfig'?: ViolationOwnerAssignmentConfig;
    /**
     * defines whether a policy has been scheduled or not
     * @type {boolean}
     * @memberof SodPolicy
     */
    'scheduled'?: boolean;
    /**
     * whether a policy is query based or conflicting access based
     * @type {string}
     * @memberof SodPolicy
     */
    'type'?: SodPolicyTypeEnum;
    /**
     *
     * @type {SodPolicyConflictingAccessCriteria}
     * @memberof SodPolicy
     */
    'conflictingAccessCriteria'?: SodPolicyConflictingAccessCriteria;
}
export declare const SodPolicyStateEnum: {
    readonly Enforced: "ENFORCED";
    readonly NotEnforced: "NOT_ENFORCED";
};
export type SodPolicyStateEnum = typeof SodPolicyStateEnum[keyof typeof SodPolicyStateEnum];
export declare const SodPolicyTypeEnum: {
    readonly General: "GENERAL";
    readonly ConflictingAccessBased: "CONFLICTING_ACCESS_BASED";
};
export type SodPolicyTypeEnum = typeof SodPolicyTypeEnum[keyof typeof SodPolicyTypeEnum];
/**
 *
 * @export
 * @interface SodPolicyConflictingAccessCriteria
 */
export interface SodPolicyConflictingAccessCriteria {
    /**
     *
     * @type {AccessCriteria}
     * @memberof SodPolicyConflictingAccessCriteria
     */
    'leftCriteria'?: AccessCriteria;
    /**
     *
     * @type {AccessCriteria}
     * @memberof SodPolicyConflictingAccessCriteria
     */
    'rightCriteria'?: AccessCriteria;
}
/**
 * SOD policy.
 * @export
 * @interface SodPolicyDto
 */
export interface SodPolicyDto {
    /**
     * SOD policy DTO type.
     * @type {string}
     * @memberof SodPolicyDto
     */
    'type'?: SodPolicyDtoTypeEnum;
    /**
     * SOD policy ID.
     * @type {string}
     * @memberof SodPolicyDto
     */
    'id'?: string;
    /**
     * SOD policy display name.
     * @type {string}
     * @memberof SodPolicyDto
     */
    'name'?: string;
}
export declare const SodPolicyDtoTypeEnum: {
    readonly SodPolicy: "SOD_POLICY";
};
export type SodPolicyDtoTypeEnum = typeof SodPolicyDtoTypeEnum[keyof typeof SodPolicyDtoTypeEnum];
/**
 * The owner of the SOD policy.
 * @export
 * @interface SodPolicyOwnerRef
 */
export interface SodPolicyOwnerRef {
    /**
     * Owner type.
     * @type {string}
     * @memberof SodPolicyOwnerRef
     */
    'type'?: SodPolicyOwnerRefTypeEnum;
    /**
     * Owner\'s ID.
     * @type {string}
     * @memberof SodPolicyOwnerRef
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof SodPolicyOwnerRef
     */
    'name'?: string;
}
export declare const SodPolicyOwnerRefTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type SodPolicyOwnerRefTypeEnum = typeof SodPolicyOwnerRefTypeEnum[keyof typeof SodPolicyOwnerRefTypeEnum];
/**
 *
 * @export
 * @interface SodPolicySchedule
 */
export interface SodPolicySchedule {
    /**
     * SOD Policy schedule name
     * @type {string}
     * @memberof SodPolicySchedule
     */
    'name'?: string;
    /**
     * The time when this SOD policy schedule is created.
     * @type {string}
     * @memberof SodPolicySchedule
     */
    'created'?: string;
    /**
     * The time when this SOD policy schedule is modified.
     * @type {string}
     * @memberof SodPolicySchedule
     */
    'modified'?: string;
    /**
     * SOD Policy schedule description
     * @type {string}
     * @memberof SodPolicySchedule
     */
    'description'?: string;
    /**
     *
     * @type {Schedule1}
     * @memberof SodPolicySchedule
     */
    'schedule'?: Schedule1;
    /**
     *
     * @type {Array<SodRecipient>}
     * @memberof SodPolicySchedule
     */
    'recipients'?: Array<SodRecipient>;
    /**
     * Indicates if empty results need to be emailed
     * @type {boolean}
     * @memberof SodPolicySchedule
     */
    'emailEmptyResults'?: boolean;
    /**
     * Policy\'s creator ID
     * @type {string}
     * @memberof SodPolicySchedule
     */
    'creatorId'?: string;
    /**
     * Policy\'s modifier ID
     * @type {string}
     * @memberof SodPolicySchedule
     */
    'modifierId'?: string;
}
/**
 * SOD policy recipient.
 * @export
 * @interface SodRecipient
 */
export interface SodRecipient {
    /**
     * SOD policy recipient DTO type.
     * @type {string}
     * @memberof SodRecipient
     */
    'type'?: SodRecipientTypeEnum;
    /**
     * SOD policy recipient\'s identity ID.
     * @type {string}
     * @memberof SodRecipient
     */
    'id'?: string;
    /**
     * SOD policy recipient\'s display name.
     * @type {string}
     * @memberof SodRecipient
     */
    'name'?: string;
}
export declare const SodRecipientTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SodRecipientTypeEnum = typeof SodRecipientTypeEnum[keyof typeof SodRecipientTypeEnum];
/**
 * SOD policy violation report result.
 * @export
 * @interface SodReportResultDto
 */
export interface SodReportResultDto {
    /**
     * SOD policy violation report result DTO type.
     * @type {string}
     * @memberof SodReportResultDto
     */
    'type'?: SodReportResultDtoTypeEnum;
    /**
     * SOD policy violation report result ID.
     * @type {string}
     * @memberof SodReportResultDto
     */
    'id'?: string;
    /**
     * Human-readable name of the SOD policy violation report result.
     * @type {string}
     * @memberof SodReportResultDto
     */
    'name'?: string;
}
export declare const SodReportResultDtoTypeEnum: {
    readonly ReportResult: "REPORT_RESULT";
};
export type SodReportResultDtoTypeEnum = typeof SodReportResultDtoTypeEnum[keyof typeof SodReportResultDtoTypeEnum];
/**
 * An object referencing an SOD violation check
 * @export
 * @interface SodViolationCheck
 */
export interface SodViolationCheck {
    /**
     * The id of the original request
     * @type {string}
     * @memberof SodViolationCheck
     */
    'requestId': string;
    /**
     * The date-time when this request was created.
     * @type {string}
     * @memberof SodViolationCheck
     */
    'created'?: string;
}
/**
 * The inner object representing the completed SOD Violation check
 * @export
 * @interface SodViolationCheckResult
 */
export interface SodViolationCheckResult {
    /**
     *
     * @type {ErrorMessageDto}
     * @memberof SodViolationCheckResult
     */
    'message'?: ErrorMessageDto;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.
     * @type {{ [key: string]: string; }}
     * @memberof SodViolationCheckResult
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
    /**
     *
     * @type {Array<SodViolationContext>}
     * @memberof SodViolationCheckResult
     */
    'violationContexts'?: Array<SodViolationContext> | null;
    /**
     * A list of the SOD policies that were violated.
     * @type {Array<SodPolicyDto>}
     * @memberof SodViolationCheckResult
     */
    'violatedPolicies'?: Array<SodPolicyDto> | null;
}
/**
 * The contextual information of the violated criteria
 * @export
 * @interface SodViolationContext
 */
export interface SodViolationContext {
    /**
     *
     * @type {SodPolicyDto}
     * @memberof SodViolationContext
     */
    'policy'?: SodPolicyDto;
    /**
     *
     * @type {SodViolationContextConflictingAccessCriteria}
     * @memberof SodViolationContext
     */
    'conflictingAccessCriteria'?: SodViolationContextConflictingAccessCriteria;
}
/**
 * An object referencing a completed SOD violation check
 * @export
 * @interface SodViolationContextCheckCompleted
 */
export interface SodViolationContextCheckCompleted {
    /**
     * The status of SOD violation check
     * @type {string}
     * @memberof SodViolationContextCheckCompleted
     */
    'state'?: SodViolationContextCheckCompletedStateEnum;
    /**
     * The id of the Violation check event
     * @type {string}
     * @memberof SodViolationContextCheckCompleted
     */
    'uuid'?: string | null;
    /**
     *
     * @type {SodViolationCheckResult}
     * @memberof SodViolationContextCheckCompleted
     */
    'violationCheckResult'?: SodViolationCheckResult;
}
export declare const SodViolationContextCheckCompletedStateEnum: {
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
    readonly Null: "null";
};
export type SodViolationContextCheckCompletedStateEnum = typeof SodViolationContextCheckCompletedStateEnum[keyof typeof SodViolationContextCheckCompletedStateEnum];
/**
 * The object which contains the left and right hand side of the entitlements that got violated according to the policy.
 * @export
 * @interface SodViolationContextConflictingAccessCriteria
 */
export interface SodViolationContextConflictingAccessCriteria {
    /**
     *
     * @type {SodViolationContextConflictingAccessCriteriaLeftCriteria}
     * @memberof SodViolationContextConflictingAccessCriteria
     */
    'leftCriteria'?: SodViolationContextConflictingAccessCriteriaLeftCriteria;
    /**
     *
     * @type {SodViolationContextConflictingAccessCriteriaLeftCriteria}
     * @memberof SodViolationContextConflictingAccessCriteria
     */
    'rightCriteria'?: SodViolationContextConflictingAccessCriteriaLeftCriteria;
}
/**
 *
 * @export
 * @interface SodViolationContextConflictingAccessCriteriaLeftCriteria
 */
export interface SodViolationContextConflictingAccessCriteriaLeftCriteria {
    /**
     *
     * @type {Array<SodExemptCriteria>}
     * @memberof SodViolationContextConflictingAccessCriteriaLeftCriteria
     */
    'criteriaList'?: Array<SodExemptCriteria>;
}
/**
 *
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * Source ID.
     * @type {string}
     * @memberof Source
     */
    'id'?: string;
    /**
     * Source\'s human-readable name.
     * @type {string}
     * @memberof Source
     */
    'name': string;
    /**
     * Source\'s human-readable description.
     * @type {string}
     * @memberof Source
     */
    'description'?: string;
    /**
     *
     * @type {SourceOwner}
     * @memberof Source
     */
    'owner': SourceOwner;
    /**
     *
     * @type {SourceCluster}
     * @memberof Source
     */
    'cluster'?: SourceCluster | null;
    /**
     *
     * @type {SourceAccountCorrelationConfig}
     * @memberof Source
     */
    'accountCorrelationConfig'?: SourceAccountCorrelationConfig | null;
    /**
     *
     * @type {SourceAccountCorrelationRule}
     * @memberof Source
     */
    'accountCorrelationRule'?: SourceAccountCorrelationRule | null;
    /**
     *
     * @type {SourceManagerCorrelationMapping}
     * @memberof Source
     */
    'managerCorrelationMapping'?: SourceManagerCorrelationMapping;
    /**
     *
     * @type {SourceManagerCorrelationRule}
     * @memberof Source
     */
    'managerCorrelationRule'?: SourceManagerCorrelationRule | null;
    /**
     *
     * @type {SourceBeforeProvisioningRule}
     * @memberof Source
     */
    'beforeProvisioningRule'?: SourceBeforeProvisioningRule | null;
    /**
     * List of references to schema objects.
     * @type {Array<SourceSchemasInner>}
     * @memberof Source
     */
    'schemas'?: Array<SourceSchemasInner>;
    /**
     * List of references to the associated PasswordPolicy objects.
     * @type {Array<SourcePasswordPoliciesInner>}
     * @memberof Source
     */
    'passwordPolicies'?: Array<SourcePasswordPoliciesInner> | null;
    /**
     * Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure. * PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning. * ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM * ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM * ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM
     * @type {Array<string>}
     * @memberof Source
     */
    'features'?: Array<SourceFeaturesEnum>;
    /**
     * Specifies the type of system being managed e.g. Active Directory, Workday, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`.
     * @type {string}
     * @memberof Source
     */
    'type'?: string;
    /**
     * Connector script name.
     * @type {string}
     * @memberof Source
     */
    'connector': string;
    /**
     * Fully qualified name of the Java class that implements the connector interface.
     * @type {string}
     * @memberof Source
     */
    'connectorClass'?: string;
    /**
     * Connector specific configuration. This configuration will differ from type to type.
     * @type {object}
     * @memberof Source
     */
    'connectorAttributes'?: object;
    /**
     * Number from 0 to 100 that specifies when to skip the delete phase.
     * @type {number}
     * @memberof Source
     */
    'deleteThreshold'?: number;
    /**
     * When this is true, it indicates that the source is referenced by an identity profile.
     * @type {boolean}
     * @memberof Source
     */
    'authoritative'?: boolean;
    /**
     *
     * @type {SourceManagementWorkgroup}
     * @memberof Source
     */
    'managementWorkgroup'?: SourceManagementWorkgroup | null;
    /**
     * When this is true, it indicates that the source is healthy.
     * @type {boolean}
     * @memberof Source
     */
    'healthy'?: boolean;
    /**
     * Status identifier that gives specific information about why a source is or isn\'t healthy.
     * @type {string}
     * @memberof Source
     */
    'status'?: SourceStatusEnum;
    /**
     * Timestamp that shows when a source health check was last performed.
     * @type {string}
     * @memberof Source
     */
    'since'?: string;
    /**
     * Connector ID
     * @type {string}
     * @memberof Source
     */
    'connectorId'?: string;
    /**
     * Name of the connector that was chosen during source creation.
     * @type {string}
     * @memberof Source
     */
    'connectorName'?: string;
    /**
     * Type of connection (direct or file).
     * @type {string}
     * @memberof Source
     */
    'connectionType'?: string;
    /**
     * Connector implementation ID.
     * @type {string}
     * @memberof Source
     */
    'connectorImplementationId'?: string;
    /**
     * Date-time when the source was created
     * @type {string}
     * @memberof Source
     */
    'created'?: string;
    /**
     * Date-time when the source was last modified.
     * @type {string}
     * @memberof Source
     */
    'modified'?: string;
    /**
     * If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.
     * @type {boolean}
     * @memberof Source
     */
    'credentialProviderEnabled'?: boolean;
    /**
     * Source category (e.g. null, CredentialProvider).
     * @type {string}
     * @memberof Source
     */
    'category'?: string | null;
}
export declare const SourceFeaturesEnum: {
    readonly Authenticate: "AUTHENTICATE";
    readonly Composite: "COMPOSITE";
    readonly DirectPermissions: "DIRECT_PERMISSIONS";
    readonly DiscoverSchema: "DISCOVER_SCHEMA";
    readonly Enable: "ENABLE";
    readonly ManagerLookup: "MANAGER_LOOKUP";
    readonly NoRandomAccess: "NO_RANDOM_ACCESS";
    readonly Proxy: "PROXY";
    readonly Search: "SEARCH";
    readonly Template: "TEMPLATE";
    readonly Unlock: "UNLOCK";
    readonly UnstructuredTargets: "UNSTRUCTURED_TARGETS";
    readonly SharepointTarget: "SHAREPOINT_TARGET";
    readonly Provisioning: "PROVISIONING";
    readonly GroupProvisioning: "GROUP_PROVISIONING";
    readonly SyncProvisioning: "SYNC_PROVISIONING";
    readonly Password: "PASSWORD";
    readonly CurrentPassword: "CURRENT_PASSWORD";
    readonly AccountOnlyRequest: "ACCOUNT_ONLY_REQUEST";
    readonly AdditionalAccountRequest: "ADDITIONAL_ACCOUNT_REQUEST";
    readonly NoAggregation: "NO_AGGREGATION";
    readonly GroupsHaveMembers: "GROUPS_HAVE_MEMBERS";
    readonly NoPermissionsProvisioning: "NO_PERMISSIONS_PROVISIONING";
    readonly NoGroupPermissionsProvisioning: "NO_GROUP_PERMISSIONS_PROVISIONING";
    readonly NoUnstructuredTargetsProvisioning: "NO_UNSTRUCTURED_TARGETS_PROVISIONING";
    readonly NoDirectPermissionsProvisioning: "NO_DIRECT_PERMISSIONS_PROVISIONING";
    readonly PreferUuid: "PREFER_UUID";
    readonly ArmSecurityExtract: "ARM_SECURITY_EXTRACT";
    readonly ArmUtilizationExtract: "ARM_UTILIZATION_EXTRACT";
    readonly ArmChangelogExtract: "ARM_CHANGELOG_EXTRACT";
    readonly UsesUuid: "USES_UUID";
};
export type SourceFeaturesEnum = typeof SourceFeaturesEnum[keyof typeof SourceFeaturesEnum];
export declare const SourceStatusEnum: {
    readonly ErrorAccountFileImport: "SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT";
    readonly ErrorCluster: "SOURCE_STATE_ERROR_CLUSTER";
    readonly ErrorSource: "SOURCE_STATE_ERROR_SOURCE";
    readonly ErrorVa: "SOURCE_STATE_ERROR_VA";
    readonly FailureCluster: "SOURCE_STATE_FAILURE_CLUSTER";
    readonly FailureSource: "SOURCE_STATE_FAILURE_SOURCE";
    readonly Healthy: "SOURCE_STATE_HEALTHY";
    readonly UncheckedCluster: "SOURCE_STATE_UNCHECKED_CLUSTER";
    readonly UncheckedClusterNoSources: "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES";
    readonly UncheckedSource: "SOURCE_STATE_UNCHECKED_SOURCE";
    readonly UncheckedSourceNoAccounts: "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS";
};
export type SourceStatusEnum = typeof SourceStatusEnum[keyof typeof SourceStatusEnum];
/**
 * Reference to account correlation config object.
 * @export
 * @interface SourceAccountCorrelationConfig
 */
export interface SourceAccountCorrelationConfig {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceAccountCorrelationConfig
     */
    'type'?: SourceAccountCorrelationConfigTypeEnum;
    /**
     * Account correlation config ID.
     * @type {string}
     * @memberof SourceAccountCorrelationConfig
     */
    'id'?: string;
    /**
     * Account correlation config\'s human-readable display name.
     * @type {string}
     * @memberof SourceAccountCorrelationConfig
     */
    'name'?: string;
}
export declare const SourceAccountCorrelationConfigTypeEnum: {
    readonly AccountCorrelationConfig: "ACCOUNT_CORRELATION_CONFIG";
};
export type SourceAccountCorrelationConfigTypeEnum = typeof SourceAccountCorrelationConfigTypeEnum[keyof typeof SourceAccountCorrelationConfigTypeEnum];
/**
 * Reference to a rule that can do COMPLEX correlation. Only use this rule when you can\'t use accountCorrelationConfig.
 * @export
 * @interface SourceAccountCorrelationRule
 */
export interface SourceAccountCorrelationRule {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceAccountCorrelationRule
     */
    'type'?: SourceAccountCorrelationRuleTypeEnum;
    /**
     * Rule ID.
     * @type {string}
     * @memberof SourceAccountCorrelationRule
     */
    'id'?: string;
    /**
     * Rule\'s human-readable display name.
     * @type {string}
     * @memberof SourceAccountCorrelationRule
     */
    'name'?: string;
}
export declare const SourceAccountCorrelationRuleTypeEnum: {
    readonly Rule: "RULE";
};
export type SourceAccountCorrelationRuleTypeEnum = typeof SourceAccountCorrelationRuleTypeEnum[keyof typeof SourceAccountCorrelationRuleTypeEnum];
/**
 * Rule that runs on the CCG and allows for customization of provisioning plans before the API calls the connector.
 * @export
 * @interface SourceBeforeProvisioningRule
 */
export interface SourceBeforeProvisioningRule {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceBeforeProvisioningRule
     */
    'type'?: SourceBeforeProvisioningRuleTypeEnum;
    /**
     * Rule ID.
     * @type {string}
     * @memberof SourceBeforeProvisioningRule
     */
    'id'?: string;
    /**
     * Rule\'s human-readable display name.
     * @type {string}
     * @memberof SourceBeforeProvisioningRule
     */
    'name'?: string;
}
export declare const SourceBeforeProvisioningRuleTypeEnum: {
    readonly Rule: "RULE";
};
export type SourceBeforeProvisioningRuleTypeEnum = typeof SourceBeforeProvisioningRuleTypeEnum[keyof typeof SourceBeforeProvisioningRuleTypeEnum];
/**
 * Reference to the source\'s associated cluster.
 * @export
 * @interface SourceCluster
 */
export interface SourceCluster {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceCluster
     */
    'type': SourceClusterTypeEnum;
    /**
     * Cluster ID.
     * @type {string}
     * @memberof SourceCluster
     */
    'id': string;
    /**
     * Cluster\'s human-readable display name.
     * @type {string}
     * @memberof SourceCluster
     */
    'name': string;
}
export declare const SourceClusterTypeEnum: {
    readonly Cluster: "CLUSTER";
};
export type SourceClusterTypeEnum = typeof SourceClusterTypeEnum[keyof typeof SourceClusterTypeEnum];
/**
 * Source cluster.
 * @export
 * @interface SourceClusterDto
 */
export interface SourceClusterDto {
    /**
     * Source cluster DTO type.
     * @type {string}
     * @memberof SourceClusterDto
     */
    'type'?: SourceClusterDtoTypeEnum;
    /**
     * Source cluster ID.
     * @type {string}
     * @memberof SourceClusterDto
     */
    'id'?: string;
    /**
     * Source cluster display name.
     * @type {string}
     * @memberof SourceClusterDto
     */
    'name'?: string;
}
export declare const SourceClusterDtoTypeEnum: {
    readonly Cluster: "CLUSTER";
};
export type SourceClusterDtoTypeEnum = typeof SourceClusterDtoTypeEnum[keyof typeof SourceClusterDtoTypeEnum];
/**
 * Dto for source health data
 * @export
 * @interface SourceHealthDto
 */
export interface SourceHealthDto {
    /**
     * the id of the Source
     * @type {string}
     * @memberof SourceHealthDto
     */
    'id'?: string;
    /**
     * Specifies the type of system being managed e.g. Active Directory, Workday, etc.. If you are creating a Delimited File source, you must set the `provisionasCsv` query parameter to `true`.
     * @type {string}
     * @memberof SourceHealthDto
     */
    'type'?: string;
    /**
     * the name of the source
     * @type {string}
     * @memberof SourceHealthDto
     */
    'name'?: string;
    /**
     * source\'s org
     * @type {string}
     * @memberof SourceHealthDto
     */
    'org'?: string;
    /**
     * Is the source authoritative
     * @type {boolean}
     * @memberof SourceHealthDto
     */
    'isAuthoritative'?: boolean;
    /**
     * Is the source in a cluster
     * @type {boolean}
     * @memberof SourceHealthDto
     */
    'isCluster'?: boolean;
    /**
     * source\'s hostname
     * @type {string}
     * @memberof SourceHealthDto
     */
    'hostname'?: string;
    /**
     * source\'s pod
     * @type {string}
     * @memberof SourceHealthDto
     */
    'pod'?: string;
    /**
     * The version of the iqService
     * @type {string}
     * @memberof SourceHealthDto
     */
    'iqServiceVersion'?: string;
    /**
     * connection test result
     * @type {string}
     * @memberof SourceHealthDto
     */
    'status'?: SourceHealthDtoStatusEnum;
}
export declare const SourceHealthDtoStatusEnum: {
    readonly ErrorCluster: "SOURCE_STATE_ERROR_CLUSTER";
    readonly ErrorSource: "SOURCE_STATE_ERROR_SOURCE";
    readonly ErrorVa: "SOURCE_STATE_ERROR_VA";
    readonly FailureCluster: "SOURCE_STATE_FAILURE_CLUSTER";
    readonly FailureSource: "SOURCE_STATE_FAILURE_SOURCE";
    readonly Healthy: "SOURCE_STATE_HEALTHY";
    readonly UncheckedCluster: "SOURCE_STATE_UNCHECKED_CLUSTER";
    readonly UncheckedClusterNoSources: "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES";
    readonly UncheckedSource: "SOURCE_STATE_UNCHECKED_SOURCE";
    readonly UncheckedSourceNoAccounts: "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS";
};
export type SourceHealthDtoStatusEnum = typeof SourceHealthDtoStatusEnum[keyof typeof SourceHealthDtoStatusEnum];
/**
 * Reference to management workgroup for the source.
 * @export
 * @interface SourceManagementWorkgroup
 */
export interface SourceManagementWorkgroup {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceManagementWorkgroup
     */
    'type'?: SourceManagementWorkgroupTypeEnum;
    /**
     * Management workgroup ID.
     * @type {string}
     * @memberof SourceManagementWorkgroup
     */
    'id'?: string;
    /**
     * Management workgroup\'s human-readable display name.
     * @type {string}
     * @memberof SourceManagementWorkgroup
     */
    'name'?: string;
}
export declare const SourceManagementWorkgroupTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type SourceManagementWorkgroupTypeEnum = typeof SourceManagementWorkgroupTypeEnum[keyof typeof SourceManagementWorkgroupTypeEnum];
/**
 *
 * @export
 * @interface SourceManagerCorrelationMapping
 */
export interface SourceManagerCorrelationMapping {
    /**
     * Name of the attribute to use for manager correlation. The value found on the account attribute will be used to lookup the manager\'s identity.
     * @type {string}
     * @memberof SourceManagerCorrelationMapping
     */
    'accountAttributeName'?: string;
    /**
     * Name of the identity attribute to search when trying to find a manager using the value from the accountAttribute.
     * @type {string}
     * @memberof SourceManagerCorrelationMapping
     */
    'identityAttributeName'?: string;
}
/**
 * Reference to the ManagerCorrelationRule. Only use this rule when a simple filter isn\'t sufficient.
 * @export
 * @interface SourceManagerCorrelationRule
 */
export interface SourceManagerCorrelationRule {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceManagerCorrelationRule
     */
    'type'?: SourceManagerCorrelationRuleTypeEnum;
    /**
     * Rule ID.
     * @type {string}
     * @memberof SourceManagerCorrelationRule
     */
    'id'?: string;
    /**
     * Rule\'s human-readable display name.
     * @type {string}
     * @memberof SourceManagerCorrelationRule
     */
    'name'?: string;
}
export declare const SourceManagerCorrelationRuleTypeEnum: {
    readonly Rule: "RULE";
};
export type SourceManagerCorrelationRuleTypeEnum = typeof SourceManagerCorrelationRuleTypeEnum[keyof typeof SourceManagerCorrelationRuleTypeEnum];
/**
 * Reference to identity object who owns the source.
 * @export
 * @interface SourceOwner
 */
export interface SourceOwner {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceOwner
     */
    'type'?: SourceOwnerTypeEnum;
    /**
     * Owner identity\'s ID.
     * @type {string}
     * @memberof SourceOwner
     */
    'id'?: string;
    /**
     * Owner identity\'s human-readable display name.
     * @type {string}
     * @memberof SourceOwner
     */
    'name'?: string;
}
export declare const SourceOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SourceOwnerTypeEnum = typeof SourceOwnerTypeEnum[keyof typeof SourceOwnerTypeEnum];
/**
 *
 * @export
 * @interface SourcePasswordPoliciesInner
 */
export interface SourcePasswordPoliciesInner {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourcePasswordPoliciesInner
     */
    'type'?: SourcePasswordPoliciesInnerTypeEnum;
    /**
     * Policy ID.
     * @type {string}
     * @memberof SourcePasswordPoliciesInner
     */
    'id'?: string;
    /**
     * Policy\'s human-readable display name.
     * @type {string}
     * @memberof SourcePasswordPoliciesInner
     */
    'name'?: string;
}
export declare const SourcePasswordPoliciesInnerTypeEnum: {
    readonly PasswordPolicy: "PASSWORD_POLICY";
};
export type SourcePasswordPoliciesInnerTypeEnum = typeof SourcePasswordPoliciesInnerTypeEnum[keyof typeof SourcePasswordPoliciesInnerTypeEnum];
/**
 *
 * @export
 * @interface SourceSchemasInner
 */
export interface SourceSchemasInner {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceSchemasInner
     */
    'type'?: SourceSchemasInnerTypeEnum;
    /**
     * Schema ID.
     * @type {string}
     * @memberof SourceSchemasInner
     */
    'id'?: string;
    /**
     * Schema\'s human-readable display name.
     * @type {string}
     * @memberof SourceSchemasInner
     */
    'name'?: string;
}
export declare const SourceSchemasInnerTypeEnum: {
    readonly ConnectorSchema: "CONNECTOR_SCHEMA";
};
export type SourceSchemasInnerTypeEnum = typeof SourceSchemasInnerTypeEnum[keyof typeof SourceSchemasInnerTypeEnum];
/**
 *
 * @export
 * @interface SourceUsage
 */
export interface SourceUsage {
    /**
     * The first day of the month for which activity is aggregated.
     * @type {string}
     * @memberof SourceUsage
     */
    'date'?: string;
    /**
     * The average number of days that accounts were active within this source, for the month.
     * @type {number}
     * @memberof SourceUsage
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface SourceUsageStatus
 */
export interface SourceUsageStatus {
    /**
     * Source Usage Status. Acceptable values are:   - COMPLETE       - This status means that an activity data source has been setup and usage insights are available for the source.   - INCOMPLETE       - This status means that an activity data source has not been setup and usage insights are not available for the source.
     * @type {string}
     * @memberof SourceUsageStatus
     */
    'status'?: SourceUsageStatusStatusEnum;
}
export declare const SourceUsageStatusStatusEnum: {
    readonly Complete: "COMPLETE";
    readonly Incomplete: "INCOMPLETE";
};
export type SourceUsageStatusStatusEnum = typeof SourceUsageStatusStatusEnum[keyof typeof SourceUsageStatusStatusEnum];
/**
 * Message model for Config Import/Export.
 * @export
 * @interface SpConfigMessage
 */
export interface SpConfigMessage {
    /**
     * Message key.
     * @type {string}
     * @memberof SpConfigMessage
     */
    'key': string;
    /**
     * Message text.
     * @type {string}
     * @memberof SpConfigMessage
     */
    'text': string;
    /**
     * Message details if any, in key:value pairs.
     * @type {{ [key: string]: any; }}
     * @memberof SpConfigMessage
     */
    'details': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface SpDetails
 */
export interface SpDetails {
    /**
     * Federation protocol role
     * @type {string}
     * @memberof SpDetails
     */
    'role'?: SpDetailsRoleEnum;
    /**
     * An entity ID is a globally unique name for a SAML entity, either an Identity Provider (IDP) or a Service Provider (SP).
     * @type {string}
     * @memberof SpDetails
     */
    'entityId'?: string;
    /**
     * Unique alias used to identify the selected local service provider based on used URL. Used with SP configurations.
     * @type {string}
     * @memberof SpDetails
     */
    'alias'?: string;
    /**
     * The allowed callback URL where users will be redirected to after authentication. Used with SP configurations.
     * @type {string}
     * @memberof SpDetails
     */
    'callbackUrl'?: string;
}
export declare const SpDetailsRoleEnum: {
    readonly SamlSp: "SAML_SP";
};
export type SpDetailsRoleEnum = typeof SpDetailsRoleEnum[keyof typeof SpDetailsRoleEnum];
/**
 * Specification of a Service Provider Details
 * @export
 * @interface SpDetailsAllOf
 */
export interface SpDetailsAllOf {
    /**
     * Federation protocol role
     * @type {string}
     * @memberof SpDetailsAllOf
     */
    'role'?: SpDetailsAllOfRoleEnum;
    /**
     * Unique alias used to identify the selected local service provider based on used URL. Used with SP configurations.
     * @type {string}
     * @memberof SpDetailsAllOf
     */
    'alias'?: string;
    /**
     * The allowed callback URL where users will be redirected to after authentication. Used with SP configurations.
     * @type {string}
     * @memberof SpDetailsAllOf
     */
    'callbackUrl'?: string;
}
export declare const SpDetailsAllOfRoleEnum: {
    readonly SamlSp: "SAML_SP";
};
export type SpDetailsAllOfRoleEnum = typeof SpDetailsAllOfRoleEnum[keyof typeof SpDetailsAllOfRoleEnum];
/**
 *
 * @export
 * @interface Split
 */
export interface Split {
    /**
     * This can be either a single character or a regex expression, and is used by the transform to identify the break point between two substrings in the incoming data
     * @type {string}
     * @memberof Split
     */
    'delimiter': string;
    /**
     * An integer value for the desired array element after the incoming data has been split into a list; the array is a 0-based object, so the first array element would be index 0, the second element would be index 1, etc.
     * @type {string}
     * @memberof Split
     */
    'index': string;
    /**
     * A boolean (true/false) value which indicates whether an exception should be thrown and returned as an output when an index is out of bounds with the resultant array (i.e., the provided index value is larger than the size of the array)   `true` - The transform should return \"IndexOutOfBoundsException\"   `false` - The transform should return null   If not provided, the transform will default to false and return a null
     * @type {boolean}
     * @memberof Split
     */
    'throws'?: boolean;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Split
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Split
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Standard Log4j log level
 * @export
 * @enum {string}
 */
export declare const StandardLevel: {
    readonly False: "false";
    readonly Fatal: "FATAL";
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
    readonly Trace: "TRACE";
};
export type StandardLevel = typeof StandardLevel[keyof typeof StandardLevel];
/**
 *
 * @export
 * @interface Static
 */
export interface Static {
    /**
     * This must evaluate to a JSON string, either through a fixed value or through conditional logic using the Apache Velocity Template Language.
     * @type {string}
     * @memberof Static
     */
    'values': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Static
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface SubSearchAggregationSpecification
 */
export interface SubSearchAggregationSpecification {
    /**
     *
     * @type {NestedAggregation}
     * @memberof SubSearchAggregationSpecification
     */
    'nested'?: NestedAggregation;
    /**
     *
     * @type {MetricAggregation}
     * @memberof SubSearchAggregationSpecification
     */
    'metric'?: MetricAggregation;
    /**
     *
     * @type {FilterAggregation}
     * @memberof SubSearchAggregationSpecification
     */
    'filter'?: FilterAggregation;
    /**
     *
     * @type {BucketAggregation}
     * @memberof SubSearchAggregationSpecification
     */
    'bucket'?: BucketAggregation;
    /**
     *
     * @type {Aggregations}
     * @memberof SubSearchAggregationSpecification
     */
    'subAggregation'?: Aggregations;
}
/**
 *
 * @export
 * @interface SubSearchAggregationSpecificationAllOf
 */
export interface SubSearchAggregationSpecificationAllOf {
    /**
     *
     * @type {Aggregations}
     * @memberof SubSearchAggregationSpecificationAllOf
     */
    'subAggregation'?: Aggregations;
}
/**
 *
 * @export
 * @interface Substring
 */
export interface Substring {
    /**
     * The index of the first character to include in the returned substring.   If `begin` is set to -1, the transform will begin at character 0 of the input data
     * @type {number}
     * @memberof Substring
     */
    'begin': number;
    /**
     * This integer value is the number of characters to add to the begin attribute when returning a substring.   This attribute is only used if begin is not -1.
     * @type {number}
     * @memberof Substring
     */
    'beginOffset'?: number;
    /**
     * The index of the first character to exclude from the returned substring.  If end is -1 or not provided at all, the substring transform will return everything up to the end of the input string.
     * @type {number}
     * @memberof Substring
     */
    'end'?: number;
    /**
     * This integer value is the number of characters to add to the end attribute when returning a substring.   This attribute is only used if end is provided and is not -1.
     * @type {number}
     * @memberof Substring
     */
    'endOffset'?: number;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Substring
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Substring
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Tagged object.
 * @export
 * @interface TaggedObject
 */
export interface TaggedObject {
    /**
     *
     * @type {TaggedObjectDto}
     * @memberof TaggedObject
     */
    'objectRef'?: TaggedObjectDto;
    /**
     * Labels to be applied to an Object
     * @type {Array<string>}
     * @memberof TaggedObject
     */
    'tags'?: Array<string>;
}
/**
 *
 * @export
 * @interface TaggedObjectDto
 */
export interface TaggedObjectDto {
    /**
     * DTO type
     * @type {string}
     * @memberof TaggedObjectDto
     */
    'type'?: TaggedObjectDtoTypeEnum;
    /**
     * ID of the object this reference applies to
     * @type {string}
     * @memberof TaggedObjectDto
     */
    'id'?: string;
    /**
     * Human-readable display name of the object this reference applies to
     * @type {string}
     * @memberof TaggedObjectDto
     */
    'name'?: string | null;
}
export declare const TaggedObjectDtoTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Application: "APPLICATION";
    readonly Campaign: "CAMPAIGN";
    readonly Entitlement: "ENTITLEMENT";
    readonly Identity: "IDENTITY";
    readonly Role: "ROLE";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
};
export type TaggedObjectDtoTypeEnum = typeof TaggedObjectDtoTypeEnum[keyof typeof TaggedObjectDtoTypeEnum];
/**
 * Details about job or task type, state and lifecycle.
 * @export
 * @interface TaskResultDetails
 */
export interface TaskResultDetails {
    /**
     * Type of the job or task underlying in the report processing. It could be a quartz task, QPOC or MENTOS jobs or a refresh/sync task.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'type'?: TaskResultDetailsTypeEnum;
    /**
     * Unique task definition identifier.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'id'?: string;
    /**
     * Use this property to define what report should be processed in the RDE service.
     * @type {object}
     * @memberof TaskResultDetails
     */
    'reportType'?: TaskResultDetailsReportTypeEnum;
    /**
     * Description of the report purpose and/or contents.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'description'?: string;
    /**
     * Name of the parent task/report if exists.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'parentName'?: string | null;
    /**
     * Name of the report processing initiator.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'launcher'?: string;
    /**
     * Report creation date
     * @type {string}
     * @memberof TaskResultDetails
     */
    'created'?: string;
    /**
     * Report start date
     * @type {string}
     * @memberof TaskResultDetails
     */
    'launched'?: string | null;
    /**
     * Report completion date
     * @type {string}
     * @memberof TaskResultDetails
     */
    'completed'?: string | null;
    /**
     * Report completion status.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'completionStatus'?: TaskResultDetailsCompletionStatusEnum;
    /**
     * List of the messages dedicated to the report.  From task definition perspective here usually should be warnings or errors.
     * @type {Array<TaskResultDetailsMessagesInner>}
     * @memberof TaskResultDetails
     */
    'messages'?: Array<TaskResultDetailsMessagesInner>;
    /**
     * Task definition results, if necessary.
     * @type {Array<TaskResultDetailsReturnsInner>}
     * @memberof TaskResultDetails
     */
    'returns'?: Array<TaskResultDetailsReturnsInner>;
    /**
     * Extra attributes map(dictionary) needed for the report.
     * @type {{ [key: string]: object; }}
     * @memberof TaskResultDetails
     */
    'attributes'?: {
        [key: string]: object;
    };
    /**
     * Current report state.
     * @type {string}
     * @memberof TaskResultDetails
     */
    'progress'?: string | null;
}
export declare const TaskResultDetailsTypeEnum: {
    readonly Quartz: "QUARTZ";
    readonly Qpoc: "QPOC";
    readonly Mentos: "MENTOS";
    readonly QueuedTask: "QUEUED_TASK";
};
export type TaskResultDetailsTypeEnum = typeof TaskResultDetailsTypeEnum[keyof typeof TaskResultDetailsTypeEnum];
export declare const TaskResultDetailsReportTypeEnum: {
    readonly Accounts: "ACCOUNTS";
    readonly IdentitiesDetails: "IDENTITIES_DETAILS";
    readonly Identities: "IDENTITIES";
    readonly IdentityProfileIdentityError: "IDENTITY_PROFILE_IDENTITY_ERROR";
    readonly OrphanIdentities: "ORPHAN_IDENTITIES";
    readonly SearchExport: "SEARCH_EXPORT";
    readonly UncorrelatedAccounts: "UNCORRELATED_ACCOUNTS";
};
export type TaskResultDetailsReportTypeEnum = typeof TaskResultDetailsReportTypeEnum[keyof typeof TaskResultDetailsReportTypeEnum];
export declare const TaskResultDetailsCompletionStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
};
export type TaskResultDetailsCompletionStatusEnum = typeof TaskResultDetailsCompletionStatusEnum[keyof typeof TaskResultDetailsCompletionStatusEnum];
/**
 *
 * @export
 * @interface TaskResultDetailsMessagesInner
 */
export interface TaskResultDetailsMessagesInner {
    /**
     * Type of the message.
     * @type {string}
     * @memberof TaskResultDetailsMessagesInner
     */
    'type'?: TaskResultDetailsMessagesInnerTypeEnum;
    /**
     * Flag whether message is an error.
     * @type {boolean}
     * @memberof TaskResultDetailsMessagesInner
     */
    'error'?: boolean;
    /**
     * Flag whether message is a warning.
     * @type {boolean}
     * @memberof TaskResultDetailsMessagesInner
     */
    'warning'?: boolean;
    /**
     * Message string identifier.
     * @type {string}
     * @memberof TaskResultDetailsMessagesInner
     */
    'key'?: string;
    /**
     * Message context with the locale based language.
     * @type {string}
     * @memberof TaskResultDetailsMessagesInner
     */
    'localizedText'?: string;
}
export declare const TaskResultDetailsMessagesInnerTypeEnum: {
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
export type TaskResultDetailsMessagesInnerTypeEnum = typeof TaskResultDetailsMessagesInnerTypeEnum[keyof typeof TaskResultDetailsMessagesInnerTypeEnum];
/**
 *
 * @export
 * @interface TaskResultDetailsReturnsInner
 */
export interface TaskResultDetailsReturnsInner {
    /**
     * Attribute description.
     * @type {string}
     * @memberof TaskResultDetailsReturnsInner
     */
    'displayLabel'?: string;
    /**
     * System or database attribute name.
     * @type {string}
     * @memberof TaskResultDetailsReturnsInner
     */
    'attributeName'?: string;
}
/**
 * Task result.
 * @export
 * @interface TaskResultDto
 */
export interface TaskResultDto {
    /**
     * Task result DTO type.
     * @type {string}
     * @memberof TaskResultDto
     */
    'type'?: TaskResultDtoTypeEnum;
    /**
     * Task result ID.
     * @type {string}
     * @memberof TaskResultDto
     */
    'id'?: string;
    /**
     * Task result display name.
     * @type {string}
     * @memberof TaskResultDto
     */
    'name'?: string | null;
}
export declare const TaskResultDtoTypeEnum: {
    readonly TaskResult: "TASK_RESULT";
};
export type TaskResultDtoTypeEnum = typeof TaskResultDtoTypeEnum[keyof typeof TaskResultDtoTypeEnum];
/**
 *
 * @export
 * @interface TaskResultSimplified
 */
export interface TaskResultSimplified {
    /**
     * Task identifier
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'id'?: string;
    /**
     * Task name
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'name'?: string;
    /**
     * Task description
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'description'?: string;
    /**
     * User or process who launched the task
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'launcher'?: string;
    /**
     * Date time of completion
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'completed'?: string;
    /**
     * Date time when the task was launched
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'launched'?: string;
    /**
     * Task result status
     * @type {string}
     * @memberof TaskResultSimplified
     */
    'completionStatus'?: TaskResultSimplifiedCompletionStatusEnum;
}
export declare const TaskResultSimplifiedCompletionStatusEnum: {
    readonly Success: "Success";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly Terminated: "Terminated";
    readonly TempError: "TempError";
};
export type TaskResultSimplifiedCompletionStatusEnum = typeof TaskResultSimplifiedCompletionStatusEnum[keyof typeof TaskResultSimplifiedCompletionStatusEnum];
/**
 *
 * @export
 * @interface TestExternalExecuteWorkflow200Response
 */
export interface TestExternalExecuteWorkflow200Response {
    /**
     * The input that was received
     * @type {object}
     * @memberof TestExternalExecuteWorkflow200Response
     */
    'payload'?: object;
}
/**
 *
 * @export
 * @interface TestExternalExecuteWorkflowRequest
 */
export interface TestExternalExecuteWorkflowRequest {
    /**
     * The test input for the workflow
     * @type {object}
     * @memberof TestExternalExecuteWorkflowRequest
     */
    'input'?: object;
}
/**
 *
 * @export
 * @interface TestWorkflow200Response
 */
export interface TestWorkflow200Response {
    /**
     * The workflow execution id
     * @type {string}
     * @memberof TestWorkflow200Response
     */
    'workflowExecutionId'?: string;
}
/**
 *
 * @export
 * @interface TestWorkflowRequest
 */
export interface TestWorkflowRequest {
    /**
     * The test input for the workflow.
     * @type {object}
     * @memberof TestWorkflowRequest
     */
    'input': object;
}
/**
 * Query parameters used to construct an Elasticsearch text query object.
 * @export
 * @interface TextQuery
 */
export interface TextQuery {
    /**
     * Words or characters that specify a particular thing to be searched for.
     * @type {Array<string>}
     * @memberof TextQuery
     */
    'terms': Array<string>;
    /**
     * The fields to be searched.
     * @type {Array<string>}
     * @memberof TextQuery
     */
    'fields': Array<string>;
    /**
     * Indicates that at least one of the terms must be found in the specified fields;  otherwise, all terms must be found.
     * @type {boolean}
     * @memberof TextQuery
     */
    'matchAny'?: boolean;
    /**
     * Indicates that the terms can be located anywhere in the specified fields;  otherwise, the fields must begin with the terms.
     * @type {boolean}
     * @memberof TextQuery
     */
    'contains'?: boolean;
}
/**
 *
 * @export
 * @interface TokenAuthRequest
 */
export interface TokenAuthRequest {
    /**
     * Token value
     * @type {string}
     * @memberof TokenAuthRequest
     */
    'token': string;
    /**
     * User alias from table spt_identity field named \'name\'
     * @type {string}
     * @memberof TokenAuthRequest
     */
    'userAlias': string;
    /**
     * Token delivery type
     * @type {string}
     * @memberof TokenAuthRequest
     */
    'deliveryType': TokenAuthRequestDeliveryTypeEnum;
}
export declare const TokenAuthRequestDeliveryTypeEnum: {
    readonly SmsPersonal: "SMS_PERSONAL";
    readonly VoicePersonal: "VOICE_PERSONAL";
    readonly SmsWork: "SMS_WORK";
    readonly VoiceWork: "VOICE_WORK";
    readonly EmailWork: "EMAIL_WORK";
    readonly EmailPersonal: "EMAIL_PERSONAL";
};
export type TokenAuthRequestDeliveryTypeEnum = typeof TokenAuthRequestDeliveryTypeEnum[keyof typeof TokenAuthRequestDeliveryTypeEnum];
/**
 *
 * @export
 * @interface TokenAuthResponse
 */
export interface TokenAuthResponse {
    /**
     * MFA Authentication status
     * @type {string}
     * @memberof TokenAuthResponse
     */
    'status'?: TokenAuthResponseStatusEnum;
}
export declare const TokenAuthResponseStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
    readonly Lockout: "LOCKOUT";
    readonly NotEnoughData: "NOT_ENOUGH_DATA";
};
export type TokenAuthResponseStatusEnum = typeof TokenAuthResponseStatusEnum[keyof typeof TokenAuthResponseStatusEnum];
/**
 * The representation of an internally- or customer-defined transform.
 * @export
 * @interface Transform
 */
export interface Transform {
    /**
     * Unique name of this transform
     * @type {string}
     * @memberof Transform
     */
    'name': string;
    /**
     * The type of transform operation
     * @type {string}
     * @memberof Transform
     */
    'type': TransformTypeEnum;
    /**
     *
     * @type {TransformAttributes}
     * @memberof Transform
     */
    'attributes': TransformAttributes | null;
}
export declare const TransformTypeEnum: {
    readonly AccountAttribute: "accountAttribute";
    readonly Base64Decode: "base64Decode";
    readonly Base64Encode: "base64Encode";
    readonly Concat: "concat";
    readonly Conditional: "conditional";
    readonly DateCompare: "dateCompare";
    readonly DateFormat: "dateFormat";
    readonly DateMath: "dateMath";
    readonly DecomposeDiacriticalMarks: "decomposeDiacriticalMarks";
    readonly E164phone: "e164phone";
    readonly FirstValid: "firstValid";
    readonly Rule: "rule";
    readonly IdentityAttribute: "identityAttribute";
    readonly IndexOf: "indexOf";
    readonly Iso3166: "iso3166";
    readonly LastIndexOf: "lastIndexOf";
    readonly LeftPad: "leftPad";
    readonly Lookup: "lookup";
    readonly Lower: "lower";
    readonly NormalizeNames: "normalizeNames";
    readonly RandomAlphaNumeric: "randomAlphaNumeric";
    readonly RandomNumeric: "randomNumeric";
    readonly Reference: "reference";
    readonly ReplaceAll: "replaceAll";
    readonly Replace: "replace";
    readonly RightPad: "rightPad";
    readonly Split: "split";
    readonly Static: "static";
    readonly Substring: "substring";
    readonly Trim: "trim";
    readonly Upper: "upper";
    readonly UsernameGenerator: "usernameGenerator";
    readonly Uuid: "uuid";
    readonly DisplayName: "displayName";
    readonly Rfc5646: "rfc5646";
};
export type TransformTypeEnum = typeof TransformTypeEnum[keyof typeof TransformTypeEnum];
/**
 * @type TransformAttributes
 * Meta-data about the transform. Values in this list are specific to the type of transform to be executed.
 * @export
 */
export type TransformAttributes = AccountAttribute | Base64Decode | Base64Encode | Concatenation | Conditional | DateCompare | DateFormat | DateMath | DecomposeDiacriticalMarks | E164phone | FirstValid | ISO3166 | IdentityAttribute | IndexOf | LeftPad | Lookup | Lower | NameNormalizer | RandomAlphaNumeric | RandomNumeric | Reference | Replace | ReplaceAll | RightPad | Rule | Split | Static | Substring | Trim | UUIDGenerator | Upper;
/**
 *
 * @export
 * @interface TransformDefinition
 */
export interface TransformDefinition {
    /**
     * The type of the transform definition.
     * @type {string}
     * @memberof TransformDefinition
     */
    'type'?: string;
    /**
     * Arbitrary key-value pairs to store any metadata for the object
     * @type {{ [key: string]: TransformDefinitionAttributesValue; }}
     * @memberof TransformDefinition
     */
    'attributes'?: {
        [key: string]: TransformDefinitionAttributesValue;
    };
}
/**
 *
 * @export
 * @interface TransformDefinitionAttributesValue
 */
export interface TransformDefinitionAttributesValue {
}
/**
 *
 * @export
 * @interface TransformRead
 */
export interface TransformRead {
    /**
     * Unique name of this transform
     * @type {string}
     * @memberof TransformRead
     */
    'name': string;
    /**
     * The type of transform operation
     * @type {string}
     * @memberof TransformRead
     */
    'type': TransformReadTypeEnum;
    /**
     *
     * @type {TransformAttributes}
     * @memberof TransformRead
     */
    'attributes': TransformAttributes | null;
    /**
     * Unique ID of this transform
     * @type {string}
     * @memberof TransformRead
     */
    'id': string;
    /**
     * Indicates whether this is an internal SailPoint-created transform or a customer-created transform
     * @type {boolean}
     * @memberof TransformRead
     */
    'internal': boolean;
}
export declare const TransformReadTypeEnum: {
    readonly AccountAttribute: "accountAttribute";
    readonly Base64Decode: "base64Decode";
    readonly Base64Encode: "base64Encode";
    readonly Concat: "concat";
    readonly Conditional: "conditional";
    readonly DateCompare: "dateCompare";
    readonly DateFormat: "dateFormat";
    readonly DateMath: "dateMath";
    readonly DecomposeDiacriticalMarks: "decomposeDiacriticalMarks";
    readonly E164phone: "e164phone";
    readonly FirstValid: "firstValid";
    readonly Rule: "rule";
    readonly IdentityAttribute: "identityAttribute";
    readonly IndexOf: "indexOf";
    readonly Iso3166: "iso3166";
    readonly LastIndexOf: "lastIndexOf";
    readonly LeftPad: "leftPad";
    readonly Lookup: "lookup";
    readonly Lower: "lower";
    readonly NormalizeNames: "normalizeNames";
    readonly RandomAlphaNumeric: "randomAlphaNumeric";
    readonly RandomNumeric: "randomNumeric";
    readonly Reference: "reference";
    readonly ReplaceAll: "replaceAll";
    readonly Replace: "replace";
    readonly RightPad: "rightPad";
    readonly Split: "split";
    readonly Static: "static";
    readonly Substring: "substring";
    readonly Trim: "trim";
    readonly Upper: "upper";
    readonly UsernameGenerator: "usernameGenerator";
    readonly Uuid: "uuid";
    readonly DisplayName: "displayName";
    readonly Rfc5646: "rfc5646";
};
export type TransformReadTypeEnum = typeof TransformReadTypeEnum[keyof typeof TransformReadTypeEnum];
/**
 *
 * @export
 * @interface TransformReadAllOf
 */
export interface TransformReadAllOf {
    /**
     * Unique ID of this transform
     * @type {string}
     * @memberof TransformReadAllOf
     */
    'id': string;
    /**
     * Indicates whether this is an internal SailPoint-created transform or a customer-created transform
     * @type {boolean}
     * @memberof TransformReadAllOf
     */
    'internal': boolean;
}
/**
 *
 * @export
 * @interface TransformRule
 */
export interface TransformRule {
    /**
     * This is the name of the Transform rule that needs to be invoked by the transform
     * @type {string}
     * @memberof TransformRule
     */
    'name': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof TransformRule
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface Trim
 */
export interface Trim {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Trim
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Trim
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Query parameters used to construct an Elasticsearch type ahead query object.  The typeAheadQuery performs a search for top values beginning with the typed values. For example, typing \"Jo\" results in top hits matching \"Jo.\" Typing \"Job\" results in top hits matching \"Job.\"
 * @export
 * @interface TypeAheadQuery
 */
export interface TypeAheadQuery {
    /**
     * The type ahead query string used to construct a phrase prefix match query.
     * @type {string}
     * @memberof TypeAheadQuery
     */
    'query': string;
    /**
     * The field on which to perform the type ahead search.
     * @type {string}
     * @memberof TypeAheadQuery
     */
    'field': string;
    /**
     * The nested type.
     * @type {string}
     * @memberof TypeAheadQuery
     */
    'nestedType'?: string;
    /**
     * The number of suffixes the last term will be expanded into. Influences the performance of the query and the number results returned. Valid values: 1 to 1000.
     * @type {number}
     * @memberof TypeAheadQuery
     */
    'maxExpansions'?: number;
    /**
     * The max amount of records the search will return.
     * @type {number}
     * @memberof TypeAheadQuery
     */
    'size'?: number;
    /**
     * The sort order of the returned records.
     * @type {string}
     * @memberof TypeAheadQuery
     */
    'sort'?: string;
    /**
     * The flag that defines the sort type, by count or value.
     * @type {boolean}
     * @memberof TypeAheadQuery
     */
    'sortByValue'?: boolean;
}
/**
 * A typed reference to the object.
 * @export
 * @interface TypedReference
 */
export interface TypedReference {
    /**
     *
     * @type {DtoType}
     * @memberof TypedReference
     */
    'type': DtoType;
    /**
     * The id of the object.
     * @type {string}
     * @memberof TypedReference
     */
    'id': string;
}
/**
 *
 * @export
 * @interface UUIDGenerator
 */
export interface UUIDGenerator {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof UUIDGenerator
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface UpdateDetail
 */
export interface UpdateDetail {
    /**
     * The detailed message for an update. Typically the relevent error message when status is error.
     * @type {string}
     * @memberof UpdateDetail
     */
    'message'?: string;
    /**
     * The connector script name
     * @type {string}
     * @memberof UpdateDetail
     */
    'scriptName'?: string;
    /**
     * The list of updated files supported by the connector
     * @type {Array<string>}
     * @memberof UpdateDetail
     */
    'updatedFiles'?: Array<string> | null;
    /**
     * The connector update status
     * @type {string}
     * @memberof UpdateDetail
     */
    'status'?: UpdateDetailStatusEnum;
}
export declare const UpdateDetailStatusEnum: {
    readonly Error: "ERROR";
    readonly Updated: "UPDATED";
    readonly Unchanged: "UNCHANGED";
    readonly Skipped: "SKIPPED";
};
export type UpdateDetailStatusEnum = typeof UpdateDetailStatusEnum[keyof typeof UpdateDetailStatusEnum];
/**
 *
 * @export
 * @interface UploadsRequest
 */
export interface UploadsRequest {
    /**
     * Unique id assigned to this job.
     * @type {string}
     * @memberof UploadsRequest
     */
    'jobId': string;
    /**
     * Status of the job.
     * @type {string}
     * @memberof UploadsRequest
     */
    'status': UploadsRequestStatusEnum;
    /**
     * Type of the job, either Backup or Draft.
     * @type {string}
     * @memberof UploadsRequest
     */
    'type': UploadsRequestTypeEnum;
    /**
     * The name of the tenant performing the upload
     * @type {string}
     * @memberof UploadsRequest
     */
    'tenant'?: string;
    /**
     * The name of the requester.
     * @type {string}
     * @memberof UploadsRequest
     */
    'requesterName'?: string;
    /**
     * The time the job was started.
     * @type {string}
     * @memberof UploadsRequest
     */
    'created': string;
    /**
     * The time of the last update to the job.
     * @type {string}
     * @memberof UploadsRequest
     */
    'modified': string;
    /**
     * The name assigned to the upload file in the request body.
     * @type {string}
     * @memberof UploadsRequest
     */
    'name'?: string;
    /**
     * Is the job a regular backup job, if so is the user allowed to delete the backup file. Since this is an upload job it remains as false.
     * @type {boolean}
     * @memberof UploadsRequest
     */
    'userCanDelete'?: boolean;
    /**
     * Is the job a regular backup job, if so is it partial. Since this is an upload job it remains as false.
     * @type {boolean}
     * @memberof UploadsRequest
     */
    'isPartial'?: boolean;
    /**
     * What kind of backup is this being treated as.
     * @type {string}
     * @memberof UploadsRequest
     */
    'backupType'?: UploadsRequestBackupTypeEnum;
    /**
     * have the objects contained in the upload file been hydrated.
     * @type {string}
     * @memberof UploadsRequest
     */
    'hydrationStatus'?: UploadsRequestHydrationStatusEnum;
}
export declare const UploadsRequestStatusEnum: {
    readonly NotStarted: "NOT_STARTED";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export type UploadsRequestStatusEnum = typeof UploadsRequestStatusEnum[keyof typeof UploadsRequestStatusEnum];
export declare const UploadsRequestTypeEnum: {
    readonly Backup: "BACKUP";
    readonly Draft: "DRAFT";
};
export type UploadsRequestTypeEnum = typeof UploadsRequestTypeEnum[keyof typeof UploadsRequestTypeEnum];
export declare const UploadsRequestBackupTypeEnum: {
    readonly Uploaded: "UPLOADED";
    readonly Automated: "AUTOMATED";
    readonly Manual: "MANUAL";
};
export type UploadsRequestBackupTypeEnum = typeof UploadsRequestBackupTypeEnum[keyof typeof UploadsRequestBackupTypeEnum];
export declare const UploadsRequestHydrationStatusEnum: {
    readonly Hydrated: "HYDRATED";
    readonly NotHydrated: "NOT_HYDRATED";
};
export type UploadsRequestHydrationStatusEnum = typeof UploadsRequestHydrationStatusEnum[keyof typeof UploadsRequestHydrationStatusEnum];
/**
 *
 * @export
 * @interface UploadsResponse
 */
export interface UploadsResponse {
    /**
     * Unique id assigned to this job.
     * @type {string}
     * @memberof UploadsResponse
     */
    'jobId': string;
    /**
     * Status of the job.
     * @type {string}
     * @memberof UploadsResponse
     */
    'status': UploadsResponseStatusEnum;
    /**
     * Type of the job, either Backup or Draft.
     * @type {string}
     * @memberof UploadsResponse
     */
    'type': UploadsResponseTypeEnum;
    /**
     * The name of the tenant performing the upload
     * @type {string}
     * @memberof UploadsResponse
     */
    'tenant'?: string;
    /**
     * The name of the requester.
     * @type {string}
     * @memberof UploadsResponse
     */
    'requesterName'?: string;
    /**
     * The time the job was started.
     * @type {string}
     * @memberof UploadsResponse
     */
    'created': string;
    /**
     * The time of the last update to the job.
     * @type {string}
     * @memberof UploadsResponse
     */
    'modified': string;
    /**
     * The name assigned to the upload file in the request body.
     * @type {string}
     * @memberof UploadsResponse
     */
    'name'?: string;
    /**
     * Is the job a regular backup job, if so is the user allowed to delete the backup file. Since this is an upload job it remains as false.
     * @type {boolean}
     * @memberof UploadsResponse
     */
    'userCanDelete'?: boolean;
    /**
     * Is the job a regular backup job, if so is it partial. Since this is an upload job it remains as false.
     * @type {boolean}
     * @memberof UploadsResponse
     */
    'isPartial'?: boolean;
    /**
     * What kind of backup is this being treated as.
     * @type {string}
     * @memberof UploadsResponse
     */
    'backupType'?: UploadsResponseBackupTypeEnum;
    /**
     * have the objects contained in the upload file been hydrated.
     * @type {string}
     * @memberof UploadsResponse
     */
    'hydrationStatus'?: UploadsResponseHydrationStatusEnum;
}
export declare const UploadsResponseStatusEnum: {
    readonly NotStarted: "NOT_STARTED";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export type UploadsResponseStatusEnum = typeof UploadsResponseStatusEnum[keyof typeof UploadsResponseStatusEnum];
export declare const UploadsResponseTypeEnum: {
    readonly Backup: "BACKUP";
    readonly Draft: "DRAFT";
};
export type UploadsResponseTypeEnum = typeof UploadsResponseTypeEnum[keyof typeof UploadsResponseTypeEnum];
export declare const UploadsResponseBackupTypeEnum: {
    readonly Uploaded: "UPLOADED";
    readonly Automated: "AUTOMATED";
    readonly Manual: "MANUAL";
};
export type UploadsResponseBackupTypeEnum = typeof UploadsResponseBackupTypeEnum[keyof typeof UploadsResponseBackupTypeEnum];
export declare const UploadsResponseHydrationStatusEnum: {
    readonly Hydrated: "HYDRATED";
    readonly NotHydrated: "NOT_HYDRATED";
};
export type UploadsResponseHydrationStatusEnum = typeof UploadsResponseHydrationStatusEnum[keyof typeof UploadsResponseHydrationStatusEnum];
/**
 *
 * @export
 * @interface Upper
 */
export interface Upper {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Upper
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Upper
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \'Create Account Profile\', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \'Update Account Profile\', the provisioning template for the \'Update\' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \'Enable Account Profile\', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\'s account is created.  DISABLE - This usage type relates to \'Disable Account Profile\', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
 * @export
 * @enum {string}
 */
export declare const UsageType: {
    readonly Create: "CREATE";
    readonly Update: "UPDATE";
    readonly Enable: "ENABLE";
    readonly Disable: "DISABLE";
    readonly Delete: "DELETE";
    readonly Assign: "ASSIGN";
    readonly Unassign: "UNASSIGN";
    readonly CreateGroup: "CREATE_GROUP";
    readonly UpdateGroup: "UPDATE_GROUP";
    readonly DeleteGroup: "DELETE_GROUP";
    readonly Register: "REGISTER";
    readonly CreateIdentity: "CREATE_IDENTITY";
    readonly UpdateIdentity: "UPDATE_IDENTITY";
    readonly EditGroup: "EDIT_GROUP";
    readonly Unlock: "UNLOCK";
    readonly ChangePassword: "CHANGE_PASSWORD";
};
export type UsageType = typeof UsageType[keyof typeof UsageType];
/**
 *
 * @export
 * @interface V3ConnectorDto
 */
export interface V3ConnectorDto {
    /**
     * The connector name
     * @type {string}
     * @memberof V3ConnectorDto
     */
    'name'?: string;
    /**
     * The connector type
     * @type {string}
     * @memberof V3ConnectorDto
     */
    'type'?: string;
    /**
     * The connector script name
     * @type {string}
     * @memberof V3ConnectorDto
     */
    'scriptName'?: string;
    /**
     * The connector class name.
     * @type {string}
     * @memberof V3ConnectorDto
     */
    'className'?: string | null;
    /**
     * The list of features supported by the connector
     * @type {Array<string>}
     * @memberof V3ConnectorDto
     */
    'features'?: Array<string> | null;
    /**
     * true if the source is a direct connect source
     * @type {boolean}
     * @memberof V3ConnectorDto
     */
    'directConnect'?: boolean;
    /**
     * A map containing metadata pertinent to the connector
     * @type {{ [key: string]: any; }}
     * @memberof V3ConnectorDto
     */
    'connectorMetadata'?: {
        [key: string]: any;
    };
    /**
     * The connector status
     * @type {string}
     * @memberof V3ConnectorDto
     */
    'status'?: V3ConnectorDtoStatusEnum;
}
export declare const V3ConnectorDtoStatusEnum: {
    readonly Deprecated: "DEPRECATED";
    readonly Development: "DEVELOPMENT";
    readonly Demo: "DEMO";
    readonly Released: "RELEASED";
};
export type V3ConnectorDtoStatusEnum = typeof V3ConnectorDtoStatusEnum[keyof typeof V3ConnectorDtoStatusEnum];
/**
 *
 * @export
 * @interface V3CreateConnectorDto
 */
export interface V3CreateConnectorDto {
    /**
     * The connector name. Need to be unique per tenant. The name will able be used to derive a url friendly unique scriptname that will be in response. Script name can then be used for all update endpoints
     * @type {string}
     * @memberof V3CreateConnectorDto
     */
    'name': string;
    /**
     * The connector type. If not specified will be defaulted to \'custom \'+name
     * @type {string}
     * @memberof V3CreateConnectorDto
     */
    'type'?: string;
    /**
     * The connector class name. If you are implementing openconnector standard (what is recommended), then this need to be set to sailpoint.connector.OpenConnectorAdapter
     * @type {string}
     * @memberof V3CreateConnectorDto
     */
    'className': string;
    /**
     * true if the source is a direct connect source
     * @type {boolean}
     * @memberof V3CreateConnectorDto
     */
    'directConnect'?: boolean;
    /**
     * The connector status
     * @type {string}
     * @memberof V3CreateConnectorDto
     */
    'status'?: V3CreateConnectorDtoStatusEnum;
}
export declare const V3CreateConnectorDtoStatusEnum: {
    readonly Development: "DEVELOPMENT";
    readonly Demo: "DEMO";
    readonly Released: "RELEASED";
};
export type V3CreateConnectorDtoStatusEnum = typeof V3CreateConnectorDtoStatusEnum[keyof typeof V3CreateConnectorDtoStatusEnum];
/**
 *
 * @export
 * @interface Value
 */
export interface Value {
    /**
     * The type of attribute value
     * @type {string}
     * @memberof Value
     */
    'type'?: string;
    /**
     * The attribute value
     * @type {string}
     * @memberof Value
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface VendorConnectorMapping
 */
export interface VendorConnectorMapping {
    /**
     * The unique identifier for the vendor-connector mapping.
     * @type {string}
     * @memberof VendorConnectorMapping
     */
    'id'?: string;
    /**
     * The name of the vendor.
     * @type {string}
     * @memberof VendorConnectorMapping
     */
    'vendor'?: string;
    /**
     * The name of the connector.
     * @type {string}
     * @memberof VendorConnectorMapping
     */
    'connector'?: string;
    /**
     * The creation timestamp of the mapping.
     * @type {string}
     * @memberof VendorConnectorMapping
     */
    'createdAt'?: string;
    /**
     * The identifier of the user who created the mapping.
     * @type {string}
     * @memberof VendorConnectorMapping
     */
    'createdBy'?: string;
    /**
     *
     * @type {VendorConnectorMappingUpdatedAt}
     * @memberof VendorConnectorMapping
     */
    'updatedAt'?: VendorConnectorMappingUpdatedAt | null;
    /**
     *
     * @type {VendorConnectorMappingUpdatedBy}
     * @memberof VendorConnectorMapping
     */
    'updatedBy'?: VendorConnectorMappingUpdatedBy | null;
    /**
     *
     * @type {VendorConnectorMappingDeletedAt}
     * @memberof VendorConnectorMapping
     */
    'deletedAt'?: VendorConnectorMappingDeletedAt | null;
    /**
     *
     * @type {VendorConnectorMappingDeletedBy}
     * @memberof VendorConnectorMapping
     */
    'deletedBy'?: VendorConnectorMappingDeletedBy | null;
}
/**
 * An object representing the nullable timestamp of when the mapping was deleted.
 * @export
 * @interface VendorConnectorMappingDeletedAt
 */
export interface VendorConnectorMappingDeletedAt {
    /**
     * The timestamp when the mapping was deleted, represented in ISO 8601 format, if applicable.
     * @type {string}
     * @memberof VendorConnectorMappingDeletedAt
     */
    'Time'?: string;
    /**
     * A flag indicating if the \'Time\' field is set and valid, i.e., if the mapping has been deleted.
     * @type {boolean}
     * @memberof VendorConnectorMappingDeletedAt
     */
    'Valid'?: boolean;
}
/**
 * An object representing the nullable identifier of the user who deleted the mapping.
 * @export
 * @interface VendorConnectorMappingDeletedBy
 */
export interface VendorConnectorMappingDeletedBy {
    /**
     * The identifier of the user who deleted the mapping, if applicable.
     * @type {string}
     * @memberof VendorConnectorMappingDeletedBy
     */
    'String'?: string;
    /**
     * A flag indicating if the \'String\' field is set and valid, i.e., if the mapping has been deleted.
     * @type {boolean}
     * @memberof VendorConnectorMappingDeletedBy
     */
    'Valid'?: boolean;
}
/**
 * An object representing the nullable timestamp of the last update.
 * @export
 * @interface VendorConnectorMappingUpdatedAt
 */
export interface VendorConnectorMappingUpdatedAt {
    /**
     * The timestamp when the mapping was last updated, represented in ISO 8601 format.
     * @type {string}
     * @memberof VendorConnectorMappingUpdatedAt
     */
    'Time'?: string;
    /**
     * A flag indicating if the \'Time\' field is set and valid.
     * @type {boolean}
     * @memberof VendorConnectorMappingUpdatedAt
     */
    'Valid'?: boolean;
}
/**
 * An object representing the nullable identifier of the user who last updated the mapping.
 * @export
 * @interface VendorConnectorMappingUpdatedBy
 */
export interface VendorConnectorMappingUpdatedBy {
    /**
     * The identifier of the user who last updated the mapping, if available.
     * @type {string}
     * @memberof VendorConnectorMappingUpdatedBy
     */
    'String'?: string;
    /**
     * A flag indicating if the \'String\' field is set and valid.
     * @type {boolean}
     * @memberof VendorConnectorMappingUpdatedBy
     */
    'Valid'?: boolean;
}
/**
 *
 * @export
 * @interface VerificationPollRequest
 */
export interface VerificationPollRequest {
    /**
     * Verification request Id
     * @type {string}
     * @memberof VerificationPollRequest
     */
    'requestId': string;
}
/**
 *
 * @export
 * @interface VerificationResponse
 */
export interface VerificationResponse {
    /**
     * The verificationPollRequest request ID
     * @type {string}
     * @memberof VerificationResponse
     */
    'requestId'?: string | null;
    /**
     * MFA Authentication status
     * @type {string}
     * @memberof VerificationResponse
     */
    'status'?: VerificationResponseStatusEnum;
    /**
     * Error messages from MFA verification request
     * @type {string}
     * @memberof VerificationResponse
     */
    'error'?: string | null;
}
export declare const VerificationResponseStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
    readonly Lockout: "LOCKOUT";
    readonly NotEnoughData: "NOT_ENOUGH_DATA";
};
export type VerificationResponseStatusEnum = typeof VerificationResponseStatusEnum[keyof typeof VerificationResponseStatusEnum];
/**
 *
 * @export
 * @interface ViolationContext
 */
export interface ViolationContext {
    /**
     *
     * @type {ViolationContextPolicy}
     * @memberof ViolationContext
     */
    'policy'?: ViolationContextPolicy;
    /**
     *
     * @type {ExceptionAccessCriteria}
     * @memberof ViolationContext
     */
    'conflictingAccessCriteria'?: ExceptionAccessCriteria;
}
/**
 * The types of objects supported for SOD violations
 * @export
 * @interface ViolationContextPolicy
 */
export interface ViolationContextPolicy {
    /**
     * The type of object that is referenced
     * @type {object}
     * @memberof ViolationContextPolicy
     */
    'type'?: ViolationContextPolicyTypeEnum;
    /**
     * SOD policy ID.
     * @type {string}
     * @memberof ViolationContextPolicy
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ViolationContextPolicy
     */
    'name'?: string;
}
export declare const ViolationContextPolicyTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type ViolationContextPolicyTypeEnum = typeof ViolationContextPolicyTypeEnum[keyof typeof ViolationContextPolicyTypeEnum];
/**
 *
 * @export
 * @interface ViolationContextPolicyAllOf
 */
export interface ViolationContextPolicyAllOf {
    /**
     *
     * @type {string}
     * @memberof ViolationContextPolicyAllOf
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ViolationContextPolicyAllOf
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ViolationOwnerAssignmentConfig
 */
export interface ViolationOwnerAssignmentConfig {
    /**
     * Details about the violations owner. MANAGER - identity\'s manager STATIC - Governance Group or Identity
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfig
     */
    'assignmentRule'?: ViolationOwnerAssignmentConfigAssignmentRuleEnum;
    /**
     *
     * @type {ViolationOwnerAssignmentConfigOwnerRef}
     * @memberof ViolationOwnerAssignmentConfig
     */
    'ownerRef'?: ViolationOwnerAssignmentConfigOwnerRef | null;
}
export declare const ViolationOwnerAssignmentConfigAssignmentRuleEnum: {
    readonly Manager: "MANAGER";
    readonly Static: "STATIC";
    readonly Null: "null";
};
export type ViolationOwnerAssignmentConfigAssignmentRuleEnum = typeof ViolationOwnerAssignmentConfigAssignmentRuleEnum[keyof typeof ViolationOwnerAssignmentConfigAssignmentRuleEnum];
/**
 * The owner of the violation assignment config.
 * @export
 * @interface ViolationOwnerAssignmentConfigOwnerRef
 */
export interface ViolationOwnerAssignmentConfigOwnerRef {
    /**
     * Owner type.
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigOwnerRef
     */
    'type'?: ViolationOwnerAssignmentConfigOwnerRefTypeEnum;
    /**
     * Owner\'s ID.
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigOwnerRef
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigOwnerRef
     */
    'name'?: string;
}
export declare const ViolationOwnerAssignmentConfigOwnerRefTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Manager: "MANAGER";
    readonly Null: "null";
};
export type ViolationOwnerAssignmentConfigOwnerRefTypeEnum = typeof ViolationOwnerAssignmentConfigOwnerRefTypeEnum[keyof typeof ViolationOwnerAssignmentConfigOwnerRefTypeEnum];
/**
 * An object containing a listing of the SOD violation reasons detected by this check.
 * @export
 * @interface ViolationPrediction
 */
export interface ViolationPrediction {
    /**
     * List of Violation Contexts
     * @type {Array<ViolationContext>}
     * @memberof ViolationPrediction
     */
    'violationContexts'?: Array<ViolationContext>;
}
/**
 *
 * @export
 * @interface VisibilityCriteria
 */
export interface VisibilityCriteria {
    /**
     *
     * @type {Expression}
     * @memberof VisibilityCriteria
     */
    'expression'?: Expression;
}
/**
 *
 * @export
 * @interface WorkItemForward
 */
export interface WorkItemForward {
    /**
     * The ID of the identity to forward this work item to.
     * @type {string}
     * @memberof WorkItemForward
     */
    'targetOwnerId': string;
    /**
     * Comments to send to the target owner
     * @type {string}
     * @memberof WorkItemForward
     */
    'comment': string;
    /**
     * If true, send a notification to the target owner.
     * @type {boolean}
     * @memberof WorkItemForward
     */
    'sendNotifications'?: boolean;
}
/**
 * The state of a work item
 * @export
 * @enum {string}
 */
export declare const WorkItemState: {
    readonly Finished: "Finished";
    readonly Rejected: "Rejected";
    readonly Returned: "Returned";
    readonly Expired: "Expired";
    readonly Pending: "Pending";
    readonly Canceled: "Canceled";
    readonly Null: "null";
};
export type WorkItemState = typeof WorkItemState[keyof typeof WorkItemState];
/**
 * The state of a work item
 * @export
 * @enum {string}
 */
export declare const WorkItemStateManualWorkItems: {
    readonly Finished: "Finished";
    readonly Rejected: "Rejected";
    readonly Returned: "Returned";
    readonly Expired: "Expired";
    readonly Pending: "Pending";
    readonly Canceled: "Canceled";
};
export type WorkItemStateManualWorkItems = typeof WorkItemStateManualWorkItems[keyof typeof WorkItemStateManualWorkItems];
/**
 * The type of the work item
 * @export
 * @enum {string}
 */
export declare const WorkItemTypeManualWorkItems: {
    readonly Generic: "Generic";
    readonly Certification: "Certification";
    readonly Remediation: "Remediation";
    readonly Delegation: "Delegation";
    readonly Approval: "Approval";
    readonly ViolationReview: "ViolationReview";
    readonly Form: "Form";
    readonly PolicyVioloation: "PolicyVioloation";
    readonly Challenge: "Challenge";
    readonly ImpactAnalysis: "ImpactAnalysis";
    readonly Signoff: "Signoff";
    readonly Event: "Event";
    readonly ManualAction: "ManualAction";
    readonly Test: "Test";
};
export type WorkItemTypeManualWorkItems = typeof WorkItemTypeManualWorkItems[keyof typeof WorkItemTypeManualWorkItems];
/**
 *
 * @export
 * @interface WorkItems
 */
export interface WorkItems {
    /**
     * ID of the work item
     * @type {string}
     * @memberof WorkItems
     */
    'id'?: string;
    /**
     * ID of the requester
     * @type {string}
     * @memberof WorkItems
     */
    'requesterId'?: string | null;
    /**
     * The displayname of the requester
     * @type {string}
     * @memberof WorkItems
     */
    'requesterDisplayName'?: string | null;
    /**
     * The ID of the owner
     * @type {string}
     * @memberof WorkItems
     */
    'ownerId'?: string | null;
    /**
     * The name of the owner
     * @type {string}
     * @memberof WorkItems
     */
    'ownerName'?: string;
    /**
     * Time when the work item was created
     * @type {string}
     * @memberof WorkItems
     */
    'created'?: string;
    /**
     * Time when the work item was last updated
     * @type {string}
     * @memberof WorkItems
     */
    'modified'?: string | null;
    /**
     * The description of the work item
     * @type {string}
     * @memberof WorkItems
     */
    'description'?: string;
    /**
     *
     * @type {WorkItemStateManualWorkItems}
     * @memberof WorkItems
     */
    'state'?: WorkItemStateManualWorkItems;
    /**
     *
     * @type {WorkItemTypeManualWorkItems}
     * @memberof WorkItems
     */
    'type'?: WorkItemTypeManualWorkItems;
    /**
     * A list of remediation items
     * @type {Array<RemediationItemDetails>}
     * @memberof WorkItems
     */
    'remediationItems'?: Array<RemediationItemDetails> | null;
    /**
     * A list of items that need to be approved
     * @type {Array<ApprovalItemDetails>}
     * @memberof WorkItems
     */
    'approvalItems'?: Array<ApprovalItemDetails> | null;
    /**
     * The work item name
     * @type {string}
     * @memberof WorkItems
     */
    'name'?: string | null;
    /**
     * The time at which the work item completed
     * @type {string}
     * @memberof WorkItems
     */
    'completed'?: string | null;
    /**
     * The number of items in the work item
     * @type {number}
     * @memberof WorkItems
     */
    'numItems'?: number | null;
    /**
     *
     * @type {WorkItemsForm}
     * @memberof WorkItems
     */
    'form'?: WorkItemsForm;
    /**
     * An array of errors that ocurred during the work item
     * @type {Array<string>}
     * @memberof WorkItems
     */
    'errors'?: Array<string>;
}
/**
 *
 * @export
 * @interface WorkItemsCount
 */
export interface WorkItemsCount {
    /**
     * The count of work items
     * @type {number}
     * @memberof WorkItemsCount
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface WorkItemsForm
 */
export interface WorkItemsForm {
    /**
     * ID of the form
     * @type {string}
     * @memberof WorkItemsForm
     */
    'id'?: string | null;
    /**
     * Name of the form
     * @type {string}
     * @memberof WorkItemsForm
     */
    'name'?: string | null;
    /**
     * The form title
     * @type {string}
     * @memberof WorkItemsForm
     */
    'title'?: string;
    /**
     * The form subtitle.
     * @type {string}
     * @memberof WorkItemsForm
     */
    'subtitle'?: string;
    /**
     * The name of the user that should be shown this form
     * @type {string}
     * @memberof WorkItemsForm
     */
    'targetUser'?: string;
    /**
     * Sections of the form
     * @type {Array<SectionDetails>}
     * @memberof WorkItemsForm
     */
    'sections'?: Array<SectionDetails>;
}
/**
 *
 * @export
 * @interface WorkItemsSummary
 */
export interface WorkItemsSummary {
    /**
     * The count of open work items
     * @type {number}
     * @memberof WorkItemsSummary
     */
    'open'?: number;
    /**
     * The count of completed work items
     * @type {number}
     * @memberof WorkItemsSummary
     */
    'completed'?: number;
    /**
     * The count of total work items
     * @type {number}
     * @memberof WorkItemsSummary
     */
    'total'?: number;
}
/**
 *
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * Workflow ID. This is a UUID generated upon creation.
     * @type {string}
     * @memberof Workflow
     */
    'id'?: string;
    /**
     * The number of times this workflow has been executed.
     * @type {number}
     * @memberof Workflow
     */
    'executionCount'?: number;
    /**
     * The number of times this workflow has failed during execution.
     * @type {number}
     * @memberof Workflow
     */
    'failureCount'?: number;
    /**
     * The date and time the workflow was created.
     * @type {string}
     * @memberof Workflow
     */
    'created'?: string;
    /**
     * The date and time the workflow was modified.
     * @type {string}
     * @memberof Workflow
     */
    'modified'?: string;
    /**
     *
     * @type {WorkflowModifiedBy}
     * @memberof Workflow
     */
    'modifiedBy'?: WorkflowModifiedBy;
    /**
     *
     * @type {WorkflowAllOfCreator}
     * @memberof Workflow
     */
    'creator'?: WorkflowAllOfCreator;
    /**
     * The name of the workflow
     * @type {string}
     * @memberof Workflow
     */
    'name'?: string;
    /**
     *
     * @type {WorkflowBodyOwner}
     * @memberof Workflow
     */
    'owner'?: WorkflowBodyOwner;
    /**
     * Description of what the workflow accomplishes
     * @type {string}
     * @memberof Workflow
     */
    'description'?: string;
    /**
     *
     * @type {WorkflowDefinition}
     * @memberof Workflow
     */
    'definition'?: WorkflowDefinition;
    /**
     * Enable or disable the workflow.  Workflows cannot be created in an enabled state.
     * @type {boolean}
     * @memberof Workflow
     */
    'enabled'?: boolean;
    /**
     *
     * @type {WorkflowTrigger}
     * @memberof Workflow
     */
    'trigger'?: WorkflowTrigger;
}
/**
 *
 * @export
 * @interface WorkflowAllOf
 */
export interface WorkflowAllOf {
    /**
     * Workflow ID. This is a UUID generated upon creation.
     * @type {string}
     * @memberof WorkflowAllOf
     */
    'id'?: string;
    /**
     * The number of times this workflow has been executed.
     * @type {number}
     * @memberof WorkflowAllOf
     */
    'executionCount'?: number;
    /**
     * The number of times this workflow has failed during execution.
     * @type {number}
     * @memberof WorkflowAllOf
     */
    'failureCount'?: number;
    /**
     * The date and time the workflow was created.
     * @type {string}
     * @memberof WorkflowAllOf
     */
    'created'?: string;
    /**
     * The date and time the workflow was modified.
     * @type {string}
     * @memberof WorkflowAllOf
     */
    'modified'?: string;
    /**
     *
     * @type {WorkflowModifiedBy}
     * @memberof WorkflowAllOf
     */
    'modifiedBy'?: WorkflowModifiedBy;
    /**
     *
     * @type {WorkflowAllOfCreator}
     * @memberof WorkflowAllOf
     */
    'creator'?: WorkflowAllOfCreator;
}
/**
 * Workflow creator\'s identity.
 * @export
 * @interface WorkflowAllOfCreator
 */
export interface WorkflowAllOfCreator {
    /**
     * Workflow creator\'s DTO type.
     * @type {string}
     * @memberof WorkflowAllOfCreator
     */
    'type'?: WorkflowAllOfCreatorTypeEnum;
    /**
     * Workflow creator\'s identity ID.
     * @type {string}
     * @memberof WorkflowAllOfCreator
     */
    'id'?: string;
    /**
     * Workflow creator\'s display name.
     * @type {string}
     * @memberof WorkflowAllOfCreator
     */
    'name'?: string;
}
export declare const WorkflowAllOfCreatorTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkflowAllOfCreatorTypeEnum = typeof WorkflowAllOfCreatorTypeEnum[keyof typeof WorkflowAllOfCreatorTypeEnum];
/**
 *
 * @export
 * @interface WorkflowBody
 */
export interface WorkflowBody {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowBody
     */
    'name'?: string;
    /**
     *
     * @type {WorkflowBodyOwner}
     * @memberof WorkflowBody
     */
    'owner'?: WorkflowBodyOwner;
    /**
     * Description of what the workflow accomplishes
     * @type {string}
     * @memberof WorkflowBody
     */
    'description'?: string;
    /**
     *
     * @type {WorkflowDefinition}
     * @memberof WorkflowBody
     */
    'definition'?: WorkflowDefinition;
    /**
     * Enable or disable the workflow.  Workflows cannot be created in an enabled state.
     * @type {boolean}
     * @memberof WorkflowBody
     */
    'enabled'?: boolean;
    /**
     *
     * @type {WorkflowTrigger}
     * @memberof WorkflowBody
     */
    'trigger'?: WorkflowTrigger;
}
/**
 * The identity that owns the workflow.  The owner\'s permissions in IDN will determine what actions the workflow is allowed to perform.  Ownership can be changed by updating the owner in a PUT or PATCH request.
 * @export
 * @interface WorkflowBodyOwner
 */
export interface WorkflowBodyOwner {
    /**
     * The type of object that is referenced
     * @type {string}
     * @memberof WorkflowBodyOwner
     */
    'type'?: WorkflowBodyOwnerTypeEnum;
    /**
     * The unique ID of the object
     * @type {string}
     * @memberof WorkflowBodyOwner
     */
    'id'?: string;
    /**
     * The name of the object
     * @type {string}
     * @memberof WorkflowBodyOwner
     */
    'name'?: string;
}
export declare const WorkflowBodyOwnerTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkflowBodyOwnerTypeEnum = typeof WorkflowBodyOwnerTypeEnum[keyof typeof WorkflowBodyOwnerTypeEnum];
/**
 * The map of steps that the workflow will execute.
 * @export
 * @interface WorkflowDefinition
 */
export interface WorkflowDefinition {
    /**
     * The name of the starting step.
     * @type {string}
     * @memberof WorkflowDefinition
     */
    'start'?: string;
    /**
     * One or more step objects that comprise this workflow.  Please see the Workflow documentation to see the JSON schema for each step type.
     * @type {{ [key: string]: any; }}
     * @memberof WorkflowDefinition
     */
    'steps'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface WorkflowExecution
 */
export interface WorkflowExecution {
    /**
     * Workflow execution ID.
     * @type {string}
     * @memberof WorkflowExecution
     */
    'id'?: string;
    /**
     * Workflow ID.
     * @type {string}
     * @memberof WorkflowExecution
     */
    'workflowId'?: string;
    /**
     * Backend ID that tracks a workflow request in the system. Provide this ID in a customer support ticket for debugging purposes.
     * @type {string}
     * @memberof WorkflowExecution
     */
    'requestId'?: string;
    /**
     * Date/time when the workflow started.
     * @type {string}
     * @memberof WorkflowExecution
     */
    'startTime'?: string;
    /**
     * Date/time when the workflow ended.
     * @type {string}
     * @memberof WorkflowExecution
     */
    'closeTime'?: string;
    /**
     * Workflow execution status.
     * @type {string}
     * @memberof WorkflowExecution
     */
    'status'?: WorkflowExecutionStatusEnum;
}
export declare const WorkflowExecutionStatusEnum: {
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly Executing: "Executing";
};
export type WorkflowExecutionStatusEnum = typeof WorkflowExecutionStatusEnum[keyof typeof WorkflowExecutionStatusEnum];
/**
 *
 * @export
 * @interface WorkflowExecutionEvent
 */
export interface WorkflowExecutionEvent {
    /**
     * The type of event
     * @type {object}
     * @memberof WorkflowExecutionEvent
     */
    'type'?: WorkflowExecutionEventTypeEnum;
    /**
     * The date-time when the event occurred
     * @type {string}
     * @memberof WorkflowExecutionEvent
     */
    'timestamp'?: string;
    /**
     * Additional attributes associated with the event
     * @type {object}
     * @memberof WorkflowExecutionEvent
     */
    'attributes'?: object;
}
export declare const WorkflowExecutionEventTypeEnum: {
    readonly WorkflowExecutionScheduled: "WorkflowExecutionScheduled";
    readonly WorkflowExecutionStarted: "WorkflowExecutionStarted";
    readonly WorkflowExecutionCompleted: "WorkflowExecutionCompleted";
    readonly WorkflowExecutionFailed: "WorkflowExecutionFailed";
    readonly WorkflowTaskScheduled: "WorkflowTaskScheduled";
    readonly WorkflowTaskStarted: "WorkflowTaskStarted";
    readonly WorkflowTaskCompleted: "WorkflowTaskCompleted";
    readonly WorkflowTaskFailed: "WorkflowTaskFailed";
    readonly ActivityTaskScheduled: "ActivityTaskScheduled";
    readonly ActivityTaskStarted: "ActivityTaskStarted";
    readonly ActivityTaskCompleted: "ActivityTaskCompleted";
    readonly ActivityTaskFailed: "ActivityTaskFailed";
};
export type WorkflowExecutionEventTypeEnum = typeof WorkflowExecutionEventTypeEnum[keyof typeof WorkflowExecutionEventTypeEnum];
/**
 *
 * @export
 * @interface WorkflowLibraryAction
 */
export interface WorkflowLibraryAction {
    /**
     * Action ID. This is a static namespaced ID for the action
     * @type {string}
     * @memberof WorkflowLibraryAction
     */
    'id'?: string;
    /**
     * Action Name
     * @type {string}
     * @memberof WorkflowLibraryAction
     */
    'name'?: string;
    /**
     * Action type
     * @type {string}
     * @memberof WorkflowLibraryAction
     */
    'type'?: string;
    /**
     * Action Description
     * @type {string}
     * @memberof WorkflowLibraryAction
     */
    'description'?: string;
    /**
     * One or more inputs that the action accepts
     * @type {Array<WorkflowLibraryFormFields>}
     * @memberof WorkflowLibraryAction
     */
    'formFields'?: Array<WorkflowLibraryFormFields> | null;
    /**
     *
     * @type {WorkflowLibraryActionExampleOutput}
     * @memberof WorkflowLibraryAction
     */
    'exampleOutput'?: WorkflowLibraryActionExampleOutput;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryAction
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WorkflowLibraryAction
     */
    'deprecatedBy'?: string;
    /**
     * Version number
     * @type {number}
     * @memberof WorkflowLibraryAction
     */
    'versionNumber'?: number;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryAction
     */
    'isSimulationEnabled'?: boolean;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof WorkflowLibraryAction
     */
    'isDynamicSchema'?: boolean;
    /**
     * Defines the output schema, if any, that this action produces.
     * @type {object}
     * @memberof WorkflowLibraryAction
     */
    'outputSchema'?: object;
}
/**
 * @type WorkflowLibraryActionExampleOutput
 * @export
 */
export type WorkflowLibraryActionExampleOutput = Array<object> | object;
/**
 *
 * @export
 * @interface WorkflowLibraryFormFields
 */
export interface WorkflowLibraryFormFields {
    /**
     * Description of the form field
     * @type {string}
     * @memberof WorkflowLibraryFormFields
     */
    'description'?: string;
    /**
     * Describes the form field in the UI
     * @type {string}
     * @memberof WorkflowLibraryFormFields
     */
    'helpText'?: string;
    /**
     * A human readable name for this form field in the UI
     * @type {string}
     * @memberof WorkflowLibraryFormFields
     */
    'label'?: string;
    /**
     * The name of the input attribute
     * @type {string}
     * @memberof WorkflowLibraryFormFields
     */
    'name'?: string;
    /**
     * Denotes if this field is a required attribute
     * @type {boolean}
     * @memberof WorkflowLibraryFormFields
     */
    'required'?: boolean;
    /**
     * The type of the form field
     * @type {string}
     * @memberof WorkflowLibraryFormFields
     */
    'type'?: WorkflowLibraryFormFieldsTypeEnum;
}
export declare const WorkflowLibraryFormFieldsTypeEnum: {
    readonly Text: "text";
    readonly Textarea: "textarea";
    readonly Boolean: "boolean";
    readonly Email: "email";
    readonly Url: "url";
    readonly Number: "number";
    readonly Json: "json";
    readonly Checkbox: "checkbox";
    readonly Jsonpath: "jsonpath";
    readonly Select: "select";
    readonly MultiType: "multiType";
    readonly Duration: "duration";
    readonly Toggle: "toggle";
    readonly FormPicker: "formPicker";
    readonly IdentityPicker: "identityPicker";
    readonly GovernanceGroupPicker: "governanceGroupPicker";
    readonly String: "string";
    readonly Object: "object";
    readonly Array: "array";
    readonly Secret: "secret";
    readonly KeyValuePairs: "keyValuePairs";
    readonly EmailPicker: "emailPicker";
    readonly AdvancedToggle: "advancedToggle";
    readonly VariableCreator: "variableCreator";
    readonly HtmlEditor: "htmlEditor";
};
export type WorkflowLibraryFormFieldsTypeEnum = typeof WorkflowLibraryFormFieldsTypeEnum[keyof typeof WorkflowLibraryFormFieldsTypeEnum];
/**
 *
 * @export
 * @interface WorkflowLibraryOperator
 */
export interface WorkflowLibraryOperator {
    /**
     * Operator ID.
     * @type {string}
     * @memberof WorkflowLibraryOperator
     */
    'id'?: string;
    /**
     * Operator friendly name
     * @type {string}
     * @memberof WorkflowLibraryOperator
     */
    'name'?: string;
    /**
     * Operator type
     * @type {string}
     * @memberof WorkflowLibraryOperator
     */
    'type'?: string;
    /**
     * Description of the operator
     * @type {string}
     * @memberof WorkflowLibraryOperator
     */
    'description'?: string;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof WorkflowLibraryOperator
     */
    'isDynamicSchema'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryOperator
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WorkflowLibraryOperator
     */
    'deprecatedBy'?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryOperator
     */
    'isSimulationEnabled'?: boolean;
    /**
     * One or more inputs that the operator accepts
     * @type {Array<WorkflowLibraryFormFields>}
     * @memberof WorkflowLibraryOperator
     */
    'formFields'?: Array<WorkflowLibraryFormFields> | null;
}
/**
 *
 * @export
 * @interface WorkflowLibraryTrigger
 */
export interface WorkflowLibraryTrigger {
    /**
     * Trigger ID. This is a static namespaced ID for the trigger.
     * @type {string}
     * @memberof WorkflowLibraryTrigger
     */
    'id'?: string;
    /**
     * Trigger type
     * @type {string}
     * @memberof WorkflowLibraryTrigger
     */
    'type'?: WorkflowLibraryTriggerTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryTrigger
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WorkflowLibraryTrigger
     */
    'deprecatedBy'?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryTrigger
     */
    'isSimulationEnabled'?: boolean;
    /**
     * Example output schema
     * @type {object}
     * @memberof WorkflowLibraryTrigger
     */
    'outputSchema'?: object;
    /**
     * Trigger Name
     * @type {string}
     * @memberof WorkflowLibraryTrigger
     */
    'name'?: string;
    /**
     * Trigger Description
     * @type {string}
     * @memberof WorkflowLibraryTrigger
     */
    'description'?: string;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof WorkflowLibraryTrigger
     */
    'isDynamicSchema'?: boolean;
    /**
     * Example trigger payload if applicable
     * @type {object}
     * @memberof WorkflowLibraryTrigger
     */
    'inputExample'?: object | null;
    /**
     * One or more inputs that the trigger accepts
     * @type {Array<WorkflowLibraryFormFields>}
     * @memberof WorkflowLibraryTrigger
     */
    'formFields'?: Array<WorkflowLibraryFormFields> | null;
}
export declare const WorkflowLibraryTriggerTypeEnum: {
    readonly Event: "EVENT";
    readonly Scheduled: "SCHEDULED";
    readonly External: "EXTERNAL";
};
export type WorkflowLibraryTriggerTypeEnum = typeof WorkflowLibraryTriggerTypeEnum[keyof typeof WorkflowLibraryTriggerTypeEnum];
/**
 *
 * @export
 * @interface WorkflowModifiedBy
 */
export interface WorkflowModifiedBy {
    /**
     *
     * @type {string}
     * @memberof WorkflowModifiedBy
     */
    'type'?: WorkflowModifiedByTypeEnum;
    /**
     * Identity ID
     * @type {string}
     * @memberof WorkflowModifiedBy
     */
    'id'?: string;
    /**
     * Human-readable display name of identity.
     * @type {string}
     * @memberof WorkflowModifiedBy
     */
    'name'?: string;
}
export declare const WorkflowModifiedByTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkflowModifiedByTypeEnum = typeof WorkflowModifiedByTypeEnum[keyof typeof WorkflowModifiedByTypeEnum];
/**
 *
 * @export
 * @interface WorkflowOAuthClient
 */
export interface WorkflowOAuthClient {
    /**
     * OAuth client ID for the trigger. This is a UUID generated upon creation.
     * @type {string}
     * @memberof WorkflowOAuthClient
     */
    'id'?: string;
    /**
     * OAuthClient secret.
     * @type {string}
     * @memberof WorkflowOAuthClient
     */
    'secret'?: string;
    /**
     * URL for the external trigger to invoke
     * @type {string}
     * @memberof WorkflowOAuthClient
     */
    'url'?: string;
}
/**
 * The trigger that starts the workflow
 * @export
 * @interface WorkflowTrigger
 */
export interface WorkflowTrigger {
    /**
     * The trigger type
     * @type {string}
     * @memberof WorkflowTrigger
     */
    'type': WorkflowTriggerTypeEnum;
    /**
     *
     * @type {string}
     * @memberof WorkflowTrigger
     */
    'displayName'?: string | null;
    /**
     *
     * @type {WorkflowTriggerAttributes}
     * @memberof WorkflowTrigger
     */
    'attributes': WorkflowTriggerAttributes;
}
export declare const WorkflowTriggerTypeEnum: {
    readonly Event: "EVENT";
    readonly External: "EXTERNAL";
    readonly Scheduled: "SCHEDULED";
};
export type WorkflowTriggerTypeEnum = typeof WorkflowTriggerTypeEnum[keyof typeof WorkflowTriggerTypeEnum];
/**
 * @type WorkflowTriggerAttributes
 * Workflow Trigger Attributes.
 * @export
 */
export type WorkflowTriggerAttributes = EventAttributes | ExternalAttributes | ScheduledAttributes;
/**
 * AccessProfilesApi - axios parameter creator
 * @export
 */
export declare const AccessProfilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles. However, any new access profiles as well as any updates to existing descriptions are limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfile} accessProfile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessProfile: (accessProfile: AccessProfile, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {string} id ID of the Access Profile to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfile: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfileBulkDeleteRequest} accessProfileBulkDeleteRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfilesInBulk: (accessProfileBulkDeleteRequest: AccessProfileBulkDeleteRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {string} id ID of the Access Profile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfile: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profile\'s Entitlements
     * @param {string} id ID of the access profile containing the entitlements.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfileEntitlements: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profiles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Composite operators supported: *and, or*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessProfiles: (forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable:  **name**  **description**  **enabled**  **owner**  **requestable**  **accessRequestConfig**  **revokeRequestConfig**  **segments**  **entitlements**  **provisioningCriteria**  **source** (must be updated with entitlements belonging to new source in the same API call)  If you need to change the `source` of the access profile, you can do so only if you update the `entitlements` in the same API call.  The new entitlements can only come from the target source that you want to change to.  Look for the example \"Replace Source\" in the examples dropdown.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {string} id ID of the Access Profile to patch
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAccessProfile: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessProfilesApi - functional programming interface
 * @export
 */
export declare const AccessProfilesApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles. However, any new access profiles as well as any updates to existing descriptions are limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfile} accessProfile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessProfile(accessProfile: AccessProfile, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfile>>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {string} id ID of the Access Profile to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfile(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfileBulkDeleteRequest} accessProfileBulkDeleteRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfilesInBulk(accessProfileBulkDeleteRequest: AccessProfileBulkDeleteRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfileBulkDeleteResponse>>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {string} id ID of the Access Profile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfile(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfile>>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profile\'s Entitlements
     * @param {string} id ID of the access profile containing the entitlements.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfileEntitlements(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Entitlement>>>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profiles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Composite operators supported: *and, or*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessProfiles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessProfile>>>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable:  **name**  **description**  **enabled**  **owner**  **requestable**  **accessRequestConfig**  **revokeRequestConfig**  **segments**  **entitlements**  **provisioningCriteria**  **source** (must be updated with entitlements belonging to new source in the same API call)  If you need to change the `source` of the access profile, you can do so only if you update the `entitlements` in the same API call.  The new entitlements can only come from the target source that you want to change to.  Look for the example \"Replace Source\" in the examples dropdown.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {string} id ID of the Access Profile to patch
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAccessProfile(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfile>>;
};
/**
 * AccessProfilesApi - factory interface
 * @export
 */
export declare const AccessProfilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles. However, any new access profiles as well as any updates to existing descriptions are limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfile} accessProfile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessProfile(accessProfile: AccessProfile, axiosOptions?: any): AxiosPromise<AccessProfile>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {string} id ID of the Access Profile to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfile(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfileBulkDeleteRequest} accessProfileBulkDeleteRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfilesInBulk(accessProfileBulkDeleteRequest: AccessProfileBulkDeleteRequest, axiosOptions?: any): AxiosPromise<AccessProfileBulkDeleteResponse>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {string} id ID of the Access Profile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfile(id: string, axiosOptions?: any): AxiosPromise<AccessProfile>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profile\'s Entitlements
     * @param {string} id ID of the access profile containing the entitlements.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfileEntitlements(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<Entitlement>>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profiles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Composite operators supported: *and, or*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessProfiles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: any): AxiosPromise<Array<AccessProfile>>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable:  **name**  **description**  **enabled**  **owner**  **requestable**  **accessRequestConfig**  **revokeRequestConfig**  **segments**  **entitlements**  **provisioningCriteria**  **source** (must be updated with entitlements belonging to new source in the same API call)  If you need to change the `source` of the access profile, you can do so only if you update the `entitlements` in the same API call.  The new entitlements can only come from the target source that you want to change to.  Look for the example \"Replace Source\" in the examples dropdown.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {string} id ID of the Access Profile to patch
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAccessProfile(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<AccessProfile>;
};
/**
 * Request parameters for createAccessProfile operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiCreateAccessProfileRequest
 */
export interface AccessProfilesApiCreateAccessProfileRequest {
    /**
     *
     * @type {AccessProfile}
     * @memberof AccessProfilesApiCreateAccessProfile
     */
    readonly accessProfile: AccessProfile;
}
/**
 * Request parameters for deleteAccessProfile operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiDeleteAccessProfileRequest
 */
export interface AccessProfilesApiDeleteAccessProfileRequest {
    /**
     * ID of the Access Profile to delete
     * @type {string}
     * @memberof AccessProfilesApiDeleteAccessProfile
     */
    readonly id: string;
}
/**
 * Request parameters for deleteAccessProfilesInBulk operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiDeleteAccessProfilesInBulkRequest
 */
export interface AccessProfilesApiDeleteAccessProfilesInBulkRequest {
    /**
     *
     * @type {AccessProfileBulkDeleteRequest}
     * @memberof AccessProfilesApiDeleteAccessProfilesInBulk
     */
    readonly accessProfileBulkDeleteRequest: AccessProfileBulkDeleteRequest;
}
/**
 * Request parameters for getAccessProfile operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiGetAccessProfileRequest
 */
export interface AccessProfilesApiGetAccessProfileRequest {
    /**
     * ID of the Access Profile
     * @type {string}
     * @memberof AccessProfilesApiGetAccessProfile
     */
    readonly id: string;
}
/**
 * Request parameters for getAccessProfileEntitlements operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiGetAccessProfileEntitlementsRequest
 */
export interface AccessProfilesApiGetAccessProfileEntitlementsRequest {
    /**
     * ID of the access profile containing the entitlements.
     * @type {string}
     * @memberof AccessProfilesApiGetAccessProfileEntitlements
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesApiGetAccessProfileEntitlements
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesApiGetAccessProfileEntitlements
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessProfilesApiGetAccessProfileEntitlements
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @type {string}
     * @memberof AccessProfilesApiGetAccessProfileEntitlements
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @type {string}
     * @memberof AccessProfilesApiGetAccessProfileEntitlements
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listAccessProfiles operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiListAccessProfilesRequest
 */
export interface AccessProfilesApiListAccessProfilesRequest {
    /**
     * If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @type {string}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly forSubadmin?: string;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Composite operators supported: *and, or*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @type {string}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly sorters?: string;
    /**
     * If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @type {string}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly forSegmentIds?: string;
    /**
     * Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @type {boolean}
     * @memberof AccessProfilesApiListAccessProfiles
     */
    readonly includeUnsegmented?: boolean;
}
/**
 * Request parameters for patchAccessProfile operation in AccessProfilesApi.
 * @export
 * @interface AccessProfilesApiPatchAccessProfileRequest
 */
export interface AccessProfilesApiPatchAccessProfileRequest {
    /**
     * ID of the Access Profile to patch
     * @type {string}
     * @memberof AccessProfilesApiPatchAccessProfile
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperation>}
     * @memberof AccessProfilesApiPatchAccessProfile
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * AccessProfilesApi - object-oriented interface
 * @export
 * @class AccessProfilesApi
 * @extends {BaseAPI}
 */
export declare class AccessProfilesApi extends BaseAPI {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles. However, any new access profiles as well as any updates to existing descriptions are limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfilesApiCreateAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    createAccessProfile(requestParameters: AccessProfilesApiCreateAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfile, any>>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {AccessProfilesApiDeleteAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    deleteAccessProfile(requestParameters: AccessProfilesApiDeleteAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfilesApiDeleteAccessProfilesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    deleteAccessProfilesInBulk(requestParameters: AccessProfilesApiDeleteAccessProfilesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileBulkDeleteResponse, any>>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {AccessProfilesApiGetAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    getAccessProfile(requestParameters: AccessProfilesApiGetAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfile, any>>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profile\'s Entitlements
     * @param {AccessProfilesApiGetAccessProfileEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    getAccessProfileEntitlements(requestParameters: AccessProfilesApiGetAccessProfileEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Entitlement[], any>>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**Note:** When you filter for access profiles that have the \'+\' symbol in their names, the response is blank.
     * @summary List Access Profiles
     * @param {AccessProfilesApiListAccessProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    listAccessProfiles(requestParameters?: AccessProfilesApiListAccessProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfile[], any>>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable:  **name**  **description**  **enabled**  **owner**  **requestable**  **accessRequestConfig**  **revokeRequestConfig**  **segments**  **entitlements**  **provisioningCriteria**  **source** (must be updated with entitlements belonging to new source in the same API call)  If you need to change the `source` of the access profile, you can do so only if you update the `entitlements` in the same API call.  The new entitlements can only come from the target source that you want to change to.  Look for the example \"Replace Source\" in the examples dropdown.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {AccessProfilesApiPatchAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesApi
     */
    patchAccessProfile(requestParameters: AccessProfilesApiPatchAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfile, any>>;
}
/**
 * AccessRequestApprovalsApi - axios parameter creator
 * @export
 */
export declare const AccessRequestApprovalsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDto} commentDto Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveAccessRequest: (approvalId: string, commentDto: CommentDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {ForwardApprovalDto} forwardApprovalDto Information about the forwarded approval.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardAccessRequest: (approvalId: string, forwardApprovalDto: ForwardApprovalDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information. info.
     * @summary Get Access Requests Approvals Number
     * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestApprovalSummary: (ownerId?: string, fromDate?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompletedApprovals: (ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPendingApprovals: (ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDto} commentDto Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectAccessRequest: (approvalId: string, commentDto: CommentDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessRequestApprovalsApi - functional programming interface
 * @export
 */
export declare const AccessRequestApprovalsApiFp: (configuration?: Configuration) => {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDto} commentDto Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveAccessRequest(approvalId: string, commentDto: CommentDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {ForwardApprovalDto} forwardApprovalDto Information about the forwarded approval.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardAccessRequest(approvalId: string, forwardApprovalDto: ForwardApprovalDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information. info.
     * @summary Get Access Requests Approvals Number
     * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestApprovalSummary(ownerId?: string, fromDate?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalSummary>>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompletedApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompletedApproval>>>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPendingApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PendingApproval>>>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDto} commentDto Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectAccessRequest(approvalId: string, commentDto: CommentDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * AccessRequestApprovalsApi - factory interface
 * @export
 */
export declare const AccessRequestApprovalsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDto} commentDto Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveAccessRequest(approvalId: string, commentDto: CommentDto, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {ForwardApprovalDto} forwardApprovalDto Information about the forwarded approval.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardAccessRequest(approvalId: string, forwardApprovalDto: ForwardApprovalDto, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information. info.
     * @summary Get Access Requests Approvals Number
     * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestApprovalSummary(ownerId?: string, fromDate?: string, axiosOptions?: any): AxiosPromise<ApprovalSummary>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompletedApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<CompletedApproval>>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPendingApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<PendingApproval>>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDto} commentDto Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectAccessRequest(approvalId: string, commentDto: CommentDto, axiosOptions?: any): AxiosPromise<object>;
};
/**
 * Request parameters for approveAccessRequest operation in AccessRequestApprovalsApi.
 * @export
 * @interface AccessRequestApprovalsApiApproveAccessRequestRequest
 */
export interface AccessRequestApprovalsApiApproveAccessRequestRequest {
    /**
     * Approval ID.
     * @type {string}
     * @memberof AccessRequestApprovalsApiApproveAccessRequest
     */
    readonly approvalId: string;
    /**
     * Reviewer\&#39;s comment.
     * @type {CommentDto}
     * @memberof AccessRequestApprovalsApiApproveAccessRequest
     */
    readonly commentDto: CommentDto;
}
/**
 * Request parameters for forwardAccessRequest operation in AccessRequestApprovalsApi.
 * @export
 * @interface AccessRequestApprovalsApiForwardAccessRequestRequest
 */
export interface AccessRequestApprovalsApiForwardAccessRequestRequest {
    /**
     * Approval ID.
     * @type {string}
     * @memberof AccessRequestApprovalsApiForwardAccessRequest
     */
    readonly approvalId: string;
    /**
     * Information about the forwarded approval.
     * @type {ForwardApprovalDto}
     * @memberof AccessRequestApprovalsApiForwardAccessRequest
     */
    readonly forwardApprovalDto: ForwardApprovalDto;
}
/**
 * Request parameters for getAccessRequestApprovalSummary operation in AccessRequestApprovalsApi.
 * @export
 * @interface AccessRequestApprovalsApiGetAccessRequestApprovalSummaryRequest
 */
export interface AccessRequestApprovalsApiGetAccessRequestApprovalSummaryRequest {
    /**
     * The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @type {string}
     * @memberof AccessRequestApprovalsApiGetAccessRequestApprovalSummary
     */
    readonly ownerId?: string;
    /**
     * This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @type {string}
     * @memberof AccessRequestApprovalsApiGetAccessRequestApprovalSummary
     */
    readonly fromDate?: string;
}
/**
 * Request parameters for listCompletedApprovals operation in AccessRequestApprovalsApi.
 * @export
 * @interface AccessRequestApprovalsApiListCompletedApprovalsRequest
 */
export interface AccessRequestApprovalsApiListCompletedApprovalsRequest {
    /**
     * If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @type {string}
     * @memberof AccessRequestApprovalsApiListCompletedApprovals
     */
    readonly ownerId?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsApiListCompletedApprovals
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsApiListCompletedApprovals
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessRequestApprovalsApiListCompletedApprovals
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @type {string}
     * @memberof AccessRequestApprovalsApiListCompletedApprovals
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof AccessRequestApprovalsApiListCompletedApprovals
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listPendingApprovals operation in AccessRequestApprovalsApi.
 * @export
 * @interface AccessRequestApprovalsApiListPendingApprovalsRequest
 */
export interface AccessRequestApprovalsApiListPendingApprovalsRequest {
    /**
     * If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @type {string}
     * @memberof AccessRequestApprovalsApiListPendingApprovals
     */
    readonly ownerId?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsApiListPendingApprovals
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsApiListPendingApprovals
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessRequestApprovalsApiListPendingApprovals
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @type {string}
     * @memberof AccessRequestApprovalsApiListPendingApprovals
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof AccessRequestApprovalsApiListPendingApprovals
     */
    readonly sorters?: string;
}
/**
 * Request parameters for rejectAccessRequest operation in AccessRequestApprovalsApi.
 * @export
 * @interface AccessRequestApprovalsApiRejectAccessRequestRequest
 */
export interface AccessRequestApprovalsApiRejectAccessRequestRequest {
    /**
     * Approval ID.
     * @type {string}
     * @memberof AccessRequestApprovalsApiRejectAccessRequest
     */
    readonly approvalId: string;
    /**
     * Reviewer\&#39;s comment.
     * @type {CommentDto}
     * @memberof AccessRequestApprovalsApiRejectAccessRequest
     */
    readonly commentDto: CommentDto;
}
/**
 * AccessRequestApprovalsApi - object-oriented interface
 * @export
 * @class AccessRequestApprovalsApi
 * @extends {BaseAPI}
 */
export declare class AccessRequestApprovalsApi extends BaseAPI {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {AccessRequestApprovalsApiApproveAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsApi
     */
    approveAccessRequest(requestParameters: AccessRequestApprovalsApiApproveAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {AccessRequestApprovalsApiForwardAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsApi
     */
    forwardAccessRequest(requestParameters: AccessRequestApprovalsApiForwardAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information. info.
     * @summary Get Access Requests Approvals Number
     * @param {AccessRequestApprovalsApiGetAccessRequestApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsApi
     */
    getAccessRequestApprovalSummary(requestParameters?: AccessRequestApprovalsApiGetAccessRequestApprovalSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApprovalSummary, any>>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {AccessRequestApprovalsApiListCompletedApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsApi
     */
    listCompletedApprovals(requestParameters?: AccessRequestApprovalsApiListCompletedApprovalsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedApproval[], any>>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {AccessRequestApprovalsApiListPendingApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsApi
     */
    listPendingApprovals(requestParameters?: AccessRequestApprovalsApiListPendingApprovalsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PendingApproval[], any>>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {AccessRequestApprovalsApiRejectAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsApi
     */
    rejectAccessRequest(requestParameters: AccessRequestApprovalsApiRejectAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * AccessRequestsApi - axios parameter creator
 * @export
 */
export declare const AccessRequestsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {CancelAccessRequest} cancelAccessRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelAccessRequest: (cancelAccessRequest: CancelAccessRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequest} accessRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessRequest: (accessRequest: AccessRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessRequestStatus: (requestedFor?: string, requestedBy?: string, regardingIdentity?: string, assignedTo?: string, count?: boolean, limit?: number, offset?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestConfig} accessRequestConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setAccessRequestConfig: (accessRequestConfig: AccessRequestConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessRequestsApi - functional programming interface
 * @export
 */
export declare const AccessRequestsApiFp: (configuration?: Configuration) => {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {CancelAccessRequest} cancelAccessRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelAccessRequest(cancelAccessRequest: CancelAccessRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequest} accessRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessRequest(accessRequest: AccessRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestConfig>>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessRequestStatus(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, assignedTo?: string, count?: boolean, limit?: number, offset?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestedItemStatus>>>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestConfig} accessRequestConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setAccessRequestConfig(accessRequestConfig: AccessRequestConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestConfig>>;
};
/**
 * AccessRequestsApi - factory interface
 * @export
 */
export declare const AccessRequestsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {CancelAccessRequest} cancelAccessRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelAccessRequest(cancelAccessRequest: CancelAccessRequest, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequest} accessRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessRequest(accessRequest: AccessRequest, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestConfig(axiosOptions?: any): AxiosPromise<AccessRequestConfig>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessRequestStatus(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, assignedTo?: string, count?: boolean, limit?: number, offset?: number, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<RequestedItemStatus>>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestConfig} accessRequestConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setAccessRequestConfig(accessRequestConfig: AccessRequestConfig, axiosOptions?: any): AxiosPromise<AccessRequestConfig>;
};
/**
 * Request parameters for cancelAccessRequest operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiCancelAccessRequestRequest
 */
export interface AccessRequestsApiCancelAccessRequestRequest {
    /**
     *
     * @type {CancelAccessRequest}
     * @memberof AccessRequestsApiCancelAccessRequest
     */
    readonly cancelAccessRequest: CancelAccessRequest;
}
/**
 * Request parameters for createAccessRequest operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiCreateAccessRequestRequest
 */
export interface AccessRequestsApiCreateAccessRequestRequest {
    /**
     *
     * @type {AccessRequest}
     * @memberof AccessRequestsApiCreateAccessRequest
     */
    readonly accessRequest: AccessRequest;
}
/**
 * Request parameters for listAccessRequestStatus operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiListAccessRequestStatusRequest
 */
export interface AccessRequestsApiListAccessRequestStatusRequest {
    /**
     * Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly requestedFor?: string;
    /**
     * Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly requestedBy?: string;
    /**
     * Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @type {string}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly regardingIdentity?: string;
    /**
     * Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @type {string}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly assignedTo?: string;
    /**
     * If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @type {boolean}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly count?: boolean;
    /**
     * Max number of results to return.
     * @type {number}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @type {number}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @type {string}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @type {string}
     * @memberof AccessRequestsApiListAccessRequestStatus
     */
    readonly sorters?: string;
}
/**
 * Request parameters for setAccessRequestConfig operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiSetAccessRequestConfigRequest
 */
export interface AccessRequestsApiSetAccessRequestConfigRequest {
    /**
     *
     * @type {AccessRequestConfig}
     * @memberof AccessRequestsApiSetAccessRequestConfig
     */
    readonly accessRequestConfig: AccessRequestConfig;
}
/**
 * AccessRequestsApi - object-oriented interface
 * @export
 * @class AccessRequestsApi
 * @extends {BaseAPI}
 */
export declare class AccessRequestsApi extends BaseAPI {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {AccessRequestsApiCancelAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApi
     */
    cancelAccessRequest(requestParameters: AccessRequestsApiCancelAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequestsApiCreateAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApi
     */
    createAccessRequest(requestParameters: AccessRequestsApiCreateAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApi
     */
    getAccessRequestConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestConfig, any>>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {AccessRequestsApiListAccessRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApi
     */
    listAccessRequestStatus(requestParameters?: AccessRequestsApiListAccessRequestStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RequestedItemStatus[], any>>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestsApiSetAccessRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApi
     */
    setAccessRequestConfig(requestParameters: AccessRequestsApiSetAccessRequestConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestConfig, any>>;
}
/**
 * AccountActivitiesApi - axios parameter creator
 * @export
 */
export declare const AccountActivitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This gets a single account activity by its id.
     * @summary Get an Account Activity
     * @param {string} id The account activity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountActivity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccountActivities: (requestedFor?: string, requestedBy?: string, regardingIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountActivitiesApi - functional programming interface
 * @export
 */
export declare const AccountActivitiesApiFp: (configuration?: Configuration) => {
    /**
     * This gets a single account activity by its id.
     * @summary Get an Account Activity
     * @param {string} id The account activity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountActivity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountActivity>>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccountActivities(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountActivity>>>;
};
/**
 * AccountActivitiesApi - factory interface
 * @export
 */
export declare const AccountActivitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This gets a single account activity by its id.
     * @summary Get an Account Activity
     * @param {string} id The account activity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountActivity(id: string, axiosOptions?: any): AxiosPromise<AccountActivity>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccountActivities(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccountActivity>>;
};
/**
 * Request parameters for getAccountActivity operation in AccountActivitiesApi.
 * @export
 * @interface AccountActivitiesApiGetAccountActivityRequest
 */
export interface AccountActivitiesApiGetAccountActivityRequest {
    /**
     * The account activity id
     * @type {string}
     * @memberof AccountActivitiesApiGetAccountActivity
     */
    readonly id: string;
}
/**
 * Request parameters for listAccountActivities operation in AccountActivitiesApi.
 * @export
 * @interface AccountActivitiesApiListAccountActivitiesRequest
 */
export interface AccountActivitiesApiListAccountActivitiesRequest {
    /**
     * The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly requestedFor?: string;
    /**
     * The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly requestedBy?: string;
    /**
     * The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @type {string}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly regardingIdentity?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @type {string}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @type {string}
     * @memberof AccountActivitiesApiListAccountActivities
     */
    readonly sorters?: string;
}
/**
 * AccountActivitiesApi - object-oriented interface
 * @export
 * @class AccountActivitiesApi
 * @extends {BaseAPI}
 */
export declare class AccountActivitiesApi extends BaseAPI {
    /**
     * This gets a single account activity by its id.
     * @summary Get an Account Activity
     * @param {AccountActivitiesApiGetAccountActivityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountActivitiesApi
     */
    getAccountActivity(requestParameters: AccountActivitiesApiGetAccountActivityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountActivity, any>>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {AccountActivitiesApiListAccountActivitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountActivitiesApi
     */
    listAccountActivities(requestParameters?: AccountActivitiesApiListAccountActivitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountActivity[], any>>;
}
/**
 * AccountUsagesApi - axios parameter creator
 * @export
 */
export declare const AccountUsagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {string} accountId ID of IDN account
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesByAccountId: (accountId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountUsagesApi - functional programming interface
 * @export
 */
export declare const AccountUsagesApiFp: (configuration?: Configuration) => {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {string} accountId ID of IDN account
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesByAccountId(accountId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountUsage>>>;
};
/**
 * AccountUsagesApi - factory interface
 * @export
 */
export declare const AccountUsagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {string} accountId ID of IDN account
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesByAccountId(accountId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccountUsage>>;
};
/**
 * Request parameters for getUsagesByAccountId operation in AccountUsagesApi.
 * @export
 * @interface AccountUsagesApiGetUsagesByAccountIdRequest
 */
export interface AccountUsagesApiGetUsagesByAccountIdRequest {
    /**
     * ID of IDN account
     * @type {string}
     * @memberof AccountUsagesApiGetUsagesByAccountId
     */
    readonly accountId: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountUsagesApiGetUsagesByAccountId
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountUsagesApiGetUsagesByAccountId
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountUsagesApiGetUsagesByAccountId
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @type {string}
     * @memberof AccountUsagesApiGetUsagesByAccountId
     */
    readonly sorters?: string;
}
/**
 * AccountUsagesApi - object-oriented interface
 * @export
 * @class AccountUsagesApi
 * @extends {BaseAPI}
 */
export declare class AccountUsagesApi extends BaseAPI {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {AccountUsagesApiGetUsagesByAccountIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountUsagesApi
     */
    getUsagesByAccountId(requestParameters: AccountUsagesApiGetUsagesByAccountIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountUsage[], any>>;
}
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export declare const AccountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API submits an account creation task and returns the task ID.   You must include the `sourceId` where the account will be created in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountAttributesCreate} accountAttributesCreate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccount: (accountAttributesCreate: AccountAttributesCreate, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE: You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {string} id The account id
     * @param {AccountToggleRequest} accountToggleRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccount: (id: string, accountToggleRequest: AccountToggleRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {string} id The account id
     * @param {AccountToggleRequest} accountToggleRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccount: (id: string, accountToggleRequest: AccountToggleRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccount: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {string} id The account id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEntitlements: (id: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {AccountAttributes} accountAttributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putAccount: (id: string, accountAttributes: AccountAttributes, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReloadAccount: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {string} id The account ID.
     * @param {AccountUnlockRequest} accountUnlockRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unlockAccount: (id: string, accountUnlockRequest: AccountUnlockRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount: (id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsApi - functional programming interface
 * @export
 */
export declare const AccountsApiFp: (configuration?: Configuration) => {
    /**
     * This API submits an account creation task and returns the task ID.   You must include the `sourceId` where the account will be created in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountAttributesCreate} accountAttributesCreate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(accountAttributesCreate: AccountAttributesCreate, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE: You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {string} id The account id
     * @param {AccountToggleRequest} accountToggleRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccount(id: string, accountToggleRequest: AccountToggleRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {string} id The account id
     * @param {AccountToggleRequest} accountToggleRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccount(id: string, accountToggleRequest: AccountToggleRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {string} id The account id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEntitlements(id: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementDto>>>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {AccountAttributes} accountAttributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putAccount(id: string, accountAttributes: AccountAttributes, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReloadAccount(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {string} id The account ID.
     * @param {AccountUnlockRequest} accountUnlockRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unlockAccount(id: string, accountUnlockRequest: AccountUnlockRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResult>>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * AccountsApi - factory interface
 * @export
 */
export declare const AccountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API submits an account creation task and returns the task ID.   You must include the `sourceId` where the account will be created in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountAttributesCreate} accountAttributesCreate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(accountAttributesCreate: AccountAttributesCreate, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE: You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(id: string, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {string} id The account id
     * @param {AccountToggleRequest} accountToggleRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccount(id: string, accountToggleRequest: AccountToggleRequest, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {string} id The account id
     * @param {AccountToggleRequest} accountToggleRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccount(id: string, accountToggleRequest: AccountToggleRequest, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(id: string, axiosOptions?: any): AxiosPromise<Account>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {string} id The account id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEntitlements(id: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<EntitlementDto>>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<Account>>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {AccountAttributes} accountAttributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putAccount(id: string, accountAttributes: AccountAttributes, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReloadAccount(id: string, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {string} id The account ID.
     * @param {AccountUnlockRequest} accountUnlockRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unlockAccount(id: string, accountUnlockRequest: AccountUnlockRequest, axiosOptions?: any): AxiosPromise<AccountsAsyncResult>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(id: string, requestBody: Array<object>, axiosOptions?: any): AxiosPromise<object>;
};
/**
 * Request parameters for createAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateAccountRequest
 */
export interface AccountsApiCreateAccountRequest {
    /**
     *
     * @type {AccountAttributesCreate}
     * @memberof AccountsApiCreateAccount
     */
    readonly accountAttributesCreate: AccountAttributesCreate;
}
/**
 * Request parameters for deleteAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteAccountRequest
 */
export interface AccountsApiDeleteAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsApiDeleteAccount
     */
    readonly id: string;
}
/**
 * Request parameters for disableAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDisableAccountRequest
 */
export interface AccountsApiDisableAccountRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsApiDisableAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountToggleRequest}
     * @memberof AccountsApiDisableAccount
     */
    readonly accountToggleRequest: AccountToggleRequest;
}
/**
 * Request parameters for enableAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiEnableAccountRequest
 */
export interface AccountsApiEnableAccountRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsApiEnableAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountToggleRequest}
     * @memberof AccountsApiEnableAccount
     */
    readonly accountToggleRequest: AccountToggleRequest;
}
/**
 * Request parameters for getAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountRequest
 */
export interface AccountsApiGetAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsApiGetAccount
     */
    readonly id: string;
}
/**
 * Request parameters for getAccountEntitlements operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountEntitlementsRequest
 */
export interface AccountsApiGetAccountEntitlementsRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsApiGetAccountEntitlements
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsApiGetAccountEntitlements
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsApiGetAccountEntitlements
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountsApiGetAccountEntitlements
     */
    readonly count?: boolean;
}
/**
 * Request parameters for listAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiListAccountsRequest
 */
export interface AccountsApiListAccountsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsApiListAccounts
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsApiListAccounts
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountsApiListAccounts
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @type {string}
     * @memberof AccountsApiListAccounts
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @type {string}
     * @memberof AccountsApiListAccounts
     */
    readonly sorters?: string;
}
/**
 * Request parameters for putAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiPutAccountRequest
 */
export interface AccountsApiPutAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsApiPutAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountAttributes}
     * @memberof AccountsApiPutAccount
     */
    readonly accountAttributes: AccountAttributes;
}
/**
 * Request parameters for submitReloadAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiSubmitReloadAccountRequest
 */
export interface AccountsApiSubmitReloadAccountRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsApiSubmitReloadAccount
     */
    readonly id: string;
}
/**
 * Request parameters for unlockAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUnlockAccountRequest
 */
export interface AccountsApiUnlockAccountRequest {
    /**
     * The account ID.
     * @type {string}
     * @memberof AccountsApiUnlockAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountUnlockRequest}
     * @memberof AccountsApiUnlockAccount
     */
    readonly accountUnlockRequest: AccountUnlockRequest;
}
/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export interface AccountsApiUpdateAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsApiUpdateAccount
     */
    readonly id: string;
    /**
     * A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<object>}
     * @memberof AccountsApiUpdateAccount
     */
    readonly requestBody: Array<object>;
}
/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export declare class AccountsApi extends BaseAPI {
    /**
     * This API submits an account creation task and returns the task ID.   You must include the `sourceId` where the account will be created in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountsApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    createAccount(requestParameters: AccountsApiCreateAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE: You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {AccountsApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    deleteAccount(requestParameters: AccountsApiDeleteAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {AccountsApiDisableAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    disableAccount(requestParameters: AccountsApiDisableAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {AccountsApiEnableAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    enableAccount(requestParameters: AccountsApiEnableAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccount(requestParameters: AccountsApiGetAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account, any>>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {AccountsApiGetAccountEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    getAccountEntitlements(requestParameters: AccountsApiGetAccountEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementDto[], any>>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {AccountsApiListAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    listAccounts(requestParameters?: AccountsApiListAccountsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account[], any>>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {AccountsApiPutAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    putAccount(requestParameters: AccountsApiPutAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {AccountsApiSubmitReloadAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    submitReloadAccount(requestParameters: AccountsApiSubmitReloadAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {AccountsApiUnlockAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    unlockAccount(requestParameters: AccountsApiUnlockAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResult, any>>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    updateAccount(requestParameters: AccountsApiUpdateAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * ApplicationDiscoveryApi - axios parameter creator
 * @export
 */
export declare const ApplicationDiscoveryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDiscoveredApplications: (limit?: number, offset?: number, filter?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManualDiscoverApplicationsCsvTemplate: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getVendorConnectorMappings: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendManualDiscoverApplicationsCsvTemplate: (file: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApplicationDiscoveryApi - functional programming interface
 * @export
 */
export declare const ApplicationDiscoveryApiFp: (configuration?: Configuration) => {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDiscoveredApplications(limit?: number, offset?: number, filter?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<DiscoveredApplicationsInner>>>>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManualDiscoverApplicationsCsvTemplate(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManualDiscoverApplicationsTemplate>>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getVendorConnectorMappings(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorConnectorMapping>>>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendManualDiscoverApplicationsCsvTemplate(file: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ApplicationDiscoveryApi - factory interface
 * @export
 */
export declare const ApplicationDiscoveryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDiscoveredApplications(limit?: number, offset?: number, filter?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<Array<DiscoveredApplicationsInner>>>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManualDiscoverApplicationsCsvTemplate(axiosOptions?: any): AxiosPromise<ManualDiscoverApplicationsTemplate>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getVendorConnectorMappings(axiosOptions?: any): AxiosPromise<Array<VendorConnectorMapping>>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendManualDiscoverApplicationsCsvTemplate(file: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getDiscoveredApplications operation in ApplicationDiscoveryApi.
 * @export
 * @interface ApplicationDiscoveryApiGetDiscoveredApplicationsRequest
 */
export interface ApplicationDiscoveryApiGetDiscoveredApplicationsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ApplicationDiscoveryApiGetDiscoveredApplications
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ApplicationDiscoveryApiGetDiscoveredApplications
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @type {string}
     * @memberof ApplicationDiscoveryApiGetDiscoveredApplications
     */
    readonly filter?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @type {string}
     * @memberof ApplicationDiscoveryApiGetDiscoveredApplications
     */
    readonly sorters?: string;
}
/**
 * Request parameters for sendManualDiscoverApplicationsCsvTemplate operation in ApplicationDiscoveryApi.
 * @export
 * @interface ApplicationDiscoveryApiSendManualDiscoverApplicationsCsvTemplateRequest
 */
export interface ApplicationDiscoveryApiSendManualDiscoverApplicationsCsvTemplateRequest {
    /**
     * The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @type {any}
     * @memberof ApplicationDiscoveryApiSendManualDiscoverApplicationsCsvTemplate
     */
    readonly file: any;
}
/**
 * ApplicationDiscoveryApi - object-oriented interface
 * @export
 * @class ApplicationDiscoveryApi
 * @extends {BaseAPI}
 */
export declare class ApplicationDiscoveryApi extends BaseAPI {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {ApplicationDiscoveryApiGetDiscoveredApplicationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryApi
     */
    getDiscoveredApplications(requestParameters?: ApplicationDiscoveryApiGetDiscoveredApplicationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiscoveredApplicationsInner[][], any>>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryApi
     */
    getManualDiscoverApplicationsCsvTemplate(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManualDiscoverApplicationsTemplate, any>>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryApi
     */
    getVendorConnectorMappings(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VendorConnectorMapping[], any>>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {ApplicationDiscoveryApiSendManualDiscoverApplicationsCsvTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryApi
     */
    sendManualDiscoverApplicationsCsvTemplate(requestParameters: ApplicationDiscoveryApiSendManualDiscoverApplicationsCsvTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * AuthUsersApi - axios parameter creator
 * @export
 */
export declare const AuthUsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return the specified user\'s authentication system details.
     * @summary Auth User Details
     * @param {string} id Identity ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthUser: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use a PATCH request to update an existing user in the authentication system. Use this endpoint to modify these fields:    * `capabilities`  A \'400.1.1 Illegal update attempt\' detail code indicates that you attempted to PATCH a field that is not allowed.
     * @summary Auth User Update
     * @param {string} id Identity ID
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth user update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthUser: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthUsersApi - functional programming interface
 * @export
 */
export declare const AuthUsersApiFp: (configuration?: Configuration) => {
    /**
     * Return the specified user\'s authentication system details.
     * @summary Auth User Details
     * @param {string} id Identity ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthUser(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
    /**
     * Use a PATCH request to update an existing user in the authentication system. Use this endpoint to modify these fields:    * `capabilities`  A \'400.1.1 Illegal update attempt\' detail code indicates that you attempted to PATCH a field that is not allowed.
     * @summary Auth User Update
     * @param {string} id Identity ID
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth user update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthUser(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
};
/**
 * AuthUsersApi - factory interface
 * @export
 */
export declare const AuthUsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return the specified user\'s authentication system details.
     * @summary Auth User Details
     * @param {string} id Identity ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthUser(id: string, axiosOptions?: any): AxiosPromise<AuthUser>;
    /**
     * Use a PATCH request to update an existing user in the authentication system. Use this endpoint to modify these fields:    * `capabilities`  A \'400.1.1 Illegal update attempt\' detail code indicates that you attempted to PATCH a field that is not allowed.
     * @summary Auth User Update
     * @param {string} id Identity ID
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth user update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthUser(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<AuthUser>;
};
/**
 * Request parameters for getAuthUser operation in AuthUsersApi.
 * @export
 * @interface AuthUsersApiGetAuthUserRequest
 */
export interface AuthUsersApiGetAuthUserRequest {
    /**
     * Identity ID
     * @type {string}
     * @memberof AuthUsersApiGetAuthUser
     */
    readonly id: string;
}
/**
 * Request parameters for patchAuthUser operation in AuthUsersApi.
 * @export
 * @interface AuthUsersApiPatchAuthUserRequest
 */
export interface AuthUsersApiPatchAuthUserRequest {
    /**
     * Identity ID
     * @type {string}
     * @memberof AuthUsersApiPatchAuthUser
     */
    readonly id: string;
    /**
     * A list of auth user update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperation>}
     * @memberof AuthUsersApiPatchAuthUser
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * AuthUsersApi - object-oriented interface
 * @export
 * @class AuthUsersApi
 * @extends {BaseAPI}
 */
export declare class AuthUsersApi extends BaseAPI {
    /**
     * Return the specified user\'s authentication system details.
     * @summary Auth User Details
     * @param {AuthUsersApiGetAuthUserRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthUsersApi
     */
    getAuthUser(requestParameters: AuthUsersApiGetAuthUserRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
    /**
     * Use a PATCH request to update an existing user in the authentication system. Use this endpoint to modify these fields:    * `capabilities`  A \'400.1.1 Illegal update attempt\' detail code indicates that you attempted to PATCH a field that is not allowed.
     * @summary Auth User Update
     * @param {AuthUsersApiPatchAuthUserRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthUsersApi
     */
    patchAuthUser(requestParameters: AuthUsersApiPatchAuthUserRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
}
/**
 * BrandingApi - axios parameter creator
 * @export
 */
export declare const BrandingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API endpoint creates a branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Create a branding item
     * @param {string} name name of branding item
     * @param {string} productName product name
     * @param {string} [actionButtonColor] hex value of color for action button
     * @param {string} [activeLinkColor] hex value of color for link
     * @param {string} [navigationColor] hex value of color for navigation bar
     * @param {string} [emailFromAddress] email from address
     * @param {string} [loginInformationalMessage] login information message
     * @param {any} [fileStandard] png file with logo
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createBrandingItem: (name: string, productName: string, actionButtonColor?: string, activeLinkColor?: string, navigationColor?: string, emailFromAddress?: string, loginInformationalMessage?: string, fileStandard?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint delete information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Delete a branding item
     * @param {string} name The name of the branding item to be deleted
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBranding: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint retrieves information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Get a branding item
     * @param {string} name The name of the branding item to be retrieved
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getBranding: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint returns a list of branding items.  A token with API, ORG_ADMIN authority is required to call this API.
     * @summary List of branding items
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getBrandingList: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint updates information for an existing branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Update a branding item
     * @param {string} name The name of the branding item to be retrieved
     * @param {string} name2 name of branding item
     * @param {string} productName product name
     * @param {string} [actionButtonColor] hex value of color for action button
     * @param {string} [activeLinkColor] hex value of color for link
     * @param {string} [navigationColor] hex value of color for navigation bar
     * @param {string} [emailFromAddress] email from address
     * @param {string} [loginInformationalMessage] login information message
     * @param {any} [fileStandard] png file with logo
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setBrandingItem: (name: string, name2: string, productName: string, actionButtonColor?: string, activeLinkColor?: string, navigationColor?: string, emailFromAddress?: string, loginInformationalMessage?: string, fileStandard?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BrandingApi - functional programming interface
 * @export
 */
export declare const BrandingApiFp: (configuration?: Configuration) => {
    /**
     * This API endpoint creates a branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Create a branding item
     * @param {string} name name of branding item
     * @param {string} productName product name
     * @param {string} [actionButtonColor] hex value of color for action button
     * @param {string} [activeLinkColor] hex value of color for link
     * @param {string} [navigationColor] hex value of color for navigation bar
     * @param {string} [emailFromAddress] email from address
     * @param {string} [loginInformationalMessage] login information message
     * @param {any} [fileStandard] png file with logo
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createBrandingItem(name: string, productName: string, actionButtonColor?: string, activeLinkColor?: string, navigationColor?: string, emailFromAddress?: string, loginInformationalMessage?: string, fileStandard?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandingItem>>;
    /**
     * This API endpoint delete information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Delete a branding item
     * @param {string} name The name of the branding item to be deleted
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBranding(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API endpoint retrieves information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Get a branding item
     * @param {string} name The name of the branding item to be retrieved
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getBranding(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandingItem>>;
    /**
     * This API endpoint returns a list of branding items.  A token with API, ORG_ADMIN authority is required to call this API.
     * @summary List of branding items
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getBrandingList(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrandingItem>>>;
    /**
     * This API endpoint updates information for an existing branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Update a branding item
     * @param {string} name The name of the branding item to be retrieved
     * @param {string} name2 name of branding item
     * @param {string} productName product name
     * @param {string} [actionButtonColor] hex value of color for action button
     * @param {string} [activeLinkColor] hex value of color for link
     * @param {string} [navigationColor] hex value of color for navigation bar
     * @param {string} [emailFromAddress] email from address
     * @param {string} [loginInformationalMessage] login information message
     * @param {any} [fileStandard] png file with logo
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setBrandingItem(name: string, name2: string, productName: string, actionButtonColor?: string, activeLinkColor?: string, navigationColor?: string, emailFromAddress?: string, loginInformationalMessage?: string, fileStandard?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrandingItem>>;
};
/**
 * BrandingApi - factory interface
 * @export
 */
export declare const BrandingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API endpoint creates a branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Create a branding item
     * @param {string} name name of branding item
     * @param {string} productName product name
     * @param {string} [actionButtonColor] hex value of color for action button
     * @param {string} [activeLinkColor] hex value of color for link
     * @param {string} [navigationColor] hex value of color for navigation bar
     * @param {string} [emailFromAddress] email from address
     * @param {string} [loginInformationalMessage] login information message
     * @param {any} [fileStandard] png file with logo
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createBrandingItem(name: string, productName: string, actionButtonColor?: string, activeLinkColor?: string, navigationColor?: string, emailFromAddress?: string, loginInformationalMessage?: string, fileStandard?: any, axiosOptions?: any): AxiosPromise<BrandingItem>;
    /**
     * This API endpoint delete information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Delete a branding item
     * @param {string} name The name of the branding item to be deleted
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBranding(name: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API endpoint retrieves information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Get a branding item
     * @param {string} name The name of the branding item to be retrieved
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getBranding(name: string, axiosOptions?: any): AxiosPromise<BrandingItem>;
    /**
     * This API endpoint returns a list of branding items.  A token with API, ORG_ADMIN authority is required to call this API.
     * @summary List of branding items
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getBrandingList(axiosOptions?: any): AxiosPromise<Array<BrandingItem>>;
    /**
     * This API endpoint updates information for an existing branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Update a branding item
     * @param {string} name The name of the branding item to be retrieved
     * @param {string} name2 name of branding item
     * @param {string} productName product name
     * @param {string} [actionButtonColor] hex value of color for action button
     * @param {string} [activeLinkColor] hex value of color for link
     * @param {string} [navigationColor] hex value of color for navigation bar
     * @param {string} [emailFromAddress] email from address
     * @param {string} [loginInformationalMessage] login information message
     * @param {any} [fileStandard] png file with logo
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setBrandingItem(name: string, name2: string, productName: string, actionButtonColor?: string, activeLinkColor?: string, navigationColor?: string, emailFromAddress?: string, loginInformationalMessage?: string, fileStandard?: any, axiosOptions?: any): AxiosPromise<BrandingItem>;
};
/**
 * Request parameters for createBrandingItem operation in BrandingApi.
 * @export
 * @interface BrandingApiCreateBrandingItemRequest
 */
export interface BrandingApiCreateBrandingItemRequest {
    /**
     * name of branding item
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly name: string;
    /**
     * product name
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly productName: string;
    /**
     * hex value of color for action button
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly actionButtonColor?: string;
    /**
     * hex value of color for link
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly activeLinkColor?: string;
    /**
     * hex value of color for navigation bar
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly navigationColor?: string;
    /**
     * email from address
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly emailFromAddress?: string;
    /**
     * login information message
     * @type {string}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly loginInformationalMessage?: string;
    /**
     * png file with logo
     * @type {any}
     * @memberof BrandingApiCreateBrandingItem
     */
    readonly fileStandard?: any;
}
/**
 * Request parameters for deleteBranding operation in BrandingApi.
 * @export
 * @interface BrandingApiDeleteBrandingRequest
 */
export interface BrandingApiDeleteBrandingRequest {
    /**
     * The name of the branding item to be deleted
     * @type {string}
     * @memberof BrandingApiDeleteBranding
     */
    readonly name: string;
}
/**
 * Request parameters for getBranding operation in BrandingApi.
 * @export
 * @interface BrandingApiGetBrandingRequest
 */
export interface BrandingApiGetBrandingRequest {
    /**
     * The name of the branding item to be retrieved
     * @type {string}
     * @memberof BrandingApiGetBranding
     */
    readonly name: string;
}
/**
 * Request parameters for setBrandingItem operation in BrandingApi.
 * @export
 * @interface BrandingApiSetBrandingItemRequest
 */
export interface BrandingApiSetBrandingItemRequest {
    /**
     * The name of the branding item to be retrieved
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly name: string;
    /**
     * name of branding item
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly name2: string;
    /**
     * product name
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly productName: string;
    /**
     * hex value of color for action button
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly actionButtonColor?: string;
    /**
     * hex value of color for link
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly activeLinkColor?: string;
    /**
     * hex value of color for navigation bar
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly navigationColor?: string;
    /**
     * email from address
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly emailFromAddress?: string;
    /**
     * login information message
     * @type {string}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly loginInformationalMessage?: string;
    /**
     * png file with logo
     * @type {any}
     * @memberof BrandingApiSetBrandingItem
     */
    readonly fileStandard?: any;
}
/**
 * BrandingApi - object-oriented interface
 * @export
 * @class BrandingApi
 * @extends {BaseAPI}
 */
export declare class BrandingApi extends BaseAPI {
    /**
     * This API endpoint creates a branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Create a branding item
     * @param {BrandingApiCreateBrandingItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    createBrandingItem(requestParameters: BrandingApiCreateBrandingItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrandingItem, any>>;
    /**
     * This API endpoint delete information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Delete a branding item
     * @param {BrandingApiDeleteBrandingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    deleteBranding(requestParameters: BrandingApiDeleteBrandingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API endpoint retrieves information for an existing branding item by name. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Get a branding item
     * @param {BrandingApiGetBrandingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    getBranding(requestParameters: BrandingApiGetBrandingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrandingItem, any>>;
    /**
     * This API endpoint returns a list of branding items.  A token with API, ORG_ADMIN authority is required to call this API.
     * @summary List of branding items
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    getBrandingList(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrandingItem[], any>>;
    /**
     * This API endpoint updates information for an existing branding item. A token with API, ORG_ADMIN authority is required to call this API.
     * @summary Update a branding item
     * @param {BrandingApiSetBrandingItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandingApi
     */
    setBrandingItem(requestParameters: BrandingApiSetBrandingItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BrandingItem, any>>;
}
/**
 * CertificationCampaignFiltersApi - axios parameter creator
 * @export
 */
export declare const CertificationCampaignFiltersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to create a campaign filter based on filter details and criteria.
     * @summary Create Campaign Filter
     * @param {CampaignFilterDetails} campaignFilterDetails
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaignFilter: (campaignFilterDetails: CampaignFilterDetails, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes campaign filters whose Ids are specified in the provided list of campaign filter Ids. Authorized callers must be an ORG_ADMIN or a CERT_ADMIN.
     * @summary Deletes Campaign Filters
     * @param {Array<string>} requestBody A json list of IDs of campaign filters to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignFilters: (requestBody: Array<string>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves information for an existing campaign filter using the filter\'s ID.
     * @summary Get Campaign Filter by ID
     * @param {string} filterId The ID of the campaign filter to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignFilterById: (filterId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to list all campaign filters. You can reduce scope with standard V3 query parameters.
     * @summary List Campaign Filters
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [start] Start/Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [includeSystemFilters] If this is true, the API includes system filters in the count and results. Otherwise it excludes them. If no value is provided, the default is true.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCampaignFilters: (limit?: number, start?: number, includeSystemFilters?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing campaign filter using the filter\'s ID.
     * @summary Updates a Campaign Filter
     * @param {string} filterId The ID of the campaign filter being modified.
     * @param {CampaignFilterDetails} campaignFilterDetails A campaign filter details with updated field values.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCampaignFilter: (filterId: string, campaignFilterDetails: CampaignFilterDetails, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CertificationCampaignFiltersApi - functional programming interface
 * @export
 */
export declare const CertificationCampaignFiltersApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to create a campaign filter based on filter details and criteria.
     * @summary Create Campaign Filter
     * @param {CampaignFilterDetails} campaignFilterDetails
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaignFilter(campaignFilterDetails: CampaignFilterDetails, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignFilterDetails>>;
    /**
     * Deletes campaign filters whose Ids are specified in the provided list of campaign filter Ids. Authorized callers must be an ORG_ADMIN or a CERT_ADMIN.
     * @summary Deletes Campaign Filters
     * @param {Array<string>} requestBody A json list of IDs of campaign filters to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignFilters(requestBody: Array<string>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieves information for an existing campaign filter using the filter\'s ID.
     * @summary Get Campaign Filter by ID
     * @param {string} filterId The ID of the campaign filter to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignFilterById(filterId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignFilterDetails>>>;
    /**
     * Use this API to list all campaign filters. You can reduce scope with standard V3 query parameters.
     * @summary List Campaign Filters
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [start] Start/Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [includeSystemFilters] If this is true, the API includes system filters in the count and results. Otherwise it excludes them. If no value is provided, the default is true.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCampaignFilters(limit?: number, start?: number, includeSystemFilters?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCampaignFilters200Response>>;
    /**
     * Updates an existing campaign filter using the filter\'s ID.
     * @summary Updates a Campaign Filter
     * @param {string} filterId The ID of the campaign filter being modified.
     * @param {CampaignFilterDetails} campaignFilterDetails A campaign filter details with updated field values.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCampaignFilter(filterId: string, campaignFilterDetails: CampaignFilterDetails, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignFilterDetails>>;
};
/**
 * CertificationCampaignFiltersApi - factory interface
 * @export
 */
export declare const CertificationCampaignFiltersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to create a campaign filter based on filter details and criteria.
     * @summary Create Campaign Filter
     * @param {CampaignFilterDetails} campaignFilterDetails
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaignFilter(campaignFilterDetails: CampaignFilterDetails, axiosOptions?: any): AxiosPromise<CampaignFilterDetails>;
    /**
     * Deletes campaign filters whose Ids are specified in the provided list of campaign filter Ids. Authorized callers must be an ORG_ADMIN or a CERT_ADMIN.
     * @summary Deletes Campaign Filters
     * @param {Array<string>} requestBody A json list of IDs of campaign filters to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignFilters(requestBody: Array<string>, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Retrieves information for an existing campaign filter using the filter\'s ID.
     * @summary Get Campaign Filter by ID
     * @param {string} filterId The ID of the campaign filter to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignFilterById(filterId: string, axiosOptions?: any): AxiosPromise<Array<CampaignFilterDetails>>;
    /**
     * Use this API to list all campaign filters. You can reduce scope with standard V3 query parameters.
     * @summary List Campaign Filters
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [start] Start/Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [includeSystemFilters] If this is true, the API includes system filters in the count and results. Otherwise it excludes them. If no value is provided, the default is true.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCampaignFilters(limit?: number, start?: number, includeSystemFilters?: boolean, axiosOptions?: any): AxiosPromise<ListCampaignFilters200Response>;
    /**
     * Updates an existing campaign filter using the filter\'s ID.
     * @summary Updates a Campaign Filter
     * @param {string} filterId The ID of the campaign filter being modified.
     * @param {CampaignFilterDetails} campaignFilterDetails A campaign filter details with updated field values.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCampaignFilter(filterId: string, campaignFilterDetails: CampaignFilterDetails, axiosOptions?: any): AxiosPromise<CampaignFilterDetails>;
};
/**
 * Request parameters for createCampaignFilter operation in CertificationCampaignFiltersApi.
 * @export
 * @interface CertificationCampaignFiltersApiCreateCampaignFilterRequest
 */
export interface CertificationCampaignFiltersApiCreateCampaignFilterRequest {
    /**
     *
     * @type {CampaignFilterDetails}
     * @memberof CertificationCampaignFiltersApiCreateCampaignFilter
     */
    readonly campaignFilterDetails: CampaignFilterDetails;
}
/**
 * Request parameters for deleteCampaignFilters operation in CertificationCampaignFiltersApi.
 * @export
 * @interface CertificationCampaignFiltersApiDeleteCampaignFiltersRequest
 */
export interface CertificationCampaignFiltersApiDeleteCampaignFiltersRequest {
    /**
     * A json list of IDs of campaign filters to delete.
     * @type {Array<string>}
     * @memberof CertificationCampaignFiltersApiDeleteCampaignFilters
     */
    readonly requestBody: Array<string>;
}
/**
 * Request parameters for getCampaignFilterById operation in CertificationCampaignFiltersApi.
 * @export
 * @interface CertificationCampaignFiltersApiGetCampaignFilterByIdRequest
 */
export interface CertificationCampaignFiltersApiGetCampaignFilterByIdRequest {
    /**
     * The ID of the campaign filter to be retrieved.
     * @type {string}
     * @memberof CertificationCampaignFiltersApiGetCampaignFilterById
     */
    readonly filterId: string;
}
/**
 * Request parameters for listCampaignFilters operation in CertificationCampaignFiltersApi.
 * @export
 * @interface CertificationCampaignFiltersApiListCampaignFiltersRequest
 */
export interface CertificationCampaignFiltersApiListCampaignFiltersRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignFiltersApiListCampaignFilters
     */
    readonly limit?: number;
    /**
     * Start/Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignFiltersApiListCampaignFilters
     */
    readonly start?: number;
    /**
     * If this is true, the API includes system filters in the count and results. Otherwise it excludes them. If no value is provided, the default is true.
     * @type {boolean}
     * @memberof CertificationCampaignFiltersApiListCampaignFilters
     */
    readonly includeSystemFilters?: boolean;
}
/**
 * Request parameters for updateCampaignFilter operation in CertificationCampaignFiltersApi.
 * @export
 * @interface CertificationCampaignFiltersApiUpdateCampaignFilterRequest
 */
export interface CertificationCampaignFiltersApiUpdateCampaignFilterRequest {
    /**
     * The ID of the campaign filter being modified.
     * @type {string}
     * @memberof CertificationCampaignFiltersApiUpdateCampaignFilter
     */
    readonly filterId: string;
    /**
     * A campaign filter details with updated field values.
     * @type {CampaignFilterDetails}
     * @memberof CertificationCampaignFiltersApiUpdateCampaignFilter
     */
    readonly campaignFilterDetails: CampaignFilterDetails;
}
/**
 * CertificationCampaignFiltersApi - object-oriented interface
 * @export
 * @class CertificationCampaignFiltersApi
 * @extends {BaseAPI}
 */
export declare class CertificationCampaignFiltersApi extends BaseAPI {
    /**
     * Use this API to create a campaign filter based on filter details and criteria.
     * @summary Create Campaign Filter
     * @param {CertificationCampaignFiltersApiCreateCampaignFilterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignFiltersApi
     */
    createCampaignFilter(requestParameters: CertificationCampaignFiltersApiCreateCampaignFilterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignFilterDetails, any>>;
    /**
     * Deletes campaign filters whose Ids are specified in the provided list of campaign filter Ids. Authorized callers must be an ORG_ADMIN or a CERT_ADMIN.
     * @summary Deletes Campaign Filters
     * @param {CertificationCampaignFiltersApiDeleteCampaignFiltersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignFiltersApi
     */
    deleteCampaignFilters(requestParameters: CertificationCampaignFiltersApiDeleteCampaignFiltersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieves information for an existing campaign filter using the filter\'s ID.
     * @summary Get Campaign Filter by ID
     * @param {CertificationCampaignFiltersApiGetCampaignFilterByIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignFiltersApi
     */
    getCampaignFilterById(requestParameters: CertificationCampaignFiltersApiGetCampaignFilterByIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignFilterDetails[], any>>;
    /**
     * Use this API to list all campaign filters. You can reduce scope with standard V3 query parameters.
     * @summary List Campaign Filters
     * @param {CertificationCampaignFiltersApiListCampaignFiltersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignFiltersApi
     */
    listCampaignFilters(requestParameters?: CertificationCampaignFiltersApiListCampaignFiltersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListCampaignFilters200Response, any>>;
    /**
     * Updates an existing campaign filter using the filter\'s ID.
     * @summary Updates a Campaign Filter
     * @param {CertificationCampaignFiltersApiUpdateCampaignFilterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignFiltersApi
     */
    updateCampaignFilter(requestParameters: CertificationCampaignFiltersApiUpdateCampaignFilterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignFilterDetails, any>>;
}
/**
 * CertificationCampaignsApi - axios parameter creator
 * @export
 */
export declare const CertificationCampaignsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {string} id Campaign ID.
     * @param {CampaignCompleteOptions} [campaignCompleteOptions] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeCampaign: (id: string, campaignCompleteOptions?: CampaignCompleteOptions, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a campaign
     * @param {Campaign} campaign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaign: (campaign: Campaign, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to create a certification campaign template based on campaign.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CampaignTemplate} campaignTemplate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaignTemplate: (campaignTemplate: CampaignTemplate, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {string} id ID of the campaign template being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignTemplateSchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {CampaignsDeleteRequest} campaignsDeleteRequest IDs of the campaigns to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaigns: (campaignsDeleteRequest: CampaignsDeleteRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of campaigns. This API can provide increased level of detail for each campaign for the correct provided query.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getActiveCampaigns: (detail?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {string} id ID of the campaign to be retrieved.
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaign: (id: string, detail?: 'SLIM' | 'FULL', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {string} id ID of the campaign whose reports are being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignReports: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignReportsConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to fetch a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {string} id Requested campaign template\&#39;s ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplateSchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params.  The API returns all campaign templates matching the query parameters.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplates: (limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API reassigns the specified certifications from one identity to another.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {string} id The certification campaign ID
     * @param {AdminReviewReassign} adminReviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    move: (id: string, adminReviewReassign: AdminReviewReassign, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchCampaignTemplate: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to overwrite the configuration for campaign reports.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CampaignReportsConfig} campaignReportsConfig Campaign report configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setCampaignReportsConfig: (campaignReportsConfig: CampaignReportsConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {string} id ID of the campaign template being scheduled.
     * @param {Schedule} [schedule]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setCampaignTemplateSchedule: (id: string, schedule?: Schedule, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {string} id Campaign ID.
     * @param {ActivateCampaignOptions} [activateCampaignOptions] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaign: (id: string, activateCampaignOptions?: ActivateCampaignOptions, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to run a remediation scan task for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {string} id ID of the campaign the remediation scan is being run for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaignRemediationScan: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to run a report for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {string} id ID of the campaign the report is being run for.
     * @param {ReportType} type Type of the report to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaignReport: (id: string, type: ReportType, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {string} id ID of the campaign template to use for generation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startGenerateCampaignTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCampaign: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CertificationCampaignsApi - functional programming interface
 * @export
 */
export declare const CertificationCampaignsApiFp: (configuration?: Configuration) => {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {string} id Campaign ID.
     * @param {CampaignCompleteOptions} [campaignCompleteOptions] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeCampaign(id: string, campaignCompleteOptions?: CampaignCompleteOptions, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a campaign
     * @param {Campaign} campaign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaign(campaign: Campaign, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>>;
    /**
     * Use this API to create a certification campaign template based on campaign.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CampaignTemplate} campaignTemplate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaignTemplate(campaignTemplate: CampaignTemplate, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignTemplate>>;
    /**
     * Use this API to delete a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {string} id ID of the campaign template being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignTemplateSchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {CampaignsDeleteRequest} campaignsDeleteRequest IDs of the campaigns to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaigns(campaignsDeleteRequest: CampaignsDeleteRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to get a list of campaigns. This API can provide increased level of detail for each campaign for the correct provided query.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getActiveCampaigns(detail?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetActiveCampaigns200ResponseInner>>>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {string} id ID of the campaign to be retrieved.
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaign(id: string, detail?: 'SLIM' | 'FULL', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetActiveCampaigns200ResponseInner>>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {string} id ID of the campaign whose reports are being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignReports(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignReport>>>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignReportsConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignReportsConfig>>;
    /**
     * Use this API to fetch a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {string} id Requested campaign template\&#39;s ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignTemplate>>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplateSchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schedule>>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params.  The API returns all campaign templates matching the query parameters.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplates(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignTemplate>>>;
    /**
     * This API reassigns the specified certifications from one identity to another.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {string} id The certification campaign ID
     * @param {AdminReviewReassign} adminReviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    move(id: string, adminReviewReassign: AdminReviewReassign, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificationTask>>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchCampaignTemplate(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignTemplate>>;
    /**
     * Use this API to overwrite the configuration for campaign reports.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CampaignReportsConfig} campaignReportsConfig Campaign report configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setCampaignReportsConfig(campaignReportsConfig: CampaignReportsConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignReportsConfig>>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {string} id ID of the campaign template being scheduled.
     * @param {Schedule} [schedule]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setCampaignTemplateSchedule(id: string, schedule?: Schedule, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {string} id Campaign ID.
     * @param {ActivateCampaignOptions} [activateCampaignOptions] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaign(id: string, activateCampaignOptions?: ActivateCampaignOptions, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to run a remediation scan task for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {string} id ID of the campaign the remediation scan is being run for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaignRemediationScan(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to run a report for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {string} id ID of the campaign the report is being run for.
     * @param {ReportType} type Type of the report to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaignReport(id: string, type: ReportType, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {string} id ID of the campaign template to use for generation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startGenerateCampaignTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignReference>>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCampaign(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlimCampaign>>;
};
/**
 * CertificationCampaignsApi - factory interface
 * @export
 */
export declare const CertificationCampaignsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {string} id Campaign ID.
     * @param {CampaignCompleteOptions} [campaignCompleteOptions] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeCampaign(id: string, campaignCompleteOptions?: CampaignCompleteOptions, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a campaign
     * @param {Campaign} campaign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaign(campaign: Campaign, axiosOptions?: any): AxiosPromise<Campaign>;
    /**
     * Use this API to create a certification campaign template based on campaign.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CampaignTemplate} campaignTemplate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCampaignTemplate(campaignTemplate: CampaignTemplate, axiosOptions?: any): AxiosPromise<CampaignTemplate>;
    /**
     * Use this API to delete a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {string} id ID of the campaign template being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignTemplate(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaignTemplateSchedule(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {CampaignsDeleteRequest} campaignsDeleteRequest IDs of the campaigns to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCampaigns(campaignsDeleteRequest: CampaignsDeleteRequest, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to get a list of campaigns. This API can provide increased level of detail for each campaign for the correct provided query.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getActiveCampaigns(detail?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<GetActiveCampaigns200ResponseInner>>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {string} id ID of the campaign to be retrieved.
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaign(id: string, detail?: 'SLIM' | 'FULL', axiosOptions?: any): AxiosPromise<GetActiveCampaigns200ResponseInner>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {string} id ID of the campaign whose reports are being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignReports(id: string, axiosOptions?: any): AxiosPromise<Array<CampaignReport>>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignReportsConfig(axiosOptions?: any): AxiosPromise<CampaignReportsConfig>;
    /**
     * Use this API to fetch a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {string} id Requested campaign template\&#39;s ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplate(id: string, axiosOptions?: any): AxiosPromise<CampaignTemplate>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplateSchedule(id: string, axiosOptions?: any): AxiosPromise<Schedule>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params.  The API returns all campaign templates matching the query parameters.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCampaignTemplates(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<CampaignTemplate>>;
    /**
     * This API reassigns the specified certifications from one identity to another.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {string} id The certification campaign ID
     * @param {AdminReviewReassign} adminReviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    move(id: string, adminReviewReassign: AdminReviewReassign, axiosOptions?: any): AxiosPromise<CertificationTask>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchCampaignTemplate(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<CampaignTemplate>;
    /**
     * Use this API to overwrite the configuration for campaign reports.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CampaignReportsConfig} campaignReportsConfig Campaign report configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setCampaignReportsConfig(campaignReportsConfig: CampaignReportsConfig, axiosOptions?: any): AxiosPromise<CampaignReportsConfig>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {string} id ID of the campaign template being scheduled.
     * @param {Schedule} [schedule]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setCampaignTemplateSchedule(id: string, schedule?: Schedule, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {string} id Campaign ID.
     * @param {ActivateCampaignOptions} [activateCampaignOptions] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaign(id: string, activateCampaignOptions?: ActivateCampaignOptions, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to run a remediation scan task for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {string} id ID of the campaign the remediation scan is being run for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaignRemediationScan(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to run a report for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {string} id ID of the campaign the report is being run for.
     * @param {ReportType} type Type of the report to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startCampaignReport(id: string, type: ReportType, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {string} id ID of the campaign template to use for generation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startGenerateCampaignTemplate(id: string, axiosOptions?: any): AxiosPromise<CampaignReference>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCampaign(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<SlimCampaign>;
};
/**
 * Request parameters for completeCampaign operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiCompleteCampaignRequest
 */
export interface CertificationCampaignsApiCompleteCampaignRequest {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CertificationCampaignsApiCompleteCampaign
     */
    readonly id: string;
    /**
     * Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @type {CampaignCompleteOptions}
     * @memberof CertificationCampaignsApiCompleteCampaign
     */
    readonly campaignCompleteOptions?: CampaignCompleteOptions;
}
/**
 * Request parameters for createCampaign operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiCreateCampaignRequest
 */
export interface CertificationCampaignsApiCreateCampaignRequest {
    /**
     *
     * @type {Campaign}
     * @memberof CertificationCampaignsApiCreateCampaign
     */
    readonly campaign: Campaign;
}
/**
 * Request parameters for createCampaignTemplate operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiCreateCampaignTemplateRequest
 */
export interface CertificationCampaignsApiCreateCampaignTemplateRequest {
    /**
     *
     * @type {CampaignTemplate}
     * @memberof CertificationCampaignsApiCreateCampaignTemplate
     */
    readonly campaignTemplate: CampaignTemplate;
}
/**
 * Request parameters for deleteCampaignTemplate operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiDeleteCampaignTemplateRequest
 */
export interface CertificationCampaignsApiDeleteCampaignTemplateRequest {
    /**
     * ID of the campaign template being deleted.
     * @type {string}
     * @memberof CertificationCampaignsApiDeleteCampaignTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for deleteCampaignTemplateSchedule operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiDeleteCampaignTemplateScheduleRequest
 */
export interface CertificationCampaignsApiDeleteCampaignTemplateScheduleRequest {
    /**
     * ID of the campaign template whose schedule is being deleted.
     * @type {string}
     * @memberof CertificationCampaignsApiDeleteCampaignTemplateSchedule
     */
    readonly id: string;
}
/**
 * Request parameters for deleteCampaigns operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiDeleteCampaignsRequest
 */
export interface CertificationCampaignsApiDeleteCampaignsRequest {
    /**
     * IDs of the campaigns to delete.
     * @type {CampaignsDeleteRequest}
     * @memberof CertificationCampaignsApiDeleteCampaigns
     */
    readonly campaignsDeleteRequest: CampaignsDeleteRequest;
}
/**
 * Request parameters for getActiveCampaigns operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiGetActiveCampaignsRequest
 */
export interface CertificationCampaignsApiGetActiveCampaignsRequest {
    /**
     * Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @type {'SLIM' | 'FULL'}
     * @memberof CertificationCampaignsApiGetActiveCampaigns
     */
    readonly detail?: 'SLIM' | 'FULL';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsApiGetActiveCampaigns
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsApiGetActiveCampaigns
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationCampaignsApiGetActiveCampaigns
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @type {string}
     * @memberof CertificationCampaignsApiGetActiveCampaigns
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @type {string}
     * @memberof CertificationCampaignsApiGetActiveCampaigns
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getCampaign operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiGetCampaignRequest
 */
export interface CertificationCampaignsApiGetCampaignRequest {
    /**
     * ID of the campaign to be retrieved.
     * @type {string}
     * @memberof CertificationCampaignsApiGetCampaign
     */
    readonly id: string;
    /**
     * Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @type {'SLIM' | 'FULL'}
     * @memberof CertificationCampaignsApiGetCampaign
     */
    readonly detail?: 'SLIM' | 'FULL';
}
/**
 * Request parameters for getCampaignReports operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiGetCampaignReportsRequest
 */
export interface CertificationCampaignsApiGetCampaignReportsRequest {
    /**
     * ID of the campaign whose reports are being fetched.
     * @type {string}
     * @memberof CertificationCampaignsApiGetCampaignReports
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignTemplate operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiGetCampaignTemplateRequest
 */
export interface CertificationCampaignsApiGetCampaignTemplateRequest {
    /**
     * Requested campaign template\&#39;s ID.
     * @type {string}
     * @memberof CertificationCampaignsApiGetCampaignTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignTemplateSchedule operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiGetCampaignTemplateScheduleRequest
 */
export interface CertificationCampaignsApiGetCampaignTemplateScheduleRequest {
    /**
     * ID of the campaign template whose schedule is being fetched.
     * @type {string}
     * @memberof CertificationCampaignsApiGetCampaignTemplateSchedule
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignTemplates operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiGetCampaignTemplatesRequest
 */
export interface CertificationCampaignsApiGetCampaignTemplatesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsApiGetCampaignTemplates
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsApiGetCampaignTemplates
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationCampaignsApiGetCampaignTemplates
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof CertificationCampaignsApiGetCampaignTemplates
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @type {string}
     * @memberof CertificationCampaignsApiGetCampaignTemplates
     */
    readonly filters?: string;
}
/**
 * Request parameters for move operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiMoveRequest
 */
export interface CertificationCampaignsApiMoveRequest {
    /**
     * The certification campaign ID
     * @type {string}
     * @memberof CertificationCampaignsApiMove
     */
    readonly id: string;
    /**
     *
     * @type {AdminReviewReassign}
     * @memberof CertificationCampaignsApiMove
     */
    readonly adminReviewReassign: AdminReviewReassign;
}
/**
 * Request parameters for patchCampaignTemplate operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiPatchCampaignTemplateRequest
 */
export interface CertificationCampaignsApiPatchCampaignTemplateRequest {
    /**
     * ID of the campaign template being modified.
     * @type {string}
     * @memberof CertificationCampaignsApiPatchCampaignTemplate
     */
    readonly id: string;
    /**
     * A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @type {Array<JsonPatchOperation>}
     * @memberof CertificationCampaignsApiPatchCampaignTemplate
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for setCampaignReportsConfig operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiSetCampaignReportsConfigRequest
 */
export interface CertificationCampaignsApiSetCampaignReportsConfigRequest {
    /**
     * Campaign report configuration.
     * @type {CampaignReportsConfig}
     * @memberof CertificationCampaignsApiSetCampaignReportsConfig
     */
    readonly campaignReportsConfig: CampaignReportsConfig;
}
/**
 * Request parameters for setCampaignTemplateSchedule operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiSetCampaignTemplateScheduleRequest
 */
export interface CertificationCampaignsApiSetCampaignTemplateScheduleRequest {
    /**
     * ID of the campaign template being scheduled.
     * @type {string}
     * @memberof CertificationCampaignsApiSetCampaignTemplateSchedule
     */
    readonly id: string;
    /**
     *
     * @type {Schedule}
     * @memberof CertificationCampaignsApiSetCampaignTemplateSchedule
     */
    readonly schedule?: Schedule;
}
/**
 * Request parameters for startCampaign operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiStartCampaignRequest
 */
export interface CertificationCampaignsApiStartCampaignRequest {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CertificationCampaignsApiStartCampaign
     */
    readonly id: string;
    /**
     * Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @type {ActivateCampaignOptions}
     * @memberof CertificationCampaignsApiStartCampaign
     */
    readonly activateCampaignOptions?: ActivateCampaignOptions;
}
/**
 * Request parameters for startCampaignRemediationScan operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiStartCampaignRemediationScanRequest
 */
export interface CertificationCampaignsApiStartCampaignRemediationScanRequest {
    /**
     * ID of the campaign the remediation scan is being run for.
     * @type {string}
     * @memberof CertificationCampaignsApiStartCampaignRemediationScan
     */
    readonly id: string;
}
/**
 * Request parameters for startCampaignReport operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiStartCampaignReportRequest
 */
export interface CertificationCampaignsApiStartCampaignReportRequest {
    /**
     * ID of the campaign the report is being run for.
     * @type {string}
     * @memberof CertificationCampaignsApiStartCampaignReport
     */
    readonly id: string;
    /**
     * Type of the report to run.
     * @type {ReportType}
     * @memberof CertificationCampaignsApiStartCampaignReport
     */
    readonly type: ReportType;
}
/**
 * Request parameters for startGenerateCampaignTemplate operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiStartGenerateCampaignTemplateRequest
 */
export interface CertificationCampaignsApiStartGenerateCampaignTemplateRequest {
    /**
     * ID of the campaign template to use for generation.
     * @type {string}
     * @memberof CertificationCampaignsApiStartGenerateCampaignTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for updateCampaign operation in CertificationCampaignsApi.
 * @export
 * @interface CertificationCampaignsApiUpdateCampaignRequest
 */
export interface CertificationCampaignsApiUpdateCampaignRequest {
    /**
     * ID of the campaign template being modified.
     * @type {string}
     * @memberof CertificationCampaignsApiUpdateCampaign
     */
    readonly id: string;
    /**
     * A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @type {Array<JsonPatchOperation>}
     * @memberof CertificationCampaignsApiUpdateCampaign
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * CertificationCampaignsApi - object-oriented interface
 * @export
 * @class CertificationCampaignsApi
 * @extends {BaseAPI}
 */
export declare class CertificationCampaignsApi extends BaseAPI {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {CertificationCampaignsApiCompleteCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    completeCampaign(requestParameters: CertificationCampaignsApiCompleteCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a campaign
     * @param {CertificationCampaignsApiCreateCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    createCampaign(requestParameters: CertificationCampaignsApiCreateCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Campaign, any>>;
    /**
     * Use this API to create a certification campaign template based on campaign.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CertificationCampaignsApiCreateCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    createCampaignTemplate(requestParameters: CertificationCampaignsApiCreateCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplate, any>>;
    /**
     * Use this API to delete a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {CertificationCampaignsApiDeleteCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    deleteCampaignTemplate(requestParameters: CertificationCampaignsApiDeleteCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {CertificationCampaignsApiDeleteCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    deleteCampaignTemplateSchedule(requestParameters: CertificationCampaignsApiDeleteCampaignTemplateScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {CertificationCampaignsApiDeleteCampaignsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    deleteCampaigns(requestParameters: CertificationCampaignsApiDeleteCampaignsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to get a list of campaigns. This API can provide increased level of detail for each campaign for the correct provided query.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {CertificationCampaignsApiGetActiveCampaignsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getActiveCampaigns(requestParameters?: CertificationCampaignsApiGetActiveCampaignsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetActiveCampaigns200ResponseInner[], any>>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {CertificationCampaignsApiGetCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getCampaign(requestParameters: CertificationCampaignsApiGetCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetActiveCampaigns200ResponseInner, any>>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {CertificationCampaignsApiGetCampaignReportsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getCampaignReports(requestParameters: CertificationCampaignsApiGetCampaignReportsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReport[], any>>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getCampaignReportsConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReportsConfig, any>>;
    /**
     * Use this API to fetch a certification campaign template by ID.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {CertificationCampaignsApiGetCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getCampaignTemplate(requestParameters: CertificationCampaignsApiGetCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplate, any>>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {CertificationCampaignsApiGetCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getCampaignTemplateSchedule(requestParameters: CertificationCampaignsApiGetCampaignTemplateScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schedule, any>>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params.  The API returns all campaign templates matching the query parameters.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {CertificationCampaignsApiGetCampaignTemplatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    getCampaignTemplates(requestParameters?: CertificationCampaignsApiGetCampaignTemplatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplate[], any>>;
    /**
     * This API reassigns the specified certifications from one identity to another.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {CertificationCampaignsApiMoveRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    move(requestParameters: CertificationCampaignsApiMoveRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationTask, any>>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {CertificationCampaignsApiPatchCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    patchCampaignTemplate(requestParameters: CertificationCampaignsApiPatchCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplate, any>>;
    /**
     * Use this API to overwrite the configuration for campaign reports.   A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CertificationCampaignsApiSetCampaignReportsConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    setCampaignReportsConfig(requestParameters: CertificationCampaignsApiSetCampaignReportsConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReportsConfig, any>>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {CertificationCampaignsApiSetCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    setCampaignTemplateSchedule(requestParameters: CertificationCampaignsApiSetCampaignTemplateScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {CertificationCampaignsApiStartCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    startCampaign(requestParameters: CertificationCampaignsApiStartCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to run a remediation scan task for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {CertificationCampaignsApiStartCampaignRemediationScanRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    startCampaignRemediationScan(requestParameters: CertificationCampaignsApiStartCampaignRemediationScanRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to run a report for a certification campaign.  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {CertificationCampaignsApiStartCampaignReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    startCampaignReport(requestParameters: CertificationCampaignsApiStartCampaignReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {CertificationCampaignsApiStartGenerateCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    startGenerateCampaignTemplate(requestParameters: CertificationCampaignsApiStartGenerateCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReference, any>>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {CertificationCampaignsApiUpdateCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationCampaignsApi
     */
    updateCampaign(requestParameters: CertificationCampaignsApiUpdateCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SlimCampaign, any>>;
}
/**
 * CertificationSummariesApi - axios parameter creator
 * @export
 */
export declare const CertificationSummariesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns a list of access summaries for the specified identity campaign certification and type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Access Summaries
     * @param {string} id The identity campaign certification ID
     * @param {'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT'} type The type of access review item to retrieve summaries for
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **completed**: *eq, ne*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityAccessSummaries: (id: string, type: 'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a summary of the decisions made on an identity campaign certification. The decisions are summarized by type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary of Certification Decisions
     * @param {string} id The certification ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **identitySummary.id**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityDecisionSummary: (id: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of the identity summaries for a specific identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Identity Summaries for Campaign Certification
     * @param {string} id The identity campaign certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **completed**: *eq, ne*  **name**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySummaries: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the summary for an identity on a specified identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary for Identity
     * @param {string} id The identity campaign certification ID
     * @param {string} identitySummaryId The identity summary ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySummary: (id: string, identitySummaryId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CertificationSummariesApi - functional programming interface
 * @export
 */
export declare const CertificationSummariesApiFp: (configuration?: Configuration) => {
    /**
     * This API returns a list of access summaries for the specified identity campaign certification and type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Access Summaries
     * @param {string} id The identity campaign certification ID
     * @param {'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT'} type The type of access review item to retrieve summaries for
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **completed**: *eq, ne*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityAccessSummaries(id: string, type: 'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessSummary>>>;
    /**
     * This API returns a summary of the decisions made on an identity campaign certification. The decisions are summarized by type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary of Certification Decisions
     * @param {string} id The certification ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **identitySummary.id**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityDecisionSummary(id: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertDecisionSummary>>;
    /**
     * This API returns a list of the identity summaries for a specific identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Identity Summaries for Campaign Certification
     * @param {string} id The identity campaign certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **completed**: *eq, ne*  **name**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySummaries(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CertificationIdentitySummary>>>;
    /**
     * This API returns the summary for an identity on a specified identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary for Identity
     * @param {string} id The identity campaign certification ID
     * @param {string} identitySummaryId The identity summary ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySummary(id: string, identitySummaryId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificationIdentitySummary>>;
};
/**
 * CertificationSummariesApi - factory interface
 * @export
 */
export declare const CertificationSummariesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns a list of access summaries for the specified identity campaign certification and type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Access Summaries
     * @param {string} id The identity campaign certification ID
     * @param {'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT'} type The type of access review item to retrieve summaries for
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **completed**: *eq, ne*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityAccessSummaries(id: string, type: 'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccessSummary>>;
    /**
     * This API returns a summary of the decisions made on an identity campaign certification. The decisions are summarized by type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary of Certification Decisions
     * @param {string} id The certification ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **identitySummary.id**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityDecisionSummary(id: string, filters?: string, axiosOptions?: any): AxiosPromise<IdentityCertDecisionSummary>;
    /**
     * This API returns a list of the identity summaries for a specific identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Identity Summaries for Campaign Certification
     * @param {string} id The identity campaign certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **completed**: *eq, ne*  **name**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySummaries(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<CertificationIdentitySummary>>;
    /**
     * This API returns the summary for an identity on a specified identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary for Identity
     * @param {string} id The identity campaign certification ID
     * @param {string} identitySummaryId The identity summary ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySummary(id: string, identitySummaryId: string, axiosOptions?: any): AxiosPromise<CertificationIdentitySummary>;
};
/**
 * Request parameters for getIdentityAccessSummaries operation in CertificationSummariesApi.
 * @export
 * @interface CertificationSummariesApiGetIdentityAccessSummariesRequest
 */
export interface CertificationSummariesApiGetIdentityAccessSummariesRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly id: string;
    /**
     * The type of access review item to retrieve summaries for
     * @type {'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT'}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly type: 'ROLE' | 'ACCESS_PROFILE' | 'ENTITLEMENT';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **completed**: *eq, ne*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name**
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentityAccessSummaries
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getIdentityDecisionSummary operation in CertificationSummariesApi.
 * @export
 * @interface CertificationSummariesApiGetIdentityDecisionSummaryRequest
 */
export interface CertificationSummariesApiGetIdentityDecisionSummaryRequest {
    /**
     * The certification ID
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentityDecisionSummary
     */
    readonly id: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **identitySummary.id**: *eq, in*
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentityDecisionSummary
     */
    readonly filters?: string;
}
/**
 * Request parameters for getIdentitySummaries operation in CertificationSummariesApi.
 * @export
 * @interface CertificationSummariesApiGetIdentitySummariesRequest
 */
export interface CertificationSummariesApiGetIdentitySummariesRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentitySummaries
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationSummariesApiGetIdentitySummaries
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationSummariesApiGetIdentitySummaries
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationSummariesApiGetIdentitySummaries
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **completed**: *eq, ne*  **name**: *eq, sw*
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentitySummaries
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentitySummaries
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getIdentitySummary operation in CertificationSummariesApi.
 * @export
 * @interface CertificationSummariesApiGetIdentitySummaryRequest
 */
export interface CertificationSummariesApiGetIdentitySummaryRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentitySummary
     */
    readonly id: string;
    /**
     * The identity summary ID
     * @type {string}
     * @memberof CertificationSummariesApiGetIdentitySummary
     */
    readonly identitySummaryId: string;
}
/**
 * CertificationSummariesApi - object-oriented interface
 * @export
 * @class CertificationSummariesApi
 * @extends {BaseAPI}
 */
export declare class CertificationSummariesApi extends BaseAPI {
    /**
     * This API returns a list of access summaries for the specified identity campaign certification and type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Access Summaries
     * @param {CertificationSummariesApiGetIdentityAccessSummariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationSummariesApi
     */
    getIdentityAccessSummaries(requestParameters: CertificationSummariesApiGetIdentityAccessSummariesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessSummary[], any>>;
    /**
     * This API returns a summary of the decisions made on an identity campaign certification. The decisions are summarized by type. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary of Certification Decisions
     * @param {CertificationSummariesApiGetIdentityDecisionSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationSummariesApi
     */
    getIdentityDecisionSummary(requestParameters: CertificationSummariesApiGetIdentityDecisionSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertDecisionSummary, any>>;
    /**
     * This API returns a list of the identity summaries for a specific identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Identity Summaries for Campaign Certification
     * @param {CertificationSummariesApiGetIdentitySummariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationSummariesApi
     */
    getIdentitySummaries(requestParameters: CertificationSummariesApiGetIdentitySummariesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationIdentitySummary[], any>>;
    /**
     * This API returns the summary for an identity on a specified identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Summary for Identity
     * @param {CertificationSummariesApiGetIdentitySummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationSummariesApi
     */
    getIdentitySummary(requestParameters: CertificationSummariesApiGetIdentitySummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationIdentitySummary, any>>;
}
/**
 * CertificationsApi - axios parameter creator
 * @export
 */
export declare const CertificationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the certification task for the specified ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for the specified certification can also call this API.
     * @summary Certification Task by ID
     * @param {string} id The task ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCertificationTask: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a single identity campaign certification by its ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Identity Certification by ID
     * @param {string} id The certification id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertification: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {string} certificationId The certification ID
     * @param {string} itemId The certification item ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  Supported composite operators: *and, or*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: 1?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)1
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationItemPermissions: (certificationId: string, itemId: string, filters?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of pending (`QUEUED` or `IN_PROGRESS`) certification tasks. Any authenticated token can call this API, but only certification tasks you are authorized to review will be returned.
     * @summary List of Pending Certification Tasks
     * @param {string} [reviewerIdentity] The ID of reviewer identity. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **targetId**: *eq, in*  **type**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingCertificationTasks: (reviewerIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {string} id The certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCertificationReviewers: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of access review items for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary List of Access Review Items
     * @param {string} id The identity campaign certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **type**: *eq*  **access.type**: *eq*  **completed**: *eq, ne*  **identitySummary.id**: *eq, in*  **identitySummary.name**: *eq, sw*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName**
     * @param {string} [entitlements] Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.  An error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time.
     * @param {string} [accessProfiles] Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.  An error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time.
     * @param {string} [roles] Filter results to view access review items that pertain to any of the specified comma-separated role IDs.  An error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAccessReviewItems: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, entitlements?: string, accessProfiles?: string, roles?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of identity campaign certifications for the specified query parameters. Any authenticated token can call this API, but only certifications you are authorized to review will be returned. This API does not support requests for certifications assigned to governance groups.
     * @summary List Identity Campaign Certifications
     * @param {string} [reviewerIdentity] Reviewer\&#39;s identity. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **campaign.id**: *eq, in*  **phase**: *eq*  **completed**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, due, signed**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityCertifications: (reviewerIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The API makes a decision to approve or revoke one or more identity campaign certification items. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Decide on a Certification Item
     * @param {string} id The ID of the identity campaign certification on which to make decisions
     * @param {Array<ReviewDecision>} reviewDecision A non-empty array of decisions to be made.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    makeIdentityDecision: (id: string, reviewDecision: Array<ReviewDecision>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API reassigns up to 50 identities or items in an identity campaign certification to another reviewer. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Reassign Identities or Items
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassign} reviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    reassignIdentityCertifications: (id: string, reviewReassign: ReviewReassign, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API finalizes all decisions made on an identity campaign certification and initiates any remediations required. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Finalize Identity Certification Decisions
     * @param {string} id The identity campaign certification ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    signOffIdentityCertification: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassign} reviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReassignCertsAsync: (id: string, reviewReassign: ReviewReassign, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CertificationsApi - functional programming interface
 * @export
 */
export declare const CertificationsApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the certification task for the specified ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for the specified certification can also call this API.
     * @summary Certification Task by ID
     * @param {string} id The task ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCertificationTask(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificationTask>>;
    /**
     * This API returns a single identity campaign certification by its ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Identity Certification by ID
     * @param {string} id The certification id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertification(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertificationDto>>;
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {string} certificationId The certification ID
     * @param {string} itemId The certification item ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  Supported composite operators: *and, or*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: 1?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)1
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationItemPermissions(certificationId: string, itemId: string, filters?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionDto>>>;
    /**
     * This API returns a list of pending (`QUEUED` or `IN_PROGRESS`) certification tasks. Any authenticated token can call this API, but only certification tasks you are authorized to review will be returned.
     * @summary List of Pending Certification Tasks
     * @param {string} [reviewerIdentity] The ID of reviewer identity. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **targetId**: *eq, in*  **type**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingCertificationTasks(reviewerIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CertificationTask>>>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {string} id The certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCertificationReviewers(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityReferenceWithNameAndEmail>>>;
    /**
     * This API returns a list of access review items for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary List of Access Review Items
     * @param {string} id The identity campaign certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **type**: *eq*  **access.type**: *eq*  **completed**: *eq, ne*  **identitySummary.id**: *eq, in*  **identitySummary.name**: *eq, sw*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName**
     * @param {string} [entitlements] Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.  An error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time.
     * @param {string} [accessProfiles] Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.  An error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time.
     * @param {string} [roles] Filter results to view access review items that pertain to any of the specified comma-separated role IDs.  An error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAccessReviewItems(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, entitlements?: string, accessProfiles?: string, roles?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessReviewItem>>>;
    /**
     * Use this API to get a list of identity campaign certifications for the specified query parameters. Any authenticated token can call this API, but only certifications you are authorized to review will be returned. This API does not support requests for certifications assigned to governance groups.
     * @summary List Identity Campaign Certifications
     * @param {string} [reviewerIdentity] Reviewer\&#39;s identity. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **campaign.id**: *eq, in*  **phase**: *eq*  **completed**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, due, signed**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityCertifications(reviewerIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityCertificationDto>>>;
    /**
     * The API makes a decision to approve or revoke one or more identity campaign certification items. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Decide on a Certification Item
     * @param {string} id The ID of the identity campaign certification on which to make decisions
     * @param {Array<ReviewDecision>} reviewDecision A non-empty array of decisions to be made.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    makeIdentityDecision(id: string, reviewDecision: Array<ReviewDecision>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertificationDto>>;
    /**
     * This API reassigns up to 50 identities or items in an identity campaign certification to another reviewer. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Reassign Identities or Items
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassign} reviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    reassignIdentityCertifications(id: string, reviewReassign: ReviewReassign, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertificationDto>>;
    /**
     * This API finalizes all decisions made on an identity campaign certification and initiates any remediations required. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Finalize Identity Certification Decisions
     * @param {string} id The identity campaign certification ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    signOffIdentityCertification(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertificationDto>>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassign} reviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReassignCertsAsync(id: string, reviewReassign: ReviewReassign, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificationTask>>;
};
/**
 * CertificationsApi - factory interface
 * @export
 */
export declare const CertificationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the certification task for the specified ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for the specified certification can also call this API.
     * @summary Certification Task by ID
     * @param {string} id The task ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCertificationTask(id: string, axiosOptions?: any): AxiosPromise<CertificationTask>;
    /**
     * This API returns a single identity campaign certification by its ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Identity Certification by ID
     * @param {string} id The certification id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertification(id: string, axiosOptions?: any): AxiosPromise<IdentityCertificationDto>;
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {string} certificationId The certification ID
     * @param {string} itemId The certification item ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  Supported composite operators: *and, or*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: 1?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)1
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationItemPermissions(certificationId: string, itemId: string, filters?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PermissionDto>>;
    /**
     * This API returns a list of pending (`QUEUED` or `IN_PROGRESS`) certification tasks. Any authenticated token can call this API, but only certification tasks you are authorized to review will be returned.
     * @summary List of Pending Certification Tasks
     * @param {string} [reviewerIdentity] The ID of reviewer identity. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **targetId**: *eq, in*  **type**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingCertificationTasks(reviewerIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<CertificationTask>>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {string} id The certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCertificationReviewers(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityReferenceWithNameAndEmail>>;
    /**
     * This API returns a list of access review items for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary List of Access Review Items
     * @param {string} id The identity campaign certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **type**: *eq*  **access.type**: *eq*  **completed**: *eq, ne*  **identitySummary.id**: *eq, in*  **identitySummary.name**: *eq, sw*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName**
     * @param {string} [entitlements] Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.  An error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time.
     * @param {string} [accessProfiles] Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.  An error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time.
     * @param {string} [roles] Filter results to view access review items that pertain to any of the specified comma-separated role IDs.  An error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAccessReviewItems(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, entitlements?: string, accessProfiles?: string, roles?: string, axiosOptions?: any): AxiosPromise<Array<AccessReviewItem>>;
    /**
     * Use this API to get a list of identity campaign certifications for the specified query parameters. Any authenticated token can call this API, but only certifications you are authorized to review will be returned. This API does not support requests for certifications assigned to governance groups.
     * @summary List Identity Campaign Certifications
     * @param {string} [reviewerIdentity] Reviewer\&#39;s identity. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **campaign.id**: *eq, in*  **phase**: *eq*  **completed**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, due, signed**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityCertifications(reviewerIdentity?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityCertificationDto>>;
    /**
     * The API makes a decision to approve or revoke one or more identity campaign certification items. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Decide on a Certification Item
     * @param {string} id The ID of the identity campaign certification on which to make decisions
     * @param {Array<ReviewDecision>} reviewDecision A non-empty array of decisions to be made.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    makeIdentityDecision(id: string, reviewDecision: Array<ReviewDecision>, axiosOptions?: any): AxiosPromise<IdentityCertificationDto>;
    /**
     * This API reassigns up to 50 identities or items in an identity campaign certification to another reviewer. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Reassign Identities or Items
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassign} reviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    reassignIdentityCertifications(id: string, reviewReassign: ReviewReassign, axiosOptions?: any): AxiosPromise<IdentityCertificationDto>;
    /**
     * This API finalizes all decisions made on an identity campaign certification and initiates any remediations required. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Finalize Identity Certification Decisions
     * @param {string} id The identity campaign certification ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    signOffIdentityCertification(id: string, axiosOptions?: any): AxiosPromise<IdentityCertificationDto>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassign} reviewReassign
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReassignCertsAsync(id: string, reviewReassign: ReviewReassign, axiosOptions?: any): AxiosPromise<CertificationTask>;
};
/**
 * Request parameters for getCertificationTask operation in CertificationsApi.
 * @export
 * @interface CertificationsApiGetCertificationTaskRequest
 */
export interface CertificationsApiGetCertificationTaskRequest {
    /**
     * The task ID
     * @type {string}
     * @memberof CertificationsApiGetCertificationTask
     */
    readonly id: string;
}
/**
 * Request parameters for getIdentityCertification operation in CertificationsApi.
 * @export
 * @interface CertificationsApiGetIdentityCertificationRequest
 */
export interface CertificationsApiGetIdentityCertificationRequest {
    /**
     * The certification id
     * @type {string}
     * @memberof CertificationsApiGetIdentityCertification
     */
    readonly id: string;
}
/**
 * Request parameters for getIdentityCertificationItemPermissions operation in CertificationsApi.
 * @export
 * @interface CertificationsApiGetIdentityCertificationItemPermissionsRequest
 */
export interface CertificationsApiGetIdentityCertificationItemPermissionsRequest {
    /**
     * The certification ID
     * @type {string}
     * @memberof CertificationsApiGetIdentityCertificationItemPermissions
     */
    readonly certificationId: string;
    /**
     * The certification item ID
     * @type {string}
     * @memberof CertificationsApiGetIdentityCertificationItemPermissions
     */
    readonly itemId: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  Supported composite operators: *and, or*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: 1?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)1
     * @type {string}
     * @memberof CertificationsApiGetIdentityCertificationItemPermissions
     */
    readonly filters?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiGetIdentityCertificationItemPermissions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiGetIdentityCertificationItemPermissions
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsApiGetIdentityCertificationItemPermissions
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getPendingCertificationTasks operation in CertificationsApi.
 * @export
 * @interface CertificationsApiGetPendingCertificationTasksRequest
 */
export interface CertificationsApiGetPendingCertificationTasksRequest {
    /**
     * The ID of reviewer identity. *me* indicates the current user.
     * @type {string}
     * @memberof CertificationsApiGetPendingCertificationTasks
     */
    readonly reviewerIdentity?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiGetPendingCertificationTasks
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiGetPendingCertificationTasks
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsApiGetPendingCertificationTasks
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **targetId**: *eq, in*  **type**: *eq, in*
     * @type {string}
     * @memberof CertificationsApiGetPendingCertificationTasks
     */
    readonly filters?: string;
}
/**
 * Request parameters for listCertificationReviewers operation in CertificationsApi.
 * @export
 * @interface CertificationsApiListCertificationReviewersRequest
 */
export interface CertificationsApiListCertificationReviewersRequest {
    /**
     * The certification ID
     * @type {string}
     * @memberof CertificationsApiListCertificationReviewers
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiListCertificationReviewers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiListCertificationReviewers
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsApiListCertificationReviewers
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @type {string}
     * @memberof CertificationsApiListCertificationReviewers
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @type {string}
     * @memberof CertificationsApiListCertificationReviewers
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listIdentityAccessReviewItems operation in CertificationsApi.
 * @export
 * @interface CertificationsApiListIdentityAccessReviewItemsRequest
 */
export interface CertificationsApiListIdentityAccessReviewItemsRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **type**: *eq*  **access.type**: *eq*  **completed**: *eq, ne*  **identitySummary.id**: *eq, in*  **identitySummary.name**: *eq, sw*  **access.id**: *eq, in*  **access.name**: *eq, sw*  **entitlement.sourceName**: *eq, sw*  **accessProfile.sourceName**: *eq, sw*
     * @type {string}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitySummary.name, access.name, access.type, entitlement.sourceName, accessProfile.sourceName**
     * @type {string}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly sorters?: string;
    /**
     * Filter results to view access review items that pertain to any of the specified comma-separated entitlement IDs.  An error will occur if this param is used with **access-profiles** or **roles** as only one of these query params can be used at a time.
     * @type {string}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly entitlements?: string;
    /**
     * Filter results to view access review items that pertain to any of the specified comma-separated access-profle IDs.  An error will occur if this param is used with **entitlements** or **roles** as only one of these query params can be used at a time.
     * @type {string}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly accessProfiles?: string;
    /**
     * Filter results to view access review items that pertain to any of the specified comma-separated role IDs.  An error will occur if this param is used with **entitlements** or **access-profiles** as only one of these query params can be used at a time.
     * @type {string}
     * @memberof CertificationsApiListIdentityAccessReviewItems
     */
    readonly roles?: string;
}
/**
 * Request parameters for listIdentityCertifications operation in CertificationsApi.
 * @export
 * @interface CertificationsApiListIdentityCertificationsRequest
 */
export interface CertificationsApiListIdentityCertificationsRequest {
    /**
     * Reviewer\&#39;s identity. *me* indicates the current user.
     * @type {string}
     * @memberof CertificationsApiListIdentityCertifications
     */
    readonly reviewerIdentity?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiListIdentityCertifications
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsApiListIdentityCertifications
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsApiListIdentityCertifications
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **campaign.id**: *eq, in*  **phase**: *eq*  **completed**: *eq, ne*
     * @type {string}
     * @memberof CertificationsApiListIdentityCertifications
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, due, signed**
     * @type {string}
     * @memberof CertificationsApiListIdentityCertifications
     */
    readonly sorters?: string;
}
/**
 * Request parameters for makeIdentityDecision operation in CertificationsApi.
 * @export
 * @interface CertificationsApiMakeIdentityDecisionRequest
 */
export interface CertificationsApiMakeIdentityDecisionRequest {
    /**
     * The ID of the identity campaign certification on which to make decisions
     * @type {string}
     * @memberof CertificationsApiMakeIdentityDecision
     */
    readonly id: string;
    /**
     * A non-empty array of decisions to be made.
     * @type {Array<ReviewDecision>}
     * @memberof CertificationsApiMakeIdentityDecision
     */
    readonly reviewDecision: Array<ReviewDecision>;
}
/**
 * Request parameters for reassignIdentityCertifications operation in CertificationsApi.
 * @export
 * @interface CertificationsApiReassignIdentityCertificationsRequest
 */
export interface CertificationsApiReassignIdentityCertificationsRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsApiReassignIdentityCertifications
     */
    readonly id: string;
    /**
     *
     * @type {ReviewReassign}
     * @memberof CertificationsApiReassignIdentityCertifications
     */
    readonly reviewReassign: ReviewReassign;
}
/**
 * Request parameters for signOffIdentityCertification operation in CertificationsApi.
 * @export
 * @interface CertificationsApiSignOffIdentityCertificationRequest
 */
export interface CertificationsApiSignOffIdentityCertificationRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsApiSignOffIdentityCertification
     */
    readonly id: string;
}
/**
 * Request parameters for submitReassignCertsAsync operation in CertificationsApi.
 * @export
 * @interface CertificationsApiSubmitReassignCertsAsyncRequest
 */
export interface CertificationsApiSubmitReassignCertsAsyncRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsApiSubmitReassignCertsAsync
     */
    readonly id: string;
    /**
     *
     * @type {ReviewReassign}
     * @memberof CertificationsApiSubmitReassignCertsAsync
     */
    readonly reviewReassign: ReviewReassign;
}
/**
 * CertificationsApi - object-oriented interface
 * @export
 * @class CertificationsApi
 * @extends {BaseAPI}
 */
export declare class CertificationsApi extends BaseAPI {
    /**
     * This API returns the certification task for the specified ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for the specified certification can also call this API.
     * @summary Certification Task by ID
     * @param {CertificationsApiGetCertificationTaskRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    getCertificationTask(requestParameters: CertificationsApiGetCertificationTaskRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationTask, any>>;
    /**
     * This API returns a single identity campaign certification by its ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Identity Certification by ID
     * @param {CertificationsApiGetIdentityCertificationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    getIdentityCertification(requestParameters: CertificationsApiGetIdentityCertificationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationDto, any>>;
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {CertificationsApiGetIdentityCertificationItemPermissionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    getIdentityCertificationItemPermissions(requestParameters: CertificationsApiGetIdentityCertificationItemPermissionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PermissionDto[], any>>;
    /**
     * This API returns a list of pending (`QUEUED` or `IN_PROGRESS`) certification tasks. Any authenticated token can call this API, but only certification tasks you are authorized to review will be returned.
     * @summary List of Pending Certification Tasks
     * @param {CertificationsApiGetPendingCertificationTasksRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    getPendingCertificationTasks(requestParameters?: CertificationsApiGetPendingCertificationTasksRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationTask[], any>>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {CertificationsApiListCertificationReviewersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    listCertificationReviewers(requestParameters: CertificationsApiListCertificationReviewersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityReferenceWithNameAndEmail[], any>>;
    /**
     * This API returns a list of access review items for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary List of Access Review Items
     * @param {CertificationsApiListIdentityAccessReviewItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    listIdentityAccessReviewItems(requestParameters: CertificationsApiListIdentityAccessReviewItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessReviewItem[], any>>;
    /**
     * Use this API to get a list of identity campaign certifications for the specified query parameters. Any authenticated token can call this API, but only certifications you are authorized to review will be returned. This API does not support requests for certifications assigned to governance groups.
     * @summary List Identity Campaign Certifications
     * @param {CertificationsApiListIdentityCertificationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    listIdentityCertifications(requestParameters?: CertificationsApiListIdentityCertificationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationDto[], any>>;
    /**
     * The API makes a decision to approve or revoke one or more identity campaign certification items. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Decide on a Certification Item
     * @param {CertificationsApiMakeIdentityDecisionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    makeIdentityDecision(requestParameters: CertificationsApiMakeIdentityDecisionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationDto, any>>;
    /**
     * This API reassigns up to 50 identities or items in an identity campaign certification to another reviewer. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Reassign Identities or Items
     * @param {CertificationsApiReassignIdentityCertificationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    reassignIdentityCertifications(requestParameters: CertificationsApiReassignIdentityCertificationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationDto, any>>;
    /**
     * This API finalizes all decisions made on an identity campaign certification and initiates any remediations required. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API. This API does not support requests for certifications assigned to Governance Groups.
     * @summary Finalize Identity Certification Decisions
     * @param {CertificationsApiSignOffIdentityCertificationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    signOffIdentityCertification(requestParameters: CertificationsApiSignOffIdentityCertificationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationDto, any>>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {CertificationsApiSubmitReassignCertsAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsApi
     */
    submitReassignCertsAsync(requestParameters: CertificationsApiSubmitReassignCertsAsyncRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationTask, any>>;
}
/**
 * ConfigurationHubApi - axios parameter creator
 * @export
 */
export declare const ConfigurationHubApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates an object mapping between current org and source org. Source org should be \"default\" when creating an object mapping that is not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Creates an object mapping
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingRequest} objectMappingRequest The object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createObjectMapping: (sourceOrg: string, objectMappingRequest: ObjectMappingRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This creates a set of object mappings (Max 25) between current org and source org. Source org should be \"default\" when creating object mappings that are not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk creates object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingBulkCreateRequest} objectMappingBulkCreateRequest The bulk create object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createObjectMappings: (sourceOrg: string, objectMappingBulkCreateRequest: ObjectMappingBulkCreateRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an existing object mapping. Source org should be \"default\" when deleting an object mapping that is not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Deletes an object mapping
     * @param {string} sourceOrg The name of the source org.
     * @param {string} objectMappingId The id of the object mapping to be deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteObjectMapping: (sourceOrg: string, objectMappingId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an Uploaded backup based on job ID. On success, this endpoint will return an empty response. The job id can be obtained from the response after a successful upload, or the list uploads endpoint. The following scopes are required to access this endpoint: sp:config:manage
     * @summary Deletes an uploaded backup file
     * @param {string} id The id of the uploaded backup.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteUploadedBackup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of existing object mappings between current org and source org. Source org should be \"default\" when getting object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:read
     * @summary Gets list of object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getObjectMappings: (sourceOrg: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all the information and status of an upload job. - sp:config-backups:read
     * @summary Get an uploaded backup\'s information
     * @param {string} id The id of the uploaded backup.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUploadedBackup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of the current uploaded backups associated with the current tenant. A filter \"status\" can be added to only return the Completed, Failed, or Successful uploads
     * @summary Gets list of Uploaded backups
     * @param {string} [status] Filter listed uploaded backups by status of operation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUploadedBackups: (status?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This post will upload a JSON backup file into a tenant. Configuration files can be managed and deployed via Configuration Hub by uploading a json file which contains configuration data. The JSON file should be the same as the one used by our import endpoints. The object types that currently support by upload file functionality are the same as the ones supported by our regular backup functionality. here: [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).  The request will need the following security scope: - sp:config:manage
     * @summary Uploads a backup file
     * @param {any} data JSON file containing the objects to be imported.
     * @param {string} name Name that will be assigned to the uploaded file.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importUploadedBackup: (data: any, name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates a set of object mappings, only enabled and targetValue fields can be updated. Source org should be \"default\" when updating object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk updates object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingBulkPatchRequest} objectMappingBulkPatchRequest The object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateObjectMappings: (sourceOrg: string, objectMappingBulkPatchRequest: ObjectMappingBulkPatchRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConfigurationHubApi - functional programming interface
 * @export
 */
export declare const ConfigurationHubApiFp: (configuration?: Configuration) => {
    /**
     * This creates an object mapping between current org and source org. Source org should be \"default\" when creating an object mapping that is not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Creates an object mapping
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingRequest} objectMappingRequest The object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createObjectMapping(sourceOrg: string, objectMappingRequest: ObjectMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectMappingResponse>>;
    /**
     * This creates a set of object mappings (Max 25) between current org and source org. Source org should be \"default\" when creating object mappings that are not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk creates object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingBulkCreateRequest} objectMappingBulkCreateRequest The bulk create object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createObjectMappings(sourceOrg: string, objectMappingBulkCreateRequest: ObjectMappingBulkCreateRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectMappingBulkCreateResponse>>;
    /**
     * This deletes an existing object mapping. Source org should be \"default\" when deleting an object mapping that is not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Deletes an object mapping
     * @param {string} sourceOrg The name of the source org.
     * @param {string} objectMappingId The id of the object mapping to be deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteObjectMapping(sourceOrg: string, objectMappingId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This deletes an Uploaded backup based on job ID. On success, this endpoint will return an empty response. The job id can be obtained from the response after a successful upload, or the list uploads endpoint. The following scopes are required to access this endpoint: sp:config:manage
     * @summary Deletes an uploaded backup file
     * @param {string} id The id of the uploaded backup.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteUploadedBackup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets a list of existing object mappings between current org and source org. Source org should be \"default\" when getting object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:read
     * @summary Gets list of object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getObjectMappings(sourceOrg: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ObjectMappingResponse>>>;
    /**
     * Returns all the information and status of an upload job. - sp:config-backups:read
     * @summary Get an uploaded backup\'s information
     * @param {string} id The id of the uploaded backup.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUploadedBackup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Returns a list of the current uploaded backups associated with the current tenant. A filter \"status\" can be added to only return the Completed, Failed, or Successful uploads
     * @summary Gets list of Uploaded backups
     * @param {string} [status] Filter listed uploaded backups by status of operation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUploadedBackups(status?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadsResponse>>>;
    /**
     * This post will upload a JSON backup file into a tenant. Configuration files can be managed and deployed via Configuration Hub by uploading a json file which contains configuration data. The JSON file should be the same as the one used by our import endpoints. The object types that currently support by upload file functionality are the same as the ones supported by our regular backup functionality. here: [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).  The request will need the following security scope: - sp:config:manage
     * @summary Uploads a backup file
     * @param {any} data JSON file containing the objects to be imported.
     * @param {string} name Name that will be assigned to the uploaded file.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importUploadedBackup(data: any, name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadsRequest>>;
    /**
     * This updates a set of object mappings, only enabled and targetValue fields can be updated. Source org should be \"default\" when updating object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk updates object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingBulkPatchRequest} objectMappingBulkPatchRequest The object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateObjectMappings(sourceOrg: string, objectMappingBulkPatchRequest: ObjectMappingBulkPatchRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectMappingBulkPatchResponse>>;
};
/**
 * ConfigurationHubApi - factory interface
 * @export
 */
export declare const ConfigurationHubApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates an object mapping between current org and source org. Source org should be \"default\" when creating an object mapping that is not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Creates an object mapping
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingRequest} objectMappingRequest The object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createObjectMapping(sourceOrg: string, objectMappingRequest: ObjectMappingRequest, axiosOptions?: any): AxiosPromise<ObjectMappingResponse>;
    /**
     * This creates a set of object mappings (Max 25) between current org and source org. Source org should be \"default\" when creating object mappings that are not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk creates object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingBulkCreateRequest} objectMappingBulkCreateRequest The bulk create object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createObjectMappings(sourceOrg: string, objectMappingBulkCreateRequest: ObjectMappingBulkCreateRequest, axiosOptions?: any): AxiosPromise<ObjectMappingBulkCreateResponse>;
    /**
     * This deletes an existing object mapping. Source org should be \"default\" when deleting an object mapping that is not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Deletes an object mapping
     * @param {string} sourceOrg The name of the source org.
     * @param {string} objectMappingId The id of the object mapping to be deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteObjectMapping(sourceOrg: string, objectMappingId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This deletes an Uploaded backup based on job ID. On success, this endpoint will return an empty response. The job id can be obtained from the response after a successful upload, or the list uploads endpoint. The following scopes are required to access this endpoint: sp:config:manage
     * @summary Deletes an uploaded backup file
     * @param {string} id The id of the uploaded backup.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteUploadedBackup(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets a list of existing object mappings between current org and source org. Source org should be \"default\" when getting object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:read
     * @summary Gets list of object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getObjectMappings(sourceOrg: string, axiosOptions?: any): AxiosPromise<Array<ObjectMappingResponse>>;
    /**
     * Returns all the information and status of an upload job. - sp:config-backups:read
     * @summary Get an uploaded backup\'s information
     * @param {string} id The id of the uploaded backup.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUploadedBackup(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Returns a list of the current uploaded backups associated with the current tenant. A filter \"status\" can be added to only return the Completed, Failed, or Successful uploads
     * @summary Gets list of Uploaded backups
     * @param {string} [status] Filter listed uploaded backups by status of operation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUploadedBackups(status?: string, axiosOptions?: any): AxiosPromise<Array<UploadsResponse>>;
    /**
     * This post will upload a JSON backup file into a tenant. Configuration files can be managed and deployed via Configuration Hub by uploading a json file which contains configuration data. The JSON file should be the same as the one used by our import endpoints. The object types that currently support by upload file functionality are the same as the ones supported by our regular backup functionality. here: [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).  The request will need the following security scope: - sp:config:manage
     * @summary Uploads a backup file
     * @param {any} data JSON file containing the objects to be imported.
     * @param {string} name Name that will be assigned to the uploaded file.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importUploadedBackup(data: any, name: string, axiosOptions?: any): AxiosPromise<UploadsRequest>;
    /**
     * This updates a set of object mappings, only enabled and targetValue fields can be updated. Source org should be \"default\" when updating object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk updates object mappings
     * @param {string} sourceOrg The name of the source org.
     * @param {ObjectMappingBulkPatchRequest} objectMappingBulkPatchRequest The object mapping request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateObjectMappings(sourceOrg: string, objectMappingBulkPatchRequest: ObjectMappingBulkPatchRequest, axiosOptions?: any): AxiosPromise<ObjectMappingBulkPatchResponse>;
};
/**
 * Request parameters for createObjectMapping operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiCreateObjectMappingRequest
 */
export interface ConfigurationHubApiCreateObjectMappingRequest {
    /**
     * The name of the source org.
     * @type {string}
     * @memberof ConfigurationHubApiCreateObjectMapping
     */
    readonly sourceOrg: string;
    /**
     * The object mapping request body.
     * @type {ObjectMappingRequest}
     * @memberof ConfigurationHubApiCreateObjectMapping
     */
    readonly objectMappingRequest: ObjectMappingRequest;
}
/**
 * Request parameters for createObjectMappings operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiCreateObjectMappingsRequest
 */
export interface ConfigurationHubApiCreateObjectMappingsRequest {
    /**
     * The name of the source org.
     * @type {string}
     * @memberof ConfigurationHubApiCreateObjectMappings
     */
    readonly sourceOrg: string;
    /**
     * The bulk create object mapping request body.
     * @type {ObjectMappingBulkCreateRequest}
     * @memberof ConfigurationHubApiCreateObjectMappings
     */
    readonly objectMappingBulkCreateRequest: ObjectMappingBulkCreateRequest;
}
/**
 * Request parameters for deleteObjectMapping operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiDeleteObjectMappingRequest
 */
export interface ConfigurationHubApiDeleteObjectMappingRequest {
    /**
     * The name of the source org.
     * @type {string}
     * @memberof ConfigurationHubApiDeleteObjectMapping
     */
    readonly sourceOrg: string;
    /**
     * The id of the object mapping to be deleted.
     * @type {string}
     * @memberof ConfigurationHubApiDeleteObjectMapping
     */
    readonly objectMappingId: string;
}
/**
 * Request parameters for deleteUploadedBackup operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiDeleteUploadedBackupRequest
 */
export interface ConfigurationHubApiDeleteUploadedBackupRequest {
    /**
     * The id of the uploaded backup.
     * @type {string}
     * @memberof ConfigurationHubApiDeleteUploadedBackup
     */
    readonly id: string;
}
/**
 * Request parameters for getObjectMappings operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiGetObjectMappingsRequest
 */
export interface ConfigurationHubApiGetObjectMappingsRequest {
    /**
     * The name of the source org.
     * @type {string}
     * @memberof ConfigurationHubApiGetObjectMappings
     */
    readonly sourceOrg: string;
}
/**
 * Request parameters for getUploadedBackup operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiGetUploadedBackupRequest
 */
export interface ConfigurationHubApiGetUploadedBackupRequest {
    /**
     * The id of the uploaded backup.
     * @type {string}
     * @memberof ConfigurationHubApiGetUploadedBackup
     */
    readonly id: string;
}
/**
 * Request parameters for getUploadedBackups operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiGetUploadedBackupsRequest
 */
export interface ConfigurationHubApiGetUploadedBackupsRequest {
    /**
     * Filter listed uploaded backups by status of operation
     * @type {string}
     * @memberof ConfigurationHubApiGetUploadedBackups
     */
    readonly status?: string;
}
/**
 * Request parameters for importUploadedBackup operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiImportUploadedBackupRequest
 */
export interface ConfigurationHubApiImportUploadedBackupRequest {
    /**
     * JSON file containing the objects to be imported.
     * @type {any}
     * @memberof ConfigurationHubApiImportUploadedBackup
     */
    readonly data: any;
    /**
     * Name that will be assigned to the uploaded file.
     * @type {string}
     * @memberof ConfigurationHubApiImportUploadedBackup
     */
    readonly name: string;
}
/**
 * Request parameters for updateObjectMappings operation in ConfigurationHubApi.
 * @export
 * @interface ConfigurationHubApiUpdateObjectMappingsRequest
 */
export interface ConfigurationHubApiUpdateObjectMappingsRequest {
    /**
     * The name of the source org.
     * @type {string}
     * @memberof ConfigurationHubApiUpdateObjectMappings
     */
    readonly sourceOrg: string;
    /**
     * The object mapping request body.
     * @type {ObjectMappingBulkPatchRequest}
     * @memberof ConfigurationHubApiUpdateObjectMappings
     */
    readonly objectMappingBulkPatchRequest: ObjectMappingBulkPatchRequest;
}
/**
 * ConfigurationHubApi - object-oriented interface
 * @export
 * @class ConfigurationHubApi
 * @extends {BaseAPI}
 */
export declare class ConfigurationHubApi extends BaseAPI {
    /**
     * This creates an object mapping between current org and source org. Source org should be \"default\" when creating an object mapping that is not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Creates an object mapping
     * @param {ConfigurationHubApiCreateObjectMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    createObjectMapping(requestParameters: ConfigurationHubApiCreateObjectMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectMappingResponse, any>>;
    /**
     * This creates a set of object mappings (Max 25) between current org and source org. Source org should be \"default\" when creating object mappings that are not to be associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk creates object mappings
     * @param {ConfigurationHubApiCreateObjectMappingsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    createObjectMappings(requestParameters: ConfigurationHubApiCreateObjectMappingsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectMappingBulkCreateResponse, any>>;
    /**
     * This deletes an existing object mapping. Source org should be \"default\" when deleting an object mapping that is not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Deletes an object mapping
     * @param {ConfigurationHubApiDeleteObjectMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    deleteObjectMapping(requestParameters: ConfigurationHubApiDeleteObjectMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This deletes an Uploaded backup based on job ID. On success, this endpoint will return an empty response. The job id can be obtained from the response after a successful upload, or the list uploads endpoint. The following scopes are required to access this endpoint: sp:config:manage
     * @summary Deletes an uploaded backup file
     * @param {ConfigurationHubApiDeleteUploadedBackupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    deleteUploadedBackup(requestParameters: ConfigurationHubApiDeleteUploadedBackupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets a list of existing object mappings between current org and source org. Source org should be \"default\" when getting object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:read
     * @summary Gets list of object mappings
     * @param {ConfigurationHubApiGetObjectMappingsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    getObjectMappings(requestParameters: ConfigurationHubApiGetObjectMappingsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectMappingResponse[], any>>;
    /**
     * Returns all the information and status of an upload job. - sp:config-backups:read
     * @summary Get an uploaded backup\'s information
     * @param {ConfigurationHubApiGetUploadedBackupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    getUploadedBackup(requestParameters: ConfigurationHubApiGetUploadedBackupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Returns a list of the current uploaded backups associated with the current tenant. A filter \"status\" can be added to only return the Completed, Failed, or Successful uploads
     * @summary Gets list of Uploaded backups
     * @param {ConfigurationHubApiGetUploadedBackupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    getUploadedBackups(requestParameters?: ConfigurationHubApiGetUploadedBackupsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UploadsResponse[], any>>;
    /**
     * This post will upload a JSON backup file into a tenant. Configuration files can be managed and deployed via Configuration Hub by uploading a json file which contains configuration data. The JSON file should be the same as the one used by our import endpoints. The object types that currently support by upload file functionality are the same as the ones supported by our regular backup functionality. here: [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).  The request will need the following security scope: - sp:config:manage
     * @summary Uploads a backup file
     * @param {ConfigurationHubApiImportUploadedBackupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    importUploadedBackup(requestParameters: ConfigurationHubApiImportUploadedBackupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UploadsRequest, any>>;
    /**
     * This updates a set of object mappings, only enabled and targetValue fields can be updated. Source org should be \"default\" when updating object mappings that are not associated to any particular org. The request will need the following security scope: - sp:config-object-mapping:manage
     * @summary Bulk updates object mappings
     * @param {ConfigurationHubApiUpdateObjectMappingsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationHubApi
     */
    updateObjectMappings(requestParameters: ConfigurationHubApiUpdateObjectMappingsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectMappingBulkPatchResponse, any>>;
}
/**
 * ConnectorsApi - axios parameter creator
 * @export
 */
export declare const ConnectorsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create custom connector. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create custom connector
     * @param {V3CreateConnectorDto} v3CreateConnectorDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCustomConnector: (v3CreateConnectorDto: V3CreateConnectorDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Deletes connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomConnector: (scriptName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnector: (scriptName: string, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorCorrelationConfig: (scriptName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw, co*  **type**: *sw, co, eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*  **labels**: *ca*
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorList: (filters?: string, limit?: number, offset?: number, count?: boolean, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorSourceConfig: (scriptName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorSourceTemplate: (scriptName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} locale The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorTranslations: (scriptName: string, locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector correlation config xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putCorrelationConfig: (scriptName: string, file: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector source config xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceConfig: (scriptName: string, file: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector source template xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceTemplate: (scriptName: string, file: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} locale The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTranslations: (scriptName: string, locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API. The following fields are patchable: * connectorMetadata * applicationXml * correlationConfigXml * sourceConfigXml
     * @summary Update connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of connector detail update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateConnector: (scriptName: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConnectorsApi - functional programming interface
 * @export
 */
export declare const ConnectorsApiFp: (configuration?: Configuration) => {
    /**
     * Create custom connector. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create custom connector
     * @param {V3CreateConnectorDto} v3CreateConnectorDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCustomConnector(v3CreateConnectorDto: V3CreateConnectorDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V3ConnectorDto>>;
    /**
     * Delete a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Deletes connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomConnector(scriptName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetches a connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnector(scriptName: string, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorDetail>>;
    /**
     * Fetches a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorCorrelationConfig(scriptName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw, co*  **type**: *sw, co, eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*  **labels**: *ca*
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorList(filters?: string, limit?: number, offset?: number, count?: boolean, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V3ConnectorDto>>>;
    /**
     * Fetches a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorSourceConfig(scriptName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Fetches a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorSourceTemplate(scriptName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Fetches a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} locale The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorTranslations(scriptName: string, locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Update a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector correlation config xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putCorrelationConfig(scriptName: string, file: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDetail>>;
    /**
     * Update a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector source config xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceConfig(scriptName: string, file: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDetail>>;
    /**
     * Update a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector source template xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceTemplate(scriptName: string, file: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDetail>>;
    /**
     * Update a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} locale The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTranslations(scriptName: string, locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateDetail>>;
    /**
     * Patch a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API. The following fields are patchable: * connectorMetadata * applicationXml * correlationConfigXml * sourceConfigXml
     * @summary Update connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of connector detail update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateConnector(scriptName: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorDetail>>;
};
/**
 * ConnectorsApi - factory interface
 * @export
 */
export declare const ConnectorsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create custom connector. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create custom connector
     * @param {V3CreateConnectorDto} v3CreateConnectorDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCustomConnector(v3CreateConnectorDto: V3CreateConnectorDto, axiosOptions?: any): AxiosPromise<V3ConnectorDto>;
    /**
     * Delete a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Deletes connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomConnector(scriptName: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Fetches a connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnector(scriptName: string, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: any): AxiosPromise<ConnectorDetail>;
    /**
     * Fetches a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorCorrelationConfig(scriptName: string, axiosOptions?: any): AxiosPromise<string>;
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw, co*  **type**: *sw, co, eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*  **labels**: *ca*
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorList(filters?: string, limit?: number, offset?: number, count?: boolean, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: any): AxiosPromise<Array<V3ConnectorDto>>;
    /**
     * Fetches a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorSourceConfig(scriptName: string, axiosOptions?: any): AxiosPromise<string>;
    /**
     * Fetches a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorSourceTemplate(scriptName: string, axiosOptions?: any): AxiosPromise<string>;
    /**
     * Fetches a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} locale The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorTranslations(scriptName: string, locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: any): AxiosPromise<string>;
    /**
     * Update a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector correlation config xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putCorrelationConfig(scriptName: string, file: any, axiosOptions?: any): AxiosPromise<UpdateDetail>;
    /**
     * Update a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector source config xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceConfig(scriptName: string, file: any, axiosOptions?: any): AxiosPromise<UpdateDetail>;
    /**
     * Update a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {any} file connector source template xml file
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceTemplate(scriptName: string, file: any, axiosOptions?: any): AxiosPromise<UpdateDetail>;
    /**
     * Update a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} locale The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTranslations(scriptName: string, locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: any): AxiosPromise<UpdateDetail>;
    /**
     * Patch a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API. The following fields are patchable: * connectorMetadata * applicationXml * correlationConfigXml * sourceConfigXml
     * @summary Update connector by script name
     * @param {string} scriptName The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of connector detail update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateConnector(scriptName: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<ConnectorDetail>;
};
/**
 * Request parameters for createCustomConnector operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiCreateCustomConnectorRequest
 */
export interface ConnectorsApiCreateCustomConnectorRequest {
    /**
     *
     * @type {V3CreateConnectorDto}
     * @memberof ConnectorsApiCreateCustomConnector
     */
    readonly v3CreateConnectorDto: V3CreateConnectorDto;
}
/**
 * Request parameters for deleteCustomConnector operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiDeleteCustomConnectorRequest
 */
export interface ConnectorsApiDeleteCustomConnectorRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiDeleteCustomConnector
     */
    readonly scriptName: string;
}
/**
 * Request parameters for getConnector operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetConnectorRequest
 */
export interface ConnectorsApiGetConnectorRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiGetConnector
     */
    readonly scriptName: string;
    /**
     * The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @type {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'}
     * @memberof ConnectorsApiGetConnector
     */
    readonly locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl';
}
/**
 * Request parameters for getConnectorCorrelationConfig operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetConnectorCorrelationConfigRequest
 */
export interface ConnectorsApiGetConnectorCorrelationConfigRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiGetConnectorCorrelationConfig
     */
    readonly scriptName: string;
}
/**
 * Request parameters for getConnectorList operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetConnectorListRequest
 */
export interface ConnectorsApiGetConnectorListRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw, co*  **type**: *sw, co, eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*  **labels**: *ca*
     * @type {string}
     * @memberof ConnectorsApiGetConnectorList
     */
    readonly filters?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ConnectorsApiGetConnectorList
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ConnectorsApiGetConnectorList
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ConnectorsApiGetConnectorList
     */
    readonly count?: boolean;
    /**
     * The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @type {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'}
     * @memberof ConnectorsApiGetConnectorList
     */
    readonly locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl';
}
/**
 * Request parameters for getConnectorSourceConfig operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetConnectorSourceConfigRequest
 */
export interface ConnectorsApiGetConnectorSourceConfigRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiGetConnectorSourceConfig
     */
    readonly scriptName: string;
}
/**
 * Request parameters for getConnectorSourceTemplate operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetConnectorSourceTemplateRequest
 */
export interface ConnectorsApiGetConnectorSourceTemplateRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiGetConnectorSourceTemplate
     */
    readonly scriptName: string;
}
/**
 * Request parameters for getConnectorTranslations operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiGetConnectorTranslationsRequest
 */
export interface ConnectorsApiGetConnectorTranslationsRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiGetConnectorTranslations
     */
    readonly scriptName: string;
    /**
     * The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @type {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'}
     * @memberof ConnectorsApiGetConnectorTranslations
     */
    readonly locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl';
}
/**
 * Request parameters for putCorrelationConfig operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiPutCorrelationConfigRequest
 */
export interface ConnectorsApiPutCorrelationConfigRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiPutCorrelationConfig
     */
    readonly scriptName: string;
    /**
     * connector correlation config xml file
     * @type {any}
     * @memberof ConnectorsApiPutCorrelationConfig
     */
    readonly file: any;
}
/**
 * Request parameters for putSourceConfig operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiPutSourceConfigRequest
 */
export interface ConnectorsApiPutSourceConfigRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiPutSourceConfig
     */
    readonly scriptName: string;
    /**
     * connector source config xml file
     * @type {any}
     * @memberof ConnectorsApiPutSourceConfig
     */
    readonly file: any;
}
/**
 * Request parameters for putSourceTemplate operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiPutSourceTemplateRequest
 */
export interface ConnectorsApiPutSourceTemplateRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiPutSourceTemplate
     */
    readonly scriptName: string;
    /**
     * connector source template xml file
     * @type {any}
     * @memberof ConnectorsApiPutSourceTemplate
     */
    readonly file: any;
}
/**
 * Request parameters for putTranslations operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiPutTranslationsRequest
 */
export interface ConnectorsApiPutTranslationsRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiPutTranslations
     */
    readonly scriptName: string;
    /**
     * The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @type {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'}
     * @memberof ConnectorsApiPutTranslations
     */
    readonly locale: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl';
}
/**
 * Request parameters for updateConnector operation in ConnectorsApi.
 * @export
 * @interface ConnectorsApiUpdateConnectorRequest
 */
export interface ConnectorsApiUpdateConnectorRequest {
    /**
     * The scriptName value of the connector. Scriptname is the unique id generated at connector creation.
     * @type {string}
     * @memberof ConnectorsApiUpdateConnector
     */
    readonly scriptName: string;
    /**
     * A list of connector detail update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperation>}
     * @memberof ConnectorsApiUpdateConnector
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * ConnectorsApi - object-oriented interface
 * @export
 * @class ConnectorsApi
 * @extends {BaseAPI}
 */
export declare class ConnectorsApi extends BaseAPI {
    /**
     * Create custom connector. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create custom connector
     * @param {ConnectorsApiCreateCustomConnectorRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    createCustomConnector(requestParameters: ConnectorsApiCreateCustomConnectorRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V3ConnectorDto, any>>;
    /**
     * Delete a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Deletes connector by script name
     * @param {ConnectorsApiDeleteCustomConnectorRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    deleteCustomConnector(requestParameters: ConnectorsApiDeleteCustomConnectorRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Fetches a connector that using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector by script name
     * @param {ConnectorsApiGetConnectorRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    getConnector(requestParameters: ConnectorsApiGetConnectorRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorDetail, any>>;
    /**
     * Fetches a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiGetConnectorCorrelationConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    getConnectorCorrelationConfig(requestParameters: ConnectorsApiGetConnectorCorrelationConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {ConnectorsApiGetConnectorListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    getConnectorList(requestParameters?: ConnectorsApiGetConnectorListRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V3ConnectorDto[], any>>;
    /**
     * Fetches a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiGetConnectorSourceConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    getConnectorSourceConfig(requestParameters: ConnectorsApiGetConnectorSourceConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Fetches a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiGetConnectorSourceTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    getConnectorSourceTemplate(requestParameters: ConnectorsApiGetConnectorSourceTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Fetches a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiGetConnectorTranslationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    getConnectorTranslations(requestParameters: ConnectorsApiGetConnectorTranslationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Update a connector\'s correlation config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiPutCorrelationConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    putCorrelationConfig(requestParameters: ConnectorsApiPutCorrelationConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateDetail, any>>;
    /**
     * Update a connector\'s source config using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiPutSourceConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    putSourceConfig(requestParameters: ConnectorsApiPutSourceConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateDetail, any>>;
    /**
     * Update a connector\'s source template using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiPutSourceTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    putSourceTemplate(requestParameters: ConnectorsApiPutSourceTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateDetail, any>>;
    /**
     * Update a connector\'s translations using its script name. A token with ORG_ADMIN authority is required to call this API.
     * @param {ConnectorsApiPutTranslationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    putTranslations(requestParameters: ConnectorsApiPutTranslationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpdateDetail, any>>;
    /**
     * Patch a custom connector that using its script name. A token with ORG_ADMIN authority is required to call this API. The following fields are patchable: * connectorMetadata * applicationXml * correlationConfigXml * sourceConfigXml
     * @summary Update connector by script name
     * @param {ConnectorsApiUpdateConnectorRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsApi
     */
    updateConnector(requestParameters: ConnectorsApiUpdateConnectorRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorDetail, any>>;
}
/**
 * GlobalTenantSecuritySettingsApi - axios parameter creator
 * @export
 */
export declare const GlobalTenantSecuritySettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:create\'
     * @summary Create security network configuration.
     * @param {NetworkConfiguration} networkConfiguration Network configuration creation request body.   The following constraints ensure the request body conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAuthOrgNetworkConfig: (networkConfiguration: NetworkConfiguration, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the details of an org\'s lockout auth configuration.
     * @summary Get Auth Org Lockout Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgLockoutConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:read\'
     * @summary Get security network configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgNetworkConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the details of an org\'s service provider auth configuration.
     * @summary Get Service Provider Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgServiceProviderConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the details of an org\'s session auth configuration.
     * @summary Get Auth Org Session Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgSessionConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing lockout configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update Auth Org Lockout Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org lockout configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Lockout Config conforms to certain logical guidelines, which are:   1. maximumAttempts &gt;&#x3D; 1 &amp;&amp; maximumAttempts &lt;&#x3D; 15   2. lockoutDuration &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60   3. lockoutWindow &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgLockoutConfig: (jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing network configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update security network configuration.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org network configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Network Config conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgNetworkConfig: (jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing service provider configuration for an org using PATCH.
     * @summary Update Service Provider Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org service provider configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Note: /federationProtocolDetails/0 is IdpDetails /federationProtocolDetails/1 is SpDetails Ensures that the patched ServiceProviderConfig conforms to certain logical guidelines, which are:   1. Do not add or remove any elements in the federation protocol details in the service provider configuration.   2. Do not modify, add, or delete the service provider details element in the federation protocol details.   3. If this is the first time the patched ServiceProviderConfig enables Remote IDP sign-in, it must also include IDPDetails.   4. If the patch enables Remote IDP sign in, the entityID in the IDPDetails cannot be null. IDPDetails must include an entityID.   5. Any JIT configuration update must be valid.  Just in time configuration update must be valid when enabled. This includes:   - A Source ID   - Source attribute mappings   - Source attribute maps have all the required key values (firstName, lastName, email)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgServiceProviderConfig: (jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing session configuration for an org using PATCH.
     * @summary Update Auth Org Session Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org session configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Session Config conforms to certain logical guidelines, which are:   1. maxSessionTime &gt;&#x3D; 1 &amp;&amp; maxSessionTime &lt;&#x3D; 10080 (1 week)   2. maxIdleTime &gt;&#x3D; 1 &amp;&amp; maxIdleTime &lt;&#x3D; 1440 (1 day)   3. maxSessionTime must have a greater duration than maxIdleTime.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgSessionConfig: (jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GlobalTenantSecuritySettingsApi - functional programming interface
 * @export
 */
export declare const GlobalTenantSecuritySettingsApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:create\'
     * @summary Create security network configuration.
     * @param {NetworkConfiguration} networkConfiguration Network configuration creation request body.   The following constraints ensure the request body conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAuthOrgNetworkConfig(networkConfiguration: NetworkConfiguration, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConfiguration>>;
    /**
     * This API returns the details of an org\'s lockout auth configuration.
     * @summary Get Auth Org Lockout Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgLockoutConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LockoutConfiguration>>;
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:read\'
     * @summary Get security network configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgNetworkConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConfiguration>>;
    /**
     * This API returns the details of an org\'s service provider auth configuration.
     * @summary Get Service Provider Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgServiceProviderConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceProviderConfiguration>>;
    /**
     * This API returns the details of an org\'s session auth configuration.
     * @summary Get Auth Org Session Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgSessionConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionConfiguration>>;
    /**
     * This API updates an existing lockout configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update Auth Org Lockout Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org lockout configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Lockout Config conforms to certain logical guidelines, which are:   1. maximumAttempts &gt;&#x3D; 1 &amp;&amp; maximumAttempts &lt;&#x3D; 15   2. lockoutDuration &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60   3. lockoutWindow &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgLockoutConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LockoutConfiguration>>;
    /**
     * This API updates an existing network configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update security network configuration.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org network configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Network Config conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgNetworkConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConfiguration>>;
    /**
     * This API updates an existing service provider configuration for an org using PATCH.
     * @summary Update Service Provider Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org service provider configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Note: /federationProtocolDetails/0 is IdpDetails /federationProtocolDetails/1 is SpDetails Ensures that the patched ServiceProviderConfig conforms to certain logical guidelines, which are:   1. Do not add or remove any elements in the federation protocol details in the service provider configuration.   2. Do not modify, add, or delete the service provider details element in the federation protocol details.   3. If this is the first time the patched ServiceProviderConfig enables Remote IDP sign-in, it must also include IDPDetails.   4. If the patch enables Remote IDP sign in, the entityID in the IDPDetails cannot be null. IDPDetails must include an entityID.   5. Any JIT configuration update must be valid.  Just in time configuration update must be valid when enabled. This includes:   - A Source ID   - Source attribute mappings   - Source attribute maps have all the required key values (firstName, lastName, email)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgServiceProviderConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceProviderConfiguration>>;
    /**
     * This API updates an existing session configuration for an org using PATCH.
     * @summary Update Auth Org Session Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org session configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Session Config conforms to certain logical guidelines, which are:   1. maxSessionTime &gt;&#x3D; 1 &amp;&amp; maxSessionTime &lt;&#x3D; 10080 (1 week)   2. maxIdleTime &gt;&#x3D; 1 &amp;&amp; maxIdleTime &lt;&#x3D; 1440 (1 day)   3. maxSessionTime must have a greater duration than maxIdleTime.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgSessionConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionConfiguration>>;
};
/**
 * GlobalTenantSecuritySettingsApi - factory interface
 * @export
 */
export declare const GlobalTenantSecuritySettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:create\'
     * @summary Create security network configuration.
     * @param {NetworkConfiguration} networkConfiguration Network configuration creation request body.   The following constraints ensure the request body conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAuthOrgNetworkConfig(networkConfiguration: NetworkConfiguration, axiosOptions?: any): AxiosPromise<NetworkConfiguration>;
    /**
     * This API returns the details of an org\'s lockout auth configuration.
     * @summary Get Auth Org Lockout Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgLockoutConfig(axiosOptions?: any): AxiosPromise<LockoutConfiguration>;
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:read\'
     * @summary Get security network configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgNetworkConfig(axiosOptions?: any): AxiosPromise<NetworkConfiguration>;
    /**
     * This API returns the details of an org\'s service provider auth configuration.
     * @summary Get Service Provider Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgServiceProviderConfig(axiosOptions?: any): AxiosPromise<ServiceProviderConfiguration>;
    /**
     * This API returns the details of an org\'s session auth configuration.
     * @summary Get Auth Org Session Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAuthOrgSessionConfig(axiosOptions?: any): AxiosPromise<SessionConfiguration>;
    /**
     * This API updates an existing lockout configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update Auth Org Lockout Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org lockout configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Lockout Config conforms to certain logical guidelines, which are:   1. maximumAttempts &gt;&#x3D; 1 &amp;&amp; maximumAttempts &lt;&#x3D; 15   2. lockoutDuration &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60   3. lockoutWindow &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgLockoutConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<LockoutConfiguration>;
    /**
     * This API updates an existing network configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update security network configuration.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org network configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Network Config conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgNetworkConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<NetworkConfiguration>;
    /**
     * This API updates an existing service provider configuration for an org using PATCH.
     * @summary Update Service Provider Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org service provider configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Note: /federationProtocolDetails/0 is IdpDetails /federationProtocolDetails/1 is SpDetails Ensures that the patched ServiceProviderConfig conforms to certain logical guidelines, which are:   1. Do not add or remove any elements in the federation protocol details in the service provider configuration.   2. Do not modify, add, or delete the service provider details element in the federation protocol details.   3. If this is the first time the patched ServiceProviderConfig enables Remote IDP sign-in, it must also include IDPDetails.   4. If the patch enables Remote IDP sign in, the entityID in the IDPDetails cannot be null. IDPDetails must include an entityID.   5. Any JIT configuration update must be valid.  Just in time configuration update must be valid when enabled. This includes:   - A Source ID   - Source attribute mappings   - Source attribute maps have all the required key values (firstName, lastName, email)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgServiceProviderConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<ServiceProviderConfiguration>;
    /**
     * This API updates an existing session configuration for an org using PATCH.
     * @summary Update Auth Org Session Configuration
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of auth org session configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Session Config conforms to certain logical guidelines, which are:   1. maxSessionTime &gt;&#x3D; 1 &amp;&amp; maxSessionTime &lt;&#x3D; 10080 (1 week)   2. maxIdleTime &gt;&#x3D; 1 &amp;&amp; maxIdleTime &lt;&#x3D; 1440 (1 day)   3. maxSessionTime must have a greater duration than maxIdleTime.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAuthOrgSessionConfig(jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<SessionConfiguration>;
};
/**
 * Request parameters for createAuthOrgNetworkConfig operation in GlobalTenantSecuritySettingsApi.
 * @export
 * @interface GlobalTenantSecuritySettingsApiCreateAuthOrgNetworkConfigRequest
 */
export interface GlobalTenantSecuritySettingsApiCreateAuthOrgNetworkConfigRequest {
    /**
     * Network configuration creation request body.   The following constraints ensure the request body conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @type {NetworkConfiguration}
     * @memberof GlobalTenantSecuritySettingsApiCreateAuthOrgNetworkConfig
     */
    readonly networkConfiguration: NetworkConfiguration;
}
/**
 * Request parameters for patchAuthOrgLockoutConfig operation in GlobalTenantSecuritySettingsApi.
 * @export
 * @interface GlobalTenantSecuritySettingsApiPatchAuthOrgLockoutConfigRequest
 */
export interface GlobalTenantSecuritySettingsApiPatchAuthOrgLockoutConfigRequest {
    /**
     * A list of auth org lockout configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Lockout Config conforms to certain logical guidelines, which are:   1. maximumAttempts &gt;&#x3D; 1 &amp;&amp; maximumAttempts &lt;&#x3D; 15   2. lockoutDuration &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60   3. lockoutWindow &gt;&#x3D; 5 &amp;&amp; lockoutDuration &lt;&#x3D; 60
     * @type {Array<JsonPatchOperation>}
     * @memberof GlobalTenantSecuritySettingsApiPatchAuthOrgLockoutConfig
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for patchAuthOrgNetworkConfig operation in GlobalTenantSecuritySettingsApi.
 * @export
 * @interface GlobalTenantSecuritySettingsApiPatchAuthOrgNetworkConfigRequest
 */
export interface GlobalTenantSecuritySettingsApiPatchAuthOrgNetworkConfigRequest {
    /**
     * A list of auth org network configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Network Config conforms to certain logical guidelines, which are:   1. Each string element in the range array must be a valid ip address or ip subnet mask.   2. Each string element in the geolocation array must be 2 characters, and they can only be uppercase letters.
     * @type {Array<JsonPatchOperation>}
     * @memberof GlobalTenantSecuritySettingsApiPatchAuthOrgNetworkConfig
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for patchAuthOrgServiceProviderConfig operation in GlobalTenantSecuritySettingsApi.
 * @export
 * @interface GlobalTenantSecuritySettingsApiPatchAuthOrgServiceProviderConfigRequest
 */
export interface GlobalTenantSecuritySettingsApiPatchAuthOrgServiceProviderConfigRequest {
    /**
     * A list of auth org service provider configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Note: /federationProtocolDetails/0 is IdpDetails /federationProtocolDetails/1 is SpDetails Ensures that the patched ServiceProviderConfig conforms to certain logical guidelines, which are:   1. Do not add or remove any elements in the federation protocol details in the service provider configuration.   2. Do not modify, add, or delete the service provider details element in the federation protocol details.   3. If this is the first time the patched ServiceProviderConfig enables Remote IDP sign-in, it must also include IDPDetails.   4. If the patch enables Remote IDP sign in, the entityID in the IDPDetails cannot be null. IDPDetails must include an entityID.   5. Any JIT configuration update must be valid.  Just in time configuration update must be valid when enabled. This includes:   - A Source ID   - Source attribute mappings   - Source attribute maps have all the required key values (firstName, lastName, email)
     * @type {Array<JsonPatchOperation>}
     * @memberof GlobalTenantSecuritySettingsApiPatchAuthOrgServiceProviderConfig
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for patchAuthOrgSessionConfig operation in GlobalTenantSecuritySettingsApi.
 * @export
 * @interface GlobalTenantSecuritySettingsApiPatchAuthOrgSessionConfigRequest
 */
export interface GlobalTenantSecuritySettingsApiPatchAuthOrgSessionConfigRequest {
    /**
     * A list of auth org session configuration update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Ensures that the patched Session Config conforms to certain logical guidelines, which are:   1. maxSessionTime &gt;&#x3D; 1 &amp;&amp; maxSessionTime &lt;&#x3D; 10080 (1 week)   2. maxIdleTime &gt;&#x3D; 1 &amp;&amp; maxIdleTime &lt;&#x3D; 1440 (1 day)   3. maxSessionTime must have a greater duration than maxIdleTime.
     * @type {Array<JsonPatchOperation>}
     * @memberof GlobalTenantSecuritySettingsApiPatchAuthOrgSessionConfig
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * GlobalTenantSecuritySettingsApi - object-oriented interface
 * @export
 * @class GlobalTenantSecuritySettingsApi
 * @extends {BaseAPI}
 */
export declare class GlobalTenantSecuritySettingsApi extends BaseAPI {
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:create\'
     * @summary Create security network configuration.
     * @param {GlobalTenantSecuritySettingsApiCreateAuthOrgNetworkConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    createAuthOrgNetworkConfig(requestParameters: GlobalTenantSecuritySettingsApiCreateAuthOrgNetworkConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NetworkConfiguration, any>>;
    /**
     * This API returns the details of an org\'s lockout auth configuration.
     * @summary Get Auth Org Lockout Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    getAuthOrgLockoutConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LockoutConfiguration, any>>;
    /**
     * This API returns the details of an org\'s network auth configuration. Requires security scope of: \'sp:auth-org:read\'
     * @summary Get security network configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    getAuthOrgNetworkConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NetworkConfiguration, any>>;
    /**
     * This API returns the details of an org\'s service provider auth configuration.
     * @summary Get Service Provider Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    getAuthOrgServiceProviderConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceProviderConfiguration, any>>;
    /**
     * This API returns the details of an org\'s session auth configuration.
     * @summary Get Auth Org Session Configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    getAuthOrgSessionConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionConfiguration, any>>;
    /**
     * This API updates an existing lockout configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update Auth Org Lockout Configuration
     * @param {GlobalTenantSecuritySettingsApiPatchAuthOrgLockoutConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    patchAuthOrgLockoutConfig(requestParameters: GlobalTenantSecuritySettingsApiPatchAuthOrgLockoutConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LockoutConfiguration, any>>;
    /**
     * This API updates an existing network configuration for an org using PATCH  Requires security scope of:  \'sp:auth-org:update\'
     * @summary Update security network configuration.
     * @param {GlobalTenantSecuritySettingsApiPatchAuthOrgNetworkConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    patchAuthOrgNetworkConfig(requestParameters: GlobalTenantSecuritySettingsApiPatchAuthOrgNetworkConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NetworkConfiguration, any>>;
    /**
     * This API updates an existing service provider configuration for an org using PATCH.
     * @summary Update Service Provider Configuration
     * @param {GlobalTenantSecuritySettingsApiPatchAuthOrgServiceProviderConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    patchAuthOrgServiceProviderConfig(requestParameters: GlobalTenantSecuritySettingsApiPatchAuthOrgServiceProviderConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceProviderConfiguration, any>>;
    /**
     * This API updates an existing session configuration for an org using PATCH.
     * @summary Update Auth Org Session Configuration
     * @param {GlobalTenantSecuritySettingsApiPatchAuthOrgSessionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalTenantSecuritySettingsApi
     */
    patchAuthOrgSessionConfig(requestParameters: GlobalTenantSecuritySettingsApiPatchAuthOrgSessionConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionConfiguration, any>>;
}
/**
 * IdentityProfilesApi - axios parameter creator
 * @export
 */
export declare const IdentityProfilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfile} identityProfile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityProfile: (identityProfile: IdentityProfile, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfile: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {Array<string>} requestBody Identity Profile bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfiles: (requestBody: Array<string>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportIdentityProfiles: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns the default identity attribute config. A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Get default Identity Attribute Config
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultIdentityAttributeConfig: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get single Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProfile: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {Array<IdentityProfileExportedObject>} identityProfileExportedObject Previously exported Identity Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importIdentityProfiles: (identityProfileExportedObject: Array<IdentityProfileExportedObject>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityProfiles: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityPreviewRequest} identityPreviewRequest Identity Preview request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showIdentityPreview: (identityPreviewRequest: IdentityPreviewRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {string} identityProfileId The Identity Profile ID to be processed
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncIdentityProfile: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProfile: (identityProfileId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IdentityProfilesApi - functional programming interface
 * @export
 */
export declare const IdentityProfilesApiFp: (configuration?: Configuration) => {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfile} identityProfile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityProfile(identityProfile: IdentityProfile, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProfile>>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfile(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultSimplified>>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {Array<string>} requestBody Identity Profile bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfiles(requestBody: Array<string>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultSimplified>>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityProfileExportedObject>>>;
    /**
     * This returns the default identity attribute config. A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Get default Identity Attribute Config
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultIdentityAttributeConfig(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityAttributeConfig>>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get single Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProfile(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProfile>>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {Array<IdentityProfileExportedObject>} identityProfileExportedObject Previously exported Identity Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importIdentityProfiles(identityProfileExportedObject: Array<IdentityProfileExportedObject>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectImportResult>>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityProfile>>>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityPreviewRequest} identityPreviewRequest Identity Preview request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showIdentityPreview(identityPreviewRequest: IdentityPreviewRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityPreviewResponse>>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {string} identityProfileId The Identity Profile ID to be processed
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncIdentityProfile(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProfile(identityProfileId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProfile>>;
};
/**
 * IdentityProfilesApi - factory interface
 * @export
 */
export declare const IdentityProfilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfile} identityProfile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityProfile(identityProfile: IdentityProfile, axiosOptions?: any): AxiosPromise<IdentityProfile>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfile(identityProfileId: string, axiosOptions?: any): AxiosPromise<TaskResultSimplified>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {Array<string>} requestBody Identity Profile bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfiles(requestBody: Array<string>, axiosOptions?: any): AxiosPromise<TaskResultSimplified>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityProfileExportedObject>>;
    /**
     * This returns the default identity attribute config. A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Get default Identity Attribute Config
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultIdentityAttributeConfig(identityProfileId: string, axiosOptions?: any): AxiosPromise<IdentityAttributeConfig>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get single Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProfile(identityProfileId: string, axiosOptions?: any): AxiosPromise<IdentityProfile>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {Array<IdentityProfileExportedObject>} identityProfileExportedObject Previously exported Identity Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importIdentityProfiles(identityProfileExportedObject: Array<IdentityProfileExportedObject>, axiosOptions?: any): AxiosPromise<ObjectImportResult>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityProfile>>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityPreviewRequest} identityPreviewRequest Identity Preview request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showIdentityPreview(identityPreviewRequest: IdentityPreviewRequest, axiosOptions?: any): AxiosPromise<IdentityPreviewResponse>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {string} identityProfileId The Identity Profile ID to be processed
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncIdentityProfile(identityProfileId: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProfile(identityProfileId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<IdentityProfile>;
};
/**
 * Request parameters for createIdentityProfile operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiCreateIdentityProfileRequest
 */
export interface IdentityProfilesApiCreateIdentityProfileRequest {
    /**
     *
     * @type {IdentityProfile}
     * @memberof IdentityProfilesApiCreateIdentityProfile
     */
    readonly identityProfile: IdentityProfile;
}
/**
 * Request parameters for deleteIdentityProfile operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiDeleteIdentityProfileRequest
 */
export interface IdentityProfilesApiDeleteIdentityProfileRequest {
    /**
     * The Identity Profile ID.
     * @type {string}
     * @memberof IdentityProfilesApiDeleteIdentityProfile
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for deleteIdentityProfiles operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiDeleteIdentityProfilesRequest
 */
export interface IdentityProfilesApiDeleteIdentityProfilesRequest {
    /**
     * Identity Profile bulk delete request body.
     * @type {Array<string>}
     * @memberof IdentityProfilesApiDeleteIdentityProfiles
     */
    readonly requestBody: Array<string>;
}
/**
 * Request parameters for exportIdentityProfiles operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiExportIdentityProfilesRequest
 */
export interface IdentityProfilesApiExportIdentityProfilesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesApiExportIdentityProfiles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesApiExportIdentityProfiles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityProfilesApiExportIdentityProfiles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @type {string}
     * @memberof IdentityProfilesApiExportIdentityProfiles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @type {string}
     * @memberof IdentityProfilesApiExportIdentityProfiles
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getDefaultIdentityAttributeConfig operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiGetDefaultIdentityAttributeConfigRequest
 */
export interface IdentityProfilesApiGetDefaultIdentityAttributeConfigRequest {
    /**
     * The Identity Profile ID.
     * @type {string}
     * @memberof IdentityProfilesApiGetDefaultIdentityAttributeConfig
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for getIdentityProfile operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiGetIdentityProfileRequest
 */
export interface IdentityProfilesApiGetIdentityProfileRequest {
    /**
     * The Identity Profile ID.
     * @type {string}
     * @memberof IdentityProfilesApiGetIdentityProfile
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for importIdentityProfiles operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiImportIdentityProfilesRequest
 */
export interface IdentityProfilesApiImportIdentityProfilesRequest {
    /**
     * Previously exported Identity Profiles.
     * @type {Array<IdentityProfileExportedObject>}
     * @memberof IdentityProfilesApiImportIdentityProfiles
     */
    readonly identityProfileExportedObject: Array<IdentityProfileExportedObject>;
}
/**
 * Request parameters for listIdentityProfiles operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiListIdentityProfilesRequest
 */
export interface IdentityProfilesApiListIdentityProfilesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesApiListIdentityProfiles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesApiListIdentityProfiles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityProfilesApiListIdentityProfiles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @type {string}
     * @memberof IdentityProfilesApiListIdentityProfiles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @type {string}
     * @memberof IdentityProfilesApiListIdentityProfiles
     */
    readonly sorters?: string;
}
/**
 * Request parameters for showIdentityPreview operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiShowIdentityPreviewRequest
 */
export interface IdentityProfilesApiShowIdentityPreviewRequest {
    /**
     * Identity Preview request body.
     * @type {IdentityPreviewRequest}
     * @memberof IdentityProfilesApiShowIdentityPreview
     */
    readonly identityPreviewRequest: IdentityPreviewRequest;
}
/**
 * Request parameters for syncIdentityProfile operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiSyncIdentityProfileRequest
 */
export interface IdentityProfilesApiSyncIdentityProfileRequest {
    /**
     * The Identity Profile ID to be processed
     * @type {string}
     * @memberof IdentityProfilesApiSyncIdentityProfile
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for updateIdentityProfile operation in IdentityProfilesApi.
 * @export
 * @interface IdentityProfilesApiUpdateIdentityProfileRequest
 */
export interface IdentityProfilesApiUpdateIdentityProfileRequest {
    /**
     * The Identity Profile ID
     * @type {string}
     * @memberof IdentityProfilesApiUpdateIdentityProfile
     */
    readonly identityProfileId: string;
    /**
     * A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperation>}
     * @memberof IdentityProfilesApiUpdateIdentityProfile
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * IdentityProfilesApi - object-oriented interface
 * @export
 * @class IdentityProfilesApi
 * @extends {BaseAPI}
 */
export declare class IdentityProfilesApi extends BaseAPI {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfilesApiCreateIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    createIdentityProfile(requestParameters: IdentityProfilesApiCreateIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfile, any>>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {IdentityProfilesApiDeleteIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    deleteIdentityProfile(requestParameters: IdentityProfilesApiDeleteIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultSimplified, any>>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {IdentityProfilesApiDeleteIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    deleteIdentityProfiles(requestParameters: IdentityProfilesApiDeleteIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultSimplified, any>>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {IdentityProfilesApiExportIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    exportIdentityProfiles(requestParameters?: IdentityProfilesApiExportIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfileExportedObject[], any>>;
    /**
     * This returns the default identity attribute config. A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Get default Identity Attribute Config
     * @param {IdentityProfilesApiGetDefaultIdentityAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    getDefaultIdentityAttributeConfig(requestParameters: IdentityProfilesApiGetDefaultIdentityAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityAttributeConfig, any>>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get single Identity Profile
     * @param {IdentityProfilesApiGetIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    getIdentityProfile(requestParameters: IdentityProfilesApiGetIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfile, any>>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {IdentityProfilesApiImportIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    importIdentityProfiles(requestParameters: IdentityProfilesApiImportIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectImportResult, any>>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {IdentityProfilesApiListIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    listIdentityProfiles(requestParameters?: IdentityProfilesApiListIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfile[], any>>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityProfilesApiShowIdentityPreviewRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    showIdentityPreview(requestParameters: IdentityProfilesApiShowIdentityPreviewRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityPreviewResponse, any>>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {IdentityProfilesApiSyncIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    syncIdentityProfile(requestParameters: IdentityProfilesApiSyncIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {IdentityProfilesApiUpdateIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesApi
     */
    updateIdentityProfile(requestParameters: IdentityProfilesApiUpdateIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfile, any>>;
}
/**
 * LifecycleStatesApi - axios parameter creator
 * @export
 */
export declare const LifecycleStatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this endpoint to create a lifecycle state. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {LifecycleState} lifecycleState Lifecycle state to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createLifecycleState: (identityProfileId: string, lifecycleState: LifecycleState, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to delete the lifecycle state by its ID.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteLifecycleState: (identityProfileId: string, lifecycleStateId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleState: (identityProfileId: string, lifecycleStateId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to list all lifecycle states by their associated identity profiles.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists LifecycleStates
     * @param {string} identityProfileId Identity profile ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleStates: (identityProfileId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to set/update an identity\'s lifecycle state to the one provided and update the corresponding identity profile. A token with ORG_ADMIN or API authority and the appropriate user context is required to call this API.
     * @summary Set Lifecycle State
     * @param {string} identityId ID of the identity to update.
     * @param {SetLifecycleStateRequest} setLifecycleStateRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setLifecycleState: (identityId: string, setLifecycleStateRequest: SetLifecycleStateRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateLifecycleStates: (identityProfileId: string, lifecycleStateId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LifecycleStatesApi - functional programming interface
 * @export
 */
export declare const LifecycleStatesApiFp: (configuration?: Configuration) => {
    /**
     * Use this endpoint to create a lifecycle state. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {LifecycleState} lifecycleState Lifecycle state to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createLifecycleState(identityProfileId: string, lifecycleState: LifecycleState, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifecycleState>>;
    /**
     * Use this endpoint to delete the lifecycle state by its ID.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteLifecycleState(identityProfileId: string, lifecycleStateId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifecyclestateDeleted>>;
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleState(identityProfileId: string, lifecycleStateId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifecycleState>>;
    /**
     * Use this endpoint to list all lifecycle states by their associated identity profiles.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists LifecycleStates
     * @param {string} identityProfileId Identity profile ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleStates(identityProfileId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LifecycleState>>>;
    /**
     * Use this API to set/update an identity\'s lifecycle state to the one provided and update the corresponding identity profile. A token with ORG_ADMIN or API authority and the appropriate user context is required to call this API.
     * @summary Set Lifecycle State
     * @param {string} identityId ID of the identity to update.
     * @param {SetLifecycleStateRequest} setLifecycleStateRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setLifecycleState(identityId: string, setLifecycleStateRequest: SetLifecycleStateRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetLifecycleState200Response>>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateLifecycleStates(identityProfileId: string, lifecycleStateId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifecycleState>>;
};
/**
 * LifecycleStatesApi - factory interface
 * @export
 */
export declare const LifecycleStatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this endpoint to create a lifecycle state. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {LifecycleState} lifecycleState Lifecycle state to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createLifecycleState(identityProfileId: string, lifecycleState: LifecycleState, axiosOptions?: any): AxiosPromise<LifecycleState>;
    /**
     * Use this endpoint to delete the lifecycle state by its ID.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteLifecycleState(identityProfileId: string, lifecycleStateId: string, axiosOptions?: any): AxiosPromise<LifecyclestateDeleted>;
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleState(identityProfileId: string, lifecycleStateId: string, axiosOptions?: any): AxiosPromise<LifecycleState>;
    /**
     * Use this endpoint to list all lifecycle states by their associated identity profiles.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists LifecycleStates
     * @param {string} identityProfileId Identity profile ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleStates(identityProfileId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<LifecycleState>>;
    /**
     * Use this API to set/update an identity\'s lifecycle state to the one provided and update the corresponding identity profile. A token with ORG_ADMIN or API authority and the appropriate user context is required to call this API.
     * @summary Set Lifecycle State
     * @param {string} identityId ID of the identity to update.
     * @param {SetLifecycleStateRequest} setLifecycleStateRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setLifecycleState(identityId: string, setLifecycleStateRequest: SetLifecycleStateRequest, axiosOptions?: any): AxiosPromise<SetLifecycleState200Response>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {string} identityProfileId Identity profile ID.
     * @param {string} lifecycleStateId Lifecycle state ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateLifecycleStates(identityProfileId: string, lifecycleStateId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<LifecycleState>;
};
/**
 * Request parameters for createLifecycleState operation in LifecycleStatesApi.
 * @export
 * @interface LifecycleStatesApiCreateLifecycleStateRequest
 */
export interface LifecycleStatesApiCreateLifecycleStateRequest {
    /**
     * Identity profile ID.
     * @type {string}
     * @memberof LifecycleStatesApiCreateLifecycleState
     */
    readonly identityProfileId: string;
    /**
     * Lifecycle state to be created.
     * @type {LifecycleState}
     * @memberof LifecycleStatesApiCreateLifecycleState
     */
    readonly lifecycleState: LifecycleState;
}
/**
 * Request parameters for deleteLifecycleState operation in LifecycleStatesApi.
 * @export
 * @interface LifecycleStatesApiDeleteLifecycleStateRequest
 */
export interface LifecycleStatesApiDeleteLifecycleStateRequest {
    /**
     * Identity profile ID.
     * @type {string}
     * @memberof LifecycleStatesApiDeleteLifecycleState
     */
    readonly identityProfileId: string;
    /**
     * Lifecycle state ID.
     * @type {string}
     * @memberof LifecycleStatesApiDeleteLifecycleState
     */
    readonly lifecycleStateId: string;
}
/**
 * Request parameters for getLifecycleState operation in LifecycleStatesApi.
 * @export
 * @interface LifecycleStatesApiGetLifecycleStateRequest
 */
export interface LifecycleStatesApiGetLifecycleStateRequest {
    /**
     * Identity profile ID.
     * @type {string}
     * @memberof LifecycleStatesApiGetLifecycleState
     */
    readonly identityProfileId: string;
    /**
     * Lifecycle state ID.
     * @type {string}
     * @memberof LifecycleStatesApiGetLifecycleState
     */
    readonly lifecycleStateId: string;
}
/**
 * Request parameters for getLifecycleStates operation in LifecycleStatesApi.
 * @export
 * @interface LifecycleStatesApiGetLifecycleStatesRequest
 */
export interface LifecycleStatesApiGetLifecycleStatesRequest {
    /**
     * Identity profile ID.
     * @type {string}
     * @memberof LifecycleStatesApiGetLifecycleStates
     */
    readonly identityProfileId: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof LifecycleStatesApiGetLifecycleStates
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof LifecycleStatesApiGetLifecycleStates
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof LifecycleStatesApiGetLifecycleStates
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof LifecycleStatesApiGetLifecycleStates
     */
    readonly sorters?: string;
}
/**
 * Request parameters for setLifecycleState operation in LifecycleStatesApi.
 * @export
 * @interface LifecycleStatesApiSetLifecycleStateRequest
 */
export interface LifecycleStatesApiSetLifecycleStateRequest {
    /**
     * ID of the identity to update.
     * @type {string}
     * @memberof LifecycleStatesApiSetLifecycleState
     */
    readonly identityId: string;
    /**
     *
     * @type {SetLifecycleStateRequest}
     * @memberof LifecycleStatesApiSetLifecycleState
     */
    readonly setLifecycleStateRequest: SetLifecycleStateRequest;
}
/**
 * Request parameters for updateLifecycleStates operation in LifecycleStatesApi.
 * @export
 * @interface LifecycleStatesApiUpdateLifecycleStatesRequest
 */
export interface LifecycleStatesApiUpdateLifecycleStatesRequest {
    /**
     * Identity profile ID.
     * @type {string}
     * @memberof LifecycleStatesApiUpdateLifecycleStates
     */
    readonly identityProfileId: string;
    /**
     * Lifecycle state ID.
     * @type {string}
     * @memberof LifecycleStatesApiUpdateLifecycleStates
     */
    readonly lifecycleStateId: string;
    /**
     * A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @type {Array<JsonPatchOperation>}
     * @memberof LifecycleStatesApiUpdateLifecycleStates
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * LifecycleStatesApi - object-oriented interface
 * @export
 * @class LifecycleStatesApi
 * @extends {BaseAPI}
 */
export declare class LifecycleStatesApi extends BaseAPI {
    /**
     * Use this endpoint to create a lifecycle state. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Lifecycle State
     * @param {LifecycleStatesApiCreateLifecycleStateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesApi
     */
    createLifecycleState(requestParameters: LifecycleStatesApiCreateLifecycleStateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecycleState, any>>;
    /**
     * Use this endpoint to delete the lifecycle state by its ID.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Lifecycle State
     * @param {LifecycleStatesApiDeleteLifecycleStateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesApi
     */
    deleteLifecycleState(requestParameters: LifecycleStatesApiDeleteLifecycleStateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecyclestateDeleted, any>>;
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {LifecycleStatesApiGetLifecycleStateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesApi
     */
    getLifecycleState(requestParameters: LifecycleStatesApiGetLifecycleStateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecycleState, any>>;
    /**
     * Use this endpoint to list all lifecycle states by their associated identity profiles.  A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists LifecycleStates
     * @param {LifecycleStatesApiGetLifecycleStatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesApi
     */
    getLifecycleStates(requestParameters: LifecycleStatesApiGetLifecycleStatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecycleState[], any>>;
    /**
     * Use this API to set/update an identity\'s lifecycle state to the one provided and update the corresponding identity profile. A token with ORG_ADMIN or API authority and the appropriate user context is required to call this API.
     * @summary Set Lifecycle State
     * @param {LifecycleStatesApiSetLifecycleStateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesApi
     */
    setLifecycleState(requestParameters: LifecycleStatesApiSetLifecycleStateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetLifecycleState200Response, any>>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {LifecycleStatesApiUpdateLifecycleStatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesApi
     */
    updateLifecycleStates(requestParameters: LifecycleStatesApiUpdateLifecycleStatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecycleState, any>>;
}
/**
 * MFAConfigurationApi - axios parameter creator
 * @export
 */
export declare const MFAConfigurationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteMFAConfig: (method: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFADuoConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAKbaConfig: (allLanguages?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAOktaConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MfaDuoConfig} mfaDuoConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFADuoConfig: (mfaDuoConfig: MfaDuoConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {Array<KbaAnswerRequestItem>} kbaAnswerRequestItem
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAKBAConfig: (kbaAnswerRequestItem: Array<KbaAnswerRequestItem>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MfaOktaConfig} mfaOktaConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAOktaConfig: (mfaOktaConfig: MfaOktaConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testMFAConfig: (method: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MFAConfigurationApi - functional programming interface
 * @export
 */
export declare const MFAConfigurationApiFp: (configuration?: Configuration) => {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteMFAConfig(method: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaOktaConfig>>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFADuoConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaDuoConfig>>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAKbaConfig(allLanguages?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KbaQuestion>>>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAOktaConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaOktaConfig>>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MfaDuoConfig} mfaDuoConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFADuoConfig(mfaDuoConfig: MfaDuoConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaDuoConfig>>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {Array<KbaAnswerRequestItem>} kbaAnswerRequestItem
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAKBAConfig(kbaAnswerRequestItem: Array<KbaAnswerRequestItem>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KbaAnswerResponseItem>>>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MfaOktaConfig} mfaOktaConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAOktaConfig(mfaOktaConfig: MfaOktaConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaOktaConfig>>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testMFAConfig(method: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaConfigTestResponse>>;
};
/**
 * MFAConfigurationApi - factory interface
 * @export
 */
export declare const MFAConfigurationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteMFAConfig(method: string, axiosOptions?: any): AxiosPromise<MfaOktaConfig>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFADuoConfig(axiosOptions?: any): AxiosPromise<MfaDuoConfig>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAKbaConfig(allLanguages?: boolean, axiosOptions?: any): AxiosPromise<Array<KbaQuestion>>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAOktaConfig(axiosOptions?: any): AxiosPromise<MfaOktaConfig>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MfaDuoConfig} mfaDuoConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFADuoConfig(mfaDuoConfig: MfaDuoConfig, axiosOptions?: any): AxiosPromise<MfaDuoConfig>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {Array<KbaAnswerRequestItem>} kbaAnswerRequestItem
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAKBAConfig(kbaAnswerRequestItem: Array<KbaAnswerRequestItem>, axiosOptions?: any): AxiosPromise<Array<KbaAnswerResponseItem>>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MfaOktaConfig} mfaOktaConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAOktaConfig(mfaOktaConfig: MfaOktaConfig, axiosOptions?: any): AxiosPromise<MfaOktaConfig>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testMFAConfig(method: string, axiosOptions?: any): AxiosPromise<MfaConfigTestResponse>;
};
/**
 * Request parameters for deleteMFAConfig operation in MFAConfigurationApi.
 * @export
 * @interface MFAConfigurationApiDeleteMFAConfigRequest
 */
export interface MFAConfigurationApiDeleteMFAConfigRequest {
    /**
     * The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @type {string}
     * @memberof MFAConfigurationApiDeleteMFAConfig
     */
    readonly method: string;
}
/**
 * Request parameters for getMFAKbaConfig operation in MFAConfigurationApi.
 * @export
 * @interface MFAConfigurationApiGetMFAKbaConfigRequest
 */
export interface MFAConfigurationApiGetMFAKbaConfigRequest {
    /**
     * Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @type {boolean}
     * @memberof MFAConfigurationApiGetMFAKbaConfig
     */
    readonly allLanguages?: boolean;
}
/**
 * Request parameters for setMFADuoConfig operation in MFAConfigurationApi.
 * @export
 * @interface MFAConfigurationApiSetMFADuoConfigRequest
 */
export interface MFAConfigurationApiSetMFADuoConfigRequest {
    /**
     *
     * @type {MfaDuoConfig}
     * @memberof MFAConfigurationApiSetMFADuoConfig
     */
    readonly mfaDuoConfig: MfaDuoConfig;
}
/**
 * Request parameters for setMFAKBAConfig operation in MFAConfigurationApi.
 * @export
 * @interface MFAConfigurationApiSetMFAKBAConfigRequest
 */
export interface MFAConfigurationApiSetMFAKBAConfigRequest {
    /**
     *
     * @type {Array<KbaAnswerRequestItem>}
     * @memberof MFAConfigurationApiSetMFAKBAConfig
     */
    readonly kbaAnswerRequestItem: Array<KbaAnswerRequestItem>;
}
/**
 * Request parameters for setMFAOktaConfig operation in MFAConfigurationApi.
 * @export
 * @interface MFAConfigurationApiSetMFAOktaConfigRequest
 */
export interface MFAConfigurationApiSetMFAOktaConfigRequest {
    /**
     *
     * @type {MfaOktaConfig}
     * @memberof MFAConfigurationApiSetMFAOktaConfig
     */
    readonly mfaOktaConfig: MfaOktaConfig;
}
/**
 * Request parameters for testMFAConfig operation in MFAConfigurationApi.
 * @export
 * @interface MFAConfigurationApiTestMFAConfigRequest
 */
export interface MFAConfigurationApiTestMFAConfigRequest {
    /**
     * The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @type {string}
     * @memberof MFAConfigurationApiTestMFAConfig
     */
    readonly method: string;
}
/**
 * MFAConfigurationApi - object-oriented interface
 * @export
 * @class MFAConfigurationApi
 * @extends {BaseAPI}
 */
export declare class MFAConfigurationApi extends BaseAPI {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {MFAConfigurationApiDeleteMFAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    deleteMFAConfig(requestParameters: MFAConfigurationApiDeleteMFAConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaOktaConfig, any>>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    getMFADuoConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaDuoConfig, any>>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {MFAConfigurationApiGetMFAKbaConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    getMFAKbaConfig(requestParameters?: MFAConfigurationApiGetMFAKbaConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KbaQuestion[], any>>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    getMFAOktaConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaOktaConfig, any>>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MFAConfigurationApiSetMFADuoConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    setMFADuoConfig(requestParameters: MFAConfigurationApiSetMFADuoConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaDuoConfig, any>>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {MFAConfigurationApiSetMFAKBAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    setMFAKBAConfig(requestParameters: MFAConfigurationApiSetMFAKBAConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KbaAnswerResponseItem[], any>>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MFAConfigurationApiSetMFAOktaConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    setMFAOktaConfig(requestParameters: MFAConfigurationApiSetMFAOktaConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaOktaConfig, any>>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {MFAConfigurationApiTestMFAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationApi
     */
    testMFAConfig(requestParameters: MFAConfigurationApiTestMFAConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaConfigTestResponse, any>>;
}
/**
 * MFAControllerApi - axios parameter creator
 * @export
 */
export declare const MFAControllerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {SendTokenRequest} sendTokenRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSendToken: (sendTokenRequest: SendTokenRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @param {VerificationPollRequest} verificationPollRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingVerificationStatus: (method: string, verificationPollRequest: VerificationPollRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {DuoVerificationRequest} duoVerificationRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendDuoVerifyRequest: (duoVerificationRequest: DuoVerificationRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {Array<KbaAnswerRequestItem>} kbaAnswerRequestItem
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendKbaAnswers: (kbaAnswerRequestItem: Array<KbaAnswerRequestItem>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {OktaVerificationRequest} oktaVerificationRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendOktaVerifyRequest: (oktaVerificationRequest: OktaVerificationRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {TokenAuthRequest} tokenAuthRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTokenAuthRequest: (tokenAuthRequest: TokenAuthRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MFAControllerApi - functional programming interface
 * @export
 */
export declare const MFAControllerApiFp: (configuration?: Configuration) => {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {SendTokenRequest} sendTokenRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSendToken(sendTokenRequest: SendTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendTokenResponse>>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @param {VerificationPollRequest} verificationPollRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingVerificationStatus(method: string, verificationPollRequest: VerificationPollRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponse>>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {DuoVerificationRequest} duoVerificationRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendDuoVerifyRequest(duoVerificationRequest: DuoVerificationRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponse>>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {Array<KbaAnswerRequestItem>} kbaAnswerRequestItem
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendKbaAnswers(kbaAnswerRequestItem: Array<KbaAnswerRequestItem>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KbaAuthResponse>>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {OktaVerificationRequest} oktaVerificationRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendOktaVerifyRequest(oktaVerificationRequest: OktaVerificationRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponse>>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {TokenAuthRequest} tokenAuthRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTokenAuthRequest(tokenAuthRequest: TokenAuthRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthResponse>>;
};
/**
 * MFAControllerApi - factory interface
 * @export
 */
export declare const MFAControllerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {SendTokenRequest} sendTokenRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSendToken(sendTokenRequest: SendTokenRequest, axiosOptions?: any): AxiosPromise<SendTokenResponse>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @param {VerificationPollRequest} verificationPollRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingVerificationStatus(method: string, verificationPollRequest: VerificationPollRequest, axiosOptions?: any): AxiosPromise<VerificationResponse>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {DuoVerificationRequest} duoVerificationRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendDuoVerifyRequest(duoVerificationRequest: DuoVerificationRequest, axiosOptions?: any): AxiosPromise<VerificationResponse>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {Array<KbaAnswerRequestItem>} kbaAnswerRequestItem
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendKbaAnswers(kbaAnswerRequestItem: Array<KbaAnswerRequestItem>, axiosOptions?: any): AxiosPromise<KbaAuthResponse>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {OktaVerificationRequest} oktaVerificationRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendOktaVerifyRequest(oktaVerificationRequest: OktaVerificationRequest, axiosOptions?: any): AxiosPromise<VerificationResponse>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {TokenAuthRequest} tokenAuthRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTokenAuthRequest(tokenAuthRequest: TokenAuthRequest, axiosOptions?: any): AxiosPromise<TokenAuthResponse>;
};
/**
 * Request parameters for createSendToken operation in MFAControllerApi.
 * @export
 * @interface MFAControllerApiCreateSendTokenRequest
 */
export interface MFAControllerApiCreateSendTokenRequest {
    /**
     *
     * @type {SendTokenRequest}
     * @memberof MFAControllerApiCreateSendToken
     */
    readonly sendTokenRequest: SendTokenRequest;
}
/**
 * Request parameters for pingVerificationStatus operation in MFAControllerApi.
 * @export
 * @interface MFAControllerApiPingVerificationStatusRequest
 */
export interface MFAControllerApiPingVerificationStatusRequest {
    /**
     * The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @type {string}
     * @memberof MFAControllerApiPingVerificationStatus
     */
    readonly method: string;
    /**
     *
     * @type {VerificationPollRequest}
     * @memberof MFAControllerApiPingVerificationStatus
     */
    readonly verificationPollRequest: VerificationPollRequest;
}
/**
 * Request parameters for sendDuoVerifyRequest operation in MFAControllerApi.
 * @export
 * @interface MFAControllerApiSendDuoVerifyRequestRequest
 */
export interface MFAControllerApiSendDuoVerifyRequestRequest {
    /**
     *
     * @type {DuoVerificationRequest}
     * @memberof MFAControllerApiSendDuoVerifyRequest
     */
    readonly duoVerificationRequest: DuoVerificationRequest;
}
/**
 * Request parameters for sendKbaAnswers operation in MFAControllerApi.
 * @export
 * @interface MFAControllerApiSendKbaAnswersRequest
 */
export interface MFAControllerApiSendKbaAnswersRequest {
    /**
     *
     * @type {Array<KbaAnswerRequestItem>}
     * @memberof MFAControllerApiSendKbaAnswers
     */
    readonly kbaAnswerRequestItem: Array<KbaAnswerRequestItem>;
}
/**
 * Request parameters for sendOktaVerifyRequest operation in MFAControllerApi.
 * @export
 * @interface MFAControllerApiSendOktaVerifyRequestRequest
 */
export interface MFAControllerApiSendOktaVerifyRequestRequest {
    /**
     *
     * @type {OktaVerificationRequest}
     * @memberof MFAControllerApiSendOktaVerifyRequest
     */
    readonly oktaVerificationRequest: OktaVerificationRequest;
}
/**
 * Request parameters for sendTokenAuthRequest operation in MFAControllerApi.
 * @export
 * @interface MFAControllerApiSendTokenAuthRequestRequest
 */
export interface MFAControllerApiSendTokenAuthRequestRequest {
    /**
     *
     * @type {TokenAuthRequest}
     * @memberof MFAControllerApiSendTokenAuthRequest
     */
    readonly tokenAuthRequest: TokenAuthRequest;
}
/**
 * MFAControllerApi - object-oriented interface
 * @export
 * @class MFAControllerApi
 * @extends {BaseAPI}
 */
export declare class MFAControllerApi extends BaseAPI {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {MFAControllerApiCreateSendTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerApi
     */
    createSendToken(requestParameters: MFAControllerApiCreateSendTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SendTokenResponse, any>>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {MFAControllerApiPingVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerApi
     */
    pingVerificationStatus(requestParameters: MFAControllerApiPingVerificationStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponse, any>>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {MFAControllerApiSendDuoVerifyRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerApi
     */
    sendDuoVerifyRequest(requestParameters: MFAControllerApiSendDuoVerifyRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponse, any>>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {MFAControllerApiSendKbaAnswersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerApi
     */
    sendKbaAnswers(requestParameters: MFAControllerApiSendKbaAnswersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KbaAuthResponse, any>>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {MFAControllerApiSendOktaVerifyRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerApi
     */
    sendOktaVerifyRequest(requestParameters: MFAControllerApiSendOktaVerifyRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponse, any>>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {MFAControllerApiSendTokenAuthRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerApi
     */
    sendTokenAuthRequest(requestParameters: MFAControllerApiSendTokenAuthRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenAuthResponse, any>>;
}
/**
 * ManagedClientsApi - axios parameter creator
 * @export
 */
export declare const ManagedClientsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new Managed Client. The API returns a result that includes the Managed Client ID.
     * @summary Create a new Managed Client
     * @param {ManagedClientRequest} managedClientRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createManagedClient: (managedClientRequest: ManagedClientRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing Managed Client.
     * @summary Delete a Managed Client
     * @param {string} id Managed Client ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedClient: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a Managed Client.
     * @summary Get a Managed Client
     * @param {string} id Managed Client ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClient: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve the Status of a Managed Client by ID.
     * @summary Get Managed Client Status.
     * @param {string} id ID of the Managed Client to get Status of
     * @param {ManagedClientType} type Type of the Managed Client to get Status of
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClientStatus: (id: string, type: ManagedClientType, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of Managed Clients.
     * @summary Get Managed Clients
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **name**: *eq*  **clientId**: *eq*  **clusterId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClients: (offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing Managed Client.
     * @summary Update a Managed Client
     * @param {string} id Managed Client ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedClient: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ManagedClientsApi - functional programming interface
 * @export
 */
export declare const ManagedClientsApiFp: (configuration?: Configuration) => {
    /**
     * Create a new Managed Client. The API returns a result that includes the Managed Client ID.
     * @summary Create a new Managed Client
     * @param {ManagedClientRequest} managedClientRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createManagedClient(managedClientRequest: ManagedClientRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClient>>;
    /**
     * Delete an existing Managed Client.
     * @summary Delete a Managed Client
     * @param {string} id Managed Client ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedClient(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a Managed Client.
     * @summary Get a Managed Client
     * @param {string} id Managed Client ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClient(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClient>>;
    /**
     * Retrieve the Status of a Managed Client by ID.
     * @summary Get Managed Client Status.
     * @param {string} id ID of the Managed Client to get Status of
     * @param {ManagedClientType} type Type of the Managed Client to get Status of
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClientStatus(id: string, type: ManagedClientType, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClientStatus>>;
    /**
     * Get a list of Managed Clients.
     * @summary Get Managed Clients
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **name**: *eq*  **clientId**: *eq*  **clusterId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClients(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManagedClient>>>;
    /**
     * Update an existing Managed Client.
     * @summary Update a Managed Client
     * @param {string} id Managed Client ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedClient(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClient>>;
};
/**
 * ManagedClientsApi - factory interface
 * @export
 */
export declare const ManagedClientsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new Managed Client. The API returns a result that includes the Managed Client ID.
     * @summary Create a new Managed Client
     * @param {ManagedClientRequest} managedClientRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createManagedClient(managedClientRequest: ManagedClientRequest, axiosOptions?: any): AxiosPromise<ManagedClient>;
    /**
     * Delete an existing Managed Client.
     * @summary Delete a Managed Client
     * @param {string} id Managed Client ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedClient(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get a Managed Client.
     * @summary Get a Managed Client
     * @param {string} id Managed Client ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClient(id: string, axiosOptions?: any): AxiosPromise<ManagedClient>;
    /**
     * Retrieve the Status of a Managed Client by ID.
     * @summary Get Managed Client Status.
     * @param {string} id ID of the Managed Client to get Status of
     * @param {ManagedClientType} type Type of the Managed Client to get Status of
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClientStatus(id: string, type: ManagedClientType, axiosOptions?: any): AxiosPromise<ManagedClientStatus>;
    /**
     * Get a list of Managed Clients.
     * @summary Get Managed Clients
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **name**: *eq*  **clientId**: *eq*  **clusterId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClients(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<ManagedClient>>;
    /**
     * Update an existing Managed Client.
     * @summary Update a Managed Client
     * @param {string} id Managed Client ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedClient(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<ManagedClient>;
};
/**
 * Request parameters for createManagedClient operation in ManagedClientsApi.
 * @export
 * @interface ManagedClientsApiCreateManagedClientRequest
 */
export interface ManagedClientsApiCreateManagedClientRequest {
    /**
     *
     * @type {ManagedClientRequest}
     * @memberof ManagedClientsApiCreateManagedClient
     */
    readonly managedClientRequest: ManagedClientRequest;
}
/**
 * Request parameters for deleteManagedClient operation in ManagedClientsApi.
 * @export
 * @interface ManagedClientsApiDeleteManagedClientRequest
 */
export interface ManagedClientsApiDeleteManagedClientRequest {
    /**
     * Managed Client ID.
     * @type {string}
     * @memberof ManagedClientsApiDeleteManagedClient
     */
    readonly id: string;
}
/**
 * Request parameters for getManagedClient operation in ManagedClientsApi.
 * @export
 * @interface ManagedClientsApiGetManagedClientRequest
 */
export interface ManagedClientsApiGetManagedClientRequest {
    /**
     * Managed Client ID.
     * @type {string}
     * @memberof ManagedClientsApiGetManagedClient
     */
    readonly id: string;
}
/**
 * Request parameters for getManagedClientStatus operation in ManagedClientsApi.
 * @export
 * @interface ManagedClientsApiGetManagedClientStatusRequest
 */
export interface ManagedClientsApiGetManagedClientStatusRequest {
    /**
     * ID of the Managed Client to get Status of
     * @type {string}
     * @memberof ManagedClientsApiGetManagedClientStatus
     */
    readonly id: string;
    /**
     * Type of the Managed Client to get Status of
     * @type {ManagedClientType}
     * @memberof ManagedClientsApiGetManagedClientStatus
     */
    readonly type: ManagedClientType;
}
/**
 * Request parameters for getManagedClients operation in ManagedClientsApi.
 * @export
 * @interface ManagedClientsApiGetManagedClientsRequest
 */
export interface ManagedClientsApiGetManagedClientsRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ManagedClientsApiGetManagedClients
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ManagedClientsApiGetManagedClients
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ManagedClientsApiGetManagedClients
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **name**: *eq*  **clientId**: *eq*  **clusterId**: *eq*
     * @type {string}
     * @memberof ManagedClientsApiGetManagedClients
     */
    readonly filters?: string;
}
/**
 * Request parameters for updateManagedClient operation in ManagedClientsApi.
 * @export
 * @interface ManagedClientsApiUpdateManagedClientRequest
 */
export interface ManagedClientsApiUpdateManagedClientRequest {
    /**
     * Managed Client ID.
     * @type {string}
     * @memberof ManagedClientsApiUpdateManagedClient
     */
    readonly id: string;
    /**
     * The JSONPatch payload used to update the object.
     * @type {Array<JsonPatchOperation>}
     * @memberof ManagedClientsApiUpdateManagedClient
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * ManagedClientsApi - object-oriented interface
 * @export
 * @class ManagedClientsApi
 * @extends {BaseAPI}
 */
export declare class ManagedClientsApi extends BaseAPI {
    /**
     * Create a new Managed Client. The API returns a result that includes the Managed Client ID.
     * @summary Create a new Managed Client
     * @param {ManagedClientsApiCreateManagedClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClientsApi
     */
    createManagedClient(requestParameters: ManagedClientsApiCreateManagedClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClient, any>>;
    /**
     * Delete an existing Managed Client.
     * @summary Delete a Managed Client
     * @param {ManagedClientsApiDeleteManagedClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClientsApi
     */
    deleteManagedClient(requestParameters: ManagedClientsApiDeleteManagedClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a Managed Client.
     * @summary Get a Managed Client
     * @param {ManagedClientsApiGetManagedClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClientsApi
     */
    getManagedClient(requestParameters: ManagedClientsApiGetManagedClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClient, any>>;
    /**
     * Retrieve the Status of a Managed Client by ID.
     * @summary Get Managed Client Status.
     * @param {ManagedClientsApiGetManagedClientStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClientsApi
     */
    getManagedClientStatus(requestParameters: ManagedClientsApiGetManagedClientStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClientStatus, any>>;
    /**
     * Get a list of Managed Clients.
     * @summary Get Managed Clients
     * @param {ManagedClientsApiGetManagedClientsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClientsApi
     */
    getManagedClients(requestParameters?: ManagedClientsApiGetManagedClientsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClient[], any>>;
    /**
     * Update an existing Managed Client.
     * @summary Update a Managed Client
     * @param {ManagedClientsApiUpdateManagedClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClientsApi
     */
    updateManagedClient(requestParameters: ManagedClientsApiUpdateManagedClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClient, any>>;
}
/**
 * ManagedClustersApi - axios parameter creator
 * @export
 */
export declare const ManagedClustersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new Managed Cluster. The API returns a result that includes the Managed Cluster ID.
     * @summary Create a new Managed Cluster
     * @param {ManagedClusterRequest} managedClusterRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createManagedCluster: (managedClusterRequest: ManagedClusterRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing Managed Cluster.
     * @summary Delete a Managed Cluster
     * @param {string} id Managed Cluster ID.
     * @param {boolean} [removeClients] Flag to determine the need to delete a cluster with clients
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedCluster: (id: string, removeClients?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified Managed Cluster.
     * @param {string} id ManagedCluster ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedCluster: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClusters: (offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing Managed Cluster.
     * @summary Update a Managed Cluster
     * @param {string} id Managed Cluster ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedCluster: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ManagedClustersApi - functional programming interface
 * @export
 */
export declare const ManagedClustersApiFp: (configuration?: Configuration) => {
    /**
     * Create a new Managed Cluster. The API returns a result that includes the Managed Cluster ID.
     * @summary Create a new Managed Cluster
     * @param {ManagedClusterRequest} managedClusterRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createManagedCluster(managedClusterRequest: ManagedClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedCluster>>;
    /**
     * Delete an existing Managed Cluster.
     * @summary Delete a Managed Cluster
     * @param {string} id Managed Cluster ID.
     * @param {boolean} [removeClients] Flag to determine the need to delete a cluster with clients
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedCluster(id: string, removeClients?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified Managed Cluster.
     * @param {string} id ManagedCluster ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedCluster(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedCluster>>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClusters(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManagedCluster>>>;
    /**
     * Update an existing Managed Cluster.
     * @summary Update a Managed Cluster
     * @param {string} id Managed Cluster ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedCluster(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedCluster>>;
};
/**
 * ManagedClustersApi - factory interface
 * @export
 */
export declare const ManagedClustersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new Managed Cluster. The API returns a result that includes the Managed Cluster ID.
     * @summary Create a new Managed Cluster
     * @param {ManagedClusterRequest} managedClusterRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createManagedCluster(managedClusterRequest: ManagedClusterRequest, axiosOptions?: any): AxiosPromise<ManagedCluster>;
    /**
     * Delete an existing Managed Cluster.
     * @summary Delete a Managed Cluster
     * @param {string} id Managed Cluster ID.
     * @param {boolean} [removeClients] Flag to determine the need to delete a cluster with clients
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteManagedCluster(id: string, removeClients?: boolean, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified Managed Cluster.
     * @param {string} id ManagedCluster ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedCluster(id: string, axiosOptions?: any): AxiosPromise<ManagedCluster>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManagedClusters(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<ManagedCluster>>;
    /**
     * Update an existing Managed Cluster.
     * @summary Update a Managed Cluster
     * @param {string} id Managed Cluster ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateManagedCluster(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<ManagedCluster>;
};
/**
 * Request parameters for createManagedCluster operation in ManagedClustersApi.
 * @export
 * @interface ManagedClustersApiCreateManagedClusterRequest
 */
export interface ManagedClustersApiCreateManagedClusterRequest {
    /**
     *
     * @type {ManagedClusterRequest}
     * @memberof ManagedClustersApiCreateManagedCluster
     */
    readonly managedClusterRequest: ManagedClusterRequest;
}
/**
 * Request parameters for deleteManagedCluster operation in ManagedClustersApi.
 * @export
 * @interface ManagedClustersApiDeleteManagedClusterRequest
 */
export interface ManagedClustersApiDeleteManagedClusterRequest {
    /**
     * Managed Cluster ID.
     * @type {string}
     * @memberof ManagedClustersApiDeleteManagedCluster
     */
    readonly id: string;
    /**
     * Flag to determine the need to delete a cluster with clients
     * @type {boolean}
     * @memberof ManagedClustersApiDeleteManagedCluster
     */
    readonly removeClients?: boolean;
}
/**
 * Request parameters for getManagedCluster operation in ManagedClustersApi.
 * @export
 * @interface ManagedClustersApiGetManagedClusterRequest
 */
export interface ManagedClustersApiGetManagedClusterRequest {
    /**
     * ManagedCluster ID.
     * @type {string}
     * @memberof ManagedClustersApiGetManagedCluster
     */
    readonly id: string;
}
/**
 * Request parameters for getManagedClusters operation in ManagedClustersApi.
 * @export
 * @interface ManagedClustersApiGetManagedClustersRequest
 */
export interface ManagedClustersApiGetManagedClustersRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ManagedClustersApiGetManagedClusters
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ManagedClustersApiGetManagedClusters
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ManagedClustersApiGetManagedClusters
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @type {string}
     * @memberof ManagedClustersApiGetManagedClusters
     */
    readonly filters?: string;
}
/**
 * Request parameters for updateManagedCluster operation in ManagedClustersApi.
 * @export
 * @interface ManagedClustersApiUpdateManagedClusterRequest
 */
export interface ManagedClustersApiUpdateManagedClusterRequest {
    /**
     * Managed Cluster ID.
     * @type {string}
     * @memberof ManagedClustersApiUpdateManagedCluster
     */
    readonly id: string;
    /**
     * The JSONPatch payload used to update the object.
     * @type {Array<JsonPatchOperation>}
     * @memberof ManagedClustersApiUpdateManagedCluster
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * ManagedClustersApi - object-oriented interface
 * @export
 * @class ManagedClustersApi
 * @extends {BaseAPI}
 */
export declare class ManagedClustersApi extends BaseAPI {
    /**
     * Create a new Managed Cluster. The API returns a result that includes the Managed Cluster ID.
     * @summary Create a new Managed Cluster
     * @param {ManagedClustersApiCreateManagedClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClustersApi
     */
    createManagedCluster(requestParameters: ManagedClustersApiCreateManagedClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedCluster, any>>;
    /**
     * Delete an existing Managed Cluster.
     * @summary Delete a Managed Cluster
     * @param {ManagedClustersApiDeleteManagedClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClustersApi
     */
    deleteManagedCluster(requestParameters: ManagedClustersApiDeleteManagedClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified Managed Cluster.
     * @param {ManagedClustersApiGetManagedClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClustersApi
     */
    getManagedCluster(requestParameters: ManagedClustersApiGetManagedClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedCluster, any>>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {ManagedClustersApiGetManagedClustersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClustersApi
     */
    getManagedClusters(requestParameters?: ManagedClustersApiGetManagedClustersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedCluster[], any>>;
    /**
     * Update an existing Managed Cluster.
     * @summary Update a Managed Cluster
     * @param {ManagedClustersApiUpdateManagedClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedClustersApi
     */
    updateManagedCluster(requestParameters: ManagedClustersApiUpdateManagedClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedCluster, any>>;
}
/**
 * NonEmployeeLifecycleManagementApi - axios parameter creator
 * @export
 */
export declare const NonEmployeeLifecycleManagementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Approves a non-employee approval request and notifies the next approver. The current user must be the requested approver.
     * @summary Approve a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeApprovalDecision} nonEmployeeApprovalDecision
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveNonEmployeeRequest: (id: string, nonEmployeeApprovalDecision: NonEmployeeApprovalDecision, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will create a non-employee record. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Record
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-Employee record creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRecord: (nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will create a non-employee request and notify the approver. Requires role context of `idn:nesr:create` or the user must own the source.
     * @summary Create Non-Employee Request
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-Employee creation request body
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRequest: (nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will create a non-employee source. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Source
     * @param {NonEmployeeSourceRequestBody} nonEmployeeSourceRequestBody Non-Employee source creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSource: (nonEmployeeSourceRequestBody: NonEmployeeSourceRequestBody, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response. Requires role context of `idn:nesr:create`
     * @summary Create a new Schema Attribute for Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {NonEmployeeSchemaAttributeBody} nonEmployeeSchemaAttributeBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSourceSchemaAttributes: (sourceId: string, nonEmployeeSchemaAttributeBody: NonEmployeeSchemaAttributeBody, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete a non-employee record. Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecord: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Requires role context of `idn:nesr:delete`
     * @summary Delete Multiple Non-Employee Records
     * @param {DeleteNonEmployeeRecordsInBulkRequest} deleteNonEmployeeRecordsInBulkRequest Non-Employee bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecordsInBulk: (deleteNonEmployeeRecordsInBulkRequest: DeleteNonEmployeeRecordsInBulkRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete a non-employee request.  Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Request
     * @param {string} id Non-Employee request id in the UUID format
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRequest: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete a Schema Attribute for Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSchemaAttribute: (attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete a non-employee source. Requires role context of `idn:nesr:delete`.
     * @summary Delete Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSource: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete all custom schema attributes for Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSourceSchemaAttributes: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This requests a CSV download for all non-employees from a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Non-Employee Records to CSV
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeRecords: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Source Schema Template
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeSourceSchemaTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a non-employee approval item detail. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get any approval.   2. The user owns the requested approval.
     * @summary Get a non-employee approval item detail
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {boolean} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApproval: (id: string, includeDetail?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id.   2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApprovalSummary: (requestedFor: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source. Requires role context of `idn:nesr:read`
     * @summary Obtain the status of bulk upload on the source
     * @param {string} id Source ID (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeBulkUploadStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a non-employee record. Requires role context of `idn:nesr:read`
     * @summary Get a Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRecord: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a non-employee request. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in this case the user can get the non-employee request for any user.   2. The user must be the owner of the non-employee request.
     * @summary Get a Non-Employee Request
     * @param {string} id Non-Employee request id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequest: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequestSummary: (requestedFor: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSchemaAttribute: (attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a non-employee source. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request any source.   2. The current user is an account manager, in which case the user can only request sources that they own.
     * @summary Get a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSource: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary List Schema Attributes Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSourceSchemaAttributes: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Requires role context of `idn:nesr:create`
     * @summary Imports, or Updates, Non-Employee Records
     * @param {string} id Source Id (UUID)
     * @param {any} data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importNonEmployeeRecordsInBulk: (id: string, data: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee approval requests. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can list the approvals for any approver.   2. The user owns the requested approval.
     * @summary Get List of Non-Employee Approval Requests
     * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeApprovals: (requestedFor?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee records. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get a list of all of the non-employees.   2. The user is an account manager, in which case they can get a list of the non-employees that they manage.
     * @summary List Non-Employee Records
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRecords: (limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list non-employee requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the non-employee requests in the source(s) he or she manages.
     * @summary List Non-Employee Requests
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRequests: (requestedFor: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee sources. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list sources assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the sources that he or she owns.
     * @summary List Non-Employee Sources
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [nonEmployeeCount] The flag to determine whether return a non-employee count associate with source.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeSources: (requestedFor: string, limit?: number, offset?: number, count?: boolean, nonEmployeeCount?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will patch a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Patch Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeRecord: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId. Requires role context of `idn:nesr:update`
     * @summary Patch a Schema Attribute for Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSchemaAttribute: (attributeId: string, sourceId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * patch a non-employee source. (partial update) <br/> Patchable field: **name, description, approvers, accountManagers** Requires role context of `idn:nesr:update`.
     * @summary Patch a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSource: (sourceId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will reject an approval item request and notify user. The current user must be the requested approver.
     * @summary Reject a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeRejectApprovalDecision} nonEmployeeRejectApprovalDecision
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectNonEmployeeRequest: (id: string, nonEmployeeRejectApprovalDecision: NonEmployeeRejectApprovalDecision, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will update a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Update Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateNonEmployeeRecord: (id: string, nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NonEmployeeLifecycleManagementApi - functional programming interface
 * @export
 */
export declare const NonEmployeeLifecycleManagementApiFp: (configuration?: Configuration) => {
    /**
     * Approves a non-employee approval request and notifies the next approver. The current user must be the requested approver.
     * @summary Approve a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeApprovalDecision} nonEmployeeApprovalDecision
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveNonEmployeeRequest(id: string, nonEmployeeApprovalDecision: NonEmployeeApprovalDecision, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalItem>>;
    /**
     * This request will create a non-employee record. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Record
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-Employee record creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRecord(nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecord>>;
    /**
     * This request will create a non-employee request and notify the approver. Requires role context of `idn:nesr:create` or the user must own the source.
     * @summary Create Non-Employee Request
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-Employee creation request body
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRequest(nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRequest>>;
    /**
     * This request will create a non-employee source. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Source
     * @param {NonEmployeeSourceRequestBody} nonEmployeeSourceRequestBody Non-Employee source creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSource(nonEmployeeSourceRequestBody: NonEmployeeSourceRequestBody, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSourceWithCloudExternalId>>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response. Requires role context of `idn:nesr:create`
     * @summary Create a new Schema Attribute for Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {NonEmployeeSchemaAttributeBody} nonEmployeeSchemaAttributeBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSourceSchemaAttributes(sourceId: string, nonEmployeeSchemaAttributeBody: NonEmployeeSchemaAttributeBody, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSchemaAttribute>>;
    /**
     * This request will delete a non-employee record. Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecord(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Requires role context of `idn:nesr:delete`
     * @summary Delete Multiple Non-Employee Records
     * @param {DeleteNonEmployeeRecordsInBulkRequest} deleteNonEmployeeRecordsInBulkRequest Non-Employee bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecordsInBulk(deleteNonEmployeeRecordsInBulkRequest: DeleteNonEmployeeRecordsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This request will delete a non-employee request.  Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Request
     * @param {string} id Non-Employee request id in the UUID format
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRequest(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete a Schema Attribute for Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This request will delete a non-employee source. Requires role context of `idn:nesr:delete`.
     * @summary Delete Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSource(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete all custom schema attributes for Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This requests a CSV download for all non-employees from a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Non-Employee Records to CSV
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeRecords(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Source Schema Template
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeSourceSchemaTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a non-employee approval item detail. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get any approval.   2. The user owns the requested approval.
     * @summary Get a non-employee approval item detail
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {boolean} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApproval(id: string, includeDetail?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalItemDetail>>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id.   2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApprovalSummary(requestedFor: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalSummary>>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source. Requires role context of `idn:nesr:read`
     * @summary Obtain the status of bulk upload on the source
     * @param {string} id Source ID (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeBulkUploadStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeBulkUploadStatus>>;
    /**
     * This gets a non-employee record. Requires role context of `idn:nesr:read`
     * @summary Get a Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRecord(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecord>>;
    /**
     * This gets a non-employee request. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in this case the user can get the non-employee request for any user.   2. The user must be the owner of the non-employee request.
     * @summary Get a Non-Employee Request
     * @param {string} id Non-Employee request id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequest(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRequest>>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequestSummary(requestedFor: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRequestSummary>>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSchemaAttribute>>;
    /**
     * This gets a non-employee source. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request any source.   2. The current user is an account manager, in which case the user can only request sources that they own.
     * @summary Get a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSource(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSource>>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary List Schema Attributes Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeSchemaAttribute>>>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Requires role context of `idn:nesr:create`
     * @summary Imports, or Updates, Non-Employee Records
     * @param {string} id Source Id (UUID)
     * @param {any} data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importNonEmployeeRecordsInBulk(id: string, data: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeBulkUploadJob>>;
    /**
     * This gets a list of non-employee approval requests. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can list the approvals for any approver.   2. The user owns the requested approval.
     * @summary Get List of Non-Employee Approval Requests
     * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeApprovals(requestedFor?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeApprovalItem>>>;
    /**
     * This gets a list of non-employee records. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get a list of all of the non-employees.   2. The user is an account manager, in which case they can get a list of the non-employees that they manage.
     * @summary List Non-Employee Records
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRecords(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeRecord>>>;
    /**
     * This gets a list of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list non-employee requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the non-employee requests in the source(s) he or she manages.
     * @summary List Non-Employee Requests
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRequests(requestedFor: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeRequest>>>;
    /**
     * This gets a list of non-employee sources. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list sources assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the sources that he or she owns.
     * @summary List Non-Employee Sources
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [nonEmployeeCount] The flag to determine whether return a non-employee count associate with source.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeSources(requestedFor: string, limit?: number, offset?: number, count?: boolean, nonEmployeeCount?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeSourceWithNECount>>>;
    /**
     * This request will patch a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Patch Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeRecord(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecord>>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId. Requires role context of `idn:nesr:update`
     * @summary Patch a Schema Attribute for Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSchemaAttribute>>;
    /**
     * patch a non-employee source. (partial update) <br/> Patchable field: **name, description, approvers, accountManagers** Requires role context of `idn:nesr:update`.
     * @summary Patch a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSource(sourceId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSource>>;
    /**
     * This endpoint will reject an approval item request and notify user. The current user must be the requested approver.
     * @summary Reject a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeRejectApprovalDecision} nonEmployeeRejectApprovalDecision
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectNonEmployeeRequest(id: string, nonEmployeeRejectApprovalDecision: NonEmployeeRejectApprovalDecision, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalItem>>;
    /**
     * This request will update a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Update Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateNonEmployeeRecord(id: string, nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecord>>;
};
/**
 * NonEmployeeLifecycleManagementApi - factory interface
 * @export
 */
export declare const NonEmployeeLifecycleManagementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Approves a non-employee approval request and notifies the next approver. The current user must be the requested approver.
     * @summary Approve a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeApprovalDecision} nonEmployeeApprovalDecision
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveNonEmployeeRequest(id: string, nonEmployeeApprovalDecision: NonEmployeeApprovalDecision, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalItem>;
    /**
     * This request will create a non-employee record. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Record
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-Employee record creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRecord(nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: any): AxiosPromise<NonEmployeeRecord>;
    /**
     * This request will create a non-employee request and notify the approver. Requires role context of `idn:nesr:create` or the user must own the source.
     * @summary Create Non-Employee Request
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-Employee creation request body
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRequest(nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: any): AxiosPromise<NonEmployeeRequest>;
    /**
     * This request will create a non-employee source. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Source
     * @param {NonEmployeeSourceRequestBody} nonEmployeeSourceRequestBody Non-Employee source creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSource(nonEmployeeSourceRequestBody: NonEmployeeSourceRequestBody, axiosOptions?: any): AxiosPromise<NonEmployeeSourceWithCloudExternalId>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response. Requires role context of `idn:nesr:create`
     * @summary Create a new Schema Attribute for Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {NonEmployeeSchemaAttributeBody} nonEmployeeSchemaAttributeBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSourceSchemaAttributes(sourceId: string, nonEmployeeSchemaAttributeBody: NonEmployeeSchemaAttributeBody, axiosOptions?: any): AxiosPromise<NonEmployeeSchemaAttribute>;
    /**
     * This request will delete a non-employee record. Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecord(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Requires role context of `idn:nesr:delete`
     * @summary Delete Multiple Non-Employee Records
     * @param {DeleteNonEmployeeRecordsInBulkRequest} deleteNonEmployeeRecordsInBulkRequest Non-Employee bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecordsInBulk(deleteNonEmployeeRecordsInBulkRequest: DeleteNonEmployeeRecordsInBulkRequest, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This request will delete a non-employee request.  Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Request
     * @param {string} id Non-Employee request id in the UUID format
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRequest(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete a Schema Attribute for Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This request will delete a non-employee source. Requires role context of `idn:nesr:delete`.
     * @summary Delete Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSource(sourceId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete all custom schema attributes for Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This requests a CSV download for all non-employees from a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Non-Employee Records to CSV
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeRecords(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Source Schema Template
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeSourceSchemaTemplate(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Gets a non-employee approval item detail. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get any approval.   2. The user owns the requested approval.
     * @summary Get a non-employee approval item detail
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {boolean} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApproval(id: string, includeDetail?: boolean, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalItemDetail>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id.   2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApprovalSummary(requestedFor: string, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalSummary>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source. Requires role context of `idn:nesr:read`
     * @summary Obtain the status of bulk upload on the source
     * @param {string} id Source ID (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeBulkUploadStatus(id: string, axiosOptions?: any): AxiosPromise<NonEmployeeBulkUploadStatus>;
    /**
     * This gets a non-employee record. Requires role context of `idn:nesr:read`
     * @summary Get a Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRecord(id: string, axiosOptions?: any): AxiosPromise<NonEmployeeRecord>;
    /**
     * This gets a non-employee request. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in this case the user can get the non-employee request for any user.   2. The user must be the owner of the non-employee request.
     * @summary Get a Non-Employee Request
     * @param {string} id Non-Employee request id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequest(id: string, axiosOptions?: any): AxiosPromise<NonEmployeeRequest>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequestSummary(requestedFor: string, axiosOptions?: any): AxiosPromise<NonEmployeeRequestSummary>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: any): AxiosPromise<NonEmployeeSchemaAttribute>;
    /**
     * This gets a non-employee source. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request any source.   2. The current user is an account manager, in which case the user can only request sources that they own.
     * @summary Get a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSource(sourceId: string, axiosOptions?: any): AxiosPromise<NonEmployeeSource>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary List Schema Attributes Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeSchemaAttribute>>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Requires role context of `idn:nesr:create`
     * @summary Imports, or Updates, Non-Employee Records
     * @param {string} id Source Id (UUID)
     * @param {any} data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importNonEmployeeRecordsInBulk(id: string, data: any, axiosOptions?: any): AxiosPromise<NonEmployeeBulkUploadJob>;
    /**
     * This gets a list of non-employee approval requests. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can list the approvals for any approver.   2. The user owns the requested approval.
     * @summary Get List of Non-Employee Approval Requests
     * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeApprovals(requestedFor?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeApprovalItem>>;
    /**
     * This gets a list of non-employee records. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get a list of all of the non-employees.   2. The user is an account manager, in which case they can get a list of the non-employees that they manage.
     * @summary List Non-Employee Records
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRecords(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeRecord>>;
    /**
     * This gets a list of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list non-employee requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the non-employee requests in the source(s) he or she manages.
     * @summary List Non-Employee Requests
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRequests(requestedFor: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeRequest>>;
    /**
     * This gets a list of non-employee sources. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list sources assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the sources that he or she owns.
     * @summary List Non-Employee Sources
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [nonEmployeeCount] The flag to determine whether return a non-employee count associate with source.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeSources(requestedFor: string, limit?: number, offset?: number, count?: boolean, nonEmployeeCount?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeSourceWithNECount>>;
    /**
     * This request will patch a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Patch Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeRecord(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<NonEmployeeRecord>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId. Requires role context of `idn:nesr:update`
     * @summary Patch a Schema Attribute for Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<NonEmployeeSchemaAttribute>;
    /**
     * patch a non-employee source. (partial update) <br/> Patchable field: **name, description, approvers, accountManagers** Requires role context of `idn:nesr:update`.
     * @summary Patch a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSource(sourceId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<NonEmployeeSource>;
    /**
     * This endpoint will reject an approval item request and notify user. The current user must be the requested approver.
     * @summary Reject a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeRejectApprovalDecision} nonEmployeeRejectApprovalDecision
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectNonEmployeeRequest(id: string, nonEmployeeRejectApprovalDecision: NonEmployeeRejectApprovalDecision, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalItem>;
    /**
     * This request will update a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Update Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {NonEmployeeRequestBody} nonEmployeeRequestBody Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateNonEmployeeRecord(id: string, nonEmployeeRequestBody: NonEmployeeRequestBody, axiosOptions?: any): AxiosPromise<NonEmployeeRecord>;
};
/**
 * Request parameters for approveNonEmployeeRequest operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiApproveNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementApiApproveNonEmployeeRequestRequest {
    /**
     * Non-Employee approval item id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiApproveNonEmployeeRequest
     */
    readonly id: string;
    /**
     *
     * @type {NonEmployeeApprovalDecision}
     * @memberof NonEmployeeLifecycleManagementApiApproveNonEmployeeRequest
     */
    readonly nonEmployeeApprovalDecision: NonEmployeeApprovalDecision;
}
/**
 * Request parameters for createNonEmployeeRecord operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiCreateNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementApiCreateNonEmployeeRecordRequest {
    /**
     * Non-Employee record creation request body.
     * @type {NonEmployeeRequestBody}
     * @memberof NonEmployeeLifecycleManagementApiCreateNonEmployeeRecord
     */
    readonly nonEmployeeRequestBody: NonEmployeeRequestBody;
}
/**
 * Request parameters for createNonEmployeeRequest operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiCreateNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementApiCreateNonEmployeeRequestRequest {
    /**
     * Non-Employee creation request body
     * @type {NonEmployeeRequestBody}
     * @memberof NonEmployeeLifecycleManagementApiCreateNonEmployeeRequest
     */
    readonly nonEmployeeRequestBody: NonEmployeeRequestBody;
}
/**
 * Request parameters for createNonEmployeeSource operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceRequest {
    /**
     * Non-Employee source creation request body.
     * @type {NonEmployeeSourceRequestBody}
     * @memberof NonEmployeeLifecycleManagementApiCreateNonEmployeeSource
     */
    readonly nonEmployeeSourceRequestBody: NonEmployeeSourceRequestBody;
}
/**
 * Request parameters for createNonEmployeeSourceSchemaAttributes operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceSchemaAttributesRequest
 */
export interface NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceSchemaAttributesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceSchemaAttributes
     */
    readonly sourceId: string;
    /**
     *
     * @type {NonEmployeeSchemaAttributeBody}
     * @memberof NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceSchemaAttributes
     */
    readonly nonEmployeeSchemaAttributeBody: NonEmployeeSchemaAttributeBody;
}
/**
 * Request parameters for deleteNonEmployeeRecord operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordRequest {
    /**
     * Non-Employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecord
     */
    readonly id: string;
}
/**
 * Request parameters for deleteNonEmployeeRecordsInBulk operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordsInBulkRequest
 */
export interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordsInBulkRequest {
    /**
     * Non-Employee bulk delete request body.
     * @type {DeleteNonEmployeeRecordsInBulkRequest}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordsInBulk
     */
    readonly deleteNonEmployeeRecordsInBulkRequest: DeleteNonEmployeeRecordsInBulkRequest;
}
/**
 * Request parameters for deleteNonEmployeeRequest operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeRequestRequest {
    /**
     * Non-Employee request id in the UUID format
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeRequest
     */
    readonly id: string;
}
/**
 * Request parameters for deleteNonEmployeeSchemaAttribute operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeSchemaAttributeRequest
 */
export interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeSchemaAttributeRequest {
    /**
     * The Schema Attribute Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeSchemaAttribute
     */
    readonly attributeId: string;
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeSchemaAttribute
     */
    readonly sourceId: string;
}
/**
 * Request parameters for deleteNonEmployeeSource operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeSource
     */
    readonly sourceId: string;
}
/**
 * Request parameters for deleteNonEmployeeSourceSchemaAttributes operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceSchemaAttributesRequest
 */
export interface NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceSchemaAttributesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceSchemaAttributes
     */
    readonly sourceId: string;
}
/**
 * Request parameters for exportNonEmployeeRecords operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiExportNonEmployeeRecordsRequest
 */
export interface NonEmployeeLifecycleManagementApiExportNonEmployeeRecordsRequest {
    /**
     * Source Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiExportNonEmployeeRecords
     */
    readonly id: string;
}
/**
 * Request parameters for exportNonEmployeeSourceSchemaTemplate operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiExportNonEmployeeSourceSchemaTemplateRequest
 */
export interface NonEmployeeLifecycleManagementApiExportNonEmployeeSourceSchemaTemplateRequest {
    /**
     * Source Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiExportNonEmployeeSourceSchemaTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeApproval operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalRequest {
    /**
     * Non-Employee approval item id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeApproval
     */
    readonly id: string;
    /**
     * The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeApproval
     */
    readonly includeDetail?: boolean;
}
/**
 * Request parameters for getNonEmployeeApprovalSummary operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalSummaryRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalSummaryRequest {
    /**
     * The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalSummary
     */
    readonly requestedFor: string;
}
/**
 * Request parameters for getNonEmployeeBulkUploadStatus operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeBulkUploadStatusRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeBulkUploadStatusRequest {
    /**
     * Source ID (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeBulkUploadStatus
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeRecord operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeRecordRequest {
    /**
     * Non-Employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeRecord
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeRequest operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeRequestRequest {
    /**
     * Non-Employee request id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeRequest
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeRequestSummary operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeRequestSummaryRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeRequestSummaryRequest {
    /**
     * The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeRequestSummary
     */
    readonly requestedFor: string;
}
/**
 * Request parameters for getNonEmployeeSchemaAttribute operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeSchemaAttributeRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeSchemaAttributeRequest {
    /**
     * The Schema Attribute Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeSchemaAttribute
     */
    readonly attributeId: string;
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeSchemaAttribute
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getNonEmployeeSource operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeSourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeSource
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getNonEmployeeSourceSchemaAttributes operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiGetNonEmployeeSourceSchemaAttributesRequest
 */
export interface NonEmployeeLifecycleManagementApiGetNonEmployeeSourceSchemaAttributesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiGetNonEmployeeSourceSchemaAttributes
     */
    readonly sourceId: string;
}
/**
 * Request parameters for importNonEmployeeRecordsInBulk operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiImportNonEmployeeRecordsInBulkRequest
 */
export interface NonEmployeeLifecycleManagementApiImportNonEmployeeRecordsInBulkRequest {
    /**
     * Source Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiImportNonEmployeeRecordsInBulk
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof NonEmployeeLifecycleManagementApiImportNonEmployeeRecordsInBulk
     */
    readonly data: any;
}
/**
 * Request parameters for listNonEmployeeApprovals operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiListNonEmployeeApprovalsRequest
 */
export interface NonEmployeeLifecycleManagementApiListNonEmployeeApprovalsRequest {
    /**
     * The identity for whom the request was made. *me* indicates the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeApprovals
     */
    readonly requestedFor?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeApprovals
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeApprovals
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeApprovals
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeApprovals
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeApprovals
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listNonEmployeeRecords operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiListNonEmployeeRecordsRequest
 */
export interface NonEmployeeLifecycleManagementApiListNonEmployeeRecordsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRecords
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRecords
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRecords
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRecords
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRecords
     */
    readonly filters?: string;
}
/**
 * Request parameters for listNonEmployeeRequests operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiListNonEmployeeRequestsRequest
 */
export interface NonEmployeeLifecycleManagementApiListNonEmployeeRequestsRequest {
    /**
     * The identity for whom the request was made. *me* indicates the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRequests
     */
    readonly requestedFor: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRequests
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRequests
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRequests
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRequests
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeRequests
     */
    readonly filters?: string;
}
/**
 * Request parameters for listNonEmployeeSources operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiListNonEmployeeSourcesRequest
 */
export interface NonEmployeeLifecycleManagementApiListNonEmployeeSourcesRequest {
    /**
     * The identity for whom the request was made. *me* indicates the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeSources
     */
    readonly requestedFor: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeSources
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeSources
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeSources
     */
    readonly count?: boolean;
    /**
     * The flag to determine whether return a non-employee count associate with source.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeSources
     */
    readonly nonEmployeeCount?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiListNonEmployeeSources
     */
    readonly sorters?: string;
}
/**
 * Request parameters for patchNonEmployeeRecord operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiPatchNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementApiPatchNonEmployeeRecordRequest {
    /**
     * Non-employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeRecord
     */
    readonly id: string;
    /**
     * A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @type {Array<JsonPatchOperation>}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeRecord
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for patchNonEmployeeSchemaAttribute operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttributeRequest
 */
export interface NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttributeRequest {
    /**
     * The Schema Attribute Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttribute
     */
    readonly attributeId: string;
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttribute
     */
    readonly sourceId: string;
    /**
     * A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @type {Array<JsonPatchOperation>}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttribute
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for patchNonEmployeeSource operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiPatchNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementApiPatchNonEmployeeSourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeSource
     */
    readonly sourceId: string;
    /**
     * A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperation>}
     * @memberof NonEmployeeLifecycleManagementApiPatchNonEmployeeSource
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for rejectNonEmployeeRequest operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiRejectNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementApiRejectNonEmployeeRequestRequest {
    /**
     * Non-Employee approval item id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiRejectNonEmployeeRequest
     */
    readonly id: string;
    /**
     *
     * @type {NonEmployeeRejectApprovalDecision}
     * @memberof NonEmployeeLifecycleManagementApiRejectNonEmployeeRequest
     */
    readonly nonEmployeeRejectApprovalDecision: NonEmployeeRejectApprovalDecision;
}
/**
 * Request parameters for updateNonEmployeeRecord operation in NonEmployeeLifecycleManagementApi.
 * @export
 * @interface NonEmployeeLifecycleManagementApiUpdateNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementApiUpdateNonEmployeeRecordRequest {
    /**
     * Non-employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementApiUpdateNonEmployeeRecord
     */
    readonly id: string;
    /**
     * Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @type {NonEmployeeRequestBody}
     * @memberof NonEmployeeLifecycleManagementApiUpdateNonEmployeeRecord
     */
    readonly nonEmployeeRequestBody: NonEmployeeRequestBody;
}
/**
 * NonEmployeeLifecycleManagementApi - object-oriented interface
 * @export
 * @class NonEmployeeLifecycleManagementApi
 * @extends {BaseAPI}
 */
export declare class NonEmployeeLifecycleManagementApi extends BaseAPI {
    /**
     * Approves a non-employee approval request and notifies the next approver. The current user must be the requested approver.
     * @summary Approve a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementApiApproveNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    approveNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementApiApproveNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItem, any>>;
    /**
     * This request will create a non-employee record. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Record
     * @param {NonEmployeeLifecycleManagementApiCreateNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    createNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementApiCreateNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecord, any>>;
    /**
     * This request will create a non-employee request and notify the approver. Requires role context of `idn:nesr:create` or the user must own the source.
     * @summary Create Non-Employee Request
     * @param {NonEmployeeLifecycleManagementApiCreateNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    createNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementApiCreateNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequest, any>>;
    /**
     * This request will create a non-employee source. Requires role context of `idn:nesr:create`
     * @summary Create Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    createNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSourceWithCloudExternalId, any>>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response. Requires role context of `idn:nesr:create`
     * @summary Create a new Schema Attribute for Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    createNonEmployeeSourceSchemaAttributes(requestParameters: NonEmployeeLifecycleManagementApiCreateNonEmployeeSourceSchemaAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttribute, any>>;
    /**
     * This request will delete a non-employee record. Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Record
     * @param {NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    deleteNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Requires role context of `idn:nesr:delete`
     * @summary Delete Multiple Non-Employee Records
     * @param {NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    deleteNonEmployeeRecordsInBulk(requestParameters: NonEmployeeLifecycleManagementApiDeleteNonEmployeeRecordsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This request will delete a non-employee request.  Requires role context of `idn:nesr:delete`
     * @summary Delete Non-Employee Request
     * @param {NonEmployeeLifecycleManagementApiDeleteNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    deleteNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementApiDeleteNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete a Schema Attribute for Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiDeleteNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    deleteNonEmployeeSchemaAttribute(requestParameters: NonEmployeeLifecycleManagementApiDeleteNonEmployeeSchemaAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This request will delete a non-employee source. Requires role context of `idn:nesr:delete`.
     * @summary Delete Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    deleteNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source. Requires role context of `idn:nesr:delete`
     * @summary Delete all custom schema attributes for Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    deleteNonEmployeeSourceSchemaAttributes(requestParameters: NonEmployeeLifecycleManagementApiDeleteNonEmployeeSourceSchemaAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This requests a CSV download for all non-employees from a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Non-Employee Records to CSV
     * @param {NonEmployeeLifecycleManagementApiExportNonEmployeeRecordsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    exportNonEmployeeRecords(requestParameters: NonEmployeeLifecycleManagementApiExportNonEmployeeRecordsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Requires role context of `idn:nesr:read`
     * @summary Exports Source Schema Template
     * @param {NonEmployeeLifecycleManagementApiExportNonEmployeeSourceSchemaTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    exportNonEmployeeSourceSchemaTemplate(requestParameters: NonEmployeeLifecycleManagementApiExportNonEmployeeSourceSchemaTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a non-employee approval item detail. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get any approval.   2. The user owns the requested approval.
     * @summary Get a non-employee approval item detail
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeApproval(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItemDetail, any>>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id.   2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeApprovalSummary(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeApprovalSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalSummary, any>>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source. Requires role context of `idn:nesr:read`
     * @summary Obtain the status of bulk upload on the source
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeBulkUploadStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeBulkUploadStatus(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeBulkUploadStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeBulkUploadStatus, any>>;
    /**
     * This gets a non-employee record. Requires role context of `idn:nesr:read`
     * @summary Get a Non-Employee Record
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecord, any>>;
    /**
     * This gets a non-employee request. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in this case the user can get the non-employee request for any user.   2. The user must be the owner of the non-employee request.
     * @summary Get a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequest, any>>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeRequestSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeRequestSummary(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeRequestSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequestSummary, any>>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeSchemaAttribute(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeSchemaAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttribute, any>>;
    /**
     * This gets a non-employee source. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request any source.   2. The current user is an account manager, in which case the user can only request sources that they own.
     * @summary Get a Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSource, any>>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned. Requires role context of `idn:nesr:read` or the user must be an account manager of the source.
     * @summary List Schema Attributes Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiGetNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    getNonEmployeeSourceSchemaAttributes(requestParameters: NonEmployeeLifecycleManagementApiGetNonEmployeeSourceSchemaAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttribute[], any>>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Requires role context of `idn:nesr:create`
     * @summary Imports, or Updates, Non-Employee Records
     * @param {NonEmployeeLifecycleManagementApiImportNonEmployeeRecordsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    importNonEmployeeRecordsInBulk(requestParameters: NonEmployeeLifecycleManagementApiImportNonEmployeeRecordsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeBulkUploadJob, any>>;
    /**
     * This gets a list of non-employee approval requests. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can list the approvals for any approver.   2. The user owns the requested approval.
     * @summary Get List of Non-Employee Approval Requests
     * @param {NonEmployeeLifecycleManagementApiListNonEmployeeApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    listNonEmployeeApprovals(requestParameters?: NonEmployeeLifecycleManagementApiListNonEmployeeApprovalsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItem[], any>>;
    /**
     * This gets a list of non-employee records. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:read`, in which case they can get a list of all of the non-employees.   2. The user is an account manager, in which case they can get a list of the non-employees that they manage.
     * @summary List Non-Employee Records
     * @param {NonEmployeeLifecycleManagementApiListNonEmployeeRecordsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    listNonEmployeeRecords(requestParameters?: NonEmployeeLifecycleManagementApiListNonEmployeeRecordsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecord[], any>>;
    /**
     * This gets a list of non-employee requests. There are two contextual uses for the `requested-for` path parameter:   1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list non-employee requests assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the non-employee requests in the source(s) he or she manages.
     * @summary List Non-Employee Requests
     * @param {NonEmployeeLifecycleManagementApiListNonEmployeeRequestsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    listNonEmployeeRequests(requestParameters: NonEmployeeLifecycleManagementApiListNonEmployeeRequestsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequest[], any>>;
    /**
     * This gets a list of non-employee sources. There are two contextual uses for the requested-for path parameter:    1. The user has the role context of `idn:nesr:read`, in which case he or she may request a list sources assigned to a particular account manager by passing in that manager\'s id.   2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a list of the sources that he or she owns.
     * @summary List Non-Employee Sources
     * @param {NonEmployeeLifecycleManagementApiListNonEmployeeSourcesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    listNonEmployeeSources(requestParameters: NonEmployeeLifecycleManagementApiListNonEmployeeSourcesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSourceWithNECount[], any>>;
    /**
     * This request will patch a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Patch Non-Employee Record
     * @param {NonEmployeeLifecycleManagementApiPatchNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    patchNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementApiPatchNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecord, any>>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId. Requires role context of `idn:nesr:update`
     * @summary Patch a Schema Attribute for Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    patchNonEmployeeSchemaAttribute(requestParameters: NonEmployeeLifecycleManagementApiPatchNonEmployeeSchemaAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttribute, any>>;
    /**
     * patch a non-employee source. (partial update) <br/> Patchable field: **name, description, approvers, accountManagers** Requires role context of `idn:nesr:update`.
     * @summary Patch a Non-Employee Source
     * @param {NonEmployeeLifecycleManagementApiPatchNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    patchNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementApiPatchNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSource, any>>;
    /**
     * This endpoint will reject an approval item request and notify user. The current user must be the requested approver.
     * @summary Reject a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementApiRejectNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    rejectNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementApiRejectNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItem, any>>;
    /**
     * This request will update a non-employee record. There are two contextual uses for this endpoint:   1. The user has the role context of `idn:nesr:update`, in which case they update all available fields.   2. The user is owner of the source, in this case they can only update the end date.
     * @summary Update Non-Employee Record
     * @param {NonEmployeeLifecycleManagementApiUpdateNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementApi
     */
    updateNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementApiUpdateNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecord, any>>;
}
/**
 * OAuthClientsApi - axios parameter creator
 * @export
 */
export declare const OAuthClientsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {CreateOAuthClientRequest} createOAuthClientRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createOauthClient: (createOAuthClientRequest: CreateOAuthClientRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteOauthClient: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOauthClient: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOauthClients: (filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client.
     * @summary Patch OAuth Client
     * @param {string} id The OAuth client id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOauthClient: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OAuthClientsApi - functional programming interface
 * @export
 */
export declare const OAuthClientsApiFp: (configuration?: Configuration) => {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {CreateOAuthClientRequest} createOAuthClientRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createOauthClient(createOAuthClientRequest: CreateOAuthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOAuthClientResponse>>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteOauthClient(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOauthClient(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOAuthClientResponse>>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOauthClients(filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOAuthClientResponse>>>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client.
     * @summary Patch OAuth Client
     * @param {string} id The OAuth client id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOauthClient(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOAuthClientResponse>>;
};
/**
 * OAuthClientsApi - factory interface
 * @export
 */
export declare const OAuthClientsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {CreateOAuthClientRequest} createOAuthClientRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createOauthClient(createOAuthClientRequest: CreateOAuthClientRequest, axiosOptions?: any): AxiosPromise<CreateOAuthClientResponse>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteOauthClient(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOauthClient(id: string, axiosOptions?: any): AxiosPromise<GetOAuthClientResponse>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOauthClients(filters?: string, axiosOptions?: any): AxiosPromise<Array<GetOAuthClientResponse>>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client.
     * @summary Patch OAuth Client
     * @param {string} id The OAuth client id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOauthClient(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<GetOAuthClientResponse>;
};
/**
 * Request parameters for createOauthClient operation in OAuthClientsApi.
 * @export
 * @interface OAuthClientsApiCreateOauthClientRequest
 */
export interface OAuthClientsApiCreateOauthClientRequest {
    /**
     *
     * @type {CreateOAuthClientRequest}
     * @memberof OAuthClientsApiCreateOauthClient
     */
    readonly createOAuthClientRequest: CreateOAuthClientRequest;
}
/**
 * Request parameters for deleteOauthClient operation in OAuthClientsApi.
 * @export
 * @interface OAuthClientsApiDeleteOauthClientRequest
 */
export interface OAuthClientsApiDeleteOauthClientRequest {
    /**
     * The OAuth client id
     * @type {string}
     * @memberof OAuthClientsApiDeleteOauthClient
     */
    readonly id: string;
}
/**
 * Request parameters for getOauthClient operation in OAuthClientsApi.
 * @export
 * @interface OAuthClientsApiGetOauthClientRequest
 */
export interface OAuthClientsApiGetOauthClientRequest {
    /**
     * The OAuth client id
     * @type {string}
     * @memberof OAuthClientsApiGetOauthClient
     */
    readonly id: string;
}
/**
 * Request parameters for listOauthClients operation in OAuthClientsApi.
 * @export
 * @interface OAuthClientsApiListOauthClientsRequest
 */
export interface OAuthClientsApiListOauthClientsRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @type {string}
     * @memberof OAuthClientsApiListOauthClients
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchOauthClient operation in OAuthClientsApi.
 * @export
 * @interface OAuthClientsApiPatchOauthClientRequest
 */
export interface OAuthClientsApiPatchOauthClientRequest {
    /**
     * The OAuth client id
     * @type {string}
     * @memberof OAuthClientsApiPatchOauthClient
     */
    readonly id: string;
    /**
     * A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @type {Array<JsonPatchOperation>}
     * @memberof OAuthClientsApiPatchOauthClient
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * OAuthClientsApi - object-oriented interface
 * @export
 * @class OAuthClientsApi
 * @extends {BaseAPI}
 */
export declare class OAuthClientsApi extends BaseAPI {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {OAuthClientsApiCreateOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsApi
     */
    createOauthClient(requestParameters: OAuthClientsApiCreateOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOAuthClientResponse, any>>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {OAuthClientsApiDeleteOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsApi
     */
    deleteOauthClient(requestParameters: OAuthClientsApiDeleteOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {OAuthClientsApiGetOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsApi
     */
    getOauthClient(requestParameters: OAuthClientsApiGetOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOAuthClientResponse, any>>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {OAuthClientsApiListOauthClientsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsApi
     */
    listOauthClients(requestParameters?: OAuthClientsApiListOauthClientsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOAuthClientResponse[], any>>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client.
     * @summary Patch OAuth Client
     * @param {OAuthClientsApiPatchOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsApi
     */
    patchOauthClient(requestParameters: OAuthClientsApiPatchOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOAuthClientResponse, any>>;
}
/**
 * PasswordConfigurationApi - axios parameter creator
 * @export
 */
export declare const PasswordConfigurationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordOrgConfig} passwordOrgConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordOrgConfig: (passwordOrgConfig: PasswordOrgConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordOrgConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordOrgConfig} passwordOrgConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordOrgConfig: (passwordOrgConfig: PasswordOrgConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordConfigurationApi - functional programming interface
 * @export
 */
export declare const PasswordConfigurationApiFp: (configuration?: Configuration) => {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordOrgConfig} passwordOrgConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordOrgConfig(passwordOrgConfig: PasswordOrgConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordOrgConfig>>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordOrgConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordOrgConfig>>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordOrgConfig} passwordOrgConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordOrgConfig(passwordOrgConfig: PasswordOrgConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordOrgConfig>>;
};
/**
 * PasswordConfigurationApi - factory interface
 * @export
 */
export declare const PasswordConfigurationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordOrgConfig} passwordOrgConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordOrgConfig(passwordOrgConfig: PasswordOrgConfig, axiosOptions?: any): AxiosPromise<PasswordOrgConfig>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordOrgConfig(axiosOptions?: any): AxiosPromise<PasswordOrgConfig>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordOrgConfig} passwordOrgConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordOrgConfig(passwordOrgConfig: PasswordOrgConfig, axiosOptions?: any): AxiosPromise<PasswordOrgConfig>;
};
/**
 * Request parameters for createPasswordOrgConfig operation in PasswordConfigurationApi.
 * @export
 * @interface PasswordConfigurationApiCreatePasswordOrgConfigRequest
 */
export interface PasswordConfigurationApiCreatePasswordOrgConfigRequest {
    /**
     *
     * @type {PasswordOrgConfig}
     * @memberof PasswordConfigurationApiCreatePasswordOrgConfig
     */
    readonly passwordOrgConfig: PasswordOrgConfig;
}
/**
 * Request parameters for putPasswordOrgConfig operation in PasswordConfigurationApi.
 * @export
 * @interface PasswordConfigurationApiPutPasswordOrgConfigRequest
 */
export interface PasswordConfigurationApiPutPasswordOrgConfigRequest {
    /**
     *
     * @type {PasswordOrgConfig}
     * @memberof PasswordConfigurationApiPutPasswordOrgConfig
     */
    readonly passwordOrgConfig: PasswordOrgConfig;
}
/**
 * PasswordConfigurationApi - object-oriented interface
 * @export
 * @class PasswordConfigurationApi
 * @extends {BaseAPI}
 */
export declare class PasswordConfigurationApi extends BaseAPI {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordConfigurationApiCreatePasswordOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationApi
     */
    createPasswordOrgConfig(requestParameters: PasswordConfigurationApiCreatePasswordOrgConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordOrgConfig, any>>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationApi
     */
    getPasswordOrgConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordOrgConfig, any>>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordConfigurationApiPutPasswordOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationApi
     */
    putPasswordOrgConfig(requestParameters: PasswordConfigurationApiPutPasswordOrgConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordOrgConfig, any>>;
}
/**
 * PasswordDictionaryApi - axios parameter creator
 * @export
 */
export declare const PasswordDictionaryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordDictionary: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordDictionary: (file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordDictionaryApi - functional programming interface
 * @export
 */
export declare const PasswordDictionaryApiFp: (configuration?: Configuration) => {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordDictionary(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordDictionary(file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PasswordDictionaryApi - factory interface
 * @export
 */
export declare const PasswordDictionaryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordDictionary(axiosOptions?: any): AxiosPromise<string>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordDictionary(file?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for putPasswordDictionary operation in PasswordDictionaryApi.
 * @export
 * @interface PasswordDictionaryApiPutPasswordDictionaryRequest
 */
export interface PasswordDictionaryApiPutPasswordDictionaryRequest {
    /**
     *
     * @type {any}
     * @memberof PasswordDictionaryApiPutPasswordDictionary
     */
    readonly file?: any;
}
/**
 * PasswordDictionaryApi - object-oriented interface
 * @export
 * @class PasswordDictionaryApi
 * @extends {BaseAPI}
 */
export declare class PasswordDictionaryApi extends BaseAPI {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordDictionaryApi
     */
    getPasswordDictionary(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {PasswordDictionaryApiPutPasswordDictionaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordDictionaryApi
     */
    putPasswordDictionary(requestParameters?: PasswordDictionaryApiPutPasswordDictionaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PasswordManagementApi - axios parameter creator
 * @export
 */
export declare const PasswordManagementApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {string} id Password change request ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordChangeStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordInfoQueryDTO} passwordInfoQueryDTO
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryPasswordInfo: (passwordInfoQueryDTO: PasswordInfoQueryDTO, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordChangeRequest} passwordChangeRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPassword: (passwordChangeRequest: PasswordChangeRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordManagementApi - functional programming interface
 * @export
 */
export declare const PasswordManagementApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {string} id Password change request ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordChangeStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordStatus>>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordInfoQueryDTO} passwordInfoQueryDTO
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryPasswordInfo(passwordInfoQueryDTO: PasswordInfoQueryDTO, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordInfo>>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordChangeRequest} passwordChangeRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPassword(passwordChangeRequest: PasswordChangeRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChangeResponse>>;
};
/**
 * PasswordManagementApi - factory interface
 * @export
 */
export declare const PasswordManagementApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {string} id Password change request ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordChangeStatus(id: string, axiosOptions?: any): AxiosPromise<PasswordStatus>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordInfoQueryDTO} passwordInfoQueryDTO
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryPasswordInfo(passwordInfoQueryDTO: PasswordInfoQueryDTO, axiosOptions?: any): AxiosPromise<PasswordInfo>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordChangeRequest} passwordChangeRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPassword(passwordChangeRequest: PasswordChangeRequest, axiosOptions?: any): AxiosPromise<PasswordChangeResponse>;
};
/**
 * Request parameters for getPasswordChangeStatus operation in PasswordManagementApi.
 * @export
 * @interface PasswordManagementApiGetPasswordChangeStatusRequest
 */
export interface PasswordManagementApiGetPasswordChangeStatusRequest {
    /**
     * Password change request ID
     * @type {string}
     * @memberof PasswordManagementApiGetPasswordChangeStatus
     */
    readonly id: string;
}
/**
 * Request parameters for queryPasswordInfo operation in PasswordManagementApi.
 * @export
 * @interface PasswordManagementApiQueryPasswordInfoRequest
 */
export interface PasswordManagementApiQueryPasswordInfoRequest {
    /**
     *
     * @type {PasswordInfoQueryDTO}
     * @memberof PasswordManagementApiQueryPasswordInfo
     */
    readonly passwordInfoQueryDTO: PasswordInfoQueryDTO;
}
/**
 * Request parameters for setPassword operation in PasswordManagementApi.
 * @export
 * @interface PasswordManagementApiSetPasswordRequest
 */
export interface PasswordManagementApiSetPasswordRequest {
    /**
     *
     * @type {PasswordChangeRequest}
     * @memberof PasswordManagementApiSetPassword
     */
    readonly passwordChangeRequest: PasswordChangeRequest;
}
/**
 * PasswordManagementApi - object-oriented interface
 * @export
 * @class PasswordManagementApi
 * @extends {BaseAPI}
 */
export declare class PasswordManagementApi extends BaseAPI {
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {PasswordManagementApiGetPasswordChangeStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementApi
     */
    getPasswordChangeStatus(requestParameters: PasswordManagementApiGetPasswordChangeStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordStatus, any>>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordManagementApiQueryPasswordInfoRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementApi
     */
    queryPasswordInfo(requestParameters: PasswordManagementApiQueryPasswordInfoRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordInfo, any>>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordManagementApiSetPasswordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementApi
     */
    setPassword(requestParameters: PasswordManagementApiSetPasswordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordChangeResponse, any>>;
}
/**
 * PasswordPoliciesApi - axios parameter creator
 * @export
 */
export declare const PasswordPoliciesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPolicyV3Dto} passwordPolicyV3Dto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordPolicy: (passwordPolicyV3Dto: PasswordPolicyV3Dto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {string} id The ID of password policy to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {string} id The ID of password policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordPolicyById: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPasswordPolicies: (limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {string} id The ID of password policy to update.
     * @param {PasswordPolicyV3Dto} passwordPolicyV3Dto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPasswordPolicy: (id: string, passwordPolicyV3Dto: PasswordPolicyV3Dto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordPoliciesApi - functional programming interface
 * @export
 */
export declare const PasswordPoliciesApiFp: (configuration?: Configuration) => {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPolicyV3Dto} passwordPolicyV3Dto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordPolicy(passwordPolicyV3Dto: PasswordPolicyV3Dto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyV3Dto>>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {string} id The ID of password policy to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {string} id The ID of password policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordPolicyById(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyV3Dto>>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPasswordPolicies(limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PasswordPolicyV3Dto>>>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {string} id The ID of password policy to update.
     * @param {PasswordPolicyV3Dto} passwordPolicyV3Dto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPasswordPolicy(id: string, passwordPolicyV3Dto: PasswordPolicyV3Dto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyV3Dto>>;
};
/**
 * PasswordPoliciesApi - factory interface
 * @export
 */
export declare const PasswordPoliciesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPolicyV3Dto} passwordPolicyV3Dto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordPolicy(passwordPolicyV3Dto: PasswordPolicyV3Dto, axiosOptions?: any): AxiosPromise<PasswordPolicyV3Dto>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {string} id The ID of password policy to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordPolicy(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {string} id The ID of password policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordPolicyById(id: string, axiosOptions?: any): AxiosPromise<PasswordPolicyV3Dto>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPasswordPolicies(limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PasswordPolicyV3Dto>>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {string} id The ID of password policy to update.
     * @param {PasswordPolicyV3Dto} passwordPolicyV3Dto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPasswordPolicy(id: string, passwordPolicyV3Dto: PasswordPolicyV3Dto, axiosOptions?: any): AxiosPromise<PasswordPolicyV3Dto>;
};
/**
 * Request parameters for createPasswordPolicy operation in PasswordPoliciesApi.
 * @export
 * @interface PasswordPoliciesApiCreatePasswordPolicyRequest
 */
export interface PasswordPoliciesApiCreatePasswordPolicyRequest {
    /**
     *
     * @type {PasswordPolicyV3Dto}
     * @memberof PasswordPoliciesApiCreatePasswordPolicy
     */
    readonly passwordPolicyV3Dto: PasswordPolicyV3Dto;
}
/**
 * Request parameters for deletePasswordPolicy operation in PasswordPoliciesApi.
 * @export
 * @interface PasswordPoliciesApiDeletePasswordPolicyRequest
 */
export interface PasswordPoliciesApiDeletePasswordPolicyRequest {
    /**
     * The ID of password policy to delete.
     * @type {string}
     * @memberof PasswordPoliciesApiDeletePasswordPolicy
     */
    readonly id: string;
}
/**
 * Request parameters for getPasswordPolicyById operation in PasswordPoliciesApi.
 * @export
 * @interface PasswordPoliciesApiGetPasswordPolicyByIdRequest
 */
export interface PasswordPoliciesApiGetPasswordPolicyByIdRequest {
    /**
     * The ID of password policy to retrieve.
     * @type {string}
     * @memberof PasswordPoliciesApiGetPasswordPolicyById
     */
    readonly id: string;
}
/**
 * Request parameters for listPasswordPolicies operation in PasswordPoliciesApi.
 * @export
 * @interface PasswordPoliciesApiListPasswordPoliciesRequest
 */
export interface PasswordPoliciesApiListPasswordPoliciesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordPoliciesApiListPasswordPolicies
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordPoliciesApiListPasswordPolicies
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof PasswordPoliciesApiListPasswordPolicies
     */
    readonly count?: boolean;
}
/**
 * Request parameters for setPasswordPolicy operation in PasswordPoliciesApi.
 * @export
 * @interface PasswordPoliciesApiSetPasswordPolicyRequest
 */
export interface PasswordPoliciesApiSetPasswordPolicyRequest {
    /**
     * The ID of password policy to update.
     * @type {string}
     * @memberof PasswordPoliciesApiSetPasswordPolicy
     */
    readonly id: string;
    /**
     *
     * @type {PasswordPolicyV3Dto}
     * @memberof PasswordPoliciesApiSetPasswordPolicy
     */
    readonly passwordPolicyV3Dto: PasswordPolicyV3Dto;
}
/**
 * PasswordPoliciesApi - object-oriented interface
 * @export
 * @class PasswordPoliciesApi
 * @extends {BaseAPI}
 */
export declare class PasswordPoliciesApi extends BaseAPI {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPoliciesApiCreatePasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesApi
     */
    createPasswordPolicy(requestParameters: PasswordPoliciesApiCreatePasswordPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3Dto, any>>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {PasswordPoliciesApiDeletePasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesApi
     */
    deletePasswordPolicy(requestParameters: PasswordPoliciesApiDeletePasswordPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {PasswordPoliciesApiGetPasswordPolicyByIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesApi
     */
    getPasswordPolicyById(requestParameters: PasswordPoliciesApiGetPasswordPolicyByIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3Dto, any>>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {PasswordPoliciesApiListPasswordPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesApi
     */
    listPasswordPolicies(requestParameters?: PasswordPoliciesApiListPasswordPoliciesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3Dto[], any>>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {PasswordPoliciesApiSetPasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesApi
     */
    setPasswordPolicy(requestParameters: PasswordPoliciesApiSetPasswordPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3Dto, any>>;
}
/**
 * PasswordSyncGroupsApi - axios parameter creator
 * @export
 */
export declare const PasswordSyncGroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroup} passwordSyncGroup
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordSyncGroup: (passwordSyncGroup: PasswordSyncGroup, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {string} id The ID of password sync group to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordSyncGroup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {string} id The ID of password sync group to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroups: (limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {string} id The ID of password sync group to update.
     * @param {PasswordSyncGroup} passwordSyncGroup
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordSyncGroup: (id: string, passwordSyncGroup: PasswordSyncGroup, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordSyncGroupsApi - functional programming interface
 * @export
 */
export declare const PasswordSyncGroupsApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroup} passwordSyncGroup
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordSyncGroup(passwordSyncGroup: PasswordSyncGroup, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordSyncGroup>>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {string} id The ID of password sync group to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordSyncGroup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {string} id The ID of password sync group to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordSyncGroup>>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroups(limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PasswordSyncGroup>>>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {string} id The ID of password sync group to update.
     * @param {PasswordSyncGroup} passwordSyncGroup
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordSyncGroup(id: string, passwordSyncGroup: PasswordSyncGroup, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordSyncGroup>>;
};
/**
 * PasswordSyncGroupsApi - factory interface
 * @export
 */
export declare const PasswordSyncGroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroup} passwordSyncGroup
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordSyncGroup(passwordSyncGroup: PasswordSyncGroup, axiosOptions?: any): AxiosPromise<PasswordSyncGroup>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {string} id The ID of password sync group to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordSyncGroup(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {string} id The ID of password sync group to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroup(id: string, axiosOptions?: any): AxiosPromise<PasswordSyncGroup>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroups(limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PasswordSyncGroup>>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {string} id The ID of password sync group to update.
     * @param {PasswordSyncGroup} passwordSyncGroup
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordSyncGroup(id: string, passwordSyncGroup: PasswordSyncGroup, axiosOptions?: any): AxiosPromise<PasswordSyncGroup>;
};
/**
 * Request parameters for createPasswordSyncGroup operation in PasswordSyncGroupsApi.
 * @export
 * @interface PasswordSyncGroupsApiCreatePasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsApiCreatePasswordSyncGroupRequest {
    /**
     *
     * @type {PasswordSyncGroup}
     * @memberof PasswordSyncGroupsApiCreatePasswordSyncGroup
     */
    readonly passwordSyncGroup: PasswordSyncGroup;
}
/**
 * Request parameters for deletePasswordSyncGroup operation in PasswordSyncGroupsApi.
 * @export
 * @interface PasswordSyncGroupsApiDeletePasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsApiDeletePasswordSyncGroupRequest {
    /**
     * The ID of password sync group to delete.
     * @type {string}
     * @memberof PasswordSyncGroupsApiDeletePasswordSyncGroup
     */
    readonly id: string;
}
/**
 * Request parameters for getPasswordSyncGroup operation in PasswordSyncGroupsApi.
 * @export
 * @interface PasswordSyncGroupsApiGetPasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsApiGetPasswordSyncGroupRequest {
    /**
     * The ID of password sync group to retrieve.
     * @type {string}
     * @memberof PasswordSyncGroupsApiGetPasswordSyncGroup
     */
    readonly id: string;
}
/**
 * Request parameters for getPasswordSyncGroups operation in PasswordSyncGroupsApi.
 * @export
 * @interface PasswordSyncGroupsApiGetPasswordSyncGroupsRequest
 */
export interface PasswordSyncGroupsApiGetPasswordSyncGroupsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordSyncGroupsApiGetPasswordSyncGroups
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordSyncGroupsApiGetPasswordSyncGroups
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof PasswordSyncGroupsApiGetPasswordSyncGroups
     */
    readonly count?: boolean;
}
/**
 * Request parameters for updatePasswordSyncGroup operation in PasswordSyncGroupsApi.
 * @export
 * @interface PasswordSyncGroupsApiUpdatePasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsApiUpdatePasswordSyncGroupRequest {
    /**
     * The ID of password sync group to update.
     * @type {string}
     * @memberof PasswordSyncGroupsApiUpdatePasswordSyncGroup
     */
    readonly id: string;
    /**
     *
     * @type {PasswordSyncGroup}
     * @memberof PasswordSyncGroupsApiUpdatePasswordSyncGroup
     */
    readonly passwordSyncGroup: PasswordSyncGroup;
}
/**
 * PasswordSyncGroupsApi - object-oriented interface
 * @export
 * @class PasswordSyncGroupsApi
 * @extends {BaseAPI}
 */
export declare class PasswordSyncGroupsApi extends BaseAPI {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroupsApiCreatePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsApi
     */
    createPasswordSyncGroup(requestParameters: PasswordSyncGroupsApiCreatePasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroup, any>>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {PasswordSyncGroupsApiDeletePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsApi
     */
    deletePasswordSyncGroup(requestParameters: PasswordSyncGroupsApiDeletePasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {PasswordSyncGroupsApiGetPasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsApi
     */
    getPasswordSyncGroup(requestParameters: PasswordSyncGroupsApiGetPasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroup, any>>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {PasswordSyncGroupsApiGetPasswordSyncGroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsApi
     */
    getPasswordSyncGroups(requestParameters?: PasswordSyncGroupsApiGetPasswordSyncGroupsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroup[], any>>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {PasswordSyncGroupsApiUpdatePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsApi
     */
    updatePasswordSyncGroup(requestParameters: PasswordSyncGroupsApiUpdatePasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroup, any>>;
}
/**
 * PersonalAccessTokensApi - axios parameter creator
 * @export
 */
export declare const PersonalAccessTokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {CreatePersonalAccessTokenRequest} createPersonalAccessTokenRequest Name and scope of personal access token.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken: (createPersonalAccessTokenRequest: CreatePersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {string} id The personal access token id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60;  will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens: (ownerId?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token. Changing scopes for a Personal Access Token does not impact existing bearer tokens. You will need to create a new bearer token to have the new scopes. Please note that it can take up to 20 minutes for scope changes to be seen on new bearer tokens.
     * @summary Patch Personal Access Token
     * @param {string} id The Personal Access Token id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPersonalAccessToken: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PersonalAccessTokensApi - functional programming interface
 * @export
 */
export declare const PersonalAccessTokensApiFp: (configuration?: Configuration) => {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {CreatePersonalAccessTokenRequest} createPersonalAccessTokenRequest Name and scope of personal access token.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(createPersonalAccessTokenRequest: CreatePersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePersonalAccessTokenResponse>>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {string} id The personal access token id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60;  will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(ownerId?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPersonalAccessTokenResponse>>>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token. Changing scopes for a Personal Access Token does not impact existing bearer tokens. You will need to create a new bearer token to have the new scopes. Please note that it can take up to 20 minutes for scope changes to be seen on new bearer tokens.
     * @summary Patch Personal Access Token
     * @param {string} id The Personal Access Token id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPersonalAccessToken(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPersonalAccessTokenResponse>>;
};
/**
 * PersonalAccessTokensApi - factory interface
 * @export
 */
export declare const PersonalAccessTokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {CreatePersonalAccessTokenRequest} createPersonalAccessTokenRequest Name and scope of personal access token.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(createPersonalAccessTokenRequest: CreatePersonalAccessTokenRequest, axiosOptions?: any): AxiosPromise<CreatePersonalAccessTokenResponse>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {string} id The personal access token id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60;  will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(ownerId?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<GetPersonalAccessTokenResponse>>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token. Changing scopes for a Personal Access Token does not impact existing bearer tokens. You will need to create a new bearer token to have the new scopes. Please note that it can take up to 20 minutes for scope changes to be seen on new bearer tokens.
     * @summary Patch Personal Access Token
     * @param {string} id The Personal Access Token id
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPersonalAccessToken(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<GetPersonalAccessTokenResponse>;
};
/**
 * Request parameters for createPersonalAccessToken operation in PersonalAccessTokensApi.
 * @export
 * @interface PersonalAccessTokensApiCreatePersonalAccessTokenRequest
 */
export interface PersonalAccessTokensApiCreatePersonalAccessTokenRequest {
    /**
     * Name and scope of personal access token.
     * @type {CreatePersonalAccessTokenRequest}
     * @memberof PersonalAccessTokensApiCreatePersonalAccessToken
     */
    readonly createPersonalAccessTokenRequest: CreatePersonalAccessTokenRequest;
}
/**
 * Request parameters for deletePersonalAccessToken operation in PersonalAccessTokensApi.
 * @export
 * @interface PersonalAccessTokensApiDeletePersonalAccessTokenRequest
 */
export interface PersonalAccessTokensApiDeletePersonalAccessTokenRequest {
    /**
     * The personal access token id
     * @type {string}
     * @memberof PersonalAccessTokensApiDeletePersonalAccessToken
     */
    readonly id: string;
}
/**
 * Request parameters for listPersonalAccessTokens operation in PersonalAccessTokensApi.
 * @export
 * @interface PersonalAccessTokensApiListPersonalAccessTokensRequest
 */
export interface PersonalAccessTokensApiListPersonalAccessTokensRequest {
    /**
     * The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60;  will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @type {string}
     * @memberof PersonalAccessTokensApiListPersonalAccessTokens
     */
    readonly ownerId?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @type {string}
     * @memberof PersonalAccessTokensApiListPersonalAccessTokens
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchPersonalAccessToken operation in PersonalAccessTokensApi.
 * @export
 * @interface PersonalAccessTokensApiPatchPersonalAccessTokenRequest
 */
export interface PersonalAccessTokensApiPatchPersonalAccessTokenRequest {
    /**
     * The Personal Access Token id
     * @type {string}
     * @memberof PersonalAccessTokensApiPatchPersonalAccessToken
     */
    readonly id: string;
    /**
     * A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @type {Array<JsonPatchOperation>}
     * @memberof PersonalAccessTokensApiPatchPersonalAccessToken
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * PersonalAccessTokensApi - object-oriented interface
 * @export
 * @class PersonalAccessTokensApi
 * @extends {BaseAPI}
 */
export declare class PersonalAccessTokensApi extends BaseAPI {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {PersonalAccessTokensApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensApi
     */
    createPersonalAccessToken(requestParameters: PersonalAccessTokensApiCreatePersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePersonalAccessTokenResponse, any>>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {PersonalAccessTokensApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensApi
     */
    deletePersonalAccessToken(requestParameters: PersonalAccessTokensApiDeletePersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {PersonalAccessTokensApiListPersonalAccessTokensRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensApi
     */
    listPersonalAccessTokens(requestParameters?: PersonalAccessTokensApiListPersonalAccessTokensRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPersonalAccessTokenResponse[], any>>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token. Changing scopes for a Personal Access Token does not impact existing bearer tokens. You will need to create a new bearer token to have the new scopes. Please note that it can take up to 20 minutes for scope changes to be seen on new bearer tokens.
     * @summary Patch Personal Access Token
     * @param {PersonalAccessTokensApiPatchPersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensApi
     */
    patchPersonalAccessToken(requestParameters: PersonalAccessTokensApiPatchPersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPersonalAccessTokenResponse, any>>;
}
/**
 * PublicIdentitiesApi - axios parameter creator
 * @export
 */
export declare const PublicIdentitiesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of public identities
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **alias**: *eq, sw*  **email**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*
     * @param {boolean} [addCoreFilters] If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:   - Should be either correlated or protected.   - Should not be \&quot;spadmin\&quot; or \&quot;cloudadmin\&quot;.   - uid should not be null.   - lastname should not be null.   - email should not be null.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentities: (limit?: number, offset?: number, count?: boolean, filters?: string, addCoreFilters?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PublicIdentitiesApi - functional programming interface
 * @export
 */
export declare const PublicIdentitiesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a list of public identities
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **alias**: *eq, sw*  **email**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*
     * @param {boolean} [addCoreFilters] If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:   - Should be either correlated or protected.   - Should not be \&quot;spadmin\&quot; or \&quot;cloudadmin\&quot;.   - uid should not be null.   - lastname should not be null.   - email should not be null.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentities(limit?: number, offset?: number, count?: boolean, filters?: string, addCoreFilters?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PublicIdentity>>>;
};
/**
 * PublicIdentitiesApi - factory interface
 * @export
 */
export declare const PublicIdentitiesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a list of public identities
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **alias**: *eq, sw*  **email**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*
     * @param {boolean} [addCoreFilters] If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:   - Should be either correlated or protected.   - Should not be \&quot;spadmin\&quot; or \&quot;cloudadmin\&quot;.   - uid should not be null.   - lastname should not be null.   - email should not be null.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentities(limit?: number, offset?: number, count?: boolean, filters?: string, addCoreFilters?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<PublicIdentity>>;
};
/**
 * Request parameters for getPublicIdentities operation in PublicIdentitiesApi.
 * @export
 * @interface PublicIdentitiesApiGetPublicIdentitiesRequest
 */
export interface PublicIdentitiesApiGetPublicIdentitiesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PublicIdentitiesApiGetPublicIdentities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PublicIdentitiesApiGetPublicIdentities
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof PublicIdentitiesApiGetPublicIdentities
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **alias**: *eq, sw*  **email**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*
     * @type {string}
     * @memberof PublicIdentitiesApiGetPublicIdentities
     */
    readonly filters?: string;
    /**
     * If *true*, only get identities which satisfy ALL the following criteria in addition to any criteria specified by *filters*:   - Should be either correlated or protected.   - Should not be \&quot;spadmin\&quot; or \&quot;cloudadmin\&quot;.   - uid should not be null.   - lastname should not be null.   - email should not be null.
     * @type {boolean}
     * @memberof PublicIdentitiesApiGetPublicIdentities
     */
    readonly addCoreFilters?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof PublicIdentitiesApiGetPublicIdentities
     */
    readonly sorters?: string;
}
/**
 * PublicIdentitiesApi - object-oriented interface
 * @export
 * @class PublicIdentitiesApi
 * @extends {BaseAPI}
 */
export declare class PublicIdentitiesApi extends BaseAPI {
    /**
     *
     * @summary Get a list of public identities
     * @param {PublicIdentitiesApiGetPublicIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesApi
     */
    getPublicIdentities(requestParameters?: PublicIdentitiesApiGetPublicIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicIdentity[], any>>;
}
/**
 * PublicIdentitiesConfigApi - axios parameter creator
 * @export
 */
export declare const PublicIdentitiesConfigApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Get the Public Identities Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentityConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Update the Public Identities Configuration
     * @param {PublicIdentityConfig} publicIdentityConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicIdentityConfig: (publicIdentityConfig: PublicIdentityConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PublicIdentitiesConfigApi - functional programming interface
 * @export
 */
export declare const PublicIdentitiesConfigApiFp: (configuration?: Configuration) => {
    /**
     * Returns the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Get the Public Identities Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentityConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicIdentityConfig>>;
    /**
     * Updates the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Update the Public Identities Configuration
     * @param {PublicIdentityConfig} publicIdentityConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicIdentityConfig(publicIdentityConfig: PublicIdentityConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicIdentityConfig>>;
};
/**
 * PublicIdentitiesConfigApi - factory interface
 * @export
 */
export declare const PublicIdentitiesConfigApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Get the Public Identities Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentityConfig(axiosOptions?: any): AxiosPromise<PublicIdentityConfig>;
    /**
     * Updates the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Update the Public Identities Configuration
     * @param {PublicIdentityConfig} publicIdentityConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicIdentityConfig(publicIdentityConfig: PublicIdentityConfig, axiosOptions?: any): AxiosPromise<PublicIdentityConfig>;
};
/**
 * Request parameters for updatePublicIdentityConfig operation in PublicIdentitiesConfigApi.
 * @export
 * @interface PublicIdentitiesConfigApiUpdatePublicIdentityConfigRequest
 */
export interface PublicIdentitiesConfigApiUpdatePublicIdentityConfigRequest {
    /**
     *
     * @type {PublicIdentityConfig}
     * @memberof PublicIdentitiesConfigApiUpdatePublicIdentityConfig
     */
    readonly publicIdentityConfig: PublicIdentityConfig;
}
/**
 * PublicIdentitiesConfigApi - object-oriented interface
 * @export
 * @class PublicIdentitiesConfigApi
 * @extends {BaseAPI}
 */
export declare class PublicIdentitiesConfigApi extends BaseAPI {
    /**
     * Returns the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Get the Public Identities Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesConfigApi
     */
    getPublicIdentityConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicIdentityConfig, any>>;
    /**
     * Updates the publicly visible attributes of an identity available to request approvers for Access Requests and Certification Campaigns. A token with ORG ADMIN authority is required to call this API.
     * @summary Update the Public Identities Configuration
     * @param {PublicIdentitiesConfigApiUpdatePublicIdentityConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesConfigApi
     */
    updatePublicIdentityConfig(requestParameters: PublicIdentitiesConfigApiUpdatePublicIdentityConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicIdentityConfig, any>>;
}
/**
 * ReportsDataExtractionApi - axios parameter creator
 * @export
 */
export declare const ReportsDataExtractionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Cancels a running report.
     * @summary Cancel Report
     * @param {string} id ID of the running Report to cancel
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelReport: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a report in file format.
     * @summary Get Report File
     * @param {string} taskResultId Unique identifier of the task result which handled report
     * @param {'csv' | 'pdf'} fileFormat Output format of the requested report file
     * @param {string} [name] preferred Report file name, by default will be used report name from task result.
     * @param {boolean} [auditable] Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReport: (taskResultId: string, fileFormat: 'csv' | 'pdf', name?: string, auditable?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the report results for a report that was run or is running. Returns empty report result in case there are no active task definitions with used in payload task definition name.
     * @summary Get Report Result
     * @param {string} taskResultId Unique identifier of the task result which handled report
     * @param {boolean} [completed] state of task result to apply ordering when results are fetching from the DB
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReportResult: (taskResultId: string, completed?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Runs a report according to input report details. If non-concurrent task is already running then it returns, otherwise new task creates and returns.
     * @summary Run Report
     * @param {ReportDetails} reportDetails
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startReport: (reportDetails: ReportDetails, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ReportsDataExtractionApi - functional programming interface
 * @export
 */
export declare const ReportsDataExtractionApiFp: (configuration?: Configuration) => {
    /**
     * Cancels a running report.
     * @summary Cancel Report
     * @param {string} id ID of the running Report to cancel
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelReport(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a report in file format.
     * @summary Get Report File
     * @param {string} taskResultId Unique identifier of the task result which handled report
     * @param {'csv' | 'pdf'} fileFormat Output format of the requested report file
     * @param {string} [name] preferred Report file name, by default will be used report name from task result.
     * @param {boolean} [auditable] Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReport(taskResultId: string, fileFormat: 'csv' | 'pdf', name?: string, auditable?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get the report results for a report that was run or is running. Returns empty report result in case there are no active task definitions with used in payload task definition name.
     * @summary Get Report Result
     * @param {string} taskResultId Unique identifier of the task result which handled report
     * @param {boolean} [completed] state of task result to apply ordering when results are fetching from the DB
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReportResult(taskResultId: string, completed?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResults>>;
    /**
     * Runs a report according to input report details. If non-concurrent task is already running then it returns, otherwise new task creates and returns.
     * @summary Run Report
     * @param {ReportDetails} reportDetails
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startReport(reportDetails: ReportDetails, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultDetails>>;
};
/**
 * ReportsDataExtractionApi - factory interface
 * @export
 */
export declare const ReportsDataExtractionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Cancels a running report.
     * @summary Cancel Report
     * @param {string} id ID of the running Report to cancel
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelReport(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Gets a report in file format.
     * @summary Get Report File
     * @param {string} taskResultId Unique identifier of the task result which handled report
     * @param {'csv' | 'pdf'} fileFormat Output format of the requested report file
     * @param {string} [name] preferred Report file name, by default will be used report name from task result.
     * @param {boolean} [auditable] Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReport(taskResultId: string, fileFormat: 'csv' | 'pdf', name?: string, auditable?: boolean, axiosOptions?: any): AxiosPromise<any>;
    /**
     * Get the report results for a report that was run or is running. Returns empty report result in case there are no active task definitions with used in payload task definition name.
     * @summary Get Report Result
     * @param {string} taskResultId Unique identifier of the task result which handled report
     * @param {boolean} [completed] state of task result to apply ordering when results are fetching from the DB
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReportResult(taskResultId: string, completed?: boolean, axiosOptions?: any): AxiosPromise<ReportResults>;
    /**
     * Runs a report according to input report details. If non-concurrent task is already running then it returns, otherwise new task creates and returns.
     * @summary Run Report
     * @param {ReportDetails} reportDetails
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startReport(reportDetails: ReportDetails, axiosOptions?: any): AxiosPromise<TaskResultDetails>;
};
/**
 * Request parameters for cancelReport operation in ReportsDataExtractionApi.
 * @export
 * @interface ReportsDataExtractionApiCancelReportRequest
 */
export interface ReportsDataExtractionApiCancelReportRequest {
    /**
     * ID of the running Report to cancel
     * @type {string}
     * @memberof ReportsDataExtractionApiCancelReport
     */
    readonly id: string;
}
/**
 * Request parameters for getReport operation in ReportsDataExtractionApi.
 * @export
 * @interface ReportsDataExtractionApiGetReportRequest
 */
export interface ReportsDataExtractionApiGetReportRequest {
    /**
     * Unique identifier of the task result which handled report
     * @type {string}
     * @memberof ReportsDataExtractionApiGetReport
     */
    readonly taskResultId: string;
    /**
     * Output format of the requested report file
     * @type {'csv' | 'pdf'}
     * @memberof ReportsDataExtractionApiGetReport
     */
    readonly fileFormat: 'csv' | 'pdf';
    /**
     * preferred Report file name, by default will be used report name from task result.
     * @type {string}
     * @memberof ReportsDataExtractionApiGetReport
     */
    readonly name?: string;
    /**
     * Enables auditing for current report download. Will create an audit event and sent it to the REPORT cloud-audit kafka topic.  Event will be created if there is any result present by requested taskResultId.
     * @type {boolean}
     * @memberof ReportsDataExtractionApiGetReport
     */
    readonly auditable?: boolean;
}
/**
 * Request parameters for getReportResult operation in ReportsDataExtractionApi.
 * @export
 * @interface ReportsDataExtractionApiGetReportResultRequest
 */
export interface ReportsDataExtractionApiGetReportResultRequest {
    /**
     * Unique identifier of the task result which handled report
     * @type {string}
     * @memberof ReportsDataExtractionApiGetReportResult
     */
    readonly taskResultId: string;
    /**
     * state of task result to apply ordering when results are fetching from the DB
     * @type {boolean}
     * @memberof ReportsDataExtractionApiGetReportResult
     */
    readonly completed?: boolean;
}
/**
 * Request parameters for startReport operation in ReportsDataExtractionApi.
 * @export
 * @interface ReportsDataExtractionApiStartReportRequest
 */
export interface ReportsDataExtractionApiStartReportRequest {
    /**
     *
     * @type {ReportDetails}
     * @memberof ReportsDataExtractionApiStartReport
     */
    readonly reportDetails: ReportDetails;
}
/**
 * ReportsDataExtractionApi - object-oriented interface
 * @export
 * @class ReportsDataExtractionApi
 * @extends {BaseAPI}
 */
export declare class ReportsDataExtractionApi extends BaseAPI {
    /**
     * Cancels a running report.
     * @summary Cancel Report
     * @param {ReportsDataExtractionApiCancelReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsDataExtractionApi
     */
    cancelReport(requestParameters: ReportsDataExtractionApiCancelReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a report in file format.
     * @summary Get Report File
     * @param {ReportsDataExtractionApiGetReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsDataExtractionApi
     */
    getReport(requestParameters: ReportsDataExtractionApiGetReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get the report results for a report that was run or is running. Returns empty report result in case there are no active task definitions with used in payload task definition name.
     * @summary Get Report Result
     * @param {ReportsDataExtractionApiGetReportResultRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsDataExtractionApi
     */
    getReportResult(requestParameters: ReportsDataExtractionApiGetReportResultRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResults, any>>;
    /**
     * Runs a report according to input report details. If non-concurrent task is already running then it returns, otherwise new task creates and returns.
     * @summary Run Report
     * @param {ReportsDataExtractionApiStartReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsDataExtractionApi
     */
    startReport(requestParameters: ReportsDataExtractionApiStartReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultDetails, any>>;
}
/**
 * RequestableObjectsApi - axios parameter creator
 * @export
 */
export declare const RequestableObjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @param {Array<RequestableObjectType>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @param {Array<RequestableObjectRequestStatus>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRequestableObjects: (identityId?: string, types?: Array<RequestableObjectType>, term?: string, statuses?: Array<RequestableObjectRequestStatus>, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RequestableObjectsApi - functional programming interface
 * @export
 */
export declare const RequestableObjectsApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @param {Array<RequestableObjectType>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @param {Array<RequestableObjectRequestStatus>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRequestableObjects(identityId?: string, types?: Array<RequestableObjectType>, term?: string, statuses?: Array<RequestableObjectRequestStatus>, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestableObject>>>;
};
/**
 * RequestableObjectsApi - factory interface
 * @export
 */
export declare const RequestableObjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @param {Array<RequestableObjectType>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @param {Array<RequestableObjectRequestStatus>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRequestableObjects(identityId?: string, types?: Array<RequestableObjectType>, term?: string, statuses?: Array<RequestableObjectRequestStatus>, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<RequestableObject>>;
};
/**
 * Request parameters for listRequestableObjects operation in RequestableObjectsApi.
 * @export
 * @interface RequestableObjectsApiListRequestableObjectsRequest
 */
export interface RequestableObjectsApiListRequestableObjectsRequest {
    /**
     * If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @type {string}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly identityId?: string;
    /**
     * Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @type {Array<RequestableObjectType>}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly types?: Array<RequestableObjectType>;
    /**
     * It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @type {string}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly term?: string;
    /**
     * Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @type {Array<RequestableObjectRequestStatus>}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly statuses?: Array<RequestableObjectRequestStatus>;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @type {string}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof RequestableObjectsApiListRequestableObjects
     */
    readonly sorters?: string;
}
/**
 * RequestableObjectsApi - object-oriented interface
 * @export
 * @class RequestableObjectsApi
 * @extends {BaseAPI}
 */
export declare class RequestableObjectsApi extends BaseAPI {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {RequestableObjectsApiListRequestableObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestableObjectsApi
     */
    listRequestableObjects(requestParameters?: RequestableObjectsApiListRequestableObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RequestableObject[], any>>;
}
/**
 * RolesApi - axios parameter creator
 * @export
 */
export declare const RolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {Role} role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRole: (role: Role, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RoleBulkDeleteRequest} roleBulkDeleteRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBulkRoles: (roleBulkDeleteRequest: RoleBulkDeleteRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRole: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List Identities assigned a Role
     * @param {string} id ID of the Role for which the assigned Identities are to be listed
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignedIdentities: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRoles: (forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {string} id ID of the Role to patch
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRole: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export declare const RolesApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {Role} role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRole(role: Role, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RoleBulkDeleteRequest} roleBulkDeleteRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBulkRoles(roleBulkDeleteRequest: RoleBulkDeleteRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultDto>>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRole(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
    /**
     *
     * @summary List Identities assigned a Role
     * @param {string} id ID of the Role for which the assigned Identities are to be listed
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignedIdentities(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleIdentity>>>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Role>>>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {string} id ID of the Role to patch
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRole(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
};
/**
 * RolesApi - factory interface
 * @export
 */
export declare const RolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {Role} role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRole(role: Role, axiosOptions?: any): AxiosPromise<Role>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RoleBulkDeleteRequest} roleBulkDeleteRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBulkRoles(roleBulkDeleteRequest: RoleBulkDeleteRequest, axiosOptions?: any): AxiosPromise<TaskResultDto>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRole(id: string, axiosOptions?: any): AxiosPromise<Role>;
    /**
     *
     * @summary List Identities assigned a Role
     * @param {string} id ID of the Role for which the assigned Identities are to be listed
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignedIdentities(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<RoleIdentity>>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: any): AxiosPromise<Array<Role>>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {string} id ID of the Role to patch
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRole(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<Role>;
};
/**
 * Request parameters for createRole operation in RolesApi.
 * @export
 * @interface RolesApiCreateRoleRequest
 */
export interface RolesApiCreateRoleRequest {
    /**
     *
     * @type {Role}
     * @memberof RolesApiCreateRole
     */
    readonly role: Role;
}
/**
 * Request parameters for deleteBulkRoles operation in RolesApi.
 * @export
 * @interface RolesApiDeleteBulkRolesRequest
 */
export interface RolesApiDeleteBulkRolesRequest {
    /**
     *
     * @type {RoleBulkDeleteRequest}
     * @memberof RolesApiDeleteBulkRoles
     */
    readonly roleBulkDeleteRequest: RoleBulkDeleteRequest;
}
/**
 * Request parameters for deleteRole operation in RolesApi.
 * @export
 * @interface RolesApiDeleteRoleRequest
 */
export interface RolesApiDeleteRoleRequest {
    /**
     * ID of the Role
     * @type {string}
     * @memberof RolesApiDeleteRole
     */
    readonly id: string;
}
/**
 * Request parameters for getRole operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleRequest
 */
export interface RolesApiGetRoleRequest {
    /**
     * ID of the Role
     * @type {string}
     * @memberof RolesApiGetRole
     */
    readonly id: string;
}
/**
 * Request parameters for getRoleAssignedIdentities operation in RolesApi.
 * @export
 * @interface RolesApiGetRoleAssignedIdentitiesRequest
 */
export interface RolesApiGetRoleAssignedIdentitiesRequest {
    /**
     * ID of the Role for which the assigned Identities are to be listed
     * @type {string}
     * @memberof RolesApiGetRoleAssignedIdentities
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesApiGetRoleAssignedIdentities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesApiGetRoleAssignedIdentities
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RolesApiGetRoleAssignedIdentities
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @type {string}
     * @memberof RolesApiGetRoleAssignedIdentities
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @type {string}
     * @memberof RolesApiGetRoleAssignedIdentities
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listRoles operation in RolesApi.
 * @export
 * @interface RolesApiListRolesRequest
 */
export interface RolesApiListRolesRequest {
    /**
     * If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @type {string}
     * @memberof RolesApiListRoles
     */
    readonly forSubadmin?: string;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesApiListRoles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesApiListRoles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RolesApiListRoles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @type {string}
     * @memberof RolesApiListRoles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof RolesApiListRoles
     */
    readonly sorters?: string;
    /**
     * If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @type {string}
     * @memberof RolesApiListRoles
     */
    readonly forSegmentIds?: string;
    /**
     * Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @type {boolean}
     * @memberof RolesApiListRoles
     */
    readonly includeUnsegmented?: boolean;
}
/**
 * Request parameters for patchRole operation in RolesApi.
 * @export
 * @interface RolesApiPatchRoleRequest
 */
export interface RolesApiPatchRoleRequest {
    /**
     * ID of the Role to patch
     * @type {string}
     * @memberof RolesApiPatchRole
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperation>}
     * @memberof RolesApiPatchRole
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export declare class RolesApi extends BaseAPI {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    createRole(requestParameters: RolesApiCreateRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RolesApiDeleteBulkRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteBulkRoles(requestParameters: RolesApiDeleteBulkRolesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultDto, any>>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRole(requestParameters: RolesApiDeleteRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRole(requestParameters: RolesApiGetRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     *
     * @summary List Identities assigned a Role
     * @param {RolesApiGetRoleAssignedIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRoleAssignedIdentities(requestParameters: RolesApiGetRoleAssignedIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleIdentity[], any>>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {RolesApiListRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    listRoles(requestParameters?: RolesApiListRolesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Role[], any>>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {RolesApiPatchRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    patchRole(requestParameters: RolesApiPatchRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
}
/**
 * SODPoliciesApi - axios parameter creator
 * @export
 */
export declare const SODPoliciesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SodPolicy} sodPolicy
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSodPolicy: (sodPolicy: SodPolicy, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {string} id The ID of the SOD Policy to delete.
     * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.  Soft delete marks the policy as deleted and just save it with this status. It could be fully deleted or recovered further.  Hard delete vise versa permanently delete SOD request during this call.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSodPolicy: (id: string, logical?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes schedule for a specified SOD policy by ID.
     * @summary Delete SOD policy schedule
     * @param {string} id The ID of the SOD policy the schedule must be deleted for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSodPolicySchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This allows to download a specified named violation report for a given report reference.
     * @summary Download custom violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {string} fileName Custom Name for the  file.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCustomViolationReport: (reportResultId: string, fileName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This allows to download a violation report for a given report reference.
     * @summary Download violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultViolationReport: (reportResultId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets the status for a violation report for all policy run.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodAllReportRunStatus: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {string} id The ID of the SOD Policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule.
     * @summary Get SOD policy schedule
     * @param {string} id The ID of the SOD policy schedule to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodPolicySchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get violation report run status
     * @param {string} reportResultId The ID of the report reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodViolationReportRunStatus: (reportResultId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get SOD violation report status
     * @param {string} id The ID of the violation report to retrieve status for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodViolationReportStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSodPolicies: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch SOD policy by ID
     * @param {string} id The ID of the SOD policy being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSodPolicy: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates schedule for a specified SOD policy.
     * @summary Update SOD Policy schedule
     * @param {string} id The ID of the SOD policy to update its schedule.
     * @param {SodPolicySchedule} sodPolicySchedule
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPolicySchedule: (id: string, sodPolicySchedule: SodPolicySchedule, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {string} id The ID of the SOD policy to update.
     * @param {SodPolicy} sodPolicy
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSodPolicy: (id: string, sodPolicy: SodPolicy, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Runs the scheduled report for the policy retrieved by passed policy ID.  The report schedule is fetched from the policy retrieved by ID.
     * @summary Evaluate one policy by ID
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startEvaluateSodPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided.
     * @summary Runs all policies for org
     * @param {MultiPolicyRequest} [multiPolicyRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startSodAllPoliciesForOrg: (multiPolicyRequest?: MultiPolicyRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message.
     * @summary Runs SOD policy violation report
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startSodPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SODPoliciesApi - functional programming interface
 * @export
 */
export declare const SODPoliciesApiFp: (configuration?: Configuration) => {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SodPolicy} sodPolicy
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSodPolicy(sodPolicy: SodPolicy, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicy>>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {string} id The ID of the SOD Policy to delete.
     * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.  Soft delete marks the policy as deleted and just save it with this status. It could be fully deleted or recovered further.  Hard delete vise versa permanently delete SOD request during this call.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSodPolicy(id: string, logical?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This deletes schedule for a specified SOD policy by ID.
     * @summary Delete SOD policy schedule
     * @param {string} id The ID of the SOD policy the schedule must be deleted for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSodPolicySchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This allows to download a specified named violation report for a given report reference.
     * @summary Download custom violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {string} fileName Custom Name for the  file.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCustomViolationReport(reportResultId: string, fileName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This allows to download a violation report for a given report reference.
     * @summary Download violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultViolationReport(reportResultId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This endpoint gets the status for a violation report for all policy run.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodAllReportRunStatus(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReference>>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {string} id The ID of the SOD Policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicy>>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule.
     * @summary Get SOD policy schedule
     * @param {string} id The ID of the SOD policy schedule to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodPolicySchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicySchedule>>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get violation report run status
     * @param {string} reportResultId The ID of the report reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodViolationReportRunStatus(reportResultId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReference>>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get SOD violation report status
     * @param {string} id The ID of the violation report to retrieve status for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodViolationReportStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReference>>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSodPolicies(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SodPolicy>>>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch SOD policy by ID
     * @param {string} id The ID of the SOD policy being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSodPolicy(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicy>>;
    /**
     * This updates schedule for a specified SOD policy.
     * @summary Update SOD Policy schedule
     * @param {string} id The ID of the SOD policy to update its schedule.
     * @param {SodPolicySchedule} sodPolicySchedule
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPolicySchedule(id: string, sodPolicySchedule: SodPolicySchedule, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicySchedule>>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {string} id The ID of the SOD policy to update.
     * @param {SodPolicy} sodPolicy
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSodPolicy(id: string, sodPolicy: SodPolicy, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicy>>;
    /**
     * Runs the scheduled report for the policy retrieved by passed policy ID.  The report schedule is fetched from the policy retrieved by ID.
     * @summary Evaluate one policy by ID
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startEvaluateSodPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReference>>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided.
     * @summary Runs all policies for org
     * @param {MultiPolicyRequest} [multiPolicyRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startSodAllPoliciesForOrg(multiPolicyRequest?: MultiPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReference>>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message.
     * @summary Runs SOD policy violation report
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startSodPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReference>>;
};
/**
 * SODPoliciesApi - factory interface
 * @export
 */
export declare const SODPoliciesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SodPolicy} sodPolicy
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSodPolicy(sodPolicy: SodPolicy, axiosOptions?: any): AxiosPromise<SodPolicy>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {string} id The ID of the SOD Policy to delete.
     * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.  Soft delete marks the policy as deleted and just save it with this status. It could be fully deleted or recovered further.  Hard delete vise versa permanently delete SOD request during this call.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSodPolicy(id: string, logical?: boolean, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This deletes schedule for a specified SOD policy by ID.
     * @summary Delete SOD policy schedule
     * @param {string} id The ID of the SOD policy the schedule must be deleted for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSodPolicySchedule(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This allows to download a specified named violation report for a given report reference.
     * @summary Download custom violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {string} fileName Custom Name for the  file.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCustomViolationReport(reportResultId: string, fileName: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * This allows to download a violation report for a given report reference.
     * @summary Download violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultViolationReport(reportResultId: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * This endpoint gets the status for a violation report for all policy run.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodAllReportRunStatus(axiosOptions?: any): AxiosPromise<ReportResultReference>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {string} id The ID of the SOD Policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodPolicy(id: string, axiosOptions?: any): AxiosPromise<SodPolicy>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule.
     * @summary Get SOD policy schedule
     * @param {string} id The ID of the SOD policy schedule to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodPolicySchedule(id: string, axiosOptions?: any): AxiosPromise<SodPolicySchedule>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get violation report run status
     * @param {string} reportResultId The ID of the report reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodViolationReportRunStatus(reportResultId: string, axiosOptions?: any): AxiosPromise<ReportResultReference>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get SOD violation report status
     * @param {string} id The ID of the violation report to retrieve status for.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSodViolationReportStatus(id: string, axiosOptions?: any): AxiosPromise<ReportResultReference>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSodPolicies(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<SodPolicy>>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch SOD policy by ID
     * @param {string} id The ID of the SOD policy being modified.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSodPolicy(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<SodPolicy>;
    /**
     * This updates schedule for a specified SOD policy.
     * @summary Update SOD Policy schedule
     * @param {string} id The ID of the SOD policy to update its schedule.
     * @param {SodPolicySchedule} sodPolicySchedule
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPolicySchedule(id: string, sodPolicySchedule: SodPolicySchedule, axiosOptions?: any): AxiosPromise<SodPolicySchedule>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {string} id The ID of the SOD policy to update.
     * @param {SodPolicy} sodPolicy
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSodPolicy(id: string, sodPolicy: SodPolicy, axiosOptions?: any): AxiosPromise<SodPolicy>;
    /**
     * Runs the scheduled report for the policy retrieved by passed policy ID.  The report schedule is fetched from the policy retrieved by ID.
     * @summary Evaluate one policy by ID
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startEvaluateSodPolicy(id: string, axiosOptions?: any): AxiosPromise<ReportResultReference>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided.
     * @summary Runs all policies for org
     * @param {MultiPolicyRequest} [multiPolicyRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startSodAllPoliciesForOrg(multiPolicyRequest?: MultiPolicyRequest, axiosOptions?: any): AxiosPromise<ReportResultReference>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message.
     * @summary Runs SOD policy violation report
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startSodPolicy(id: string, axiosOptions?: any): AxiosPromise<ReportResultReference>;
};
/**
 * Request parameters for createSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiCreateSodPolicyRequest
 */
export interface SODPoliciesApiCreateSodPolicyRequest {
    /**
     *
     * @type {SodPolicy}
     * @memberof SODPoliciesApiCreateSodPolicy
     */
    readonly sodPolicy: SodPolicy;
}
/**
 * Request parameters for deleteSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiDeleteSodPolicyRequest
 */
export interface SODPoliciesApiDeleteSodPolicyRequest {
    /**
     * The ID of the SOD Policy to delete.
     * @type {string}
     * @memberof SODPoliciesApiDeleteSodPolicy
     */
    readonly id: string;
    /**
     * Indicates whether this is a soft delete (logical true) or a hard delete.  Soft delete marks the policy as deleted and just save it with this status. It could be fully deleted or recovered further.  Hard delete vise versa permanently delete SOD request during this call.
     * @type {boolean}
     * @memberof SODPoliciesApiDeleteSodPolicy
     */
    readonly logical?: boolean;
}
/**
 * Request parameters for deleteSodPolicySchedule operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiDeleteSodPolicyScheduleRequest
 */
export interface SODPoliciesApiDeleteSodPolicyScheduleRequest {
    /**
     * The ID of the SOD policy the schedule must be deleted for.
     * @type {string}
     * @memberof SODPoliciesApiDeleteSodPolicySchedule
     */
    readonly id: string;
}
/**
 * Request parameters for getCustomViolationReport operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiGetCustomViolationReportRequest
 */
export interface SODPoliciesApiGetCustomViolationReportRequest {
    /**
     * The ID of the report reference to download.
     * @type {string}
     * @memberof SODPoliciesApiGetCustomViolationReport
     */
    readonly reportResultId: string;
    /**
     * Custom Name for the  file.
     * @type {string}
     * @memberof SODPoliciesApiGetCustomViolationReport
     */
    readonly fileName: string;
}
/**
 * Request parameters for getDefaultViolationReport operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiGetDefaultViolationReportRequest
 */
export interface SODPoliciesApiGetDefaultViolationReportRequest {
    /**
     * The ID of the report reference to download.
     * @type {string}
     * @memberof SODPoliciesApiGetDefaultViolationReport
     */
    readonly reportResultId: string;
}
/**
 * Request parameters for getSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiGetSodPolicyRequest
 */
export interface SODPoliciesApiGetSodPolicyRequest {
    /**
     * The ID of the SOD Policy to retrieve.
     * @type {string}
     * @memberof SODPoliciesApiGetSodPolicy
     */
    readonly id: string;
}
/**
 * Request parameters for getSodPolicySchedule operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiGetSodPolicyScheduleRequest
 */
export interface SODPoliciesApiGetSodPolicyScheduleRequest {
    /**
     * The ID of the SOD policy schedule to retrieve.
     * @type {string}
     * @memberof SODPoliciesApiGetSodPolicySchedule
     */
    readonly id: string;
}
/**
 * Request parameters for getSodViolationReportRunStatus operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiGetSodViolationReportRunStatusRequest
 */
export interface SODPoliciesApiGetSodViolationReportRunStatusRequest {
    /**
     * The ID of the report reference to retrieve.
     * @type {string}
     * @memberof SODPoliciesApiGetSodViolationReportRunStatus
     */
    readonly reportResultId: string;
}
/**
 * Request parameters for getSodViolationReportStatus operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiGetSodViolationReportStatusRequest
 */
export interface SODPoliciesApiGetSodViolationReportStatusRequest {
    /**
     * The ID of the violation report to retrieve status for.
     * @type {string}
     * @memberof SODPoliciesApiGetSodViolationReportStatus
     */
    readonly id: string;
}
/**
 * Request parameters for listSodPolicies operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiListSodPoliciesRequest
 */
export interface SODPoliciesApiListSodPoliciesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SODPoliciesApiListSodPolicies
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SODPoliciesApiListSodPolicies
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SODPoliciesApiListSodPolicies
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @type {string}
     * @memberof SODPoliciesApiListSodPolicies
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @type {string}
     * @memberof SODPoliciesApiListSodPolicies
     */
    readonly sorters?: string;
}
/**
 * Request parameters for patchSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiPatchSodPolicyRequest
 */
export interface SODPoliciesApiPatchSodPolicyRequest {
    /**
     * The ID of the SOD policy being modified.
     * @type {string}
     * @memberof SODPoliciesApiPatchSodPolicy
     */
    readonly id: string;
    /**
     * A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @type {Array<JsonPatchOperation>}
     * @memberof SODPoliciesApiPatchSodPolicy
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for putPolicySchedule operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiPutPolicyScheduleRequest
 */
export interface SODPoliciesApiPutPolicyScheduleRequest {
    /**
     * The ID of the SOD policy to update its schedule.
     * @type {string}
     * @memberof SODPoliciesApiPutPolicySchedule
     */
    readonly id: string;
    /**
     *
     * @type {SodPolicySchedule}
     * @memberof SODPoliciesApiPutPolicySchedule
     */
    readonly sodPolicySchedule: SodPolicySchedule;
}
/**
 * Request parameters for putSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiPutSodPolicyRequest
 */
export interface SODPoliciesApiPutSodPolicyRequest {
    /**
     * The ID of the SOD policy to update.
     * @type {string}
     * @memberof SODPoliciesApiPutSodPolicy
     */
    readonly id: string;
    /**
     *
     * @type {SodPolicy}
     * @memberof SODPoliciesApiPutSodPolicy
     */
    readonly sodPolicy: SodPolicy;
}
/**
 * Request parameters for startEvaluateSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiStartEvaluateSodPolicyRequest
 */
export interface SODPoliciesApiStartEvaluateSodPolicyRequest {
    /**
     * The SOD policy ID to run.
     * @type {string}
     * @memberof SODPoliciesApiStartEvaluateSodPolicy
     */
    readonly id: string;
}
/**
 * Request parameters for startSodAllPoliciesForOrg operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiStartSodAllPoliciesForOrgRequest
 */
export interface SODPoliciesApiStartSodAllPoliciesForOrgRequest {
    /**
     *
     * @type {MultiPolicyRequest}
     * @memberof SODPoliciesApiStartSodAllPoliciesForOrg
     */
    readonly multiPolicyRequest?: MultiPolicyRequest;
}
/**
 * Request parameters for startSodPolicy operation in SODPoliciesApi.
 * @export
 * @interface SODPoliciesApiStartSodPolicyRequest
 */
export interface SODPoliciesApiStartSodPolicyRequest {
    /**
     * The SOD policy ID to run.
     * @type {string}
     * @memberof SODPoliciesApiStartSodPolicy
     */
    readonly id: string;
}
/**
 * SODPoliciesApi - object-oriented interface
 * @export
 * @class SODPoliciesApi
 * @extends {BaseAPI}
 */
export declare class SODPoliciesApi extends BaseAPI {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SODPoliciesApiCreateSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    createSodPolicy(requestParameters: SODPoliciesApiCreateSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicy, any>>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {SODPoliciesApiDeleteSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    deleteSodPolicy(requestParameters: SODPoliciesApiDeleteSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This deletes schedule for a specified SOD policy by ID.
     * @summary Delete SOD policy schedule
     * @param {SODPoliciesApiDeleteSodPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    deleteSodPolicySchedule(requestParameters: SODPoliciesApiDeleteSodPolicyScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This allows to download a specified named violation report for a given report reference.
     * @summary Download custom violation report
     * @param {SODPoliciesApiGetCustomViolationReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getCustomViolationReport(requestParameters: SODPoliciesApiGetCustomViolationReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This allows to download a violation report for a given report reference.
     * @summary Download violation report
     * @param {SODPoliciesApiGetDefaultViolationReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getDefaultViolationReport(requestParameters: SODPoliciesApiGetDefaultViolationReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This endpoint gets the status for a violation report for all policy run.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getSodAllReportRunStatus(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReference, any>>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {SODPoliciesApiGetSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getSodPolicy(requestParameters: SODPoliciesApiGetSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicy, any>>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule.
     * @summary Get SOD policy schedule
     * @param {SODPoliciesApiGetSodPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getSodPolicySchedule(requestParameters: SODPoliciesApiGetSodPolicyScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicySchedule, any>>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get violation report run status
     * @param {SODPoliciesApiGetSodViolationReportRunStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getSodViolationReportRunStatus(requestParameters: SODPoliciesApiGetSodViolationReportRunStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReference, any>>;
    /**
     * This gets the status for a violation report run task that has already been invoked.
     * @summary Get SOD violation report status
     * @param {SODPoliciesApiGetSodViolationReportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    getSodViolationReportStatus(requestParameters: SODPoliciesApiGetSodViolationReportStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReference, any>>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {SODPoliciesApiListSodPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    listSodPolicies(requestParameters?: SODPoliciesApiListSodPoliciesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicy[], any>>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch SOD policy by ID
     * @param {SODPoliciesApiPatchSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    patchSodPolicy(requestParameters: SODPoliciesApiPatchSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicy, any>>;
    /**
     * This updates schedule for a specified SOD policy.
     * @summary Update SOD Policy schedule
     * @param {SODPoliciesApiPutPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    putPolicySchedule(requestParameters: SODPoliciesApiPutPolicyScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicySchedule, any>>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {SODPoliciesApiPutSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    putSodPolicy(requestParameters: SODPoliciesApiPutSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicy, any>>;
    /**
     * Runs the scheduled report for the policy retrieved by passed policy ID.  The report schedule is fetched from the policy retrieved by ID.
     * @summary Evaluate one policy by ID
     * @param {SODPoliciesApiStartEvaluateSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    startEvaluateSodPolicy(requestParameters: SODPoliciesApiStartEvaluateSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReference, any>>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided.
     * @summary Runs all policies for org
     * @param {SODPoliciesApiStartSodAllPoliciesForOrgRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    startSodAllPoliciesForOrg(requestParameters?: SODPoliciesApiStartSodAllPoliciesForOrgRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReference, any>>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message.
     * @summary Runs SOD policy violation report
     * @param {SODPoliciesApiStartSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODPoliciesApi
     */
    startSodPolicy(requestParameters: SODPoliciesApiStartSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReference, any>>;
}
/**
 * SODViolationsApi - axios parameter creator
 * @export
 */
export declare const SODViolationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {IdentityWithNewAccess} identityWithNewAccess
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startPredictSodViolations: (identityWithNewAccess: IdentityWithNewAccess, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API initiates a SOD policy verification asynchronously.  A token with ORG_ADMIN authority is required to call this API.
     * @summary Check SOD violations
     * @param {IdentityWithNewAccess1} identityWithNewAccess1
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startViolationCheck: (identityWithNewAccess1: IdentityWithNewAccess1, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SODViolationsApi - functional programming interface
 * @export
 */
export declare const SODViolationsApiFp: (configuration?: Configuration) => {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {IdentityWithNewAccess} identityWithNewAccess
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startPredictSodViolations(identityWithNewAccess: IdentityWithNewAccess, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViolationPrediction>>;
    /**
     * This API initiates a SOD policy verification asynchronously.  A token with ORG_ADMIN authority is required to call this API.
     * @summary Check SOD violations
     * @param {IdentityWithNewAccess1} identityWithNewAccess1
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startViolationCheck(identityWithNewAccess1: IdentityWithNewAccess1, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodViolationCheck>>;
};
/**
 * SODViolationsApi - factory interface
 * @export
 */
export declare const SODViolationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {IdentityWithNewAccess} identityWithNewAccess
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startPredictSodViolations(identityWithNewAccess: IdentityWithNewAccess, axiosOptions?: any): AxiosPromise<ViolationPrediction>;
    /**
     * This API initiates a SOD policy verification asynchronously.  A token with ORG_ADMIN authority is required to call this API.
     * @summary Check SOD violations
     * @param {IdentityWithNewAccess1} identityWithNewAccess1
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startViolationCheck(identityWithNewAccess1: IdentityWithNewAccess1, axiosOptions?: any): AxiosPromise<SodViolationCheck>;
};
/**
 * Request parameters for startPredictSodViolations operation in SODViolationsApi.
 * @export
 * @interface SODViolationsApiStartPredictSodViolationsRequest
 */
export interface SODViolationsApiStartPredictSodViolationsRequest {
    /**
     *
     * @type {IdentityWithNewAccess}
     * @memberof SODViolationsApiStartPredictSodViolations
     */
    readonly identityWithNewAccess: IdentityWithNewAccess;
}
/**
 * Request parameters for startViolationCheck operation in SODViolationsApi.
 * @export
 * @interface SODViolationsApiStartViolationCheckRequest
 */
export interface SODViolationsApiStartViolationCheckRequest {
    /**
     *
     * @type {IdentityWithNewAccess1}
     * @memberof SODViolationsApiStartViolationCheck
     */
    readonly identityWithNewAccess1: IdentityWithNewAccess1;
}
/**
 * SODViolationsApi - object-oriented interface
 * @export
 * @class SODViolationsApi
 * @extends {BaseAPI}
 */
export declare class SODViolationsApi extends BaseAPI {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {SODViolationsApiStartPredictSodViolationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODViolationsApi
     */
    startPredictSodViolations(requestParameters: SODViolationsApiStartPredictSodViolationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ViolationPrediction, any>>;
    /**
     * This API initiates a SOD policy verification asynchronously.  A token with ORG_ADMIN authority is required to call this API.
     * @summary Check SOD violations
     * @param {SODViolationsApiStartViolationCheckRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SODViolationsApi
     */
    startViolationCheck(requestParameters: SODViolationsApiStartViolationCheckRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodViolationCheck, any>>;
}
/**
 * SavedSearchApi - axios parameter creator
 * @export
 */
export declare const SavedSearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new saved search.
     * @summary Create a saved search
     * @param {CreateSavedSearchRequest} createSavedSearchRequest The saved search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSavedSearch: (createSavedSearchRequest: CreateSavedSearchRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the specified saved search.
     * @summary Delete document by ID
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearch: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Executes the specified saved search.
     * @summary Execute a saved search by ID
     * @param {string} id ID of the requested document.
     * @param {SearchArguments} searchArguments When saved search execution is triggered by a scheduled search, *scheduleId* will specify the ID of the triggering scheduled search.  If *scheduleId* is not specified (when execution is triggered by a UI test), the *owner* and *recipients* arguments must be provided.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    executeSavedSearch: (id: string, searchArguments: SearchArguments, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the specified saved search.
     * @summary Return saved search by ID
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearch: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of saved searches.
     * @summary A list of Saved Searches
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSavedSearches: (offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing saved search.   >**NOTE: You cannot update the `owner` of the saved search.**
     * @summary Updates an existing saved search
     * @param {string} id ID of the requested document.
     * @param {SavedSearch} savedSearch The saved search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSavedSearch: (id: string, savedSearch: SavedSearch, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SavedSearchApi - functional programming interface
 * @export
 */
export declare const SavedSearchApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new saved search.
     * @summary Create a saved search
     * @param {CreateSavedSearchRequest} createSavedSearchRequest The saved search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSavedSearch(createSavedSearchRequest: CreateSavedSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedSearch>>;
    /**
     * Deletes the specified saved search.
     * @summary Delete document by ID
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearch(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Executes the specified saved search.
     * @summary Execute a saved search by ID
     * @param {string} id ID of the requested document.
     * @param {SearchArguments} searchArguments When saved search execution is triggered by a scheduled search, *scheduleId* will specify the ID of the triggering scheduled search.  If *scheduleId* is not specified (when execution is triggered by a UI test), the *owner* and *recipients* arguments must be provided.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    executeSavedSearch(id: string, searchArguments: SearchArguments, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the specified saved search.
     * @summary Return saved search by ID
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearch(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedSearch>>;
    /**
     * Returns a list of saved searches.
     * @summary A list of Saved Searches
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSavedSearches(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SavedSearch>>>;
    /**
     * Updates an existing saved search.   >**NOTE: You cannot update the `owner` of the saved search.**
     * @summary Updates an existing saved search
     * @param {string} id ID of the requested document.
     * @param {SavedSearch} savedSearch The saved search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSavedSearch(id: string, savedSearch: SavedSearch, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedSearch>>;
};
/**
 * SavedSearchApi - factory interface
 * @export
 */
export declare const SavedSearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new saved search.
     * @summary Create a saved search
     * @param {CreateSavedSearchRequest} createSavedSearchRequest The saved search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSavedSearch(createSavedSearchRequest: CreateSavedSearchRequest, axiosOptions?: any): AxiosPromise<SavedSearch>;
    /**
     * Deletes the specified saved search.
     * @summary Delete document by ID
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearch(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Executes the specified saved search.
     * @summary Execute a saved search by ID
     * @param {string} id ID of the requested document.
     * @param {SearchArguments} searchArguments When saved search execution is triggered by a scheduled search, *scheduleId* will specify the ID of the triggering scheduled search.  If *scheduleId* is not specified (when execution is triggered by a UI test), the *owner* and *recipients* arguments must be provided.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    executeSavedSearch(id: string, searchArguments: SearchArguments, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Returns the specified saved search.
     * @summary Return saved search by ID
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearch(id: string, axiosOptions?: any): AxiosPromise<SavedSearch>;
    /**
     * Returns a list of saved searches.
     * @summary A list of Saved Searches
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSavedSearches(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<SavedSearch>>;
    /**
     * Updates an existing saved search.   >**NOTE: You cannot update the `owner` of the saved search.**
     * @summary Updates an existing saved search
     * @param {string} id ID of the requested document.
     * @param {SavedSearch} savedSearch The saved search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSavedSearch(id: string, savedSearch: SavedSearch, axiosOptions?: any): AxiosPromise<SavedSearch>;
};
/**
 * Request parameters for createSavedSearch operation in SavedSearchApi.
 * @export
 * @interface SavedSearchApiCreateSavedSearchRequest
 */
export interface SavedSearchApiCreateSavedSearchRequest {
    /**
     * The saved search to persist.
     * @type {CreateSavedSearchRequest}
     * @memberof SavedSearchApiCreateSavedSearch
     */
    readonly createSavedSearchRequest: CreateSavedSearchRequest;
}
/**
 * Request parameters for deleteSavedSearch operation in SavedSearchApi.
 * @export
 * @interface SavedSearchApiDeleteSavedSearchRequest
 */
export interface SavedSearchApiDeleteSavedSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof SavedSearchApiDeleteSavedSearch
     */
    readonly id: string;
}
/**
 * Request parameters for executeSavedSearch operation in SavedSearchApi.
 * @export
 * @interface SavedSearchApiExecuteSavedSearchRequest
 */
export interface SavedSearchApiExecuteSavedSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof SavedSearchApiExecuteSavedSearch
     */
    readonly id: string;
    /**
     * When saved search execution is triggered by a scheduled search, *scheduleId* will specify the ID of the triggering scheduled search.  If *scheduleId* is not specified (when execution is triggered by a UI test), the *owner* and *recipients* arguments must be provided.
     * @type {SearchArguments}
     * @memberof SavedSearchApiExecuteSavedSearch
     */
    readonly searchArguments: SearchArguments;
}
/**
 * Request parameters for getSavedSearch operation in SavedSearchApi.
 * @export
 * @interface SavedSearchApiGetSavedSearchRequest
 */
export interface SavedSearchApiGetSavedSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof SavedSearchApiGetSavedSearch
     */
    readonly id: string;
}
/**
 * Request parameters for listSavedSearches operation in SavedSearchApi.
 * @export
 * @interface SavedSearchApiListSavedSearchesRequest
 */
export interface SavedSearchApiListSavedSearchesRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SavedSearchApiListSavedSearches
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SavedSearchApiListSavedSearches
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SavedSearchApiListSavedSearches
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*
     * @type {string}
     * @memberof SavedSearchApiListSavedSearches
     */
    readonly filters?: string;
}
/**
 * Request parameters for putSavedSearch operation in SavedSearchApi.
 * @export
 * @interface SavedSearchApiPutSavedSearchRequest
 */
export interface SavedSearchApiPutSavedSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof SavedSearchApiPutSavedSearch
     */
    readonly id: string;
    /**
     * The saved search to persist.
     * @type {SavedSearch}
     * @memberof SavedSearchApiPutSavedSearch
     */
    readonly savedSearch: SavedSearch;
}
/**
 * SavedSearchApi - object-oriented interface
 * @export
 * @class SavedSearchApi
 * @extends {BaseAPI}
 */
export declare class SavedSearchApi extends BaseAPI {
    /**
     * Creates a new saved search.
     * @summary Create a saved search
     * @param {SavedSearchApiCreateSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedSearchApi
     */
    createSavedSearch(requestParameters: SavedSearchApiCreateSavedSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SavedSearch, any>>;
    /**
     * Deletes the specified saved search.
     * @summary Delete document by ID
     * @param {SavedSearchApiDeleteSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedSearchApi
     */
    deleteSavedSearch(requestParameters: SavedSearchApiDeleteSavedSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Executes the specified saved search.
     * @summary Execute a saved search by ID
     * @param {SavedSearchApiExecuteSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedSearchApi
     */
    executeSavedSearch(requestParameters: SavedSearchApiExecuteSavedSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the specified saved search.
     * @summary Return saved search by ID
     * @param {SavedSearchApiGetSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedSearchApi
     */
    getSavedSearch(requestParameters: SavedSearchApiGetSavedSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SavedSearch, any>>;
    /**
     * Returns a list of saved searches.
     * @summary A list of Saved Searches
     * @param {SavedSearchApiListSavedSearchesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedSearchApi
     */
    listSavedSearches(requestParameters?: SavedSearchApiListSavedSearchesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SavedSearch[], any>>;
    /**
     * Updates an existing saved search.   >**NOTE: You cannot update the `owner` of the saved search.**
     * @summary Updates an existing saved search
     * @param {SavedSearchApiPutSavedSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedSearchApi
     */
    putSavedSearch(requestParameters: SavedSearchApiPutSavedSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SavedSearch, any>>;
}
/**
 * ScheduledSearchApi - axios parameter creator
 * @export
 */
export declare const ScheduledSearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new scheduled search.
     * @summary Create a new scheduled search
     * @param {CreateScheduledSearchRequest} createScheduledSearchRequest The scheduled search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createScheduledSearch: (createScheduledSearchRequest: CreateScheduledSearchRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the specified scheduled search.
     * @summary Delete a Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduledSearch: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the specified scheduled search.
     * @summary Get a Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getScheduledSearch: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of scheduled searches.
     * @summary List scheduled searches
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*  **savedSearchId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listScheduledSearch: (offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unsubscribes a recipient from the specified scheduled search.
     * @summary Unsubscribe a recipient from Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {TypedReference} typedReference The recipient to be removed from the scheduled search.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unsubscribeScheduledSearch: (id: string, typedReference: TypedReference, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing scheduled search.
     * @summary Update an existing Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {ScheduledSearch} scheduledSearch The scheduled search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduledSearch: (id: string, scheduledSearch: ScheduledSearch, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ScheduledSearchApi - functional programming interface
 * @export
 */
export declare const ScheduledSearchApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new scheduled search.
     * @summary Create a new scheduled search
     * @param {CreateScheduledSearchRequest} createScheduledSearchRequest The scheduled search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createScheduledSearch(createScheduledSearchRequest: CreateScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledSearch>>;
    /**
     * Deletes the specified scheduled search.
     * @summary Delete a Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduledSearch(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the specified scheduled search.
     * @summary Get a Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getScheduledSearch(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledSearch>>;
    /**
     * Returns a list of scheduled searches.
     * @summary List scheduled searches
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*  **savedSearchId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listScheduledSearch(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduledSearch>>>;
    /**
     * Unsubscribes a recipient from the specified scheduled search.
     * @summary Unsubscribe a recipient from Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {TypedReference} typedReference The recipient to be removed from the scheduled search.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unsubscribeScheduledSearch(id: string, typedReference: TypedReference, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Updates an existing scheduled search.
     * @summary Update an existing Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {ScheduledSearch} scheduledSearch The scheduled search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduledSearch(id: string, scheduledSearch: ScheduledSearch, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduledSearch>>;
};
/**
 * ScheduledSearchApi - factory interface
 * @export
 */
export declare const ScheduledSearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new scheduled search.
     * @summary Create a new scheduled search
     * @param {CreateScheduledSearchRequest} createScheduledSearchRequest The scheduled search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createScheduledSearch(createScheduledSearchRequest: CreateScheduledSearchRequest, axiosOptions?: any): AxiosPromise<ScheduledSearch>;
    /**
     * Deletes the specified scheduled search.
     * @summary Delete a Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteScheduledSearch(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Returns the specified scheduled search.
     * @summary Get a Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getScheduledSearch(id: string, axiosOptions?: any): AxiosPromise<ScheduledSearch>;
    /**
     * Returns a list of scheduled searches.
     * @summary List scheduled searches
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*  **savedSearchId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listScheduledSearch(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<ScheduledSearch>>;
    /**
     * Unsubscribes a recipient from the specified scheduled search.
     * @summary Unsubscribe a recipient from Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {TypedReference} typedReference The recipient to be removed from the scheduled search.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unsubscribeScheduledSearch(id: string, typedReference: TypedReference, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Updates an existing scheduled search.
     * @summary Update an existing Scheduled Search
     * @param {string} id ID of the requested document.
     * @param {ScheduledSearch} scheduledSearch The scheduled search to persist.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateScheduledSearch(id: string, scheduledSearch: ScheduledSearch, axiosOptions?: any): AxiosPromise<ScheduledSearch>;
};
/**
 * Request parameters for createScheduledSearch operation in ScheduledSearchApi.
 * @export
 * @interface ScheduledSearchApiCreateScheduledSearchRequest
 */
export interface ScheduledSearchApiCreateScheduledSearchRequest {
    /**
     * The scheduled search to persist.
     * @type {CreateScheduledSearchRequest}
     * @memberof ScheduledSearchApiCreateScheduledSearch
     */
    readonly createScheduledSearchRequest: CreateScheduledSearchRequest;
}
/**
 * Request parameters for deleteScheduledSearch operation in ScheduledSearchApi.
 * @export
 * @interface ScheduledSearchApiDeleteScheduledSearchRequest
 */
export interface ScheduledSearchApiDeleteScheduledSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof ScheduledSearchApiDeleteScheduledSearch
     */
    readonly id: string;
}
/**
 * Request parameters for getScheduledSearch operation in ScheduledSearchApi.
 * @export
 * @interface ScheduledSearchApiGetScheduledSearchRequest
 */
export interface ScheduledSearchApiGetScheduledSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof ScheduledSearchApiGetScheduledSearch
     */
    readonly id: string;
}
/**
 * Request parameters for listScheduledSearch operation in ScheduledSearchApi.
 * @export
 * @interface ScheduledSearchApiListScheduledSearchRequest
 */
export interface ScheduledSearchApiListScheduledSearchRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ScheduledSearchApiListScheduledSearch
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ScheduledSearchApiListScheduledSearch
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ScheduledSearchApiListScheduledSearch
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **owner.id**: *eq*  **savedSearchId**: *eq*
     * @type {string}
     * @memberof ScheduledSearchApiListScheduledSearch
     */
    readonly filters?: string;
}
/**
 * Request parameters for unsubscribeScheduledSearch operation in ScheduledSearchApi.
 * @export
 * @interface ScheduledSearchApiUnsubscribeScheduledSearchRequest
 */
export interface ScheduledSearchApiUnsubscribeScheduledSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof ScheduledSearchApiUnsubscribeScheduledSearch
     */
    readonly id: string;
    /**
     * The recipient to be removed from the scheduled search.
     * @type {TypedReference}
     * @memberof ScheduledSearchApiUnsubscribeScheduledSearch
     */
    readonly typedReference: TypedReference;
}
/**
 * Request parameters for updateScheduledSearch operation in ScheduledSearchApi.
 * @export
 * @interface ScheduledSearchApiUpdateScheduledSearchRequest
 */
export interface ScheduledSearchApiUpdateScheduledSearchRequest {
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof ScheduledSearchApiUpdateScheduledSearch
     */
    readonly id: string;
    /**
     * The scheduled search to persist.
     * @type {ScheduledSearch}
     * @memberof ScheduledSearchApiUpdateScheduledSearch
     */
    readonly scheduledSearch: ScheduledSearch;
}
/**
 * ScheduledSearchApi - object-oriented interface
 * @export
 * @class ScheduledSearchApi
 * @extends {BaseAPI}
 */
export declare class ScheduledSearchApi extends BaseAPI {
    /**
     * Creates a new scheduled search.
     * @summary Create a new scheduled search
     * @param {ScheduledSearchApiCreateScheduledSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledSearchApi
     */
    createScheduledSearch(requestParameters: ScheduledSearchApiCreateScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduledSearch, any>>;
    /**
     * Deletes the specified scheduled search.
     * @summary Delete a Scheduled Search
     * @param {ScheduledSearchApiDeleteScheduledSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledSearchApi
     */
    deleteScheduledSearch(requestParameters: ScheduledSearchApiDeleteScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the specified scheduled search.
     * @summary Get a Scheduled Search
     * @param {ScheduledSearchApiGetScheduledSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledSearchApi
     */
    getScheduledSearch(requestParameters: ScheduledSearchApiGetScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduledSearch, any>>;
    /**
     * Returns a list of scheduled searches.
     * @summary List scheduled searches
     * @param {ScheduledSearchApiListScheduledSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledSearchApi
     */
    listScheduledSearch(requestParameters?: ScheduledSearchApiListScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduledSearch[], any>>;
    /**
     * Unsubscribes a recipient from the specified scheduled search.
     * @summary Unsubscribe a recipient from Scheduled Search
     * @param {ScheduledSearchApiUnsubscribeScheduledSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledSearchApi
     */
    unsubscribeScheduledSearch(requestParameters: ScheduledSearchApiUnsubscribeScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Updates an existing scheduled search.
     * @summary Update an existing Scheduled Search
     * @param {ScheduledSearchApiUpdateScheduledSearchRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduledSearchApi
     */
    updateScheduledSearch(requestParameters: ScheduledSearchApiUpdateScheduledSearchRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduledSearch, any>>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Performs a search query aggregation and returns the aggregation result. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform a Search Query Aggregation
     * @param {Search} search
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchAggregate: (search: Search, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs a search with a provided query and returns the count of results in the X-Total-Count header.
     * @summary Count Documents Satisfying a Query
     * @param {Search} search
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchCount: (search: Search, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches a single document from the specified index, using the specified document ID.
     * @summary Get a Document by ID
     * @param {string} index The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*.
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchGet: (index: string, id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs a search with the provided query and returns a matching result collection. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform Search
     * @param {Search} search
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchPost: (search: Search, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration) => {
    /**
     * Performs a search query aggregation and returns the aggregation result. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform a Search Query Aggregation
     * @param {Search} search
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchAggregate(search: Search, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregationResult>>;
    /**
     * Performs a search with a provided query and returns the count of results in the X-Total-Count header.
     * @summary Count Documents Satisfying a Query
     * @param {Search} search
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchCount(search: Search, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Fetches a single document from the specified index, using the specified document ID.
     * @summary Get a Document by ID
     * @param {string} index The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*.
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchGet(index: string, id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchDocument>>;
    /**
     * Performs a search with the provided query and returns a matching result collection. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform Search
     * @param {Search} search
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchPost(search: Search, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchDocument>>>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Performs a search query aggregation and returns the aggregation result. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform a Search Query Aggregation
     * @param {Search} search
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchAggregate(search: Search, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<AggregationResult>;
    /**
     * Performs a search with a provided query and returns the count of results in the X-Total-Count header.
     * @summary Count Documents Satisfying a Query
     * @param {Search} search
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchCount(search: Search, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Fetches a single document from the specified index, using the specified document ID.
     * @summary Get a Document by ID
     * @param {string} index The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*.
     * @param {string} id ID of the requested document.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchGet(index: string, id: string, axiosOptions?: any): AxiosPromise<SearchDocument>;
    /**
     * Performs a search with the provided query and returns a matching result collection. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform Search
     * @param {Search} search
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchPost(search: Search, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<SearchDocument>>;
};
/**
 * Request parameters for searchAggregate operation in SearchApi.
 * @export
 * @interface SearchApiSearchAggregateRequest
 */
export interface SearchApiSearchAggregateRequest {
    /**
     *
     * @type {Search}
     * @memberof SearchApiSearchAggregate
     */
    readonly search: Search;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SearchApiSearchAggregate
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SearchApiSearchAggregate
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SearchApiSearchAggregate
     */
    readonly count?: boolean;
}
/**
 * Request parameters for searchCount operation in SearchApi.
 * @export
 * @interface SearchApiSearchCountRequest
 */
export interface SearchApiSearchCountRequest {
    /**
     *
     * @type {Search}
     * @memberof SearchApiSearchCount
     */
    readonly search: Search;
}
/**
 * Request parameters for searchGet operation in SearchApi.
 * @export
 * @interface SearchApiSearchGetRequest
 */
export interface SearchApiSearchGetRequest {
    /**
     * The index from which to fetch the specified document.  The currently supported index names are: *accessprofiles*, *accountactivities*, *entitlements*, *events*, *identities*, and *roles*.
     * @type {string}
     * @memberof SearchApiSearchGet
     */
    readonly index: string;
    /**
     * ID of the requested document.
     * @type {string}
     * @memberof SearchApiSearchGet
     */
    readonly id: string;
}
/**
 * Request parameters for searchPost operation in SearchApi.
 * @export
 * @interface SearchApiSearchPostRequest
 */
export interface SearchApiSearchPostRequest {
    /**
     *
     * @type {Search}
     * @memberof SearchApiSearchPost
     */
    readonly search: Search;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SearchApiSearchPost
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SearchApiSearchPost
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SearchApiSearchPost
     */
    readonly count?: boolean;
}
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     * Performs a search query aggregation and returns the aggregation result. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform a Search Query Aggregation
     * @param {SearchApiSearchAggregateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchAggregate(requestParameters: SearchApiSearchAggregateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregationResult, any>>;
    /**
     * Performs a search with a provided query and returns the count of results in the X-Total-Count header.
     * @summary Count Documents Satisfying a Query
     * @param {SearchApiSearchCountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchCount(requestParameters: SearchApiSearchCountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Fetches a single document from the specified index, using the specified document ID.
     * @summary Get a Document by ID
     * @param {SearchApiSearchGetRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchGet(requestParameters: SearchApiSearchGetRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchDocument, any>>;
    /**
     * Performs a search with the provided query and returns a matching result collection. By default, you can page a maximum of 10,000 search result records.  To page past 10,000 records, you can use searchAfter paging.  Refer to [Paginating Search Queries](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-search-queries) for more information about how to implement searchAfter paging.
     * @summary Perform Search
     * @param {SearchApiSearchPostRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchPost(requestParameters: SearchApiSearchPostRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchDocument[], any>>;
}
/**
 * SearchAttributeConfigurationApi - axios parameter creator
 * @export
 */
export declare const SearchAttributeConfigurationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create search attributes in IdentityNow.
     * @param {SearchAttributeConfig} searchAttributeConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSearchAttributeConfig: (searchAttributeConfig: SearchAttributeConfig, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API accepts an extended search attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSearchAttributeConfig: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API retrieves a list of extended search attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve attribute list in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSearchAttributeConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API accepts an extended search attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get specific attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSingleSearchAttributeConfig: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update search attribute in IdentityNow.
     * @param {string} name Name of the Search Attribute Configuration to patch.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSearchAttributeConfig: (name: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SearchAttributeConfigurationApi - functional programming interface
 * @export
 */
export declare const SearchAttributeConfigurationApiFp: (configuration?: Configuration) => {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create search attributes in IdentityNow.
     * @param {SearchAttributeConfig} searchAttributeConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSearchAttributeConfig(searchAttributeConfig: SearchAttributeConfig, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This API accepts an extended search attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSearchAttributeConfig(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API retrieves a list of extended search attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve attribute list in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSearchAttributeConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchAttributeConfig>>>;
    /**
     * This API accepts an extended search attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get specific attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSingleSearchAttributeConfig(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchAttributeConfig>>>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update search attribute in IdentityNow.
     * @param {string} name Name of the Search Attribute Configuration to patch.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSearchAttributeConfig(name: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchAttributeConfig>>;
};
/**
 * SearchAttributeConfigurationApi - factory interface
 * @export
 */
export declare const SearchAttributeConfigurationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create search attributes in IdentityNow.
     * @param {SearchAttributeConfig} searchAttributeConfig
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSearchAttributeConfig(searchAttributeConfig: SearchAttributeConfig, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This API accepts an extended search attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSearchAttributeConfig(name: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API retrieves a list of extended search attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve attribute list in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSearchAttributeConfig(axiosOptions?: any): AxiosPromise<Array<SearchAttributeConfig>>;
    /**
     * This API accepts an extended search attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get specific attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSingleSearchAttributeConfig(name: string, axiosOptions?: any): AxiosPromise<Array<SearchAttributeConfig>>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update search attribute in IdentityNow.
     * @param {string} name Name of the Search Attribute Configuration to patch.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSearchAttributeConfig(name: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<SearchAttributeConfig>;
};
/**
 * Request parameters for createSearchAttributeConfig operation in SearchAttributeConfigurationApi.
 * @export
 * @interface SearchAttributeConfigurationApiCreateSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationApiCreateSearchAttributeConfigRequest {
    /**
     *
     * @type {SearchAttributeConfig}
     * @memberof SearchAttributeConfigurationApiCreateSearchAttributeConfig
     */
    readonly searchAttributeConfig: SearchAttributeConfig;
}
/**
 * Request parameters for deleteSearchAttributeConfig operation in SearchAttributeConfigurationApi.
 * @export
 * @interface SearchAttributeConfigurationApiDeleteSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationApiDeleteSearchAttributeConfigRequest {
    /**
     * Name of the extended search attribute configuration to delete.
     * @type {string}
     * @memberof SearchAttributeConfigurationApiDeleteSearchAttributeConfig
     */
    readonly name: string;
}
/**
 * Request parameters for getSingleSearchAttributeConfig operation in SearchAttributeConfigurationApi.
 * @export
 * @interface SearchAttributeConfigurationApiGetSingleSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationApiGetSingleSearchAttributeConfigRequest {
    /**
     * Name of the extended search attribute configuration to retrieve.
     * @type {string}
     * @memberof SearchAttributeConfigurationApiGetSingleSearchAttributeConfig
     */
    readonly name: string;
}
/**
 * Request parameters for patchSearchAttributeConfig operation in SearchAttributeConfigurationApi.
 * @export
 * @interface SearchAttributeConfigurationApiPatchSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationApiPatchSearchAttributeConfigRequest {
    /**
     * Name of the Search Attribute Configuration to patch.
     * @type {string}
     * @memberof SearchAttributeConfigurationApiPatchSearchAttributeConfig
     */
    readonly name: string;
    /**
     *
     * @type {Array<JsonPatchOperation>}
     * @memberof SearchAttributeConfigurationApiPatchSearchAttributeConfig
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * SearchAttributeConfigurationApi - object-oriented interface
 * @export
 * @class SearchAttributeConfigurationApi
 * @extends {BaseAPI}
 */
export declare class SearchAttributeConfigurationApi extends BaseAPI {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create search attributes in IdentityNow.
     * @param {SearchAttributeConfigurationApiCreateSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationApi
     */
    createSearchAttributeConfig(requestParameters: SearchAttributeConfigurationApiCreateSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This API accepts an extended search attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationApiDeleteSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationApi
     */
    deleteSearchAttributeConfig(requestParameters: SearchAttributeConfigurationApiDeleteSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API retrieves a list of extended search attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve attribute list in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationApi
     */
    getSearchAttributeConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchAttributeConfig[], any>>;
    /**
     * This API accepts an extended search attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get specific attribute in IdentityNow.
     * @param {SearchAttributeConfigurationApiGetSingleSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationApi
     */
    getSingleSearchAttributeConfig(requestParameters: SearchAttributeConfigurationApiGetSingleSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchAttributeConfig[], any>>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationApiPatchSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationApi
     */
    patchSearchAttributeConfig(requestParameters: SearchAttributeConfigurationApiPatchSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchAttributeConfig, any>>;
}
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
export declare const SegmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {Segment} segment
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSegment: (segment: Segment, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** that segment deletion may take some time to become effective. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {string} id The segment ID to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSegment: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {string} id The segment ID to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSegment: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all segments.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSegments: (limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {string} id The segment ID to modify.
     * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSegment: (id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SegmentsApi - functional programming interface
 * @export
 */
export declare const SegmentsApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {Segment} segment
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSegment(segment: Segment, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** that segment deletion may take some time to become effective. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {string} id The segment ID to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSegment(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {string} id The segment ID to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSegment(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
    /**
     * This API returns a list of all segments.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSegments(limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Segment>>>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {string} id The segment ID to modify.
     * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSegment(id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>>;
};
/**
 * SegmentsApi - factory interface
 * @export
 */
export declare const SegmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {Segment} segment
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSegment(segment: Segment, axiosOptions?: any): AxiosPromise<Segment>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** that segment deletion may take some time to become effective. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {string} id The segment ID to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSegment(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {string} id The segment ID to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSegment(id: string, axiosOptions?: any): AxiosPromise<Segment>;
    /**
     * This API returns a list of all segments.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSegments(limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<Segment>>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {string} id The segment ID to modify.
     * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSegment(id: string, requestBody: Array<object>, axiosOptions?: any): AxiosPromise<Segment>;
};
/**
 * Request parameters for createSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiCreateSegmentRequest
 */
export interface SegmentsApiCreateSegmentRequest {
    /**
     *
     * @type {Segment}
     * @memberof SegmentsApiCreateSegment
     */
    readonly segment: Segment;
}
/**
 * Request parameters for deleteSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiDeleteSegmentRequest
 */
export interface SegmentsApiDeleteSegmentRequest {
    /**
     * The segment ID to delete.
     * @type {string}
     * @memberof SegmentsApiDeleteSegment
     */
    readonly id: string;
}
/**
 * Request parameters for getSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiGetSegmentRequest
 */
export interface SegmentsApiGetSegmentRequest {
    /**
     * The segment ID to retrieve.
     * @type {string}
     * @memberof SegmentsApiGetSegment
     */
    readonly id: string;
}
/**
 * Request parameters for listSegments operation in SegmentsApi.
 * @export
 * @interface SegmentsApiListSegmentsRequest
 */
export interface SegmentsApiListSegmentsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SegmentsApiListSegments
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SegmentsApiListSegments
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SegmentsApiListSegments
     */
    readonly count?: boolean;
}
/**
 * Request parameters for patchSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiPatchSegmentRequest
 */
export interface SegmentsApiPatchSegmentRequest {
    /**
     * The segment ID to modify.
     * @type {string}
     * @memberof SegmentsApiPatchSegment
     */
    readonly id: string;
    /**
     * A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @type {Array<object>}
     * @memberof SegmentsApiPatchSegment
     */
    readonly requestBody: Array<object>;
}
/**
 * SegmentsApi - object-oriented interface
 * @export
 * @class SegmentsApi
 * @extends {BaseAPI}
 */
export declare class SegmentsApi extends BaseAPI {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {SegmentsApiCreateSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    createSegment(requestParameters: SegmentsApiCreateSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment, any>>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** that segment deletion may take some time to become effective. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {SegmentsApiDeleteSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    deleteSegment(requestParameters: SegmentsApiDeleteSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {SegmentsApiGetSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    getSegment(requestParameters: SegmentsApiGetSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment, any>>;
    /**
     * This API returns a list of all segments.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {SegmentsApiListSegmentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    listSegments(requestParameters?: SegmentsApiListSegmentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment[], any>>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {SegmentsApiPatchSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    patchSegment(requestParameters: SegmentsApiPatchSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Segment, any>>;
}
/**
 * ServiceDeskIntegrationApi - axios parameter creator
 * @export
 */
export declare const ServiceDeskIntegrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationDto} serviceDeskIntegrationDto The specifics of a new integration to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createServiceDeskIntegration: (serviceDeskIntegrationDto: ServiceDeskIntegrationDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {string} id ID of Service Desk integration to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceDeskIntegration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {string} id ID of the Service Desk integration to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {string} scriptName The scriptName value of the Service Desk integration template to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTemplate: (scriptName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTypes: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrations: (offset?: number, limit?: number, sorters?: string, filters?: string, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusCheckDetails: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {string} id ID of the Service Desk integration to update
     * @param {PatchServiceDeskIntegrationRequest} patchServiceDeskIntegrationRequest A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchServiceDeskIntegration: (id: string, patchServiceDeskIntegrationRequest: PatchServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {string} id ID of the Service Desk integration to update
     * @param {ServiceDeskIntegrationDto} serviceDeskIntegrationDto The specifics of the integration to update
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putServiceDeskIntegration: (id: string, serviceDeskIntegrationDto: ServiceDeskIntegrationDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {QueuedCheckConfigDetails} queuedCheckConfigDetails the modified time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateStatusCheckDetails: (queuedCheckConfigDetails: QueuedCheckConfigDetails, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServiceDeskIntegrationApi - functional programming interface
 * @export
 */
export declare const ServiceDeskIntegrationApiFp: (configuration?: Configuration) => {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationDto} serviceDeskIntegrationDto The specifics of a new integration to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createServiceDeskIntegration(serviceDeskIntegrationDto: ServiceDeskIntegrationDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDto>>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {string} id ID of Service Desk integration to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceDeskIntegration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {string} id ID of the Service Desk integration to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDto>>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {string} scriptName The scriptName value of the Service Desk integration template to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTemplate(scriptName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationTemplateDto>>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTypes(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceDeskIntegrationTemplateType>>>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrations(offset?: number, limit?: number, sorters?: string, filters?: string, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceDeskIntegrationDto>>>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusCheckDetails(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueuedCheckConfigDetails>>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {string} id ID of the Service Desk integration to update
     * @param {PatchServiceDeskIntegrationRequest} patchServiceDeskIntegrationRequest A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchServiceDeskIntegration(id: string, patchServiceDeskIntegrationRequest: PatchServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDto>>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {string} id ID of the Service Desk integration to update
     * @param {ServiceDeskIntegrationDto} serviceDeskIntegrationDto The specifics of the integration to update
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putServiceDeskIntegration(id: string, serviceDeskIntegrationDto: ServiceDeskIntegrationDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDto>>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {QueuedCheckConfigDetails} queuedCheckConfigDetails the modified time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateStatusCheckDetails(queuedCheckConfigDetails: QueuedCheckConfigDetails, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueuedCheckConfigDetails>>;
};
/**
 * ServiceDeskIntegrationApi - factory interface
 * @export
 */
export declare const ServiceDeskIntegrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationDto} serviceDeskIntegrationDto The specifics of a new integration to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createServiceDeskIntegration(serviceDeskIntegrationDto: ServiceDeskIntegrationDto, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDto>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {string} id ID of Service Desk integration to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceDeskIntegration(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {string} id ID of the Service Desk integration to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegration(id: string, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDto>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {string} scriptName The scriptName value of the Service Desk integration template to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTemplate(scriptName: string, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationTemplateDto>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTypes(axiosOptions?: any): AxiosPromise<Array<ServiceDeskIntegrationTemplateType>>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrations(offset?: number, limit?: number, sorters?: string, filters?: string, count?: boolean, axiosOptions?: any): AxiosPromise<Array<ServiceDeskIntegrationDto>>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusCheckDetails(axiosOptions?: any): AxiosPromise<QueuedCheckConfigDetails>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {string} id ID of the Service Desk integration to update
     * @param {PatchServiceDeskIntegrationRequest} patchServiceDeskIntegrationRequest A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchServiceDeskIntegration(id: string, patchServiceDeskIntegrationRequest: PatchServiceDeskIntegrationRequest, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDto>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {string} id ID of the Service Desk integration to update
     * @param {ServiceDeskIntegrationDto} serviceDeskIntegrationDto The specifics of the integration to update
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putServiceDeskIntegration(id: string, serviceDeskIntegrationDto: ServiceDeskIntegrationDto, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDto>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {QueuedCheckConfigDetails} queuedCheckConfigDetails the modified time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateStatusCheckDetails(queuedCheckConfigDetails: QueuedCheckConfigDetails, axiosOptions?: any): AxiosPromise<QueuedCheckConfigDetails>;
};
/**
 * Request parameters for createServiceDeskIntegration operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiCreateServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationApiCreateServiceDeskIntegrationRequest {
    /**
     * The specifics of a new integration to create
     * @type {ServiceDeskIntegrationDto}
     * @memberof ServiceDeskIntegrationApiCreateServiceDeskIntegration
     */
    readonly serviceDeskIntegrationDto: ServiceDeskIntegrationDto;
}
/**
 * Request parameters for deleteServiceDeskIntegration operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiDeleteServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationApiDeleteServiceDeskIntegrationRequest {
    /**
     * ID of Service Desk integration to delete
     * @type {string}
     * @memberof ServiceDeskIntegrationApiDeleteServiceDeskIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getServiceDeskIntegration operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiGetServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationApiGetServiceDeskIntegrationRequest {
    /**
     * ID of the Service Desk integration to get
     * @type {string}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getServiceDeskIntegrationTemplate operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiGetServiceDeskIntegrationTemplateRequest
 */
export interface ServiceDeskIntegrationApiGetServiceDeskIntegrationTemplateRequest {
    /**
     * The scriptName value of the Service Desk integration template to get
     * @type {string}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegrationTemplate
     */
    readonly scriptName: string;
}
/**
 * Request parameters for getServiceDeskIntegrations operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiGetServiceDeskIntegrationsRequest
 */
export interface ServiceDeskIntegrationApiGetServiceDeskIntegrationsRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegrations
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegrations
     */
    readonly limit?: number;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegrations
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @type {string}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegrations
     */
    readonly filters?: string;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ServiceDeskIntegrationApiGetServiceDeskIntegrations
     */
    readonly count?: boolean;
}
/**
 * Request parameters for patchServiceDeskIntegration operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiPatchServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationApiPatchServiceDeskIntegrationRequest {
    /**
     * ID of the Service Desk integration to update
     * @type {string}
     * @memberof ServiceDeskIntegrationApiPatchServiceDeskIntegration
     */
    readonly id: string;
    /**
     * A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @type {PatchServiceDeskIntegrationRequest}
     * @memberof ServiceDeskIntegrationApiPatchServiceDeskIntegration
     */
    readonly patchServiceDeskIntegrationRequest: PatchServiceDeskIntegrationRequest;
}
/**
 * Request parameters for putServiceDeskIntegration operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiPutServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationApiPutServiceDeskIntegrationRequest {
    /**
     * ID of the Service Desk integration to update
     * @type {string}
     * @memberof ServiceDeskIntegrationApiPutServiceDeskIntegration
     */
    readonly id: string;
    /**
     * The specifics of the integration to update
     * @type {ServiceDeskIntegrationDto}
     * @memberof ServiceDeskIntegrationApiPutServiceDeskIntegration
     */
    readonly serviceDeskIntegrationDto: ServiceDeskIntegrationDto;
}
/**
 * Request parameters for updateStatusCheckDetails operation in ServiceDeskIntegrationApi.
 * @export
 * @interface ServiceDeskIntegrationApiUpdateStatusCheckDetailsRequest
 */
export interface ServiceDeskIntegrationApiUpdateStatusCheckDetailsRequest {
    /**
     * the modified time check configuration
     * @type {QueuedCheckConfigDetails}
     * @memberof ServiceDeskIntegrationApiUpdateStatusCheckDetails
     */
    readonly queuedCheckConfigDetails: QueuedCheckConfigDetails;
}
/**
 * ServiceDeskIntegrationApi - object-oriented interface
 * @export
 * @class ServiceDeskIntegrationApi
 * @extends {BaseAPI}
 */
export declare class ServiceDeskIntegrationApi extends BaseAPI {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationApiCreateServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    createServiceDeskIntegration(requestParameters: ServiceDeskIntegrationApiCreateServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDto, any>>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {ServiceDeskIntegrationApiDeleteServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    deleteServiceDeskIntegration(requestParameters: ServiceDeskIntegrationApiDeleteServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {ServiceDeskIntegrationApiGetServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    getServiceDeskIntegration(requestParameters: ServiceDeskIntegrationApiGetServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDto, any>>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {ServiceDeskIntegrationApiGetServiceDeskIntegrationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    getServiceDeskIntegrationTemplate(requestParameters: ServiceDeskIntegrationApiGetServiceDeskIntegrationTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationTemplateDto, any>>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    getServiceDeskIntegrationTypes(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationTemplateType[], any>>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {ServiceDeskIntegrationApiGetServiceDeskIntegrationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    getServiceDeskIntegrations(requestParameters?: ServiceDeskIntegrationApiGetServiceDeskIntegrationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDto[], any>>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    getStatusCheckDetails(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<QueuedCheckConfigDetails, any>>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {ServiceDeskIntegrationApiPatchServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    patchServiceDeskIntegration(requestParameters: ServiceDeskIntegrationApiPatchServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDto, any>>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {ServiceDeskIntegrationApiPutServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    putServiceDeskIntegration(requestParameters: ServiceDeskIntegrationApiPutServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDto, any>>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {ServiceDeskIntegrationApiUpdateStatusCheckDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationApi
     */
    updateStatusCheckDetails(requestParameters: ServiceDeskIntegrationApiUpdateStatusCheckDetailsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<QueuedCheckConfigDetails, any>>;
}
/**
 * SourceUsagesApi - axios parameter creator
 * @export
 */
export declare const SourceUsagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {string} sourceId ID of IDN source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusBySourceId: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {string} sourceId ID of IDN source
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesBySourceId: (sourceId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SourceUsagesApi - functional programming interface
 * @export
 */
export declare const SourceUsagesApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {string} sourceId ID of IDN source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusBySourceId(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceUsageStatus>>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {string} sourceId ID of IDN source
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesBySourceId(sourceId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SourceUsage>>>;
};
/**
 * SourceUsagesApi - factory interface
 * @export
 */
export declare const SourceUsagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {string} sourceId ID of IDN source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusBySourceId(sourceId: string, axiosOptions?: any): AxiosPromise<SourceUsageStatus>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {string} sourceId ID of IDN source
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesBySourceId(sourceId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<SourceUsage>>;
};
/**
 * Request parameters for getStatusBySourceId operation in SourceUsagesApi.
 * @export
 * @interface SourceUsagesApiGetStatusBySourceIdRequest
 */
export interface SourceUsagesApiGetStatusBySourceIdRequest {
    /**
     * ID of IDN source
     * @type {string}
     * @memberof SourceUsagesApiGetStatusBySourceId
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getUsagesBySourceId operation in SourceUsagesApi.
 * @export
 * @interface SourceUsagesApiGetUsagesBySourceIdRequest
 */
export interface SourceUsagesApiGetUsagesBySourceIdRequest {
    /**
     * ID of IDN source
     * @type {string}
     * @memberof SourceUsagesApiGetUsagesBySourceId
     */
    readonly sourceId: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourceUsagesApiGetUsagesBySourceId
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourceUsagesApiGetUsagesBySourceId
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SourceUsagesApiGetUsagesBySourceId
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @type {string}
     * @memberof SourceUsagesApiGetUsagesBySourceId
     */
    readonly sorters?: string;
}
/**
 * SourceUsagesApi - object-oriented interface
 * @export
 * @class SourceUsagesApi
 * @extends {BaseAPI}
 */
export declare class SourceUsagesApi extends BaseAPI {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {SourceUsagesApiGetStatusBySourceIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceUsagesApi
     */
    getStatusBySourceId(requestParameters: SourceUsagesApiGetStatusBySourceIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceUsageStatus, any>>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {SourceUsagesApiGetUsagesBySourceIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceUsagesApi
     */
    getUsagesBySourceId(requestParameters: SourceUsagesApiGetUsagesBySourceIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceUsage[], any>>;
}
/**
 * SourcesApi - axios parameter creator
 * @export
 */
export declare const SourcesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {string} sourceId The Source id
     * @param {ProvisioningPolicyDto} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createProvisioningPolicy: (sourceId: string, provisioningPolicyDto: ProvisioningPolicyDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {Source} source
     * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSource: (source: Source, provisionAsCsv?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {string} sourceId Source ID.
     * @param {Schema} schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSourceSchema: (sourceId: string, schema: Schema, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteProvisioningPolicy: (sourceId: string, usageType: UsageType, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSource: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceSchema: (sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API downloads the CSV schema that defines the account attributes on a source. >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source accounts schema template
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsSchema: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API downloads the CSV schema that defines the entitlement attributes on a source.  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementsSchema: (id: string, schemaName?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProvisioningPolicy: (sourceId: string, usageType: UsageType, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSource: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint fetches source health by source\'s id
     * @summary Fetches source health by id
     * @param {string} sourceId The Source id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceHealth: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchema: (sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {string} sourceId Source ID.
     * @param {'group' | 'user'} [includeTypes] If this is set to &#x60;group&#x60;, the API filters the account schema and only returns only group schemas. If this is set to &#x60;user&#x60;, the API returns the account schema for the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchemas: (sourceId: string, includeTypes?: 'group' | 'user', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Account Schema** -> **Options** -> **Download Schema**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source accounts schema template
     * @param {string} id The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importAccountsSchema: (id: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {string} sourceId The Source id.
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importConnectorFile: (sourceId: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Import Entitlements** -> **Download**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importEntitlementsSchema: (id: string, schemaName?: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listProvisioningPolicies: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point lists all the sources in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSources: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSubadmin?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {ProvisioningPolicyDto} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putProvisioningPolicy: (sourceId: string, usageType: UsageType, provisioningPolicyDto: ProvisioningPolicyDto, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {string} id Source ID.
     * @param {Source} source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSource: (id: string, source: Source, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.  * id * name * created * modified  Any attempt to modify these fields will result in an error response with a status code of 400.  > `id` must remain in the request body, but it cannot be changed.  If `id` is omitted from the request body, the result will be a 400 error.
     * @summary Update Source Schema (Full)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Schema} schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceSchema: (sourceId: string, schemaId: string, schema: Schema, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {string} sourceId The Source id.
     * @param {Array<ProvisioningPolicyDto>} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPoliciesInBulk: (sourceId: string, provisioningPolicyDto: Array<ProvisioningPolicyDto>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {string} sourceId The Source id.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPolicy: (sourceId: string, usageType: UsageType, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {string} id Source ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSource: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/v3/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceSchema: (sourceId: string, schemaId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SourcesApi - functional programming interface
 * @export
 */
export declare const SourcesApiFp: (configuration?: Configuration) => {
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {string} sourceId The Source id
     * @param {ProvisioningPolicyDto} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createProvisioningPolicy(sourceId: string, provisioningPolicyDto: ProvisioningPolicyDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDto>>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {Source} source
     * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSource(source: Source, provisionAsCsv?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {string} sourceId Source ID.
     * @param {Schema} schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSourceSchema(sourceId: string, schema: Schema, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteProvisioningPolicy(sourceId: string, usageType: UsageType, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSource(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSource202Response>>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceSchema(sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API downloads the CSV schema that defines the account attributes on a source. >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source accounts schema template
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsSchema(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API downloads the CSV schema that defines the entitlement attributes on a source.  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementsSchema(id: string, schemaName?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProvisioningPolicy(sourceId: string, usageType: UsageType, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDto>>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSource(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>>;
    /**
     * This endpoint fetches source health by source\'s id
     * @summary Fetches source health by id
     * @param {string} sourceId The Source id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceHealth(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceHealthDto>>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchema(sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {string} sourceId Source ID.
     * @param {'group' | 'user'} [includeTypes] If this is set to &#x60;group&#x60;, the API filters the account schema and only returns only group schemas. If this is set to &#x60;user&#x60;, the API returns the account schema for the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchemas(sourceId: string, includeTypes?: 'group' | 'user', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Schema>>>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Account Schema** -> **Options** -> **Download Schema**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source accounts schema template
     * @param {string} id The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importAccountsSchema(id: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {string} sourceId The Source id.
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importConnectorFile(sourceId: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Import Entitlements** -> **Download**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importEntitlementsSchema(id: string, schemaName?: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listProvisioningPolicies(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProvisioningPolicyDto>>>;
    /**
     * This end-point lists all the sources in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSources(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSubadmin?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>>>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {ProvisioningPolicyDto} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putProvisioningPolicy(sourceId: string, usageType: UsageType, provisioningPolicyDto: ProvisioningPolicyDto, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDto>>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {string} id Source ID.
     * @param {Source} source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSource(id: string, source: Source, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.  * id * name * created * modified  Any attempt to modify these fields will result in an error response with a status code of 400.  > `id` must remain in the request body, but it cannot be changed.  If `id` is omitted from the request body, the result will be a 400 error.
     * @summary Update Source Schema (Full)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Schema} schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceSchema(sourceId: string, schemaId: string, schema: Schema, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {string} sourceId The Source id.
     * @param {Array<ProvisioningPolicyDto>} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPoliciesInBulk(sourceId: string, provisioningPolicyDto: Array<ProvisioningPolicyDto>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProvisioningPolicyDto>>>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {string} sourceId The Source id.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPolicy(sourceId: string, usageType: UsageType, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDto>>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {string} id Source ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSource(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/v3/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceSchema(sourceId: string, schemaId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>>;
};
/**
 * SourcesApi - factory interface
 * @export
 */
export declare const SourcesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {string} sourceId The Source id
     * @param {ProvisioningPolicyDto} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createProvisioningPolicy(sourceId: string, provisioningPolicyDto: ProvisioningPolicyDto, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDto>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {Source} source
     * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSource(source: Source, provisionAsCsv?: boolean, axiosOptions?: any): AxiosPromise<Source>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {string} sourceId Source ID.
     * @param {Schema} schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSourceSchema(sourceId: string, schema: Schema, axiosOptions?: any): AxiosPromise<Schema>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteProvisioningPolicy(sourceId: string, usageType: UsageType, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSource(id: string, axiosOptions?: any): AxiosPromise<DeleteSource202Response>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceSchema(sourceId: string, schemaId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API downloads the CSV schema that defines the account attributes on a source. >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source accounts schema template
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountsSchema(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API downloads the CSV schema that defines the entitlement attributes on a source.  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementsSchema(id: string, schemaName?: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProvisioningPolicy(sourceId: string, usageType: UsageType, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDto>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSource(id: string, axiosOptions?: any): AxiosPromise<Source>;
    /**
     * This endpoint fetches source health by source\'s id
     * @summary Fetches source health by id
     * @param {string} sourceId The Source id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceHealth(sourceId: string, axiosOptions?: any): AxiosPromise<SourceHealthDto>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchema(sourceId: string, schemaId: string, axiosOptions?: any): AxiosPromise<Schema>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {string} sourceId Source ID.
     * @param {'group' | 'user'} [includeTypes] If this is set to &#x60;group&#x60;, the API filters the account schema and only returns only group schemas. If this is set to &#x60;user&#x60;, the API returns the account schema for the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchemas(sourceId: string, includeTypes?: 'group' | 'user', axiosOptions?: any): AxiosPromise<Array<Schema>>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Account Schema** -> **Options** -> **Download Schema**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source accounts schema template
     * @param {string} id The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importAccountsSchema(id: string, file?: any, axiosOptions?: any): AxiosPromise<Schema>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {string} sourceId The Source id.
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importConnectorFile(sourceId: string, file?: any, axiosOptions?: any): AxiosPromise<Source>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Import Entitlements** -> **Download**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importEntitlementsSchema(id: string, schemaName?: string, file?: any, axiosOptions?: any): AxiosPromise<Schema>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listProvisioningPolicies(sourceId: string, axiosOptions?: any): AxiosPromise<Array<ProvisioningPolicyDto>>;
    /**
     * This end-point lists all the sources in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSources(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSubadmin?: string, axiosOptions?: any): AxiosPromise<Array<Source>>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {ProvisioningPolicyDto} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putProvisioningPolicy(sourceId: string, usageType: UsageType, provisioningPolicyDto: ProvisioningPolicyDto, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDto>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {string} id Source ID.
     * @param {Source} source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSource(id: string, source: Source, axiosOptions?: any): AxiosPromise<Source>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.  * id * name * created * modified  Any attempt to modify these fields will result in an error response with a status code of 400.  > `id` must remain in the request body, but it cannot be changed.  If `id` is omitted from the request body, the result will be a 400 error.
     * @summary Update Source Schema (Full)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Schema} schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceSchema(sourceId: string, schemaId: string, schema: Schema, axiosOptions?: any): AxiosPromise<Schema>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {string} sourceId The Source id.
     * @param {Array<ProvisioningPolicyDto>} provisioningPolicyDto
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPoliciesInBulk(sourceId: string, provisioningPolicyDto: Array<ProvisioningPolicyDto>, axiosOptions?: any): AxiosPromise<Array<ProvisioningPolicyDto>>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {string} sourceId The Source id.
     * @param {UsageType} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPolicy(sourceId: string, usageType: UsageType, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDto>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {string} id Source ID.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSource(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<Source>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/v3/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceSchema(sourceId: string, schemaId: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<Schema>;
};
/**
 * Request parameters for createProvisioningPolicy operation in SourcesApi.
 * @export
 * @interface SourcesApiCreateProvisioningPolicyRequest
 */
export interface SourcesApiCreateProvisioningPolicyRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesApiCreateProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     *
     * @type {ProvisioningPolicyDto}
     * @memberof SourcesApiCreateProvisioningPolicy
     */
    readonly provisioningPolicyDto: ProvisioningPolicyDto;
}
/**
 * Request parameters for createSource operation in SourcesApi.
 * @export
 * @interface SourcesApiCreateSourceRequest
 */
export interface SourcesApiCreateSourceRequest {
    /**
     *
     * @type {Source}
     * @memberof SourcesApiCreateSource
     */
    readonly source: Source;
    /**
     * If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @type {boolean}
     * @memberof SourcesApiCreateSource
     */
    readonly provisionAsCsv?: boolean;
}
/**
 * Request parameters for createSourceSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiCreateSourceSchemaRequest
 */
export interface SourcesApiCreateSourceSchemaRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesApiCreateSourceSchema
     */
    readonly sourceId: string;
    /**
     *
     * @type {Schema}
     * @memberof SourcesApiCreateSourceSchema
     */
    readonly schema: Schema;
}
/**
 * Request parameters for deleteProvisioningPolicy operation in SourcesApi.
 * @export
 * @interface SourcesApiDeleteProvisioningPolicyRequest
 */
export interface SourcesApiDeleteProvisioningPolicyRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesApiDeleteProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageType}
     * @memberof SourcesApiDeleteProvisioningPolicy
     */
    readonly usageType: UsageType;
}
/**
 * Request parameters for deleteSource operation in SourcesApi.
 * @export
 * @interface SourcesApiDeleteSourceRequest
 */
export interface SourcesApiDeleteSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesApiDeleteSource
     */
    readonly id: string;
}
/**
 * Request parameters for deleteSourceSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiDeleteSourceSchemaRequest
 */
export interface SourcesApiDeleteSourceSchemaRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiDeleteSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema id.
     * @type {string}
     * @memberof SourcesApiDeleteSourceSchema
     */
    readonly schemaId: string;
}
/**
 * Request parameters for getAccountsSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiGetAccountsSchemaRequest
 */
export interface SourcesApiGetAccountsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesApiGetAccountsSchema
     */
    readonly id: string;
}
/**
 * Request parameters for getEntitlementsSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiGetEntitlementsSchemaRequest
 */
export interface SourcesApiGetEntitlementsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesApiGetEntitlementsSchema
     */
    readonly id: string;
    /**
     * Name of entitlement schema
     * @type {string}
     * @memberof SourcesApiGetEntitlementsSchema
     */
    readonly schemaName?: string;
}
/**
 * Request parameters for getProvisioningPolicy operation in SourcesApi.
 * @export
 * @interface SourcesApiGetProvisioningPolicyRequest
 */
export interface SourcesApiGetProvisioningPolicyRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesApiGetProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageType}
     * @memberof SourcesApiGetProvisioningPolicy
     */
    readonly usageType: UsageType;
}
/**
 * Request parameters for getSource operation in SourcesApi.
 * @export
 * @interface SourcesApiGetSourceRequest
 */
export interface SourcesApiGetSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesApiGetSource
     */
    readonly id: string;
}
/**
 * Request parameters for getSourceHealth operation in SourcesApi.
 * @export
 * @interface SourcesApiGetSourceHealthRequest
 */
export interface SourcesApiGetSourceHealthRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiGetSourceHealth
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getSourceSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiGetSourceSchemaRequest
 */
export interface SourcesApiGetSourceSchemaRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiGetSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema id.
     * @type {string}
     * @memberof SourcesApiGetSourceSchema
     */
    readonly schemaId: string;
}
/**
 * Request parameters for getSourceSchemas operation in SourcesApi.
 * @export
 * @interface SourcesApiGetSourceSchemasRequest
 */
export interface SourcesApiGetSourceSchemasRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesApiGetSourceSchemas
     */
    readonly sourceId: string;
    /**
     * If this is set to &#x60;group&#x60;, the API filters the account schema and only returns only group schemas. If this is set to &#x60;user&#x60;, the API returns the account schema for the source.
     * @type {'group' | 'user'}
     * @memberof SourcesApiGetSourceSchemas
     */
    readonly includeTypes?: 'group' | 'user';
}
/**
 * Request parameters for importAccountsSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiImportAccountsSchemaRequest
 */
export interface SourcesApiImportAccountsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesApiImportAccountsSchema
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof SourcesApiImportAccountsSchema
     */
    readonly file?: any;
}
/**
 * Request parameters for importConnectorFile operation in SourcesApi.
 * @export
 * @interface SourcesApiImportConnectorFileRequest
 */
export interface SourcesApiImportConnectorFileRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiImportConnectorFile
     */
    readonly sourceId: string;
    /**
     *
     * @type {any}
     * @memberof SourcesApiImportConnectorFile
     */
    readonly file?: any;
}
/**
 * Request parameters for importEntitlementsSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiImportEntitlementsSchemaRequest
 */
export interface SourcesApiImportEntitlementsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesApiImportEntitlementsSchema
     */
    readonly id: string;
    /**
     * Name of entitlement schema
     * @type {string}
     * @memberof SourcesApiImportEntitlementsSchema
     */
    readonly schemaName?: string;
    /**
     *
     * @type {any}
     * @memberof SourcesApiImportEntitlementsSchema
     */
    readonly file?: any;
}
/**
 * Request parameters for listProvisioningPolicies operation in SourcesApi.
 * @export
 * @interface SourcesApiListProvisioningPoliciesRequest
 */
export interface SourcesApiListProvisioningPoliciesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesApiListProvisioningPolicies
     */
    readonly sourceId: string;
}
/**
 * Request parameters for listSources operation in SourcesApi.
 * @export
 * @interface SourcesApiListSourcesRequest
 */
export interface SourcesApiListSourcesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourcesApiListSources
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourcesApiListSources
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SourcesApiListSources
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **modified**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @type {string}
     * @memberof SourcesApiListSources
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @type {string}
     * @memberof SourcesApiListSources
     */
    readonly sorters?: string;
    /**
     * Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @type {string}
     * @memberof SourcesApiListSources
     */
    readonly forSubadmin?: string;
}
/**
 * Request parameters for putProvisioningPolicy operation in SourcesApi.
 * @export
 * @interface SourcesApiPutProvisioningPolicyRequest
 */
export interface SourcesApiPutProvisioningPolicyRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesApiPutProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageType}
     * @memberof SourcesApiPutProvisioningPolicy
     */
    readonly usageType: UsageType;
    /**
     *
     * @type {ProvisioningPolicyDto}
     * @memberof SourcesApiPutProvisioningPolicy
     */
    readonly provisioningPolicyDto: ProvisioningPolicyDto;
}
/**
 * Request parameters for putSource operation in SourcesApi.
 * @export
 * @interface SourcesApiPutSourceRequest
 */
export interface SourcesApiPutSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesApiPutSource
     */
    readonly id: string;
    /**
     *
     * @type {Source}
     * @memberof SourcesApiPutSource
     */
    readonly source: Source;
}
/**
 * Request parameters for putSourceSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiPutSourceSchemaRequest
 */
export interface SourcesApiPutSourceSchemaRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiPutSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema id.
     * @type {string}
     * @memberof SourcesApiPutSourceSchema
     */
    readonly schemaId: string;
    /**
     *
     * @type {Schema}
     * @memberof SourcesApiPutSourceSchema
     */
    readonly schema: Schema;
}
/**
 * Request parameters for updateProvisioningPoliciesInBulk operation in SourcesApi.
 * @export
 * @interface SourcesApiUpdateProvisioningPoliciesInBulkRequest
 */
export interface SourcesApiUpdateProvisioningPoliciesInBulkRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiUpdateProvisioningPoliciesInBulk
     */
    readonly sourceId: string;
    /**
     *
     * @type {Array<ProvisioningPolicyDto>}
     * @memberof SourcesApiUpdateProvisioningPoliciesInBulk
     */
    readonly provisioningPolicyDto: Array<ProvisioningPolicyDto>;
}
/**
 * Request parameters for updateProvisioningPolicy operation in SourcesApi.
 * @export
 * @interface SourcesApiUpdateProvisioningPolicyRequest
 */
export interface SourcesApiUpdateProvisioningPolicyRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiUpdateProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageType}
     * @memberof SourcesApiUpdateProvisioningPolicy
     */
    readonly usageType: UsageType;
    /**
     * The JSONPatch payload used to update the schema.
     * @type {Array<JsonPatchOperation>}
     * @memberof SourcesApiUpdateProvisioningPolicy
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for updateSource operation in SourcesApi.
 * @export
 * @interface SourcesApiUpdateSourceRequest
 */
export interface SourcesApiUpdateSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesApiUpdateSource
     */
    readonly id: string;
    /**
     * A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @type {Array<JsonPatchOperation>}
     * @memberof SourcesApiUpdateSource
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for updateSourceSchema operation in SourcesApi.
 * @export
 * @interface SourcesApiUpdateSourceSchemaRequest
 */
export interface SourcesApiUpdateSourceSchemaRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesApiUpdateSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema id.
     * @type {string}
     * @memberof SourcesApiUpdateSourceSchema
     */
    readonly schemaId: string;
    /**
     * The JSONPatch payload used to update the schema.
     * @type {Array<JsonPatchOperation>}
     * @memberof SourcesApiUpdateSourceSchema
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * SourcesApi - object-oriented interface
 * @export
 * @class SourcesApi
 * @extends {BaseAPI}
 */
export declare class SourcesApi extends BaseAPI {
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {SourcesApiCreateProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    createProvisioningPolicy(requestParameters: SourcesApiCreateProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDto, any>>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {SourcesApiCreateSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    createSource(requestParameters: SourcesApiCreateSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Source, any>>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {SourcesApiCreateSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    createSourceSchema(requestParameters: SourcesApiCreateSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema, any>>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {SourcesApiDeleteProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    deleteProvisioningPolicy(requestParameters: SourcesApiDeleteProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {SourcesApiDeleteSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    deleteSource(requestParameters: SourcesApiDeleteSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteSource202Response, any>>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {SourcesApiDeleteSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    deleteSourceSchema(requestParameters: SourcesApiDeleteSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API downloads the CSV schema that defines the account attributes on a source. >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source accounts schema template
     * @param {SourcesApiGetAccountsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getAccountsSchema(requestParameters: SourcesApiGetAccountsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API downloads the CSV schema that defines the entitlement attributes on a source.  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Downloads source entitlements schema template
     * @param {SourcesApiGetEntitlementsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getEntitlementsSchema(requestParameters: SourcesApiGetEntitlementsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {SourcesApiGetProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getProvisioningPolicy(requestParameters: SourcesApiGetProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDto, any>>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {SourcesApiGetSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getSource(requestParameters: SourcesApiGetSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Source, any>>;
    /**
     * This endpoint fetches source health by source\'s id
     * @summary Fetches source health by id
     * @param {SourcesApiGetSourceHealthRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getSourceHealth(requestParameters: SourcesApiGetSourceHealthRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceHealthDto, any>>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {SourcesApiGetSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getSourceSchema(requestParameters: SourcesApiGetSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema, any>>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {SourcesApiGetSourceSchemasRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    getSourceSchemas(requestParameters: SourcesApiGetSourceSchemasRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema[], any>>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Account Schema** -> **Options** -> **Download Schema**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source accounts schema template
     * @param {SourcesApiImportAccountsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    importAccountsSchema(requestParameters: SourcesApiImportAccountsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema, any>>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {SourcesApiImportConnectorFileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    importConnectorFile(requestParameters: SourcesApiImportConnectorFileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Source, any>>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.  To retrieve the file to modify and upload, log into Identity Now.   Click **Admin** -> **Connections** -> **Sources** -> **`{SourceName}`** -> **Import Data** -> **Import Entitlements** -> **Download**  >**NOTE: This API is designated only for Delimited File sources.**
     * @summary Uploads source entitlements schema template
     * @param {SourcesApiImportEntitlementsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    importEntitlementsSchema(requestParameters: SourcesApiImportEntitlementsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema, any>>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {SourcesApiListProvisioningPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    listProvisioningPolicies(requestParameters: SourcesApiListProvisioningPoliciesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDto[], any>>;
    /**
     * This end-point lists all the sources in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {SourcesApiListSourcesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    listSources(requestParameters?: SourcesApiListSourcesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Source[], any>>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {SourcesApiPutProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    putProvisioningPolicy(requestParameters: SourcesApiPutProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDto, any>>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {SourcesApiPutSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    putSource(requestParameters: SourcesApiPutSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Source, any>>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below.  * id * name * created * modified  Any attempt to modify these fields will result in an error response with a status code of 400.  > `id` must remain in the request body, but it cannot be changed.  If `id` is omitted from the request body, the result will be a 400 error.
     * @summary Update Source Schema (Full)
     * @param {SourcesApiPutSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    putSourceSchema(requestParameters: SourcesApiPutSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema, any>>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {SourcesApiUpdateProvisioningPoliciesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    updateProvisioningPoliciesInBulk(requestParameters: SourcesApiUpdateProvisioningPoliciesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDto[], any>>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {SourcesApiUpdateProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    updateProvisioningPolicy(requestParameters: SourcesApiUpdateProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDto, any>>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {SourcesApiUpdateSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    updateSource(requestParameters: SourcesApiUpdateSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Source, any>>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/v3/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {SourcesApiUpdateSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesApi
     */
    updateSourceSchema(requestParameters: SourcesApiUpdateSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Schema, any>>;
}
/**
 * TaggedObjectsApi - axios parameter creator
 * @export
 */
export declare const TaggedObjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
     * @param {string} id The ID of the object reference to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaggedObject: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {BulkRemoveTaggedObject} bulkRemoveTaggedObject Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsToManyObject: (bulkRemoveTaggedObject: BulkRemoveTaggedObject, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaggedObject: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjects: (limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjectsByType: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
     * @param {string} id The ID of the object reference to update.
     * @param {TaggedObject} taggedObject
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTaggedObject: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, taggedObject: TaggedObject, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObject} taggedObject
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagToObject: (taggedObject: TaggedObject, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {BulkAddTaggedObject} bulkAddTaggedObject Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagsToManyObjects: (bulkAddTaggedObject: BulkAddTaggedObject, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaggedObjectsApi - functional programming interface
 * @export
 */
export declare const TaggedObjectsApiFp: (configuration?: Configuration) => {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
     * @param {string} id The ID of the object reference to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {BulkRemoveTaggedObject} bulkRemoveTaggedObject Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsToManyObject(bulkRemoveTaggedObject: BulkRemoveTaggedObject, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaggedObject>>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjects(limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaggedObject>>>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjectsByType(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaggedObject>>>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
     * @param {string} id The ID of the object reference to update.
     * @param {TaggedObject} taggedObject
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, taggedObject: TaggedObject, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaggedObject>>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObject} taggedObject
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagToObject(taggedObject: TaggedObject, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {BulkAddTaggedObject} bulkAddTaggedObject Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagsToManyObjects(bulkAddTaggedObject: BulkAddTaggedObject, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BulkTaggedObjectResponse>>>;
};
/**
 * TaggedObjectsApi - factory interface
 * @export
 */
export declare const TaggedObjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
     * @param {string} id The ID of the object reference to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {BulkRemoveTaggedObject} bulkRemoveTaggedObject Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsToManyObject(bulkRemoveTaggedObject: BulkRemoveTaggedObject, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: any): AxiosPromise<TaggedObject>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjects(limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<TaggedObject>>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjectsByType(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<TaggedObject>>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
     * @param {string} id The ID of the object reference to update.
     * @param {TaggedObject} taggedObject
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, taggedObject: TaggedObject, axiosOptions?: any): AxiosPromise<TaggedObject>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObject} taggedObject
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagToObject(taggedObject: TaggedObject, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {BulkAddTaggedObject} bulkAddTaggedObject Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagsToManyObjects(bulkAddTaggedObject: BulkAddTaggedObject, axiosOptions?: any): AxiosPromise<Array<BulkTaggedObjectResponse>>;
};
/**
 * Request parameters for deleteTaggedObject operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiDeleteTaggedObjectRequest
 */
export interface TaggedObjectsApiDeleteTaggedObjectRequest {
    /**
     * The type of tagged object to delete.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsApiDeleteTaggedObject
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * The ID of the object reference to delete.
     * @type {string}
     * @memberof TaggedObjectsApiDeleteTaggedObject
     */
    readonly id: string;
}
/**
 * Request parameters for deleteTagsToManyObject operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiDeleteTagsToManyObjectRequest
 */
export interface TaggedObjectsApiDeleteTagsToManyObjectRequest {
    /**
     * Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @type {BulkRemoveTaggedObject}
     * @memberof TaggedObjectsApiDeleteTagsToManyObject
     */
    readonly bulkRemoveTaggedObject: BulkRemoveTaggedObject;
}
/**
 * Request parameters for getTaggedObject operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiGetTaggedObjectRequest
 */
export interface TaggedObjectsApiGetTaggedObjectRequest {
    /**
     * The type of tagged object to retrieve.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsApiGetTaggedObject
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * The ID of the object reference to retrieve.
     * @type {string}
     * @memberof TaggedObjectsApiGetTaggedObject
     */
    readonly id: string;
}
/**
 * Request parameters for listTaggedObjects operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiListTaggedObjectsRequest
 */
export interface TaggedObjectsApiListTaggedObjectsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsApiListTaggedObjects
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsApiListTaggedObjects
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaggedObjectsApiListTaggedObjects
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @type {string}
     * @memberof TaggedObjectsApiListTaggedObjects
     */
    readonly filters?: string;
}
/**
 * Request parameters for listTaggedObjectsByType operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiListTaggedObjectsByTypeRequest
 */
export interface TaggedObjectsApiListTaggedObjectsByTypeRequest {
    /**
     * The type of tagged object to retrieve.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsApiListTaggedObjectsByType
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsApiListTaggedObjectsByType
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsApiListTaggedObjectsByType
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaggedObjectsApiListTaggedObjectsByType
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @type {string}
     * @memberof TaggedObjectsApiListTaggedObjectsByType
     */
    readonly filters?: string;
}
/**
 * Request parameters for putTaggedObject operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiPutTaggedObjectRequest
 */
export interface TaggedObjectsApiPutTaggedObjectRequest {
    /**
     * The type of tagged object to update.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsApiPutTaggedObject
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * The ID of the object reference to update.
     * @type {string}
     * @memberof TaggedObjectsApiPutTaggedObject
     */
    readonly id: string;
    /**
     *
     * @type {TaggedObject}
     * @memberof TaggedObjectsApiPutTaggedObject
     */
    readonly taggedObject: TaggedObject;
}
/**
 * Request parameters for setTagToObject operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiSetTagToObjectRequest
 */
export interface TaggedObjectsApiSetTagToObjectRequest {
    /**
     *
     * @type {TaggedObject}
     * @memberof TaggedObjectsApiSetTagToObject
     */
    readonly taggedObject: TaggedObject;
}
/**
 * Request parameters for setTagsToManyObjects operation in TaggedObjectsApi.
 * @export
 * @interface TaggedObjectsApiSetTagsToManyObjectsRequest
 */
export interface TaggedObjectsApiSetTagsToManyObjectsRequest {
    /**
     * Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @type {BulkAddTaggedObject}
     * @memberof TaggedObjectsApiSetTagsToManyObjects
     */
    readonly bulkAddTaggedObject: BulkAddTaggedObject;
}
/**
 * TaggedObjectsApi - object-oriented interface
 * @export
 * @class TaggedObjectsApi
 * @extends {BaseAPI}
 */
export declare class TaggedObjectsApi extends BaseAPI {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {TaggedObjectsApiDeleteTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    deleteTaggedObject(requestParameters: TaggedObjectsApiDeleteTaggedObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {TaggedObjectsApiDeleteTagsToManyObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    deleteTagsToManyObject(requestParameters: TaggedObjectsApiDeleteTagsToManyObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {TaggedObjectsApiGetTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    getTaggedObject(requestParameters: TaggedObjectsApiGetTaggedObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObject, any>>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {TaggedObjectsApiListTaggedObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    listTaggedObjects(requestParameters?: TaggedObjectsApiListTaggedObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObject[], any>>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {TaggedObjectsApiListTaggedObjectsByTypeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    listTaggedObjectsByType(requestParameters: TaggedObjectsApiListTaggedObjectsByTypeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObject[], any>>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {TaggedObjectsApiPutTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    putTaggedObject(requestParameters: TaggedObjectsApiPutTaggedObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObject, any>>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObjectsApiSetTagToObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    setTagToObject(requestParameters: TaggedObjectsApiSetTagToObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {TaggedObjectsApiSetTagsToManyObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsApi
     */
    setTagsToManyObjects(requestParameters: TaggedObjectsApiSetTagsToManyObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkTaggedObjectResponse[], any>>;
}
/**
 * TransformsApi - axios parameter creator
 * @export
 */
export declare const TransformsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {Transform} transform The transform to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createTransform: (transform: Transform, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {string} id ID of the transform to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransform: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {string} id ID of the transform to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransform: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [name] Name of the transform to retrieve from the list.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTransforms: (offset?: number, limit?: number, count?: boolean, name?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {string} id ID of the transform to update
     * @param {Transform} [transform] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTransform: (id: string, transform?: Transform, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransformsApi - functional programming interface
 * @export
 */
export declare const TransformsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {Transform} transform The transform to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createTransform(transform: Transform, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformRead>>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {string} id ID of the transform to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransform(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {string} id ID of the transform to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransform(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformRead>>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [name] Name of the transform to retrieve from the list.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTransforms(offset?: number, limit?: number, count?: boolean, name?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransformRead>>>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {string} id ID of the transform to update
     * @param {Transform} [transform] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTransform(id: string, transform?: Transform, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformRead>>;
};
/**
 * TransformsApi - factory interface
 * @export
 */
export declare const TransformsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {Transform} transform The transform to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createTransform(transform: Transform, axiosOptions?: any): AxiosPromise<TransformRead>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {string} id ID of the transform to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransform(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {string} id ID of the transform to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransform(id: string, axiosOptions?: any): AxiosPromise<TransformRead>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [name] Name of the transform to retrieve from the list.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTransforms(offset?: number, limit?: number, count?: boolean, name?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<TransformRead>>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {string} id ID of the transform to update
     * @param {Transform} [transform] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTransform(id: string, transform?: Transform, axiosOptions?: any): AxiosPromise<TransformRead>;
};
/**
 * Request parameters for createTransform operation in TransformsApi.
 * @export
 * @interface TransformsApiCreateTransformRequest
 */
export interface TransformsApiCreateTransformRequest {
    /**
     * The transform to be created.
     * @type {Transform}
     * @memberof TransformsApiCreateTransform
     */
    readonly transform: Transform;
}
/**
 * Request parameters for deleteTransform operation in TransformsApi.
 * @export
 * @interface TransformsApiDeleteTransformRequest
 */
export interface TransformsApiDeleteTransformRequest {
    /**
     * ID of the transform to delete
     * @type {string}
     * @memberof TransformsApiDeleteTransform
     */
    readonly id: string;
}
/**
 * Request parameters for getTransform operation in TransformsApi.
 * @export
 * @interface TransformsApiGetTransformRequest
 */
export interface TransformsApiGetTransformRequest {
    /**
     * ID of the transform to retrieve
     * @type {string}
     * @memberof TransformsApiGetTransform
     */
    readonly id: string;
}
/**
 * Request parameters for listTransforms operation in TransformsApi.
 * @export
 * @interface TransformsApiListTransformsRequest
 */
export interface TransformsApiListTransformsRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TransformsApiListTransforms
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TransformsApiListTransforms
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TransformsApiListTransforms
     */
    readonly count?: boolean;
    /**
     * Name of the transform to retrieve from the list.
     * @type {string}
     * @memberof TransformsApiListTransforms
     */
    readonly name?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @type {string}
     * @memberof TransformsApiListTransforms
     */
    readonly filters?: string;
}
/**
 * Request parameters for updateTransform operation in TransformsApi.
 * @export
 * @interface TransformsApiUpdateTransformRequest
 */
export interface TransformsApiUpdateTransformRequest {
    /**
     * ID of the transform to update
     * @type {string}
     * @memberof TransformsApiUpdateTransform
     */
    readonly id: string;
    /**
     * The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @type {Transform}
     * @memberof TransformsApiUpdateTransform
     */
    readonly transform?: Transform;
}
/**
 * TransformsApi - object-oriented interface
 * @export
 * @class TransformsApi
 * @extends {BaseAPI}
 */
export declare class TransformsApi extends BaseAPI {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {TransformsApiCreateTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsApi
     */
    createTransform(requestParameters: TransformsApiCreateTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformRead, any>>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {TransformsApiDeleteTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsApi
     */
    deleteTransform(requestParameters: TransformsApiDeleteTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {TransformsApiGetTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsApi
     */
    getTransform(requestParameters: TransformsApiGetTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformRead, any>>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {TransformsApiListTransformsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsApi
     */
    listTransforms(requestParameters?: TransformsApiListTransformsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformRead[], any>>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {TransformsApiUpdateTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsApi
     */
    updateTransform(requestParameters: TransformsApiUpdateTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformRead, any>>;
}
/**
 * VendorConnectorMappingsApi - axios parameter creator
 * @export
 */
export declare const VendorConnectorMappingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMapping} vendorConnectorMapping
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVendorConnectorMapping: (vendorConnectorMapping: VendorConnectorMapping, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMapping} vendorConnectorMapping
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVendorConnectorMapping: (vendorConnectorMapping: VendorConnectorMapping, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VendorConnectorMappingsApi - functional programming interface
 * @export
 */
export declare const VendorConnectorMappingsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMapping} vendorConnectorMapping
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVendorConnectorMapping(vendorConnectorMapping: VendorConnectorMapping, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorConnectorMapping>>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMapping} vendorConnectorMapping
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVendorConnectorMapping(vendorConnectorMapping: VendorConnectorMapping, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteVendorConnectorMapping200Response>>;
};
/**
 * VendorConnectorMappingsApi - factory interface
 * @export
 */
export declare const VendorConnectorMappingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMapping} vendorConnectorMapping
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVendorConnectorMapping(vendorConnectorMapping: VendorConnectorMapping, axiosOptions?: any): AxiosPromise<VendorConnectorMapping>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMapping} vendorConnectorMapping
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVendorConnectorMapping(vendorConnectorMapping: VendorConnectorMapping, axiosOptions?: any): AxiosPromise<DeleteVendorConnectorMapping200Response>;
};
/**
 * Request parameters for createVendorConnectorMapping operation in VendorConnectorMappingsApi.
 * @export
 * @interface VendorConnectorMappingsApiCreateVendorConnectorMappingRequest
 */
export interface VendorConnectorMappingsApiCreateVendorConnectorMappingRequest {
    /**
     *
     * @type {VendorConnectorMapping}
     * @memberof VendorConnectorMappingsApiCreateVendorConnectorMapping
     */
    readonly vendorConnectorMapping: VendorConnectorMapping;
}
/**
 * Request parameters for deleteVendorConnectorMapping operation in VendorConnectorMappingsApi.
 * @export
 * @interface VendorConnectorMappingsApiDeleteVendorConnectorMappingRequest
 */
export interface VendorConnectorMappingsApiDeleteVendorConnectorMappingRequest {
    /**
     *
     * @type {VendorConnectorMapping}
     * @memberof VendorConnectorMappingsApiDeleteVendorConnectorMapping
     */
    readonly vendorConnectorMapping: VendorConnectorMapping;
}
/**
 * VendorConnectorMappingsApi - object-oriented interface
 * @export
 * @class VendorConnectorMappingsApi
 * @extends {BaseAPI}
 */
export declare class VendorConnectorMappingsApi extends BaseAPI {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMappingsApiCreateVendorConnectorMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorConnectorMappingsApi
     */
    createVendorConnectorMapping(requestParameters: VendorConnectorMappingsApiCreateVendorConnectorMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VendorConnectorMapping, any>>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMappingsApiDeleteVendorConnectorMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorConnectorMappingsApi
     */
    deleteVendorConnectorMapping(requestParameters: VendorConnectorMappingsApiDeleteVendorConnectorMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteVendorConnectorMapping200Response, any>>;
}
/**
 * WorkItemsApi - axios parameter creator
 * @export
 */
export declare const WorkItemsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItem: (id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItemsInBulk: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeWorkItem: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCompletedWorkItems: (ownerId?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountCompletedWorkItems: (ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountWorkItems: (ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {string} id ID of the work item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItem: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItemsSummary: (ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkItems: (limit?: number, offset?: number, count?: boolean, ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItem: (id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItemsInBulk: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request. Accessible to work-item Owner, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN.
     * @summary Forward a Work Item
     * @param {string} id The ID of the work item
     * @param {WorkItemForward} workItemForward
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendWorkItemForward: (id: string, workItemForward: WorkItemForward, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {string} id The ID of the work item
     * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitAccountSelection: (id: string, requestBody: {
        [key: string]: any;
    }, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkItemsApi - functional programming interface
 * @export
 */
export declare const WorkItemsApiFp: (configuration?: Configuration) => {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItem(id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItemsInBulk(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeWorkItem(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCompletedWorkItems(ownerId?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItems>>>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountCompletedWorkItems(ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsCount>>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountWorkItems(ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsCount>>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {string} id ID of the work item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItem(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItemsSummary(ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsSummary>>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkItems(limit?: number, offset?: number, count?: boolean, ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItems>>>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItem(id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItemsInBulk(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request. Accessible to work-item Owner, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN.
     * @summary Forward a Work Item
     * @param {string} id The ID of the work item
     * @param {WorkItemForward} workItemForward
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendWorkItemForward(id: string, workItemForward: WorkItemForward, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {string} id The ID of the work item
     * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitAccountSelection(id: string, requestBody: {
        [key: string]: any;
    }, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItems>>;
};
/**
 * WorkItemsApi - factory interface
 * @export
 */
export declare const WorkItemsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItem(id: string, approvalItemId: string, axiosOptions?: any): AxiosPromise<WorkItems>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItemsInBulk(id: string, axiosOptions?: any): AxiosPromise<WorkItems>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeWorkItem(id: string, axiosOptions?: any): AxiosPromise<WorkItems>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCompletedWorkItems(ownerId?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<WorkItems>>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountCompletedWorkItems(ownerId?: string, axiosOptions?: any): AxiosPromise<WorkItemsCount>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountWorkItems(ownerId?: string, axiosOptions?: any): AxiosPromise<WorkItemsCount>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {string} id ID of the work item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItem(id: string, axiosOptions?: any): AxiosPromise<WorkItems>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItemsSummary(ownerId?: string, axiosOptions?: any): AxiosPromise<WorkItemsSummary>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkItems(limit?: number, offset?: number, count?: boolean, ownerId?: string, axiosOptions?: any): AxiosPromise<Array<WorkItems>>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItem(id: string, approvalItemId: string, axiosOptions?: any): AxiosPromise<WorkItems>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItemsInBulk(id: string, axiosOptions?: any): AxiosPromise<WorkItems>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request. Accessible to work-item Owner, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN.
     * @summary Forward a Work Item
     * @param {string} id The ID of the work item
     * @param {WorkItemForward} workItemForward
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendWorkItemForward(id: string, workItemForward: WorkItemForward, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {string} id The ID of the work item
     * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitAccountSelection(id: string, requestBody: {
        [key: string]: any;
    }, axiosOptions?: any): AxiosPromise<WorkItems>;
};
/**
 * Request parameters for approveApprovalItem operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiApproveApprovalItemRequest
 */
export interface WorkItemsApiApproveApprovalItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiApproveApprovalItem
     */
    readonly id: string;
    /**
     * The ID of the approval item.
     * @type {string}
     * @memberof WorkItemsApiApproveApprovalItem
     */
    readonly approvalItemId: string;
}
/**
 * Request parameters for approveApprovalItemsInBulk operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiApproveApprovalItemsInBulkRequest
 */
export interface WorkItemsApiApproveApprovalItemsInBulkRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiApproveApprovalItemsInBulk
     */
    readonly id: string;
}
/**
 * Request parameters for completeWorkItem operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiCompleteWorkItemRequest
 */
export interface WorkItemsApiCompleteWorkItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiCompleteWorkItem
     */
    readonly id: string;
}
/**
 * Request parameters for getCompletedWorkItems operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiGetCompletedWorkItemsRequest
 */
export interface WorkItemsApiGetCompletedWorkItemsRequest {
    /**
     * The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @type {string}
     * @memberof WorkItemsApiGetCompletedWorkItems
     */
    readonly ownerId?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsApiGetCompletedWorkItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsApiGetCompletedWorkItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof WorkItemsApiGetCompletedWorkItems
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getCountCompletedWorkItems operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiGetCountCompletedWorkItemsRequest
 */
export interface WorkItemsApiGetCountCompletedWorkItemsRequest {
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsApiGetCountCompletedWorkItems
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for getCountWorkItems operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiGetCountWorkItemsRequest
 */
export interface WorkItemsApiGetCountWorkItemsRequest {
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsApiGetCountWorkItems
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for getWorkItem operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiGetWorkItemRequest
 */
export interface WorkItemsApiGetWorkItemRequest {
    /**
     * ID of the work item.
     * @type {string}
     * @memberof WorkItemsApiGetWorkItem
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkItemsSummary operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiGetWorkItemsSummaryRequest
 */
export interface WorkItemsApiGetWorkItemsSummaryRequest {
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsApiGetWorkItemsSummary
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for listWorkItems operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiListWorkItemsRequest
 */
export interface WorkItemsApiListWorkItemsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsApiListWorkItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsApiListWorkItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof WorkItemsApiListWorkItems
     */
    readonly count?: boolean;
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsApiListWorkItems
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for rejectApprovalItem operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiRejectApprovalItemRequest
 */
export interface WorkItemsApiRejectApprovalItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiRejectApprovalItem
     */
    readonly id: string;
    /**
     * The ID of the approval item.
     * @type {string}
     * @memberof WorkItemsApiRejectApprovalItem
     */
    readonly approvalItemId: string;
}
/**
 * Request parameters for rejectApprovalItemsInBulk operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiRejectApprovalItemsInBulkRequest
 */
export interface WorkItemsApiRejectApprovalItemsInBulkRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiRejectApprovalItemsInBulk
     */
    readonly id: string;
}
/**
 * Request parameters for sendWorkItemForward operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiSendWorkItemForwardRequest
 */
export interface WorkItemsApiSendWorkItemForwardRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiSendWorkItemForward
     */
    readonly id: string;
    /**
     *
     * @type {WorkItemForward}
     * @memberof WorkItemsApiSendWorkItemForward
     */
    readonly workItemForward: WorkItemForward;
}
/**
 * Request parameters for submitAccountSelection operation in WorkItemsApi.
 * @export
 * @interface WorkItemsApiSubmitAccountSelectionRequest
 */
export interface WorkItemsApiSubmitAccountSelectionRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsApiSubmitAccountSelection
     */
    readonly id: string;
    /**
     * Account Selection Data map, keyed on fieldName
     * @type {{ [key: string]: any; }}
     * @memberof WorkItemsApiSubmitAccountSelection
     */
    readonly requestBody: {
        [key: string]: any;
    };
}
/**
 * WorkItemsApi - object-oriented interface
 * @export
 * @class WorkItemsApi
 * @extends {BaseAPI}
 */
export declare class WorkItemsApi extends BaseAPI {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {WorkItemsApiApproveApprovalItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    approveApprovalItem(requestParameters: WorkItemsApiApproveApprovalItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {WorkItemsApiApproveApprovalItemsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    approveApprovalItemsInBulk(requestParameters: WorkItemsApiApproveApprovalItemsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {WorkItemsApiCompleteWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    completeWorkItem(requestParameters: WorkItemsApiCompleteWorkItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {WorkItemsApiGetCompletedWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    getCompletedWorkItems(requestParameters?: WorkItemsApiGetCompletedWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems[], any>>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {WorkItemsApiGetCountCompletedWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    getCountCompletedWorkItems(requestParameters?: WorkItemsApiGetCountCompletedWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsCount, any>>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {WorkItemsApiGetCountWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    getCountWorkItems(requestParameters?: WorkItemsApiGetCountWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsCount, any>>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {WorkItemsApiGetWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    getWorkItem(requestParameters: WorkItemsApiGetWorkItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {WorkItemsApiGetWorkItemsSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    getWorkItemsSummary(requestParameters?: WorkItemsApiGetWorkItemsSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsSummary, any>>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {WorkItemsApiListWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    listWorkItems(requestParameters?: WorkItemsApiListWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems[], any>>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {WorkItemsApiRejectApprovalItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    rejectApprovalItem(requestParameters: WorkItemsApiRejectApprovalItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {WorkItemsApiRejectApprovalItemsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    rejectApprovalItemsInBulk(requestParameters: WorkItemsApiRejectApprovalItemsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request. Accessible to work-item Owner, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN.
     * @summary Forward a Work Item
     * @param {WorkItemsApiSendWorkItemForwardRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    sendWorkItemForward(requestParameters: WorkItemsApiSendWorkItemForwardRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {WorkItemsApiSubmitAccountSelectionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsApi
     */
    submitAccountSelection(requestParameters: WorkItemsApiSubmitAccountSelectionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItems, any>>;
}
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {string} id The workflow execution ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelWorkflowExecution: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {CreateExternalExecuteWorkflowRequest} [createExternalExecuteWorkflowRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createExternalExecuteWorkflow: (id: string, createExternalExecuteWorkflowRequest?: CreateExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow: (createWorkflowRequest: CreateWorkflowRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowExternalTrigger: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {string} id Id of the Workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {string} id Workflow execution ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecution: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {string} id Id of the workflow execution
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutionHistory: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions. To get executions past the first 250 records, you can do the following: 1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows. 2. Get your workflow ID from the response. 3. You can then do either of the following:    - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.   For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.   Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {string} id Workflow ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutions: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompleteWorkflowLibrary: (limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryActions: (limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryOperators: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryTriggers: (limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflows: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {string} id Id of the Workflow
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkflow: (id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {string} id Id of the Workflow
     * @param {WorkflowBody} workflowBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putWorkflow: (id: string, workflowBody: WorkflowBody, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {TestExternalExecuteWorkflowRequest} [testExternalExecuteWorkflowRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testExternalExecuteWorkflow: (id: string, testExternalExecuteWorkflowRequest?: TestExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {string} id Id of the workflow
     * @param {TestWorkflowRequest} testWorkflowRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testWorkflow: (id: string, testWorkflowRequest: TestWorkflowRequest, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export declare const WorkflowsApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {string} id The workflow execution ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelWorkflowExecution(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {CreateExternalExecuteWorkflowRequest} [createExternalExecuteWorkflowRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createExternalExecuteWorkflow(id: string, createExternalExecuteWorkflowRequest?: CreateExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateExternalExecuteWorkflow200Response>>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow(createWorkflowRequest: CreateWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowExternalTrigger(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOAuthClient>>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {string} id Id of the Workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {string} id Workflow execution ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecution(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {string} id Id of the workflow execution
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutionHistory(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowExecutionEvent>>>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions. To get executions past the first 250 records, you can do the following: 1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows. 2. Get your workflow ID from the response. 3. You can then do either of the following:    - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.   For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.   Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {string} id Workflow ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutions(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowExecution>>>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompleteWorkflowLibrary(limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListCompleteWorkflowLibrary200ResponseInner>>>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryActions(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowLibraryAction>>>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryOperators(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowLibraryOperator>>>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryTriggers(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowLibraryTrigger>>>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflows(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workflow>>>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {string} id Id of the Workflow
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkflow(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {string} id Id of the Workflow
     * @param {WorkflowBody} workflowBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putWorkflow(id: string, workflowBody: WorkflowBody, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {TestExternalExecuteWorkflowRequest} [testExternalExecuteWorkflowRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testExternalExecuteWorkflow(id: string, testExternalExecuteWorkflowRequest?: TestExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestExternalExecuteWorkflow200Response>>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {string} id Id of the workflow
     * @param {TestWorkflowRequest} testWorkflowRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testWorkflow(id: string, testWorkflowRequest: TestWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestWorkflow200Response>>;
};
/**
 * WorkflowsApi - factory interface
 * @export
 */
export declare const WorkflowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {string} id The workflow execution ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelWorkflowExecution(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {CreateExternalExecuteWorkflowRequest} [createExternalExecuteWorkflowRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createExternalExecuteWorkflow(id: string, createExternalExecuteWorkflowRequest?: CreateExternalExecuteWorkflowRequest, axiosOptions?: any): AxiosPromise<CreateExternalExecuteWorkflow200Response>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {CreateWorkflowRequest} createWorkflowRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow(createWorkflowRequest: CreateWorkflowRequest, axiosOptions?: any): AxiosPromise<Workflow>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowExternalTrigger(id: string, axiosOptions?: any): AxiosPromise<WorkflowOAuthClient>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {string} id Id of the Workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow(id: string, axiosOptions?: any): AxiosPromise<Workflow>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {string} id Workflow execution ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecution(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {string} id Id of the workflow execution
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutionHistory(id: string, axiosOptions?: any): AxiosPromise<Array<WorkflowExecutionEvent>>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions. To get executions past the first 250 records, you can do the following: 1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows. 2. Get your workflow ID from the response. 3. You can then do either of the following:    - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.   For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.   Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {string} id Workflow ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutions(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<WorkflowExecution>>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompleteWorkflowLibrary(limit?: number, offset?: number, axiosOptions?: any): AxiosPromise<Array<ListCompleteWorkflowLibrary200ResponseInner>>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryActions(limit?: number, offset?: number, filters?: string, axiosOptions?: any): AxiosPromise<Array<WorkflowLibraryAction>>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryOperators(axiosOptions?: any): AxiosPromise<Array<WorkflowLibraryOperator>>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryTriggers(limit?: number, offset?: number, filters?: string, axiosOptions?: any): AxiosPromise<Array<WorkflowLibraryTrigger>>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflows(axiosOptions?: any): AxiosPromise<Array<Workflow>>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {string} id Id of the Workflow
     * @param {Array<JsonPatchOperation>} jsonPatchOperation
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkflow(id: string, jsonPatchOperation: Array<JsonPatchOperation>, axiosOptions?: any): AxiosPromise<Workflow>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {string} id Id of the Workflow
     * @param {WorkflowBody} workflowBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putWorkflow(id: string, workflowBody: WorkflowBody, axiosOptions?: any): AxiosPromise<Workflow>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {TestExternalExecuteWorkflowRequest} [testExternalExecuteWorkflowRequest]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testExternalExecuteWorkflow(id: string, testExternalExecuteWorkflowRequest?: TestExternalExecuteWorkflowRequest, axiosOptions?: any): AxiosPromise<TestExternalExecuteWorkflow200Response>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {string} id Id of the workflow
     * @param {TestWorkflowRequest} testWorkflowRequest
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testWorkflow(id: string, testWorkflowRequest: TestWorkflowRequest, axiosOptions?: any): AxiosPromise<TestWorkflow200Response>;
};
/**
 * Request parameters for cancelWorkflowExecution operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiCancelWorkflowExecutionRequest
 */
export interface WorkflowsApiCancelWorkflowExecutionRequest {
    /**
     * The workflow execution ID
     * @type {string}
     * @memberof WorkflowsApiCancelWorkflowExecution
     */
    readonly id: string;
}
/**
 * Request parameters for createExternalExecuteWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiCreateExternalExecuteWorkflowRequest
 */
export interface WorkflowsApiCreateExternalExecuteWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsApiCreateExternalExecuteWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {CreateExternalExecuteWorkflowRequest}
     * @memberof WorkflowsApiCreateExternalExecuteWorkflow
     */
    readonly createExternalExecuteWorkflowRequest?: CreateExternalExecuteWorkflowRequest;
}
/**
 * Request parameters for createWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiCreateWorkflowRequest
 */
export interface WorkflowsApiCreateWorkflowRequest {
    /**
     *
     * @type {CreateWorkflowRequest}
     * @memberof WorkflowsApiCreateWorkflow
     */
    readonly createWorkflowRequest: CreateWorkflowRequest;
}
/**
 * Request parameters for createWorkflowExternalTrigger operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiCreateWorkflowExternalTriggerRequest
 */
export interface WorkflowsApiCreateWorkflowExternalTriggerRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsApiCreateWorkflowExternalTrigger
     */
    readonly id: string;
}
/**
 * Request parameters for deleteWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiDeleteWorkflowRequest
 */
export interface WorkflowsApiDeleteWorkflowRequest {
    /**
     * Id of the Workflow
     * @type {string}
     * @memberof WorkflowsApiDeleteWorkflow
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetWorkflowRequest
 */
export interface WorkflowsApiGetWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsApiGetWorkflow
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflowExecution operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetWorkflowExecutionRequest
 */
export interface WorkflowsApiGetWorkflowExecutionRequest {
    /**
     * Workflow execution ID.
     * @type {string}
     * @memberof WorkflowsApiGetWorkflowExecution
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflowExecutionHistory operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetWorkflowExecutionHistoryRequest
 */
export interface WorkflowsApiGetWorkflowExecutionHistoryRequest {
    /**
     * Id of the workflow execution
     * @type {string}
     * @memberof WorkflowsApiGetWorkflowExecutionHistory
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflowExecutions operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiGetWorkflowExecutionsRequest
 */
export interface WorkflowsApiGetWorkflowExecutionsRequest {
    /**
     * Workflow ID.
     * @type {string}
     * @memberof WorkflowsApiGetWorkflowExecutions
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiGetWorkflowExecutions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiGetWorkflowExecutions
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof WorkflowsApiGetWorkflowExecutions
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @type {string}
     * @memberof WorkflowsApiGetWorkflowExecutions
     */
    readonly filters?: string;
}
/**
 * Request parameters for listCompleteWorkflowLibrary operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiListCompleteWorkflowLibraryRequest
 */
export interface WorkflowsApiListCompleteWorkflowLibraryRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiListCompleteWorkflowLibrary
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiListCompleteWorkflowLibrary
     */
    readonly offset?: number;
}
/**
 * Request parameters for listWorkflowLibraryActions operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiListWorkflowLibraryActionsRequest
 */
export interface WorkflowsApiListWorkflowLibraryActionsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiListWorkflowLibraryActions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiListWorkflowLibraryActions
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @type {string}
     * @memberof WorkflowsApiListWorkflowLibraryActions
     */
    readonly filters?: string;
}
/**
 * Request parameters for listWorkflowLibraryTriggers operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiListWorkflowLibraryTriggersRequest
 */
export interface WorkflowsApiListWorkflowLibraryTriggersRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiListWorkflowLibraryTriggers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsApiListWorkflowLibraryTriggers
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @type {string}
     * @memberof WorkflowsApiListWorkflowLibraryTriggers
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiPatchWorkflowRequest
 */
export interface WorkflowsApiPatchWorkflowRequest {
    /**
     * Id of the Workflow
     * @type {string}
     * @memberof WorkflowsApiPatchWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperation>}
     * @memberof WorkflowsApiPatchWorkflow
     */
    readonly jsonPatchOperation: Array<JsonPatchOperation>;
}
/**
 * Request parameters for putWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiPutWorkflowRequest
 */
export interface WorkflowsApiPutWorkflowRequest {
    /**
     * Id of the Workflow
     * @type {string}
     * @memberof WorkflowsApiPutWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {WorkflowBody}
     * @memberof WorkflowsApiPutWorkflow
     */
    readonly workflowBody: WorkflowBody;
}
/**
 * Request parameters for testExternalExecuteWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiTestExternalExecuteWorkflowRequest
 */
export interface WorkflowsApiTestExternalExecuteWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsApiTestExternalExecuteWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {TestExternalExecuteWorkflowRequest}
     * @memberof WorkflowsApiTestExternalExecuteWorkflow
     */
    readonly testExternalExecuteWorkflowRequest?: TestExternalExecuteWorkflowRequest;
}
/**
 * Request parameters for testWorkflow operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiTestWorkflowRequest
 */
export interface WorkflowsApiTestWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsApiTestWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {TestWorkflowRequest}
     * @memberof WorkflowsApiTestWorkflow
     */
    readonly testWorkflowRequest: TestWorkflowRequest;
}
/**
 * WorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsApi extends BaseAPI {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {WorkflowsApiCancelWorkflowExecutionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    cancelWorkflowExecution(requestParameters: WorkflowsApiCancelWorkflowExecutionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {WorkflowsApiCreateExternalExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    createExternalExecuteWorkflow(requestParameters: WorkflowsApiCreateExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateExternalExecuteWorkflow200Response, any>>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {WorkflowsApiCreateWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    createWorkflow(requestParameters: WorkflowsApiCreateWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Workflow, any>>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {WorkflowsApiCreateWorkflowExternalTriggerRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    createWorkflowExternalTrigger(requestParameters: WorkflowsApiCreateWorkflowExternalTriggerRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowOAuthClient, any>>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {WorkflowsApiDeleteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    deleteWorkflow(requestParameters: WorkflowsApiDeleteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {WorkflowsApiGetWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    getWorkflow(requestParameters: WorkflowsApiGetWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Workflow, any>>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {WorkflowsApiGetWorkflowExecutionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    getWorkflowExecution(requestParameters: WorkflowsApiGetWorkflowExecutionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {WorkflowsApiGetWorkflowExecutionHistoryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    getWorkflowExecutionHistory(requestParameters: WorkflowsApiGetWorkflowExecutionHistoryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowExecutionEvent[], any>>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions. To get executions past the first 250 records, you can do the following: 1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows. 2. Get your workflow ID from the response. 3. You can then do either of the following:    - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.   For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.   Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {WorkflowsApiGetWorkflowExecutionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    getWorkflowExecutions(requestParameters: WorkflowsApiGetWorkflowExecutionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowExecution[], any>>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {WorkflowsApiListCompleteWorkflowLibraryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    listCompleteWorkflowLibrary(requestParameters?: WorkflowsApiListCompleteWorkflowLibraryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListCompleteWorkflowLibrary200ResponseInner[], any>>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {WorkflowsApiListWorkflowLibraryActionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    listWorkflowLibraryActions(requestParameters?: WorkflowsApiListWorkflowLibraryActionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowLibraryAction[], any>>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    listWorkflowLibraryOperators(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowLibraryOperator[], any>>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {WorkflowsApiListWorkflowLibraryTriggersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    listWorkflowLibraryTriggers(requestParameters?: WorkflowsApiListWorkflowLibraryTriggersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowLibraryTrigger[], any>>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    listWorkflows(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Workflow[], any>>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {WorkflowsApiPatchWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    patchWorkflow(requestParameters: WorkflowsApiPatchWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Workflow, any>>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {WorkflowsApiPutWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    putWorkflow(requestParameters: WorkflowsApiPutWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Workflow, any>>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {WorkflowsApiTestExternalExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    testExternalExecuteWorkflow(requestParameters: WorkflowsApiTestExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestExternalExecuteWorkflow200Response, any>>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {WorkflowsApiTestWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    testWorkflow(requestParameters: WorkflowsApiTestWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestWorkflow200Response, any>>;
}
