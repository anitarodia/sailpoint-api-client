"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Identity Security Cloud Beta API
 * Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
 *
 * The version of the OpenAPI document: 3.1.0-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountCorrelatedAccountBetaTypeEnum = exports.AccountBetaOriginEnum = exports.AccountAttributesChangedSourceBetaTypeEnum = exports.AccountAttributesChangedIdentityBetaTypeEnum = exports.AccountAttributesChangedAccountBetaTypeEnum = exports.AccountAllOfSourceOwnerBetaTypeEnum = exports.AccountAllOfOwnerIdentityBetaTypeEnum = exports.AccountAllOfOwnerGroupBetaTypeEnum = exports.AccountAllOfIdentityBetaTypeEnum = exports.AccountAllOfBetaOriginEnum = exports.AccountAggregationStatusBetaStatusEnum = exports.AccountAggregationCompletedSourceBetaTypeEnum = exports.AccountAggregationCompletedBetaStatusEnum = exports.AccountAggregationBetaStatusEnum = exports.AccountActivityItemOperationBeta = exports.AccountActivityApprovalStatusBeta = exports.AccountActionBetaActionEnum = exports.AccessTypeBeta = exports.AccessRequestTypeBeta = exports.AccessRequestRecommendationItemTypeBeta = exports.AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum = exports.AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum = exports.AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum = exports.AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum = exports.AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum = exports.AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum = exports.AccessRequestPostApprovalRequestedByBetaTypeEnum = exports.AccessRequestPhasesBetaResultEnum = exports.AccessRequestPhasesBetaStateEnum = exports.AccessRequestItemResponseBetaDecisionEnum = exports.AccessRequestItemBetaTypeEnum = exports.AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum = exports.AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum = exports.AccessRequestDynamicApproverRequestedByBetaTypeEnum = exports.AccessRequestDynamicApprover1BetaTypeEnum = exports.AccessProfileUsageUsedByInnerBetaTypeEnum = exports.AccessProfileSourceRefBetaTypeEnum = exports.AccessProfileRefBetaTypeEnum = exports.AccessProfileApprovalSchemeBetaApproverTypeEnum = exports.AccessItemReviewedByBetaTypeEnum = exports.AccessItemRequesterDtoBetaTypeEnum = exports.AccessItemRequesterBetaTypeEnum = exports.AccessItemRequestedForDtoBetaTypeEnum = exports.AccessItemRefBetaTypeEnum = exports.AccessItemOwnerDtoBetaTypeEnum = exports.AccessItemDiffBetaEventTypeEnum = exports.AccessItemApproverDtoBetaTypeEnum = exports.AccessCriteriaCriteriaListInnerBetaTypeEnum = exports.AccessConstraintBetaOperatorEnum = exports.AccessConstraintBetaTypeEnum = void 0;
exports.CertificationTaskBetaStatusEnum = exports.CertificationTaskBetaTargetTypeEnum = exports.CertificationTaskBetaTypeEnum = exports.CertificationReferenceDtoBetaTypeEnum = exports.CertificationReferenceBetaTypeEnum = exports.CertificationPhaseBeta = exports.CampaignTemplateOwnerRefBetaTypeEnum = exports.CampaignReportBetaStatusEnum = exports.CampaignReportBetaTypeEnum = exports.CampaignReferenceBetaMandatoryCommentRequirementEnum = exports.CampaignReferenceBetaCorrelatedStatusEnum = exports.CampaignReferenceBetaCampaignTypeEnum = exports.CampaignReferenceBetaTypeEnum = exports.CampaignGeneratedCampaignBetaStatusEnum = exports.CampaignGeneratedCampaignBetaTypeEnum = exports.CampaignEndedCampaignBetaStatusEnum = exports.CampaignEndedCampaignBetaTypeEnum = exports.CampaignBetaMandatoryCommentRequirementEnum = exports.CampaignBetaCorrelatedStatusEnum = exports.CampaignBetaStatusEnum = exports.CampaignBetaTypeEnum = exports.CampaignAlertBetaLevelEnum = exports.CampaignActivatedCampaignBetaStatusEnum = exports.CampaignActivatedCampaignBetaTypeEnum = exports.BulkWorkgroupMembersRequestInnerBetaTypeEnum = exports.BulkTaggedObjectBetaOperationEnum = exports.BeforeProvisioningRuleDtoBetaTypeEnum = exports.AuthProfileBetaTypeEnum = exports.AttributeDefinitionTypeBeta = exports.AttributeDefinitionSchemaBetaTypeEnum = exports.AttrSyncSourceBetaTypeEnum = exports.ApprovalStatusDtoOriginalOwnerBetaTypeEnum = exports.ApprovalStatusDtoCurrentOwnerBetaTypeEnum = exports.ApprovalStatusBeta = exports.ApprovalSchemeForRoleBetaApproverTypeEnum = exports.ApprovalSchemeBeta = exports.ApprovalIdentityBetaTypeEnum = exports.ApprovalBetaStatusEnum = exports.ApprovalBetaApprovalCriteriaEnum = exports.ApprovalBetaPriorityEnum = exports.AdminReviewReassignReassignToBetaTypeEnum = exports.AccountsCollectedForAggregationSourceBetaTypeEnum = exports.AccountsCollectedForAggregationBetaStatusEnum = exports.AccountUncorrelatedSourceBetaTypeEnum = exports.AccountUncorrelatedIdentityBetaTypeEnum = exports.AccountUncorrelatedAccountBetaTypeEnum = exports.AccountStatusChangedStatusChangeBetaNewStatusEnum = exports.AccountStatusChangedStatusChangeBetaPreviousStatusEnum = exports.AccountCorrelatedSourceBetaTypeEnum = exports.AccountCorrelatedIdentityBetaTypeEnum = void 0;
exports.FormInstanceCreatedByBetaTypeEnum = exports.FormElementValidationsSetBetaValidationTypeEnum = exports.FormElementDynamicDataSourceConfigBetaObjectTypeEnum = exports.FormElementDynamicDataSourceConfigBetaIndicesEnum = exports.FormElementDynamicDataSourceBetaDataSourceTypeEnum = exports.FormElementBetaElementTypeEnum = exports.FormDefinitionSelfImportExportDtoBetaTypeEnum = exports.FormDefinitionInputBetaTypeEnum = exports.FormConditionBetaRuleOperatorEnum = exports.ExpressionBetaOperatorEnum = exports.ExportPayloadBetaIncludeTypesEnum = exports.ExportPayloadBetaExcludeTypesEnum = exports.ExportOptionsBetaIncludeTypesEnum = exports.ExportOptionsBetaExcludeTypesEnum = exports.ExecutionStatusBeta = exports.ExceptionCriteriaCriteriaListInnerBetaTypeEnum = exports.EntitlementRefBetaTypeEnum = exports.EntitlementOwnerBetaTypeEnum = exports.EntitlementApprovalSchemeBetaApproverTypeEnum = exports.EmailStatusDtoBetaVerificationStatusEnum = exports.DtoTypeBeta = exports.Delete202ResponseBetaTypeEnum = exports.DateCompareBetaOperatorEnum = exports.CustomPasswordInstructionBetaPageIdEnum = exports.CreateFormInstanceRequestBetaStateEnum = exports.CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum = exports.CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum = exports.CorrelatedGovernanceEventBetaTypeEnum = exports.ConnectorRuleValidationResponseBetaStateEnum = exports.ConnectorRuleUpdateRequestBetaTypeEnum = exports.ConnectorRuleResponseBetaTypeEnum = exports.ConnectorRuleCreateRequestBetaTypeEnum = exports.ConnectedObjectTypeBeta = exports.ConfigTypeEnumCamelBeta = exports.ConfigTypeEnumBeta = exports.ConditionRuleBetaValueTypeEnum = exports.ConditionRuleBetaOperatorEnum = exports.ConditionRuleBetaSourceTypeEnum = exports.ConditionEffectBetaEffectTypeEnum = exports.CompletionStatusBeta = exports.CompletedApprovalStateBeta = exports.CompletedApprovalReviewedByBetaTypeEnum = exports.CompleteCampaignOptionsBetaAutoCompleteActionEnum = exports.CommonAccessTypeBeta = exports.CommonAccessItemStateBeta = exports.CommentDtoAuthorBetaTypeEnum = exports.CommentDto1AuthorBetaTypeEnum = exports.CloseAccessRequestBetaCompletionStatusEnum = exports.CloseAccessRequestBetaExecutionStatusEnum = exports.ClientTypeBeta = void 0;
exports.LocaleOriginBeta = exports.LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum = exports.LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum = exports.LoadAccountsTaskTaskMessagesInnerBetaTypeEnum = exports.LoadAccountsTaskTaskBetaCompletionStatusEnum = exports.ListWorkgroupMembers200ResponseInnerBetaTypeEnum = exports.LatestOutlierSummaryBetaTypeEnum = exports.KbaAuthResponseBetaStatusEnum = exports.JsonPatchOperationBetaOpEnum = exports.InvocationStatusTypeBeta = exports.ImportOptionsBetaDefaultReferencesEnum = exports.ImportOptionsBetaIncludeTypesEnum = exports.ImportOptionsBetaExcludeTypesEnum = exports.ImportObjectBetaTypeEnum = exports.ImportAccountsRequestBetaDisableOptimizationEnum = exports.ImportAccountsRequest1BetaDisableOptimizationEnum = exports.IdentityWithNewAccessAccessRefsInnerBetaTypeEnum = exports.IdentitySyncJobBetaStatusEnum = exports.IdentityProfileAllOfOwnerBetaTypeEnum = exports.IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum = exports.IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum = exports.IdentityPreviewResponseIdentityBetaTypeEnum = exports.IdentityDtoManagerRefBetaTypeEnum = exports.IdentityDtoBetaIdentityStatusEnum = exports.IdentityDtoBetaProcessingStateEnum = exports.IdentityDeletedIdentityBetaTypeEnum = exports.IdentityCreatedIdentityBetaTypeEnum = exports.IdentityCertificationTaskBetaStatusEnum = exports.IdentityCertificationTaskBetaTypeEnum = exports.IdentityBetaIdentityStatusEnum = exports.IdentityBetaProcessingStateEnum = exports.IdentityAttributesChangedIdentityBetaTypeEnum = exports.HttpDispatchModeBeta = exports.HttpAuthenticationTypeBeta = exports.GrantTypeBeta = exports.FullcampaignBetaMandatoryCommentRequirementEnum = exports.FullcampaignBetaCorrelatedStatusEnum = exports.FullcampaignBetaStatusEnum = exports.FullcampaignBetaTypeEnum = exports.FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum = exports.FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum = exports.FullcampaignAllOfSearchCampaignInfoBetaTypeEnum = exports.FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum = exports.FullcampaignAllOfFilterBetaTypeEnum = exports.FullcampaignAllOfBetaMandatoryCommentRequirementEnum = exports.FullcampaignAllOfBetaCorrelatedStatusEnum = exports.FormUsedByBetaTypeEnum = exports.FormOwnerBetaTypeEnum = exports.FormInstanceResponseBetaStateEnum = exports.FormInstanceRecipientBetaTypeEnum = void 0;
exports.RequestableObjectTypeBeta = exports.RequestableObjectRequestStatusBeta = exports.RequestableObjectReferenceBetaTypeEnum = exports.ReportTypeBeta = exports.ReportResultReferenceBetaStatusEnum = exports.ReportResultReferenceBetaTypeEnum = exports.ReportResultReferenceAllOfBetaStatusEnum = exports.RecommendationResponseBetaRecommendationEnum = exports.ReassignmentTypeEnumBeta = exports.ReassignmentTypeBeta = exports.ReassignReferenceBetaTypeEnum = exports.ProvisioningStateBeta = exports.ProvisioningCriteriaOperationBeta = exports.ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum = exports.ProvisioningCompletedRequesterBetaTypeEnum = exports.ProvisioningCompletedRecipientBetaTypeEnum = exports.ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum = exports.ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum = exports.ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum = exports.ProductBetaOrgTypeEnum = exports.PreApprovalTriggerDetailsBetaDecisionEnum = exports.PendingApprovalActionBeta = exports.PatchPotentialRoleRequestInnerBetaOpEnum = exports.PatOwnerBetaTypeEnum = exports.PasswordStatusBetaStateEnum = exports.PasswordChangeResponseBetaStateEnum = exports.OwnerReferenceSegmentsBetaTypeEnum = exports.OwnerReferenceDtoBetaTypeEnum = exports.OwnerReferenceBetaTypeEnum = exports.OwnerDtoBetaTypeEnum = exports.OutliersContributingFeatureAccessItemsBetaAccessTypeEnum = exports.OutlierSummaryBetaTypeEnum = exports.OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum = exports.OutlierContributingFeatureBetaValueTypeEnum = exports.OutlierBetaUnignoreTypeEnum = exports.OutlierBetaTypeEnum = exports.NonEmployeeSchemaAttributeTypeBeta = exports.NonEmployeeBulkUploadStatusBetaStatusEnum = exports.NonEmployeeBulkUploadJobBetaStatusEnum = exports.NativeChangeDetectionConfigBetaOperationsEnum = exports.NamedConstructsBeta = exports.MfaConfigTestResponseBetaStateEnum = exports.MediumBeta = exports.ManualWorkItemStateBeta = exports.ManualWorkItemDetailsOriginalOwnerBetaTypeEnum = exports.ManualWorkItemDetailsCurrentOwnerBetaTypeEnum = exports.ManagedClusterTypesBeta = exports.ManagedClientTypeBeta = exports.ManagedClientStatusEnumBeta = exports.MailFromAttributesBetaMailFromDomainStatusEnum = void 0;
exports.SourceCreatedActorBetaTypeEnum = exports.SourceClusterDtoBetaTypeEnum = exports.SourceClusterBetaTypeEnum = exports.SourceBetaStatusEnum = exports.SourceBetaFeaturesEnum = exports.SourceBeforeProvisioningRuleBetaTypeEnum = exports.SourceAccountCorrelationRuleBetaTypeEnum = exports.SourceAccountCorrelationConfigBetaTypeEnum = exports.SodViolationContextCheckCompletedBetaStateEnum = exports.SodViolationContextCheckCompleted1BetaStateEnum = exports.SodReportResultDtoBetaTypeEnum = exports.SodRecipientBetaTypeEnum = exports.SodPolicyOwnerRefBetaTypeEnum = exports.SodPolicyDtoBetaTypeEnum = exports.SodPolicyBetaTypeEnum = exports.SodPolicyBetaStateEnum = exports.SlimcampaignBetaCorrelatedStatusEnum = exports.SlimcampaignBetaStatusEnum = exports.SlimcampaignBetaTypeEnum = exports.ServiceDeskSourceBetaTypeEnum = exports.SendTokenResponseBetaStatusEnum = exports.SendTokenRequestBetaDeliveryTypeEnum = exports.SendTestNotificationRequestDtoBetaMediumEnum = exports.SendAccountVerificationRequestBetaViaEnum = exports.SelfImportExportDtoBetaTypeEnum = exports.SelectorTypeBeta = exports.SedAssigneeBetaTypeEnum = exports.SchemaBetaFeaturesEnum = exports.ScheduledAttributesBetaFrequencyEnum = exports.ScheduleTypeBeta = exports.ScheduleMonthsBetaTypeEnum = exports.ScheduleHoursBetaTypeEnum = exports.ScheduleDaysBetaTypeEnum = exports.ScheduleBetaTypeEnum = exports.RoleMiningSessionStateBeta = exports.RoleMiningSessionScopingMethodBeta = exports.RoleMiningRoleTypeBeta = exports.RoleMiningPotentialRoleProvisionStateBeta = exports.RoleMiningPotentialRoleExportStateBeta = exports.RoleMembershipSelectorTypeBeta = exports.RoleInsightsResponseBetaStatusEnum = exports.RoleCriteriaOperationBeta = exports.RoleCriteriaKeyTypeBeta = exports.RoleAssignmentSourceTypeBeta = exports.ReviewerBetaTypeEnum = exports.RequestedItemStatusSodViolationContextBetaStateEnum = exports.RequestedItemStatusRequestedForBetaTypeEnum = exports.RequestedItemStatusRequestStateBeta = exports.RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum = exports.RequestedItemStatusBetaTypeEnum = void 0;
exports.WorkflowExecutionBetaStatusEnum = exports.WorkflowBodyOwnerBetaTypeEnum = exports.WorkflowAllOfCreatorBetaTypeEnum = exports.WorkItemTypeBeta = exports.WorkItemStateBeta = exports.ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum = exports.ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum = exports.ViolationContextPolicyBetaTypeEnum = exports.VerificationResponseBetaStatusEnum = exports.VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum = exports.VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum = exports.VAClusterStatusChangeEventBetaTypeEnum = exports.UsageTypeBeta = exports.TriggerTypeBeta = exports.TransformReadBetaTypeEnum = exports.TransformBetaTypeEnum = exports.TokenAuthResponseBetaStatusEnum = exports.TokenAuthRequestBetaDeliveryTypeEnum = exports.TemplateDtoDefaultBetaMediumEnum = exports.TemplateDtoBetaMediumEnum = exports.TemplateBulkDeleteDtoBetaMediumEnum = exports.TaskStatusMessageBetaTypeEnum = exports.TaskStatusBetaCompletionStatusEnum = exports.TaskStatusBetaTypeEnum = exports.TaskResultSimplifiedBetaCompletionStatusEnum = exports.TaskResultDtoBetaTypeEnum = exports.TargetBetaTypeEnum = exports.TaggedObjectObjectRefBetaTypeEnum = exports.TaggedObjectDtoBetaTypeEnum = exports.SubscriptionTypeBeta = exports.SubscriptionPatchRequestInnerBetaOpEnum = exports.StatusResponseBetaStatusEnum = exports.StandardLevelBeta = exports.SpConfigJobBetaTypeEnum = exports.SpConfigJobBetaStatusEnum = exports.SpConfigImportJobStatusBetaTypeEnum = exports.SpConfigImportJobStatusBetaStatusEnum = exports.SpConfigExportJobStatusBetaTypeEnum = exports.SpConfigExportJobStatusBetaStatusEnum = exports.SpConfigExportJobBetaTypeEnum = exports.SpConfigExportJobBetaStatusEnum = exports.SourceUsageStatusBetaStatusEnum = exports.SourceUpdatedActorBetaTypeEnum = exports.SourceSyncJobBetaStatusEnum = exports.SourceSchemasInnerBetaTypeEnum = exports.SourcePasswordPoliciesInnerBetaTypeEnum = exports.SourceOwnerBetaTypeEnum = exports.SourceManagerCorrelationRuleBetaTypeEnum = exports.SourceManagementWorkgroupBetaTypeEnum = exports.SourceDeletedActorBetaTypeEnum = void 0;
exports.ApprovalsBetaApiFactory = exports.ApprovalsBetaApiFp = exports.ApprovalsBetaApiAxiosParamCreator = exports.ApplicationDiscoveryBetaApi = exports.ApplicationDiscoveryBetaApiFactory = exports.ApplicationDiscoveryBetaApiFp = exports.ApplicationDiscoveryBetaApiAxiosParamCreator = exports.AccountsBetaApi = exports.AccountsBetaApiFactory = exports.AccountsBetaApiFp = exports.AccountsBetaApiAxiosParamCreator = exports.AccountUsagesBetaApi = exports.AccountUsagesBetaApiFactory = exports.AccountUsagesBetaApiFp = exports.AccountUsagesBetaApiAxiosParamCreator = exports.AccountAggregationsBetaApi = exports.AccountAggregationsBetaApiFactory = exports.AccountAggregationsBetaApiFp = exports.AccountAggregationsBetaApiAxiosParamCreator = exports.AccountActivitiesBetaApi = exports.AccountActivitiesBetaApiFactory = exports.AccountActivitiesBetaApiFp = exports.AccountActivitiesBetaApiAxiosParamCreator = exports.AccessRequestsBetaApi = exports.AccessRequestsBetaApiFactory = exports.AccessRequestsBetaApiFp = exports.AccessRequestsBetaApiAxiosParamCreator = exports.AccessRequestIdentityMetricsBetaApi = exports.AccessRequestIdentityMetricsBetaApiFactory = exports.AccessRequestIdentityMetricsBetaApiFp = exports.AccessRequestIdentityMetricsBetaApiAxiosParamCreator = exports.AccessRequestApprovalsBetaApi = exports.AccessRequestApprovalsBetaApiFactory = exports.AccessRequestApprovalsBetaApiFp = exports.AccessRequestApprovalsBetaApiAxiosParamCreator = exports.AccessProfilesBetaApi = exports.AccessProfilesBetaApiFactory = exports.AccessProfilesBetaApiFp = exports.AccessProfilesBetaApiAxiosParamCreator = exports.AccessModelMetadataBetaApi = exports.AccessModelMetadataBetaApiFactory = exports.AccessModelMetadataBetaApiFp = exports.AccessModelMetadataBetaApiAxiosParamCreator = exports.WorkgroupDtoOwnerBetaTypeEnum = exports.WorkgroupConnectionDtoBetaConnectionTypeEnum = exports.WorkflowTriggerBetaTypeEnum = exports.WorkflowModifiedByBetaTypeEnum = exports.WorkflowLibraryTriggerBetaTypeEnum = exports.WorkflowLibraryFormFieldsBetaTypeEnum = exports.WorkflowExecutionEventBetaTypeEnum = void 0;
exports.IAIOutliersBetaApiAxiosParamCreator = exports.IAIMessageCatalogsBetaApi = exports.IAIMessageCatalogsBetaApiFactory = exports.IAIMessageCatalogsBetaApiFp = exports.IAIMessageCatalogsBetaApiAxiosParamCreator = exports.IAICommonAccessBetaApi = exports.IAICommonAccessBetaApiFactory = exports.IAICommonAccessBetaApiFp = exports.IAICommonAccessBetaApiAxiosParamCreator = exports.IAIAccessRequestRecommendationsBetaApi = exports.IAIAccessRequestRecommendationsBetaApiFactory = exports.IAIAccessRequestRecommendationsBetaApiFp = exports.IAIAccessRequestRecommendationsBetaApiAxiosParamCreator = exports.GovernanceGroupsBetaApi = exports.GovernanceGroupsBetaApiFactory = exports.GovernanceGroupsBetaApiFp = exports.GovernanceGroupsBetaApiAxiosParamCreator = exports.EntitlementsBetaApi = exports.EntitlementsBetaApiFactory = exports.EntitlementsBetaApiFp = exports.EntitlementsBetaApiAxiosParamCreator = exports.CustomPasswordInstructionsBetaApi = exports.CustomPasswordInstructionsBetaApiFactory = exports.CustomPasswordInstructionsBetaApiFp = exports.CustomPasswordInstructionsBetaApiAxiosParamCreator = exports.CustomFormsBetaApi = exports.CustomFormsBetaApiFactory = exports.CustomFormsBetaApiFp = exports.CustomFormsBetaApiAxiosParamCreator = exports.ConnectorsBetaApi = exports.ConnectorsBetaApiFactory = exports.ConnectorsBetaApiFp = exports.ConnectorsBetaApiAxiosParamCreator = exports.ConnectorRuleManagementBetaApi = exports.ConnectorRuleManagementBetaApiFactory = exports.ConnectorRuleManagementBetaApiFp = exports.ConnectorRuleManagementBetaApiAxiosParamCreator = exports.CertificationsBetaApi = exports.CertificationsBetaApiFactory = exports.CertificationsBetaApiFp = exports.CertificationsBetaApiAxiosParamCreator = exports.CertificationCampaignsBetaApi = exports.CertificationCampaignsBetaApiFactory = exports.CertificationCampaignsBetaApiFp = exports.CertificationCampaignsBetaApiAxiosParamCreator = exports.AuthProfileBetaApi = exports.AuthProfileBetaApiFactory = exports.AuthProfileBetaApiFp = exports.AuthProfileBetaApiAxiosParamCreator = exports.ApprovalsBetaApi = void 0;
exports.ManagedClientsBetaApiFactory = exports.ManagedClientsBetaApiFp = exports.ManagedClientsBetaApiAxiosParamCreator = exports.MFAControllerBetaApi = exports.MFAControllerBetaApiFactory = exports.MFAControllerBetaApiFp = exports.MFAControllerBetaApiAxiosParamCreator = exports.MFAConfigurationBetaApi = exports.MFAConfigurationBetaApiFactory = exports.MFAConfigurationBetaApiFp = exports.MFAConfigurationBetaApiAxiosParamCreator = exports.LifecycleStatesBetaApi = exports.LifecycleStatesBetaApiFactory = exports.LifecycleStatesBetaApiFp = exports.LifecycleStatesBetaApiAxiosParamCreator = exports.IdentityProfilesBetaApi = exports.IdentityProfilesBetaApiFactory = exports.IdentityProfilesBetaApiFp = exports.IdentityProfilesBetaApiAxiosParamCreator = exports.IdentityHistoryBetaApi = exports.IdentityHistoryBetaApiFactory = exports.IdentityHistoryBetaApiFp = exports.IdentityHistoryBetaApiAxiosParamCreator = exports.IdentityAttributesBetaApi = exports.IdentityAttributesBetaApiFactory = exports.IdentityAttributesBetaApiFp = exports.IdentityAttributesBetaApiAxiosParamCreator = exports.IdentitiesBetaApi = exports.IdentitiesBetaApiFactory = exports.IdentitiesBetaApiFp = exports.IdentitiesBetaApiAxiosParamCreator = exports.IconsBetaApi = exports.IconsBetaApiFactory = exports.IconsBetaApiFp = exports.IconsBetaApiAxiosParamCreator = exports.IAIRoleMiningBetaApi = exports.IAIRoleMiningBetaApiFactory = exports.IAIRoleMiningBetaApiFp = exports.IAIRoleMiningBetaApiAxiosParamCreator = exports.IAIRecommendationsBetaApi = exports.IAIRecommendationsBetaApiFactory = exports.IAIRecommendationsBetaApiFp = exports.IAIRecommendationsBetaApiAxiosParamCreator = exports.IAIPeerGroupStrategiesBetaApi = exports.IAIPeerGroupStrategiesBetaApiFactory = exports.IAIPeerGroupStrategiesBetaApiFp = exports.IAIPeerGroupStrategiesBetaApiAxiosParamCreator = exports.IAIOutliersBetaApi = exports.IAIOutliersBetaApiFactory = exports.IAIOutliersBetaApiFp = void 0;
exports.RequestableObjectsBetaApiAxiosParamCreator = exports.PublicIdentitiesConfigBetaApi = exports.PublicIdentitiesConfigBetaApiFactory = exports.PublicIdentitiesConfigBetaApiFp = exports.PublicIdentitiesConfigBetaApiAxiosParamCreator = exports.PersonalAccessTokensBetaApi = exports.PersonalAccessTokensBetaApiFactory = exports.PersonalAccessTokensBetaApiFp = exports.PersonalAccessTokensBetaApiAxiosParamCreator = exports.PasswordSyncGroupsBetaApi = exports.PasswordSyncGroupsBetaApiFactory = exports.PasswordSyncGroupsBetaApiFp = exports.PasswordSyncGroupsBetaApiAxiosParamCreator = exports.PasswordPoliciesBetaApi = exports.PasswordPoliciesBetaApiFactory = exports.PasswordPoliciesBetaApiFp = exports.PasswordPoliciesBetaApiAxiosParamCreator = exports.PasswordManagementBetaApi = exports.PasswordManagementBetaApiFactory = exports.PasswordManagementBetaApiFp = exports.PasswordManagementBetaApiAxiosParamCreator = exports.PasswordDictionaryBetaApi = exports.PasswordDictionaryBetaApiFactory = exports.PasswordDictionaryBetaApiFp = exports.PasswordDictionaryBetaApiAxiosParamCreator = exports.PasswordConfigurationBetaApi = exports.PasswordConfigurationBetaApiFactory = exports.PasswordConfigurationBetaApiFp = exports.PasswordConfigurationBetaApiAxiosParamCreator = exports.OrgConfigBetaApi = exports.OrgConfigBetaApiFactory = exports.OrgConfigBetaApiFp = exports.OrgConfigBetaApiAxiosParamCreator = exports.OAuthClientsBetaApi = exports.OAuthClientsBetaApiFactory = exports.OAuthClientsBetaApiFp = exports.OAuthClientsBetaApiAxiosParamCreator = exports.NotificationsBetaApi = exports.NotificationsBetaApiFactory = exports.NotificationsBetaApiFp = exports.NotificationsBetaApiAxiosParamCreator = exports.NonEmployeeLifecycleManagementBetaApi = exports.NonEmployeeLifecycleManagementBetaApiFactory = exports.NonEmployeeLifecycleManagementBetaApiFp = exports.NonEmployeeLifecycleManagementBetaApiAxiosParamCreator = exports.ManagedClustersBetaApi = exports.ManagedClustersBetaApiFactory = exports.ManagedClustersBetaApiFp = exports.ManagedClustersBetaApiAxiosParamCreator = exports.ManagedClientsBetaApi = void 0;
exports.SuggestedEntitlementDescriptionBetaApiFactory = exports.SuggestedEntitlementDescriptionBetaApiFp = exports.SuggestedEntitlementDescriptionBetaApiAxiosParamCreator = exports.SourcesBetaApi = exports.SourcesBetaApiFactory = exports.SourcesBetaApiFp = exports.SourcesBetaApiAxiosParamCreator = exports.SourceUsagesBetaApi = exports.SourceUsagesBetaApiFactory = exports.SourceUsagesBetaApiFp = exports.SourceUsagesBetaApiAxiosParamCreator = exports.ServiceDeskIntegrationBetaApi = exports.ServiceDeskIntegrationBetaApiFactory = exports.ServiceDeskIntegrationBetaApiFp = exports.ServiceDeskIntegrationBetaApiAxiosParamCreator = exports.SegmentsBetaApi = exports.SegmentsBetaApiFactory = exports.SegmentsBetaApiFp = exports.SegmentsBetaApiAxiosParamCreator = exports.SearchAttributeConfigurationBetaApi = exports.SearchAttributeConfigurationBetaApiFactory = exports.SearchAttributeConfigurationBetaApiFp = exports.SearchAttributeConfigurationBetaApiAxiosParamCreator = exports.SPConfigBetaApi = exports.SPConfigBetaApiFactory = exports.SPConfigBetaApiFp = exports.SPConfigBetaApiAxiosParamCreator = exports.SODViolationsBetaApi = exports.SODViolationsBetaApiFactory = exports.SODViolationsBetaApiFp = exports.SODViolationsBetaApiAxiosParamCreator = exports.SODPoliciesBetaApi = exports.SODPoliciesBetaApiFactory = exports.SODPoliciesBetaApiFp = exports.SODPoliciesBetaApiAxiosParamCreator = exports.SIMIntegrationsBetaApi = exports.SIMIntegrationsBetaApiFactory = exports.SIMIntegrationsBetaApiFp = exports.SIMIntegrationsBetaApiAxiosParamCreator = exports.RolesBetaApi = exports.RolesBetaApiFactory = exports.RolesBetaApiFp = exports.RolesBetaApiAxiosParamCreator = exports.RoleInsightsBetaApi = exports.RoleInsightsBetaApiFactory = exports.RoleInsightsBetaApiFp = exports.RoleInsightsBetaApiAxiosParamCreator = exports.RequestableObjectsBetaApi = exports.RequestableObjectsBetaApiFactory = exports.RequestableObjectsBetaApiFp = void 0;
exports.WorkflowsBetaApi = exports.WorkflowsBetaApiFactory = exports.WorkflowsBetaApiFp = exports.WorkflowsBetaApiAxiosParamCreator = exports.WorkReassignmentBetaApi = exports.WorkReassignmentBetaApiFactory = exports.WorkReassignmentBetaApiFp = exports.WorkReassignmentBetaApiAxiosParamCreator = exports.WorkItemsBetaApi = exports.WorkItemsBetaApiFactory = exports.WorkItemsBetaApiFp = exports.WorkItemsBetaApiAxiosParamCreator = exports.VendorConnectorMappingsBetaApi = exports.VendorConnectorMappingsBetaApiFactory = exports.VendorConnectorMappingsBetaApiFp = exports.VendorConnectorMappingsBetaApiAxiosParamCreator = exports.UIMetadataBetaApi = exports.UIMetadataBetaApiFactory = exports.UIMetadataBetaApiFp = exports.UIMetadataBetaApiAxiosParamCreator = exports.TriggersBetaApi = exports.TriggersBetaApiFactory = exports.TriggersBetaApiFp = exports.TriggersBetaApiAxiosParamCreator = exports.TransformsBetaApi = exports.TransformsBetaApiFactory = exports.TransformsBetaApiFp = exports.TransformsBetaApiAxiosParamCreator = exports.TenantBetaApi = exports.TenantBetaApiFactory = exports.TenantBetaApiFp = exports.TenantBetaApiAxiosParamCreator = exports.TaskManagementBetaApi = exports.TaskManagementBetaApiFactory = exports.TaskManagementBetaApiFp = exports.TaskManagementBetaApiAxiosParamCreator = exports.TaggedObjectsBetaApi = exports.TaggedObjectsBetaApiFactory = exports.TaggedObjectsBetaApiFp = exports.TaggedObjectsBetaApiAxiosParamCreator = exports.SuggestedEntitlementDescriptionBetaApi = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.AccessConstraintBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT',
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE'
};
exports.AccessConstraintBetaOperatorEnum = {
    All: 'ALL',
    Selected: 'SELECTED'
};
exports.AccessCriteriaCriteriaListInnerBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT'
};
exports.AccessItemApproverDtoBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessItemDiffBetaEventTypeEnum = {
    Add: 'ADD',
    Remove: 'REMOVE'
};
exports.AccessItemOwnerDtoBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessItemRefBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT',
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE'
};
exports.AccessItemRequestedForDtoBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessItemRequesterBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessItemRequesterDtoBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessItemReviewedByBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessProfileApprovalSchemeBetaApproverTypeEnum = {
    AppOwner: 'APP_OWNER',
    Owner: 'OWNER',
    SourceOwner: 'SOURCE_OWNER',
    Manager: 'MANAGER',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.AccessProfileRefBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE'
};
exports.AccessProfileSourceRefBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AccessProfileUsageUsedByInnerBetaTypeEnum = {
    Role: 'ROLE'
};
exports.AccessRequestDynamicApprover1BetaTypeEnum = {
    Identity: 'IDENTITY',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.AccessRequestDynamicApproverRequestedByBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
exports.AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum = {
    Add: 'Add',
    Remove: 'Remove'
};
exports.AccessRequestItemBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
exports.AccessRequestItemResponseBetaDecisionEnum = {
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
};
exports.AccessRequestPhasesBetaStateEnum = {
    Pending: 'PENDING',
    Executing: 'EXECUTING',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED',
    NotExecuted: 'NOT_EXECUTED'
};
exports.AccessRequestPhasesBetaResultEnum = {
    Successful: 'SUCCESSFUL',
    Failed: 'FAILED',
    Null: 'null'
};
exports.AccessRequestPostApprovalRequestedByBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum = {
    Approved: 'APPROVED',
    Denied: 'DENIED'
};
exports.AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
exports.AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum = {
    Add: 'Add',
    Remove: 'Remove'
};
exports.AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
exports.AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum = {
    Add: 'Add',
    Remove: 'Remove'
};
/**
 * The type of access item.
 * @export
 * @enum {string}
 */
exports.AccessRequestRecommendationItemTypeBeta = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE'
};
/**
 * Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field.
 * @export
 * @enum {string}
 */
exports.AccessRequestTypeBeta = {
    GrantAccess: 'GRANT_ACCESS',
    RevokeAccess: 'REVOKE_ACCESS',
    Null: 'null'
};
/**
 * Access type of API Client indicating online or offline use
 * @export
 * @enum {string}
 */
exports.AccessTypeBeta = {
    Online: 'ONLINE',
    Offline: 'OFFLINE'
};
exports.AccountActionBetaActionEnum = {
    Enable: 'ENABLE',
    Disable: 'DISABLE'
};
/**
 * The state of an approval status
 * @export
 * @enum {string}
 */
exports.AccountActivityApprovalStatusBeta = {
    Finished: 'FINISHED',
    Rejected: 'REJECTED',
    Returned: 'RETURNED',
    Expired: 'EXPIRED',
    Pending: 'PENDING',
    Canceled: 'CANCELED',
    Null: 'null'
};
/**
 * Represents an operation in an account activity item
 * @export
 * @enum {string}
 */
exports.AccountActivityItemOperationBeta = {
    Add: 'ADD',
    Create: 'CREATE',
    Modify: 'MODIFY',
    Delete: 'DELETE',
    Disable: 'DISABLE',
    Enable: 'ENABLE',
    Unlock: 'UNLOCK',
    Lock: 'LOCK',
    Remove: 'REMOVE',
    Set: 'SET',
    Null: 'null'
};
exports.AccountAggregationBetaStatusEnum = {
    Started: 'STARTED',
    AccountsCollected: 'ACCOUNTS_COLLECTED',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED',
    Retried: 'RETRIED',
    Terminated: 'TERMINATED'
};
exports.AccountAggregationCompletedBetaStatusEnum = {
    Success: 'Success',
    Failed: 'Failed',
    Terminated: 'Terminated'
};
exports.AccountAggregationCompletedSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AccountAggregationStatusBetaStatusEnum = {
    Started: 'STARTED',
    AccountsCollected: 'ACCOUNTS_COLLECTED',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED',
    Retried: 'RETRIED',
    Terminated: 'TERMINATED'
};
exports.AccountAllOfBetaOriginEnum = {
    Aggregated: 'AGGREGATED',
    Provisioned: 'PROVISIONED',
    Null: 'null'
};
exports.AccountAllOfIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccountAllOfOwnerGroupBetaTypeEnum = {
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.AccountAllOfOwnerIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccountAllOfSourceOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccountAttributesChangedAccountBetaTypeEnum = {
    Account: 'ACCOUNT'
};
exports.AccountAttributesChangedIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccountAttributesChangedSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AccountBetaOriginEnum = {
    Aggregated: 'AGGREGATED',
    Provisioned: 'PROVISIONED',
    Null: 'null'
};
exports.AccountCorrelatedAccountBetaTypeEnum = {
    Account: 'ACCOUNT'
};
exports.AccountCorrelatedIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccountCorrelatedSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AccountStatusChangedStatusChangeBetaPreviousStatusEnum = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Locked: 'locked'
};
exports.AccountStatusChangedStatusChangeBetaNewStatusEnum = {
    Enabled: 'enabled',
    Disabled: 'disabled',
    Locked: 'locked'
};
exports.AccountUncorrelatedAccountBetaTypeEnum = {
    Account: 'ACCOUNT'
};
exports.AccountUncorrelatedIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.AccountUncorrelatedSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AccountsCollectedForAggregationBetaStatusEnum = {
    Success: 'Success',
    Failed: 'Failed',
    Terminated: 'Terminated'
};
exports.AccountsCollectedForAggregationSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AdminReviewReassignReassignToBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.ApprovalBetaPriorityEnum = {
    High: 'HIGH',
    Medium: 'MEDIUM',
    Low: 'LOW'
};
exports.ApprovalBetaApprovalCriteriaEnum = {
    Single: 'SINGLE',
    Double: 'DOUBLE',
    Triple: 'TRIPLE',
    Quarter: 'QUARTER',
    Half: 'HALF',
    All: 'ALL'
};
exports.ApprovalBetaStatusEnum = {
    Pending: 'PENDING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
};
exports.ApprovalIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
/**
 * Describes the individual or group that is responsible for an approval step.
 * @export
 * @enum {string}
 */
exports.ApprovalSchemeBeta = {
    AppOwner: 'APP_OWNER',
    SourceOwner: 'SOURCE_OWNER',
    Manager: 'MANAGER',
    RoleOwner: 'ROLE_OWNER',
    AccessProfileOwner: 'ACCESS_PROFILE_OWNER',
    EntitlementOwner: 'ENTITLEMENT_OWNER',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.ApprovalSchemeForRoleBetaApproverTypeEnum = {
    Owner: 'OWNER',
    Manager: 'MANAGER',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
/**
 * Enum representing the non-employee request approval status
 * @export
 * @enum {string}
 */
exports.ApprovalStatusBeta = {
    Approved: 'APPROVED',
    Rejected: 'REJECTED',
    Pending: 'PENDING',
    NotReady: 'NOT_READY',
    Cancelled: 'CANCELLED'
};
exports.ApprovalStatusDtoCurrentOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.ApprovalStatusDtoOriginalOwnerBetaTypeEnum = {
    GovernanceGroup: 'GOVERNANCE_GROUP',
    Identity: 'IDENTITY'
};
exports.AttrSyncSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.AttributeDefinitionSchemaBetaTypeEnum = {
    ConnectorSchema: 'CONNECTOR_SCHEMA'
};
/**
 * The underlying type of the value which an AttributeDefinition represents.
 * @export
 * @enum {string}
 */
exports.AttributeDefinitionTypeBeta = {
    String: 'STRING',
    Long: 'LONG',
    Int: 'INT',
    Boolean: 'BOOLEAN'
};
exports.AuthProfileBetaTypeEnum = {
    Block: 'BLOCK',
    Mfa: 'MFA',
    NonPta: 'NON_PTA',
    Pta: 'PTA'
};
exports.BeforeProvisioningRuleDtoBetaTypeEnum = {
    Rule: 'RULE'
};
exports.BulkTaggedObjectBetaOperationEnum = {
    Append: 'APPEND',
    Merge: 'MERGE'
};
exports.BulkWorkgroupMembersRequestInnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.CampaignActivatedCampaignBetaTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH',
    RoleComposition: 'ROLE_COMPOSITION'
};
exports.CampaignActivatedCampaignBetaStatusEnum = {
    Active: 'ACTIVE'
};
exports.CampaignAlertBetaLevelEnum = {
    Error: 'ERROR',
    Warn: 'WARN',
    Info: 'INFO'
};
exports.CampaignBetaTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH',
    RoleComposition: 'ROLE_COMPOSITION'
};
exports.CampaignBetaStatusEnum = {
    Pending: 'PENDING',
    Staged: 'STAGED',
    Canceling: 'CANCELING',
    Activating: 'ACTIVATING',
    Active: 'ACTIVE',
    Completing: 'COMPLETING',
    Completed: 'COMPLETED',
    Error: 'ERROR',
    Archived: 'ARCHIVED'
};
exports.CampaignBetaCorrelatedStatusEnum = {
    Correlated: 'CORRELATED',
    Uncorrelated: 'UNCORRELATED'
};
exports.CampaignBetaMandatoryCommentRequirementEnum = {
    AllDecisions: 'ALL_DECISIONS',
    RevokeOnlyDecisions: 'REVOKE_ONLY_DECISIONS',
    NoDecisions: 'NO_DECISIONS'
};
exports.CampaignEndedCampaignBetaTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH',
    RoleComposition: 'ROLE_COMPOSITION'
};
exports.CampaignEndedCampaignBetaStatusEnum = {
    Completed: 'COMPLETED'
};
exports.CampaignGeneratedCampaignBetaTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH',
    RoleComposition: 'ROLE_COMPOSITION'
};
exports.CampaignGeneratedCampaignBetaStatusEnum = {
    Staged: 'STAGED',
    Activating: 'ACTIVATING',
    Active: 'ACTIVE'
};
exports.CampaignReferenceBetaTypeEnum = {
    Campaign: 'CAMPAIGN'
};
exports.CampaignReferenceBetaCampaignTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH'
};
exports.CampaignReferenceBetaCorrelatedStatusEnum = {
    Correlated: 'CORRELATED',
    Uncorrelated: 'UNCORRELATED'
};
exports.CampaignReferenceBetaMandatoryCommentRequirementEnum = {
    AllDecisions: 'ALL_DECISIONS',
    RevokeOnlyDecisions: 'REVOKE_ONLY_DECISIONS',
    NoDecisions: 'NO_DECISIONS'
};
exports.CampaignReportBetaTypeEnum = {
    ReportResult: 'REPORT_RESULT'
};
exports.CampaignReportBetaStatusEnum = {
    Success: 'SUCCESS',
    Warning: 'WARNING',
    Error: 'ERROR',
    Terminated: 'TERMINATED',
    TempError: 'TEMP_ERROR',
    Pending: 'PENDING'
};
exports.CampaignTemplateOwnerRefBetaTypeEnum = {
    Identity: 'IDENTITY'
};
/**
 * The current phase of the campaign. * `STAGED`: The campaign is waiting to be activated. * `ACTIVE`: The campaign is active. * `SIGNED`: The reviewer has signed off on the campaign, and it is considered complete.
 * @export
 * @enum {string}
 */
exports.CertificationPhaseBeta = {
    Staged: 'STAGED',
    Active: 'ACTIVE',
    Signed: 'SIGNED'
};
exports.CertificationReferenceBetaTypeEnum = {
    Certification: 'CERTIFICATION'
};
exports.CertificationReferenceDtoBetaTypeEnum = {
    Certification: 'CERTIFICATION'
};
exports.CertificationTaskBetaTypeEnum = {
    Reassign: 'REASSIGN',
    AdminReassign: 'ADMIN_REASSIGN',
    CompleteCertification: 'COMPLETE_CERTIFICATION',
    FinishCertification: 'FINISH_CERTIFICATION',
    CompleteCampaign: 'COMPLETE_CAMPAIGN',
    ActivateCampaign: 'ACTIVATE_CAMPAIGN',
    CampaignCreate: 'CAMPAIGN_CREATE',
    CampaignDelete: 'CAMPAIGN_DELETE'
};
exports.CertificationTaskBetaTargetTypeEnum = {
    Certification: 'CERTIFICATION',
    Campaign: 'CAMPAIGN'
};
exports.CertificationTaskBetaStatusEnum = {
    Queued: 'QUEUED',
    InProgress: 'IN_PROGRESS',
    Success: 'SUCCESS',
    Error: 'ERROR'
};
/**
 * Type of an API Client indicating public or confidentials use
 * @export
 * @enum {string}
 */
exports.ClientTypeBeta = {
    Confidential: 'CONFIDENTIAL',
    Public: 'PUBLIC'
};
exports.CloseAccessRequestBetaExecutionStatusEnum = {
    Terminated: 'Terminated',
    Completed: 'Completed'
};
exports.CloseAccessRequestBetaCompletionStatusEnum = {
    Success: 'Success',
    Incomplete: 'Incomplete',
    Failure: 'Failure'
};
exports.CommentDto1AuthorBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.CommentDtoAuthorBetaTypeEnum = {
    Identity: 'IDENTITY'
};
/**
 * State of common access item.
 * @export
 * @enum {string}
 */
exports.CommonAccessItemStateBeta = {
    Confirmed: 'CONFIRMED',
    Denied: 'DENIED'
};
/**
 * The type of access item.
 * @export
 * @enum {string}
 */
exports.CommonAccessTypeBeta = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE'
};
exports.CompleteCampaignOptionsBetaAutoCompleteActionEnum = {
    Approve: 'APPROVE',
    Revoke: 'REVOKE'
};
exports.CompletedApprovalReviewedByBetaTypeEnum = {
    Identity: 'IDENTITY'
};
/**
 * Enum represents completed approval object\'s state.
 * @export
 * @enum {string}
 */
exports.CompletedApprovalStateBeta = {
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
};
/**
 * The status after completion.
 * @export
 * @enum {string}
 */
exports.CompletionStatusBeta = {
    Success: 'SUCCESS',
    Failure: 'FAILURE',
    Incomplete: 'INCOMPLETE',
    Pending: 'PENDING',
    Null: 'null'
};
exports.ConditionEffectBetaEffectTypeEnum = {
    Hide: 'HIDE',
    Show: 'SHOW',
    Disable: 'DISABLE',
    Enable: 'ENABLE',
    Require: 'REQUIRE',
    Optional: 'OPTIONAL',
    SubmitMessage: 'SUBMIT_MESSAGE',
    SubmitNotification: 'SUBMIT_NOTIFICATION',
    SetDefaultValue: 'SET_DEFAULT_VALUE'
};
exports.ConditionRuleBetaSourceTypeEnum = {
    Input: 'INPUT',
    Element: 'ELEMENT'
};
exports.ConditionRuleBetaOperatorEnum = {
    Eq: 'EQ',
    Ne: 'NE',
    Co: 'CO',
    NotCo: 'NOT_CO',
    In: 'IN',
    NotIn: 'NOT_IN',
    Em: 'EM',
    NotEm: 'NOT_EM',
    Sw: 'SW',
    NotSw: 'NOT_SW',
    Ew: 'EW',
    NotEw: 'NOT_EW'
};
exports.ConditionRuleBetaValueTypeEnum = {
    String: 'STRING',
    StringList: 'STRING_LIST',
    Input: 'INPUT',
    Element: 'ELEMENT',
    List: 'LIST',
    Boolean: 'BOOLEAN'
};
/**
 * Enum list of valid work types that can be selected for a Reassignment Configuration
 * @export
 * @enum {string}
 */
exports.ConfigTypeEnumBeta = {
    AccessRequests: 'ACCESS_REQUESTS',
    Certifications: 'CERTIFICATIONS',
    ManualTasks: 'MANUAL_TASKS'
};
/**
 * Enum list of valid work types that can be selected for a Reassignment Configuration
 * @export
 * @enum {string}
 */
exports.ConfigTypeEnumCamelBeta = {
    AccessRequests: 'accessRequests',
    Certifications: 'certifications',
    ManualTasks: 'manualTasks'
};
/**
 * An enumeration of the types of Objects associated with a Governance Group. Supported object types are ACCESS_PROFILE, ROLE, SOD_POLICY and SOURCE.
 * @export
 * @enum {string}
 */
exports.ConnectedObjectTypeBeta = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE'
};
exports.ConnectorRuleCreateRequestBetaTypeEnum = {
    BuildMap: 'BuildMap',
    ConnectorAfterCreate: 'ConnectorAfterCreate',
    ConnectorAfterDelete: 'ConnectorAfterDelete',
    ConnectorAfterModify: 'ConnectorAfterModify',
    ConnectorBeforeCreate: 'ConnectorBeforeCreate',
    ConnectorBeforeDelete: 'ConnectorBeforeDelete',
    ConnectorBeforeModify: 'ConnectorBeforeModify',
    JdbcBuildMap: 'JDBCBuildMap',
    JdbcOperationProvisioning: 'JDBCOperationProvisioning',
    JdbcProvision: 'JDBCProvision',
    PeopleSoftHrmsBuildMap: 'PeopleSoftHRMSBuildMap',
    PeopleSoftHrmsOperationProvisioning: 'PeopleSoftHRMSOperationProvisioning',
    PeopleSoftHrmsProvision: 'PeopleSoftHRMSProvision',
    RacfPermissionCustomization: 'RACFPermissionCustomization',
    SapBuildMap: 'SAPBuildMap',
    SapHrManagerRule: 'SapHrManagerRule',
    SapHrOperationProvisioning: 'SapHrOperationProvisioning',
    SapHrProvision: 'SapHrProvision',
    SuccessFactorsOperationProvisioning: 'SuccessFactorsOperationProvisioning',
    WebServiceAfterOperationRule: 'WebServiceAfterOperationRule',
    WebServiceBeforeOperationRule: 'WebServiceBeforeOperationRule'
};
exports.ConnectorRuleResponseBetaTypeEnum = {
    BuildMap: 'BuildMap',
    ConnectorAfterCreate: 'ConnectorAfterCreate',
    ConnectorAfterDelete: 'ConnectorAfterDelete',
    ConnectorAfterModify: 'ConnectorAfterModify',
    ConnectorBeforeCreate: 'ConnectorBeforeCreate',
    ConnectorBeforeDelete: 'ConnectorBeforeDelete',
    ConnectorBeforeModify: 'ConnectorBeforeModify',
    JdbcBuildMap: 'JDBCBuildMap',
    JdbcOperationProvisioning: 'JDBCOperationProvisioning',
    JdbcProvision: 'JDBCProvision',
    PeopleSoftHrmsBuildMap: 'PeopleSoftHRMSBuildMap',
    PeopleSoftHrmsOperationProvisioning: 'PeopleSoftHRMSOperationProvisioning',
    PeopleSoftHrmsProvision: 'PeopleSoftHRMSProvision',
    RacfPermissionCustomization: 'RACFPermissionCustomization',
    SapBuildMap: 'SAPBuildMap',
    SapHrManagerRule: 'SapHrManagerRule',
    SapHrOperationProvisioning: 'SapHrOperationProvisioning',
    SapHrProvision: 'SapHrProvision',
    SuccessFactorsOperationProvisioning: 'SuccessFactorsOperationProvisioning',
    WebServiceAfterOperationRule: 'WebServiceAfterOperationRule',
    WebServiceBeforeOperationRule: 'WebServiceBeforeOperationRule'
};
exports.ConnectorRuleUpdateRequestBetaTypeEnum = {
    BuildMap: 'BuildMap',
    ConnectorAfterCreate: 'ConnectorAfterCreate',
    ConnectorAfterDelete: 'ConnectorAfterDelete',
    ConnectorAfterModify: 'ConnectorAfterModify',
    ConnectorBeforeCreate: 'ConnectorBeforeCreate',
    ConnectorBeforeDelete: 'ConnectorBeforeDelete',
    ConnectorBeforeModify: 'ConnectorBeforeModify',
    JdbcBuildMap: 'JDBCBuildMap',
    JdbcOperationProvisioning: 'JDBCOperationProvisioning',
    JdbcProvision: 'JDBCProvision',
    PeopleSoftHrmsBuildMap: 'PeopleSoftHRMSBuildMap',
    PeopleSoftHrmsOperationProvisioning: 'PeopleSoftHRMSOperationProvisioning',
    PeopleSoftHrmsProvision: 'PeopleSoftHRMSProvision',
    RacfPermissionCustomization: 'RACFPermissionCustomization',
    SapBuildMap: 'SAPBuildMap',
    SapHrManagerRule: 'SapHrManagerRule',
    SapHrOperationProvisioning: 'SapHrOperationProvisioning',
    SapHrProvision: 'SapHrProvision',
    SuccessFactorsOperationProvisioning: 'SuccessFactorsOperationProvisioning',
    WebServiceAfterOperationRule: 'WebServiceAfterOperationRule',
    WebServiceBeforeOperationRule: 'WebServiceBeforeOperationRule'
};
exports.ConnectorRuleValidationResponseBetaStateEnum = {
    Ok: 'OK',
    Error: 'ERROR'
};
exports.CorrelatedGovernanceEventBetaTypeEnum = {
    Certification: 'certification',
    AccessRequest: 'accessRequest'
};
exports.CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum = {
    Eq: 'EQ'
};
exports.CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum = {
    Anywhere: 'ANYWHERE',
    Start: 'START',
    End: 'END'
};
exports.CreateFormInstanceRequestBetaStateEnum = {
    Assigned: 'ASSIGNED',
    InProgress: 'IN_PROGRESS',
    Submitted: 'SUBMITTED',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED'
};
exports.CustomPasswordInstructionBetaPageIdEnum = {
    ChangePasswordenterPassword: 'change-password:enter-password',
    ChangePasswordfinish: 'change-password:finish',
    FlowSelectionselect: 'flow-selection:select',
    ForgetUsernameuserEmail: 'forget-username:user-email',
    MfaenterCode: 'mfa:enter-code',
    MfaenterKba: 'mfa:enter-kba',
    Mfaselect: 'mfa:select',
    ResetPasswordenterPassword: 'reset-password:enter-password',
    ResetPasswordenterUsername: 'reset-password:enter-username',
    ResetPasswordfinish: 'reset-password:finish',
    UnlockAccountenterUsername: 'unlock-account:enter-username',
    UnlockAccountfinish: 'unlock-account:finish'
};
exports.DateCompareBetaOperatorEnum = {
    Lt: 'LT',
    Lte: 'LTE',
    Gt: 'GT',
    Gte: 'GTE'
};
exports.Delete202ResponseBetaTypeEnum = {
    TaskResult: 'TASK_RESULT'
};
/**
 * An enumeration of the types of DTOs supported within the IdentityNow infrastructure.
 * @export
 * @enum {string}
 */
exports.DtoTypeBeta = {
    AccountCorrelationConfig: 'ACCOUNT_CORRELATION_CONFIG',
    AccessProfile: 'ACCESS_PROFILE',
    AccessRequestApproval: 'ACCESS_REQUEST_APPROVAL',
    Account: 'ACCOUNT',
    Application: 'APPLICATION',
    Campaign: 'CAMPAIGN',
    CampaignFilter: 'CAMPAIGN_FILTER',
    Certification: 'CERTIFICATION',
    Cluster: 'CLUSTER',
    ConnectorSchema: 'CONNECTOR_SCHEMA',
    Entitlement: 'ENTITLEMENT',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    Identity: 'IDENTITY',
    IdentityProfile: 'IDENTITY_PROFILE',
    IdentityRequest: 'IDENTITY_REQUEST',
    LifecycleState: 'LIFECYCLE_STATE',
    PasswordPolicy: 'PASSWORD_POLICY',
    Role: 'ROLE',
    Rule: 'RULE',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE',
    Tag: 'TAG',
    TagCategory: 'TAG_CATEGORY',
    TaskResult: 'TASK_RESULT',
    ReportResult: 'REPORT_RESULT',
    SodViolation: 'SOD_VIOLATION',
    AccountActivity: 'ACCOUNT_ACTIVITY',
    Workgroup: 'WORKGROUP'
};
exports.EmailStatusDtoBetaVerificationStatusEnum = {
    Pending: 'PENDING',
    Success: 'SUCCESS',
    Failed: 'FAILED'
};
exports.EntitlementApprovalSchemeBetaApproverTypeEnum = {
    EntitlementOwner: 'ENTITLEMENT_OWNER',
    SourceOwner: 'SOURCE_OWNER',
    Manager: 'MANAGER',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.EntitlementOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.EntitlementRefBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT'
};
exports.ExceptionCriteriaCriteriaListInnerBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT'
};
/**
 * The current state of execution.
 * @export
 * @enum {string}
 */
exports.ExecutionStatusBeta = {
    Executing: 'EXECUTING',
    Verifying: 'VERIFYING',
    Terminated: 'TERMINATED',
    Completed: 'COMPLETED'
};
exports.ExportOptionsBetaExcludeTypesEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    AccessRequestConfig: 'ACCESS_REQUEST_CONFIG',
    AttrSyncSourceConfig: 'ATTR_SYNC_SOURCE_CONFIG',
    AuthOrg: 'AUTH_ORG',
    CampaignFilter: 'CAMPAIGN_FILTER',
    FormDefinition: 'FORM_DEFINITION',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    LifecycleState: 'LIFECYCLE_STATE',
    NotificationTemplate: 'NOTIFICATION_TEMPLATE',
    PasswordPolicy: 'PASSWORD_POLICY',
    PasswordSyncGroup: 'PASSWORD_SYNC_GROUP',
    PublicIdentitiesConfig: 'PUBLIC_IDENTITIES_CONFIG',
    Role: 'ROLE',
    Rule: 'RULE',
    Segment: 'SEGMENT',
    ServiceDeskIntegration: 'SERVICE_DESK_INTEGRATION',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE',
    Tag: 'TAG',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION',
    Workflow: 'WORKFLOW'
};
exports.ExportOptionsBetaIncludeTypesEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    AccessRequestConfig: 'ACCESS_REQUEST_CONFIG',
    AttrSyncSourceConfig: 'ATTR_SYNC_SOURCE_CONFIG',
    AuthOrg: 'AUTH_ORG',
    CampaignFilter: 'CAMPAIGN_FILTER',
    FormDefinition: 'FORM_DEFINITION',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    LifecycleState: 'LIFECYCLE_STATE',
    NotificationTemplate: 'NOTIFICATION_TEMPLATE',
    PasswordPolicy: 'PASSWORD_POLICY',
    PasswordSyncGroup: 'PASSWORD_SYNC_GROUP',
    PublicIdentitiesConfig: 'PUBLIC_IDENTITIES_CONFIG',
    Role: 'ROLE',
    Rule: 'RULE',
    Segment: 'SEGMENT',
    ServiceDeskIntegration: 'SERVICE_DESK_INTEGRATION',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE',
    Tag: 'TAG',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION',
    Workflow: 'WORKFLOW'
};
exports.ExportPayloadBetaExcludeTypesEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    AccessRequestConfig: 'ACCESS_REQUEST_CONFIG',
    AttrSyncSourceConfig: 'ATTR_SYNC_SOURCE_CONFIG',
    AuthOrg: 'AUTH_ORG',
    CampaignFilter: 'CAMPAIGN_FILTER',
    FormDefinition: 'FORM_DEFINITION',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    LifecycleState: 'LIFECYCLE_STATE',
    NotificationTemplate: 'NOTIFICATION_TEMPLATE',
    PasswordPolicy: 'PASSWORD_POLICY',
    PasswordSyncGroup: 'PASSWORD_SYNC_GROUP',
    PublicIdentitiesConfig: 'PUBLIC_IDENTITIES_CONFIG',
    Role: 'ROLE',
    Rule: 'RULE',
    Segment: 'SEGMENT',
    ServiceDeskIntegration: 'SERVICE_DESK_INTEGRATION',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE',
    Tag: 'TAG',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION',
    Workflow: 'WORKFLOW'
};
exports.ExportPayloadBetaIncludeTypesEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    AccessRequestConfig: 'ACCESS_REQUEST_CONFIG',
    AttrSyncSourceConfig: 'ATTR_SYNC_SOURCE_CONFIG',
    AuthOrg: 'AUTH_ORG',
    CampaignFilter: 'CAMPAIGN_FILTER',
    FormDefinition: 'FORM_DEFINITION',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    LifecycleState: 'LIFECYCLE_STATE',
    NotificationTemplate: 'NOTIFICATION_TEMPLATE',
    PasswordPolicy: 'PASSWORD_POLICY',
    PasswordSyncGroup: 'PASSWORD_SYNC_GROUP',
    PublicIdentitiesConfig: 'PUBLIC_IDENTITIES_CONFIG',
    Role: 'ROLE',
    Rule: 'RULE',
    Segment: 'SEGMENT',
    ServiceDeskIntegration: 'SERVICE_DESK_INTEGRATION',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE',
    Tag: 'TAG',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION',
    Workflow: 'WORKFLOW'
};
exports.ExpressionBetaOperatorEnum = {
    And: 'AND',
    Equals: 'EQUALS'
};
exports.FormConditionBetaRuleOperatorEnum = {
    And: 'AND',
    Or: 'OR'
};
exports.FormDefinitionInputBetaTypeEnum = {
    String: 'STRING'
};
exports.FormDefinitionSelfImportExportDtoBetaTypeEnum = {
    FormDefinition: 'FORM_DEFINITION'
};
exports.FormElementBetaElementTypeEnum = {
    Text: 'TEXT',
    Toggle: 'TOGGLE',
    Textarea: 'TEXTAREA',
    Hidden: 'HIDDEN',
    Phone: 'PHONE',
    Email: 'EMAIL',
    Select: 'SELECT',
    Date: 'DATE',
    Section: 'SECTION',
    ColumnSet: 'COLUMN_SET',
    Image: 'IMAGE',
    Description: 'DESCRIPTION'
};
exports.FormElementDynamicDataSourceBetaDataSourceTypeEnum = {
    Static: 'STATIC',
    Internal: 'INTERNAL',
    Search: 'SEARCH',
    FormInput: 'FORM_INPUT'
};
exports.FormElementDynamicDataSourceConfigBetaIndicesEnum = {
    Accessprofiles: 'accessprofiles',
    Accountactivities: 'accountactivities',
    Entitlements: 'entitlements',
    Identities: 'identities',
    Events: 'events',
    Roles: 'roles',
    Star: '*'
};
exports.FormElementDynamicDataSourceConfigBetaObjectTypeEnum = {
    Identity: 'IDENTITY',
    AccessProfile: 'ACCESS_PROFILE',
    Sources: 'SOURCES',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
exports.FormElementValidationsSetBetaValidationTypeEnum = {
    Required: 'REQUIRED',
    MinLength: 'MIN_LENGTH',
    MaxLength: 'MAX_LENGTH',
    Regex: 'REGEX',
    Date: 'DATE',
    MaxDate: 'MAX_DATE',
    MinDate: 'MIN_DATE',
    LessThanDate: 'LESS_THAN_DATE',
    Phone: 'PHONE',
    Email: 'EMAIL',
    DataSource: 'DATA_SOURCE',
    Textarea: 'TEXTAREA'
};
exports.FormInstanceCreatedByBetaTypeEnum = {
    WorkflowExecution: 'WORKFLOW_EXECUTION',
    Source: 'SOURCE'
};
exports.FormInstanceRecipientBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.FormInstanceResponseBetaStateEnum = {
    Assigned: 'ASSIGNED',
    InProgress: 'IN_PROGRESS',
    Submitted: 'SUBMITTED',
    Completed: 'COMPLETED',
    Cancelled: 'CANCELLED'
};
exports.FormOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.FormUsedByBetaTypeEnum = {
    Workflow: 'WORKFLOW',
    Source: 'SOURCE',
    MySailPoint: 'MySailPoint'
};
exports.FullcampaignAllOfBetaCorrelatedStatusEnum = {
    Correlated: 'CORRELATED',
    Uncorrelated: 'UNCORRELATED'
};
exports.FullcampaignAllOfBetaMandatoryCommentRequirementEnum = {
    AllDecisions: 'ALL_DECISIONS',
    RevokeOnlyDecisions: 'REVOKE_ONLY_DECISIONS',
    NoDecisions: 'NO_DECISIONS'
};
exports.FullcampaignAllOfFilterBetaTypeEnum = {
    CampaignFilter: 'CAMPAIGN_FILTER',
    Rule: 'RULE'
};
exports.FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.FullcampaignAllOfSearchCampaignInfoBetaTypeEnum = {
    Identity: 'IDENTITY',
    Access: 'ACCESS'
};
exports.FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum = {
    GovernanceGroup: 'GOVERNANCE_GROUP',
    Identity: 'IDENTITY'
};
exports.FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.FullcampaignBetaTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH',
    RoleComposition: 'ROLE_COMPOSITION'
};
exports.FullcampaignBetaStatusEnum = {
    Pending: 'PENDING',
    Staged: 'STAGED',
    Canceling: 'CANCELING',
    Activating: 'ACTIVATING',
    Active: 'ACTIVE',
    Completing: 'COMPLETING',
    Completed: 'COMPLETED',
    Error: 'ERROR',
    Archived: 'ARCHIVED'
};
exports.FullcampaignBetaCorrelatedStatusEnum = {
    Correlated: 'CORRELATED',
    Uncorrelated: 'UNCORRELATED'
};
exports.FullcampaignBetaMandatoryCommentRequirementEnum = {
    AllDecisions: 'ALL_DECISIONS',
    RevokeOnlyDecisions: 'REVOKE_ONLY_DECISIONS',
    NoDecisions: 'NO_DECISIONS'
};
/**
 * OAuth2 Grant Type
 * @export
 * @enum {string}
 */
exports.GrantTypeBeta = {
    ClientCredentials: 'CLIENT_CREDENTIALS',
    AuthorizationCode: 'AUTHORIZATION_CODE',
    RefreshToken: 'REFRESH_TOKEN'
};
/**
 * Defines the HTTP Authentication type. Additional values may be added in the future.  If *NO_AUTH* is selected, no extra information will be in HttpConfig.  If *BASIC_AUTH* is selected, HttpConfig will include BasicAuthConfig with Username and Password as strings.  If *BEARER_TOKEN* is selected, HttpConfig will include BearerTokenAuthConfig with Token as string.
 * @export
 * @enum {string}
 */
exports.HttpAuthenticationTypeBeta = {
    NoAuth: 'NO_AUTH',
    BasicAuth: 'BASIC_AUTH',
    BearerToken: 'BEARER_TOKEN'
};
/**
 * HTTP response modes, i.e. SYNC, ASYNC, or DYNAMIC.
 * @export
 * @enum {string}
 */
exports.HttpDispatchModeBeta = {
    Sync: 'SYNC',
    Async: 'ASYNC',
    Dynamic: 'DYNAMIC'
};
exports.IdentityAttributesChangedIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.IdentityBetaProcessingStateEnum = {
    Error: 'ERROR',
    Ok: 'OK',
    Null: 'null'
};
exports.IdentityBetaIdentityStatusEnum = {
    Unregistered: 'UNREGISTERED',
    Registered: 'REGISTERED',
    Pending: 'PENDING',
    Warning: 'WARNING',
    Disabled: 'DISABLED',
    Active: 'ACTIVE',
    Deactivated: 'DEACTIVATED',
    Terminated: 'TERMINATED',
    Error: 'ERROR',
    Locked: 'LOCKED'
};
exports.IdentityCertificationTaskBetaTypeEnum = {
    Reassign: 'REASSIGN'
};
exports.IdentityCertificationTaskBetaStatusEnum = {
    Queued: 'QUEUED',
    InProgress: 'IN_PROGRESS',
    Success: 'SUCCESS',
    Error: 'ERROR'
};
exports.IdentityCreatedIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.IdentityDeletedIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.IdentityDtoBetaProcessingStateEnum = {
    Error: 'ERROR',
    Ok: 'OK',
    Null: 'null'
};
exports.IdentityDtoBetaIdentityStatusEnum = {
    Unregistered: 'UNREGISTERED',
    Registered: 'REGISTERED',
    Pending: 'PENDING',
    Warning: 'WARNING',
    Disabled: 'DISABLED',
    Active: 'ACTIVE',
    Deactivated: 'DEACTIVATED',
    Terminated: 'TERMINATED',
    Error: 'ERROR',
    Locked: 'LOCKED'
};
exports.IdentityDtoManagerRefBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.IdentityPreviewResponseIdentityBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.IdentityProfileAllOfOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.IdentitySyncJobBetaStatusEnum = {
    Queued: 'QUEUED',
    InProgress: 'IN_PROGRESS',
    Success: 'SUCCESS',
    Error: 'ERROR'
};
exports.IdentityWithNewAccessAccessRefsInnerBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT'
};
exports.ImportAccountsRequest1BetaDisableOptimizationEnum = {
    True: 'true',
    False: 'false'
};
exports.ImportAccountsRequestBetaDisableOptimizationEnum = {
    True: 'true',
    False: 'false'
};
exports.ImportObjectBetaTypeEnum = {
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    Rule: 'RULE',
    Source: 'SOURCE',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION'
};
exports.ImportOptionsBetaExcludeTypesEnum = {
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    Rule: 'RULE',
    Source: 'SOURCE',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION'
};
exports.ImportOptionsBetaIncludeTypesEnum = {
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    Rule: 'RULE',
    Source: 'SOURCE',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION'
};
exports.ImportOptionsBetaDefaultReferencesEnum = {
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    Rule: 'RULE',
    Source: 'SOURCE',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION'
};
/**
 * Defines the Invocation type.  **TEST** The trigger was invocated as a test, either via the test subscription button in the UI or via the start test invocation API.  **REAL_TIME** The trigger subscription is live and was invocated by a real event in IdentityNow.
 * @export
 * @enum {string}
 */
exports.InvocationStatusTypeBeta = {
    Test: 'TEST',
    RealTime: 'REAL_TIME'
};
exports.JsonPatchOperationBetaOpEnum = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy',
    Test: 'test'
};
exports.KbaAuthResponseBetaStatusEnum = {
    Pending: 'PENDING',
    Success: 'SUCCESS',
    Failed: 'FAILED',
    Lockout: 'LOCKOUT',
    NotEnoughData: 'NOT_ENOUGH_DATA'
};
exports.LatestOutlierSummaryBetaTypeEnum = {
    LowSimilarity: 'LOW_SIMILARITY',
    Structural: 'STRUCTURAL'
};
exports.ListWorkgroupMembers200ResponseInnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.LoadAccountsTaskTaskBetaCompletionStatusEnum = {
    Success: 'SUCCESS',
    Warning: 'WARNING',
    Error: 'ERROR',
    Terminated: 'TERMINATED',
    TempError: 'TEMP_ERROR'
};
exports.LoadAccountsTaskTaskMessagesInnerBetaTypeEnum = {
    Info: 'INFO',
    Warn: 'WARN',
    Error: 'ERROR'
};
exports.LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum = {
    Success: 'SUCCESS',
    Warning: 'WARNING',
    Error: 'ERROR',
    Terminated: 'TERMINATED',
    TempError: 'TEMP_ERROR'
};
exports.LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum = {
    Info: 'INFO',
    Warn: 'WARN',
    Error: 'ERROR'
};
/**
 * An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
exports.LocaleOriginBeta = {
    Default: 'DEFAULT',
    Request: 'REQUEST',
    Null: 'null'
};
exports.MailFromAttributesBetaMailFromDomainStatusEnum = {
    Pending: 'PENDING',
    Success: 'SUCCESS',
    Failed: 'FAILED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.ManagedClientStatusEnumBeta = {
    Normal: 'NORMAL',
    Undefined: 'UNDEFINED',
    NotConfigured: 'NOT_CONFIGURED',
    Configuring: 'CONFIGURING',
    Warning: 'WARNING',
    Error: 'ERROR',
    Failed: 'FAILED'
};
/**
 * Managed Client type
 * @export
 * @enum {string}
 */
exports.ManagedClientTypeBeta = {
    Ccg: 'CCG',
    Va: 'VA',
    Internal: 'INTERNAL',
    IiqHarvester: 'IIQ_HARVESTER',
    Null: 'null'
};
/**
 * The Type of Cluster
 * @export
 * @enum {string}
 */
exports.ManagedClusterTypesBeta = {
    Idn: 'idn',
    Iai: 'iai'
};
exports.ManualWorkItemDetailsCurrentOwnerBetaTypeEnum = {
    GovernanceGroup: 'GOVERNANCE_GROUP',
    Identity: 'IDENTITY'
};
exports.ManualWorkItemDetailsOriginalOwnerBetaTypeEnum = {
    GovernanceGroup: 'GOVERNANCE_GROUP',
    Identity: 'IDENTITY'
};
/**
 * Indicates the state of the request processing for this item: * PENDING: The request for this item is awaiting processing. * APPROVED: The request for this item has been approved. * REJECTED: The request for this item was rejected. * EXPIRED: The request for this item expired with no action taken. * CANCELLED: The request for this item was cancelled with no user action. * ARCHIVED: The request for this item has been archived after completion.
 * @export
 * @enum {string}
 */
exports.ManualWorkItemStateBeta = {
    Pending: 'PENDING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED',
    Expired: 'EXPIRED',
    Cancelled: 'CANCELLED',
    Archived: 'ARCHIVED'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.MediumBeta = {
    Email: 'EMAIL',
    Sms: 'SMS',
    Phone: 'PHONE',
    Slack: 'SLACK',
    Teams: 'TEAMS'
};
exports.MfaConfigTestResponseBetaStateEnum = {
    Success: 'SUCCESS',
    Failed: 'FAILED'
};
/**
 * | Construct       | Date Time Pattern | Description | | ---------       | ----------------- | ----------- | | ISO8601         | `yyyy-MM-dd\'T\'HH:mm:ss.SSSX` | The ISO8601 standard. |           | LDAP            | `yyyyMMddHHmmss.Z`           | The LDAP standard.    | | PEOPLE_SOFT     | `MM/dd/yyyy`                 | The date format People Soft uses. | | EPOCH_TIME_JAVA | # ms from midnight, January 1st, 1970 | The incoming date value as elapsed time in milliseconds from midnight, January 1st, 1970. | | EPOCH_TIME_WIN32| # intervals of 100ns from midnight, January 1st, 1601 | The incoming date value as elapsed time in 100-nanosecond intervals from midnight, January 1st, 1601. |
 * @export
 * @enum {string}
 */
exports.NamedConstructsBeta = {
    Iso8601: 'ISO8601',
    Ldap: 'LDAP',
    PeopleSoft: 'PEOPLE_SOFT',
    EpochTimeJava: 'EPOCH_TIME_JAVA',
    EpochTimeWin32: 'EPOCH_TIME_WIN32'
};
exports.NativeChangeDetectionConfigBetaOperationsEnum = {
    Updated: 'ACCOUNT_UPDATED',
    Created: 'ACCOUNT_CREATED',
    Deleted: 'ACCOUNT_DELETED'
};
exports.NonEmployeeBulkUploadJobBetaStatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Error: 'ERROR'
};
exports.NonEmployeeBulkUploadStatusBetaStatusEnum = {
    Pending: 'PENDING',
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Error: 'ERROR'
};
/**
 * Enum representing the type of data a schema attribute accepts.
 * @export
 * @enum {string}
 */
exports.NonEmployeeSchemaAttributeTypeBeta = {
    Text: 'TEXT',
    Date: 'DATE',
    Identity: 'IDENTITY'
};
exports.OutlierBetaTypeEnum = {
    LowSimilarity: 'LOW_SIMILARITY',
    Structural: 'STRUCTURAL'
};
exports.OutlierBetaUnignoreTypeEnum = {
    Manual: 'MANUAL',
    Automatic: 'AUTOMATIC',
    Null: 'null'
};
exports.OutlierContributingFeatureBetaValueTypeEnum = {
    Integer: 'INTEGER',
    Float: 'FLOAT'
};
exports.OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum = {
    Integer: 'INTEGER',
    Float: 'FLOAT'
};
exports.OutlierSummaryBetaTypeEnum = {
    LowSimilarity: 'LOW_SIMILARITY',
    Structural: 'STRUCTURAL'
};
exports.OutliersContributingFeatureAccessItemsBetaAccessTypeEnum = {
    Entitlement: 'ENTITLEMENT',
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE'
};
exports.OwnerDtoBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.OwnerReferenceBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.OwnerReferenceDtoBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.OwnerReferenceSegmentsBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.PasswordChangeResponseBetaStateEnum = {
    InProgress: 'IN_PROGRESS',
    Finished: 'FINISHED',
    Failed: 'FAILED'
};
exports.PasswordStatusBetaStateEnum = {
    InProgress: 'IN_PROGRESS',
    Finished: 'FINISHED',
    Failed: 'FAILED'
};
exports.PatOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.PatchPotentialRoleRequestInnerBetaOpEnum = {
    Remove: 'remove',
    Replace: 'replace'
};
/**
 * Enum represents action that is being processed on an approval.
 * @export
 * @enum {string}
 */
exports.PendingApprovalActionBeta = {
    Approved: 'APPROVED',
    Rejected: 'REJECTED',
    Forwarded: 'FORWARDED'
};
exports.PreApprovalTriggerDetailsBetaDecisionEnum = {
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
};
exports.ProductBetaOrgTypeEnum = {
    Development: 'development',
    Staging: 'staging',
    Production: 'production',
    Test: 'test',
    Partner: 'partner',
    Training: 'training',
    Demonstration: 'demonstration',
    Sandbox: 'sandbox',
    Null: 'null'
};
exports.ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum = {
    Add: 'Add',
    Set: 'Set',
    Remove: 'Remove'
};
exports.ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum = {
    Success: 'SUCCESS',
    Pending: 'PENDING',
    Failed: 'FAILED'
};
exports.ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.ProvisioningCompletedRecipientBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.ProvisioningCompletedRequesterBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum = {
    Source: 'SOURCE'
};
/**
 * Supported operations on ProvisioningCriteria
 * @export
 * @enum {string}
 */
exports.ProvisioningCriteriaOperationBeta = {
    Equals: 'EQUALS',
    NotEquals: 'NOT_EQUALS',
    Contains: 'CONTAINS',
    Has: 'HAS',
    And: 'AND',
    Or: 'OR'
};
/**
 * Provisioning state of an account activity item
 * @export
 * @enum {string}
 */
exports.ProvisioningStateBeta = {
    Pending: 'PENDING',
    Finished: 'FINISHED',
    Unverifiable: 'UNVERIFIABLE',
    Commited: 'COMMITED',
    Failed: 'FAILED',
    Retry: 'RETRY'
};
exports.ReassignReferenceBetaTypeEnum = {
    TargetSummary: 'TARGET_SUMMARY',
    Item: 'ITEM',
    IdentitySummary: 'IDENTITY_SUMMARY'
};
/**
 * The approval reassignment type.  * MANUAL_REASSIGNMENT: An approval with this reassignment type has been specifically reassigned by the approval task\'s owner, from their queue to someone else\'s.  * AUTOMATIC_REASSIGNMENT: An approval with this reassignment type has been automatically reassigned from another approver\'s queue, according to that approver\'s reassignment configuration. The approver\'s reassignment configuration may be set up to automatically reassign approval tasks for a defined (or possibly open-ended) period of time. * AUTO_ESCALATION: An approval with this reassignment type has been automatically reassigned from another approver\'s queue, according to the request\'s escalation configuration. For more information about escalation configuration, refer to [Setting Global Reminders and Escalation Policies](https://documentation.sailpoint.com/saas/help/requests/config_emails.html). * SELF_REVIEW_DELEGATION: An approval with this reassignment type has been automatically reassigned by the system to prevent self-review. This helps prevent situations like a requester being tasked with approving their own request. For more information about preventing self-review, refer to [Self-review Prevention](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html#self-review-prevention) and [Preventing Self-approval](https://documentation.sailpoint.com/saas/help/requests/config_ap_roles.html#preventing-self-approval).
 * @export
 * @enum {string}
 */
exports.ReassignmentTypeBeta = {
    ManualReassignment: 'MANUAL_REASSIGNMENT',
    AutomaticReassignment: 'AUTOMATIC_REASSIGNMENT',
    AutoEscalation: 'AUTO_ESCALATION',
    SelfReviewDelegation: 'SELF_REVIEW_DELEGATION'
};
/**
 * Enum list containing types of Reassignment that can be found in the evaluate response.
 * @export
 * @enum {string}
 */
exports.ReassignmentTypeEnumBeta = {
    ManualReassignment: 'MANUAL_REASSIGNMENT,',
    AutomaticReassignment: 'AUTOMATIC_REASSIGNMENT,',
    AutoEscalation: 'AUTO_ESCALATION,',
    SelfReviewDelegation: 'SELF_REVIEW_DELEGATION'
};
exports.RecommendationResponseBetaRecommendationEnum = {
    True: 'true',
    False: 'false',
    Maybe: 'MAYBE',
    NotFound: 'NOT_FOUND'
};
exports.ReportResultReferenceAllOfBetaStatusEnum = {
    Success: 'SUCCESS',
    Warning: 'WARNING',
    Error: 'ERROR',
    Terminated: 'TERMINATED',
    TempError: 'TEMP_ERROR',
    Pending: 'PENDING'
};
exports.ReportResultReferenceBetaTypeEnum = {
    ReportResult: 'REPORT_RESULT'
};
exports.ReportResultReferenceBetaStatusEnum = {
    Success: 'SUCCESS',
    Warning: 'WARNING',
    Error: 'ERROR',
    Terminated: 'TERMINATED',
    TempError: 'TEMP_ERROR',
    Pending: 'PENDING'
};
/**
 * type of a Report
 * @export
 * @enum {string}
 */
exports.ReportTypeBeta = {
    CampaignCompositionReport: 'CAMPAIGN_COMPOSITION_REPORT',
    CampaignRemediationStatusReport: 'CAMPAIGN_REMEDIATION_STATUS_REPORT',
    CampaignStatusReport: 'CAMPAIGN_STATUS_REPORT',
    CertificationSignoffReport: 'CERTIFICATION_SIGNOFF_REPORT'
};
exports.RequestableObjectReferenceBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
/**
 * Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results.
 * @export
 * @enum {string}
 */
exports.RequestableObjectRequestStatusBeta = {
    Available: 'AVAILABLE',
    Pending: 'PENDING',
    Assigned: 'ASSIGNED',
    Null: 'null'
};
/**
 * The currently supported requestable object types.
 * @export
 * @enum {string}
 */
exports.RequestableObjectTypeBeta = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT'
};
exports.RequestedItemStatusBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Role: 'ROLE',
    Entitlement: 'ENTITLEMENT',
    Null: 'null'
};
exports.RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum = {
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
};
/**
 * Indicates the state of an access request: * EXECUTING: The request is executing, which indicates the system is doing some processing. * REQUEST_COMPLETED: Indicates the request  has been completed. * CANCELLED: The request was cancelled with no user input. * TERMINATED: The request has been terminated before it was able to complete. * PROVISIONING_VERIFICATION_PENDING: The request has finished any approval steps and provisioning is waiting to be verified. * REJECTED: The request was rejected. * PROVISIONING_FAILED: The request has failed to complete. * NOT_ALL_ITEMS_PROVISIONED: One or more of the requested items failed to complete, but there were one or more  successes. * ERROR: An error occurred during request processing.
 * @export
 * @enum {string}
 */
exports.RequestedItemStatusRequestStateBeta = {
    Executing: 'EXECUTING',
    RequestCompleted: 'REQUEST_COMPLETED',
    Cancelled: 'CANCELLED',
    Terminated: 'TERMINATED',
    ProvisioningVerificationPending: 'PROVISIONING_VERIFICATION_PENDING',
    Rejected: 'REJECTED',
    ProvisioningFailed: 'PROVISIONING_FAILED',
    NotAllItemsProvisioned: 'NOT_ALL_ITEMS_PROVISIONED',
    Error: 'ERROR'
};
exports.RequestedItemStatusRequestedForBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.RequestedItemStatusSodViolationContextBetaStateEnum = {
    Success: 'SUCCESS',
    Error: 'ERROR',
    Null: 'null'
};
exports.ReviewerBetaTypeEnum = {
    Identity: 'IDENTITY',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
/**
 * Type which indicates how a particular Identity obtained a particular Role
 * @export
 * @enum {string}
 */
exports.RoleAssignmentSourceTypeBeta = {
    AccessRequest: 'ACCESS_REQUEST',
    RoleMembership: 'ROLE_MEMBERSHIP'
};
/**
 * Indicates whether the associated criteria represents an expression on identity attributes, account attributes, or entitlements, respectively.
 * @export
 * @enum {string}
 */
exports.RoleCriteriaKeyTypeBeta = {
    Identity: 'IDENTITY',
    Account: 'ACCOUNT',
    Entitlement: 'ENTITLEMENT'
};
/**
 * An operation
 * @export
 * @enum {string}
 */
exports.RoleCriteriaOperationBeta = {
    Equals: 'EQUALS',
    NotEquals: 'NOT_EQUALS',
    Contains: 'CONTAINS',
    StartsWith: 'STARTS_WITH',
    EndsWith: 'ENDS_WITH',
    And: 'AND',
    Or: 'OR'
};
exports.RoleInsightsResponseBetaStatusEnum = {
    Created: 'CREATED',
    InProgress: 'IN PROGRESS',
    Completed: 'COMPLETED',
    Failed: 'FAILED'
};
/**
 * This enum characterizes the type of a Role\'s membership selector. Only the following two are fully supported:  STANDARD: Indicates that Role membership is defined in terms of a criteria expression  IDENTITY_LIST: Indicates that Role membership is conferred on the specific identities listed
 * @export
 * @enum {string}
 */
exports.RoleMembershipSelectorTypeBeta = {
    Standard: 'STANDARD',
    IdentityList: 'IDENTITY_LIST'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.RoleMiningPotentialRoleExportStateBeta = {
    Queued: 'QUEUED',
    InProgress: 'IN_PROGRESS',
    Success: 'SUCCESS',
    Error: 'ERROR'
};
/**
 * Provision state
 * @export
 * @enum {string}
 */
exports.RoleMiningPotentialRoleProvisionStateBeta = {
    Potential: 'POTENTIAL',
    Pending: 'PENDING',
    Complete: 'COMPLETE',
    Failed: 'FAILED'
};
/**
 * Role type
 * @export
 * @enum {string}
 */
exports.RoleMiningRoleTypeBeta = {
    Specialized: 'SPECIALIZED',
    Common: 'COMMON'
};
/**
 * The scoping method used in the current role mining session.
 * @export
 * @enum {string}
 */
exports.RoleMiningSessionScopingMethodBeta = {
    Manual: 'MANUAL',
    AutoRm: 'AUTO_RM'
};
/**
 * Role mining session status
 * @export
 * @enum {string}
 */
exports.RoleMiningSessionStateBeta = {
    Created: 'CREATED',
    Updated: 'UPDATED',
    IdentitiesObtained: 'IDENTITIES_OBTAINED',
    PruneThresholdObtained: 'PRUNE_THRESHOLD_OBTAINED',
    PotentialRolesProcessing: 'POTENTIAL_ROLES_PROCESSING',
    PotentialRolesCreated: 'POTENTIAL_ROLES_CREATED'
};
exports.ScheduleBetaTypeEnum = {
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Annually: 'ANNUALLY',
    Calendar: 'CALENDAR'
};
exports.ScheduleDaysBetaTypeEnum = {
    List: 'LIST',
    Range: 'RANGE'
};
exports.ScheduleHoursBetaTypeEnum = {
    List: 'LIST',
    Range: 'RANGE'
};
exports.ScheduleMonthsBetaTypeEnum = {
    List: 'LIST',
    Range: 'RANGE'
};
/**
 * Enum representing the currently supported schedule types.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
exports.ScheduleTypeBeta = {
    Daily: 'DAILY',
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Calendar: 'CALENDAR',
    Annually: 'ANNUALLY'
};
exports.ScheduledAttributesBetaFrequencyEnum = {
    Daily: 'daily',
    Weekly: 'weekly',
    Monthly: 'monthly',
    Yearly: 'yearly',
    CronSchedule: 'cronSchedule'
};
exports.SchemaBetaFeaturesEnum = {
    Authenticate: 'AUTHENTICATE',
    Composite: 'COMPOSITE',
    DirectPermissions: 'DIRECT_PERMISSIONS',
    DiscoverSchema: 'DISCOVER_SCHEMA',
    Enable: 'ENABLE',
    ManagerLookup: 'MANAGER_LOOKUP',
    NoRandomAccess: 'NO_RANDOM_ACCESS',
    Proxy: 'PROXY',
    Search: 'SEARCH',
    Template: 'TEMPLATE',
    Unlock: 'UNLOCK',
    UnstructuredTargets: 'UNSTRUCTURED_TARGETS',
    SharepointTarget: 'SHAREPOINT_TARGET',
    Provisioning: 'PROVISIONING',
    GroupProvisioning: 'GROUP_PROVISIONING',
    SyncProvisioning: 'SYNC_PROVISIONING',
    Password: 'PASSWORD',
    CurrentPassword: 'CURRENT_PASSWORD',
    AccountOnlyRequest: 'ACCOUNT_ONLY_REQUEST',
    AdditionalAccountRequest: 'ADDITIONAL_ACCOUNT_REQUEST',
    NoAggregation: 'NO_AGGREGATION',
    GroupsHaveMembers: 'GROUPS_HAVE_MEMBERS',
    NoPermissionsProvisioning: 'NO_PERMISSIONS_PROVISIONING',
    NoGroupPermissionsProvisioning: 'NO_GROUP_PERMISSIONS_PROVISIONING',
    NoUnstructuredTargetsProvisioning: 'NO_UNSTRUCTURED_TARGETS_PROVISIONING',
    NoDirectPermissionsProvisioning: 'NO_DIRECT_PERMISSIONS_PROVISIONING',
    PreferUuid: 'PREFER_UUID',
    ArmSecurityExtract: 'ARM_SECURITY_EXTRACT',
    ArmUtilizationExtract: 'ARM_UTILIZATION_EXTRACT',
    ArmChangelogExtract: 'ARM_CHANGELOG_EXTRACT',
    UsesUuid: 'USES_UUID'
};
exports.SedAssigneeBetaTypeEnum = {
    Identity: 'IDENTITY',
    Group: 'GROUP',
    SourceOwner: 'SOURCE_OWNER',
    EntitlementOwner: 'ENTITLEMENT_OWNER'
};
/**
 * Enum representing the currently supported selector types.  LIST - the *values* array contains one or more distinct values.  RANGE - the *values* array contains two values: the start and end of the range, inclusive.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
exports.SelectorTypeBeta = {
    List: 'LIST',
    Range: 'RANGE'
};
exports.SelfImportExportDtoBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    AccessRequestConfig: 'ACCESS_REQUEST_CONFIG',
    AttrSyncSourceConfig: 'ATTR_SYNC_SOURCE_CONFIG',
    AuthOrg: 'AUTH_ORG',
    CampaignFilter: 'CAMPAIGN_FILTER',
    FormDefinition: 'FORM_DEFINITION',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    IdentityObjectConfig: 'IDENTITY_OBJECT_CONFIG',
    IdentityProfile: 'IDENTITY_PROFILE',
    LifecycleState: 'LIFECYCLE_STATE',
    NotificationTemplate: 'NOTIFICATION_TEMPLATE',
    PasswordPolicy: 'PASSWORD_POLICY',
    PasswordSyncGroup: 'PASSWORD_SYNC_GROUP',
    PublicIdentitiesConfig: 'PUBLIC_IDENTITIES_CONFIG',
    Role: 'ROLE',
    Rule: 'RULE',
    Segment: 'SEGMENT',
    ServiceDeskIntegration: 'SERVICE_DESK_INTEGRATION',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE',
    Tag: 'TAG',
    Transform: 'TRANSFORM',
    TriggerSubscription: 'TRIGGER_SUBSCRIPTION',
    Workflow: 'WORKFLOW'
};
exports.SendAccountVerificationRequestBetaViaEnum = {
    EmailWork: 'EMAIL_WORK',
    EmailPersonal: 'EMAIL_PERSONAL',
    LinkWork: 'LINK_WORK',
    LinkPersonal: 'LINK_PERSONAL'
};
exports.SendTestNotificationRequestDtoBetaMediumEnum = {
    Email: 'EMAIL',
    Slack: 'SLACK',
    Teams: 'TEAMS'
};
exports.SendTokenRequestBetaDeliveryTypeEnum = {
    SmsPersonal: 'SMS_PERSONAL',
    VoicePersonal: 'VOICE_PERSONAL',
    SmsWork: 'SMS_WORK',
    VoiceWork: 'VOICE_WORK',
    EmailWork: 'EMAIL_WORK',
    EmailPersonal: 'EMAIL_PERSONAL'
};
exports.SendTokenResponseBetaStatusEnum = {
    Success: 'SUCCESS',
    Failed: 'FAILED'
};
exports.ServiceDeskSourceBetaTypeEnum = {
    Source: 'SOURCE'
};
exports.SlimcampaignBetaTypeEnum = {
    Manager: 'MANAGER',
    SourceOwner: 'SOURCE_OWNER',
    Search: 'SEARCH',
    RoleComposition: 'ROLE_COMPOSITION'
};
exports.SlimcampaignBetaStatusEnum = {
    Pending: 'PENDING',
    Staged: 'STAGED',
    Canceling: 'CANCELING',
    Activating: 'ACTIVATING',
    Active: 'ACTIVE',
    Completing: 'COMPLETING',
    Completed: 'COMPLETED',
    Error: 'ERROR',
    Archived: 'ARCHIVED'
};
exports.SlimcampaignBetaCorrelatedStatusEnum = {
    Correlated: 'CORRELATED',
    Uncorrelated: 'UNCORRELATED'
};
exports.SodPolicyBetaStateEnum = {
    Enforced: 'ENFORCED',
    NotEnforced: 'NOT_ENFORCED'
};
exports.SodPolicyBetaTypeEnum = {
    General: 'GENERAL',
    ConflictingAccessBased: 'CONFLICTING_ACCESS_BASED'
};
exports.SodPolicyDtoBetaTypeEnum = {
    SodPolicy: 'SOD_POLICY'
};
exports.SodPolicyOwnerRefBetaTypeEnum = {
    Identity: 'IDENTITY',
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.SodRecipientBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.SodReportResultDtoBetaTypeEnum = {
    ReportResult: 'REPORT_RESULT'
};
exports.SodViolationContextCheckCompleted1BetaStateEnum = {
    Success: 'SUCCESS',
    Error: 'ERROR'
};
exports.SodViolationContextCheckCompletedBetaStateEnum = {
    Success: 'SUCCESS',
    Error: 'ERROR',
    Null: 'null'
};
exports.SourceAccountCorrelationConfigBetaTypeEnum = {
    AccountCorrelationConfig: 'ACCOUNT_CORRELATION_CONFIG'
};
exports.SourceAccountCorrelationRuleBetaTypeEnum = {
    Rule: 'RULE'
};
exports.SourceBeforeProvisioningRuleBetaTypeEnum = {
    Rule: 'RULE'
};
exports.SourceBetaFeaturesEnum = {
    Authenticate: 'AUTHENTICATE',
    Composite: 'COMPOSITE',
    DirectPermissions: 'DIRECT_PERMISSIONS',
    DiscoverSchema: 'DISCOVER_SCHEMA',
    Enable: 'ENABLE',
    ManagerLookup: 'MANAGER_LOOKUP',
    NoRandomAccess: 'NO_RANDOM_ACCESS',
    Proxy: 'PROXY',
    Search: 'SEARCH',
    Template: 'TEMPLATE',
    Unlock: 'UNLOCK',
    UnstructuredTargets: 'UNSTRUCTURED_TARGETS',
    SharepointTarget: 'SHAREPOINT_TARGET',
    Provisioning: 'PROVISIONING',
    GroupProvisioning: 'GROUP_PROVISIONING',
    SyncProvisioning: 'SYNC_PROVISIONING',
    Password: 'PASSWORD',
    CurrentPassword: 'CURRENT_PASSWORD',
    AccountOnlyRequest: 'ACCOUNT_ONLY_REQUEST',
    AdditionalAccountRequest: 'ADDITIONAL_ACCOUNT_REQUEST',
    NoAggregation: 'NO_AGGREGATION',
    GroupsHaveMembers: 'GROUPS_HAVE_MEMBERS',
    NoPermissionsProvisioning: 'NO_PERMISSIONS_PROVISIONING',
    NoGroupPermissionsProvisioning: 'NO_GROUP_PERMISSIONS_PROVISIONING',
    NoUnstructuredTargetsProvisioning: 'NO_UNSTRUCTURED_TARGETS_PROVISIONING',
    NoDirectPermissionsProvisioning: 'NO_DIRECT_PERMISSIONS_PROVISIONING',
    PreferUuid: 'PREFER_UUID',
    ArmSecurityExtract: 'ARM_SECURITY_EXTRACT',
    ArmUtilizationExtract: 'ARM_UTILIZATION_EXTRACT',
    ArmChangelogExtract: 'ARM_CHANGELOG_EXTRACT',
    UsesUuid: 'USES_UUID'
};
exports.SourceBetaStatusEnum = {
    ErrorAccountFileImport: 'SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT',
    ErrorCluster: 'SOURCE_STATE_ERROR_CLUSTER',
    ErrorSource: 'SOURCE_STATE_ERROR_SOURCE',
    ErrorVa: 'SOURCE_STATE_ERROR_VA',
    FailureCluster: 'SOURCE_STATE_FAILURE_CLUSTER',
    FailureSource: 'SOURCE_STATE_FAILURE_SOURCE',
    Healthy: 'SOURCE_STATE_HEALTHY',
    UncheckedCluster: 'SOURCE_STATE_UNCHECKED_CLUSTER',
    UncheckedClusterNoSources: 'SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES',
    UncheckedSource: 'SOURCE_STATE_UNCHECKED_SOURCE',
    UncheckedSourceNoAccounts: 'SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS'
};
exports.SourceClusterBetaTypeEnum = {
    Cluster: 'CLUSTER'
};
exports.SourceClusterDtoBetaTypeEnum = {
    Cluster: 'CLUSTER'
};
exports.SourceCreatedActorBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.SourceDeletedActorBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.SourceManagementWorkgroupBetaTypeEnum = {
    GovernanceGroup: 'GOVERNANCE_GROUP'
};
exports.SourceManagerCorrelationRuleBetaTypeEnum = {
    Rule: 'RULE'
};
exports.SourceOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.SourcePasswordPoliciesInnerBetaTypeEnum = {
    PasswordPolicy: 'PASSWORD_POLICY'
};
exports.SourceSchemasInnerBetaTypeEnum = {
    ConnectorSchema: 'CONNECTOR_SCHEMA'
};
exports.SourceSyncJobBetaStatusEnum = {
    Queued: 'QUEUED',
    InProgress: 'IN_PROGRESS',
    Success: 'SUCCESS',
    Error: 'ERROR'
};
exports.SourceUpdatedActorBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.SourceUsageStatusBetaStatusEnum = {
    Complete: 'COMPLETE',
    Incomplete: 'INCOMPLETE'
};
exports.SpConfigExportJobBetaStatusEnum = {
    NotStarted: 'NOT_STARTED',
    InProgress: 'IN_PROGRESS',
    Complete: 'COMPLETE',
    Cancelled: 'CANCELLED',
    Failed: 'FAILED'
};
exports.SpConfigExportJobBetaTypeEnum = {
    Export: 'EXPORT',
    Import: 'IMPORT'
};
exports.SpConfigExportJobStatusBetaStatusEnum = {
    NotStarted: 'NOT_STARTED',
    InProgress: 'IN_PROGRESS',
    Complete: 'COMPLETE',
    Cancelled: 'CANCELLED',
    Failed: 'FAILED'
};
exports.SpConfigExportJobStatusBetaTypeEnum = {
    Export: 'EXPORT',
    Import: 'IMPORT'
};
exports.SpConfigImportJobStatusBetaStatusEnum = {
    NotStarted: 'NOT_STARTED',
    InProgress: 'IN_PROGRESS',
    Complete: 'COMPLETE',
    Cancelled: 'CANCELLED',
    Failed: 'FAILED'
};
exports.SpConfigImportJobStatusBetaTypeEnum = {
    Export: 'EXPORT',
    Import: 'IMPORT'
};
exports.SpConfigJobBetaStatusEnum = {
    NotStarted: 'NOT_STARTED',
    InProgress: 'IN_PROGRESS',
    Complete: 'COMPLETE',
    Cancelled: 'CANCELLED',
    Failed: 'FAILED'
};
exports.SpConfigJobBetaTypeEnum = {
    Export: 'EXPORT',
    Import: 'IMPORT'
};
/**
 * Standard Log4j log level
 * @export
 * @enum {string}
 */
exports.StandardLevelBeta = {
    False: 'false',
    Fatal: 'FATAL',
    Error: 'ERROR',
    Warn: 'WARN',
    Info: 'INFO',
    Debug: 'DEBUG',
    Trace: 'TRACE'
};
exports.StatusResponseBetaStatusEnum = {
    Success: 'SUCCESS',
    Failure: 'FAILURE'
};
exports.SubscriptionPatchRequestInnerBetaOpEnum = {
    Add: 'add',
    Remove: 'remove',
    Replace: 'replace',
    Move: 'move',
    Copy: 'copy'
};
/**
 * Subscription type. **NOTE** If type is EVENTBRIDGE, then eventBridgeConfig is required. If type is HTTP, then httpConfig is required.
 * @export
 * @enum {string}
 */
exports.SubscriptionTypeBeta = {
    Http: 'HTTP',
    Eventbridge: 'EVENTBRIDGE',
    Inline: 'INLINE',
    Script: 'SCRIPT',
    Workflow: 'WORKFLOW'
};
exports.TaggedObjectDtoBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Application: 'APPLICATION',
    Campaign: 'CAMPAIGN',
    Entitlement: 'ENTITLEMENT',
    Identity: 'IDENTITY',
    Role: 'ROLE',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE'
};
exports.TaggedObjectObjectRefBetaTypeEnum = {
    AccessProfile: 'ACCESS_PROFILE',
    Application: 'APPLICATION',
    Campaign: 'CAMPAIGN',
    Entitlement: 'ENTITLEMENT',
    Identity: 'IDENTITY',
    Role: 'ROLE',
    SodPolicy: 'SOD_POLICY',
    Source: 'SOURCE'
};
exports.TargetBetaTypeEnum = {
    Application: 'APPLICATION',
    Identity: 'IDENTITY',
    Null: 'null'
};
exports.TaskResultDtoBetaTypeEnum = {
    TaskResult: 'TASK_RESULT'
};
exports.TaskResultSimplifiedBetaCompletionStatusEnum = {
    Success: 'Success',
    Warning: 'Warning',
    Error: 'Error',
    Terminated: 'Terminated',
    TempError: 'TempError'
};
exports.TaskStatusBetaTypeEnum = {
    Quartz: 'QUARTZ',
    Qpoc: 'QPOC',
    QueuedTask: 'QUEUED_TASK'
};
exports.TaskStatusBetaCompletionStatusEnum = {
    Success: 'SUCCESS',
    Warning: 'WARNING',
    Error: 'ERROR',
    Terminated: 'TERMINATED',
    Temperror: 'TEMPERROR',
    Null: 'null'
};
exports.TaskStatusMessageBetaTypeEnum = {
    Info: 'INFO',
    Warn: 'WARN',
    Error: 'ERROR'
};
exports.TemplateBulkDeleteDtoBetaMediumEnum = {
    Email: 'EMAIL',
    Phone: 'PHONE',
    Sms: 'SMS'
};
exports.TemplateDtoBetaMediumEnum = {
    Email: 'EMAIL',
    Phone: 'PHONE',
    Sms: 'SMS',
    Slack: 'SLACK',
    Teams: 'TEAMS'
};
exports.TemplateDtoDefaultBetaMediumEnum = {
    Email: 'EMAIL',
    Phone: 'PHONE',
    Sms: 'SMS',
    Slack: 'SLACK',
    Teams: 'TEAMS'
};
exports.TokenAuthRequestBetaDeliveryTypeEnum = {
    SmsPersonal: 'SMS_PERSONAL',
    VoicePersonal: 'VOICE_PERSONAL',
    SmsWork: 'SMS_WORK',
    VoiceWork: 'VOICE_WORK',
    EmailWork: 'EMAIL_WORK',
    EmailPersonal: 'EMAIL_PERSONAL'
};
exports.TokenAuthResponseBetaStatusEnum = {
    Pending: 'PENDING',
    Success: 'SUCCESS',
    Failed: 'FAILED',
    Lockout: 'LOCKOUT',
    NotEnoughData: 'NOT_ENOUGH_DATA'
};
exports.TransformBetaTypeEnum = {
    AccountAttribute: 'accountAttribute',
    Base64Decode: 'base64Decode',
    Base64Encode: 'base64Encode',
    Concat: 'concat',
    Conditional: 'conditional',
    DateCompare: 'dateCompare',
    DateFormat: 'dateFormat',
    DateMath: 'dateMath',
    DecomposeDiacriticalMarks: 'decomposeDiacriticalMarks',
    E164phone: 'e164phone',
    FirstValid: 'firstValid',
    Rule: 'rule',
    IdentityAttribute: 'identityAttribute',
    IndexOf: 'indexOf',
    Iso3166: 'iso3166',
    LastIndexOf: 'lastIndexOf',
    LeftPad: 'leftPad',
    Lookup: 'lookup',
    Lower: 'lower',
    NormalizeNames: 'normalizeNames',
    RandomAlphaNumeric: 'randomAlphaNumeric',
    RandomNumeric: 'randomNumeric',
    Reference: 'reference',
    ReplaceAll: 'replaceAll',
    Replace: 'replace',
    RightPad: 'rightPad',
    Split: 'split',
    Static: 'static',
    Substring: 'substring',
    Trim: 'trim',
    Upper: 'upper',
    UsernameGenerator: 'usernameGenerator',
    Uuid: 'uuid',
    DisplayName: 'displayName',
    Rfc5646: 'rfc5646'
};
exports.TransformReadBetaTypeEnum = {
    AccountAttribute: 'accountAttribute',
    Base64Decode: 'base64Decode',
    Base64Encode: 'base64Encode',
    Concat: 'concat',
    Conditional: 'conditional',
    DateCompare: 'dateCompare',
    DateFormat: 'dateFormat',
    DateMath: 'dateMath',
    DecomposeDiacriticalMarks: 'decomposeDiacriticalMarks',
    E164phone: 'e164phone',
    FirstValid: 'firstValid',
    Rule: 'rule',
    IdentityAttribute: 'identityAttribute',
    IndexOf: 'indexOf',
    Iso3166: 'iso3166',
    LastIndexOf: 'lastIndexOf',
    LeftPad: 'leftPad',
    Lookup: 'lookup',
    Lower: 'lower',
    NormalizeNames: 'normalizeNames',
    RandomAlphaNumeric: 'randomAlphaNumeric',
    RandomNumeric: 'randomNumeric',
    Reference: 'reference',
    ReplaceAll: 'replaceAll',
    Replace: 'replace',
    RightPad: 'rightPad',
    Split: 'split',
    Static: 'static',
    Substring: 'substring',
    Trim: 'trim',
    Upper: 'upper',
    UsernameGenerator: 'usernameGenerator',
    Uuid: 'uuid',
    DisplayName: 'displayName',
    Rfc5646: 'rfc5646'
};
/**
 * The type of trigger.
 * @export
 * @enum {string}
 */
exports.TriggerTypeBeta = {
    RequestResponse: 'REQUEST_RESPONSE',
    FireAndForget: 'FIRE_AND_FORGET'
};
/**
 * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \'Create Account Profile\', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \'Update Account Profile\', the provisioning template for the \'Update\' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \'Enable Account Profile\', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\'s account is created.  DISABLE - This usage type relates to \'Disable Account Profile\', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
 * @export
 * @enum {string}
 */
exports.UsageTypeBeta = {
    Create: 'CREATE',
    Update: 'UPDATE',
    Enable: 'ENABLE',
    Disable: 'DISABLE',
    Delete: 'DELETE',
    Assign: 'ASSIGN',
    Unassign: 'UNASSIGN',
    CreateGroup: 'CREATE_GROUP',
    UpdateGroup: 'UPDATE_GROUP',
    DeleteGroup: 'DELETE_GROUP',
    Register: 'REGISTER',
    CreateIdentity: 'CREATE_IDENTITY',
    UpdateIdentity: 'UPDATE_IDENTITY',
    EditGroup: 'EDIT_GROUP',
    Unlock: 'UNLOCK',
    ChangePassword: 'CHANGE_PASSWORD'
};
exports.VAClusterStatusChangeEventBetaTypeEnum = {
    Source: 'SOURCE',
    Cluster: 'CLUSTER'
};
exports.VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum = {
    Succeeded: 'Succeeded',
    Failed: 'Failed'
};
exports.VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum = {
    Succeeded: 'Succeeded',
    Failed: 'Failed'
};
exports.VerificationResponseBetaStatusEnum = {
    Pending: 'PENDING',
    Success: 'SUCCESS',
    Failed: 'FAILED',
    Lockout: 'LOCKOUT',
    NotEnoughData: 'NOT_ENOUGH_DATA'
};
exports.ViolationContextPolicyBetaTypeEnum = {
    Entitlement: 'ENTITLEMENT'
};
exports.ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum = {
    Manager: 'MANAGER',
    Static: 'STATIC',
    Null: 'null'
};
exports.ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum = {
    Identity: 'IDENTITY',
    GovernanceGroup: 'GOVERNANCE_GROUP',
    Manager: 'MANAGER',
    Null: 'null'
};
/**
 * The state of a work item
 * @export
 * @enum {string}
 */
exports.WorkItemStateBeta = {
    Finished: 'Finished',
    Rejected: 'Rejected',
    Returned: 'Returned',
    Expired: 'Expired',
    Pending: 'Pending',
    Canceled: 'Canceled',
    Null: 'null'
};
/**
 * The type of the work item
 * @export
 * @enum {string}
 */
exports.WorkItemTypeBeta = {
    Unknown: 'Unknown',
    Generic: 'Generic',
    Certification: 'Certification',
    Remediation: 'Remediation',
    Delegation: 'Delegation',
    Approval: 'Approval',
    ViolationReview: 'ViolationReview',
    Form: 'Form',
    PolicyViolation: 'PolicyViolation',
    Challenge: 'Challenge',
    ImpactAnalysis: 'ImpactAnalysis',
    Signoff: 'Signoff',
    Event: 'Event',
    ManualAction: 'ManualAction',
    Test: 'Test'
};
exports.WorkflowAllOfCreatorBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.WorkflowBodyOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.WorkflowExecutionBetaStatusEnum = {
    Completed: 'Completed',
    Failed: 'Failed',
    Canceled: 'Canceled',
    Executing: 'Executing'
};
exports.WorkflowExecutionEventBetaTypeEnum = {
    WorkflowExecutionScheduled: 'WorkflowExecutionScheduled',
    WorkflowExecutionStarted: 'WorkflowExecutionStarted',
    WorkflowExecutionCompleted: 'WorkflowExecutionCompleted',
    WorkflowExecutionFailed: 'WorkflowExecutionFailed',
    WorkflowTaskScheduled: 'WorkflowTaskScheduled',
    WorkflowTaskStarted: 'WorkflowTaskStarted',
    WorkflowTaskCompleted: 'WorkflowTaskCompleted',
    WorkflowTaskFailed: 'WorkflowTaskFailed',
    ActivityTaskScheduled: 'ActivityTaskScheduled',
    ActivityTaskStarted: 'ActivityTaskStarted',
    ActivityTaskCompleted: 'ActivityTaskCompleted',
    ActivityTaskFailed: 'ActivityTaskFailed'
};
exports.WorkflowLibraryFormFieldsBetaTypeEnum = {
    Text: 'text',
    Textarea: 'textarea',
    Boolean: 'boolean',
    Email: 'email',
    Url: 'url',
    Number: 'number',
    Json: 'json',
    Checkbox: 'checkbox',
    Jsonpath: 'jsonpath',
    Select: 'select',
    MultiType: 'multiType',
    Duration: 'duration',
    Toggle: 'toggle',
    FormPicker: 'formPicker',
    IdentityPicker: 'identityPicker',
    GovernanceGroupPicker: 'governanceGroupPicker',
    String: 'string',
    Object: 'object',
    Array: 'array',
    Secret: 'secret',
    KeyValuePairs: 'keyValuePairs',
    EmailPicker: 'emailPicker',
    AdvancedToggle: 'advancedToggle',
    VariableCreator: 'variableCreator',
    HtmlEditor: 'htmlEditor'
};
exports.WorkflowLibraryTriggerBetaTypeEnum = {
    Event: 'EVENT',
    Scheduled: 'SCHEDULED',
    External: 'EXTERNAL'
};
exports.WorkflowModifiedByBetaTypeEnum = {
    Identity: 'IDENTITY'
};
exports.WorkflowTriggerBetaTypeEnum = {
    Event: 'EVENT',
    External: 'EXTERNAL',
    Scheduled: 'SCHEDULED'
};
exports.WorkgroupConnectionDtoBetaConnectionTypeEnum = {
    AccessRequestReviewer: 'AccessRequestReviewer',
    Owner: 'Owner',
    ManagementWorkgroup: 'ManagementWorkgroup'
};
exports.WorkgroupDtoOwnerBetaTypeEnum = {
    Identity: 'IDENTITY'
};
/**
 * AccessModelMetadataBetaApi - axios parameter creator
 * @export
 */
var AccessModelMetadataBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get single Access Model Metadata Attribute
         * @summary Get Access Model Metadata Attribute
         * @param {string} key Technical name of the Attribute.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessModelMetadataAttribute: function (key, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessModelMetadataAttribute', 'key', key);
                            localVarPath = "/access-model-metadata/attributes/{key}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get single Access Model Metadata Attribute Value
         * @summary Get Access Model Metadata Value
         * @param {string} key Technical name of the Attribute.
         * @param {string} value Technical name of the Attribute value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessModelMetadataAttributeValue: function (key, value, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessModelMetadataAttributeValue', 'key', key);
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessModelMetadataAttributeValue', 'value', value);
                            localVarPath = "/access-model-metadata/attributes/{key}/values/{value}"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)))
                                .replace("{".concat("value", "}"), encodeURIComponent(String(value)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of Access Model Metadata Attributes
         * @summary List Access Model Metadata Attributes
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessModelMetadataAttribute: function (filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-model-metadata/attributes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of Access Model Metadata Attribute Values
         * @summary List Access Model Metadata Values
         * @param {string} key Technical name of the Attribute.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessModelMetadataAttributeValue: function (key, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'key' is not null or undefined
                            (0, common_1.assertParamExists)('listAccessModelMetadataAttributeValue', 'key', key);
                            localVarPath = "/access-model-metadata/attributes/{key}/values"
                                .replace("{".concat("key", "}"), encodeURIComponent(String(key)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccessModelMetadataBetaApiAxiosParamCreator = AccessModelMetadataBetaApiAxiosParamCreator;
/**
 * AccessModelMetadataBetaApi - functional programming interface
 * @export
 */
var AccessModelMetadataBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccessModelMetadataBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get single Access Model Metadata Attribute
         * @summary Get Access Model Metadata Attribute
         * @param {string} key Technical name of the Attribute.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessModelMetadataAttribute: function (key, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessModelMetadataAttribute(key, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get single Access Model Metadata Attribute Value
         * @summary Get Access Model Metadata Value
         * @param {string} key Technical name of the Attribute.
         * @param {string} value Technical name of the Attribute value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessModelMetadataAttributeValue: function (key, value, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessModelMetadataAttributeValue(key, value, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of Access Model Metadata Attributes
         * @summary List Access Model Metadata Attributes
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessModelMetadataAttribute: function (filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAccessModelMetadataAttribute(filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of Access Model Metadata Attribute Values
         * @summary List Access Model Metadata Values
         * @param {string} key Technical name of the Attribute.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessModelMetadataAttributeValue: function (key, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAccessModelMetadataAttributeValue(key, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccessModelMetadataBetaApiFp = AccessModelMetadataBetaApiFp;
/**
 * AccessModelMetadataBetaApi - factory interface
 * @export
 */
var AccessModelMetadataBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccessModelMetadataBetaApiFp)(configuration);
    return {
        /**
         * Get single Access Model Metadata Attribute
         * @summary Get Access Model Metadata Attribute
         * @param {string} key Technical name of the Attribute.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessModelMetadataAttribute: function (key, axiosOptions) {
            return localVarFp.getAccessModelMetadataAttribute(key, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get single Access Model Metadata Attribute Value
         * @summary Get Access Model Metadata Value
         * @param {string} key Technical name of the Attribute.
         * @param {string} value Technical name of the Attribute value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessModelMetadataAttributeValue: function (key, value, axiosOptions) {
            return localVarFp.getAccessModelMetadataAttributeValue(key, value, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of Access Model Metadata Attributes
         * @summary List Access Model Metadata Attributes
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessModelMetadataAttribute: function (filters, axiosOptions) {
            return localVarFp.listAccessModelMetadataAttribute(filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of Access Model Metadata Attribute Values
         * @summary List Access Model Metadata Values
         * @param {string} key Technical name of the Attribute.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessModelMetadataAttributeValue: function (key, axiosOptions) {
            return localVarFp.listAccessModelMetadataAttributeValue(key, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccessModelMetadataBetaApiFactory = AccessModelMetadataBetaApiFactory;
/**
 * AccessModelMetadataBetaApi - object-oriented interface
 * @export
 * @class AccessModelMetadataBetaApi
 * @extends {BaseAPI}
 */
var AccessModelMetadataBetaApi = /** @class */ (function (_super) {
    __extends(AccessModelMetadataBetaApi, _super);
    function AccessModelMetadataBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get single Access Model Metadata Attribute
     * @summary Get Access Model Metadata Attribute
     * @param {AccessModelMetadataBetaApiGetAccessModelMetadataAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    AccessModelMetadataBetaApi.prototype.getAccessModelMetadataAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessModelMetadataBetaApiFp)(this.configuration).getAccessModelMetadataAttribute(requestParameters.key, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get single Access Model Metadata Attribute Value
     * @summary Get Access Model Metadata Value
     * @param {AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValueRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    AccessModelMetadataBetaApi.prototype.getAccessModelMetadataAttributeValue = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessModelMetadataBetaApiFp)(this.configuration).getAccessModelMetadataAttributeValue(requestParameters.key, requestParameters.value, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of Access Model Metadata Attributes
     * @summary List Access Model Metadata Attributes
     * @param {AccessModelMetadataBetaApiListAccessModelMetadataAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    AccessModelMetadataBetaApi.prototype.listAccessModelMetadataAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccessModelMetadataBetaApiFp)(this.configuration).listAccessModelMetadataAttribute(requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of Access Model Metadata Attribute Values
     * @summary List Access Model Metadata Values
     * @param {AccessModelMetadataBetaApiListAccessModelMetadataAttributeValueRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    AccessModelMetadataBetaApi.prototype.listAccessModelMetadataAttributeValue = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessModelMetadataBetaApiFp)(this.configuration).listAccessModelMetadataAttributeValue(requestParameters.key, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccessModelMetadataBetaApi;
}(base_1.BaseAPI));
exports.AccessModelMetadataBetaApi = AccessModelMetadataBetaApi;
/**
 * AccessProfilesBetaApi - axios parameter creator
 * @export
 */
var AccessProfilesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
         * @summary Create Access Profile
         * @param {AccessProfileBeta} accessProfileBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessProfile: function (accessProfileBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessProfileBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createAccessProfile', 'accessProfileBeta', accessProfileBeta);
                            localVarPath = "/access-profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessProfileBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
         * @summary Delete the specified Access Profile
         * @param {string} id ID of the Access Profile to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessProfile: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccessProfile', 'id', id);
                            localVarPath = "/access-profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
         * @summary Delete Access Profile(s)
         * @param {AccessProfileBulkDeleteRequestBeta} accessProfileBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessProfilesInBulk: function (accessProfileBulkDeleteRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessProfileBulkDeleteRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccessProfilesInBulk', 'accessProfileBulkDeleteRequestBeta', accessProfileBulkDeleteRequestBeta);
                            localVarPath = "/access-profiles/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessProfileBulkDeleteRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get an Access Profile
         * @param {string} id ID of the Access Profile
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessProfile: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessProfile', 'id', id);
                            localVarPath = "/access-profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
         * @summary List Access Profile\'s Entitlements
         * @param {string} id ID of the access profile containing the entitlements.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessProfileEntitlements: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessProfileEntitlements', 'id', id);
                            localVarPath = "/access-profiles/{id}/entitlements"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary List Access Profiles
         * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
         * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessProfiles: function (forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (forSubadmin !== undefined) {
                                localVarQueryParameter['for-subadmin'] = forSubadmin;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (forSegmentIds !== undefined) {
                                localVarQueryParameter['for-segment-ids'] = forSegmentIds;
                            }
                            if (includeUnsegmented !== undefined) {
                                localVarQueryParameter['include-unsegmented'] = includeUnsegmented;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
         * @summary Patch a specified Access Profile
         * @param {string} id ID of the Access Profile to patch
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchAccessProfile: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchAccessProfile', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchAccessProfile', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/access-profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
         * @summary Update Access Profile(s) requestable field.
         * @param {Array<AccessProfileBulkUpdateRequestInnerBeta>} accessProfileBulkUpdateRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateAccessProfilesInBulk: function (accessProfileBulkUpdateRequestInnerBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessProfileBulkUpdateRequestInnerBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateAccessProfilesInBulk', 'accessProfileBulkUpdateRequestInnerBeta', accessProfileBulkUpdateRequestInnerBeta);
                            localVarPath = "/access-profiles/bulk-update-requestable";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessProfileBulkUpdateRequestInnerBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccessProfilesBetaApiAxiosParamCreator = AccessProfilesBetaApiAxiosParamCreator;
/**
 * AccessProfilesBetaApi - functional programming interface
 * @export
 */
var AccessProfilesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccessProfilesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
         * @summary Create Access Profile
         * @param {AccessProfileBeta} accessProfileBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessProfile: function (accessProfileBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAccessProfile(accessProfileBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
         * @summary Delete the specified Access Profile
         * @param {string} id ID of the Access Profile to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessProfile: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAccessProfile(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
         * @summary Delete Access Profile(s)
         * @param {AccessProfileBulkDeleteRequestBeta} accessProfileBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessProfilesInBulk: function (accessProfileBulkDeleteRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAccessProfilesInBulk(accessProfileBulkDeleteRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get an Access Profile
         * @param {string} id ID of the Access Profile
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessProfile: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessProfile(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
         * @summary List Access Profile\'s Entitlements
         * @param {string} id ID of the access profile containing the entitlements.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessProfileEntitlements: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessProfileEntitlements(id, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary List Access Profiles
         * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
         * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessProfiles: function (forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAccessProfiles(forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
         * @summary Patch a specified Access Profile
         * @param {string} id ID of the Access Profile to patch
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchAccessProfile: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchAccessProfile(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
         * @summary Update Access Profile(s) requestable field.
         * @param {Array<AccessProfileBulkUpdateRequestInnerBeta>} accessProfileBulkUpdateRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateAccessProfilesInBulk: function (accessProfileBulkUpdateRequestInnerBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateAccessProfilesInBulk(accessProfileBulkUpdateRequestInnerBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccessProfilesBetaApiFp = AccessProfilesBetaApiFp;
/**
 * AccessProfilesBetaApi - factory interface
 * @export
 */
var AccessProfilesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccessProfilesBetaApiFp)(configuration);
    return {
        /**
         * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
         * @summary Create Access Profile
         * @param {AccessProfileBeta} accessProfileBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessProfile: function (accessProfileBeta, axiosOptions) {
            return localVarFp.createAccessProfile(accessProfileBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
         * @summary Delete the specified Access Profile
         * @param {string} id ID of the Access Profile to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessProfile: function (id, axiosOptions) {
            return localVarFp.deleteAccessProfile(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
         * @summary Delete Access Profile(s)
         * @param {AccessProfileBulkDeleteRequestBeta} accessProfileBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessProfilesInBulk: function (accessProfileBulkDeleteRequestBeta, axiosOptions) {
            return localVarFp.deleteAccessProfilesInBulk(accessProfileBulkDeleteRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get an Access Profile
         * @param {string} id ID of the Access Profile
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessProfile: function (id, axiosOptions) {
            return localVarFp.getAccessProfile(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
         * @summary List Access Profile\'s Entitlements
         * @param {string} id ID of the access profile containing the entitlements.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessProfileEntitlements: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getAccessProfileEntitlements(id, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary List Access Profiles
         * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
         * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessProfiles: function (forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions) {
            return localVarFp.listAccessProfiles(forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
         * @summary Patch a specified Access Profile
         * @param {string} id ID of the Access Profile to patch
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchAccessProfile: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchAccessProfile(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
         * @summary Update Access Profile(s) requestable field.
         * @param {Array<AccessProfileBulkUpdateRequestInnerBeta>} accessProfileBulkUpdateRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateAccessProfilesInBulk: function (accessProfileBulkUpdateRequestInnerBeta, axiosOptions) {
            return localVarFp.updateAccessProfilesInBulk(accessProfileBulkUpdateRequestInnerBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccessProfilesBetaApiFactory = AccessProfilesBetaApiFactory;
/**
 * AccessProfilesBetaApi - object-oriented interface
 * @export
 * @class AccessProfilesBetaApi
 * @extends {BaseAPI}
 */
var AccessProfilesBetaApi = /** @class */ (function (_super) {
    __extends(AccessProfilesBetaApi, _super);
    function AccessProfilesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfilesBetaApiCreateAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.createAccessProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).createAccessProfile(requestParameters.accessProfileBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {AccessProfilesBetaApiDeleteAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.deleteAccessProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).deleteAccessProfile(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfilesBetaApiDeleteAccessProfilesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.deleteAccessProfilesInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).deleteAccessProfilesInBulk(requestParameters.accessProfileBulkDeleteRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {AccessProfilesBetaApiGetAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.getAccessProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).getAccessProfile(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
     * @summary List Access Profile\'s Entitlements
     * @param {AccessProfilesBetaApiGetAccessProfileEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.getAccessProfileEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).getAccessProfileEntitlements(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary List Access Profiles
     * @param {AccessProfilesBetaApiListAccessProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.listAccessProfiles = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).listAccessProfiles(requestParameters.forSubadmin, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, requestParameters.forSegmentIds, requestParameters.includeUnsegmented, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {AccessProfilesBetaApiPatchAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.patchAccessProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).patchAccessProfile(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
     * @summary Update Access Profile(s) requestable field.
     * @param {AccessProfilesBetaApiUpdateAccessProfilesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    AccessProfilesBetaApi.prototype.updateAccessProfilesInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessProfilesBetaApiFp)(this.configuration).updateAccessProfilesInBulk(requestParameters.accessProfileBulkUpdateRequestInnerBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccessProfilesBetaApi;
}(base_1.BaseAPI));
exports.AccessProfilesBetaApi = AccessProfilesBetaApi;
/**
 * AccessRequestApprovalsBetaApi - axios parameter creator
 * @export
 */
var AccessRequestApprovalsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
         * @summary Approve Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveAccessRequest: function (approvalId, commentDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'approvalId' is not null or undefined
                            (0, common_1.assertParamExists)('approveAccessRequest', 'approvalId', approvalId);
                            // verify required parameter 'commentDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('approveAccessRequest', 'commentDtoBeta', commentDtoBeta);
                            localVarPath = "/access-request-approvals/{approvalId}/approve"
                                .replace("{".concat("approvalId", "}"), encodeURIComponent(String(approvalId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commentDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
         * @summary Forward Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {ForwardApprovalDtoBeta} forwardApprovalDtoBeta Information about the forwarded approval.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        forwardAccessRequest: function (approvalId, forwardApprovalDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'approvalId' is not null or undefined
                            (0, common_1.assertParamExists)('forwardAccessRequest', 'approvalId', approvalId);
                            // verify required parameter 'forwardApprovalDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('forwardAccessRequest', 'forwardApprovalDtoBeta', forwardApprovalDtoBeta);
                            localVarPath = "/access-request-approvals/{approvalId}/forward"
                                .replace("{".concat("approvalId", "}"), encodeURIComponent(String(approvalId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(forwardApprovalDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
         * @summary Get Access Requests Approvals Number
         * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestApprovalSummary: function (ownerId, fromDate, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-request-approvals/approval-summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['owner-id'] = ownerId;
                            }
                            if (fromDate !== undefined) {
                                localVarQueryParameter['from-date'] = fromDate;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
         * @summary Completed Access Request Approvals List
         * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listCompletedApprovals: function (ownerId, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-request-approvals/completed";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['owner-id'] = ownerId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
         * @summary Pending Access Request Approvals List
         * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPendingApprovals: function (ownerId, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-request-approvals/pending";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['owner-id'] = ownerId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
         * @summary Reject Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectAccessRequest: function (approvalId, commentDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'approvalId' is not null or undefined
                            (0, common_1.assertParamExists)('rejectAccessRequest', 'approvalId', approvalId);
                            // verify required parameter 'commentDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('rejectAccessRequest', 'commentDtoBeta', commentDtoBeta);
                            localVarPath = "/access-request-approvals/{approvalId}/reject"
                                .replace("{".concat("approvalId", "}"), encodeURIComponent(String(approvalId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commentDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccessRequestApprovalsBetaApiAxiosParamCreator = AccessRequestApprovalsBetaApiAxiosParamCreator;
/**
 * AccessRequestApprovalsBetaApi - functional programming interface
 * @export
 */
var AccessRequestApprovalsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccessRequestApprovalsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
         * @summary Approve Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveAccessRequest: function (approvalId, commentDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.approveAccessRequest(approvalId, commentDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
         * @summary Forward Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {ForwardApprovalDtoBeta} forwardApprovalDtoBeta Information about the forwarded approval.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        forwardAccessRequest: function (approvalId, forwardApprovalDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.forwardAccessRequest(approvalId, forwardApprovalDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
         * @summary Get Access Requests Approvals Number
         * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestApprovalSummary: function (ownerId, fromDate, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestApprovalSummary(ownerId, fromDate, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
         * @summary Completed Access Request Approvals List
         * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listCompletedApprovals: function (ownerId, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCompletedApprovals(ownerId, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
         * @summary Pending Access Request Approvals List
         * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPendingApprovals: function (ownerId, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPendingApprovals(ownerId, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
         * @summary Reject Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectAccessRequest: function (approvalId, commentDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rejectAccessRequest(approvalId, commentDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccessRequestApprovalsBetaApiFp = AccessRequestApprovalsBetaApiFp;
/**
 * AccessRequestApprovalsBetaApi - factory interface
 * @export
 */
var AccessRequestApprovalsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccessRequestApprovalsBetaApiFp)(configuration);
    return {
        /**
         * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
         * @summary Approve Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveAccessRequest: function (approvalId, commentDtoBeta, axiosOptions) {
            return localVarFp.approveAccessRequest(approvalId, commentDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
         * @summary Forward Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {ForwardApprovalDtoBeta} forwardApprovalDtoBeta Information about the forwarded approval.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        forwardAccessRequest: function (approvalId, forwardApprovalDtoBeta, axiosOptions) {
            return localVarFp.forwardAccessRequest(approvalId, forwardApprovalDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
         * @summary Get Access Requests Approvals Number
         * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestApprovalSummary: function (ownerId, fromDate, axiosOptions) {
            return localVarFp.getAccessRequestApprovalSummary(ownerId, fromDate, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
         * @summary Completed Access Request Approvals List
         * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listCompletedApprovals: function (ownerId, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listCompletedApprovals(ownerId, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
         * @summary Pending Access Request Approvals List
         * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPendingApprovals: function (ownerId, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listPendingApprovals(ownerId, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
         * @summary Reject Access Request Approval
         * @param {string} approvalId Approval ID.
         * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectAccessRequest: function (approvalId, commentDtoBeta, axiosOptions) {
            return localVarFp.rejectAccessRequest(approvalId, commentDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccessRequestApprovalsBetaApiFactory = AccessRequestApprovalsBetaApiFactory;
/**
 * AccessRequestApprovalsBetaApi - object-oriented interface
 * @export
 * @class AccessRequestApprovalsBetaApi
 * @extends {BaseAPI}
 */
var AccessRequestApprovalsBetaApi = /** @class */ (function (_super) {
    __extends(AccessRequestApprovalsBetaApi, _super);
    function AccessRequestApprovalsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {AccessRequestApprovalsBetaApiApproveAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    AccessRequestApprovalsBetaApi.prototype.approveAccessRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestApprovalsBetaApiFp)(this.configuration).approveAccessRequest(requestParameters.approvalId, requestParameters.commentDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {AccessRequestApprovalsBetaApiForwardAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    AccessRequestApprovalsBetaApi.prototype.forwardAccessRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestApprovalsBetaApiFp)(this.configuration).forwardAccessRequest(requestParameters.approvalId, requestParameters.forwardApprovalDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
     * @summary Get Access Requests Approvals Number
     * @param {AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    AccessRequestApprovalsBetaApi.prototype.getAccessRequestApprovalSummary = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccessRequestApprovalsBetaApiFp)(this.configuration).getAccessRequestApprovalSummary(requestParameters.ownerId, requestParameters.fromDate, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {AccessRequestApprovalsBetaApiListCompletedApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    AccessRequestApprovalsBetaApi.prototype.listCompletedApprovals = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccessRequestApprovalsBetaApiFp)(this.configuration).listCompletedApprovals(requestParameters.ownerId, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {AccessRequestApprovalsBetaApiListPendingApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    AccessRequestApprovalsBetaApi.prototype.listPendingApprovals = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccessRequestApprovalsBetaApiFp)(this.configuration).listPendingApprovals(requestParameters.ownerId, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {AccessRequestApprovalsBetaApiRejectAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    AccessRequestApprovalsBetaApi.prototype.rejectAccessRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestApprovalsBetaApiFp)(this.configuration).rejectAccessRequest(requestParameters.approvalId, requestParameters.commentDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccessRequestApprovalsBetaApi;
}(base_1.BaseAPI));
exports.AccessRequestApprovalsBetaApi = AccessRequestApprovalsBetaApi;
/**
 * AccessRequestIdentityMetricsBetaApi - axios parameter creator
 * @export
 */
var AccessRequestIdentityMetricsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this API to return information access metrics.
         * @summary Return access request identity metrics
         * @param {string} identityId Manager\&#39;s identity ID.
         * @param {string} requestedObjectId Requested access item\&#39;s ID.
         * @param {string} type Requested access item\&#39;s type.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestIdentityMetrics: function (identityId, requestedObjectId, type, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessRequestIdentityMetrics', 'identityId', identityId);
                            // verify required parameter 'requestedObjectId' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessRequestIdentityMetrics', 'requestedObjectId', requestedObjectId);
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('getAccessRequestIdentityMetrics', 'type', type);
                            localVarPath = "/access-request-identity-metrics/{identityId}/requested-objects/{requestedObjectId}/type/{type}"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)))
                                .replace("{".concat("requestedObjectId", "}"), encodeURIComponent(String(requestedObjectId)))
                                .replace("{".concat("type", "}"), encodeURIComponent(String(type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccessRequestIdentityMetricsBetaApiAxiosParamCreator = AccessRequestIdentityMetricsBetaApiAxiosParamCreator;
/**
 * AccessRequestIdentityMetricsBetaApi - functional programming interface
 * @export
 */
var AccessRequestIdentityMetricsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccessRequestIdentityMetricsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this API to return information access metrics.
         * @summary Return access request identity metrics
         * @param {string} identityId Manager\&#39;s identity ID.
         * @param {string} requestedObjectId Requested access item\&#39;s ID.
         * @param {string} type Requested access item\&#39;s type.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestIdentityMetrics: function (identityId, requestedObjectId, type, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestIdentityMetrics(identityId, requestedObjectId, type, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccessRequestIdentityMetricsBetaApiFp = AccessRequestIdentityMetricsBetaApiFp;
/**
 * AccessRequestIdentityMetricsBetaApi - factory interface
 * @export
 */
var AccessRequestIdentityMetricsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccessRequestIdentityMetricsBetaApiFp)(configuration);
    return {
        /**
         * Use this API to return information access metrics.
         * @summary Return access request identity metrics
         * @param {string} identityId Manager\&#39;s identity ID.
         * @param {string} requestedObjectId Requested access item\&#39;s ID.
         * @param {string} type Requested access item\&#39;s type.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestIdentityMetrics: function (identityId, requestedObjectId, type, axiosOptions) {
            return localVarFp.getAccessRequestIdentityMetrics(identityId, requestedObjectId, type, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccessRequestIdentityMetricsBetaApiFactory = AccessRequestIdentityMetricsBetaApiFactory;
/**
 * AccessRequestIdentityMetricsBetaApi - object-oriented interface
 * @export
 * @class AccessRequestIdentityMetricsBetaApi
 * @extends {BaseAPI}
 */
var AccessRequestIdentityMetricsBetaApi = /** @class */ (function (_super) {
    __extends(AccessRequestIdentityMetricsBetaApi, _super);
    function AccessRequestIdentityMetricsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this API to return information access metrics.
     * @summary Return access request identity metrics
     * @param {AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetricsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestIdentityMetricsBetaApi
     */
    AccessRequestIdentityMetricsBetaApi.prototype.getAccessRequestIdentityMetrics = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestIdentityMetricsBetaApiFp)(this.configuration).getAccessRequestIdentityMetrics(requestParameters.identityId, requestParameters.requestedObjectId, requestParameters.type, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccessRequestIdentityMetricsBetaApi;
}(base_1.BaseAPI));
exports.AccessRequestIdentityMetricsBetaApi = AccessRequestIdentityMetricsBetaApi;
/**
 * AccessRequestsBetaApi - axios parameter creator
 * @export
 */
var AccessRequestsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
         * @summary Cancel Access Request
         * @param {CancelAccessRequestBeta} cancelAccessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        cancelAccessRequest: function (cancelAccessRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'cancelAccessRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('cancelAccessRequest', 'cancelAccessRequestBeta', cancelAccessRequestBeta);
                            localVarPath = "/access-requests/cancel";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(cancelAccessRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
         * @summary Close Access Request
         * @param {CloseAccessRequestBeta} closeAccessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        closeAccessRequest: function (closeAccessRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'closeAccessRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('closeAccessRequest', 'closeAccessRequestBeta', closeAccessRequestBeta);
                            localVarPath = "/access-requests/close";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(closeAccessRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
         * @summary Submit Access Request
         * @param {AccessRequestBeta} accessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessRequest: function (accessRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createAccessRequest', 'accessRequestBeta', accessRequestBeta);
                            localVarPath = "/access-requests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns the current access-request configuration.
         * @summary Get Access Request Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-request-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
         * @summary Access Request Status
         * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
         * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
         * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
         * @param {number} [limit] Max number of results to return.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessRequestStatus: function (requestedFor, requestedBy, regardingIdentity, assignedTo, count, limit, offset, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/access-request-status";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (requestedFor !== undefined) {
                                localVarQueryParameter['requested-for'] = requestedFor;
                            }
                            if (requestedBy !== undefined) {
                                localVarQueryParameter['requested-by'] = requestedBy;
                            }
                            if (regardingIdentity !== undefined) {
                                localVarQueryParameter['regarding-identity'] = regardingIdentity;
                            }
                            if (assignedTo !== undefined) {
                                localVarQueryParameter['assigned-to'] = assignedTo;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Access Request Configuration
         * @param {AccessRequestConfigBeta} accessRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setAccessRequestConfig: function (accessRequestConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessRequestConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setAccessRequestConfig', 'accessRequestConfigBeta', accessRequestConfigBeta);
                            localVarPath = "/access-request-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessRequestConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccessRequestsBetaApiAxiosParamCreator = AccessRequestsBetaApiAxiosParamCreator;
/**
 * AccessRequestsBetaApi - functional programming interface
 * @export
 */
var AccessRequestsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccessRequestsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
         * @summary Cancel Access Request
         * @param {CancelAccessRequestBeta} cancelAccessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        cancelAccessRequest: function (cancelAccessRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelAccessRequest(cancelAccessRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
         * @summary Close Access Request
         * @param {CloseAccessRequestBeta} closeAccessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        closeAccessRequest: function (closeAccessRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.closeAccessRequest(closeAccessRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
         * @summary Submit Access Request
         * @param {AccessRequestBeta} accessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessRequest: function (accessRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAccessRequest(accessRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns the current access-request configuration.
         * @summary Get Access Request Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
         * @summary Access Request Status
         * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
         * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
         * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
         * @param {number} [limit] Max number of results to return.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessRequestStatus: function (requestedFor, requestedBy, regardingIdentity, assignedTo, count, limit, offset, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAccessRequestStatus(requestedFor, requestedBy, regardingIdentity, assignedTo, count, limit, offset, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Access Request Configuration
         * @param {AccessRequestConfigBeta} accessRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setAccessRequestConfig: function (accessRequestConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setAccessRequestConfig(accessRequestConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccessRequestsBetaApiFp = AccessRequestsBetaApiFp;
/**
 * AccessRequestsBetaApi - factory interface
 * @export
 */
var AccessRequestsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccessRequestsBetaApiFp)(configuration);
    return {
        /**
         * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
         * @summary Cancel Access Request
         * @param {CancelAccessRequestBeta} cancelAccessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        cancelAccessRequest: function (cancelAccessRequestBeta, axiosOptions) {
            return localVarFp.cancelAccessRequest(cancelAccessRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
         * @summary Close Access Request
         * @param {CloseAccessRequestBeta} closeAccessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        closeAccessRequest: function (closeAccessRequestBeta, axiosOptions) {
            return localVarFp.closeAccessRequest(closeAccessRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
         * @summary Submit Access Request
         * @param {AccessRequestBeta} accessRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessRequest: function (accessRequestBeta, axiosOptions) {
            return localVarFp.createAccessRequest(accessRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns the current access-request configuration.
         * @summary Get Access Request Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestConfig: function (axiosOptions) {
            return localVarFp.getAccessRequestConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
         * @summary Access Request Status
         * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
         * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
         * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
         * @param {number} [limit] Max number of results to return.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccessRequestStatus: function (requestedFor, requestedBy, regardingIdentity, assignedTo, count, limit, offset, filters, sorters, axiosOptions) {
            return localVarFp.listAccessRequestStatus(requestedFor, requestedBy, regardingIdentity, assignedTo, count, limit, offset, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Access Request Configuration
         * @param {AccessRequestConfigBeta} accessRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setAccessRequestConfig: function (accessRequestConfigBeta, axiosOptions) {
            return localVarFp.setAccessRequestConfig(accessRequestConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccessRequestsBetaApiFactory = AccessRequestsBetaApiFactory;
/**
 * AccessRequestsBetaApi - object-oriented interface
 * @export
 * @class AccessRequestsBetaApi
 * @extends {BaseAPI}
 */
var AccessRequestsBetaApi = /** @class */ (function (_super) {
    __extends(AccessRequestsBetaApi, _super);
    function AccessRequestsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {AccessRequestsBetaApiCancelAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    AccessRequestsBetaApi.prototype.cancelAccessRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestsBetaApiFp)(this.configuration).cancelAccessRequest(requestParameters.cancelAccessRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
     * @summary Close Access Request
     * @param {AccessRequestsBetaApiCloseAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    AccessRequestsBetaApi.prototype.closeAccessRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestsBetaApiFp)(this.configuration).closeAccessRequest(requestParameters.closeAccessRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequestsBetaApiCreateAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    AccessRequestsBetaApi.prototype.createAccessRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestsBetaApiFp)(this.configuration).createAccessRequest(requestParameters.accessRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    AccessRequestsBetaApi.prototype.getAccessRequestConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestsBetaApiFp)(this.configuration).getAccessRequestConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {AccessRequestsBetaApiListAccessRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    AccessRequestsBetaApi.prototype.listAccessRequestStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccessRequestsBetaApiFp)(this.configuration).listAccessRequestStatus(requestParameters.requestedFor, requestParameters.requestedBy, requestParameters.regardingIdentity, requestParameters.assignedTo, requestParameters.count, requestParameters.limit, requestParameters.offset, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestsBetaApiSetAccessRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    AccessRequestsBetaApi.prototype.setAccessRequestConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccessRequestsBetaApiFp)(this.configuration).setAccessRequestConfig(requestParameters.accessRequestConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccessRequestsBetaApi;
}(base_1.BaseAPI));
exports.AccessRequestsBetaApi = AccessRequestsBetaApi;
/**
 * AccountActivitiesBetaApi - axios parameter creator
 * @export
 */
var AccountActivitiesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This gets a single account activity by its id.
         * @summary Get Account Activity
         * @param {string} id The account activity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountActivity: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getAccountActivity', 'id', id);
                            localVarPath = "/account-activities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a collection of account activities that satisfy the given query parameters.
         * @summary List Account Activities
         * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
         * @param {string} [type] The type of account activity.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccountActivities: function (requestedFor, requestedBy, regardingIdentity, type, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/account-activities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (requestedFor !== undefined) {
                                localVarQueryParameter['requested-for'] = requestedFor;
                            }
                            if (requestedBy !== undefined) {
                                localVarQueryParameter['requested-by'] = requestedBy;
                            }
                            if (regardingIdentity !== undefined) {
                                localVarQueryParameter['regarding-identity'] = regardingIdentity;
                            }
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccountActivitiesBetaApiAxiosParamCreator = AccountActivitiesBetaApiAxiosParamCreator;
/**
 * AccountActivitiesBetaApi - functional programming interface
 * @export
 */
var AccountActivitiesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccountActivitiesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This gets a single account activity by its id.
         * @summary Get Account Activity
         * @param {string} id The account activity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountActivity: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccountActivity(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a collection of account activities that satisfy the given query parameters.
         * @summary List Account Activities
         * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
         * @param {string} [type] The type of account activity.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccountActivities: function (requestedFor, requestedBy, regardingIdentity, type, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAccountActivities(requestedFor, requestedBy, regardingIdentity, type, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccountActivitiesBetaApiFp = AccountActivitiesBetaApiFp;
/**
 * AccountActivitiesBetaApi - factory interface
 * @export
 */
var AccountActivitiesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccountActivitiesBetaApiFp)(configuration);
    return {
        /**
         * This gets a single account activity by its id.
         * @summary Get Account Activity
         * @param {string} id The account activity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountActivity: function (id, axiosOptions) {
            return localVarFp.getAccountActivity(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a collection of account activities that satisfy the given query parameters.
         * @summary List Account Activities
         * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
         * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
         * @param {string} [type] The type of account activity.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccountActivities: function (requestedFor, requestedBy, regardingIdentity, type, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listAccountActivities(requestedFor, requestedBy, regardingIdentity, type, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccountActivitiesBetaApiFactory = AccountActivitiesBetaApiFactory;
/**
 * AccountActivitiesBetaApi - object-oriented interface
 * @export
 * @class AccountActivitiesBetaApi
 * @extends {BaseAPI}
 */
var AccountActivitiesBetaApi = /** @class */ (function (_super) {
    __extends(AccountActivitiesBetaApi, _super);
    function AccountActivitiesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This gets a single account activity by its id.
     * @summary Get Account Activity
     * @param {AccountActivitiesBetaApiGetAccountActivityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountActivitiesBetaApi
     */
    AccountActivitiesBetaApi.prototype.getAccountActivity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountActivitiesBetaApiFp)(this.configuration).getAccountActivity(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {AccountActivitiesBetaApiListAccountActivitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountActivitiesBetaApi
     */
    AccountActivitiesBetaApi.prototype.listAccountActivities = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccountActivitiesBetaApiFp)(this.configuration).listAccountActivities(requestParameters.requestedFor, requestParameters.requestedBy, requestParameters.regardingIdentity, requestParameters.type, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountActivitiesBetaApi;
}(base_1.BaseAPI));
exports.AccountActivitiesBetaApi = AccountActivitiesBetaApi;
/**
 * AccountAggregationsBetaApi - axios parameter creator
 * @export
 */
var AccountAggregationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
         * @summary In-progress Account Aggregation status
         * @param {string} id The account aggregation id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAggregationStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getAccountAggregationStatus', 'id', id);
                            localVarPath = "/account-aggregations/{id}/status"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccountAggregationsBetaApiAxiosParamCreator = AccountAggregationsBetaApiAxiosParamCreator;
/**
 * AccountAggregationsBetaApi - functional programming interface
 * @export
 */
var AccountAggregationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccountAggregationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
         * @summary In-progress Account Aggregation status
         * @param {string} id The account aggregation id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAggregationStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccountAggregationStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccountAggregationsBetaApiFp = AccountAggregationsBetaApiFp;
/**
 * AccountAggregationsBetaApi - factory interface
 * @export
 */
var AccountAggregationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccountAggregationsBetaApiFp)(configuration);
    return {
        /**
         * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
         * @summary In-progress Account Aggregation status
         * @param {string} id The account aggregation id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountAggregationStatus: function (id, axiosOptions) {
            return localVarFp.getAccountAggregationStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccountAggregationsBetaApiFactory = AccountAggregationsBetaApiFactory;
/**
 * AccountAggregationsBetaApi - object-oriented interface
 * @export
 * @class AccountAggregationsBetaApi
 * @extends {BaseAPI}
 */
var AccountAggregationsBetaApi = /** @class */ (function (_super) {
    __extends(AccountAggregationsBetaApi, _super);
    function AccountAggregationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
     * @summary In-progress Account Aggregation status
     * @param {AccountAggregationsBetaApiGetAccountAggregationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAggregationsBetaApi
     */
    AccountAggregationsBetaApi.prototype.getAccountAggregationStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountAggregationsBetaApiFp)(this.configuration).getAccountAggregationStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountAggregationsBetaApi;
}(base_1.BaseAPI));
exports.AccountAggregationsBetaApi = AccountAggregationsBetaApi;
/**
 * AccountUsagesBetaApi - axios parameter creator
 * @export
 */
var AccountUsagesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API returns a summary of account usage insights for past 12 months.
         * @summary Returns account usage insights
         * @param {string} accountId ID of IDN account
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getUsagesByAccountId: function (accountId, limit, offset, count, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accountId' is not null or undefined
                            (0, common_1.assertParamExists)('getUsagesByAccountId', 'accountId', accountId);
                            localVarPath = "/account-usages/{accountId}/summaries"
                                .replace("{".concat("accountId", "}"), encodeURIComponent(String(accountId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccountUsagesBetaApiAxiosParamCreator = AccountUsagesBetaApiAxiosParamCreator;
/**
 * AccountUsagesBetaApi - functional programming interface
 * @export
 */
var AccountUsagesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccountUsagesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API returns a summary of account usage insights for past 12 months.
         * @summary Returns account usage insights
         * @param {string} accountId ID of IDN account
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getUsagesByAccountId: function (accountId, limit, offset, count, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUsagesByAccountId(accountId, limit, offset, count, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccountUsagesBetaApiFp = AccountUsagesBetaApiFp;
/**
 * AccountUsagesBetaApi - factory interface
 * @export
 */
var AccountUsagesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccountUsagesBetaApiFp)(configuration);
    return {
        /**
         * This API returns a summary of account usage insights for past 12 months.
         * @summary Returns account usage insights
         * @param {string} accountId ID of IDN account
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getUsagesByAccountId: function (accountId, limit, offset, count, sorters, axiosOptions) {
            return localVarFp.getUsagesByAccountId(accountId, limit, offset, count, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccountUsagesBetaApiFactory = AccountUsagesBetaApiFactory;
/**
 * AccountUsagesBetaApi - object-oriented interface
 * @export
 * @class AccountUsagesBetaApi
 * @extends {BaseAPI}
 */
var AccountUsagesBetaApi = /** @class */ (function (_super) {
    __extends(AccountUsagesBetaApi, _super);
    function AccountUsagesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {AccountUsagesBetaApiGetUsagesByAccountIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountUsagesBetaApi
     */
    AccountUsagesBetaApi.prototype.getUsagesByAccountId = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountUsagesBetaApiFp)(this.configuration).getUsagesByAccountId(requestParameters.accountId, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountUsagesBetaApi;
}(base_1.BaseAPI));
exports.AccountUsagesBetaApi = AccountUsagesBetaApi;
/**
 * AccountsBetaApi - axios parameter creator
 * @export
 */
var AccountsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Create Account
         * @param {AccountAttributesCreateBeta} accountAttributesCreateBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: function (accountAttributesCreateBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accountAttributesCreateBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createAccount', 'accountAttributesCreateBeta', accountAttributesCreateBeta);
                            localVarPath = "/accounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountAttributesCreateBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
         * @summary Delete Account
         * @param {string} id Account ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccount', 'id', id);
                            localVarPath = "/accounts/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
         * @summary Remove Account
         * @param {string} id The account id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountAsync: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccountAsync', 'id', id);
                            localVarPath = "/accounts/{id}/remove"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Disable Account
         * @param {string} id The account id
         * @param {AccountToggleRequestBeta} accountToggleRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccount: function (id, accountToggleRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('disableAccount', 'id', id);
                            // verify required parameter 'accountToggleRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('disableAccount', 'accountToggleRequestBeta', accountToggleRequestBeta);
                            localVarPath = "/accounts/{id}/disable"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountToggleRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits a task to disable IDN account for a single identity.
         * @summary Disable IDN Account for Identity
         * @param {string} id The identity id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccountForIdentity: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('disableAccountForIdentity', 'id', id);
                            localVarPath = "/identities-accounts/{id}/disable"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits tasks to disable IDN account for each identity provided in the request body.
         * @summary Disable IDN Accounts for Identities
         * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccountsForIdentities: function (identitiesAccountsBulkRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identitiesAccountsBulkRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('disableAccountsForIdentities', 'identitiesAccountsBulkRequestBeta', identitiesAccountsBulkRequestBeta);
                            localVarPath = "/identities-accounts/disable";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identitiesAccountsBulkRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Enable Account
         * @param {string} id The account id
         * @param {AccountToggleRequestBeta} accountToggleRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccount: function (id, accountToggleRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('enableAccount', 'id', id);
                            // verify required parameter 'accountToggleRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('enableAccount', 'accountToggleRequestBeta', accountToggleRequestBeta);
                            localVarPath = "/accounts/{id}/enable"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountToggleRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits a task to enable IDN account for a single identity.
         * @summary Enable IDN Account for Identity
         * @param {string} id The identity id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountForIdentity: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('enableAccountForIdentity', 'id', id);
                            localVarPath = "/identities-accounts/{id}/enable"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits tasks to enable IDN account for each identity provided in the request body.
         * @summary Enable IDN Accounts for Identities
         * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountsForIdentities: function (identitiesAccountsBulkRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identitiesAccountsBulkRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('enableAccountsForIdentities', 'identitiesAccountsBulkRequestBeta', identitiesAccountsBulkRequestBeta);
                            localVarPath = "/identities-accounts/enable";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identitiesAccountsBulkRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Account Details
         * @param {string} id Account ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getAccount', 'id', id);
                            localVarPath = "/accounts/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Account Entitlements
         * @param {string} id The account id
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountEntitlements: function (id, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getAccountEntitlements', 'id', id);
                            localVarPath = "/accounts/{id}/entitlements"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Accounts List
         * @param {'SLIM' | 'FULL'} [detailLevel] Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts: function (detailLevel, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/accounts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (detailLevel !== undefined) {
                                localVarQueryParameter['detailLevel'] = detailLevel;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
         * @summary Update Account
         * @param {string} id Account ID.
         * @param {AccountAttributesBeta} accountAttributesBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putAccount: function (id, accountAttributesBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putAccount', 'id', id);
                            // verify required parameter 'accountAttributesBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putAccount', 'accountAttributesBeta', accountAttributesBeta);
                            localVarPath = "/accounts/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountAttributesBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Reload Account
         * @param {string} id The account id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitReloadAccount: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('submitReloadAccount', 'id', id);
                            localVarPath = "/accounts/{id}/reload"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Unlock Account
         * @param {string} id The account ID.
         * @param {AccountUnlockRequestBeta} accountUnlockRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        unlockAccount: function (id, accountUnlockRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('unlockAccount', 'id', id);
                            // verify required parameter 'accountUnlockRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('unlockAccount', 'accountUnlockRequestBeta', accountUnlockRequestBeta);
                            localVarPath = "/accounts/{id}/unlock"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accountUnlockRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
         * @summary Update Account
         * @param {string} id Account ID.
         * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: function (id, requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateAccount', 'id', id);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('updateAccount', 'requestBody', requestBody);
                            localVarPath = "/accounts/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AccountsBetaApiAxiosParamCreator = AccountsBetaApiAxiosParamCreator;
/**
 * AccountsBetaApi - functional programming interface
 * @export
 */
var AccountsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AccountsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Create Account
         * @param {AccountAttributesCreateBeta} accountAttributesCreateBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: function (accountAttributesCreateBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAccount(accountAttributesCreateBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
         * @summary Delete Account
         * @param {string} id Account ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAccount(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
         * @summary Remove Account
         * @param {string} id The account id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountAsync: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAccountAsync(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Disable Account
         * @param {string} id The account id
         * @param {AccountToggleRequestBeta} accountToggleRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccount: function (id, accountToggleRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableAccount(id, accountToggleRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits a task to disable IDN account for a single identity.
         * @summary Disable IDN Account for Identity
         * @param {string} id The identity id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccountForIdentity: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableAccountForIdentity(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits tasks to disable IDN account for each identity provided in the request body.
         * @summary Disable IDN Accounts for Identities
         * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccountsForIdentities: function (identitiesAccountsBulkRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.disableAccountsForIdentities(identitiesAccountsBulkRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Enable Account
         * @param {string} id The account id
         * @param {AccountToggleRequestBeta} accountToggleRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccount: function (id, accountToggleRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableAccount(id, accountToggleRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits a task to enable IDN account for a single identity.
         * @summary Enable IDN Account for Identity
         * @param {string} id The identity id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountForIdentity: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableAccountForIdentity(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits tasks to enable IDN account for each identity provided in the request body.
         * @summary Enable IDN Accounts for Identities
         * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountsForIdentities: function (identitiesAccountsBulkRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.enableAccountsForIdentities(identitiesAccountsBulkRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Account Details
         * @param {string} id Account ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccount(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Account Entitlements
         * @param {string} id The account id
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountEntitlements: function (id, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccountEntitlements(id, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Accounts List
         * @param {'SLIM' | 'FULL'} [detailLevel] Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts: function (detailLevel, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listAccounts(detailLevel, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
         * @summary Update Account
         * @param {string} id Account ID.
         * @param {AccountAttributesBeta} accountAttributesBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putAccount: function (id, accountAttributesBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putAccount(id, accountAttributesBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Reload Account
         * @param {string} id The account id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitReloadAccount: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitReloadAccount(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Unlock Account
         * @param {string} id The account ID.
         * @param {AccountUnlockRequestBeta} accountUnlockRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        unlockAccount: function (id, accountUnlockRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unlockAccount(id, accountUnlockRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
         * @summary Update Account
         * @param {string} id Account ID.
         * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: function (id, requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateAccount(id, requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AccountsBetaApiFp = AccountsBetaApiFp;
/**
 * AccountsBetaApi - factory interface
 * @export
 */
var AccountsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AccountsBetaApiFp)(configuration);
    return {
        /**
         * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Create Account
         * @param {AccountAttributesCreateBeta} accountAttributesCreateBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccount: function (accountAttributesCreateBeta, axiosOptions) {
            return localVarFp.createAccount(accountAttributesCreateBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
         * @summary Delete Account
         * @param {string} id Account ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccount: function (id, axiosOptions) {
            return localVarFp.deleteAccount(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
         * @summary Remove Account
         * @param {string} id The account id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountAsync: function (id, axiosOptions) {
            return localVarFp.deleteAccountAsync(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Disable Account
         * @param {string} id The account id
         * @param {AccountToggleRequestBeta} accountToggleRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccount: function (id, accountToggleRequestBeta, axiosOptions) {
            return localVarFp.disableAccount(id, accountToggleRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits a task to disable IDN account for a single identity.
         * @summary Disable IDN Account for Identity
         * @param {string} id The identity id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccountForIdentity: function (id, axiosOptions) {
            return localVarFp.disableAccountForIdentity(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits tasks to disable IDN account for each identity provided in the request body.
         * @summary Disable IDN Accounts for Identities
         * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        disableAccountsForIdentities: function (identitiesAccountsBulkRequestBeta, axiosOptions) {
            return localVarFp.disableAccountsForIdentities(identitiesAccountsBulkRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Enable Account
         * @param {string} id The account id
         * @param {AccountToggleRequestBeta} accountToggleRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccount: function (id, accountToggleRequestBeta, axiosOptions) {
            return localVarFp.enableAccount(id, accountToggleRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits a task to enable IDN account for a single identity.
         * @summary Enable IDN Account for Identity
         * @param {string} id The identity id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountForIdentity: function (id, axiosOptions) {
            return localVarFp.enableAccountForIdentity(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits tasks to enable IDN account for each identity provided in the request body.
         * @summary Enable IDN Accounts for Identities
         * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountsForIdentities: function (identitiesAccountsBulkRequestBeta, axiosOptions) {
            return localVarFp.enableAccountsForIdentities(identitiesAccountsBulkRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Account Details
         * @param {string} id Account ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: function (id, axiosOptions) {
            return localVarFp.getAccount(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Account Entitlements
         * @param {string} id The account id
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccountEntitlements: function (id, offset, limit, count, axiosOptions) {
            return localVarFp.getAccountEntitlements(id, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Accounts List
         * @param {'SLIM' | 'FULL'} [detailLevel] Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listAccounts: function (detailLevel, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listAccounts(detailLevel, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
         * @summary Update Account
         * @param {string} id Account ID.
         * @param {AccountAttributesBeta} accountAttributesBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putAccount: function (id, accountAttributesBeta, axiosOptions) {
            return localVarFp.putAccount(id, accountAttributesBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Reload Account
         * @param {string} id The account id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitReloadAccount: function (id, axiosOptions) {
            return localVarFp.submitReloadAccount(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
         * @summary Unlock Account
         * @param {string} id The account ID.
         * @param {AccountUnlockRequestBeta} accountUnlockRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        unlockAccount: function (id, accountUnlockRequestBeta, axiosOptions) {
            return localVarFp.unlockAccount(id, accountUnlockRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
         * @summary Update Account
         * @param {string} id Account ID.
         * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: function (id, requestBody, axiosOptions) {
            return localVarFp.updateAccount(id, requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AccountsBetaApiFactory = AccountsBetaApiFactory;
/**
 * AccountsBetaApi - object-oriented interface
 * @export
 * @class AccountsBetaApi
 * @extends {BaseAPI}
 */
var AccountsBetaApi = /** @class */ (function (_super) {
    __extends(AccountsBetaApi, _super);
    function AccountsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountsBetaApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.createAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).createAccount(requestParameters.accountAttributesCreateBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {AccountsBetaApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.deleteAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).deleteAccount(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove Account
     * @param {AccountsBetaApiDeleteAccountAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.deleteAccountAsync = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).deleteAccountAsync(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {AccountsBetaApiDisableAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.disableAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).disableAccount(requestParameters.id, requestParameters.accountToggleRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits a task to disable IDN account for a single identity.
     * @summary Disable IDN Account for Identity
     * @param {AccountsBetaApiDisableAccountForIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.disableAccountForIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).disableAccountForIdentity(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits tasks to disable IDN account for each identity provided in the request body.
     * @summary Disable IDN Accounts for Identities
     * @param {AccountsBetaApiDisableAccountsForIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.disableAccountsForIdentities = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).disableAccountsForIdentities(requestParameters.identitiesAccountsBulkRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {AccountsBetaApiEnableAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.enableAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).enableAccount(requestParameters.id, requestParameters.accountToggleRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits a task to enable IDN account for a single identity.
     * @summary Enable IDN Account for Identity
     * @param {AccountsBetaApiEnableAccountForIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.enableAccountForIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).enableAccountForIdentity(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits tasks to enable IDN account for each identity provided in the request body.
     * @summary Enable IDN Accounts for Identities
     * @param {AccountsBetaApiEnableAccountsForIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.enableAccountsForIdentities = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).enableAccountsForIdentities(requestParameters.identitiesAccountsBulkRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {AccountsBetaApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.getAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).getAccount(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {AccountsBetaApiGetAccountEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.getAccountEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).getAccountEntitlements(requestParameters.id, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {AccountsBetaApiListAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.listAccounts = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.AccountsBetaApiFp)(this.configuration).listAccounts(requestParameters.detailLevel, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {AccountsBetaApiPutAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.putAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).putAccount(requestParameters.id, requestParameters.accountAttributesBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {AccountsBetaApiSubmitReloadAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.submitReloadAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).submitReloadAccount(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {AccountsBetaApiUnlockAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.unlockAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).unlockAccount(requestParameters.id, requestParameters.accountUnlockRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {AccountsBetaApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    AccountsBetaApi.prototype.updateAccount = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AccountsBetaApiFp)(this.configuration).updateAccount(requestParameters.id, requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AccountsBetaApi;
}(base_1.BaseAPI));
exports.AccountsBetaApi = AccountsBetaApi;
/**
 * ApplicationDiscoveryBetaApi - axios parameter creator
 * @export
 */
var ApplicationDiscoveryBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
         * @summary Retrieve discovered applications for tenant
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredApplications: function (limit, offset, filter, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/discovered-applications";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (filter !== undefined) {
                                localVarQueryParameter['filter'] = filter;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
         * @summary CSV template download for discovery
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getManualDiscoverApplicationsCsvTemplate: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/manual-discover-applications-template";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
         * @summary List vendor connector mappings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getVendorConnectorMappings: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/vendor-connector-mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
         * @summary CSV Upload to discover applications
         * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendManualDiscoverApplicationsCsvTemplate: function (file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'file' is not null or undefined
                            (0, common_1.assertParamExists)('sendManualDiscoverApplicationsCsvTemplate', 'file', file);
                            localVarPath = "/manual-discover-applications";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ApplicationDiscoveryBetaApiAxiosParamCreator = ApplicationDiscoveryBetaApiAxiosParamCreator;
/**
 * ApplicationDiscoveryBetaApi - functional programming interface
 * @export
 */
var ApplicationDiscoveryBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ApplicationDiscoveryBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
         * @summary Retrieve discovered applications for tenant
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredApplications: function (limit, offset, filter, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDiscoveredApplications(limit, offset, filter, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
         * @summary CSV template download for discovery
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getManualDiscoverApplicationsCsvTemplate: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getManualDiscoverApplicationsCsvTemplate(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
         * @summary List vendor connector mappings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getVendorConnectorMappings: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getVendorConnectorMappings(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
         * @summary CSV Upload to discover applications
         * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendManualDiscoverApplicationsCsvTemplate: function (file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendManualDiscoverApplicationsCsvTemplate(file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ApplicationDiscoveryBetaApiFp = ApplicationDiscoveryBetaApiFp;
/**
 * ApplicationDiscoveryBetaApi - factory interface
 * @export
 */
var ApplicationDiscoveryBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ApplicationDiscoveryBetaApiFp)(configuration);
    return {
        /**
         * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
         * @summary Retrieve discovered applications for tenant
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDiscoveredApplications: function (limit, offset, filter, sorters, axiosOptions) {
            return localVarFp.getDiscoveredApplications(limit, offset, filter, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
         * @summary CSV template download for discovery
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getManualDiscoverApplicationsCsvTemplate: function (axiosOptions) {
            return localVarFp.getManualDiscoverApplicationsCsvTemplate(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
         * @summary List vendor connector mappings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getVendorConnectorMappings: function (axiosOptions) {
            return localVarFp.getVendorConnectorMappings(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
         * @summary CSV Upload to discover applications
         * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendManualDiscoverApplicationsCsvTemplate: function (file, axiosOptions) {
            return localVarFp.sendManualDiscoverApplicationsCsvTemplate(file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ApplicationDiscoveryBetaApiFactory = ApplicationDiscoveryBetaApiFactory;
/**
 * ApplicationDiscoveryBetaApi - object-oriented interface
 * @export
 * @class ApplicationDiscoveryBetaApi
 * @extends {BaseAPI}
 */
var ApplicationDiscoveryBetaApi = /** @class */ (function (_super) {
    __extends(ApplicationDiscoveryBetaApi, _super);
    function ApplicationDiscoveryBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {ApplicationDiscoveryBetaApiGetDiscoveredApplicationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    ApplicationDiscoveryBetaApi.prototype.getDiscoveredApplications = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ApplicationDiscoveryBetaApiFp)(this.configuration).getDiscoveredApplications(requestParameters.limit, requestParameters.offset, requestParameters.filter, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    ApplicationDiscoveryBetaApi.prototype.getManualDiscoverApplicationsCsvTemplate = function (axiosOptions) {
        var _this = this;
        return (0, exports.ApplicationDiscoveryBetaApiFp)(this.configuration).getManualDiscoverApplicationsCsvTemplate(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    ApplicationDiscoveryBetaApi.prototype.getVendorConnectorMappings = function (axiosOptions) {
        var _this = this;
        return (0, exports.ApplicationDiscoveryBetaApiFp)(this.configuration).getVendorConnectorMappings(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {ApplicationDiscoveryBetaApiSendManualDiscoverApplicationsCsvTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    ApplicationDiscoveryBetaApi.prototype.sendManualDiscoverApplicationsCsvTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ApplicationDiscoveryBetaApiFp)(this.configuration).sendManualDiscoverApplicationsCsvTemplate(requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ApplicationDiscoveryBetaApi;
}(base_1.BaseAPI));
exports.ApplicationDiscoveryBetaApi = ApplicationDiscoveryBetaApi;
/**
 * ApprovalsBetaApi - axios parameter creator
 * @export
 */
var ApprovalsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
         * @summary Get an approval
         * @param {string} id ID of the approval that is to be returned
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getApproval: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getApproval', 'id', id);
                            localVarPath = "/generic-approvals/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
         * @summary Get Approvals
         * @param {boolean} [mine] Returns the list of approvals for the current caller
         * @param {string} [requesterId] Returns the list of approvals for a given requester ID
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getApprovals: function (mine, requesterId, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/generic-approvals";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (mine !== undefined) {
                                localVarQueryParameter['mine'] = mine;
                            }
                            if (requesterId !== undefined) {
                                localVarQueryParameter['requesterId'] = requesterId;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Change the values of a given approval
         * @summary Change an approval
         * @param {ApprovalDtoBeta} approvalDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchApproval: function (approvalDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'approvalDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchApproval', 'approvalDtoBeta', approvalDtoBeta);
                            localVarPath = "/generic-approvals/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(approvalDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ApprovalsBetaApiAxiosParamCreator = ApprovalsBetaApiAxiosParamCreator;
/**
 * ApprovalsBetaApi - functional programming interface
 * @export
 */
var ApprovalsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ApprovalsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
         * @summary Get an approval
         * @param {string} id ID of the approval that is to be returned
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getApproval: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getApproval(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
         * @summary Get Approvals
         * @param {boolean} [mine] Returns the list of approvals for the current caller
         * @param {string} [requesterId] Returns the list of approvals for a given requester ID
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getApprovals: function (mine, requesterId, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getApprovals(mine, requesterId, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Change the values of a given approval
         * @summary Change an approval
         * @param {ApprovalDtoBeta} approvalDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchApproval: function (approvalDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchApproval(approvalDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ApprovalsBetaApiFp = ApprovalsBetaApiFp;
/**
 * ApprovalsBetaApi - factory interface
 * @export
 */
var ApprovalsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ApprovalsBetaApiFp)(configuration);
    return {
        /**
         * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
         * @summary Get an approval
         * @param {string} id ID of the approval that is to be returned
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getApproval: function (id, axiosOptions) {
            return localVarFp.getApproval(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
         * @summary Get Approvals
         * @param {boolean} [mine] Returns the list of approvals for the current caller
         * @param {string} [requesterId] Returns the list of approvals for a given requester ID
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getApprovals: function (mine, requesterId, filters, axiosOptions) {
            return localVarFp.getApprovals(mine, requesterId, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Change the values of a given approval
         * @summary Change an approval
         * @param {ApprovalDtoBeta} approvalDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchApproval: function (approvalDtoBeta, axiosOptions) {
            return localVarFp.patchApproval(approvalDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ApprovalsBetaApiFactory = ApprovalsBetaApiFactory;
/**
 * ApprovalsBetaApi - object-oriented interface
 * @export
 * @class ApprovalsBetaApi
 * @extends {BaseAPI}
 */
var ApprovalsBetaApi = /** @class */ (function (_super) {
    __extends(ApprovalsBetaApi, _super);
    function ApprovalsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
     * @summary Get an approval
     * @param {ApprovalsBetaApiGetApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsBetaApi
     */
    ApprovalsBetaApi.prototype.getApproval = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ApprovalsBetaApiFp)(this.configuration).getApproval(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
     * @summary Get Approvals
     * @param {ApprovalsBetaApiGetApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsBetaApi
     */
    ApprovalsBetaApi.prototype.getApprovals = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ApprovalsBetaApiFp)(this.configuration).getApprovals(requestParameters.mine, requestParameters.requesterId, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Change the values of a given approval
     * @summary Change an approval
     * @param {ApprovalsBetaApiPatchApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsBetaApi
     */
    ApprovalsBetaApi.prototype.patchApproval = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ApprovalsBetaApiFp)(this.configuration).patchApproval(requestParameters.approvalDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ApprovalsBetaApi;
}(base_1.BaseAPI));
exports.ApprovalsBetaApi = ApprovalsBetaApi;
/**
 * AuthProfileBetaApi - axios parameter creator
 * @export
 */
var AuthProfileBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API returns auth profile information.
         * @summary Get Auth Profile.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProfileConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/auth-profiles/{id}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of auth profiles.
         * @summary Get list of Auth Profiles.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProfileConfigList: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/auth-profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
         * @summary Patch a specified Auth Profile
         * @param {string} id ID of the Auth Profile to patch.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchProfileConfig: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchProfileConfig', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchProfileConfig', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/auth-profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AuthProfileBetaApiAxiosParamCreator = AuthProfileBetaApiAxiosParamCreator;
/**
 * AuthProfileBetaApi - functional programming interface
 * @export
 */
var AuthProfileBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthProfileBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API returns auth profile information.
         * @summary Get Auth Profile.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProfileConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProfileConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of auth profiles.
         * @summary Get list of Auth Profiles.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProfileConfigList: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProfileConfigList(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
         * @summary Patch a specified Auth Profile
         * @param {string} id ID of the Auth Profile to patch.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchProfileConfig: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchProfileConfig(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AuthProfileBetaApiFp = AuthProfileBetaApiFp;
/**
 * AuthProfileBetaApi - factory interface
 * @export
 */
var AuthProfileBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthProfileBetaApiFp)(configuration);
    return {
        /**
         * This API returns auth profile information.
         * @summary Get Auth Profile.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProfileConfig: function (axiosOptions) {
            return localVarFp.getProfileConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of auth profiles.
         * @summary Get list of Auth Profiles.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProfileConfigList: function (axiosOptions) {
            return localVarFp.getProfileConfigList(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
         * @summary Patch a specified Auth Profile
         * @param {string} id ID of the Auth Profile to patch.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchProfileConfig: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchProfileConfig(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthProfileBetaApiFactory = AuthProfileBetaApiFactory;
/**
 * AuthProfileBetaApi - object-oriented interface
 * @export
 * @class AuthProfileBetaApi
 * @extends {BaseAPI}
 */
var AuthProfileBetaApi = /** @class */ (function (_super) {
    __extends(AuthProfileBetaApi, _super);
    function AuthProfileBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API returns auth profile information.
     * @summary Get Auth Profile.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProfileBetaApi
     */
    AuthProfileBetaApi.prototype.getProfileConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.AuthProfileBetaApiFp)(this.configuration).getProfileConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of auth profiles.
     * @summary Get list of Auth Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProfileBetaApi
     */
    AuthProfileBetaApi.prototype.getProfileConfigList = function (axiosOptions) {
        var _this = this;
        return (0, exports.AuthProfileBetaApiFp)(this.configuration).getProfileConfigList(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
     * @summary Patch a specified Auth Profile
     * @param {AuthProfileBetaApiPatchProfileConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProfileBetaApi
     */
    AuthProfileBetaApi.prototype.patchProfileConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.AuthProfileBetaApiFp)(this.configuration).patchProfileConfig(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthProfileBetaApi;
}(base_1.BaseAPI));
exports.AuthProfileBetaApi = AuthProfileBetaApi;
/**
 * CertificationCampaignsBetaApi - axios parameter creator
 * @export
 */
var CertificationCampaignsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Complete a Campaign
         * @param {string} id Campaign ID.
         * @param {CompleteCampaignOptionsBeta} [completeCampaignOptionsBeta] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        completeCampaign: function (id, completeCampaignOptionsBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('completeCampaign', 'id', id);
                            localVarPath = "/campaigns/{id}/complete"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(completeCampaignOptionsBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Create Campaign
         * @param {CampaignBeta} campaignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createCampaign: function (campaignBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'campaignBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createCampaign', 'campaignBeta', campaignBeta);
                            localVarPath = "/campaigns";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(campaignBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Create a Campaign Template
         * @param {CampaignTemplateBeta} campaignTemplateBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createCampaignTemplate: function (campaignTemplateBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'campaignTemplateBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createCampaignTemplate', 'campaignTemplateBeta', campaignTemplateBeta);
                            localVarPath = "/campaign-templates";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(campaignTemplateBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete a Campaign Template
         * @param {string} id ID of the campaign template being deleted.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaignTemplate: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCampaignTemplate', 'id', id);
                            localVarPath = "/campaign-templates/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete Campaign Template Schedule
         * @param {string} id ID of the campaign template whose schedule is being deleted.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaignTemplateSchedule: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCampaignTemplateSchedule', 'id', id);
                            localVarPath = "/campaign-templates/{id}/schedule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete Campaigns
         * @param {DeleteCampaignsRequestBeta} deleteCampaignsRequestBeta IDs of the campaigns to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaigns: function (deleteCampaignsRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deleteCampaignsRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCampaigns', 'deleteCampaignsRequestBeta', deleteCampaignsRequestBeta);
                            localVarPath = "/campaigns/delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deleteCampaignsRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary List Campaigns
         * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getActiveCampaigns: function (detail, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/campaigns";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (detail !== undefined) {
                                localVarQueryParameter['detail'] = detail;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign
         * @param {string} id ID of the campaign to be retrieved.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaign: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getCampaign', 'id', id);
                            localVarPath = "/campaigns/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Get Campaign Reports
         * @param {string} id ID of the campaign whose reports are being fetched.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignReports: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getCampaignReports', 'id', id);
                            localVarPath = "/campaigns/{id}/reports"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign Reports Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignReportsConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/campaigns/reports-configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get a Campaign Template
         * @param {string} id Requested campaign template\&#39;s ID.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplate: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getCampaignTemplate', 'id', id);
                            localVarPath = "/campaign-templates/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign Template Schedule
         * @param {string} id ID of the campaign template whose schedule is being fetched.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplateSchedule: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getCampaignTemplateSchedule', 'id', id);
                            localVarPath = "/campaign-templates/{id}/schedule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary List Campaign Templates
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplates: function (limit, offset, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/campaign-templates";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Reassign Certifications
         * @param {string} id The certification campaign ID
         * @param {AdminReviewReassignBeta} adminReviewReassignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        move: function (id, adminReviewReassignBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('move', 'id', id);
                            // verify required parameter 'adminReviewReassignBeta' is not null or undefined
                            (0, common_1.assertParamExists)('move', 'adminReviewReassignBeta', adminReviewReassignBeta);
                            localVarPath = "/campaigns/{id}/reassign"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(adminReviewReassignBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Update a Campaign Template
         * @param {string} id ID of the campaign template being modified.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        patchCampaignTemplate: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchCampaignTemplate', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchCampaignTemplate', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/campaign-templates/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Set Campaign Reports Configuration
         * @param {CampaignReportsConfigBeta} campaignReportsConfigBeta Campaign report configuration.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setCampaignReportsConfig: function (campaignReportsConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'campaignReportsConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setCampaignReportsConfig', 'campaignReportsConfigBeta', campaignReportsConfigBeta);
                            localVarPath = "/campaigns/reports-configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(campaignReportsConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Set Campaign Template Schedule
         * @param {string} id ID of the campaign template being scheduled.
         * @param {ScheduleBeta} [scheduleBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setCampaignTemplateSchedule: function (id, scheduleBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('setCampaignTemplateSchedule', 'id', id);
                            localVarPath = "/campaign-templates/{id}/schedule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(scheduleBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Activate a Campaign
         * @param {string} id Campaign ID.
         * @param {ActivateCampaignOptionsBeta} [activateCampaignOptionsBeta] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaign: function (id, activateCampaignOptionsBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('startCampaign', 'id', id);
                            localVarPath = "/campaigns/{id}/activate"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(activateCampaignOptionsBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Run Campaign Remediation Scan
         * @param {string} id ID of the campaign the remediation scan is being run for.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaignRemediationScan: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('startCampaignRemediationScan', 'id', id);
                            localVarPath = "/campaigns/{id}/run-remediation-scan"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Run Campaign Report
         * @param {string} id ID of the campaign the report is being run for.
         * @param {ReportTypeBeta} type Type of report to run.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaignReport: function (id, type, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('startCampaignReport', 'id', id);
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('startCampaignReport', 'type', type);
                            localVarPath = "/campaigns/{id}/run-report/{type}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("type", "}"), encodeURIComponent(String(type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Generate a Campaign from Template
         * @param {string} id ID of the campaign template to use for generation.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startGenerateCampaignTemplate: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('startGenerateCampaignTemplate', 'id', id);
                            localVarPath = "/campaign-templates/{id}/generate"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Update a Campaign
         * @param {string} id ID of the campaign template being modified.
         * @param {Array<object>} requestBody A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCampaign: function (id, requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateCampaign', 'id', id);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('updateCampaign', 'requestBody', requestBody);
                            localVarPath = "/campaigns/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CertificationCampaignsBetaApiAxiosParamCreator = CertificationCampaignsBetaApiAxiosParamCreator;
/**
 * CertificationCampaignsBetaApi - functional programming interface
 * @export
 */
var CertificationCampaignsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CertificationCampaignsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Complete a Campaign
         * @param {string} id Campaign ID.
         * @param {CompleteCampaignOptionsBeta} [completeCampaignOptionsBeta] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        completeCampaign: function (id, completeCampaignOptionsBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.completeCampaign(id, completeCampaignOptionsBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Create Campaign
         * @param {CampaignBeta} campaignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createCampaign: function (campaignBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCampaign(campaignBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Create a Campaign Template
         * @param {CampaignTemplateBeta} campaignTemplateBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createCampaignTemplate: function (campaignTemplateBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCampaignTemplate(campaignTemplateBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete a Campaign Template
         * @param {string} id ID of the campaign template being deleted.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaignTemplate: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCampaignTemplate(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete Campaign Template Schedule
         * @param {string} id ID of the campaign template whose schedule is being deleted.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaignTemplateSchedule: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCampaignTemplateSchedule(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete Campaigns
         * @param {DeleteCampaignsRequestBeta} deleteCampaignsRequestBeta IDs of the campaigns to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaigns: function (deleteCampaignsRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCampaigns(deleteCampaignsRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary List Campaigns
         * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getActiveCampaigns: function (detail, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getActiveCampaigns(detail, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign
         * @param {string} id ID of the campaign to be retrieved.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaign: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCampaign(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Get Campaign Reports
         * @param {string} id ID of the campaign whose reports are being fetched.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignReports: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCampaignReports(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign Reports Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignReportsConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCampaignReportsConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get a Campaign Template
         * @param {string} id Requested campaign template\&#39;s ID.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplate: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCampaignTemplate(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign Template Schedule
         * @param {string} id ID of the campaign template whose schedule is being fetched.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplateSchedule: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCampaignTemplateSchedule(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary List Campaign Templates
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplates: function (limit, offset, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCampaignTemplates(limit, offset, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Reassign Certifications
         * @param {string} id The certification campaign ID
         * @param {AdminReviewReassignBeta} adminReviewReassignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        move: function (id, adminReviewReassignBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.move(id, adminReviewReassignBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Update a Campaign Template
         * @param {string} id ID of the campaign template being modified.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        patchCampaignTemplate: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchCampaignTemplate(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Set Campaign Reports Configuration
         * @param {CampaignReportsConfigBeta} campaignReportsConfigBeta Campaign report configuration.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setCampaignReportsConfig: function (campaignReportsConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setCampaignReportsConfig(campaignReportsConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Set Campaign Template Schedule
         * @param {string} id ID of the campaign template being scheduled.
         * @param {ScheduleBeta} [scheduleBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setCampaignTemplateSchedule: function (id, scheduleBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setCampaignTemplateSchedule(id, scheduleBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Activate a Campaign
         * @param {string} id Campaign ID.
         * @param {ActivateCampaignOptionsBeta} [activateCampaignOptionsBeta] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaign: function (id, activateCampaignOptionsBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startCampaign(id, activateCampaignOptionsBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Run Campaign Remediation Scan
         * @param {string} id ID of the campaign the remediation scan is being run for.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaignRemediationScan: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startCampaignRemediationScan(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Run Campaign Report
         * @param {string} id ID of the campaign the report is being run for.
         * @param {ReportTypeBeta} type Type of report to run.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaignReport: function (id, type, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startCampaignReport(id, type, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Generate a Campaign from Template
         * @param {string} id ID of the campaign template to use for generation.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startGenerateCampaignTemplate: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startGenerateCampaignTemplate(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Update a Campaign
         * @param {string} id ID of the campaign template being modified.
         * @param {Array<object>} requestBody A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCampaign: function (id, requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCampaign(id, requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CertificationCampaignsBetaApiFp = CertificationCampaignsBetaApiFp;
/**
 * CertificationCampaignsBetaApi - factory interface
 * @export
 */
var CertificationCampaignsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CertificationCampaignsBetaApiFp)(configuration);
    return {
        /**
         * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Complete a Campaign
         * @param {string} id Campaign ID.
         * @param {CompleteCampaignOptionsBeta} [completeCampaignOptionsBeta] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        completeCampaign: function (id, completeCampaignOptionsBeta, axiosOptions) {
            return localVarFp.completeCampaign(id, completeCampaignOptionsBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Create Campaign
         * @param {CampaignBeta} campaignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createCampaign: function (campaignBeta, axiosOptions) {
            return localVarFp.createCampaign(campaignBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Create a Campaign Template
         * @param {CampaignTemplateBeta} campaignTemplateBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createCampaignTemplate: function (campaignTemplateBeta, axiosOptions) {
            return localVarFp.createCampaignTemplate(campaignTemplateBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete a Campaign Template
         * @param {string} id ID of the campaign template being deleted.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaignTemplate: function (id, axiosOptions) {
            return localVarFp.deleteCampaignTemplate(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete Campaign Template Schedule
         * @param {string} id ID of the campaign template whose schedule is being deleted.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaignTemplateSchedule: function (id, axiosOptions) {
            return localVarFp.deleteCampaignTemplateSchedule(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Delete Campaigns
         * @param {DeleteCampaignsRequestBeta} deleteCampaignsRequestBeta IDs of the campaigns to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteCampaigns: function (deleteCampaignsRequestBeta, axiosOptions) {
            return localVarFp.deleteCampaigns(deleteCampaignsRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary List Campaigns
         * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getActiveCampaigns: function (detail, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getActiveCampaigns(detail, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign
         * @param {string} id ID of the campaign to be retrieved.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaign: function (id, axiosOptions) {
            return localVarFp.getCampaign(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Get Campaign Reports
         * @param {string} id ID of the campaign whose reports are being fetched.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignReports: function (id, axiosOptions) {
            return localVarFp.getCampaignReports(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign Reports Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignReportsConfig: function (axiosOptions) {
            return localVarFp.getCampaignReportsConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get a Campaign Template
         * @param {string} id Requested campaign template\&#39;s ID.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplate: function (id, axiosOptions) {
            return localVarFp.getCampaignTemplate(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Get Campaign Template Schedule
         * @param {string} id ID of the campaign template whose schedule is being fetched.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplateSchedule: function (id, axiosOptions) {
            return localVarFp.getCampaignTemplateSchedule(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary List Campaign Templates
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCampaignTemplates: function (limit, offset, count, sorters, filters, axiosOptions) {
            return localVarFp.getCampaignTemplates(limit, offset, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Reassign Certifications
         * @param {string} id The certification campaign ID
         * @param {AdminReviewReassignBeta} adminReviewReassignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        move: function (id, adminReviewReassignBeta, axiosOptions) {
            return localVarFp.move(id, adminReviewReassignBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Update a Campaign Template
         * @param {string} id ID of the campaign template being modified.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        patchCampaignTemplate: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchCampaignTemplate(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Set Campaign Reports Configuration
         * @param {CampaignReportsConfigBeta} campaignReportsConfigBeta Campaign report configuration.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setCampaignReportsConfig: function (campaignReportsConfigBeta, axiosOptions) {
            return localVarFp.setCampaignReportsConfig(campaignReportsConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Set Campaign Template Schedule
         * @param {string} id ID of the campaign template being scheduled.
         * @param {ScheduleBeta} [scheduleBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        setCampaignTemplateSchedule: function (id, scheduleBeta, axiosOptions) {
            return localVarFp.setCampaignTemplateSchedule(id, scheduleBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Activate a Campaign
         * @param {string} id Campaign ID.
         * @param {ActivateCampaignOptionsBeta} [activateCampaignOptionsBeta] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaign: function (id, activateCampaignOptionsBeta, axiosOptions) {
            return localVarFp.startCampaign(id, activateCampaignOptionsBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Run Campaign Remediation Scan
         * @param {string} id ID of the campaign the remediation scan is being run for.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaignRemediationScan: function (id, axiosOptions) {
            return localVarFp.startCampaignRemediationScan(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
         * @summary Run Campaign Report
         * @param {string} id ID of the campaign the report is being run for.
         * @param {ReportTypeBeta} type Type of report to run.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startCampaignReport: function (id, type, axiosOptions) {
            return localVarFp.startCampaignReport(id, type, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Generate a Campaign from Template
         * @param {string} id ID of the campaign template to use for generation.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startGenerateCampaignTemplate: function (id, axiosOptions) {
            return localVarFp.startGenerateCampaignTemplate(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
         * @summary Update a Campaign
         * @param {string} id ID of the campaign template being modified.
         * @param {Array<object>} requestBody A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateCampaign: function (id, requestBody, axiosOptions) {
            return localVarFp.updateCampaign(id, requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CertificationCampaignsBetaApiFactory = CertificationCampaignsBetaApiFactory;
/**
 * CertificationCampaignsBetaApi - object-oriented interface
 * @export
 * @class CertificationCampaignsBetaApi
 * @extends {BaseAPI}
 */
var CertificationCampaignsBetaApi = /** @class */ (function (_super) {
    __extends(CertificationCampaignsBetaApi, _super);
    function CertificationCampaignsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {CertificationCampaignsBetaApiCompleteCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.completeCampaign = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).completeCampaign(requestParameters.id, requestParameters.completeCampaignOptionsBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create Campaign
     * @param {CertificationCampaignsBetaApiCreateCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.createCampaign = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).createCampaign(requestParameters.campaignBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CertificationCampaignsBetaApiCreateCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.createCampaignTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).createCampaignTemplate(requestParameters.campaignTemplateBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {CertificationCampaignsBetaApiDeleteCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.deleteCampaignTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).deleteCampaignTemplate(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {CertificationCampaignsBetaApiDeleteCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.deleteCampaignTemplateSchedule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).deleteCampaignTemplateSchedule(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {CertificationCampaignsBetaApiDeleteCampaignsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.deleteCampaigns = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).deleteCampaigns(requestParameters.deleteCampaignsRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {CertificationCampaignsBetaApiGetActiveCampaignsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getActiveCampaigns = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getActiveCampaigns(requestParameters.detail, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {CertificationCampaignsBetaApiGetCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getCampaign = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getCampaign(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {CertificationCampaignsBetaApiGetCampaignReportsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getCampaignReports = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getCampaignReports(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getCampaignReportsConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getCampaignReportsConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {CertificationCampaignsBetaApiGetCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getCampaignTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getCampaignTemplate(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {CertificationCampaignsBetaApiGetCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getCampaignTemplateSchedule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getCampaignTemplateSchedule(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {CertificationCampaignsBetaApiGetCampaignTemplatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.getCampaignTemplates = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).getCampaignTemplates(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {CertificationCampaignsBetaApiMoveRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.move = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).move(requestParameters.id, requestParameters.adminReviewReassignBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {CertificationCampaignsBetaApiPatchCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.patchCampaignTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).patchCampaignTemplate(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CertificationCampaignsBetaApiSetCampaignReportsConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.setCampaignReportsConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).setCampaignReportsConfig(requestParameters.campaignReportsConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {CertificationCampaignsBetaApiSetCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.setCampaignTemplateSchedule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).setCampaignTemplateSchedule(requestParameters.id, requestParameters.scheduleBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {CertificationCampaignsBetaApiStartCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.startCampaign = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).startCampaign(requestParameters.id, requestParameters.activateCampaignOptionsBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {CertificationCampaignsBetaApiStartCampaignRemediationScanRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.startCampaignRemediationScan = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).startCampaignRemediationScan(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {CertificationCampaignsBetaApiStartCampaignReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.startCampaignReport = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).startCampaignReport(requestParameters.id, requestParameters.type, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {CertificationCampaignsBetaApiStartGenerateCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.startGenerateCampaignTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).startGenerateCampaignTemplate(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {CertificationCampaignsBetaApiUpdateCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    CertificationCampaignsBetaApi.prototype.updateCampaign = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationCampaignsBetaApiFp)(this.configuration).updateCampaign(requestParameters.id, requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CertificationCampaignsBetaApi;
}(base_1.BaseAPI));
exports.CertificationCampaignsBetaApi = CertificationCampaignsBetaApi;
/**
 * CertificationsBetaApi - axios parameter creator
 * @export
 */
var CertificationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Permissions for Entitlement Certification Item
         * @param {string} certificationId The certification ID
         * @param {string} itemId The certification item ID
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getIdentityCertificationItemPermissions: function (certificationId, itemId, filters, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'certificationId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityCertificationItemPermissions', 'certificationId', certificationId);
                            // verify required parameter 'itemId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityCertificationItemPermissions', 'itemId', itemId);
                            localVarPath = "/certifications/{certificationId}/access-review-items/{itemId}/permissions"
                                .replace("{".concat("certificationId", "}"), encodeURIComponent(String(certificationId)))
                                .replace("{".concat("itemId", "}"), encodeURIComponent(String(itemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Pending Certification Tasks
         * @param {string} id The identity campaign certification ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityCertificationPendingTasks: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityCertificationPendingTasks', 'id', id);
                            localVarPath = "/certifications/{id}/tasks-pending"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Certification Task Status
         * @param {string} id The identity campaign certification ID
         * @param {string} taskId The certification task ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityCertificationTaskStatus: function (id, taskId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityCertificationTaskStatus', 'id', id);
                            // verify required parameter 'taskId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityCertificationTaskStatus', 'taskId', taskId);
                            localVarPath = "/certifications/{id}/tasks/{taskId}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("taskId", "}"), encodeURIComponent(String(taskId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary List of Reviewers for certification
         * @param {string} id The certification ID
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listCertificationReviewers: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('listCertificationReviewers', 'id', id);
                            localVarPath = "/certifications/{id}/reviewers"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Reassign Certifications Asynchronously
         * @param {string} id The identity campaign certification ID
         * @param {ReviewReassignBeta} reviewReassignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        submitReassignCertsAsync: function (id, reviewReassignBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('submitReassignCertsAsync', 'id', id);
                            // verify required parameter 'reviewReassignBeta' is not null or undefined
                            (0, common_1.assertParamExists)('submitReassignCertsAsync', 'reviewReassignBeta', reviewReassignBeta);
                            localVarPath = "/certifications/{id}/reassign-async"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(reviewReassignBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CertificationsBetaApiAxiosParamCreator = CertificationsBetaApiAxiosParamCreator;
/**
 * CertificationsBetaApi - functional programming interface
 * @export
 */
var CertificationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CertificationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Permissions for Entitlement Certification Item
         * @param {string} certificationId The certification ID
         * @param {string} itemId The certification item ID
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getIdentityCertificationItemPermissions: function (certificationId, itemId, filters, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityCertificationItemPermissions(certificationId, itemId, filters, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Pending Certification Tasks
         * @param {string} id The identity campaign certification ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityCertificationPendingTasks: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityCertificationPendingTasks(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Certification Task Status
         * @param {string} id The identity campaign certification ID
         * @param {string} taskId The certification task ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityCertificationTaskStatus: function (id, taskId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityCertificationTaskStatus(id, taskId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary List of Reviewers for certification
         * @param {string} id The certification ID
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listCertificationReviewers: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCertificationReviewers(id, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Reassign Certifications Asynchronously
         * @param {string} id The identity campaign certification ID
         * @param {ReviewReassignBeta} reviewReassignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        submitReassignCertsAsync: function (id, reviewReassignBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitReassignCertsAsync(id, reviewReassignBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CertificationsBetaApiFp = CertificationsBetaApiFp;
/**
 * CertificationsBetaApi - factory interface
 * @export
 */
var CertificationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CertificationsBetaApiFp)(configuration);
    return {
        /**
         * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Permissions for Entitlement Certification Item
         * @param {string} certificationId The certification ID
         * @param {string} itemId The certification item ID
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getIdentityCertificationItemPermissions: function (certificationId, itemId, filters, limit, offset, count, axiosOptions) {
            return localVarFp.getIdentityCertificationItemPermissions(certificationId, itemId, filters, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Pending Certification Tasks
         * @param {string} id The identity campaign certification ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityCertificationPendingTasks: function (id, axiosOptions) {
            return localVarFp.getIdentityCertificationPendingTasks(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Certification Task Status
         * @param {string} id The identity campaign certification ID
         * @param {string} taskId The certification task ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityCertificationTaskStatus: function (id, taskId, axiosOptions) {
            return localVarFp.getIdentityCertificationTaskStatus(id, taskId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary List of Reviewers for certification
         * @param {string} id The certification ID
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listCertificationReviewers: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listCertificationReviewers(id, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
         * @summary Reassign Certifications Asynchronously
         * @param {string} id The identity campaign certification ID
         * @param {ReviewReassignBeta} reviewReassignBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        submitReassignCertsAsync: function (id, reviewReassignBeta, axiosOptions) {
            return localVarFp.submitReassignCertsAsync(id, reviewReassignBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CertificationsBetaApiFactory = CertificationsBetaApiFactory;
/**
 * CertificationsBetaApi - object-oriented interface
 * @export
 * @class CertificationsBetaApi
 * @extends {BaseAPI}
 */
var CertificationsBetaApi = /** @class */ (function (_super) {
    __extends(CertificationsBetaApi, _super);
    function CertificationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {CertificationsBetaApiGetIdentityCertificationItemPermissionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    CertificationsBetaApi.prototype.getIdentityCertificationItemPermissions = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationsBetaApiFp)(this.configuration).getIdentityCertificationItemPermissions(requestParameters.certificationId, requestParameters.itemId, requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Pending Certification Tasks
     * @param {CertificationsBetaApiGetIdentityCertificationPendingTasksRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    CertificationsBetaApi.prototype.getIdentityCertificationPendingTasks = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationsBetaApiFp)(this.configuration).getIdentityCertificationPendingTasks(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Certification Task Status
     * @param {CertificationsBetaApiGetIdentityCertificationTaskStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    CertificationsBetaApi.prototype.getIdentityCertificationTaskStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationsBetaApiFp)(this.configuration).getIdentityCertificationTaskStatus(requestParameters.id, requestParameters.taskId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {CertificationsBetaApiListCertificationReviewersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    CertificationsBetaApi.prototype.listCertificationReviewers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationsBetaApiFp)(this.configuration).listCertificationReviewers(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {CertificationsBetaApiSubmitReassignCertsAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    CertificationsBetaApi.prototype.submitReassignCertsAsync = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CertificationsBetaApiFp)(this.configuration).submitReassignCertsAsync(requestParameters.id, requestParameters.reviewReassignBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CertificationsBetaApi;
}(base_1.BaseAPI));
exports.CertificationsBetaApi = CertificationsBetaApi;
/**
 * ConnectorRuleManagementBetaApi - axios parameter creator
 * @export
 */
var ConnectorRuleManagementBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Connector Rule
         * @param {ConnectorRuleCreateRequestBeta} connectorRuleCreateRequestBeta The connector rule to create
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createConnectorRule: function (connectorRuleCreateRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'connectorRuleCreateRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createConnectorRule', 'connectorRuleCreateRequestBeta', connectorRuleCreateRequestBeta);
                            localVarPath = "/connector-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(connectorRuleCreateRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete a Connector-Rule
         * @param {string} id ID of the connector rule to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectorRule: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteConnectorRule', 'id', id);
                            localVarPath = "/connector-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Connector-Rule by ID
         * @param {string} id ID of the connector rule to retrieve
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorRule: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getConnectorRule', 'id', id);
                            localVarPath = "/connector-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
         * @summary List Connector Rules
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorRuleList: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/connector-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update a Connector Rule
         * @param {string} id ID of the connector rule to update
         * @param {ConnectorRuleUpdateRequestBeta} [connectorRuleUpdateRequestBeta] The connector rule with updated data
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateConnectorRule: function (id, connectorRuleUpdateRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateConnectorRule', 'id', id);
                            localVarPath = "/connector-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(connectorRuleUpdateRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
         * @summary Validate Connector Rule
         * @param {SourceCodeBeta} sourceCodeBeta The code to validate
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        validateConnectorRule: function (sourceCodeBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceCodeBeta' is not null or undefined
                            (0, common_1.assertParamExists)('validateConnectorRule', 'sourceCodeBeta', sourceCodeBeta);
                            localVarPath = "/connector-rules/validate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sourceCodeBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ConnectorRuleManagementBetaApiAxiosParamCreator = ConnectorRuleManagementBetaApiAxiosParamCreator;
/**
 * ConnectorRuleManagementBetaApi - functional programming interface
 * @export
 */
var ConnectorRuleManagementBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ConnectorRuleManagementBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Connector Rule
         * @param {ConnectorRuleCreateRequestBeta} connectorRuleCreateRequestBeta The connector rule to create
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createConnectorRule: function (connectorRuleCreateRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createConnectorRule(connectorRuleCreateRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete a Connector-Rule
         * @param {string} id ID of the connector rule to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectorRule: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteConnectorRule(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Connector-Rule by ID
         * @param {string} id ID of the connector rule to retrieve
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorRule: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConnectorRule(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
         * @summary List Connector Rules
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorRuleList: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConnectorRuleList(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update a Connector Rule
         * @param {string} id ID of the connector rule to update
         * @param {ConnectorRuleUpdateRequestBeta} [connectorRuleUpdateRequestBeta] The connector rule with updated data
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateConnectorRule: function (id, connectorRuleUpdateRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateConnectorRule(id, connectorRuleUpdateRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
         * @summary Validate Connector Rule
         * @param {SourceCodeBeta} sourceCodeBeta The code to validate
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        validateConnectorRule: function (sourceCodeBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validateConnectorRule(sourceCodeBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ConnectorRuleManagementBetaApiFp = ConnectorRuleManagementBetaApiFp;
/**
 * ConnectorRuleManagementBetaApi - factory interface
 * @export
 */
var ConnectorRuleManagementBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ConnectorRuleManagementBetaApiFp)(configuration);
    return {
        /**
         * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Connector Rule
         * @param {ConnectorRuleCreateRequestBeta} connectorRuleCreateRequestBeta The connector rule to create
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createConnectorRule: function (connectorRuleCreateRequestBeta, axiosOptions) {
            return localVarFp.createConnectorRule(connectorRuleCreateRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete a Connector-Rule
         * @param {string} id ID of the connector rule to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectorRule: function (id, axiosOptions) {
            return localVarFp.deleteConnectorRule(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Connector-Rule by ID
         * @param {string} id ID of the connector rule to retrieve
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorRule: function (id, axiosOptions) {
            return localVarFp.getConnectorRule(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
         * @summary List Connector Rules
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorRuleList: function (axiosOptions) {
            return localVarFp.getConnectorRuleList(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update a Connector Rule
         * @param {string} id ID of the connector rule to update
         * @param {ConnectorRuleUpdateRequestBeta} [connectorRuleUpdateRequestBeta] The connector rule with updated data
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateConnectorRule: function (id, connectorRuleUpdateRequestBeta, axiosOptions) {
            return localVarFp.updateConnectorRule(id, connectorRuleUpdateRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
         * @summary Validate Connector Rule
         * @param {SourceCodeBeta} sourceCodeBeta The code to validate
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        validateConnectorRule: function (sourceCodeBeta, axiosOptions) {
            return localVarFp.validateConnectorRule(sourceCodeBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConnectorRuleManagementBetaApiFactory = ConnectorRuleManagementBetaApiFactory;
/**
 * ConnectorRuleManagementBetaApi - object-oriented interface
 * @export
 * @class ConnectorRuleManagementBetaApi
 * @extends {BaseAPI}
 */
var ConnectorRuleManagementBetaApi = /** @class */ (function (_super) {
    __extends(ConnectorRuleManagementBetaApi, _super);
    function ConnectorRuleManagementBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Connector Rule
     * @param {ConnectorRuleManagementBetaApiCreateConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    ConnectorRuleManagementBetaApi.prototype.createConnectorRule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ConnectorRuleManagementBetaApiFp)(this.configuration).createConnectorRule(requestParameters.connectorRuleCreateRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete a Connector-Rule
     * @param {ConnectorRuleManagementBetaApiDeleteConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    ConnectorRuleManagementBetaApi.prototype.deleteConnectorRule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ConnectorRuleManagementBetaApiFp)(this.configuration).deleteConnectorRule(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Connector-Rule by ID
     * @param {ConnectorRuleManagementBetaApiGetConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    ConnectorRuleManagementBetaApi.prototype.getConnectorRule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ConnectorRuleManagementBetaApiFp)(this.configuration).getConnectorRule(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
     * @summary List Connector Rules
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    ConnectorRuleManagementBetaApi.prototype.getConnectorRuleList = function (axiosOptions) {
        var _this = this;
        return (0, exports.ConnectorRuleManagementBetaApiFp)(this.configuration).getConnectorRuleList(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update a Connector Rule
     * @param {ConnectorRuleManagementBetaApiUpdateConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    ConnectorRuleManagementBetaApi.prototype.updateConnectorRule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ConnectorRuleManagementBetaApiFp)(this.configuration).updateConnectorRule(requestParameters.id, requestParameters.connectorRuleUpdateRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
     * @summary Validate Connector Rule
     * @param {ConnectorRuleManagementBetaApiValidateConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    ConnectorRuleManagementBetaApi.prototype.validateConnectorRule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ConnectorRuleManagementBetaApiFp)(this.configuration).validateConnectorRule(requestParameters.sourceCodeBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConnectorRuleManagementBetaApi;
}(base_1.BaseAPI));
exports.ConnectorRuleManagementBetaApi = ConnectorRuleManagementBetaApi;
/**
 * ConnectorsBetaApi - axios parameter creator
 * @export
 */
var ConnectorsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
         * @summary Gets connector list
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorList: function (filters, limit, offset, count, locale, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/connectors";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (locale !== undefined) {
                                localVarQueryParameter['locale'] = locale;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ConnectorsBetaApiAxiosParamCreator = ConnectorsBetaApiAxiosParamCreator;
/**
 * ConnectorsBetaApi - functional programming interface
 * @export
 */
var ConnectorsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ConnectorsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
         * @summary Gets connector list
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorList: function (filters, limit, offset, count, locale, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getConnectorList(filters, limit, offset, count, locale, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ConnectorsBetaApiFp = ConnectorsBetaApiFp;
/**
 * ConnectorsBetaApi - factory interface
 * @export
 */
var ConnectorsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ConnectorsBetaApiFp)(configuration);
    return {
        /**
         * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
         * @summary Gets connector list
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getConnectorList: function (filters, limit, offset, count, locale, axiosOptions) {
            return localVarFp.getConnectorList(filters, limit, offset, count, locale, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ConnectorsBetaApiFactory = ConnectorsBetaApiFactory;
/**
 * ConnectorsBetaApi - object-oriented interface
 * @export
 * @class ConnectorsBetaApi
 * @extends {BaseAPI}
 */
var ConnectorsBetaApi = /** @class */ (function (_super) {
    __extends(ConnectorsBetaApi, _super);
    function ConnectorsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {ConnectorsBetaApiGetConnectorListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsBetaApi
     */
    ConnectorsBetaApi.prototype.getConnectorList = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ConnectorsBetaApiFp)(this.configuration).getConnectorList(requestParameters.filters, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.locale, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConnectorsBetaApi;
}(base_1.BaseAPI));
exports.ConnectorsBetaApi = ConnectorsBetaApi;
/**
 * CustomFormsBetaApi - axios parameter creator
 * @export
 */
var CustomFormsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Creates a form definition.
         * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinition: function (createFormDefinitionRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFormDefinitionRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a form definition by template.
         * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionByTemplate: function (createFormDefinitionRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions/template";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createFormDefinitionRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Generate JSON Schema dynamically.
         * @param {FormDefinitionDynamicSchemaRequestBeta} [body] Body is the request payload to create a form definition dynamic schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionDynamicSchema: function (body, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions/forms-action-dynamic-schema";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Upload new form definition file.
         * @param {string} formDefinitionID FormDefinitionID  String specifying FormDefinitionID
         * @param {any} file File specifying the multipart
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionFileRequest: function (formDefinitionID, file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formDefinitionID' is not null or undefined
                            (0, common_1.assertParamExists)('createFormDefinitionFileRequest', 'formDefinitionID', formDefinitionID);
                            // verify required parameter 'file' is not null or undefined
                            (0, common_1.assertParamExists)('createFormDefinitionFileRequest', 'file', file);
                            localVarPath = "/form-definitions/{formDefinitionID}/upload"
                                .replace("{".concat("formDefinitionID", "}"), encodeURIComponent(String(formDefinitionID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a form instance.
         * @param {CreateFormInstanceRequestBeta} [body] Body is the request payload to create a form instance
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormInstance: function (body, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-instances";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Deletes a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormDefinition: function (formDefinitionID, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formDefinitionID' is not null or undefined
                            (0, common_1.assertParamExists)('deleteFormDefinition', 'formDefinitionID', formDefinitionID);
                            localVarPath = "/form-definitions/{formDefinitionID}"
                                .replace("{".concat("formDefinitionID", "}"), encodeURIComponent(String(formDefinitionID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary List form definitions by tenant.
         * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportFormDefinitionsByTenant: function (offset, limit, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions/export";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Download definition file by fileId.
         * @param {string} formDefinitionID FormDefinitionID  Form definition ID
         * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFileFromS3: function (formDefinitionID, fileID, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formDefinitionID' is not null or undefined
                            (0, common_1.assertParamExists)('getFileFromS3', 'formDefinitionID', formDefinitionID);
                            // verify required parameter 'fileID' is not null or undefined
                            (0, common_1.assertParamExists)('getFileFromS3', 'fileID', fileID);
                            localVarPath = "/form-definitions/{formDefinitionID}/file/{fileID}"
                                .replace("{".concat("formDefinitionID", "}"), encodeURIComponent(String(formDefinitionID)))
                                .replace("{".concat("fileID", "}"), encodeURIComponent(String(fileID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Return a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormDefinitionByKey: function (formDefinitionID, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formDefinitionID' is not null or undefined
                            (0, common_1.assertParamExists)('getFormDefinitionByKey', 'formDefinitionID', formDefinitionID);
                            localVarPath = "/form-definitions/{formDefinitionID}"
                                .replace("{".concat("formDefinitionID", "}"), encodeURIComponent(String(formDefinitionID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID.
         * @summary Returns a form instance.
         * @param {string} formInstanceID Form instance ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormInstanceByKey: function (formInstanceID, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formInstanceID' is not null or undefined
                            (0, common_1.assertParamExists)('getFormInstanceByKey', 'formInstanceID', formInstanceID);
                            localVarPath = "/form-instances/{formInstanceID}"
                                .replace("{".concat("formInstanceID", "}"), encodeURIComponent(String(formInstanceID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Download instance file by fileId.
         * @param {string} formInstanceID FormInstanceID  Form instance ID
         * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormInstanceFile: function (formInstanceID, fileID, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formInstanceID' is not null or undefined
                            (0, common_1.assertParamExists)('getFormInstanceFile', 'formInstanceID', formInstanceID);
                            // verify required parameter 'fileID' is not null or undefined
                            (0, common_1.assertParamExists)('getFormInstanceFile', 'fileID', fileID);
                            localVarPath = "/form-instances/{formInstanceID}/file/{fileID}"
                                .replace("{".concat("formInstanceID", "}"), encodeURIComponent(String(formInstanceID)))
                                .replace("{".concat("fileID", "}"), encodeURIComponent(String(fileID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Import form definitions from export.
         * @param {Array<ImportFormDefinitionsRequestInnerBeta>} [body] Body is the request payload to import form definitions
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importFormDefinitions: function (body, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions/import";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Patch a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form definition, check: https://jsonpatch.com
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchFormDefinition: function (formDefinitionID, body, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formDefinitionID' is not null or undefined
                            (0, common_1.assertParamExists)('patchFormDefinition', 'formDefinitionID', formDefinitionID);
                            localVarPath = "/form-definitions/{formDefinitionID}"
                                .replace("{".concat("formDefinitionID", "}"), encodeURIComponent(String(formDefinitionID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID.
         * @summary Patch a form instance.
         * @param {string} formInstanceID Form instance ID
         * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form instance, check: https://jsonpatch.com
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchFormInstance: function (formInstanceID, body, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formInstanceID' is not null or undefined
                            (0, common_1.assertParamExists)('patchFormInstance', 'formInstanceID', formInstanceID);
                            localVarPath = "/form-instances/{formInstanceID}"
                                .replace("{".concat("formInstanceID", "}"), encodeURIComponent(String(formInstanceID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary Export form definitions by tenant.
         * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormDefinitionsByTenant: function (offset, limit, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
         * @summary Retrieves dynamic data by element.
         * @param {string} formInstanceID Form instance ID
         * @param {string} formElementID Form element ID
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
         * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormElementDataByElementID: function (formInstanceID, formElementID, limit, filters, query, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formInstanceID' is not null or undefined
                            (0, common_1.assertParamExists)('searchFormElementDataByElementID', 'formInstanceID', formInstanceID);
                            // verify required parameter 'formElementID' is not null or undefined
                            (0, common_1.assertParamExists)('searchFormElementDataByElementID', 'formElementID', formElementID);
                            localVarPath = "/form-instances/{formInstanceID}/data-source/{formElementID}"
                                .replace("{".concat("formInstanceID", "}"), encodeURIComponent(String(formInstanceID)))
                                .replace("{".concat("formElementID", "}"), encodeURIComponent(String(formElementID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (query !== undefined) {
                                localVarQueryParameter['query'] = query;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary List form instances by tenant.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormInstancesByTenant: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-instances";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary List predefined select options.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchPreDefinedSelectOptions: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/form-definitions/predefined-select-options";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Preview form definition data source.
         * @param {string} formDefinitionID Form definition ID
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
         * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
         * @param {FormElementPreviewRequestBeta} [formElementPreviewRequestBeta] Body is the request payload to create a form definition dynamic schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        showPreviewDataSource: function (formDefinitionID, limit, filters, query, formElementPreviewRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'formDefinitionID' is not null or undefined
                            (0, common_1.assertParamExists)('showPreviewDataSource', 'formDefinitionID', formDefinitionID);
                            localVarPath = "/form-definitions/{formDefinitionID}/data-source"
                                .replace("{".concat("formDefinitionID", "}"), encodeURIComponent(String(formDefinitionID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (query !== undefined) {
                                localVarQueryParameter['query'] = query;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(formElementPreviewRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CustomFormsBetaApiAxiosParamCreator = CustomFormsBetaApiAxiosParamCreator;
/**
 * CustomFormsBetaApi - functional programming interface
 * @export
 */
var CustomFormsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CustomFormsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Creates a form definition.
         * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinition: function (createFormDefinitionRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createFormDefinition(createFormDefinitionRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Create a form definition by template.
         * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionByTemplate: function (createFormDefinitionRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createFormDefinitionByTemplate(createFormDefinitionRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Generate JSON Schema dynamically.
         * @param {FormDefinitionDynamicSchemaRequestBeta} [body] Body is the request payload to create a form definition dynamic schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionDynamicSchema: function (body, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createFormDefinitionDynamicSchema(body, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Upload new form definition file.
         * @param {string} formDefinitionID FormDefinitionID  String specifying FormDefinitionID
         * @param {any} file File specifying the multipart
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionFileRequest: function (formDefinitionID, file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createFormDefinitionFileRequest(formDefinitionID, file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Creates a form instance.
         * @param {CreateFormInstanceRequestBeta} [body] Body is the request payload to create a form instance
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormInstance: function (body, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createFormInstance(body, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Deletes a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormDefinition: function (formDefinitionID, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteFormDefinition(formDefinitionID, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary List form definitions by tenant.
         * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportFormDefinitionsByTenant: function (offset, limit, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportFormDefinitionsByTenant(offset, limit, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Download definition file by fileId.
         * @param {string} formDefinitionID FormDefinitionID  Form definition ID
         * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFileFromS3: function (formDefinitionID, fileID, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFileFromS3(formDefinitionID, fileID, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Return a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormDefinitionByKey: function (formDefinitionID, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFormDefinitionByKey(formDefinitionID, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID.
         * @summary Returns a form instance.
         * @param {string} formInstanceID Form instance ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormInstanceByKey: function (formInstanceID, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFormInstanceByKey(formInstanceID, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Download instance file by fileId.
         * @param {string} formInstanceID FormInstanceID  Form instance ID
         * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormInstanceFile: function (formInstanceID, fileID, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getFormInstanceFile(formInstanceID, fileID, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Import form definitions from export.
         * @param {Array<ImportFormDefinitionsRequestInnerBeta>} [body] Body is the request payload to import form definitions
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importFormDefinitions: function (body, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importFormDefinitions(body, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Patch a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form definition, check: https://jsonpatch.com
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchFormDefinition: function (formDefinitionID, body, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchFormDefinition(formDefinitionID, body, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID.
         * @summary Patch a form instance.
         * @param {string} formInstanceID Form instance ID
         * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form instance, check: https://jsonpatch.com
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchFormInstance: function (formInstanceID, body, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchFormInstance(formInstanceID, body, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary Export form definitions by tenant.
         * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormDefinitionsByTenant: function (offset, limit, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchFormDefinitionsByTenant(offset, limit, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
         * @summary Retrieves dynamic data by element.
         * @param {string} formInstanceID Form instance ID
         * @param {string} formElementID Form element ID
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
         * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormElementDataByElementID: function (formInstanceID, formElementID, limit, filters, query, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchFormElementDataByElementID(formInstanceID, formElementID, limit, filters, query, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary List form instances by tenant.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormInstancesByTenant: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchFormInstancesByTenant(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * No parameters required.
         * @summary List predefined select options.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchPreDefinedSelectOptions: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchPreDefinedSelectOptions(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Preview form definition data source.
         * @param {string} formDefinitionID Form definition ID
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
         * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
         * @param {FormElementPreviewRequestBeta} [formElementPreviewRequestBeta] Body is the request payload to create a form definition dynamic schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        showPreviewDataSource: function (formDefinitionID, limit, filters, query, formElementPreviewRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.showPreviewDataSource(formDefinitionID, limit, filters, query, formElementPreviewRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CustomFormsBetaApiFp = CustomFormsBetaApiFp;
/**
 * CustomFormsBetaApi - factory interface
 * @export
 */
var CustomFormsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CustomFormsBetaApiFp)(configuration);
    return {
        /**
         *
         * @summary Creates a form definition.
         * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinition: function (createFormDefinitionRequestBeta, axiosOptions) {
            return localVarFp.createFormDefinition(createFormDefinitionRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Create a form definition by template.
         * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionByTemplate: function (createFormDefinitionRequestBeta, axiosOptions) {
            return localVarFp.createFormDefinitionByTemplate(createFormDefinitionRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Generate JSON Schema dynamically.
         * @param {FormDefinitionDynamicSchemaRequestBeta} [body] Body is the request payload to create a form definition dynamic schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionDynamicSchema: function (body, axiosOptions) {
            return localVarFp.createFormDefinitionDynamicSchema(body, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Upload new form definition file.
         * @param {string} formDefinitionID FormDefinitionID  String specifying FormDefinitionID
         * @param {any} file File specifying the multipart
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormDefinitionFileRequest: function (formDefinitionID, file, axiosOptions) {
            return localVarFp.createFormDefinitionFileRequest(formDefinitionID, file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Creates a form instance.
         * @param {CreateFormInstanceRequestBeta} [body] Body is the request payload to create a form instance
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createFormInstance: function (body, axiosOptions) {
            return localVarFp.createFormInstance(body, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Deletes a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormDefinition: function (formDefinitionID, axiosOptions) {
            return localVarFp.deleteFormDefinition(formDefinitionID, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * No parameters required.
         * @summary List form definitions by tenant.
         * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportFormDefinitionsByTenant: function (offset, limit, filters, sorters, axiosOptions) {
            return localVarFp.exportFormDefinitionsByTenant(offset, limit, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Download definition file by fileId.
         * @param {string} formDefinitionID FormDefinitionID  Form definition ID
         * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFileFromS3: function (formDefinitionID, fileID, axiosOptions) {
            return localVarFp.getFileFromS3(formDefinitionID, fileID, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Return a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormDefinitionByKey: function (formDefinitionID, axiosOptions) {
            return localVarFp.getFormDefinitionByKey(formDefinitionID, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID.
         * @summary Returns a form instance.
         * @param {string} formInstanceID Form instance ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormInstanceByKey: function (formInstanceID, axiosOptions) {
            return localVarFp.getFormInstanceByKey(formInstanceID, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Download instance file by fileId.
         * @param {string} formInstanceID FormInstanceID  Form instance ID
         * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getFormInstanceFile: function (formInstanceID, fileID, axiosOptions) {
            return localVarFp.getFormInstanceFile(formInstanceID, fileID, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Import form definitions from export.
         * @param {Array<ImportFormDefinitionsRequestInnerBeta>} [body] Body is the request payload to import form definitions
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importFormDefinitions: function (body, axiosOptions) {
            return localVarFp.importFormDefinitions(body, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formDefinitionID}` should match a form definition ID.
         * @summary Patch a form definition.
         * @param {string} formDefinitionID Form definition ID
         * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form definition, check: https://jsonpatch.com
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchFormDefinition: function (formDefinitionID, body, axiosOptions) {
            return localVarFp.patchFormDefinition(formDefinitionID, body, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID.
         * @summary Patch a form instance.
         * @param {string} formInstanceID Form instance ID
         * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form instance, check: https://jsonpatch.com
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchFormInstance: function (formInstanceID, body, axiosOptions) {
            return localVarFp.patchFormInstance(formInstanceID, body, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * No parameters required.
         * @summary Export form definitions by tenant.
         * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormDefinitionsByTenant: function (offset, limit, filters, sorters, axiosOptions) {
            return localVarFp.searchFormDefinitionsByTenant(offset, limit, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
         * @summary Retrieves dynamic data by element.
         * @param {string} formInstanceID Form instance ID
         * @param {string} formElementID Form element ID
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
         * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormElementDataByElementID: function (formInstanceID, formElementID, limit, filters, query, axiosOptions) {
            return localVarFp.searchFormElementDataByElementID(formInstanceID, formElementID, limit, filters, query, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * No parameters required.
         * @summary List form instances by tenant.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchFormInstancesByTenant: function (axiosOptions) {
            return localVarFp.searchFormInstancesByTenant(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * No parameters required.
         * @summary List predefined select options.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        searchPreDefinedSelectOptions: function (axiosOptions) {
            return localVarFp.searchPreDefinedSelectOptions(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Preview form definition data source.
         * @param {string} formDefinitionID Form definition ID
         * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
         * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
         * @param {FormElementPreviewRequestBeta} [formElementPreviewRequestBeta] Body is the request payload to create a form definition dynamic schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        showPreviewDataSource: function (formDefinitionID, limit, filters, query, formElementPreviewRequestBeta, axiosOptions) {
            return localVarFp.showPreviewDataSource(formDefinitionID, limit, filters, query, formElementPreviewRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CustomFormsBetaApiFactory = CustomFormsBetaApiFactory;
/**
 * CustomFormsBetaApi - object-oriented interface
 * @export
 * @class CustomFormsBetaApi
 * @extends {BaseAPI}
 */
var CustomFormsBetaApi = /** @class */ (function (_super) {
    __extends(CustomFormsBetaApi, _super);
    function CustomFormsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Creates a form definition.
     * @param {CustomFormsBetaApiCreateFormDefinitionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.createFormDefinition = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).createFormDefinition(requestParameters.createFormDefinitionRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Create a form definition by template.
     * @param {CustomFormsBetaApiCreateFormDefinitionByTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.createFormDefinitionByTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).createFormDefinitionByTemplate(requestParameters.createFormDefinitionRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Generate JSON Schema dynamically.
     * @param {CustomFormsBetaApiCreateFormDefinitionDynamicSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.createFormDefinitionDynamicSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).createFormDefinitionDynamicSchema(requestParameters.body, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Upload new form definition file.
     * @param {CustomFormsBetaApiCreateFormDefinitionFileRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.createFormDefinitionFileRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).createFormDefinitionFileRequest(requestParameters.formDefinitionID, requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Creates a form instance.
     * @param {CustomFormsBetaApiCreateFormInstanceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.createFormInstance = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).createFormInstance(requestParameters.body, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Deletes a form definition.
     * @param {CustomFormsBetaApiDeleteFormDefinitionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.deleteFormDefinition = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).deleteFormDefinition(requestParameters.formDefinitionID, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * No parameters required.
     * @summary List form definitions by tenant.
     * @param {CustomFormsBetaApiExportFormDefinitionsByTenantRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.exportFormDefinitionsByTenant = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).exportFormDefinitionsByTenant(requestParameters.offset, requestParameters.limit, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Download definition file by fileId.
     * @param {CustomFormsBetaApiGetFileFromS3Request} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.getFileFromS3 = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).getFileFromS3(requestParameters.formDefinitionID, requestParameters.fileID, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Return a form definition.
     * @param {CustomFormsBetaApiGetFormDefinitionByKeyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.getFormDefinitionByKey = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).getFormDefinitionByKey(requestParameters.formDefinitionID, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Returns a form instance.
     * @param {CustomFormsBetaApiGetFormInstanceByKeyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.getFormInstanceByKey = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).getFormInstanceByKey(requestParameters.formInstanceID, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Download instance file by fileId.
     * @param {CustomFormsBetaApiGetFormInstanceFileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.getFormInstanceFile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).getFormInstanceFile(requestParameters.formInstanceID, requestParameters.fileID, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Import form definitions from export.
     * @param {CustomFormsBetaApiImportFormDefinitionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.importFormDefinitions = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).importFormDefinitions(requestParameters.body, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Patch a form definition.
     * @param {CustomFormsBetaApiPatchFormDefinitionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.patchFormDefinition = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).patchFormDefinition(requestParameters.formDefinitionID, requestParameters.body, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Patch a form instance.
     * @param {CustomFormsBetaApiPatchFormInstanceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.patchFormInstance = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).patchFormInstance(requestParameters.formInstanceID, requestParameters.body, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * No parameters required.
     * @summary Export form definitions by tenant.
     * @param {CustomFormsBetaApiSearchFormDefinitionsByTenantRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.searchFormDefinitionsByTenant = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).searchFormDefinitionsByTenant(requestParameters.offset, requestParameters.limit, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
     * @summary Retrieves dynamic data by element.
     * @param {CustomFormsBetaApiSearchFormElementDataByElementIDRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.searchFormElementDataByElementID = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).searchFormElementDataByElementID(requestParameters.formInstanceID, requestParameters.formElementID, requestParameters.limit, requestParameters.filters, requestParameters.query, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * No parameters required.
     * @summary List form instances by tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.searchFormInstancesByTenant = function (axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).searchFormInstancesByTenant(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * No parameters required.
     * @summary List predefined select options.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.searchPreDefinedSelectOptions = function (axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).searchPreDefinedSelectOptions(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Preview form definition data source.
     * @param {CustomFormsBetaApiShowPreviewDataSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    CustomFormsBetaApi.prototype.showPreviewDataSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomFormsBetaApiFp)(this.configuration).showPreviewDataSource(requestParameters.formDefinitionID, requestParameters.limit, requestParameters.filters, requestParameters.query, requestParameters.formElementPreviewRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomFormsBetaApi;
}(base_1.BaseAPI));
exports.CustomFormsBetaApi = CustomFormsBetaApi;
/**
 * CustomPasswordInstructionsBetaApi - axios parameter creator
 * @export
 */
var CustomPasswordInstructionsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Custom Password Instructions
         * @param {CustomPasswordInstructionBeta} customPasswordInstructionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createCustomPasswordInstructions: function (customPasswordInstructionBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'customPasswordInstructionBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createCustomPasswordInstructions', 'customPasswordInstructionBeta', customPasswordInstructionBeta);
                            localVarPath = "/custom-password-instructions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(customPasswordInstructionBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Custom Password Instructions by page ID
         * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to delete.
         * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomPasswordInstructions: function (pageId, locale, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pageId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteCustomPasswordInstructions', 'pageId', pageId);
                            localVarPath = "/custom-password-instructions/{pageId}"
                                .replace("{".concat("pageId", "}"), encodeURIComponent(String(pageId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (locale !== undefined) {
                                localVarQueryParameter['locale'] = locale;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Custom Password Instructions by Page ID
         * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to query.
         * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCustomPasswordInstructions: function (pageId, locale, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'pageId' is not null or undefined
                            (0, common_1.assertParamExists)('getCustomPasswordInstructions', 'pageId', pageId);
                            localVarPath = "/custom-password-instructions/{pageId}"
                                .replace("{".concat("pageId", "}"), encodeURIComponent(String(pageId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (locale !== undefined) {
                                localVarQueryParameter['locale'] = locale;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CustomPasswordInstructionsBetaApiAxiosParamCreator = CustomPasswordInstructionsBetaApiAxiosParamCreator;
/**
 * CustomPasswordInstructionsBetaApi - functional programming interface
 * @export
 */
var CustomPasswordInstructionsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CustomPasswordInstructionsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Custom Password Instructions
         * @param {CustomPasswordInstructionBeta} customPasswordInstructionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createCustomPasswordInstructions: function (customPasswordInstructionBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCustomPasswordInstructions(customPasswordInstructionBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Custom Password Instructions by page ID
         * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to delete.
         * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomPasswordInstructions: function (pageId, locale, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteCustomPasswordInstructions(pageId, locale, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Custom Password Instructions by Page ID
         * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to query.
         * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCustomPasswordInstructions: function (pageId, locale, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCustomPasswordInstructions(pageId, locale, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CustomPasswordInstructionsBetaApiFp = CustomPasswordInstructionsBetaApiFp;
/**
 * CustomPasswordInstructionsBetaApi - factory interface
 * @export
 */
var CustomPasswordInstructionsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CustomPasswordInstructionsBetaApiFp)(configuration);
    return {
        /**
         * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Custom Password Instructions
         * @param {CustomPasswordInstructionBeta} customPasswordInstructionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createCustomPasswordInstructions: function (customPasswordInstructionBeta, axiosOptions) {
            return localVarFp.createCustomPasswordInstructions(customPasswordInstructionBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Custom Password Instructions by page ID
         * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to delete.
         * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomPasswordInstructions: function (pageId, locale, axiosOptions) {
            return localVarFp.deleteCustomPasswordInstructions(pageId, locale, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Custom Password Instructions by Page ID
         * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to query.
         * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCustomPasswordInstructions: function (pageId, locale, axiosOptions) {
            return localVarFp.getCustomPasswordInstructions(pageId, locale, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CustomPasswordInstructionsBetaApiFactory = CustomPasswordInstructionsBetaApiFactory;
/**
 * CustomPasswordInstructionsBetaApi - object-oriented interface
 * @export
 * @class CustomPasswordInstructionsBetaApi
 * @extends {BaseAPI}
 */
var CustomPasswordInstructionsBetaApi = /** @class */ (function (_super) {
    __extends(CustomPasswordInstructionsBetaApi, _super);
    function CustomPasswordInstructionsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Custom Password Instructions
     * @param {CustomPasswordInstructionsBetaApiCreateCustomPasswordInstructionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPasswordInstructionsBetaApi
     */
    CustomPasswordInstructionsBetaApi.prototype.createCustomPasswordInstructions = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomPasswordInstructionsBetaApiFp)(this.configuration).createCustomPasswordInstructions(requestParameters.customPasswordInstructionBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Custom Password Instructions by page ID
     * @param {CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPasswordInstructionsBetaApi
     */
    CustomPasswordInstructionsBetaApi.prototype.deleteCustomPasswordInstructions = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomPasswordInstructionsBetaApiFp)(this.configuration).deleteCustomPasswordInstructions(requestParameters.pageId, requestParameters.locale, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Custom Password Instructions by Page ID
     * @param {CustomPasswordInstructionsBetaApiGetCustomPasswordInstructionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPasswordInstructionsBetaApi
     */
    CustomPasswordInstructionsBetaApi.prototype.getCustomPasswordInstructions = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.CustomPasswordInstructionsBetaApiFp)(this.configuration).getCustomPasswordInstructions(requestParameters.pageId, requestParameters.locale, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CustomPasswordInstructionsBetaApi;
}(base_1.BaseAPI));
exports.CustomPasswordInstructionsBetaApi = CustomPasswordInstructionsBetaApi;
/**
 * EntitlementsBetaApi - axios parameter creator
 * @export
 */
var EntitlementsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Add single Access Model Metadata to an entitlement.
         * @summary Add metadata to an entitlement.
         * @param {string} id The entitlement id.
         * @param {string} attributeKey Technical name of the Attribute.
         * @param {string} attributeValue Technical name of the Attribute Value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessModelMetadataForEntitlement: function (id, attributeKey, attributeValue, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('createAccessModelMetadataForEntitlement', 'id', id);
                            // verify required parameter 'attributeKey' is not null or undefined
                            (0, common_1.assertParamExists)('createAccessModelMetadataForEntitlement', 'attributeKey', attributeKey);
                            // verify required parameter 'attributeValue' is not null or undefined
                            (0, common_1.assertParamExists)('createAccessModelMetadataForEntitlement', 'attributeValue', attributeValue);
                            localVarPath = "/entitlements/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("attributeKey", "}"), encodeURIComponent(String(attributeKey)))
                                .replace("{".concat("attributeValue", "}"), encodeURIComponent(String(attributeValue)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove single Access Model Metadata from an entitlement.
         * @summary Remove metadata from an entitlement.
         * @param {string} id The entitlement id.
         * @param {string} attributeKey Technical name of the Attribute.
         * @param {string} attributeValue Technical name of the Attribute Value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessModelMetadataFromEntitlement: function (id, attributeKey, attributeValue, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccessModelMetadataFromEntitlement', 'id', id);
                            // verify required parameter 'attributeKey' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccessModelMetadataFromEntitlement', 'attributeKey', attributeKey);
                            // verify required parameter 'attributeValue' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccessModelMetadataFromEntitlement', 'attributeValue', attributeValue);
                            localVarPath = "/entitlements/{id}/access-model-metadata/{attributeKey}/values/{attributeValue}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("attributeKey", "}"), encodeURIComponent(String(attributeKey)))
                                .replace("{".concat("attributeValue", "}"), encodeURIComponent(String(attributeValue)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns an entitlement by its ID.
         * @summary Get an entitlement
         * @param {string} id The entitlement ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlement: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlement', 'id', id);
                            localVarPath = "/entitlements/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the entitlement request config for a specified entitlement.
         * @summary Get Entitlement Request Config
         * @param {string} id Entitlement Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementRequestConfig: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementRequestConfig', 'id', id);
                            localVarPath = "/entitlements/{id}/entitlement-request-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
         * @summary Aggregate Entitlements
         * @param {string} id Source Id
         * @param {any} [csvFile] The CSV file containing the source entitlements to aggregate.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        importEntitlementsBySource: function (id, csvFile, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importEntitlementsBySource', 'id', id);
                            localVarPath = "/entitlements/aggregate/sources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (csvFile !== undefined) {
                                localVarFormParams.append('csvFile', csvFile);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of all child entitlements of a given entitlement.
         * @summary List of entitlements children
         * @param {string} id Entitlement Id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlementChildren: function (id, limit, offset, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('listEntitlementChildren', 'id', id);
                            localVarPath = "/entitlements/{id}/children"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of all parent entitlements of a given entitlement.
         * @summary List of entitlements parents
         * @param {string} id Entitlement Id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlementParents: function (id, limit, offset, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('listEntitlementParents', 'id', id);
                            localVarPath = "/entitlements/{id}/parents"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
         * @summary Gets a list of entitlements.
         * @param {string} [accountId] The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
         * @param {string} [segmentedForIdentity] If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
         * @param {string} [forSegmentIds] If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
         * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlements: function (accountId, segmentedForIdentity, forSegmentIds, includeUnsegmented, offset, limit, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/entitlements";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (accountId !== undefined) {
                                localVarQueryParameter['account-id'] = accountId;
                            }
                            if (segmentedForIdentity !== undefined) {
                                localVarQueryParameter['segmented-for-identity'] = segmentedForIdentity;
                            }
                            if (forSegmentIds !== undefined) {
                                localVarQueryParameter['for-segment-ids'] = forSegmentIds;
                            }
                            if (includeUnsegmented !== undefined) {
                                localVarQueryParameter['include-unsegmented'] = includeUnsegmented;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
         * @summary Patch an entitlement
         * @param {string} id ID of the entitlement to patch
         * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchEntitlement: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchEntitlement', 'id', id);
                            localVarPath = "/entitlements/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API replaces the entitlement request config for a specified entitlement.
         * @summary Replace Entitlement Request Config
         * @param {string} id Entitlement ID
         * @param {EntitlementRequestConfigBeta} entitlementRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putEntitlementRequestConfig: function (id, entitlementRequestConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putEntitlementRequestConfig', 'id', id);
                            // verify required parameter 'entitlementRequestConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putEntitlementRequestConfig', 'entitlementRequestConfigBeta', entitlementRequestConfigBeta);
                            localVarPath = "/entitlements/{id}/entitlement-request-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(entitlementRequestConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Removes all entitlements on a specific source.
         * @summary Reset Source Entitlements
         * @param {string} id ID of source for the entitlement reset
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        resetSourceEntitlements: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('resetSourceEntitlements', 'id', id);
                            localVarPath = "/entitlements/reset/sources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Bulk update an entitlement list
         * @param {EntitlementBulkUpdateRequestBeta} entitlementBulkUpdateRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateEntitlementsInBulk: function (entitlementBulkUpdateRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'entitlementBulkUpdateRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateEntitlementsInBulk', 'entitlementBulkUpdateRequestBeta', entitlementBulkUpdateRequestBeta);
                            localVarPath = "/entitlements/bulk-update";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(entitlementBulkUpdateRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.EntitlementsBetaApiAxiosParamCreator = EntitlementsBetaApiAxiosParamCreator;
/**
 * EntitlementsBetaApi - functional programming interface
 * @export
 */
var EntitlementsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.EntitlementsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Add single Access Model Metadata to an entitlement.
         * @summary Add metadata to an entitlement.
         * @param {string} id The entitlement id.
         * @param {string} attributeKey Technical name of the Attribute.
         * @param {string} attributeValue Technical name of the Attribute Value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessModelMetadataForEntitlement: function (id, attributeKey, attributeValue, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createAccessModelMetadataForEntitlement(id, attributeKey, attributeValue, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Remove single Access Model Metadata from an entitlement.
         * @summary Remove metadata from an entitlement.
         * @param {string} id The entitlement id.
         * @param {string} attributeKey Technical name of the Attribute.
         * @param {string} attributeValue Technical name of the Attribute Value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessModelMetadataFromEntitlement: function (id, attributeKey, attributeValue, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAccessModelMetadataFromEntitlement(id, attributeKey, attributeValue, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns an entitlement by its ID.
         * @summary Get an entitlement
         * @param {string} id The entitlement ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlement: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntitlement(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the entitlement request config for a specified entitlement.
         * @summary Get Entitlement Request Config
         * @param {string} id Entitlement Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementRequestConfig: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntitlementRequestConfig(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
         * @summary Aggregate Entitlements
         * @param {string} id Source Id
         * @param {any} [csvFile] The CSV file containing the source entitlements to aggregate.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        importEntitlementsBySource: function (id, csvFile, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importEntitlementsBySource(id, csvFile, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of all child entitlements of a given entitlement.
         * @summary List of entitlements children
         * @param {string} id Entitlement Id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlementChildren: function (id, limit, offset, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEntitlementChildren(id, limit, offset, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of all parent entitlements of a given entitlement.
         * @summary List of entitlements parents
         * @param {string} id Entitlement Id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlementParents: function (id, limit, offset, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEntitlementParents(id, limit, offset, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
         * @summary Gets a list of entitlements.
         * @param {string} [accountId] The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
         * @param {string} [segmentedForIdentity] If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
         * @param {string} [forSegmentIds] If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
         * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlements: function (accountId, segmentedForIdentity, forSegmentIds, includeUnsegmented, offset, limit, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listEntitlements(accountId, segmentedForIdentity, forSegmentIds, includeUnsegmented, offset, limit, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
         * @summary Patch an entitlement
         * @param {string} id ID of the entitlement to patch
         * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchEntitlement: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchEntitlement(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API replaces the entitlement request config for a specified entitlement.
         * @summary Replace Entitlement Request Config
         * @param {string} id Entitlement ID
         * @param {EntitlementRequestConfigBeta} entitlementRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putEntitlementRequestConfig: function (id, entitlementRequestConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putEntitlementRequestConfig(id, entitlementRequestConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Removes all entitlements on a specific source.
         * @summary Reset Source Entitlements
         * @param {string} id ID of source for the entitlement reset
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        resetSourceEntitlements: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resetSourceEntitlements(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Bulk update an entitlement list
         * @param {EntitlementBulkUpdateRequestBeta} entitlementBulkUpdateRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateEntitlementsInBulk: function (entitlementBulkUpdateRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntitlementsInBulk(entitlementBulkUpdateRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.EntitlementsBetaApiFp = EntitlementsBetaApiFp;
/**
 * EntitlementsBetaApi - factory interface
 * @export
 */
var EntitlementsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.EntitlementsBetaApiFp)(configuration);
    return {
        /**
         * Add single Access Model Metadata to an entitlement.
         * @summary Add metadata to an entitlement.
         * @param {string} id The entitlement id.
         * @param {string} attributeKey Technical name of the Attribute.
         * @param {string} attributeValue Technical name of the Attribute Value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createAccessModelMetadataForEntitlement: function (id, attributeKey, attributeValue, axiosOptions) {
            return localVarFp.createAccessModelMetadataForEntitlement(id, attributeKey, attributeValue, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove single Access Model Metadata from an entitlement.
         * @summary Remove metadata from an entitlement.
         * @param {string} id The entitlement id.
         * @param {string} attributeKey Technical name of the Attribute.
         * @param {string} attributeValue Technical name of the Attribute Value.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessModelMetadataFromEntitlement: function (id, attributeKey, attributeValue, axiosOptions) {
            return localVarFp.deleteAccessModelMetadataFromEntitlement(id, attributeKey, attributeValue, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns an entitlement by its ID.
         * @summary Get an entitlement
         * @param {string} id The entitlement ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlement: function (id, axiosOptions) {
            return localVarFp.getEntitlement(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the entitlement request config for a specified entitlement.
         * @summary Get Entitlement Request Config
         * @param {string} id Entitlement Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementRequestConfig: function (id, axiosOptions) {
            return localVarFp.getEntitlementRequestConfig(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
         * @summary Aggregate Entitlements
         * @param {string} id Source Id
         * @param {any} [csvFile] The CSV file containing the source entitlements to aggregate.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        importEntitlementsBySource: function (id, csvFile, axiosOptions) {
            return localVarFp.importEntitlementsBySource(id, csvFile, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of all child entitlements of a given entitlement.
         * @summary List of entitlements children
         * @param {string} id Entitlement Id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlementChildren: function (id, limit, offset, count, sorters, filters, axiosOptions) {
            return localVarFp.listEntitlementChildren(id, limit, offset, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of all parent entitlements of a given entitlement.
         * @summary List of entitlements parents
         * @param {string} id Entitlement Id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlementParents: function (id, limit, offset, count, sorters, filters, axiosOptions) {
            return localVarFp.listEntitlementParents(id, limit, offset, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
         * @summary Gets a list of entitlements.
         * @param {string} [accountId] The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
         * @param {string} [segmentedForIdentity] If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
         * @param {string} [forSegmentIds] If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
         * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listEntitlements: function (accountId, segmentedForIdentity, forSegmentIds, includeUnsegmented, offset, limit, count, sorters, filters, axiosOptions) {
            return localVarFp.listEntitlements(accountId, segmentedForIdentity, forSegmentIds, includeUnsegmented, offset, limit, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
         * @summary Patch an entitlement
         * @param {string} id ID of the entitlement to patch
         * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchEntitlement: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchEntitlement(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API replaces the entitlement request config for a specified entitlement.
         * @summary Replace Entitlement Request Config
         * @param {string} id Entitlement ID
         * @param {EntitlementRequestConfigBeta} entitlementRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putEntitlementRequestConfig: function (id, entitlementRequestConfigBeta, axiosOptions) {
            return localVarFp.putEntitlementRequestConfig(id, entitlementRequestConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Removes all entitlements on a specific source.
         * @summary Reset Source Entitlements
         * @param {string} id ID of source for the entitlement reset
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        resetSourceEntitlements: function (id, axiosOptions) {
            return localVarFp.resetSourceEntitlements(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Bulk update an entitlement list
         * @param {EntitlementBulkUpdateRequestBeta} entitlementBulkUpdateRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateEntitlementsInBulk: function (entitlementBulkUpdateRequestBeta, axiosOptions) {
            return localVarFp.updateEntitlementsInBulk(entitlementBulkUpdateRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.EntitlementsBetaApiFactory = EntitlementsBetaApiFactory;
/**
 * EntitlementsBetaApi - object-oriented interface
 * @export
 * @class EntitlementsBetaApi
 * @extends {BaseAPI}
 */
var EntitlementsBetaApi = /** @class */ (function (_super) {
    __extends(EntitlementsBetaApi, _super);
    function EntitlementsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Add single Access Model Metadata to an entitlement.
     * @summary Add metadata to an entitlement.
     * @param {EntitlementsBetaApiCreateAccessModelMetadataForEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.createAccessModelMetadataForEntitlement = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).createAccessModelMetadataForEntitlement(requestParameters.id, requestParameters.attributeKey, requestParameters.attributeValue, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove single Access Model Metadata from an entitlement.
     * @summary Remove metadata from an entitlement.
     * @param {EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.deleteAccessModelMetadataFromEntitlement = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).deleteAccessModelMetadataFromEntitlement(requestParameters.id, requestParameters.attributeKey, requestParameters.attributeValue, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns an entitlement by its ID.
     * @summary Get an entitlement
     * @param {EntitlementsBetaApiGetEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.getEntitlement = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).getEntitlement(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the entitlement request config for a specified entitlement.
     * @summary Get Entitlement Request Config
     * @param {EntitlementsBetaApiGetEntitlementRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.getEntitlementRequestConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).getEntitlementRequestConfig(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
     * @summary Aggregate Entitlements
     * @param {EntitlementsBetaApiImportEntitlementsBySourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.importEntitlementsBySource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).importEntitlementsBySource(requestParameters.id, requestParameters.csvFile, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of all child entitlements of a given entitlement.
     * @summary List of entitlements children
     * @param {EntitlementsBetaApiListEntitlementChildrenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.listEntitlementChildren = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).listEntitlementChildren(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of all parent entitlements of a given entitlement.
     * @summary List of entitlements parents
     * @param {EntitlementsBetaApiListEntitlementParentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.listEntitlementParents = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).listEntitlementParents(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
     * @summary Gets a list of entitlements.
     * @param {EntitlementsBetaApiListEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.listEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).listEntitlements(requestParameters.accountId, requestParameters.segmentedForIdentity, requestParameters.forSegmentIds, requestParameters.includeUnsegmented, requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Patch an entitlement
     * @param {EntitlementsBetaApiPatchEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.patchEntitlement = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).patchEntitlement(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API replaces the entitlement request config for a specified entitlement.
     * @summary Replace Entitlement Request Config
     * @param {EntitlementsBetaApiPutEntitlementRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.putEntitlementRequestConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).putEntitlementRequestConfig(requestParameters.id, requestParameters.entitlementRequestConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Removes all entitlements on a specific source.
     * @summary Reset Source Entitlements
     * @param {EntitlementsBetaApiResetSourceEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.resetSourceEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).resetSourceEntitlements(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Bulk update an entitlement list
     * @param {EntitlementsBetaApiUpdateEntitlementsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    EntitlementsBetaApi.prototype.updateEntitlementsInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.EntitlementsBetaApiFp)(this.configuration).updateEntitlementsInBulk(requestParameters.entitlementBulkUpdateRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EntitlementsBetaApi;
}(base_1.BaseAPI));
exports.EntitlementsBetaApi = EntitlementsBetaApi;
/**
 * GovernanceGroupsBetaApi - axios parameter creator
 * @export
 */
var GovernanceGroupsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates a new Governance Group.
         * @summary Create a new Governance Group.
         * @param {WorkgroupDtoBeta} workgroupDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkgroup: function (workgroupDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workgroupDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createWorkgroup', 'workgroupDtoBeta', workgroupDtoBeta);
                            localVarPath = "/workgroups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workgroupDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API deletes a Governance Group by its ID.
         * @summary Delete a Governance Group
         * @param {string} id ID of the Governance Group
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroup: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteWorkgroup', 'id', id);
                            localVarPath = "/workgroups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
         * @summary Remove members from Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be removed from  a Governance Group members list.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroupMembers: function (workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workgroupId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteWorkgroupMembers', 'workgroupId', workgroupId);
                            // verify required parameter 'bulkWorkgroupMembersRequestInnerBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteWorkgroupMembers', 'bulkWorkgroupMembersRequestInnerBeta', bulkWorkgroupMembersRequestInnerBeta);
                            localVarPath = "/workgroups/{workgroupId}/members/bulk-delete"
                                .replace("{".concat("workgroupId", "}"), encodeURIComponent(String(workgroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkWorkgroupMembersRequestInnerBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
         * @summary Delete Governance Group(s)
         * @param {WorkgroupBulkDeleteRequestBeta} workgroupBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroupsInBulk: function (workgroupBulkDeleteRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workgroupBulkDeleteRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteWorkgroupsInBulk', 'workgroupBulkDeleteRequestBeta', workgroupBulkDeleteRequestBeta);
                            localVarPath = "/workgroups/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workgroupBulkDeleteRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a Governance Groups by its ID.
         * @summary Get Governance Group by Id
         * @param {string} id ID of the Governance Group
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkgroup: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkgroup', 'id', id);
                            localVarPath = "/workgroups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns list of connections associated with a Governance Group.
         * @summary List connections for Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listConnections: function (workgroupId, offset, limit, count, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workgroupId' is not null or undefined
                            (0, common_1.assertParamExists)('listConnections', 'workgroupId', workgroupId);
                            localVarPath = "/workgroups/{workgroupId}/connections"
                                .replace("{".concat("workgroupId", "}"), encodeURIComponent(String(workgroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns list of members associated with a Governance Group.
         * @summary List Governance Group Members
         * @param {string} workgroupId ID of the Governance Group.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroupMembers: function (workgroupId, offset, limit, count, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workgroupId' is not null or undefined
                            (0, common_1.assertParamExists)('listWorkgroupMembers', 'workgroupId', workgroupId);
                            localVarPath = "/workgroups/{workgroupId}/members"
                                .replace("{".concat("workgroupId", "}"), encodeURIComponent(String(workgroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns list of Governance Groups
         * @summary List Governance Groups
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroups: function (offset, limit, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workgroups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
         * @summary Patch a Governance Group
         * @param {string} id ID of the Governance Group
         * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkgroup: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchWorkgroup', 'id', id);
                            localVarPath = "/workgroups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
         * @summary Add members to Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be added to a Governance Group members list.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkgroupMembers: function (workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'workgroupId' is not null or undefined
                            (0, common_1.assertParamExists)('updateWorkgroupMembers', 'workgroupId', workgroupId);
                            // verify required parameter 'bulkWorkgroupMembersRequestInnerBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateWorkgroupMembers', 'bulkWorkgroupMembersRequestInnerBeta', bulkWorkgroupMembersRequestInnerBeta);
                            localVarPath = "/workgroups/{workgroupId}/members/bulk-add"
                                .replace("{".concat("workgroupId", "}"), encodeURIComponent(String(workgroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkWorkgroupMembersRequestInnerBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.GovernanceGroupsBetaApiAxiosParamCreator = GovernanceGroupsBetaApiAxiosParamCreator;
/**
 * GovernanceGroupsBetaApi - functional programming interface
 * @export
 */
var GovernanceGroupsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GovernanceGroupsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates a new Governance Group.
         * @summary Create a new Governance Group.
         * @param {WorkgroupDtoBeta} workgroupDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkgroup: function (workgroupDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createWorkgroup(workgroupDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API deletes a Governance Group by its ID.
         * @summary Delete a Governance Group
         * @param {string} id ID of the Governance Group
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroup: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteWorkgroup(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
         * @summary Remove members from Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be removed from  a Governance Group members list.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroupMembers: function (workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteWorkgroupMembers(workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
         * @summary Delete Governance Group(s)
         * @param {WorkgroupBulkDeleteRequestBeta} workgroupBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroupsInBulk: function (workgroupBulkDeleteRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteWorkgroupsInBulk(workgroupBulkDeleteRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a Governance Groups by its ID.
         * @summary Get Governance Group by Id
         * @param {string} id ID of the Governance Group
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkgroup: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkgroup(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns list of connections associated with a Governance Group.
         * @summary List connections for Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listConnections: function (workgroupId, offset, limit, count, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listConnections(workgroupId, offset, limit, count, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns list of members associated with a Governance Group.
         * @summary List Governance Group Members
         * @param {string} workgroupId ID of the Governance Group.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroupMembers: function (workgroupId, offset, limit, count, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkgroupMembers(workgroupId, offset, limit, count, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns list of Governance Groups
         * @summary List Governance Groups
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroups: function (offset, limit, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkgroups(offset, limit, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
         * @summary Patch a Governance Group
         * @param {string} id ID of the Governance Group
         * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkgroup: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchWorkgroup(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
         * @summary Add members to Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be added to a Governance Group members list.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkgroupMembers: function (workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateWorkgroupMembers(workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.GovernanceGroupsBetaApiFp = GovernanceGroupsBetaApiFp;
/**
 * GovernanceGroupsBetaApi - factory interface
 * @export
 */
var GovernanceGroupsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GovernanceGroupsBetaApiFp)(configuration);
    return {
        /**
         * This API creates a new Governance Group.
         * @summary Create a new Governance Group.
         * @param {WorkgroupDtoBeta} workgroupDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkgroup: function (workgroupDtoBeta, axiosOptions) {
            return localVarFp.createWorkgroup(workgroupDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API deletes a Governance Group by its ID.
         * @summary Delete a Governance Group
         * @param {string} id ID of the Governance Group
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroup: function (id, axiosOptions) {
            return localVarFp.deleteWorkgroup(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
         * @summary Remove members from Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be removed from  a Governance Group members list.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroupMembers: function (workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions) {
            return localVarFp.deleteWorkgroupMembers(workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
         * @summary Delete Governance Group(s)
         * @param {WorkgroupBulkDeleteRequestBeta} workgroupBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkgroupsInBulk: function (workgroupBulkDeleteRequestBeta, axiosOptions) {
            return localVarFp.deleteWorkgroupsInBulk(workgroupBulkDeleteRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a Governance Groups by its ID.
         * @summary Get Governance Group by Id
         * @param {string} id ID of the Governance Group
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkgroup: function (id, axiosOptions) {
            return localVarFp.getWorkgroup(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns list of connections associated with a Governance Group.
         * @summary List connections for Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listConnections: function (workgroupId, offset, limit, count, sorters, axiosOptions) {
            return localVarFp.listConnections(workgroupId, offset, limit, count, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns list of members associated with a Governance Group.
         * @summary List Governance Group Members
         * @param {string} workgroupId ID of the Governance Group.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroupMembers: function (workgroupId, offset, limit, count, sorters, axiosOptions) {
            return localVarFp.listWorkgroupMembers(workgroupId, offset, limit, count, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns list of Governance Groups
         * @summary List Governance Groups
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkgroups: function (offset, limit, count, filters, sorters, axiosOptions) {
            return localVarFp.listWorkgroups(offset, limit, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
         * @summary Patch a Governance Group
         * @param {string} id ID of the Governance Group
         * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkgroup: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchWorkgroup(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
         * @summary Add members to Governance Group
         * @param {string} workgroupId ID of the Governance Group.
         * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be added to a Governance Group members list.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkgroupMembers: function (workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions) {
            return localVarFp.updateWorkgroupMembers(workgroupId, bulkWorkgroupMembersRequestInnerBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GovernanceGroupsBetaApiFactory = GovernanceGroupsBetaApiFactory;
/**
 * GovernanceGroupsBetaApi - object-oriented interface
 * @export
 * @class GovernanceGroupsBetaApi
 * @extends {BaseAPI}
 */
var GovernanceGroupsBetaApi = /** @class */ (function (_super) {
    __extends(GovernanceGroupsBetaApi, _super);
    function GovernanceGroupsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates a new Governance Group.
     * @summary Create a new Governance Group.
     * @param {GovernanceGroupsBetaApiCreateWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.createWorkgroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).createWorkgroup(requestParameters.workgroupDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API deletes a Governance Group by its ID.
     * @summary Delete a Governance Group
     * @param {GovernanceGroupsBetaApiDeleteWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.deleteWorkgroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).deleteWorkgroup(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Remove members from Governance Group
     * @param {GovernanceGroupsBetaApiDeleteWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.deleteWorkgroupMembers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).deleteWorkgroupMembers(requestParameters.workgroupId, requestParameters.bulkWorkgroupMembersRequestInnerBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
     * @summary Delete Governance Group(s)
     * @param {GovernanceGroupsBetaApiDeleteWorkgroupsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.deleteWorkgroupsInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).deleteWorkgroupsInBulk(requestParameters.workgroupBulkDeleteRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a Governance Groups by its ID.
     * @summary Get Governance Group by Id
     * @param {GovernanceGroupsBetaApiGetWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.getWorkgroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).getWorkgroup(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns list of connections associated with a Governance Group.
     * @summary List connections for Governance Group
     * @param {GovernanceGroupsBetaApiListConnectionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.listConnections = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).listConnections(requestParameters.workgroupId, requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns list of members associated with a Governance Group.
     * @summary List Governance Group Members
     * @param {GovernanceGroupsBetaApiListWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.listWorkgroupMembers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).listWorkgroupMembers(requestParameters.workgroupId, requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns list of Governance Groups
     * @summary List Governance Groups
     * @param {GovernanceGroupsBetaApiListWorkgroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.listWorkgroups = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).listWorkgroups(requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
     * @summary Patch a Governance Group
     * @param {GovernanceGroupsBetaApiPatchWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.patchWorkgroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).patchWorkgroup(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Add members to Governance Group
     * @param {GovernanceGroupsBetaApiUpdateWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    GovernanceGroupsBetaApi.prototype.updateWorkgroupMembers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.GovernanceGroupsBetaApiFp)(this.configuration).updateWorkgroupMembers(requestParameters.workgroupId, requestParameters.bulkWorkgroupMembersRequestInnerBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GovernanceGroupsBetaApi;
}(base_1.BaseAPI));
exports.GovernanceGroupsBetaApi = GovernanceGroupsBetaApi;
/**
 * IAIAccessRequestRecommendationsBetaApi - axios parameter creator
 * @export
 */
var IAIAccessRequestRecommendationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
         * @summary Notification of Ignored Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item to ignore for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsIgnoredItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessRequestRecommendationActionItemDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('addAccessRequestRecommendationsIgnoredItem', 'accessRequestRecommendationActionItemDtoBeta', accessRequestRecommendationActionItemDtoBeta);
                            localVarPath = "/ai-access-request-recommendations/ignored-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessRequestRecommendationActionItemDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
         * @summary Notification of Requested Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item that was requested for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsRequestedItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessRequestRecommendationActionItemDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('addAccessRequestRecommendationsRequestedItem', 'accessRequestRecommendationActionItemDtoBeta', accessRequestRecommendationActionItemDtoBeta);
                            localVarPath = "/ai-access-request-recommendations/requested-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessRequestRecommendationActionItemDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
         * @summary Notification of Viewed Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access that was viewed for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsViewedItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessRequestRecommendationActionItemDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('addAccessRequestRecommendationsViewedItem', 'accessRequestRecommendationActionItemDtoBeta', accessRequestRecommendationActionItemDtoBeta);
                            localVarPath = "/ai-access-request-recommendations/viewed-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessRequestRecommendationActionItemDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
         * @summary Notification of Viewed Access Request Recommendations in Bulk
         * @param {Array<AccessRequestRecommendationActionItemDtoBeta>} accessRequestRecommendationActionItemDtoBeta The recommended access items that were viewed for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsViewedItems: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'accessRequestRecommendationActionItemDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('addAccessRequestRecommendationsViewedItems', 'accessRequestRecommendationActionItemDtoBeta', accessRequestRecommendationActionItemDtoBeta);
                            localVarPath = "/ai-access-request-recommendations/viewed-items/bulk-create";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(accessRequestRecommendationActionItemDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
         * @summary Identity Access Request Recommendations
         * @param {string} [identityId] Get access request recommendations for an identityId. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [includeTranslationMessages] If *true* it will populate a list of translation messages in the response.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendations: function (identityId, limit, offset, count, includeTranslationMessages, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/ai-access-request-recommendations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (identityId !== undefined) {
                                localVarQueryParameter['identity-id'] = identityId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (includeTranslationMessages !== undefined) {
                                localVarQueryParameter['include-translation-messages'] = includeTranslationMessages;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the list of ignored access request recommendations.
         * @summary List of Ignored Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsIgnoredItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/ai-access-request-recommendations/ignored-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of requested access request recommendations.
         * @summary List of Requested Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsRequestedItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/ai-access-request-recommendations/requested-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the list of viewed access request recommendations.
         * @summary List of Viewed Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsViewedItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/ai-access-request-recommendations/viewed-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAIAccessRequestRecommendationsBetaApiAxiosParamCreator = IAIAccessRequestRecommendationsBetaApiAxiosParamCreator;
/**
 * IAIAccessRequestRecommendationsBetaApi - functional programming interface
 * @export
 */
var IAIAccessRequestRecommendationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAIAccessRequestRecommendationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
         * @summary Notification of Ignored Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item to ignore for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsIgnoredItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addAccessRequestRecommendationsIgnoredItem(accessRequestRecommendationActionItemDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
         * @summary Notification of Requested Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item that was requested for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsRequestedItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addAccessRequestRecommendationsRequestedItem(accessRequestRecommendationActionItemDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
         * @summary Notification of Viewed Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access that was viewed for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsViewedItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addAccessRequestRecommendationsViewedItem(accessRequestRecommendationActionItemDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
         * @summary Notification of Viewed Access Request Recommendations in Bulk
         * @param {Array<AccessRequestRecommendationActionItemDtoBeta>} accessRequestRecommendationActionItemDtoBeta The recommended access items that were viewed for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsViewedItems: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addAccessRequestRecommendationsViewedItems(accessRequestRecommendationActionItemDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
         * @summary Identity Access Request Recommendations
         * @param {string} [identityId] Get access request recommendations for an identityId. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [includeTranslationMessages] If *true* it will populate a list of translation messages in the response.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendations: function (identityId, limit, offset, count, includeTranslationMessages, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestRecommendations(identityId, limit, offset, count, includeTranslationMessages, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the list of ignored access request recommendations.
         * @summary List of Ignored Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsIgnoredItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestRecommendationsIgnoredItems(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of requested access request recommendations.
         * @summary List of Requested Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsRequestedItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestRecommendationsRequestedItems(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the list of viewed access request recommendations.
         * @summary List of Viewed Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsViewedItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAccessRequestRecommendationsViewedItems(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAIAccessRequestRecommendationsBetaApiFp = IAIAccessRequestRecommendationsBetaApiFp;
/**
 * IAIAccessRequestRecommendationsBetaApi - factory interface
 * @export
 */
var IAIAccessRequestRecommendationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(configuration);
    return {
        /**
         * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
         * @summary Notification of Ignored Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item to ignore for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsIgnoredItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return localVarFp.addAccessRequestRecommendationsIgnoredItem(accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
         * @summary Notification of Requested Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item that was requested for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsRequestedItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return localVarFp.addAccessRequestRecommendationsRequestedItem(accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
         * @summary Notification of Viewed Access Request Recommendations
         * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access that was viewed for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsViewedItem: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return localVarFp.addAccessRequestRecommendationsViewedItem(accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
         * @summary Notification of Viewed Access Request Recommendations in Bulk
         * @param {Array<AccessRequestRecommendationActionItemDtoBeta>} accessRequestRecommendationActionItemDtoBeta The recommended access items that were viewed for an identity.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        addAccessRequestRecommendationsViewedItems: function (accessRequestRecommendationActionItemDtoBeta, axiosOptions) {
            return localVarFp.addAccessRequestRecommendationsViewedItems(accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
         * @summary Identity Access Request Recommendations
         * @param {string} [identityId] Get access request recommendations for an identityId. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [includeTranslationMessages] If *true* it will populate a list of translation messages in the response.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendations: function (identityId, limit, offset, count, includeTranslationMessages, filters, sorters, axiosOptions) {
            return localVarFp.getAccessRequestRecommendations(identityId, limit, offset, count, includeTranslationMessages, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the list of ignored access request recommendations.
         * @summary List of Ignored Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsIgnoredItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getAccessRequestRecommendationsIgnoredItems(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of requested access request recommendations.
         * @summary List of Requested Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsRequestedItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getAccessRequestRecommendationsRequestedItems(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the list of viewed access request recommendations.
         * @summary List of Viewed Access Request Recommendations
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAccessRequestRecommendationsViewedItems: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getAccessRequestRecommendationsViewedItems(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAIAccessRequestRecommendationsBetaApiFactory = IAIAccessRequestRecommendationsBetaApiFactory;
/**
 * IAIAccessRequestRecommendationsBetaApi - object-oriented interface
 * @export
 * @class IAIAccessRequestRecommendationsBetaApi
 * @extends {BaseAPI}
 */
var IAIAccessRequestRecommendationsBetaApi = /** @class */ (function (_super) {
    __extends(IAIAccessRequestRecommendationsBetaApi, _super);
    function IAIAccessRequestRecommendationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
     * @summary Notification of Ignored Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsIgnoredItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.addAccessRequestRecommendationsIgnoredItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).addAccessRequestRecommendationsIgnoredItem(requestParameters.accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
     * @summary Notification of Requested Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsRequestedItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.addAccessRequestRecommendationsRequestedItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).addAccessRequestRecommendationsRequestedItem(requestParameters.accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.addAccessRequestRecommendationsViewedItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).addAccessRequestRecommendationsViewedItem(requestParameters.accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations in Bulk
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.addAccessRequestRecommendationsViewedItems = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).addAccessRequestRecommendationsViewedItems(requestParameters.accessRequestRecommendationActionItemDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
     * @summary Identity Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.getAccessRequestRecommendations = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).getAccessRequestRecommendations(requestParameters.identityId, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.includeTranslationMessages, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the list of ignored access request recommendations.
     * @summary List of Ignored Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.getAccessRequestRecommendationsIgnoredItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).getAccessRequestRecommendationsIgnoredItems(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of requested access request recommendations.
     * @summary List of Requested Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.getAccessRequestRecommendationsRequestedItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).getAccessRequestRecommendationsRequestedItems(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the list of viewed access request recommendations.
     * @summary List of Viewed Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    IAIAccessRequestRecommendationsBetaApi.prototype.getAccessRequestRecommendationsViewedItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIAccessRequestRecommendationsBetaApiFp)(this.configuration).getAccessRequestRecommendationsViewedItems(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAIAccessRequestRecommendationsBetaApi;
}(base_1.BaseAPI));
exports.IAIAccessRequestRecommendationsBetaApi = IAIAccessRequestRecommendationsBetaApi;
/**
 * IAICommonAccessBetaApi - axios parameter creator
 * @export
 */
var IAICommonAccessBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
         * @summary Create common access items
         * @param {CommonAccessItemRequestBeta} commonAccessItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createCommonAccess: function (commonAccessItemRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'commonAccessItemRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createCommonAccess', 'commonAccessItemRequestBeta', commonAccessItemRequestBeta);
                            localVarPath = "/common-access";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commonAccessItemRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
         * @summary Get a paginated list of common access
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCommonAccess: function (offset, limit, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/common-access";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
         * @summary Bulk update common access status
         * @param {Array<CommonAccessIDStatusBeta>} commonAccessIDStatusBeta Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateCommonAccessStatusInBulk: function (commonAccessIDStatusBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'commonAccessIDStatusBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateCommonAccessStatusInBulk', 'commonAccessIDStatusBeta', commonAccessIDStatusBeta);
                            localVarPath = "/common-access/update-status";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commonAccessIDStatusBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAICommonAccessBetaApiAxiosParamCreator = IAICommonAccessBetaApiAxiosParamCreator;
/**
 * IAICommonAccessBetaApi - functional programming interface
 * @export
 */
var IAICommonAccessBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAICommonAccessBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
         * @summary Create common access items
         * @param {CommonAccessItemRequestBeta} commonAccessItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createCommonAccess: function (commonAccessItemRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createCommonAccess(commonAccessItemRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
         * @summary Get a paginated list of common access
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCommonAccess: function (offset, limit, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCommonAccess(offset, limit, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
         * @summary Bulk update common access status
         * @param {Array<CommonAccessIDStatusBeta>} commonAccessIDStatusBeta Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateCommonAccessStatusInBulk: function (commonAccessIDStatusBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateCommonAccessStatusInBulk(commonAccessIDStatusBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAICommonAccessBetaApiFp = IAICommonAccessBetaApiFp;
/**
 * IAICommonAccessBetaApi - factory interface
 * @export
 */
var IAICommonAccessBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAICommonAccessBetaApiFp)(configuration);
    return {
        /**
         * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
         * @summary Create common access items
         * @param {CommonAccessItemRequestBeta} commonAccessItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createCommonAccess: function (commonAccessItemRequestBeta, axiosOptions) {
            return localVarFp.createCommonAccess(commonAccessItemRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
         * @summary Get a paginated list of common access
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCommonAccess: function (offset, limit, count, filters, sorters, axiosOptions) {
            return localVarFp.getCommonAccess(offset, limit, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
         * @summary Bulk update common access status
         * @param {Array<CommonAccessIDStatusBeta>} commonAccessIDStatusBeta Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateCommonAccessStatusInBulk: function (commonAccessIDStatusBeta, axiosOptions) {
            return localVarFp.updateCommonAccessStatusInBulk(commonAccessIDStatusBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAICommonAccessBetaApiFactory = IAICommonAccessBetaApiFactory;
/**
 * IAICommonAccessBetaApi - object-oriented interface
 * @export
 * @class IAICommonAccessBetaApi
 * @extends {BaseAPI}
 */
var IAICommonAccessBetaApi = /** @class */ (function (_super) {
    __extends(IAICommonAccessBetaApi, _super);
    function IAICommonAccessBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
     * @summary Create common access items
     * @param {IAICommonAccessBetaApiCreateCommonAccessRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAICommonAccessBetaApi
     */
    IAICommonAccessBetaApi.prototype.createCommonAccess = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAICommonAccessBetaApiFp)(this.configuration).createCommonAccess(requestParameters.commonAccessItemRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
     * @summary Get a paginated list of common access
     * @param {IAICommonAccessBetaApiGetCommonAccessRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAICommonAccessBetaApi
     */
    IAICommonAccessBetaApi.prototype.getCommonAccess = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAICommonAccessBetaApiFp)(this.configuration).getCommonAccess(requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
     * @summary Bulk update common access status
     * @param {IAICommonAccessBetaApiUpdateCommonAccessStatusInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAICommonAccessBetaApi
     */
    IAICommonAccessBetaApi.prototype.updateCommonAccessStatusInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAICommonAccessBetaApiFp)(this.configuration).updateCommonAccessStatusInBulk(requestParameters.commonAccessIDStatusBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAICommonAccessBetaApi;
}(base_1.BaseAPI));
exports.IAICommonAccessBetaApi = IAICommonAccessBetaApi;
/**
 * IAIMessageCatalogsBetaApi - axios parameter creator
 * @export
 */
var IAIMessageCatalogsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
         * @summary Get Message catalogs
         * @param {'recommender' | 'access-request-recommender'} catalogId The ID of the message catalog.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMessageCatalogs: function (catalogId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'catalogId' is not null or undefined
                            (0, common_1.assertParamExists)('getMessageCatalogs', 'catalogId', catalogId);
                            localVarPath = "/translation-catalogs/{catalog-id}"
                                .replace("{".concat("catalog-id", "}"), encodeURIComponent(String(catalogId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAIMessageCatalogsBetaApiAxiosParamCreator = IAIMessageCatalogsBetaApiAxiosParamCreator;
/**
 * IAIMessageCatalogsBetaApi - functional programming interface
 * @export
 */
var IAIMessageCatalogsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAIMessageCatalogsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
         * @summary Get Message catalogs
         * @param {'recommender' | 'access-request-recommender'} catalogId The ID of the message catalog.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMessageCatalogs: function (catalogId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMessageCatalogs(catalogId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAIMessageCatalogsBetaApiFp = IAIMessageCatalogsBetaApiFp;
/**
 * IAIMessageCatalogsBetaApi - factory interface
 * @export
 */
var IAIMessageCatalogsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAIMessageCatalogsBetaApiFp)(configuration);
    return {
        /**
         * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
         * @summary Get Message catalogs
         * @param {'recommender' | 'access-request-recommender'} catalogId The ID of the message catalog.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMessageCatalogs: function (catalogId, axiosOptions) {
            return localVarFp.getMessageCatalogs(catalogId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAIMessageCatalogsBetaApiFactory = IAIMessageCatalogsBetaApiFactory;
/**
 * IAIMessageCatalogsBetaApi - object-oriented interface
 * @export
 * @class IAIMessageCatalogsBetaApi
 * @extends {BaseAPI}
 */
var IAIMessageCatalogsBetaApi = /** @class */ (function (_super) {
    __extends(IAIMessageCatalogsBetaApi, _super);
    function IAIMessageCatalogsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
     * @summary Get Message catalogs
     * @param {IAIMessageCatalogsBetaApiGetMessageCatalogsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIMessageCatalogsBetaApi
     */
    IAIMessageCatalogsBetaApi.prototype.getMessageCatalogs = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIMessageCatalogsBetaApiFp)(this.configuration).getMessageCatalogs(requestParameters.catalogId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAIMessageCatalogsBetaApi;
}(base_1.BaseAPI));
exports.IAIMessageCatalogsBetaApi = IAIMessageCatalogsBetaApi;
/**
 * IAIOutliersBetaApi - axios parameter creator
 * @export
 */
var IAIOutliersBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Export
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportOutliersZip: function (type, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/outliers/export";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Summary
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOutlierSnapshots: function (limit, offset, type, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/outlier-summaries";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Get Identity Outliers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOutliers: function (limit, offset, count, type, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/outliers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Latest Summary
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getLatestIdentityOutlierSnapshots: function (type, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/outlier-summaries/latest";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Get identity outlier contibuting feature summary
         * @param {string} outlierFeatureId Contributing feature id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOutlierContributingFeatureSummary: function (outlierFeatureId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'outlierFeatureId' is not null or undefined
                            (0, common_1.assertParamExists)('getOutlierContributingFeatureSummary', 'outlierFeatureId', outlierFeatureId);
                            localVarPath = "/outlier-feature-summaries/{outlierFeatureId}"
                                .replace("{".concat("outlierFeatureId", "}"), encodeURIComponent(String(outlierFeatureId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Get identity outlier\'s contibuting features
         * @param {string} outlierId The outlier id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [includeTranslationMessages] Whether or not to include translation messages object in returned response
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPeerGroupOutliersContributingFeatures: function (outlierId, limit, offset, count, includeTranslationMessages, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'outlierId' is not null or undefined
                            (0, common_1.assertParamExists)('getPeerGroupOutliersContributingFeatures', 'outlierId', outlierId);
                            localVarPath = "/outliers/{outlierId}/contributing-features"
                                .replace("{".concat("outlierId", "}"), encodeURIComponent(String(outlierId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (includeTranslationMessages !== undefined) {
                                localVarQueryParameter['include-translation-messages'] = includeTranslationMessages;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
         * @summary IAI Identity Outliers Ignore
         * @param {Array<string>} requestBody
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        ignoreIdentityOutliers: function (requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('ignoreIdentityOutliers', 'requestBody', requestBody);
                            localVarPath = "/outliers/ignore";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Gets a list of access items associated with each identity outlier contributing feature
         * @param {string} outlierId The outlier id
         * @param {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'} contributingFeatureName The name of contributing feature
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [accessType] The type of access item for the identity outlier contributing feature. If not provided, it returns all
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listOutliersContributingFeatureAccessItems: function (outlierId, contributingFeatureName, limit, offset, count, accessType, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'outlierId' is not null or undefined
                            (0, common_1.assertParamExists)('listOutliersContributingFeatureAccessItems', 'outlierId', outlierId);
                            // verify required parameter 'contributingFeatureName' is not null or undefined
                            (0, common_1.assertParamExists)('listOutliersContributingFeatureAccessItems', 'contributingFeatureName', contributingFeatureName);
                            localVarPath = "/outliers/{outlierId}/feature-details/{contributingFeatureName}/access-items"
                                .replace("{".concat("outlierId", "}"), encodeURIComponent(String(outlierId)))
                                .replace("{".concat("contributingFeatureName", "}"), encodeURIComponent(String(contributingFeatureName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (accessType !== undefined) {
                                localVarQueryParameter['accessType'] = accessType;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
         * @summary IAI Identity Outliers Unignore
         * @param {Array<string>} requestBody
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        unIgnoreIdentityOutliers: function (requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('unIgnoreIdentityOutliers', 'requestBody', requestBody);
                            localVarPath = "/outliers/unignore";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAIOutliersBetaApiAxiosParamCreator = IAIOutliersBetaApiAxiosParamCreator;
/**
 * IAIOutliersBetaApi - functional programming interface
 * @export
 */
var IAIOutliersBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAIOutliersBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Export
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportOutliersZip: function (type, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportOutliersZip(type, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Summary
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOutlierSnapshots: function (limit, offset, type, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityOutlierSnapshots(limit, offset, type, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Get Identity Outliers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOutliers: function (limit, offset, count, type, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityOutliers(limit, offset, count, type, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Latest Summary
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getLatestIdentityOutlierSnapshots: function (type, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestIdentityOutlierSnapshots(type, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Get identity outlier contibuting feature summary
         * @param {string} outlierFeatureId Contributing feature id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOutlierContributingFeatureSummary: function (outlierFeatureId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOutlierContributingFeatureSummary(outlierFeatureId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Get identity outlier\'s contibuting features
         * @param {string} outlierId The outlier id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [includeTranslationMessages] Whether or not to include translation messages object in returned response
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPeerGroupOutliersContributingFeatures: function (outlierId, limit, offset, count, includeTranslationMessages, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPeerGroupOutliersContributingFeatures(outlierId, limit, offset, count, includeTranslationMessages, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
         * @summary IAI Identity Outliers Ignore
         * @param {Array<string>} requestBody
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        ignoreIdentityOutliers: function (requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ignoreIdentityOutliers(requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Gets a list of access items associated with each identity outlier contributing feature
         * @param {string} outlierId The outlier id
         * @param {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'} contributingFeatureName The name of contributing feature
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [accessType] The type of access item for the identity outlier contributing feature. If not provided, it returns all
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listOutliersContributingFeatureAccessItems: function (outlierId, contributingFeatureName, limit, offset, count, accessType, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listOutliersContributingFeatureAccessItems(outlierId, contributingFeatureName, limit, offset, count, accessType, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
         * @summary IAI Identity Outliers Unignore
         * @param {Array<string>} requestBody
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        unIgnoreIdentityOutliers: function (requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unIgnoreIdentityOutliers(requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAIOutliersBetaApiFp = IAIOutliersBetaApiFp;
/**
 * IAIOutliersBetaApi - factory interface
 * @export
 */
var IAIOutliersBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAIOutliersBetaApiFp)(configuration);
    return {
        /**
         * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Export
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportOutliersZip: function (type, axiosOptions) {
            return localVarFp.exportOutliersZip(type, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Summary
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOutlierSnapshots: function (limit, offset, type, filters, sorters, axiosOptions) {
            return localVarFp.getIdentityOutlierSnapshots(limit, offset, type, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Get Identity Outliers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOutliers: function (limit, offset, count, type, filters, sorters, axiosOptions) {
            return localVarFp.getIdentityOutliers(limit, offset, count, type, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
         * @summary IAI Identity Outliers Latest Summary
         * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getLatestIdentityOutlierSnapshots: function (type, axiosOptions) {
            return localVarFp.getLatestIdentityOutlierSnapshots(type, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Get identity outlier contibuting feature summary
         * @param {string} outlierFeatureId Contributing feature id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOutlierContributingFeatureSummary: function (outlierFeatureId, axiosOptions) {
            return localVarFp.getOutlierContributingFeatureSummary(outlierFeatureId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Get identity outlier\'s contibuting features
         * @param {string} outlierId The outlier id
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [includeTranslationMessages] Whether or not to include translation messages object in returned response
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPeerGroupOutliersContributingFeatures: function (outlierId, limit, offset, count, includeTranslationMessages, sorters, axiosOptions) {
            return localVarFp.getPeerGroupOutliersContributingFeatures(outlierId, limit, offset, count, includeTranslationMessages, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
         * @summary IAI Identity Outliers Ignore
         * @param {Array<string>} requestBody
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        ignoreIdentityOutliers: function (requestBody, axiosOptions) {
            return localVarFp.ignoreIdentityOutliers(requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
         * @summary Gets a list of access items associated with each identity outlier contributing feature
         * @param {string} outlierId The outlier id
         * @param {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'} contributingFeatureName The name of contributing feature
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [accessType] The type of access item for the identity outlier contributing feature. If not provided, it returns all
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listOutliersContributingFeatureAccessItems: function (outlierId, contributingFeatureName, limit, offset, count, accessType, sorters, axiosOptions) {
            return localVarFp.listOutliersContributingFeatureAccessItems(outlierId, contributingFeatureName, limit, offset, count, accessType, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
         * @summary IAI Identity Outliers Unignore
         * @param {Array<string>} requestBody
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        unIgnoreIdentityOutliers: function (requestBody, axiosOptions) {
            return localVarFp.unIgnoreIdentityOutliers(requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAIOutliersBetaApiFactory = IAIOutliersBetaApiFactory;
/**
 * IAIOutliersBetaApi - object-oriented interface
 * @export
 * @class IAIOutliersBetaApi
 * @extends {BaseAPI}
 */
var IAIOutliersBetaApi = /** @class */ (function (_super) {
    __extends(IAIOutliersBetaApi, _super);
    function IAIOutliersBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Export
     * @param {IAIOutliersBetaApiExportOutliersZipRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.exportOutliersZip = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).exportOutliersZip(requestParameters.type, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Summary
     * @param {IAIOutliersBetaApiGetIdentityOutlierSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.getIdentityOutlierSnapshots = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).getIdentityOutlierSnapshots(requestParameters.limit, requestParameters.offset, requestParameters.type, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Get Identity Outliers
     * @param {IAIOutliersBetaApiGetIdentityOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.getIdentityOutliers = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).getIdentityOutliers(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.type, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Latest Summary
     * @param {IAIOutliersBetaApiGetLatestIdentityOutlierSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.getLatestIdentityOutlierSnapshots = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).getLatestIdentityOutlierSnapshots(requestParameters.type, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier contibuting feature summary
     * @param {IAIOutliersBetaApiGetOutlierContributingFeatureSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.getOutlierContributingFeatureSummary = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).getOutlierContributingFeatureSummary(requestParameters.outlierFeatureId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier\'s contibuting features
     * @param {IAIOutliersBetaApiGetPeerGroupOutliersContributingFeaturesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.getPeerGroupOutliersContributingFeatures = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).getPeerGroupOutliersContributingFeatures(requestParameters.outlierId, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.includeTranslationMessages, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Ignore
     * @param {IAIOutliersBetaApiIgnoreIdentityOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.ignoreIdentityOutliers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).ignoreIdentityOutliers(requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Gets a list of access items associated with each identity outlier contributing feature
     * @param {IAIOutliersBetaApiListOutliersContributingFeatureAccessItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.listOutliersContributingFeatureAccessItems = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).listOutliersContributingFeatureAccessItems(requestParameters.outlierId, requestParameters.contributingFeatureName, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.accessType, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Unignore
     * @param {IAIOutliersBetaApiUnIgnoreIdentityOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    IAIOutliersBetaApi.prototype.unIgnoreIdentityOutliers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIOutliersBetaApiFp)(this.configuration).unIgnoreIdentityOutliers(requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAIOutliersBetaApi;
}(base_1.BaseAPI));
exports.IAIOutliersBetaApi = IAIOutliersBetaApi;
/**
 * IAIPeerGroupStrategiesBetaApi - axios parameter creator
 * @export
 */
var IAIPeerGroupStrategiesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
         * @summary Identity Outliers List
         * @param {string} strategy The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getPeerGroupOutliers: function (strategy, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'strategy' is not null or undefined
                            (0, common_1.assertParamExists)('getPeerGroupOutliers', 'strategy', strategy);
                            localVarPath = "/peer-group-strategies/{strategy}/identity-outliers"
                                .replace("{".concat("strategy", "}"), encodeURIComponent(String(strategy)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAIPeerGroupStrategiesBetaApiAxiosParamCreator = IAIPeerGroupStrategiesBetaApiAxiosParamCreator;
/**
 * IAIPeerGroupStrategiesBetaApi - functional programming interface
 * @export
 */
var IAIPeerGroupStrategiesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAIPeerGroupStrategiesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
         * @summary Identity Outliers List
         * @param {string} strategy The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getPeerGroupOutliers: function (strategy, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPeerGroupOutliers(strategy, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAIPeerGroupStrategiesBetaApiFp = IAIPeerGroupStrategiesBetaApiFp;
/**
 * IAIPeerGroupStrategiesBetaApi - factory interface
 * @export
 */
var IAIPeerGroupStrategiesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAIPeerGroupStrategiesBetaApiFp)(configuration);
    return {
        /**
         * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
         * @summary Identity Outliers List
         * @param {string} strategy The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getPeerGroupOutliers: function (strategy, limit, offset, count, axiosOptions) {
            return localVarFp.getPeerGroupOutliers(strategy, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAIPeerGroupStrategiesBetaApiFactory = IAIPeerGroupStrategiesBetaApiFactory;
/**
 * IAIPeerGroupStrategiesBetaApi - object-oriented interface
 * @export
 * @class IAIPeerGroupStrategiesBetaApi
 * @extends {BaseAPI}
 */
var IAIPeerGroupStrategiesBetaApi = /** @class */ (function (_super) {
    __extends(IAIPeerGroupStrategiesBetaApi, _super);
    function IAIPeerGroupStrategiesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
     * @summary Identity Outliers List
     * @param {IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof IAIPeerGroupStrategiesBetaApi
     */
    IAIPeerGroupStrategiesBetaApi.prototype.getPeerGroupOutliers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIPeerGroupStrategiesBetaApiFp)(this.configuration).getPeerGroupOutliers(requestParameters.strategy, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAIPeerGroupStrategiesBetaApi;
}(base_1.BaseAPI));
exports.IAIPeerGroupStrategiesBetaApi = IAIPeerGroupStrategiesBetaApi;
/**
 * IAIRecommendationsBetaApi - axios parameter creator
 * @export
 */
var IAIRecommendationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
         * @summary Returns a Recommendation Based on Object
         * @param {RecommendationRequestDtoBeta} recommendationRequestDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations: function (recommendationRequestDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'recommendationRequestDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('getRecommendations', 'recommendationRequestDtoBeta', recommendationRequestDtoBeta);
                            localVarPath = "/recommendations/request";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(recommendationRequestDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves configuration attributes used by certification recommendations.
         * @summary Get certification recommendation config values
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationsConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/recommendations/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Updates configuration attributes used by certification recommendations.
         * @summary Update certification recommendation config values
         * @param {RecommendationConfigDtoBeta} recommendationConfigDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendationsConfig: function (recommendationConfigDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'recommendationConfigDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateRecommendationsConfig', 'recommendationConfigDtoBeta', recommendationConfigDtoBeta);
                            localVarPath = "/recommendations/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(recommendationConfigDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAIRecommendationsBetaApiAxiosParamCreator = IAIRecommendationsBetaApiAxiosParamCreator;
/**
 * IAIRecommendationsBetaApi - functional programming interface
 * @export
 */
var IAIRecommendationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAIRecommendationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
         * @summary Returns a Recommendation Based on Object
         * @param {RecommendationRequestDtoBeta} recommendationRequestDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations: function (recommendationRequestDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecommendations(recommendationRequestDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves configuration attributes used by certification recommendations.
         * @summary Get certification recommendation config values
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationsConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRecommendationsConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Updates configuration attributes used by certification recommendations.
         * @summary Update certification recommendation config values
         * @param {RecommendationConfigDtoBeta} recommendationConfigDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendationsConfig: function (recommendationConfigDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateRecommendationsConfig(recommendationConfigDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAIRecommendationsBetaApiFp = IAIRecommendationsBetaApiFp;
/**
 * IAIRecommendationsBetaApi - factory interface
 * @export
 */
var IAIRecommendationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAIRecommendationsBetaApiFp)(configuration);
    return {
        /**
         * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
         * @summary Returns a Recommendation Based on Object
         * @param {RecommendationRequestDtoBeta} recommendationRequestDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations: function (recommendationRequestDtoBeta, axiosOptions) {
            return localVarFp.getRecommendations(recommendationRequestDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves configuration attributes used by certification recommendations.
         * @summary Get certification recommendation config values
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationsConfig: function (axiosOptions) {
            return localVarFp.getRecommendationsConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Updates configuration attributes used by certification recommendations.
         * @summary Update certification recommendation config values
         * @param {RecommendationConfigDtoBeta} recommendationConfigDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateRecommendationsConfig: function (recommendationConfigDtoBeta, axiosOptions) {
            return localVarFp.updateRecommendationsConfig(recommendationConfigDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAIRecommendationsBetaApiFactory = IAIRecommendationsBetaApiFactory;
/**
 * IAIRecommendationsBetaApi - object-oriented interface
 * @export
 * @class IAIRecommendationsBetaApi
 * @extends {BaseAPI}
 */
var IAIRecommendationsBetaApi = /** @class */ (function (_super) {
    __extends(IAIRecommendationsBetaApi, _super);
    function IAIRecommendationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
     * @summary Returns a Recommendation Based on Object
     * @param {IAIRecommendationsBetaApiGetRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRecommendationsBetaApi
     */
    IAIRecommendationsBetaApi.prototype.getRecommendations = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRecommendationsBetaApiFp)(this.configuration).getRecommendations(requestParameters.recommendationRequestDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves configuration attributes used by certification recommendations.
     * @summary Get certification recommendation config values
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRecommendationsBetaApi
     */
    IAIRecommendationsBetaApi.prototype.getRecommendationsConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.IAIRecommendationsBetaApiFp)(this.configuration).getRecommendationsConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Updates configuration attributes used by certification recommendations.
     * @summary Update certification recommendation config values
     * @param {IAIRecommendationsBetaApiUpdateRecommendationsConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRecommendationsBetaApi
     */
    IAIRecommendationsBetaApi.prototype.updateRecommendationsConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRecommendationsBetaApiFp)(this.configuration).updateRecommendationsConfig(requestParameters.recommendationConfigDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAIRecommendationsBetaApi;
}(base_1.BaseAPI));
exports.IAIRecommendationsBetaApi = IAIRecommendationsBetaApi;
/**
 * IAIRoleMiningBetaApi - axios parameter creator
 * @export
 */
var IAIRoleMiningBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This method starts a job to provision a potential role
         * @summary Create request to provision a potential role into an actual role.
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {number} [minEntitlementPopularity] Minimum popularity required for an entitlement to be included in the provisioned role.
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included in the provisioned role.
         * @param {RoleMiningPotentialRoleProvisionRequestBeta} [roleMiningPotentialRoleProvisionRequestBeta] Required information to create a new role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPotentialRoleProvisionRequest: function (sessionId, potentialRoleId, minEntitlementPopularity, includeCommonAccess, roleMiningPotentialRoleProvisionRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('createPotentialRoleProvisionRequest', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('createPotentialRoleProvisionRequest', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/provision"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (minEntitlementPopularity !== undefined) {
                                localVarQueryParameter['min-entitlement-popularity'] = minEntitlementPopularity;
                            }
                            if (includeCommonAccess !== undefined) {
                                localVarQueryParameter['include-common-access'] = includeCommonAccess;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleMiningPotentialRoleProvisionRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This submits a create role mining session request to the role mining application.
         * @summary Create a role mining session
         * @param {RoleMiningSessionDtoBeta} roleMiningSessionDtoBeta Role mining session parameters
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createRoleMiningSessions: function (roleMiningSessionDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleMiningSessionDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createRoleMiningSessions', 'roleMiningSessionDtoBeta', roleMiningSessionDtoBeta);
                            localVarPath = "/role-mining-sessions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleMiningSessionDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint downloads a completed export of information for a potential role in a role mining session.
         * @summary Export (download) details for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} exportId The id of a previously run export job for this potential role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        downloadRoleMiningPotentialRoleZip: function (sessionId, potentialRoleId, exportId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRoleMiningPotentialRoleZip', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRoleMiningPotentialRoleZip', 'potentialRoleId', potentialRoleId);
                            // verify required parameter 'exportId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRoleMiningPotentialRoleZip', 'exportId', exportId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}/download"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)))
                                .replace("{".concat("exportId", "}"), encodeURIComponent(String(exportId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
         * @summary Export (download) details for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRole: function (sessionId, potentialRoleId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
         * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {RoleMiningPotentialRoleExportRequestBeta} [roleMiningPotentialRoleExportRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRoleAsync: function (sessionId, potentialRoleId, roleMiningPotentialRoleExportRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRoleAsync', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRoleAsync', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleMiningPotentialRoleExportRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint retrieves information about the current status of a potential role export.
         * @summary Retrieve status of a potential role export job
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} exportId The id of a previously run export job for this potential role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRoleStatus: function (sessionId, potentialRoleId, exportId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRoleStatus', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRoleStatus', 'potentialRoleId', potentialRoleId);
                            // verify required parameter 'exportId' is not null or undefined
                            (0, common_1.assertParamExists)('exportRoleMiningPotentialRoleStatus', 'exportId', exportId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/export-async/{exportId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)))
                                .replace("{".concat("exportId", "}"), encodeURIComponent(String(exportId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns all potential role summaries that match the query parameters
         * @summary Retrieves all potential role summaries
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAllPotentialRoleSummaries: function (sorters, filters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/role-mining-potential-roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns entitlement popularity distribution for a potential role in a role mining session.
         * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementDistributionPotentialRole: function (sessionId, potentialRoleId, includeCommonAccess, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementDistributionPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementDistributionPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularity-distribution"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (includeCommonAccess !== undefined) {
                                localVarQueryParameter['includeCommonAccess'] = includeCommonAccess;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns entitlements for a potential role in a role mining session.
         * @summary Retrieves entitlements for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementsPotentialRole: function (sessionId, potentialRoleId, includeCommonAccess, sorters, filters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementsPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementsPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/entitlement-popularities"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (includeCommonAccess !== undefined) {
                                localVarQueryParameter['includeCommonAccess'] = includeCommonAccess;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns excluded entitlements for a potential role in a role mining session.
         * @summary Retrieves excluded entitlements for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getExcludedEntitlementsPotentialRole: function (sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getExcludedEntitlementsPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getExcludedEntitlementsPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/excluded-entitlements"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns identities for a potential role in a role mining session.
         * @summary Retrieves identities for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitiesPotentialRole: function (sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentitiesPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentitiesPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/identities"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns a specific potential role for a role mining session.
         * @summary Retrieve potential role in session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRole: function (sessionId, potentialRoleId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns the applications of a potential role for a role mining session.
         * @summary Retrieves the applications of a potential role for a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleApplications: function (sessionId, potentialRoleId, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRoleApplications', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRoleApplications', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}/applications"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
         * @summary Retrieves potential role source usage
         * @param {string} potentialRoleId A potential role id
         * @param {string} sourceId A source id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleSourceIdentityUsage: function (potentialRoleId, sourceId, sorters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRoleSourceIdentityUsage', 'potentialRoleId', potentialRoleId);
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRoleSourceIdentityUsage', 'sourceId', sourceId);
                            localVarPath = "/role-mining-potential-roles/{potentialRoleId}/sources/{sourceId}/identityUsage"
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)))
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns the potential role summaries for a role mining session.
         * @summary Retrieve session\'s potential role summaries
         * @param {string} sessionId The role mining session id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleSummaries: function (sessionId, sorters, filters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getPotentialRoleSummaries', 'sessionId', sessionId);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-role-summaries"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns a specific potential role.
         * @summary Retrieves a specific potential role
         * @param {string} potentialRoleId A potential role id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningPotentialRole: function (potentialRoleId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleMiningPotentialRole', 'potentialRoleId', potentialRoleId);
                            localVarPath = "/role-mining-potential-roles/{potentialRoleId}"
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The method retrieves a role mining session.
         * @summary Get a role mining session
         * @param {string} sessionId The role mining session id to be retrieved.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSession: function (sessionId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleMiningSession', 'sessionId', sessionId);
                            localVarPath = "/role-mining-sessions/{sessionId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns a role mining session status for a customer.
         * @summary Get role mining session status state
         * @param {string} sessionId The role mining session id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSessionStatus: function (sessionId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleMiningSessionStatus', 'sessionId', sessionId);
                            localVarPath = "/role-mining-sessions/{sessionId}/status"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns all role mining sessions that match the query parameters
         * @summary Retrieves all role mining sessions
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSessions: function (filters, sorters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/role-mining-sessions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns all saved potential roles (draft roles).
         * @summary Retrieves all saved potential roles
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSavedPotentialRoles: function (sorters, offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/role-mining-potential-roles/saved";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
         * @summary Update a potential role in session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId The potential role summary id
         * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchPotentialRole: function (sessionId, potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('patchPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('patchPotentialRole', 'potentialRoleId', potentialRoleId);
                            // verify required parameter 'patchPotentialRoleRequestInnerBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchPotentialRole', 'patchPotentialRoleRequestInnerBeta', patchPotentialRoleRequestInnerBeta);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-role-summaries/{potentialRoleId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(patchPotentialRoleRequestInnerBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
         * @summary Update a potential role
         * @param {string} potentialRoleId The potential role summary id
         * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleMiningPotentialRole: function (potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('patchRoleMiningPotentialRole', 'potentialRoleId', potentialRoleId);
                            // verify required parameter 'patchPotentialRoleRequestInnerBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchRoleMiningPotentialRole', 'patchPotentialRoleRequestInnerBeta', patchPotentialRoleRequestInnerBeta);
                            localVarPath = "/role-mining-potential-roles/{potentialRoleId}"
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(patchPotentialRoleRequestInnerBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
         * @summary Patch a role mining session
         * @param {string} sessionId The role mining session id to be patched
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleMiningSession: function (sessionId, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('patchRoleMiningSession', 'sessionId', sessionId);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchRoleMiningSession', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/role-mining-sessions/{sessionId}"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint adds or removes entitlements from an exclusion list for a potential role.
         * @summary Edit entitlements for a potential role to exclude some entitlements
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {RoleMiningPotentialRoleEditEntitlementsBeta} roleMiningPotentialRoleEditEntitlementsBeta Role mining session parameters
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateEntitlementsPotentialRole: function (sessionId, potentialRoleId, roleMiningPotentialRoleEditEntitlementsBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sessionId' is not null or undefined
                            (0, common_1.assertParamExists)('updateEntitlementsPotentialRole', 'sessionId', sessionId);
                            // verify required parameter 'potentialRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('updateEntitlementsPotentialRole', 'potentialRoleId', potentialRoleId);
                            // verify required parameter 'roleMiningPotentialRoleEditEntitlementsBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateEntitlementsPotentialRole', 'roleMiningPotentialRoleEditEntitlementsBeta', roleMiningPotentialRoleEditEntitlementsBeta);
                            localVarPath = "/role-mining-sessions/{sessionId}/potential-roles/{potentialRoleId}/edit-entitlements"
                                .replace("{".concat("sessionId", "}"), encodeURIComponent(String(sessionId)))
                                .replace("{".concat("potentialRoleId", "}"), encodeURIComponent(String(potentialRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleMiningPotentialRoleEditEntitlementsBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IAIRoleMiningBetaApiAxiosParamCreator = IAIRoleMiningBetaApiAxiosParamCreator;
/**
 * IAIRoleMiningBetaApi - functional programming interface
 * @export
 */
var IAIRoleMiningBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IAIRoleMiningBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method starts a job to provision a potential role
         * @summary Create request to provision a potential role into an actual role.
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {number} [minEntitlementPopularity] Minimum popularity required for an entitlement to be included in the provisioned role.
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included in the provisioned role.
         * @param {RoleMiningPotentialRoleProvisionRequestBeta} [roleMiningPotentialRoleProvisionRequestBeta] Required information to create a new role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPotentialRoleProvisionRequest: function (sessionId, potentialRoleId, minEntitlementPopularity, includeCommonAccess, roleMiningPotentialRoleProvisionRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPotentialRoleProvisionRequest(sessionId, potentialRoleId, minEntitlementPopularity, includeCommonAccess, roleMiningPotentialRoleProvisionRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This submits a create role mining session request to the role mining application.
         * @summary Create a role mining session
         * @param {RoleMiningSessionDtoBeta} roleMiningSessionDtoBeta Role mining session parameters
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createRoleMiningSessions: function (roleMiningSessionDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createRoleMiningSessions(roleMiningSessionDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint downloads a completed export of information for a potential role in a role mining session.
         * @summary Export (download) details for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} exportId The id of a previously run export job for this potential role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        downloadRoleMiningPotentialRoleZip: function (sessionId, potentialRoleId, exportId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.downloadRoleMiningPotentialRoleZip(sessionId, potentialRoleId, exportId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
         * @summary Export (download) details for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRole: function (sessionId, potentialRoleId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportRoleMiningPotentialRole(sessionId, potentialRoleId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
         * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {RoleMiningPotentialRoleExportRequestBeta} [roleMiningPotentialRoleExportRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRoleAsync: function (sessionId, potentialRoleId, roleMiningPotentialRoleExportRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportRoleMiningPotentialRoleAsync(sessionId, potentialRoleId, roleMiningPotentialRoleExportRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint retrieves information about the current status of a potential role export.
         * @summary Retrieve status of a potential role export job
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} exportId The id of a previously run export job for this potential role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRoleStatus: function (sessionId, potentialRoleId, exportId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportRoleMiningPotentialRoleStatus(sessionId, potentialRoleId, exportId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns all potential role summaries that match the query parameters
         * @summary Retrieves all potential role summaries
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAllPotentialRoleSummaries: function (sorters, filters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getAllPotentialRoleSummaries(sorters, filters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns entitlement popularity distribution for a potential role in a role mining session.
         * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementDistributionPotentialRole: function (sessionId, potentialRoleId, includeCommonAccess, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntitlementDistributionPotentialRole(sessionId, potentialRoleId, includeCommonAccess, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns entitlements for a potential role in a role mining session.
         * @summary Retrieves entitlements for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementsPotentialRole: function (sessionId, potentialRoleId, includeCommonAccess, sorters, filters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntitlementsPotentialRole(sessionId, potentialRoleId, includeCommonAccess, sorters, filters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns excluded entitlements for a potential role in a role mining session.
         * @summary Retrieves excluded entitlements for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getExcludedEntitlementsPotentialRole: function (sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getExcludedEntitlementsPotentialRole(sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns identities for a potential role in a role mining session.
         * @summary Retrieves identities for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitiesPotentialRole: function (sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentitiesPotentialRole(sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns a specific potential role for a role mining session.
         * @summary Retrieve potential role in session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRole: function (sessionId, potentialRoleId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPotentialRole(sessionId, potentialRoleId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns the applications of a potential role for a role mining session.
         * @summary Retrieves the applications of a potential role for a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleApplications: function (sessionId, potentialRoleId, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPotentialRoleApplications(sessionId, potentialRoleId, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
         * @summary Retrieves potential role source usage
         * @param {string} potentialRoleId A potential role id
         * @param {string} sourceId A source id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleSourceIdentityUsage: function (potentialRoleId, sourceId, sorters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPotentialRoleSourceIdentityUsage(potentialRoleId, sourceId, sorters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns the potential role summaries for a role mining session.
         * @summary Retrieve session\'s potential role summaries
         * @param {string} sessionId The role mining session id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleSummaries: function (sessionId, sorters, filters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPotentialRoleSummaries(sessionId, sorters, filters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns a specific potential role.
         * @summary Retrieves a specific potential role
         * @param {string} potentialRoleId A potential role id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningPotentialRole: function (potentialRoleId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleMiningPotentialRole(potentialRoleId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * The method retrieves a role mining session.
         * @summary Get a role mining session
         * @param {string} sessionId The role mining session id to be retrieved.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSession: function (sessionId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleMiningSession(sessionId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns a role mining session status for a customer.
         * @summary Get role mining session status state
         * @param {string} sessionId The role mining session id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSessionStatus: function (sessionId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleMiningSessionStatus(sessionId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns all role mining sessions that match the query parameters
         * @summary Retrieves all role mining sessions
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSessions: function (filters, sorters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleMiningSessions(filters, sorters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns all saved potential roles (draft roles).
         * @summary Retrieves all saved potential roles
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSavedPotentialRoles: function (sorters, offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSavedPotentialRoles(sorters, offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
         * @summary Update a potential role in session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId The potential role summary id
         * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchPotentialRole: function (sessionId, potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchPotentialRole(sessionId, potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
         * @summary Update a potential role
         * @param {string} potentialRoleId The potential role summary id
         * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleMiningPotentialRole: function (potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchRoleMiningPotentialRole(potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
         * @summary Patch a role mining session
         * @param {string} sessionId The role mining session id to be patched
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleMiningSession: function (sessionId, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchRoleMiningSession(sessionId, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint adds or removes entitlements from an exclusion list for a potential role.
         * @summary Edit entitlements for a potential role to exclude some entitlements
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {RoleMiningPotentialRoleEditEntitlementsBeta} roleMiningPotentialRoleEditEntitlementsBeta Role mining session parameters
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateEntitlementsPotentialRole: function (sessionId, potentialRoleId, roleMiningPotentialRoleEditEntitlementsBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateEntitlementsPotentialRole(sessionId, potentialRoleId, roleMiningPotentialRoleEditEntitlementsBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IAIRoleMiningBetaApiFp = IAIRoleMiningBetaApiFp;
/**
 * IAIRoleMiningBetaApi - factory interface
 * @export
 */
var IAIRoleMiningBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IAIRoleMiningBetaApiFp)(configuration);
    return {
        /**
         * This method starts a job to provision a potential role
         * @summary Create request to provision a potential role into an actual role.
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {number} [minEntitlementPopularity] Minimum popularity required for an entitlement to be included in the provisioned role.
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included in the provisioned role.
         * @param {RoleMiningPotentialRoleProvisionRequestBeta} [roleMiningPotentialRoleProvisionRequestBeta] Required information to create a new role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPotentialRoleProvisionRequest: function (sessionId, potentialRoleId, minEntitlementPopularity, includeCommonAccess, roleMiningPotentialRoleProvisionRequestBeta, axiosOptions) {
            return localVarFp.createPotentialRoleProvisionRequest(sessionId, potentialRoleId, minEntitlementPopularity, includeCommonAccess, roleMiningPotentialRoleProvisionRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This submits a create role mining session request to the role mining application.
         * @summary Create a role mining session
         * @param {RoleMiningSessionDtoBeta} roleMiningSessionDtoBeta Role mining session parameters
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createRoleMiningSessions: function (roleMiningSessionDtoBeta, axiosOptions) {
            return localVarFp.createRoleMiningSessions(roleMiningSessionDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint downloads a completed export of information for a potential role in a role mining session.
         * @summary Export (download) details for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} exportId The id of a previously run export job for this potential role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        downloadRoleMiningPotentialRoleZip: function (sessionId, potentialRoleId, exportId, axiosOptions) {
            return localVarFp.downloadRoleMiningPotentialRoleZip(sessionId, potentialRoleId, exportId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
         * @summary Export (download) details for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRole: function (sessionId, potentialRoleId, axiosOptions) {
            return localVarFp.exportRoleMiningPotentialRole(sessionId, potentialRoleId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
         * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {RoleMiningPotentialRoleExportRequestBeta} [roleMiningPotentialRoleExportRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRoleAsync: function (sessionId, potentialRoleId, roleMiningPotentialRoleExportRequestBeta, axiosOptions) {
            return localVarFp.exportRoleMiningPotentialRoleAsync(sessionId, potentialRoleId, roleMiningPotentialRoleExportRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint retrieves information about the current status of a potential role export.
         * @summary Retrieve status of a potential role export job
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} exportId The id of a previously run export job for this potential role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportRoleMiningPotentialRoleStatus: function (sessionId, potentialRoleId, exportId, axiosOptions) {
            return localVarFp.exportRoleMiningPotentialRoleStatus(sessionId, potentialRoleId, exportId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns all potential role summaries that match the query parameters
         * @summary Retrieves all potential role summaries
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getAllPotentialRoleSummaries: function (sorters, filters, offset, limit, count, axiosOptions) {
            return localVarFp.getAllPotentialRoleSummaries(sorters, filters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns entitlement popularity distribution for a potential role in a role mining session.
         * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementDistributionPotentialRole: function (sessionId, potentialRoleId, includeCommonAccess, axiosOptions) {
            return localVarFp.getEntitlementDistributionPotentialRole(sessionId, potentialRoleId, includeCommonAccess, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns entitlements for a potential role in a role mining session.
         * @summary Retrieves entitlements for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementsPotentialRole: function (sessionId, potentialRoleId, includeCommonAccess, sorters, filters, offset, limit, count, axiosOptions) {
            return localVarFp.getEntitlementsPotentialRole(sessionId, potentialRoleId, includeCommonAccess, sorters, filters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns excluded entitlements for a potential role in a role mining session.
         * @summary Retrieves excluded entitlements for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getExcludedEntitlementsPotentialRole: function (sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions) {
            return localVarFp.getExcludedEntitlementsPotentialRole(sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns identities for a potential role in a role mining session.
         * @summary Retrieves identities for a potential role in a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitiesPotentialRole: function (sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions) {
            return localVarFp.getIdentitiesPotentialRole(sessionId, potentialRoleId, sorters, filters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns a specific potential role for a role mining session.
         * @summary Retrieve potential role in session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRole: function (sessionId, potentialRoleId, axiosOptions) {
            return localVarFp.getPotentialRole(sessionId, potentialRoleId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns the applications of a potential role for a role mining session.
         * @summary Retrieves the applications of a potential role for a role mining session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleApplications: function (sessionId, potentialRoleId, offset, limit, count, axiosOptions) {
            return localVarFp.getPotentialRoleApplications(sessionId, potentialRoleId, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
         * @summary Retrieves potential role source usage
         * @param {string} potentialRoleId A potential role id
         * @param {string} sourceId A source id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleSourceIdentityUsage: function (potentialRoleId, sourceId, sorters, offset, limit, count, axiosOptions) {
            return localVarFp.getPotentialRoleSourceIdentityUsage(potentialRoleId, sourceId, sorters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns the potential role summaries for a role mining session.
         * @summary Retrieve session\'s potential role summaries
         * @param {string} sessionId The role mining session id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPotentialRoleSummaries: function (sessionId, sorters, filters, offset, limit, count, axiosOptions) {
            return localVarFp.getPotentialRoleSummaries(sessionId, sorters, filters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns a specific potential role.
         * @summary Retrieves a specific potential role
         * @param {string} potentialRoleId A potential role id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningPotentialRole: function (potentialRoleId, axiosOptions) {
            return localVarFp.getRoleMiningPotentialRole(potentialRoleId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The method retrieves a role mining session.
         * @summary Get a role mining session
         * @param {string} sessionId The role mining session id to be retrieved.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSession: function (sessionId, axiosOptions) {
            return localVarFp.getRoleMiningSession(sessionId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns a role mining session status for a customer.
         * @summary Get role mining session status state
         * @param {string} sessionId The role mining session id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSessionStatus: function (sessionId, axiosOptions) {
            return localVarFp.getRoleMiningSessionStatus(sessionId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns all role mining sessions that match the query parameters
         * @summary Retrieves all role mining sessions
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleMiningSessions: function (filters, sorters, offset, limit, count, axiosOptions) {
            return localVarFp.getRoleMiningSessions(filters, sorters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns all saved potential roles (draft roles).
         * @summary Retrieves all saved potential roles
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSavedPotentialRoles: function (sorters, offset, limit, count, axiosOptions) {
            return localVarFp.getSavedPotentialRoles(sorters, offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
         * @summary Update a potential role in session
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId The potential role summary id
         * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchPotentialRole: function (sessionId, potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions) {
            return localVarFp.patchPotentialRole(sessionId, potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
         * @summary Update a potential role
         * @param {string} potentialRoleId The potential role summary id
         * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleMiningPotentialRole: function (potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions) {
            return localVarFp.patchRoleMiningPotentialRole(potentialRoleId, patchPotentialRoleRequestInnerBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
         * @summary Patch a role mining session
         * @param {string} sessionId The role mining session id to be patched
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRoleMiningSession: function (sessionId, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchRoleMiningSession(sessionId, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint adds or removes entitlements from an exclusion list for a potential role.
         * @summary Edit entitlements for a potential role to exclude some entitlements
         * @param {string} sessionId The role mining session id
         * @param {string} potentialRoleId A potential role id in a role mining session
         * @param {RoleMiningPotentialRoleEditEntitlementsBeta} roleMiningPotentialRoleEditEntitlementsBeta Role mining session parameters
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateEntitlementsPotentialRole: function (sessionId, potentialRoleId, roleMiningPotentialRoleEditEntitlementsBeta, axiosOptions) {
            return localVarFp.updateEntitlementsPotentialRole(sessionId, potentialRoleId, roleMiningPotentialRoleEditEntitlementsBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IAIRoleMiningBetaApiFactory = IAIRoleMiningBetaApiFactory;
/**
 * IAIRoleMiningBetaApi - object-oriented interface
 * @export
 * @class IAIRoleMiningBetaApi
 * @extends {BaseAPI}
 */
var IAIRoleMiningBetaApi = /** @class */ (function (_super) {
    __extends(IAIRoleMiningBetaApi, _super);
    function IAIRoleMiningBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This method starts a job to provision a potential role
     * @summary Create request to provision a potential role into an actual role.
     * @param {IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.createPotentialRoleProvisionRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).createPotentialRoleProvisionRequest(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.minEntitlementPopularity, requestParameters.includeCommonAccess, requestParameters.roleMiningPotentialRoleProvisionRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This submits a create role mining session request to the role mining application.
     * @summary Create a role mining session
     * @param {IAIRoleMiningBetaApiCreateRoleMiningSessionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.createRoleMiningSessions = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).createRoleMiningSessions(requestParameters.roleMiningSessionDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint downloads a completed export of information for a potential role in a role mining session.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZipRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.downloadRoleMiningPotentialRoleZip = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).downloadRoleMiningPotentialRoleZip(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.exportId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiExportRoleMiningPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.exportRoleMiningPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).exportRoleMiningPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
     * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
     * @param {IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.exportRoleMiningPotentialRoleAsync = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).exportRoleMiningPotentialRoleAsync(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.roleMiningPotentialRoleExportRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint retrieves information about the current status of a potential role export.
     * @summary Retrieve status of a potential role export job
     * @param {IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.exportRoleMiningPotentialRoleStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).exportRoleMiningPotentialRoleStatus(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.exportId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns all potential role summaries that match the query parameters
     * @summary Retrieves all potential role summaries
     * @param {IAIRoleMiningBetaApiGetAllPotentialRoleSummariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getAllPotentialRoleSummaries = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getAllPotentialRoleSummaries(requestParameters.sorters, requestParameters.filters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns entitlement popularity distribution for a potential role in a role mining session.
     * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getEntitlementDistributionPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getEntitlementDistributionPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.includeCommonAccess, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns entitlements for a potential role in a role mining session.
     * @summary Retrieves entitlements for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetEntitlementsPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getEntitlementsPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getEntitlementsPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.includeCommonAccess, requestParameters.sorters, requestParameters.filters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns excluded entitlements for a potential role in a role mining session.
     * @summary Retrieves excluded entitlements for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getExcludedEntitlementsPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getExcludedEntitlementsPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.sorters, requestParameters.filters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns identities for a potential role in a role mining session.
     * @summary Retrieves identities for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetIdentitiesPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getIdentitiesPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getIdentitiesPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.sorters, requestParameters.filters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns a specific potential role for a role mining session.
     * @summary Retrieve potential role in session
     * @param {IAIRoleMiningBetaApiGetPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns the applications of a potential role for a role mining session.
     * @summary Retrieves the applications of a potential role for a role mining session
     * @param {IAIRoleMiningBetaApiGetPotentialRoleApplicationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getPotentialRoleApplications = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getPotentialRoleApplications(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
     * @summary Retrieves potential role source usage
     * @param {IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsageRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getPotentialRoleSourceIdentityUsage = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getPotentialRoleSourceIdentityUsage(requestParameters.potentialRoleId, requestParameters.sourceId, requestParameters.sorters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns the potential role summaries for a role mining session.
     * @summary Retrieve session\'s potential role summaries
     * @param {IAIRoleMiningBetaApiGetPotentialRoleSummariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getPotentialRoleSummaries = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getPotentialRoleSummaries(requestParameters.sessionId, requestParameters.sorters, requestParameters.filters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns a specific potential role.
     * @summary Retrieves a specific potential role
     * @param {IAIRoleMiningBetaApiGetRoleMiningPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getRoleMiningPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getRoleMiningPotentialRole(requestParameters.potentialRoleId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The method retrieves a role mining session.
     * @summary Get a role mining session
     * @param {IAIRoleMiningBetaApiGetRoleMiningSessionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getRoleMiningSession = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getRoleMiningSession(requestParameters.sessionId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns a role mining session status for a customer.
     * @summary Get role mining session status state
     * @param {IAIRoleMiningBetaApiGetRoleMiningSessionStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getRoleMiningSessionStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getRoleMiningSessionStatus(requestParameters.sessionId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns all role mining sessions that match the query parameters
     * @summary Retrieves all role mining sessions
     * @param {IAIRoleMiningBetaApiGetRoleMiningSessionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getRoleMiningSessions = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getRoleMiningSessions(requestParameters.filters, requestParameters.sorters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns all saved potential roles (draft roles).
     * @summary Retrieves all saved potential roles
     * @param {IAIRoleMiningBetaApiGetSavedPotentialRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.getSavedPotentialRoles = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).getSavedPotentialRoles(requestParameters.sorters, requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role in session
     * @param {IAIRoleMiningBetaApiPatchPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.patchPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).patchPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.patchPotentialRoleRequestInnerBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role
     * @param {IAIRoleMiningBetaApiPatchRoleMiningPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.patchRoleMiningPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).patchRoleMiningPotentialRole(requestParameters.potentialRoleId, requestParameters.patchPotentialRoleRequestInnerBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
     * @summary Patch a role mining session
     * @param {IAIRoleMiningBetaApiPatchRoleMiningSessionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.patchRoleMiningSession = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).patchRoleMiningSession(requestParameters.sessionId, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint adds or removes entitlements from an exclusion list for a potential role.
     * @summary Edit entitlements for a potential role to exclude some entitlements
     * @param {IAIRoleMiningBetaApiUpdateEntitlementsPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    IAIRoleMiningBetaApi.prototype.updateEntitlementsPotentialRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IAIRoleMiningBetaApiFp)(this.configuration).updateEntitlementsPotentialRole(requestParameters.sessionId, requestParameters.potentialRoleId, requestParameters.roleMiningPotentialRoleEditEntitlementsBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IAIRoleMiningBetaApi;
}(base_1.BaseAPI));
exports.IAIRoleMiningBetaApi = IAIRoleMiningBetaApi;
/**
 * IconsBetaApi - axios parameter creator
 * @export
 */
var IconsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete an icon
         * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
         * @param {string} objectId Object id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIcon: function (objectType, objectId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'objectType' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIcon', 'objectType', objectType);
                            // verify required parameter 'objectId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIcon', 'objectId', objectId);
                            localVarPath = "/icons/{objectType}/{objectId}"
                                .replace("{".concat("objectType", "}"), encodeURIComponent(String(objectType)))
                                .replace("{".concat("objectId", "}"), encodeURIComponent(String(objectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update an icon
         * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
         * @param {string} objectId Object id.
         * @param {any} image file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setIcon: function (objectType, objectId, image, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'objectType' is not null or undefined
                            (0, common_1.assertParamExists)('setIcon', 'objectType', objectType);
                            // verify required parameter 'objectId' is not null or undefined
                            (0, common_1.assertParamExists)('setIcon', 'objectId', objectId);
                            // verify required parameter 'image' is not null or undefined
                            (0, common_1.assertParamExists)('setIcon', 'image', image);
                            localVarPath = "/icons/{objectType}/{objectId}"
                                .replace("{".concat("objectType", "}"), encodeURIComponent(String(objectType)))
                                .replace("{".concat("objectId", "}"), encodeURIComponent(String(objectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (image !== undefined) {
                                localVarFormParams.append('image', image);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IconsBetaApiAxiosParamCreator = IconsBetaApiAxiosParamCreator;
/**
 * IconsBetaApi - functional programming interface
 * @export
 */
var IconsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IconsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete an icon
         * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
         * @param {string} objectId Object id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIcon: function (objectType, objectId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIcon(objectType, objectId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update an icon
         * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
         * @param {string} objectId Object id.
         * @param {any} image file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setIcon: function (objectType, objectId, image, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setIcon(objectType, objectId, image, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IconsBetaApiFp = IconsBetaApiFp;
/**
 * IconsBetaApi - factory interface
 * @export
 */
var IconsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IconsBetaApiFp)(configuration);
    return {
        /**
         * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete an icon
         * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
         * @param {string} objectId Object id.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIcon: function (objectType, objectId, axiosOptions) {
            return localVarFp.deleteIcon(objectType, objectId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update an icon
         * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
         * @param {string} objectId Object id.
         * @param {any} image file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setIcon: function (objectType, objectId, image, axiosOptions) {
            return localVarFp.setIcon(objectType, objectId, image, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IconsBetaApiFactory = IconsBetaApiFactory;
/**
 * IconsBetaApi - object-oriented interface
 * @export
 * @class IconsBetaApi
 * @extends {BaseAPI}
 */
var IconsBetaApi = /** @class */ (function (_super) {
    __extends(IconsBetaApi, _super);
    function IconsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an icon
     * @param {IconsBetaApiDeleteIconRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IconsBetaApi
     */
    IconsBetaApi.prototype.deleteIcon = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IconsBetaApiFp)(this.configuration).deleteIcon(requestParameters.objectType, requestParameters.objectId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update an icon
     * @param {IconsBetaApiSetIconRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IconsBetaApi
     */
    IconsBetaApi.prototype.setIcon = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IconsBetaApiFp)(this.configuration).setIcon(requestParameters.objectType, requestParameters.objectId, requestParameters.image, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IconsBetaApi;
}(base_1.BaseAPI));
exports.IconsBetaApi = IconsBetaApi;
/**
 * IdentitiesBetaApi - axios parameter creator
 * @export
 */
var IdentitiesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * The API returns successful response if the requested identity was deleted.
         * @summary Delete identity
         * @param {string} id Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentity: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIdentity', 'id', id);
                            localVarPath = "/identities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a single identity using the Identity ID.
         * @summary Identity Details
         * @param {string} id Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentity', 'id', id);
                            localVarPath = "/identities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
         * @summary Get ownership details
         * @param {string} identityId Identity ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOwnershipDetails: function (identityId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityOwnershipDetails', 'identityId', identityId);
                            localVarPath = "/identities/{identityId}/ownership"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Role assignment details
         * @param {string} identityId Identity Id
         * @param {string} assignmentId Assignment Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignment: function (identityId, assignmentId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleAssignment', 'identityId', identityId);
                            // verify required parameter 'assignmentId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleAssignment', 'assignmentId', assignmentId);
                            localVarPath = "/identities/{identityId}/role-assignments/{assignmentId}"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)))
                                .replace("{".concat("assignmentId", "}"), encodeURIComponent(String(assignmentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
         * @summary List role assignments
         * @param {string} identityId Identity Id to get the role assignments for
         * @param {string} [roleId] Role Id to filter the role assignments with
         * @param {string} [roleName] Role name to filter the role assignments with
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignments: function (identityId, roleId, roleName, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleAssignments', 'identityId', identityId);
                            localVarPath = "/identities/{identityId}/role-assignments"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (roleId !== undefined) {
                                localVarQueryParameter['roleId'] = roleId;
                            }
                            if (roleName !== undefined) {
                                localVarQueryParameter['roleName'] = roleName;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of identities.
         * @summary List Identities
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
         * @param {'CORRELATED_ONLY' | 'NONE'} [defaultFilter] Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities: function (filters, sorters, defaultFilter, count, limit, offset, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/identities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (defaultFilter !== undefined) {
                                localVarQueryParameter['defaultFilter'] = defaultFilter;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
         * @summary Reset an identity
         * @param {string} identityId Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        resetIdentity: function (identityId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('resetIdentity', 'identityId', identityId);
                            localVarPath = "/identities/{id}/reset"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Send password reset email
         * @param {SendAccountVerificationRequestBeta} sendAccountVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendIdentityVerificationAccountToken: function (sendAccountVerificationRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sendAccountVerificationRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('sendIdentityVerificationAccountToken', 'sendAccountVerificationRequestBeta', sendAccountVerificationRequestBeta);
                            localVarPath = "/identities/{id}/verification/account/send";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sendAccountVerificationRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Invite identities to register
         * @param {InviteIdentitiesRequestBeta} inviteIdentitiesRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startIdentitiesInvite: function (inviteIdentitiesRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'inviteIdentitiesRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('startIdentitiesInvite', 'inviteIdentitiesRequestBeta', inviteIdentitiesRequestBeta);
                            localVarPath = "/identities/invite";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(inviteIdentitiesRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Process a list of identityIds
         * @param {ProcessIdentitiesRequestBeta} processIdentitiesRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startIdentityProcessing: function (processIdentitiesRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'processIdentitiesRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('startIdentityProcessing', 'processIdentitiesRequestBeta', processIdentitiesRequestBeta);
                            localVarPath = "/identities/process";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(processIdentitiesRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Attribute synchronization for single identity.
         * @param {string} identityId The Identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        synchronizeAttributesForIdentity: function (identityId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('synchronizeAttributesForIdentity', 'identityId', identityId);
                            localVarPath = "/identities/{identityId}/synchronize-attributes"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IdentitiesBetaApiAxiosParamCreator = IdentitiesBetaApiAxiosParamCreator;
/**
 * IdentitiesBetaApi - functional programming interface
 * @export
 */
var IdentitiesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IdentitiesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * The API returns successful response if the requested identity was deleted.
         * @summary Delete identity
         * @param {string} id Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentity: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIdentity(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a single identity using the Identity ID.
         * @summary Identity Details
         * @param {string} id Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentity(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
         * @summary Get ownership details
         * @param {string} identityId Identity ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOwnershipDetails: function (identityId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityOwnershipDetails(identityId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Role assignment details
         * @param {string} identityId Identity Id
         * @param {string} assignmentId Assignment Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignment: function (identityId, assignmentId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleAssignment(identityId, assignmentId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
         * @summary List role assignments
         * @param {string} identityId Identity Id to get the role assignments for
         * @param {string} [roleId] Role Id to filter the role assignments with
         * @param {string} [roleName] Role name to filter the role assignments with
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignments: function (identityId, roleId, roleName, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleAssignments(identityId, roleId, roleName, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of identities.
         * @summary List Identities
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
         * @param {'CORRELATED_ONLY' | 'NONE'} [defaultFilter] Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities: function (filters, sorters, defaultFilter, count, limit, offset, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listIdentities(filters, sorters, defaultFilter, count, limit, offset, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
         * @summary Reset an identity
         * @param {string} identityId Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        resetIdentity: function (identityId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.resetIdentity(identityId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Send password reset email
         * @param {SendAccountVerificationRequestBeta} sendAccountVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendIdentityVerificationAccountToken: function (sendAccountVerificationRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendIdentityVerificationAccountToken(sendAccountVerificationRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Invite identities to register
         * @param {InviteIdentitiesRequestBeta} inviteIdentitiesRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startIdentitiesInvite: function (inviteIdentitiesRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startIdentitiesInvite(inviteIdentitiesRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Process a list of identityIds
         * @param {ProcessIdentitiesRequestBeta} processIdentitiesRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startIdentityProcessing: function (processIdentitiesRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startIdentityProcessing(processIdentitiesRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Attribute synchronization for single identity.
         * @param {string} identityId The Identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        synchronizeAttributesForIdentity: function (identityId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.synchronizeAttributesForIdentity(identityId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IdentitiesBetaApiFp = IdentitiesBetaApiFp;
/**
 * IdentitiesBetaApi - factory interface
 * @export
 */
var IdentitiesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IdentitiesBetaApiFp)(configuration);
    return {
        /**
         * The API returns successful response if the requested identity was deleted.
         * @summary Delete identity
         * @param {string} id Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentity: function (id, axiosOptions) {
            return localVarFp.deleteIdentity(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a single identity using the Identity ID.
         * @summary Identity Details
         * @param {string} id Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity: function (id, axiosOptions) {
            return localVarFp.getIdentity(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
         * @summary Get ownership details
         * @param {string} identityId Identity ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityOwnershipDetails: function (identityId, axiosOptions) {
            return localVarFp.getIdentityOwnershipDetails(identityId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Role assignment details
         * @param {string} identityId Identity Id
         * @param {string} assignmentId Assignment Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignment: function (identityId, assignmentId, axiosOptions) {
            return localVarFp.getRoleAssignment(identityId, assignmentId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
         * @summary List role assignments
         * @param {string} identityId Identity Id to get the role assignments for
         * @param {string} [roleId] Role Id to filter the role assignments with
         * @param {string} [roleName] Role name to filter the role assignments with
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignments: function (identityId, roleId, roleName, axiosOptions) {
            return localVarFp.getRoleAssignments(identityId, roleId, roleName, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of identities.
         * @summary List Identities
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
         * @param {'CORRELATED_ONLY' | 'NONE'} [defaultFilter] Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentities: function (filters, sorters, defaultFilter, count, limit, offset, axiosOptions) {
            return localVarFp.listIdentities(filters, sorters, defaultFilter, count, limit, offset, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
         * @summary Reset an identity
         * @param {string} identityId Identity Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        resetIdentity: function (identityId, axiosOptions) {
            return localVarFp.resetIdentity(identityId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Send password reset email
         * @param {SendAccountVerificationRequestBeta} sendAccountVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendIdentityVerificationAccountToken: function (sendAccountVerificationRequestBeta, axiosOptions) {
            return localVarFp.sendIdentityVerificationAccountToken(sendAccountVerificationRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Invite identities to register
         * @param {InviteIdentitiesRequestBeta} inviteIdentitiesRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startIdentitiesInvite: function (inviteIdentitiesRequestBeta, axiosOptions) {
            return localVarFp.startIdentitiesInvite(inviteIdentitiesRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Process a list of identityIds
         * @param {ProcessIdentitiesRequestBeta} processIdentitiesRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startIdentityProcessing: function (processIdentitiesRequestBeta, axiosOptions) {
            return localVarFp.startIdentityProcessing(processIdentitiesRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Attribute synchronization for single identity.
         * @param {string} identityId The Identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        synchronizeAttributesForIdentity: function (identityId, axiosOptions) {
            return localVarFp.synchronizeAttributesForIdentity(identityId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IdentitiesBetaApiFactory = IdentitiesBetaApiFactory;
/**
 * IdentitiesBetaApi - object-oriented interface
 * @export
 * @class IdentitiesBetaApi
 * @extends {BaseAPI}
 */
var IdentitiesBetaApi = /** @class */ (function (_super) {
    __extends(IdentitiesBetaApi, _super);
    function IdentitiesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The API returns successful response if the requested identity was deleted.
     * @summary Delete identity
     * @param {IdentitiesBetaApiDeleteIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.deleteIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).deleteIdentity(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a single identity using the Identity ID.
     * @summary Identity Details
     * @param {IdentitiesBetaApiGetIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.getIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).getIdentity(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
     * @summary Get ownership details
     * @param {IdentitiesBetaApiGetIdentityOwnershipDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.getIdentityOwnershipDetails = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).getIdentityOwnershipDetails(requestParameters.identityId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Role assignment details
     * @param {IdentitiesBetaApiGetRoleAssignmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.getRoleAssignment = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).getRoleAssignment(requestParameters.identityId, requestParameters.assignmentId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
     * @summary List role assignments
     * @param {IdentitiesBetaApiGetRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.getRoleAssignments = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).getRoleAssignments(requestParameters.identityId, requestParameters.roleId, requestParameters.roleName, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of identities.
     * @summary List Identities
     * @param {IdentitiesBetaApiListIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.listIdentities = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).listIdentities(requestParameters.filters, requestParameters.sorters, requestParameters.defaultFilter, requestParameters.count, requestParameters.limit, requestParameters.offset, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
     * @summary Reset an identity
     * @param {IdentitiesBetaApiResetIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.resetIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).resetIdentity(requestParameters.identityId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Send password reset email
     * @param {IdentitiesBetaApiSendIdentityVerificationAccountTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.sendIdentityVerificationAccountToken = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).sendIdentityVerificationAccountToken(requestParameters.sendAccountVerificationRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Invite identities to register
     * @param {IdentitiesBetaApiStartIdentitiesInviteRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.startIdentitiesInvite = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).startIdentitiesInvite(requestParameters.inviteIdentitiesRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Process a list of identityIds
     * @param {IdentitiesBetaApiStartIdentityProcessingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.startIdentityProcessing = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).startIdentityProcessing(requestParameters.processIdentitiesRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Attribute synchronization for single identity.
     * @param {IdentitiesBetaApiSynchronizeAttributesForIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    IdentitiesBetaApi.prototype.synchronizeAttributesForIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentitiesBetaApiFp)(this.configuration).synchronizeAttributesForIdentity(requestParameters.identityId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IdentitiesBetaApi;
}(base_1.BaseAPI));
exports.IdentitiesBetaApi = IdentitiesBetaApi;
/**
 * IdentityAttributesBetaApi - axios parameter creator
 * @export
 */
var IdentityAttributesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Identity Attribute
         * @param {IdentityAttributeBeta} identityAttributeBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityAttribute: function (identityAttributeBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityAttributeBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createIdentityAttribute', 'identityAttributeBeta', identityAttributeBeta);
                            localVarPath = "/identity-attributes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityAttributeBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityAttribute: function (name, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIdentityAttribute', 'name', name);
                            localVarPath = "/identity-attributes/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Bulk delete Identity Attributes
         * @param {IdentityAttributeNamesBeta} identityAttributeNamesBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityAttributesInBulk: function (identityAttributeNamesBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityAttributeNamesBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIdentityAttributesInBulk', 'identityAttributeNamesBeta', identityAttributeNamesBeta);
                            localVarPath = "/identity-attributes/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityAttributeNamesBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets an identity attribute for a given technical name.
         * @summary Get Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityAttribute: function (name, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityAttribute', 'name', name);
                            localVarPath = "/identity-attributes/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a collection of identity attributes.
         * @summary List Identity Attributes
         * @param {boolean} [includeSystem] Include \&#39;system\&#39; attributes in the response.
         * @param {boolean} [includeSilent] Include \&#39;silent\&#39; attributes in the response.
         * @param {boolean} [searchableOnly] Include only \&#39;searchable\&#39; attributes in the response.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityAttributes: function (includeSystem, includeSilent, searchableOnly, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/identity-attributes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (includeSystem !== undefined) {
                                localVarQueryParameter['includeSystem'] = includeSystem;
                            }
                            if (includeSilent !== undefined) {
                                localVarQueryParameter['includeSilent'] = includeSilent;
                            }
                            if (searchableOnly !== undefined) {
                                localVarQueryParameter['searchableOnly'] = searchableOnly;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {IdentityAttributeBeta} identityAttributeBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putIdentityAttribute: function (name, identityAttributeBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('putIdentityAttribute', 'name', name);
                            // verify required parameter 'identityAttributeBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putIdentityAttribute', 'identityAttributeBeta', identityAttributeBeta);
                            localVarPath = "/identity-attributes/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityAttributeBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IdentityAttributesBetaApiAxiosParamCreator = IdentityAttributesBetaApiAxiosParamCreator;
/**
 * IdentityAttributesBetaApi - functional programming interface
 * @export
 */
var IdentityAttributesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IdentityAttributesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Identity Attribute
         * @param {IdentityAttributeBeta} identityAttributeBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityAttribute: function (identityAttributeBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createIdentityAttribute(identityAttributeBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityAttribute: function (name, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIdentityAttribute(name, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Bulk delete Identity Attributes
         * @param {IdentityAttributeNamesBeta} identityAttributeNamesBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityAttributesInBulk: function (identityAttributeNamesBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIdentityAttributesInBulk(identityAttributeNamesBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets an identity attribute for a given technical name.
         * @summary Get Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityAttribute: function (name, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityAttribute(name, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a collection of identity attributes.
         * @summary List Identity Attributes
         * @param {boolean} [includeSystem] Include \&#39;system\&#39; attributes in the response.
         * @param {boolean} [includeSilent] Include \&#39;silent\&#39; attributes in the response.
         * @param {boolean} [searchableOnly] Include only \&#39;searchable\&#39; attributes in the response.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityAttributes: function (includeSystem, includeSilent, searchableOnly, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listIdentityAttributes(includeSystem, includeSilent, searchableOnly, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {IdentityAttributeBeta} identityAttributeBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putIdentityAttribute: function (name, identityAttributeBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putIdentityAttribute(name, identityAttributeBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IdentityAttributesBetaApiFp = IdentityAttributesBetaApiFp;
/**
 * IdentityAttributesBetaApi - factory interface
 * @export
 */
var IdentityAttributesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IdentityAttributesBetaApiFp)(configuration);
    return {
        /**
         * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Identity Attribute
         * @param {IdentityAttributeBeta} identityAttributeBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityAttribute: function (identityAttributeBeta, axiosOptions) {
            return localVarFp.createIdentityAttribute(identityAttributeBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityAttribute: function (name, axiosOptions) {
            return localVarFp.deleteIdentityAttribute(name, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Bulk delete Identity Attributes
         * @param {IdentityAttributeNamesBeta} identityAttributeNamesBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityAttributesInBulk: function (identityAttributeNamesBeta, axiosOptions) {
            return localVarFp.deleteIdentityAttributesInBulk(identityAttributeNamesBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets an identity attribute for a given technical name.
         * @summary Get Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityAttribute: function (name, axiosOptions) {
            return localVarFp.getIdentityAttribute(name, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a collection of identity attributes.
         * @summary List Identity Attributes
         * @param {boolean} [includeSystem] Include \&#39;system\&#39; attributes in the response.
         * @param {boolean} [includeSilent] Include \&#39;silent\&#39; attributes in the response.
         * @param {boolean} [searchableOnly] Include only \&#39;searchable\&#39; attributes in the response.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityAttributes: function (includeSystem, includeSilent, searchableOnly, count, axiosOptions) {
            return localVarFp.listIdentityAttributes(includeSystem, includeSilent, searchableOnly, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Identity Attribute
         * @param {string} name The attribute\&#39;s technical name.
         * @param {IdentityAttributeBeta} identityAttributeBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putIdentityAttribute: function (name, identityAttributeBeta, axiosOptions) {
            return localVarFp.putIdentityAttribute(name, identityAttributeBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IdentityAttributesBetaApiFactory = IdentityAttributesBetaApiFactory;
/**
 * IdentityAttributesBetaApi - object-oriented interface
 * @export
 * @class IdentityAttributesBetaApi
 * @extends {BaseAPI}
 */
var IdentityAttributesBetaApi = /** @class */ (function (_super) {
    __extends(IdentityAttributesBetaApi, _super);
    function IdentityAttributesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Identity Attribute
     * @param {IdentityAttributesBetaApiCreateIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    IdentityAttributesBetaApi.prototype.createIdentityAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityAttributesBetaApiFp)(this.configuration).createIdentityAttribute(requestParameters.identityAttributeBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Identity Attribute
     * @param {IdentityAttributesBetaApiDeleteIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    IdentityAttributesBetaApi.prototype.deleteIdentityAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityAttributesBetaApiFp)(this.configuration).deleteIdentityAttribute(requestParameters.name, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Bulk delete Identity Attributes
     * @param {IdentityAttributesBetaApiDeleteIdentityAttributesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    IdentityAttributesBetaApi.prototype.deleteIdentityAttributesInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityAttributesBetaApiFp)(this.configuration).deleteIdentityAttributesInBulk(requestParameters.identityAttributeNamesBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets an identity attribute for a given technical name.
     * @summary Get Identity Attribute
     * @param {IdentityAttributesBetaApiGetIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    IdentityAttributesBetaApi.prototype.getIdentityAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityAttributesBetaApiFp)(this.configuration).getIdentityAttribute(requestParameters.name, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a collection of identity attributes.
     * @summary List Identity Attributes
     * @param {IdentityAttributesBetaApiListIdentityAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    IdentityAttributesBetaApi.prototype.listIdentityAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IdentityAttributesBetaApiFp)(this.configuration).listIdentityAttributes(requestParameters.includeSystem, requestParameters.includeSilent, requestParameters.searchableOnly, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Identity Attribute
     * @param {IdentityAttributesBetaApiPutIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    IdentityAttributesBetaApi.prototype.putIdentityAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityAttributesBetaApiFp)(this.configuration).putIdentityAttribute(requestParameters.name, requestParameters.identityAttributeBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IdentityAttributesBetaApi;
}(base_1.BaseAPI));
exports.IdentityAttributesBetaApi = IdentityAttributesBetaApi;
/**
 * IdentityHistoryBetaApi - axios parameter creator
 * @export
 */
var IdentityHistoryBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
         * @param {string} id The identity id
         * @param {string} [snapshot1] The snapshot 1 of identity
         * @param {string} [snapshot2] The snapshot 2 of identity
         * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        compareIdentitySnapshots: function (id, snapshot1, snapshot2, accessItemTypes, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('compareIdentitySnapshots', 'id', id);
                            localVarPath = "/historical-identities/{id}/compare"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (snapshot1 !== undefined) {
                                localVarQueryParameter['snapshot1'] = snapshot1;
                            }
                            if (snapshot2 !== undefined) {
                                localVarQueryParameter['snapshot2'] = snapshot2;
                            }
                            if (accessItemTypes) {
                                localVarQueryParameter['accessItemTypes'] = accessItemTypes.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
         * @param {string} id The identity id
         * @param {string} accessType The specific type which needs to be compared
         * @param {boolean} [accessAssociated] Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
         * @param {string} [snapshot1] The snapshot 1 of identity
         * @param {string} [snapshot2] The snapshot 2 of identity
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        compareIdentitySnapshotsAccessType: function (id, accessType, accessAssociated, snapshot1, snapshot2, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('compareIdentitySnapshotsAccessType', 'id', id);
                            // verify required parameter 'accessType' is not null or undefined
                            (0, common_1.assertParamExists)('compareIdentitySnapshotsAccessType', 'accessType', accessType);
                            localVarPath = "/historical-identities/{id}/compare/{access-type}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("accessType", "}"), encodeURIComponent(String(accessType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (accessAssociated !== undefined) {
                                localVarQueryParameter['access-associated'] = accessAssociated;
                            }
                            if (snapshot1 !== undefined) {
                                localVarQueryParameter['snapshot1'] = snapshot1;
                            }
                            if (snapshot2 !== undefined) {
                                localVarQueryParameter['snapshot2'] = snapshot2;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Get latest snapshot of identity
         * @param {string} id The identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalIdentity: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getHistoricalIdentity', 'id', id);
                            localVarPath = "/historical-identities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all events for the given identity
         * @param {string} id The identity id
         * @param {string} [from] The optional instant until which access events are returned
         * @param {Array<string>} [eventTypes] An optional list of event types to return.  If null or empty, all events are returned
         * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalIdentityEvents: function (id, from, eventTypes, accessItemTypes, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getHistoricalIdentityEvents', 'id', id);
                            localVarPath = "/historical-identities/{id}/events"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (from !== undefined) {
                                localVarQueryParameter['from'] = from;
                            }
                            if (eventTypes) {
                                localVarQueryParameter['eventTypes'] = eventTypes.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (accessItemTypes) {
                                localVarQueryParameter['accessItemTypes'] = accessItemTypes.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets an identity snapshot at a given date
         * @param {string} id The identity id
         * @param {string} date The specified date
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySnapshot: function (id, date, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentitySnapshot', 'id', id);
                            // verify required parameter 'date' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentitySnapshot', 'date', date);
                            localVarPath = "/historical-identities/{id}/snapshots/{date}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("date", "}"), encodeURIComponent(String(date)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets the summary for the event count for a specific identity
         * @param {string} id The identity id
         * @param {string} [before] The date before which snapshot summary is required
         * @param {'day' | 'month'} [interval] The interval indicating day or month. Defaults to month if not specified
         * @param {string} [timeZone] The time zone. Defaults to UTC if not provided
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySnapshotSummary: function (id, before, interval, timeZone, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentitySnapshotSummary', 'id', id);
                            localVarPath = "/historical-identities/{id}/snapshot-summary"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (before !== undefined) {
                                localVarQueryParameter['before'] = before;
                            }
                            if (interval !== undefined) {
                                localVarQueryParameter['interval'] = interval;
                            }
                            if (timeZone !== undefined) {
                                localVarQueryParameter['time-zone'] = timeZone;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets the start date of the identity
         * @param {string} id The identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityStartDate: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityStartDate', 'id', id);
                            localVarPath = "/historical-identities/{id}/start-date"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all the identities
         * @param {string} [startsWithQuery] This param is used for starts-with search for first, last and display name of the identity
         * @param {boolean} [isDeleted] Indicates if we want to only list down deleted identities or not.
         * @param {boolean} [isActive] Indicates if we want to only list active or inactive identities.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listHistoricalIdentities: function (startsWithQuery, isDeleted, isActive, limit, offset, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/historical-identities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (startsWithQuery !== undefined) {
                                localVarQueryParameter['starts-with-query'] = startsWithQuery;
                            }
                            if (isDeleted !== undefined) {
                                localVarQueryParameter['is-deleted'] = isDeleted;
                            }
                            if (isActive !== undefined) {
                                localVarQueryParameter['is-active'] = isActive;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a list of access items for the identity filtered by item type
         * @param {string} id The identity id
         * @param {string} [type] The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
         * @param {string} [query] This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityAccessItems: function (id, type, filters, sorters, query, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('listIdentityAccessItems', 'id', id);
                            localVarPath = "/historical-identities/{id}/access-items"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (query !== undefined) {
                                localVarQueryParameter['query'] = query;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of identity access items at a specified date, filtered by item type.
         * @summary Get Identity Access Items Snapshot
         * @param {string} id Identity ID.
         * @param {string} date Specified date.
         * @param {string} [type] Access item type.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySnapshotAccessItems: function (id, date, type, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('listIdentitySnapshotAccessItems', 'id', id);
                            // verify required parameter 'date' is not null or undefined
                            (0, common_1.assertParamExists)('listIdentitySnapshotAccessItems', 'date', date);
                            localVarPath = "/historical-identities/{id}/snapshots/{date}/access-items"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("date", "}"), encodeURIComponent(String(date)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all the snapshots for the identity
         * @param {string} id The identity id
         * @param {string} [start] The specified start date
         * @param {'day' | 'month'} [interval] The interval indicating the range in day or month for the specified interval-name
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySnapshots: function (id, start, interval, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('listIdentitySnapshots', 'id', id);
                            localVarPath = "/historical-identities/{id}/snapshots"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (start !== undefined) {
                                localVarQueryParameter['start'] = start;
                            }
                            if (interval !== undefined) {
                                localVarQueryParameter['interval'] = interval;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IdentityHistoryBetaApiAxiosParamCreator = IdentityHistoryBetaApiAxiosParamCreator;
/**
 * IdentityHistoryBetaApi - functional programming interface
 * @export
 */
var IdentityHistoryBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IdentityHistoryBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
         * @param {string} id The identity id
         * @param {string} [snapshot1] The snapshot 1 of identity
         * @param {string} [snapshot2] The snapshot 2 of identity
         * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        compareIdentitySnapshots: function (id, snapshot1, snapshot2, accessItemTypes, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.compareIdentitySnapshots(id, snapshot1, snapshot2, accessItemTypes, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
         * @param {string} id The identity id
         * @param {string} accessType The specific type which needs to be compared
         * @param {boolean} [accessAssociated] Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
         * @param {string} [snapshot1] The snapshot 1 of identity
         * @param {string} [snapshot2] The snapshot 2 of identity
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        compareIdentitySnapshotsAccessType: function (id, accessType, accessAssociated, snapshot1, snapshot2, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.compareIdentitySnapshotsAccessType(id, accessType, accessAssociated, snapshot1, snapshot2, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Get latest snapshot of identity
         * @param {string} id The identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalIdentity: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHistoricalIdentity(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all events for the given identity
         * @param {string} id The identity id
         * @param {string} [from] The optional instant until which access events are returned
         * @param {Array<string>} [eventTypes] An optional list of event types to return.  If null or empty, all events are returned
         * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalIdentityEvents: function (id, from, eventTypes, accessItemTypes, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getHistoricalIdentityEvents(id, from, eventTypes, accessItemTypes, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets an identity snapshot at a given date
         * @param {string} id The identity id
         * @param {string} date The specified date
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySnapshot: function (id, date, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentitySnapshot(id, date, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets the summary for the event count for a specific identity
         * @param {string} id The identity id
         * @param {string} [before] The date before which snapshot summary is required
         * @param {'day' | 'month'} [interval] The interval indicating day or month. Defaults to month if not specified
         * @param {string} [timeZone] The time zone. Defaults to UTC if not provided
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySnapshotSummary: function (id, before, interval, timeZone, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentitySnapshotSummary(id, before, interval, timeZone, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets the start date of the identity
         * @param {string} id The identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityStartDate: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityStartDate(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all the identities
         * @param {string} [startsWithQuery] This param is used for starts-with search for first, last and display name of the identity
         * @param {boolean} [isDeleted] Indicates if we want to only list down deleted identities or not.
         * @param {boolean} [isActive] Indicates if we want to only list active or inactive identities.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listHistoricalIdentities: function (startsWithQuery, isDeleted, isActive, limit, offset, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listHistoricalIdentities(startsWithQuery, isDeleted, isActive, limit, offset, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a list of access items for the identity filtered by item type
         * @param {string} id The identity id
         * @param {string} [type] The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
         * @param {string} [query] This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityAccessItems: function (id, type, filters, sorters, query, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listIdentityAccessItems(id, type, filters, sorters, query, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a list of identity access items at a specified date, filtered by item type.
         * @summary Get Identity Access Items Snapshot
         * @param {string} id Identity ID.
         * @param {string} date Specified date.
         * @param {string} [type] Access item type.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySnapshotAccessItems: function (id, date, type, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listIdentitySnapshotAccessItems(id, date, type, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all the snapshots for the identity
         * @param {string} id The identity id
         * @param {string} [start] The specified start date
         * @param {'day' | 'month'} [interval] The interval indicating the range in day or month for the specified interval-name
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySnapshots: function (id, start, interval, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listIdentitySnapshots(id, start, interval, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IdentityHistoryBetaApiFp = IdentityHistoryBetaApiFp;
/**
 * IdentityHistoryBetaApi - factory interface
 * @export
 */
var IdentityHistoryBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IdentityHistoryBetaApiFp)(configuration);
    return {
        /**
         * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
         * @param {string} id The identity id
         * @param {string} [snapshot1] The snapshot 1 of identity
         * @param {string} [snapshot2] The snapshot 2 of identity
         * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        compareIdentitySnapshots: function (id, snapshot1, snapshot2, accessItemTypes, limit, offset, count, axiosOptions) {
            return localVarFp.compareIdentitySnapshots(id, snapshot1, snapshot2, accessItemTypes, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
         * @param {string} id The identity id
         * @param {string} accessType The specific type which needs to be compared
         * @param {boolean} [accessAssociated] Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
         * @param {string} [snapshot1] The snapshot 1 of identity
         * @param {string} [snapshot2] The snapshot 2 of identity
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        compareIdentitySnapshotsAccessType: function (id, accessType, accessAssociated, snapshot1, snapshot2, limit, offset, count, axiosOptions) {
            return localVarFp.compareIdentitySnapshotsAccessType(id, accessType, accessAssociated, snapshot1, snapshot2, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Get latest snapshot of identity
         * @param {string} id The identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalIdentity: function (id, axiosOptions) {
            return localVarFp.getHistoricalIdentity(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all events for the given identity
         * @param {string} id The identity id
         * @param {string} [from] The optional instant until which access events are returned
         * @param {Array<string>} [eventTypes] An optional list of event types to return.  If null or empty, all events are returned
         * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalIdentityEvents: function (id, from, eventTypes, accessItemTypes, limit, offset, count, axiosOptions) {
            return localVarFp.getHistoricalIdentityEvents(id, from, eventTypes, accessItemTypes, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets an identity snapshot at a given date
         * @param {string} id The identity id
         * @param {string} date The specified date
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySnapshot: function (id, date, axiosOptions) {
            return localVarFp.getIdentitySnapshot(id, date, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets the summary for the event count for a specific identity
         * @param {string} id The identity id
         * @param {string} [before] The date before which snapshot summary is required
         * @param {'day' | 'month'} [interval] The interval indicating day or month. Defaults to month if not specified
         * @param {string} [timeZone] The time zone. Defaults to UTC if not provided
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentitySnapshotSummary: function (id, before, interval, timeZone, limit, offset, count, axiosOptions) {
            return localVarFp.getIdentitySnapshotSummary(id, before, interval, timeZone, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets the start date of the identity
         * @param {string} id The identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityStartDate: function (id, axiosOptions) {
            return localVarFp.getIdentityStartDate(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all the identities
         * @param {string} [startsWithQuery] This param is used for starts-with search for first, last and display name of the identity
         * @param {boolean} [isDeleted] Indicates if we want to only list down deleted identities or not.
         * @param {boolean} [isActive] Indicates if we want to only list active or inactive identities.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listHistoricalIdentities: function (startsWithQuery, isDeleted, isActive, limit, offset, axiosOptions) {
            return localVarFp.listHistoricalIdentities(startsWithQuery, isDeleted, isActive, limit, offset, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
         * @summary Gets a list of access items for the identity filtered by item type
         * @param {string} id The identity id
         * @param {string} [type] The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
         * @param {string} [query] This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityAccessItems: function (id, type, filters, sorters, query, axiosOptions) {
            return localVarFp.listIdentityAccessItems(id, type, filters, sorters, query, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a list of identity access items at a specified date, filtered by item type.
         * @summary Get Identity Access Items Snapshot
         * @param {string} id Identity ID.
         * @param {string} date Specified date.
         * @param {string} [type] Access item type.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySnapshotAccessItems: function (id, date, type, axiosOptions) {
            return localVarFp.listIdentitySnapshotAccessItems(id, date, type, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
         * @summary Lists all the snapshots for the identity
         * @param {string} id The identity id
         * @param {string} [start] The specified start date
         * @param {'day' | 'month'} [interval] The interval indicating the range in day or month for the specified interval-name
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentitySnapshots: function (id, start, interval, limit, offset, count, axiosOptions) {
            return localVarFp.listIdentitySnapshots(id, start, interval, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IdentityHistoryBetaApiFactory = IdentityHistoryBetaApiFactory;
/**
 * IdentityHistoryBetaApi - object-oriented interface
 * @export
 * @class IdentityHistoryBetaApi
 * @extends {BaseAPI}
 */
var IdentityHistoryBetaApi = /** @class */ (function (_super) {
    __extends(IdentityHistoryBetaApi, _super);
    function IdentityHistoryBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
     * @param {IdentityHistoryBetaApiCompareIdentitySnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.compareIdentitySnapshots = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).compareIdentitySnapshots(requestParameters.id, requestParameters.snapshot1, requestParameters.snapshot2, requestParameters.accessItemTypes, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
     * @param {IdentityHistoryBetaApiCompareIdentitySnapshotsAccessTypeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.compareIdentitySnapshotsAccessType = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).compareIdentitySnapshotsAccessType(requestParameters.id, requestParameters.accessType, requestParameters.accessAssociated, requestParameters.snapshot1, requestParameters.snapshot2, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Get latest snapshot of identity
     * @param {IdentityHistoryBetaApiGetHistoricalIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.getHistoricalIdentity = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).getHistoricalIdentity(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all events for the given identity
     * @param {IdentityHistoryBetaApiGetHistoricalIdentityEventsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.getHistoricalIdentityEvents = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).getHistoricalIdentityEvents(requestParameters.id, requestParameters.from, requestParameters.eventTypes, requestParameters.accessItemTypes, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets an identity snapshot at a given date
     * @param {IdentityHistoryBetaApiGetIdentitySnapshotRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.getIdentitySnapshot = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).getIdentitySnapshot(requestParameters.id, requestParameters.date, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the summary for the event count for a specific identity
     * @param {IdentityHistoryBetaApiGetIdentitySnapshotSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.getIdentitySnapshotSummary = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).getIdentitySnapshotSummary(requestParameters.id, requestParameters.before, requestParameters.interval, requestParameters.timeZone, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the start date of the identity
     * @param {IdentityHistoryBetaApiGetIdentityStartDateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.getIdentityStartDate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).getIdentityStartDate(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the identities
     * @param {IdentityHistoryBetaApiListHistoricalIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.listHistoricalIdentities = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).listHistoricalIdentities(requestParameters.startsWithQuery, requestParameters.isDeleted, requestParameters.isActive, requestParameters.limit, requestParameters.offset, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of access items for the identity filtered by item type
     * @param {IdentityHistoryBetaApiListIdentityAccessItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.listIdentityAccessItems = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).listIdentityAccessItems(requestParameters.id, requestParameters.type, requestParameters.filters, requestParameters.sorters, requestParameters.query, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a list of identity access items at a specified date, filtered by item type.
     * @summary Get Identity Access Items Snapshot
     * @param {IdentityHistoryBetaApiListIdentitySnapshotAccessItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.listIdentitySnapshotAccessItems = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).listIdentitySnapshotAccessItems(requestParameters.id, requestParameters.date, requestParameters.type, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the snapshots for the identity
     * @param {IdentityHistoryBetaApiListIdentitySnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    IdentityHistoryBetaApi.prototype.listIdentitySnapshots = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityHistoryBetaApiFp)(this.configuration).listIdentitySnapshots(requestParameters.id, requestParameters.start, requestParameters.interval, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IdentityHistoryBetaApi;
}(base_1.BaseAPI));
exports.IdentityHistoryBetaApi = IdentityHistoryBetaApi;
/**
 * IdentityProfilesBetaApi - axios parameter creator
 * @export
 */
var IdentityProfilesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
         * @summary Create an Identity Profile
         * @param {IdentityProfileBeta} identityProfileBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityProfile: function (identityProfileBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createIdentityProfile', 'identityProfileBeta', identityProfileBeta);
                            localVarPath = "/identity-profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityProfileBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
         * @summary Delete an Identity Profile
         * @param {string} identityProfileId The Identity Profile ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProfile: function (identityProfileId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIdentityProfile', 'identityProfileId', identityProfileId);
                            localVarPath = "/identity-profiles/{identity-profile-id}"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
         * @summary Delete Identity Profiles
         * @param {Array<string>} requestBody Identity Profile bulk delete request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProfiles: function (requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('deleteIdentityProfiles', 'requestBody', requestBody);
                            localVarPath = "/identity-profiles/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This exports existing identity profiles in the format specified by the sp-config service.
         * @summary Export Identity Profiles
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportIdentityProfiles: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/identity-profiles/export";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
         * @summary Default identity attribute config
         * @param {string} identityProfileId The Identity Profile ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultIdentityAttributeConfig: function (identityProfileId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('getDefaultIdentityAttributeConfig', 'identityProfileId', identityProfileId);
                            localVarPath = "/identity-profiles/{identity-profile-id}/default-identity-attribute-config"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Gets a single Identity Profile
         * @param {string} identityProfileId The Identity Profile ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProfile: function (identityProfileId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityProfile', 'identityProfileId', identityProfileId);
                            localVarPath = "/identity-profiles/{identity-profile-id}"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This imports previously exported identity profiles.
         * @summary Import Identity Profiles
         * @param {Array<IdentityProfileExportedObjectBeta>} identityProfileExportedObjectBeta Previously exported Identity Profiles.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importIdentityProfiles: function (identityProfileExportedObjectBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileExportedObjectBeta' is not null or undefined
                            (0, common_1.assertParamExists)('importIdentityProfiles', 'identityProfileExportedObjectBeta', identityProfileExportedObjectBeta);
                            localVarPath = "/identity-profiles/import";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityProfileExportedObjectBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
         * @summary Identity Profiles List
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityProfiles: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/identity-profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
         * @summary Generate Identity Profile Preview
         * @param {IdentityPreviewRequestBeta} identityPreviewRequestBeta Identity Preview request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        showGenerateIdentityPreview: function (identityPreviewRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityPreviewRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('showGenerateIdentityPreview', 'identityPreviewRequestBeta', identityPreviewRequestBeta);
                            localVarPath = "/identity-profiles/identity-preview";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityPreviewRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
         * @summary Process identities under profile
         * @param {string} identityProfileId The Identity Profile ID to be processed
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        syncIdentityProfile: function (identityProfileId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('syncIdentityProfile', 'identityProfileId', identityProfileId);
                            localVarPath = "/identity-profiles/{identity-profile-id}/process-identities"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
         * @summary Update the Identity Profile
         * @param {string} identityProfileId The Identity Profile ID
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProfile: function (identityProfileId, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('updateIdentityProfile', 'identityProfileId', identityProfileId);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateIdentityProfile', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/identity-profiles/{identity-profile-id}"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.IdentityProfilesBetaApiAxiosParamCreator = IdentityProfilesBetaApiAxiosParamCreator;
/**
 * IdentityProfilesBetaApi - functional programming interface
 * @export
 */
var IdentityProfilesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.IdentityProfilesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
         * @summary Create an Identity Profile
         * @param {IdentityProfileBeta} identityProfileBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityProfile: function (identityProfileBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createIdentityProfile(identityProfileBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
         * @summary Delete an Identity Profile
         * @param {string} identityProfileId The Identity Profile ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProfile: function (identityProfileId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIdentityProfile(identityProfileId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
         * @summary Delete Identity Profiles
         * @param {Array<string>} requestBody Identity Profile bulk delete request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProfiles: function (requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteIdentityProfiles(requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This exports existing identity profiles in the format specified by the sp-config service.
         * @summary Export Identity Profiles
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportIdentityProfiles: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportIdentityProfiles(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
         * @summary Default identity attribute config
         * @param {string} identityProfileId The Identity Profile ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultIdentityAttributeConfig: function (identityProfileId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultIdentityAttributeConfig(identityProfileId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Gets a single Identity Profile
         * @param {string} identityProfileId The Identity Profile ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProfile: function (identityProfileId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityProfile(identityProfileId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This imports previously exported identity profiles.
         * @summary Import Identity Profiles
         * @param {Array<IdentityProfileExportedObjectBeta>} identityProfileExportedObjectBeta Previously exported Identity Profiles.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importIdentityProfiles: function (identityProfileExportedObjectBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importIdentityProfiles(identityProfileExportedObjectBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
         * @summary Identity Profiles List
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityProfiles: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listIdentityProfiles(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
         * @summary Generate Identity Profile Preview
         * @param {IdentityPreviewRequestBeta} identityPreviewRequestBeta Identity Preview request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        showGenerateIdentityPreview: function (identityPreviewRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.showGenerateIdentityPreview(identityPreviewRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
         * @summary Process identities under profile
         * @param {string} identityProfileId The Identity Profile ID to be processed
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        syncIdentityProfile: function (identityProfileId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncIdentityProfile(identityProfileId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
         * @summary Update the Identity Profile
         * @param {string} identityProfileId The Identity Profile ID
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProfile: function (identityProfileId, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateIdentityProfile(identityProfileId, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.IdentityProfilesBetaApiFp = IdentityProfilesBetaApiFp;
/**
 * IdentityProfilesBetaApi - factory interface
 * @export
 */
var IdentityProfilesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.IdentityProfilesBetaApiFp)(configuration);
    return {
        /**
         * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
         * @summary Create an Identity Profile
         * @param {IdentityProfileBeta} identityProfileBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityProfile: function (identityProfileBeta, axiosOptions) {
            return localVarFp.createIdentityProfile(identityProfileBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
         * @summary Delete an Identity Profile
         * @param {string} identityProfileId The Identity Profile ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProfile: function (identityProfileId, axiosOptions) {
            return localVarFp.deleteIdentityProfile(identityProfileId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
         * @summary Delete Identity Profiles
         * @param {Array<string>} requestBody Identity Profile bulk delete request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProfiles: function (requestBody, axiosOptions) {
            return localVarFp.deleteIdentityProfiles(requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This exports existing identity profiles in the format specified by the sp-config service.
         * @summary Export Identity Profiles
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportIdentityProfiles: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.exportIdentityProfiles(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
         * @summary Default identity attribute config
         * @param {string} identityProfileId The Identity Profile ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultIdentityAttributeConfig: function (identityProfileId, axiosOptions) {
            return localVarFp.getDefaultIdentityAttributeConfig(identityProfileId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Gets a single Identity Profile
         * @param {string} identityProfileId The Identity Profile ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProfile: function (identityProfileId, axiosOptions) {
            return localVarFp.getIdentityProfile(identityProfileId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This imports previously exported identity profiles.
         * @summary Import Identity Profiles
         * @param {Array<IdentityProfileExportedObjectBeta>} identityProfileExportedObjectBeta Previously exported Identity Profiles.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importIdentityProfiles: function (identityProfileExportedObjectBeta, axiosOptions) {
            return localVarFp.importIdentityProfiles(identityProfileExportedObjectBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
         * @summary Identity Profiles List
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listIdentityProfiles: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listIdentityProfiles(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
         * @summary Generate Identity Profile Preview
         * @param {IdentityPreviewRequestBeta} identityPreviewRequestBeta Identity Preview request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        showGenerateIdentityPreview: function (identityPreviewRequestBeta, axiosOptions) {
            return localVarFp.showGenerateIdentityPreview(identityPreviewRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
         * @summary Process identities under profile
         * @param {string} identityProfileId The Identity Profile ID to be processed
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        syncIdentityProfile: function (identityProfileId, axiosOptions) {
            return localVarFp.syncIdentityProfile(identityProfileId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
         * @summary Update the Identity Profile
         * @param {string} identityProfileId The Identity Profile ID
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProfile: function (identityProfileId, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.updateIdentityProfile(identityProfileId, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.IdentityProfilesBetaApiFactory = IdentityProfilesBetaApiFactory;
/**
 * IdentityProfilesBetaApi - object-oriented interface
 * @export
 * @class IdentityProfilesBetaApi
 * @extends {BaseAPI}
 */
var IdentityProfilesBetaApi = /** @class */ (function (_super) {
    __extends(IdentityProfilesBetaApi, _super);
    function IdentityProfilesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfilesBetaApiCreateIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.createIdentityProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).createIdentityProfile(requestParameters.identityProfileBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {IdentityProfilesBetaApiDeleteIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.deleteIdentityProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).deleteIdentityProfile(requestParameters.identityProfileId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {IdentityProfilesBetaApiDeleteIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.deleteIdentityProfiles = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).deleteIdentityProfiles(requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {IdentityProfilesBetaApiExportIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.exportIdentityProfiles = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).exportIdentityProfiles(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Default identity attribute config
     * @param {IdentityProfilesBetaApiGetDefaultIdentityAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.getDefaultIdentityAttributeConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).getDefaultIdentityAttributeConfig(requestParameters.identityProfileId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Gets a single Identity Profile
     * @param {IdentityProfilesBetaApiGetIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.getIdentityProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).getIdentityProfile(requestParameters.identityProfileId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {IdentityProfilesBetaApiImportIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.importIdentityProfiles = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).importIdentityProfiles(requestParameters.identityProfileExportedObjectBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {IdentityProfilesBetaApiListIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.listIdentityProfiles = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).listIdentityProfiles(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityProfilesBetaApiShowGenerateIdentityPreviewRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.showGenerateIdentityPreview = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).showGenerateIdentityPreview(requestParameters.identityPreviewRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {IdentityProfilesBetaApiSyncIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.syncIdentityProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).syncIdentityProfile(requestParameters.identityProfileId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {IdentityProfilesBetaApiUpdateIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    IdentityProfilesBetaApi.prototype.updateIdentityProfile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.IdentityProfilesBetaApiFp)(this.configuration).updateIdentityProfile(requestParameters.identityProfileId, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return IdentityProfilesBetaApi;
}(base_1.BaseAPI));
exports.IdentityProfilesBetaApi = IdentityProfilesBetaApi;
/**
 * LifecycleStatesBetaApi - axios parameter creator
 * @export
 */
var LifecycleStatesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Get Lifecycle State
         * @param {string} identityProfileId Identity Profile ID.
         * @param {string} lifecycleStateId Lifecycle State ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getLifecycleStates: function (identityProfileId, lifecycleStateId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('getLifecycleStates', 'identityProfileId', identityProfileId);
                            // verify required parameter 'lifecycleStateId' is not null or undefined
                            (0, common_1.assertParamExists)('getLifecycleStates', 'lifecycleStateId', lifecycleStateId);
                            localVarPath = "/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)))
                                .replace("{".concat("lifecycle-state-id", "}"), encodeURIComponent(String(lifecycleStateId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Update Lifecycle State
         * @param {string} identityProfileId Identity Profile ID.
         * @param {string} lifecycleStateId Lifecycle State ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateLifecycleStates: function (identityProfileId, lifecycleStateId, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityProfileId' is not null or undefined
                            (0, common_1.assertParamExists)('updateLifecycleStates', 'identityProfileId', identityProfileId);
                            // verify required parameter 'lifecycleStateId' is not null or undefined
                            (0, common_1.assertParamExists)('updateLifecycleStates', 'lifecycleStateId', lifecycleStateId);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateLifecycleStates', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/identity-profiles/{identity-profile-id}/lifecycle-states/{lifecycle-state-id}"
                                .replace("{".concat("identity-profile-id", "}"), encodeURIComponent(String(identityProfileId)))
                                .replace("{".concat("lifecycle-state-id", "}"), encodeURIComponent(String(lifecycleStateId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LifecycleStatesBetaApiAxiosParamCreator = LifecycleStatesBetaApiAxiosParamCreator;
/**
 * LifecycleStatesBetaApi - functional programming interface
 * @export
 */
var LifecycleStatesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LifecycleStatesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Get Lifecycle State
         * @param {string} identityProfileId Identity Profile ID.
         * @param {string} lifecycleStateId Lifecycle State ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getLifecycleStates: function (identityProfileId, lifecycleStateId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLifecycleStates(identityProfileId, lifecycleStateId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Update Lifecycle State
         * @param {string} identityProfileId Identity Profile ID.
         * @param {string} lifecycleStateId Lifecycle State ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateLifecycleStates: function (identityProfileId, lifecycleStateId, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateLifecycleStates(identityProfileId, lifecycleStateId, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.LifecycleStatesBetaApiFp = LifecycleStatesBetaApiFp;
/**
 * LifecycleStatesBetaApi - factory interface
 * @export
 */
var LifecycleStatesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LifecycleStatesBetaApiFp)(configuration);
    return {
        /**
         * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Get Lifecycle State
         * @param {string} identityProfileId Identity Profile ID.
         * @param {string} lifecycleStateId Lifecycle State ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getLifecycleStates: function (identityProfileId, lifecycleStateId, axiosOptions) {
            return localVarFp.getLifecycleStates(identityProfileId, lifecycleStateId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Update Lifecycle State
         * @param {string} identityProfileId Identity Profile ID.
         * @param {string} lifecycleStateId Lifecycle State ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateLifecycleStates: function (identityProfileId, lifecycleStateId, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.updateLifecycleStates(identityProfileId, lifecycleStateId, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LifecycleStatesBetaApiFactory = LifecycleStatesBetaApiFactory;
/**
 * LifecycleStatesBetaApi - object-oriented interface
 * @export
 * @class LifecycleStatesBetaApi
 * @extends {BaseAPI}
 */
var LifecycleStatesBetaApi = /** @class */ (function (_super) {
    __extends(LifecycleStatesBetaApi, _super);
    function LifecycleStatesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {LifecycleStatesBetaApiGetLifecycleStatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesBetaApi
     */
    LifecycleStatesBetaApi.prototype.getLifecycleStates = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.LifecycleStatesBetaApiFp)(this.configuration).getLifecycleStates(requestParameters.identityProfileId, requestParameters.lifecycleStateId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {LifecycleStatesBetaApiUpdateLifecycleStatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesBetaApi
     */
    LifecycleStatesBetaApi.prototype.updateLifecycleStates = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.LifecycleStatesBetaApiFp)(this.configuration).updateLifecycleStates(requestParameters.identityProfileId, requestParameters.lifecycleStateId, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LifecycleStatesBetaApi;
}(base_1.BaseAPI));
exports.LifecycleStatesBetaApi = LifecycleStatesBetaApi;
/**
 * MFAConfigurationBetaApi - axios parameter creator
 * @export
 */
var MFAConfigurationBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete MFA method configuration
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteMFAConfig: function (method, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'method' is not null or undefined
                            (0, common_1.assertParamExists)('deleteMFAConfig', 'method', method);
                            localVarPath = "/mfa/{method}/delete"
                                .replace("{".concat("method", "}"), encodeURIComponent(String(method)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configuration of Duo MFA method
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFADuoConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/mfa/duo-web/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
         * @summary Configuration of KBA MFA method
         * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFAKbaConfig: function (allLanguages, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/mfa/kba/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (allLanguages !== undefined) {
                                localVarQueryParameter['allLanguages'] = allLanguages;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configuration of Okta MFA method
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFAOktaConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/mfa/okta-verify/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Set Duo MFA configuration
         * @param {MfaDuoConfigBeta} mfaDuoConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFADuoConfig: function (mfaDuoConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mfaDuoConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setMFADuoConfig', 'mfaDuoConfigBeta', mfaDuoConfigBeta);
                            localVarPath = "/mfa/duo-web/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mfaDuoConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
         * @summary Set MFA KBA configuration
         * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFAKBAConfig: function (kbaAnswerRequestItemBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'kbaAnswerRequestItemBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setMFAKBAConfig', 'kbaAnswerRequestItemBeta', kbaAnswerRequestItemBeta);
                            localVarPath = "/mfa/kba/config/answers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(kbaAnswerRequestItemBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Set Okta MFA configuration
         * @param {MfaOktaConfigBeta} mfaOktaConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFAOktaConfig: function (mfaOktaConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mfaOktaConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setMFAOktaConfig', 'mfaOktaConfigBeta', mfaOktaConfigBeta);
                            localVarPath = "/mfa/okta-verify/config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mfaOktaConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
         * @summary MFA method\'s test configuration
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testMFAConfig: function (method, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'method' is not null or undefined
                            (0, common_1.assertParamExists)('testMFAConfig', 'method', method);
                            localVarPath = "/mfa/{method}/test"
                                .replace("{".concat("method", "}"), encodeURIComponent(String(method)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MFAConfigurationBetaApiAxiosParamCreator = MFAConfigurationBetaApiAxiosParamCreator;
/**
 * MFAConfigurationBetaApi - functional programming interface
 * @export
 */
var MFAConfigurationBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MFAConfigurationBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete MFA method configuration
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteMFAConfig: function (method, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteMFAConfig(method, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configuration of Duo MFA method
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFADuoConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMFADuoConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
         * @summary Configuration of KBA MFA method
         * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFAKbaConfig: function (allLanguages, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMFAKbaConfig(allLanguages, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configuration of Okta MFA method
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFAOktaConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMFAOktaConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Set Duo MFA configuration
         * @param {MfaDuoConfigBeta} mfaDuoConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFADuoConfig: function (mfaDuoConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setMFADuoConfig(mfaDuoConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
         * @summary Set MFA KBA configuration
         * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFAKBAConfig: function (kbaAnswerRequestItemBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setMFAKBAConfig(kbaAnswerRequestItemBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Set Okta MFA configuration
         * @param {MfaOktaConfigBeta} mfaOktaConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFAOktaConfig: function (mfaOktaConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setMFAOktaConfig(mfaOktaConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
         * @summary MFA method\'s test configuration
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testMFAConfig: function (method, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testMFAConfig(method, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MFAConfigurationBetaApiFp = MFAConfigurationBetaApiFp;
/**
 * MFAConfigurationBetaApi - factory interface
 * @export
 */
var MFAConfigurationBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MFAConfigurationBetaApiFp)(configuration);
    return {
        /**
         * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete MFA method configuration
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteMFAConfig: function (method, axiosOptions) {
            return localVarFp.deleteMFAConfig(method, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configuration of Duo MFA method
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFADuoConfig: function (axiosOptions) {
            return localVarFp.getMFADuoConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
         * @summary Configuration of KBA MFA method
         * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFAKbaConfig: function (allLanguages, axiosOptions) {
            return localVarFp.getMFAKbaConfig(allLanguages, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configuration of Okta MFA method
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMFAOktaConfig: function (axiosOptions) {
            return localVarFp.getMFAOktaConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Set Duo MFA configuration
         * @param {MfaDuoConfigBeta} mfaDuoConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFADuoConfig: function (mfaDuoConfigBeta, axiosOptions) {
            return localVarFp.setMFADuoConfig(mfaDuoConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
         * @summary Set MFA KBA configuration
         * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFAKBAConfig: function (kbaAnswerRequestItemBeta, axiosOptions) {
            return localVarFp.setMFAKBAConfig(kbaAnswerRequestItemBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Set Okta MFA configuration
         * @param {MfaOktaConfigBeta} mfaOktaConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setMFAOktaConfig: function (mfaOktaConfigBeta, axiosOptions) {
            return localVarFp.setMFAOktaConfig(mfaOktaConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
         * @summary MFA method\'s test configuration
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testMFAConfig: function (method, axiosOptions) {
            return localVarFp.testMFAConfig(method, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MFAConfigurationBetaApiFactory = MFAConfigurationBetaApiFactory;
/**
 * MFAConfigurationBetaApi - object-oriented interface
 * @export
 * @class MFAConfigurationBetaApi
 * @extends {BaseAPI}
 */
var MFAConfigurationBetaApi = /** @class */ (function (_super) {
    __extends(MFAConfigurationBetaApi, _super);
    function MFAConfigurationBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {MFAConfigurationBetaApiDeleteMFAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.deleteMFAConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).deleteMFAConfig(requestParameters.method, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.getMFADuoConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).getMFADuoConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {MFAConfigurationBetaApiGetMFAKbaConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.getMFAKbaConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).getMFAKbaConfig(requestParameters.allLanguages, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.getMFAOktaConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).getMFAOktaConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MFAConfigurationBetaApiSetMFADuoConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.setMFADuoConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).setMFADuoConfig(requestParameters.mfaDuoConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {MFAConfigurationBetaApiSetMFAKBAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.setMFAKBAConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).setMFAKBAConfig(requestParameters.kbaAnswerRequestItemBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MFAConfigurationBetaApiSetMFAOktaConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.setMFAOktaConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).setMFAOktaConfig(requestParameters.mfaOktaConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {MFAConfigurationBetaApiTestMFAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    MFAConfigurationBetaApi.prototype.testMFAConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAConfigurationBetaApiFp)(this.configuration).testMFAConfig(requestParameters.method, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MFAConfigurationBetaApi;
}(base_1.BaseAPI));
exports.MFAConfigurationBetaApi = MFAConfigurationBetaApi;
/**
 * MFAControllerBetaApi - axios parameter creator
 * @export
 */
var MFAControllerBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API send token request.
         * @summary Create and send user token
         * @param {SendTokenRequestBeta} sendTokenRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSendToken: function (sendTokenRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sendTokenRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSendToken', 'sendTokenRequestBeta', sendTokenRequestBeta);
                            localVarPath = "/mfa/token/send";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sendTokenRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Polling MFA method by VerificationPollRequest
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
         * @param {VerificationPollRequestBeta} verificationPollRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        pingVerificationStatus: function (method, verificationPollRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'method' is not null or undefined
                            (0, common_1.assertParamExists)('pingVerificationStatus', 'method', method);
                            // verify required parameter 'verificationPollRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('pingVerificationStatus', 'verificationPollRequestBeta', verificationPollRequestBeta);
                            localVarPath = "/mfa/{method}/poll"
                                .replace("{".concat("method", "}"), encodeURIComponent(String(method)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(verificationPollRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API Authenticates the user via Duo-Web MFA method.
         * @summary Verifying authentication via Duo method
         * @param {DuoVerificationRequestBeta} duoVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendDuoVerifyRequest: function (duoVerificationRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'duoVerificationRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('sendDuoVerifyRequest', 'duoVerificationRequestBeta', duoVerificationRequestBeta);
                            localVarPath = "/mfa/duo-web/verify";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(duoVerificationRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API Authenticate user in KBA MFA method.
         * @summary Authenticate KBA provided MFA method
         * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendKbaAnswers: function (kbaAnswerRequestItemBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'kbaAnswerRequestItemBeta' is not null or undefined
                            (0, common_1.assertParamExists)('sendKbaAnswers', 'kbaAnswerRequestItemBeta', kbaAnswerRequestItemBeta);
                            localVarPath = "/mfa/kba/authenticate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(kbaAnswerRequestItemBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
         * @summary Verifying authentication via Okta method
         * @param {OktaVerificationRequestBeta} oktaVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendOktaVerifyRequest: function (oktaVerificationRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'oktaVerificationRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('sendOktaVerifyRequest', 'oktaVerificationRequestBeta', oktaVerificationRequestBeta);
                            localVarPath = "/mfa/okta-verify/verify";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(oktaVerificationRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API Authenticate user in Token MFA method.
         * @summary Authenticate Token provided MFA method
         * @param {TokenAuthRequestBeta} tokenAuthRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendTokenAuthRequest: function (tokenAuthRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'tokenAuthRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('sendTokenAuthRequest', 'tokenAuthRequestBeta', tokenAuthRequestBeta);
                            localVarPath = "/mfa/token/authenticate";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tokenAuthRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MFAControllerBetaApiAxiosParamCreator = MFAControllerBetaApiAxiosParamCreator;
/**
 * MFAControllerBetaApi - functional programming interface
 * @export
 */
var MFAControllerBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MFAControllerBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API send token request.
         * @summary Create and send user token
         * @param {SendTokenRequestBeta} sendTokenRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSendToken: function (sendTokenRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSendToken(sendTokenRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Polling MFA method by VerificationPollRequest
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
         * @param {VerificationPollRequestBeta} verificationPollRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        pingVerificationStatus: function (method, verificationPollRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pingVerificationStatus(method, verificationPollRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API Authenticates the user via Duo-Web MFA method.
         * @summary Verifying authentication via Duo method
         * @param {DuoVerificationRequestBeta} duoVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendDuoVerifyRequest: function (duoVerificationRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendDuoVerifyRequest(duoVerificationRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API Authenticate user in KBA MFA method.
         * @summary Authenticate KBA provided MFA method
         * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendKbaAnswers: function (kbaAnswerRequestItemBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendKbaAnswers(kbaAnswerRequestItemBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
         * @summary Verifying authentication via Okta method
         * @param {OktaVerificationRequestBeta} oktaVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendOktaVerifyRequest: function (oktaVerificationRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendOktaVerifyRequest(oktaVerificationRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API Authenticate user in Token MFA method.
         * @summary Authenticate Token provided MFA method
         * @param {TokenAuthRequestBeta} tokenAuthRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendTokenAuthRequest: function (tokenAuthRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendTokenAuthRequest(tokenAuthRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MFAControllerBetaApiFp = MFAControllerBetaApiFp;
/**
 * MFAControllerBetaApi - factory interface
 * @export
 */
var MFAControllerBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MFAControllerBetaApiFp)(configuration);
    return {
        /**
         * This API send token request.
         * @summary Create and send user token
         * @param {SendTokenRequestBeta} sendTokenRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSendToken: function (sendTokenRequestBeta, axiosOptions) {
            return localVarFp.createSendToken(sendTokenRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
         * @summary Polling MFA method by VerificationPollRequest
         * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
         * @param {VerificationPollRequestBeta} verificationPollRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        pingVerificationStatus: function (method, verificationPollRequestBeta, axiosOptions) {
            return localVarFp.pingVerificationStatus(method, verificationPollRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API Authenticates the user via Duo-Web MFA method.
         * @summary Verifying authentication via Duo method
         * @param {DuoVerificationRequestBeta} duoVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendDuoVerifyRequest: function (duoVerificationRequestBeta, axiosOptions) {
            return localVarFp.sendDuoVerifyRequest(duoVerificationRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API Authenticate user in KBA MFA method.
         * @summary Authenticate KBA provided MFA method
         * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendKbaAnswers: function (kbaAnswerRequestItemBeta, axiosOptions) {
            return localVarFp.sendKbaAnswers(kbaAnswerRequestItemBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
         * @summary Verifying authentication via Okta method
         * @param {OktaVerificationRequestBeta} oktaVerificationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendOktaVerifyRequest: function (oktaVerificationRequestBeta, axiosOptions) {
            return localVarFp.sendOktaVerifyRequest(oktaVerificationRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API Authenticate user in Token MFA method.
         * @summary Authenticate Token provided MFA method
         * @param {TokenAuthRequestBeta} tokenAuthRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendTokenAuthRequest: function (tokenAuthRequestBeta, axiosOptions) {
            return localVarFp.sendTokenAuthRequest(tokenAuthRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MFAControllerBetaApiFactory = MFAControllerBetaApiFactory;
/**
 * MFAControllerBetaApi - object-oriented interface
 * @export
 * @class MFAControllerBetaApi
 * @extends {BaseAPI}
 */
var MFAControllerBetaApi = /** @class */ (function (_super) {
    __extends(MFAControllerBetaApi, _super);
    function MFAControllerBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {MFAControllerBetaApiCreateSendTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    MFAControllerBetaApi.prototype.createSendToken = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAControllerBetaApiFp)(this.configuration).createSendToken(requestParameters.sendTokenRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {MFAControllerBetaApiPingVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    MFAControllerBetaApi.prototype.pingVerificationStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAControllerBetaApiFp)(this.configuration).pingVerificationStatus(requestParameters.method, requestParameters.verificationPollRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {MFAControllerBetaApiSendDuoVerifyRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    MFAControllerBetaApi.prototype.sendDuoVerifyRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAControllerBetaApiFp)(this.configuration).sendDuoVerifyRequest(requestParameters.duoVerificationRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {MFAControllerBetaApiSendKbaAnswersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    MFAControllerBetaApi.prototype.sendKbaAnswers = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAControllerBetaApiFp)(this.configuration).sendKbaAnswers(requestParameters.kbaAnswerRequestItemBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {MFAControllerBetaApiSendOktaVerifyRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    MFAControllerBetaApi.prototype.sendOktaVerifyRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAControllerBetaApiFp)(this.configuration).sendOktaVerifyRequest(requestParameters.oktaVerificationRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {MFAControllerBetaApiSendTokenAuthRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    MFAControllerBetaApi.prototype.sendTokenAuthRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.MFAControllerBetaApiFp)(this.configuration).sendTokenAuthRequest(requestParameters.tokenAuthRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MFAControllerBetaApi;
}(base_1.BaseAPI));
exports.MFAControllerBetaApi = MFAControllerBetaApi;
/**
 * ManagedClientsBetaApi - axios parameter creator
 * @export
 */
var ManagedClientsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve Managed Client Status by ID.
         * @summary Specified Managed Client Status.
         * @param {string} id ID of the Managed Client Status to get
         * @param {ManagedClientTypeBeta} type Type of the Managed Client Status to get
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedClientStatus: function (id, type, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getManagedClientStatus', 'id', id);
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('getManagedClientStatus', 'type', type);
                            localVarPath = "/managed-clients/{id}/status"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (type !== undefined) {
                                localVarQueryParameter['type'] = type;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a status detail passed in from the client
         * @summary Handle status request from client
         * @param {string} id ID of the Managed Client Status to update
         * @param {ManagedClientStatusBeta} managedClientStatusBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateManagedClientStatus: function (id, managedClientStatusBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateManagedClientStatus', 'id', id);
                            // verify required parameter 'managedClientStatusBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateManagedClientStatus', 'managedClientStatusBeta', managedClientStatusBeta);
                            localVarPath = "/managed-clients/{id}/status"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(managedClientStatusBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ManagedClientsBetaApiAxiosParamCreator = ManagedClientsBetaApiAxiosParamCreator;
/**
 * ManagedClientsBetaApi - functional programming interface
 * @export
 */
var ManagedClientsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ManagedClientsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve Managed Client Status by ID.
         * @summary Specified Managed Client Status.
         * @param {string} id ID of the Managed Client Status to get
         * @param {ManagedClientTypeBeta} type Type of the Managed Client Status to get
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedClientStatus: function (id, type, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getManagedClientStatus(id, type, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a status detail passed in from the client
         * @summary Handle status request from client
         * @param {string} id ID of the Managed Client Status to update
         * @param {ManagedClientStatusBeta} managedClientStatusBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateManagedClientStatus: function (id, managedClientStatusBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateManagedClientStatus(id, managedClientStatusBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ManagedClientsBetaApiFp = ManagedClientsBetaApiFp;
/**
 * ManagedClientsBetaApi - factory interface
 * @export
 */
var ManagedClientsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ManagedClientsBetaApiFp)(configuration);
    return {
        /**
         * Retrieve Managed Client Status by ID.
         * @summary Specified Managed Client Status.
         * @param {string} id ID of the Managed Client Status to get
         * @param {ManagedClientTypeBeta} type Type of the Managed Client Status to get
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedClientStatus: function (id, type, axiosOptions) {
            return localVarFp.getManagedClientStatus(id, type, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a status detail passed in from the client
         * @summary Handle status request from client
         * @param {string} id ID of the Managed Client Status to update
         * @param {ManagedClientStatusBeta} managedClientStatusBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateManagedClientStatus: function (id, managedClientStatusBeta, axiosOptions) {
            return localVarFp.updateManagedClientStatus(id, managedClientStatusBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ManagedClientsBetaApiFactory = ManagedClientsBetaApiFactory;
/**
 * ManagedClientsBetaApi - object-oriented interface
 * @export
 * @class ManagedClientsBetaApi
 * @extends {BaseAPI}
 */
var ManagedClientsBetaApi = /** @class */ (function (_super) {
    __extends(ManagedClientsBetaApi, _super);
    function ManagedClientsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve Managed Client Status by ID.
     * @summary Specified Managed Client Status.
     * @param {ManagedClientsBetaApiGetManagedClientStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClientsBetaApi
     */
    ManagedClientsBetaApi.prototype.getManagedClientStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ManagedClientsBetaApiFp)(this.configuration).getManagedClientStatus(requestParameters.id, requestParameters.type, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a status detail passed in from the client
     * @summary Handle status request from client
     * @param {ManagedClientsBetaApiUpdateManagedClientStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClientsBetaApi
     */
    ManagedClientsBetaApi.prototype.updateManagedClientStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ManagedClientsBetaApiFp)(this.configuration).updateManagedClientStatus(requestParameters.id, requestParameters.managedClientStatusBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ManagedClientsBetaApi;
}(base_1.BaseAPI));
exports.ManagedClientsBetaApi = ManagedClientsBetaApi;
/**
 * ManagedClustersBetaApi - axios parameter creator
 * @export
 */
var ManagedClustersBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get managed cluster\'s log configuration.
         * @summary Get managed cluster\'s log configuration
         * @param {string} id ID of ManagedCluster to get log configuration for
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getClientLogConfiguration: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getClientLogConfiguration', 'id', id);
                            localVarPath = "/managed-clusters/{id}/log-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a ManagedCluster by ID.
         * @summary Get a specified ManagedCluster.
         * @param {string} id ID of the ManagedCluster to get
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedCluster: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getManagedCluster', 'id', id);
                            localVarPath = "/managed-clusters/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve all Managed Clusters for the current Org, based on request context.
         * @summary Retrieve all Managed Clusters.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedClusters: function (offset, limit, count, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/managed-clusters";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update managed cluster\'s log configuration
         * @summary Update managed cluster\'s log configuration
         * @param {string} id ID of ManagedCluster to update log configuration for
         * @param {ClientLogConfigurationBeta} clientLogConfigurationBeta ClientLogConfiguration for given ManagedCluster
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putClientLogConfiguration: function (id, clientLogConfigurationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putClientLogConfiguration', 'id', id);
                            // verify required parameter 'clientLogConfigurationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putClientLogConfiguration', 'clientLogConfigurationBeta', clientLogConfigurationBeta);
                            localVarPath = "/managed-clusters/{id}/log-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(clientLogConfigurationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ManagedClustersBetaApiAxiosParamCreator = ManagedClustersBetaApiAxiosParamCreator;
/**
 * ManagedClustersBetaApi - functional programming interface
 * @export
 */
var ManagedClustersBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ManagedClustersBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get managed cluster\'s log configuration.
         * @summary Get managed cluster\'s log configuration
         * @param {string} id ID of ManagedCluster to get log configuration for
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getClientLogConfiguration: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getClientLogConfiguration(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a ManagedCluster by ID.
         * @summary Get a specified ManagedCluster.
         * @param {string} id ID of the ManagedCluster to get
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedCluster: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getManagedCluster(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve all Managed Clusters for the current Org, based on request context.
         * @summary Retrieve all Managed Clusters.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedClusters: function (offset, limit, count, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getManagedClusters(offset, limit, count, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update managed cluster\'s log configuration
         * @summary Update managed cluster\'s log configuration
         * @param {string} id ID of ManagedCluster to update log configuration for
         * @param {ClientLogConfigurationBeta} clientLogConfigurationBeta ClientLogConfiguration for given ManagedCluster
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putClientLogConfiguration: function (id, clientLogConfigurationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putClientLogConfiguration(id, clientLogConfigurationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ManagedClustersBetaApiFp = ManagedClustersBetaApiFp;
/**
 * ManagedClustersBetaApi - factory interface
 * @export
 */
var ManagedClustersBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ManagedClustersBetaApiFp)(configuration);
    return {
        /**
         * Get managed cluster\'s log configuration.
         * @summary Get managed cluster\'s log configuration
         * @param {string} id ID of ManagedCluster to get log configuration for
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getClientLogConfiguration: function (id, axiosOptions) {
            return localVarFp.getClientLogConfiguration(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a ManagedCluster by ID.
         * @summary Get a specified ManagedCluster.
         * @param {string} id ID of the ManagedCluster to get
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedCluster: function (id, axiosOptions) {
            return localVarFp.getManagedCluster(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve all Managed Clusters for the current Org, based on request context.
         * @summary Retrieve all Managed Clusters.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getManagedClusters: function (offset, limit, count, filters, axiosOptions) {
            return localVarFp.getManagedClusters(offset, limit, count, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update managed cluster\'s log configuration
         * @summary Update managed cluster\'s log configuration
         * @param {string} id ID of ManagedCluster to update log configuration for
         * @param {ClientLogConfigurationBeta} clientLogConfigurationBeta ClientLogConfiguration for given ManagedCluster
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putClientLogConfiguration: function (id, clientLogConfigurationBeta, axiosOptions) {
            return localVarFp.putClientLogConfiguration(id, clientLogConfigurationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ManagedClustersBetaApiFactory = ManagedClustersBetaApiFactory;
/**
 * ManagedClustersBetaApi - object-oriented interface
 * @export
 * @class ManagedClustersBetaApi
 * @extends {BaseAPI}
 */
var ManagedClustersBetaApi = /** @class */ (function (_super) {
    __extends(ManagedClustersBetaApi, _super);
    function ManagedClustersBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get managed cluster\'s log configuration.
     * @summary Get managed cluster\'s log configuration
     * @param {ManagedClustersBetaApiGetClientLogConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    ManagedClustersBetaApi.prototype.getClientLogConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ManagedClustersBetaApiFp)(this.configuration).getClientLogConfiguration(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified ManagedCluster.
     * @param {ManagedClustersBetaApiGetManagedClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    ManagedClustersBetaApi.prototype.getManagedCluster = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ManagedClustersBetaApiFp)(this.configuration).getManagedCluster(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {ManagedClustersBetaApiGetManagedClustersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    ManagedClustersBetaApi.prototype.getManagedClusters = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ManagedClustersBetaApiFp)(this.configuration).getManagedClusters(requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update managed cluster\'s log configuration
     * @summary Update managed cluster\'s log configuration
     * @param {ManagedClustersBetaApiPutClientLogConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    ManagedClustersBetaApi.prototype.putClientLogConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ManagedClustersBetaApiFp)(this.configuration).putClientLogConfiguration(requestParameters.id, requestParameters.clientLogConfigurationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ManagedClustersBetaApi;
}(base_1.BaseAPI));
exports.ManagedClustersBetaApi = ManagedClustersBetaApi;
/**
 * NonEmployeeLifecycleManagementBetaApi - axios parameter creator
 * @export
 */
var NonEmployeeLifecycleManagementBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Approves a non-employee approval request and notifies the next approver.
         * @summary Approve a Non-Employee Request
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {NonEmployeeApprovalDecisionBeta} nonEmployeeApprovalDecisionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveNonEmployeeRequest: function (id, nonEmployeeApprovalDecisionBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('approveNonEmployeeRequest', 'id', id);
                            // verify required parameter 'nonEmployeeApprovalDecisionBeta' is not null or undefined
                            (0, common_1.assertParamExists)('approveNonEmployeeRequest', 'nonEmployeeApprovalDecisionBeta', nonEmployeeApprovalDecisionBeta);
                            localVarPath = "/non-employee-approvals/{id}/approve"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeApprovalDecisionBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
         * @summary Create Non-Employee Record
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee record creation request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeRecord: function (nonEmployeeRequestBodyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nonEmployeeRequestBodyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createNonEmployeeRecord', 'nonEmployeeRequestBodyBeta', nonEmployeeRequestBodyBeta);
                            localVarPath = "/non-employee-records";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeRequestBodyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will create a non-employee request and notify the approver
         * @summary Create Non-Employee Request
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee creation request body
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeRequest: function (nonEmployeeRequestBodyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nonEmployeeRequestBodyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createNonEmployeeRequest', 'nonEmployeeRequestBodyBeta', nonEmployeeRequestBodyBeta);
                            localVarPath = "/non-employee-requests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeRequestBodyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
         * @summary Create Non-Employee Source
         * @param {NonEmployeeSourceRequestBodyBeta} nonEmployeeSourceRequestBodyBeta Non-Employee source creation request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeSource: function (nonEmployeeSourceRequestBodyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'nonEmployeeSourceRequestBodyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createNonEmployeeSource', 'nonEmployeeSourceRequestBodyBeta', nonEmployeeSourceRequestBodyBeta);
                            localVarPath = "/non-employee-sources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeSourceRequestBodyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
         * @summary Create Non-Employee Source Schema Attribute
         * @param {string} sourceId The Source id
         * @param {NonEmployeeSchemaAttributeBodyBeta} nonEmployeeSchemaAttributeBodyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeSourceSchemaAttributes: function (sourceId, nonEmployeeSchemaAttributeBodyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('createNonEmployeeSourceSchemaAttributes', 'sourceId', sourceId);
                            // verify required parameter 'nonEmployeeSchemaAttributeBodyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createNonEmployeeSourceSchemaAttributes', 'nonEmployeeSchemaAttributeBodyBeta', nonEmployeeSchemaAttributeBodyBeta);
                            localVarPath = "/non-employee-sources/{sourceId}/schema-attributes"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeSchemaAttributeBodyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will delete a non-employee record.
         * @summary Delete Non-Employee Record
         * @param {string} id Non-Employee record id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRecord: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeRecord', 'id', id);
                            localVarPath = "/non-employee-records/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
         * @summary Delete Multiple Non-Employee Records
         * @param {DeleteNonEmployeeRecordInBulkRequestBeta} deleteNonEmployeeRecordInBulkRequestBeta Non-Employee bulk delete request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRecordInBulk: function (deleteNonEmployeeRecordInBulkRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'deleteNonEmployeeRecordInBulkRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeRecordInBulk', 'deleteNonEmployeeRecordInBulkRequestBeta', deleteNonEmployeeRecordInBulkRequestBeta);
                            localVarPath = "/non-employee-records/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(deleteNonEmployeeRecordInBulkRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will delete a non-employee request.
         * @summary Delete Non-Employee Request
         * @param {string} id Non-Employee request id in the UUID format
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRequest: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeRequest', 'id', id);
                            localVarPath = "/non-employee-requests/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point deletes a specific schema attribute for a non-employee source.
         * @summary Delete Non-Employee Source\'s Schema Attribute
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSchemaAttribute: function (attributeId, sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'attributeId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeSchemaAttribute', 'attributeId', attributeId);
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeSchemaAttribute', 'sourceId', sourceId);
                            localVarPath = "/non-employee-sources/{sourceId}/schema-attributes/{attributeId}"
                                .replace("{".concat("attributeId", "}"), encodeURIComponent(String(attributeId)))
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will delete a non-employee source.
         * @summary Delete Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSource: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeSource', 'sourceId', sourceId);
                            localVarPath = "/non-employee-sources/{sourceId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point deletes all custom schema attributes for a non-employee source.
         * @summary Delete all custom schema attributes
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSourceSchemaAttributes: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNonEmployeeSourceSchemaAttributes', 'sourceId', sourceId);
                            localVarPath = "/non-employee-sources/{sourceId}/schema-attributes"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This requests a CSV download for all non-employees from a provided source.
         * @summary Exports Non-Employee Records to CSV
         * @param {string} id Source Id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportNonEmployeeRecords: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('exportNonEmployeeRecords', 'id', id);
                            localVarPath = "/non-employee-sources/{id}/non-employees/download"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
         * @summary Exports Source Schema Template
         * @param {string} id Source Id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportNonEmployeeSourceSchemaTemplate: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('exportNonEmployeeSourceSchemaTemplate', 'id', id);
                            localVarPath = "/non-employee-sources/{id}/schema-attributes-template/download"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Approves a non-employee approval request and notifies the next approver.
         * @summary Get a non-employee approval item detail
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {string} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeApproval: function (id, includeDetail, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeApproval', 'id', id);
                            localVarPath = "/non-employee-approvals/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (includeDetail !== undefined) {
                                localVarQueryParameter['include-detail'] = includeDetail;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
         * @summary Get Summary of Non-Employee Approval Requests
         * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeApprovalSummary: function (requestedFor, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestedFor' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeApprovalSummary', 'requestedFor', requestedFor);
                            localVarPath = "/non-employee-approvals/summary/{requested-for}"
                                .replace("{".concat("requested-for", "}"), encodeURIComponent(String(requestedFor)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
         * @summary Bulk upload status on source
         * @param {string} id Source ID (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeBulkUploadStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeBulkUploadStatus', 'id', id);
                            localVarPath = "/non-employee-sources/{id}/non-employee-bulk-upload/status"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a non-employee record.
         * @summary Get a Non-Employee Record
         * @param {string} id Non-Employee record id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRecord: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeRecord', 'id', id);
                            localVarPath = "/non-employee-records/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a non-employee request.
         * @summary Get a Non-Employee Request
         * @param {string} id Non-Employee request id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRequest: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeRequest', 'id', id);
                            localVarPath = "/non-employee-requests/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
         * @summary Get Summary of Non-Employee Requests
         * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRequestSummary: function (requestedFor, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestedFor' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeRequestSummary', 'requestedFor', requestedFor);
                            localVarPath = "/non-employee-requests/summary/{requested-for}"
                                .replace("{".concat("requested-for", "}"), encodeURIComponent(String(requestedFor)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
         * @summary Get Schema Attribute Non-Employee Source
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSchemaAttribute: function (attributeId, sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'attributeId' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeSchemaAttribute', 'attributeId', attributeId);
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeSchemaAttribute', 'sourceId', sourceId);
                            localVarPath = "/non-employee-sources/{sourceId}/schema-attributes/{attributeId}"
                                .replace("{".concat("attributeId", "}"), encodeURIComponent(String(attributeId)))
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a non-employee source.
         * @summary Get a Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSource: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeSource', 'sourceId', sourceId);
                            localVarPath = "/non-employee-sources/{sourceId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
         * @summary List Schema Attributes Non-Employee Source
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSourceSchemaAttributes: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getNonEmployeeSourceSchemaAttributes', 'sourceId', sourceId);
                            localVarPath = "/non-employee-sources/{sourceId}/schema-attributes"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
         * @summary Imports, or Updates, Non-Employee Records
         * @param {string} id Source Id (UUID)
         * @param {any} data
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importNonEmployeeRecordsInBulk: function (id, data, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importNonEmployeeRecordsInBulk', 'id', id);
                            // verify required parameter 'data' is not null or undefined
                            (0, common_1.assertParamExists)('importNonEmployeeRecordsInBulk', 'data', data);
                            localVarPath = "/non-employee-sources/{id}/non-employee-bulk-upload"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee approval requests.
         * @summary Get List of Non-Employee Approval Requests
         * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeApproval: function (requestedFor, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/non-employee-approvals";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (requestedFor !== undefined) {
                                localVarQueryParameter['requested-for'] = requestedFor;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee records.
         * @summary List Non-Employee Records
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeRecords: function (limit, offset, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/non-employee-records";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee requests.
         * @summary List Non-Employee Requests
         * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeRequests: function (requestedFor, limit, offset, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestedFor' is not null or undefined
                            (0, common_1.assertParamExists)('listNonEmployeeRequests', 'requestedFor', requestedFor);
                            localVarPath = "/non-employee-requests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (requestedFor !== undefined) {
                                localVarQueryParameter['requested-for'] = requestedFor;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee sources.
         * @summary List Non-Employee Sources
         * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
         * @param {boolean} nonEmployeeCount The flag to determine whether return a non-employee count associate with source.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeSources: function (requestedFor, nonEmployeeCount, limit, offset, count, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestedFor' is not null or undefined
                            (0, common_1.assertParamExists)('listNonEmployeeSources', 'requestedFor', requestedFor);
                            // verify required parameter 'nonEmployeeCount' is not null or undefined
                            (0, common_1.assertParamExists)('listNonEmployeeSources', 'nonEmployeeCount', nonEmployeeCount);
                            localVarPath = "/non-employee-sources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (requestedFor !== undefined) {
                                localVarQueryParameter['requested-for'] = requestedFor;
                            }
                            if (nonEmployeeCount !== undefined) {
                                localVarQueryParameter['non-employee-count'] = nonEmployeeCount;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will patch a non-employee record.
         * @summary Patch Non-Employee Record
         * @param {string} id Non-employee record id (UUID)
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeRecord: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeRecord', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeRecord', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/non-employee-records/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point patches a specific schema attribute for a non-employee SourceId.
         * @summary Patch Non-Employee Source\'s Schema Attribute
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeSchemaAttribute: function (attributeId, sourceId, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'attributeId' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeSchemaAttribute', 'attributeId', attributeId);
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeSchemaAttribute', 'sourceId', sourceId);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeSchemaAttribute', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/non-employee-sources/{sourceId}/schema-attributes/{attributeId}"
                                .replace("{".concat("attributeId", "}"), encodeURIComponent(String(attributeId)))
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
         * @summary Patch a Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeSource: function (sourceId, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeSource', 'sourceId', sourceId);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchNonEmployeeSource', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/non-employee-sources/{sourceId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint will reject an approval item request and notify user.
         * @summary Reject a Non-Employee Request
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {NonEmployeeRejectApprovalDecisionBeta} nonEmployeeRejectApprovalDecisionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectNonEmployeeRequest: function (id, nonEmployeeRejectApprovalDecisionBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('rejectNonEmployeeRequest', 'id', id);
                            // verify required parameter 'nonEmployeeRejectApprovalDecisionBeta' is not null or undefined
                            (0, common_1.assertParamExists)('rejectNonEmployeeRequest', 'nonEmployeeRejectApprovalDecisionBeta', nonEmployeeRejectApprovalDecisionBeta);
                            localVarPath = "/non-employee-approvals/{id}/reject"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeRejectApprovalDecisionBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This request will update a non-employee record.
         * @summary Update Non-Employee Record
         * @param {string} id Non-employee record id (UUID)
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateNonEmployeeRecord: function (id, nonEmployeeRequestBodyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateNonEmployeeRecord', 'id', id);
                            // verify required parameter 'nonEmployeeRequestBodyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateNonEmployeeRecord', 'nonEmployeeRequestBodyBeta', nonEmployeeRequestBodyBeta);
                            localVarPath = "/non-employee-records/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nonEmployeeRequestBodyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NonEmployeeLifecycleManagementBetaApiAxiosParamCreator = NonEmployeeLifecycleManagementBetaApiAxiosParamCreator;
/**
 * NonEmployeeLifecycleManagementBetaApi - functional programming interface
 * @export
 */
var NonEmployeeLifecycleManagementBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NonEmployeeLifecycleManagementBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Approves a non-employee approval request and notifies the next approver.
         * @summary Approve a Non-Employee Request
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {NonEmployeeApprovalDecisionBeta} nonEmployeeApprovalDecisionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveNonEmployeeRequest: function (id, nonEmployeeApprovalDecisionBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.approveNonEmployeeRequest(id, nonEmployeeApprovalDecisionBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
         * @summary Create Non-Employee Record
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee record creation request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeRecord: function (nonEmployeeRequestBodyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createNonEmployeeRecord(nonEmployeeRequestBodyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will create a non-employee request and notify the approver
         * @summary Create Non-Employee Request
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee creation request body
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeRequest: function (nonEmployeeRequestBodyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createNonEmployeeRequest(nonEmployeeRequestBodyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
         * @summary Create Non-Employee Source
         * @param {NonEmployeeSourceRequestBodyBeta} nonEmployeeSourceRequestBodyBeta Non-Employee source creation request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeSource: function (nonEmployeeSourceRequestBodyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createNonEmployeeSource(nonEmployeeSourceRequestBodyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
         * @summary Create Non-Employee Source Schema Attribute
         * @param {string} sourceId The Source id
         * @param {NonEmployeeSchemaAttributeBodyBeta} nonEmployeeSchemaAttributeBodyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeSourceSchemaAttributes: function (sourceId, nonEmployeeSchemaAttributeBodyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createNonEmployeeSourceSchemaAttributes(sourceId, nonEmployeeSchemaAttributeBodyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will delete a non-employee record.
         * @summary Delete Non-Employee Record
         * @param {string} id Non-Employee record id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRecord: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNonEmployeeRecord(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
         * @summary Delete Multiple Non-Employee Records
         * @param {DeleteNonEmployeeRecordInBulkRequestBeta} deleteNonEmployeeRecordInBulkRequestBeta Non-Employee bulk delete request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRecordInBulk: function (deleteNonEmployeeRecordInBulkRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNonEmployeeRecordInBulk(deleteNonEmployeeRecordInBulkRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will delete a non-employee request.
         * @summary Delete Non-Employee Request
         * @param {string} id Non-Employee request id in the UUID format
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRequest: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNonEmployeeRequest(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point deletes a specific schema attribute for a non-employee source.
         * @summary Delete Non-Employee Source\'s Schema Attribute
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSchemaAttribute: function (attributeId, sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNonEmployeeSchemaAttribute(attributeId, sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will delete a non-employee source.
         * @summary Delete Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSource: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNonEmployeeSource(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point deletes all custom schema attributes for a non-employee source.
         * @summary Delete all custom schema attributes
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSourceSchemaAttributes: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNonEmployeeSourceSchemaAttributes(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This requests a CSV download for all non-employees from a provided source.
         * @summary Exports Non-Employee Records to CSV
         * @param {string} id Source Id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportNonEmployeeRecords: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportNonEmployeeRecords(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
         * @summary Exports Source Schema Template
         * @param {string} id Source Id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportNonEmployeeSourceSchemaTemplate: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportNonEmployeeSourceSchemaTemplate(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Approves a non-employee approval request and notifies the next approver.
         * @summary Get a non-employee approval item detail
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {string} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeApproval: function (id, includeDetail, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeApproval(id, includeDetail, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
         * @summary Get Summary of Non-Employee Approval Requests
         * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeApprovalSummary: function (requestedFor, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeApprovalSummary(requestedFor, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
         * @summary Bulk upload status on source
         * @param {string} id Source ID (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeBulkUploadStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeBulkUploadStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a non-employee record.
         * @summary Get a Non-Employee Record
         * @param {string} id Non-Employee record id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRecord: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeRecord(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a non-employee request.
         * @summary Get a Non-Employee Request
         * @param {string} id Non-Employee request id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRequest: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeRequest(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
         * @summary Get Summary of Non-Employee Requests
         * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRequestSummary: function (requestedFor, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeRequestSummary(requestedFor, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
         * @summary Get Schema Attribute Non-Employee Source
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSchemaAttribute: function (attributeId, sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeSchemaAttribute(attributeId, sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a non-employee source.
         * @summary Get a Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSource: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeSource(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
         * @summary List Schema Attributes Non-Employee Source
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSourceSchemaAttributes: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNonEmployeeSourceSchemaAttributes(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
         * @summary Imports, or Updates, Non-Employee Records
         * @param {string} id Source Id (UUID)
         * @param {any} data
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importNonEmployeeRecordsInBulk: function (id, data, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importNonEmployeeRecordsInBulk(id, data, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee approval requests.
         * @summary Get List of Non-Employee Approval Requests
         * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeApproval: function (requestedFor, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNonEmployeeApproval(requestedFor, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee records.
         * @summary List Non-Employee Records
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeRecords: function (limit, offset, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNonEmployeeRecords(limit, offset, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee requests.
         * @summary List Non-Employee Requests
         * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeRequests: function (requestedFor, limit, offset, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNonEmployeeRequests(requestedFor, limit, offset, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a list of non-employee sources.
         * @summary List Non-Employee Sources
         * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
         * @param {boolean} nonEmployeeCount The flag to determine whether return a non-employee count associate with source.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeSources: function (requestedFor, nonEmployeeCount, limit, offset, count, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNonEmployeeSources(requestedFor, nonEmployeeCount, limit, offset, count, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will patch a non-employee record.
         * @summary Patch Non-Employee Record
         * @param {string} id Non-employee record id (UUID)
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeRecord: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchNonEmployeeRecord(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point patches a specific schema attribute for a non-employee SourceId.
         * @summary Patch Non-Employee Source\'s Schema Attribute
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeSchemaAttribute: function (attributeId, sourceId, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchNonEmployeeSchemaAttribute(attributeId, sourceId, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
         * @summary Patch a Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeSource: function (sourceId, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchNonEmployeeSource(sourceId, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint will reject an approval item request and notify user.
         * @summary Reject a Non-Employee Request
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {NonEmployeeRejectApprovalDecisionBeta} nonEmployeeRejectApprovalDecisionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectNonEmployeeRequest: function (id, nonEmployeeRejectApprovalDecisionBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rejectNonEmployeeRequest(id, nonEmployeeRejectApprovalDecisionBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This request will update a non-employee record.
         * @summary Update Non-Employee Record
         * @param {string} id Non-employee record id (UUID)
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateNonEmployeeRecord: function (id, nonEmployeeRequestBodyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateNonEmployeeRecord(id, nonEmployeeRequestBodyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.NonEmployeeLifecycleManagementBetaApiFp = NonEmployeeLifecycleManagementBetaApiFp;
/**
 * NonEmployeeLifecycleManagementBetaApi - factory interface
 * @export
 */
var NonEmployeeLifecycleManagementBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(configuration);
    return {
        /**
         * Approves a non-employee approval request and notifies the next approver.
         * @summary Approve a Non-Employee Request
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {NonEmployeeApprovalDecisionBeta} nonEmployeeApprovalDecisionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveNonEmployeeRequest: function (id, nonEmployeeApprovalDecisionBeta, axiosOptions) {
            return localVarFp.approveNonEmployeeRequest(id, nonEmployeeApprovalDecisionBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
         * @summary Create Non-Employee Record
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee record creation request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeRecord: function (nonEmployeeRequestBodyBeta, axiosOptions) {
            return localVarFp.createNonEmployeeRecord(nonEmployeeRequestBodyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will create a non-employee request and notify the approver
         * @summary Create Non-Employee Request
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee creation request body
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeRequest: function (nonEmployeeRequestBodyBeta, axiosOptions) {
            return localVarFp.createNonEmployeeRequest(nonEmployeeRequestBodyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
         * @summary Create Non-Employee Source
         * @param {NonEmployeeSourceRequestBodyBeta} nonEmployeeSourceRequestBodyBeta Non-Employee source creation request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeSource: function (nonEmployeeSourceRequestBodyBeta, axiosOptions) {
            return localVarFp.createNonEmployeeSource(nonEmployeeSourceRequestBodyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
         * @summary Create Non-Employee Source Schema Attribute
         * @param {string} sourceId The Source id
         * @param {NonEmployeeSchemaAttributeBodyBeta} nonEmployeeSchemaAttributeBodyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNonEmployeeSourceSchemaAttributes: function (sourceId, nonEmployeeSchemaAttributeBodyBeta, axiosOptions) {
            return localVarFp.createNonEmployeeSourceSchemaAttributes(sourceId, nonEmployeeSchemaAttributeBodyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will delete a non-employee record.
         * @summary Delete Non-Employee Record
         * @param {string} id Non-Employee record id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRecord: function (id, axiosOptions) {
            return localVarFp.deleteNonEmployeeRecord(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
         * @summary Delete Multiple Non-Employee Records
         * @param {DeleteNonEmployeeRecordInBulkRequestBeta} deleteNonEmployeeRecordInBulkRequestBeta Non-Employee bulk delete request body.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRecordInBulk: function (deleteNonEmployeeRecordInBulkRequestBeta, axiosOptions) {
            return localVarFp.deleteNonEmployeeRecordInBulk(deleteNonEmployeeRecordInBulkRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will delete a non-employee request.
         * @summary Delete Non-Employee Request
         * @param {string} id Non-Employee request id in the UUID format
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeRequest: function (id, axiosOptions) {
            return localVarFp.deleteNonEmployeeRequest(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point deletes a specific schema attribute for a non-employee source.
         * @summary Delete Non-Employee Source\'s Schema Attribute
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSchemaAttribute: function (attributeId, sourceId, axiosOptions) {
            return localVarFp.deleteNonEmployeeSchemaAttribute(attributeId, sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will delete a non-employee source.
         * @summary Delete Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSource: function (sourceId, axiosOptions) {
            return localVarFp.deleteNonEmployeeSource(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point deletes all custom schema attributes for a non-employee source.
         * @summary Delete all custom schema attributes
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNonEmployeeSourceSchemaAttributes: function (sourceId, axiosOptions) {
            return localVarFp.deleteNonEmployeeSourceSchemaAttributes(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This requests a CSV download for all non-employees from a provided source.
         * @summary Exports Non-Employee Records to CSV
         * @param {string} id Source Id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportNonEmployeeRecords: function (id, axiosOptions) {
            return localVarFp.exportNonEmployeeRecords(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
         * @summary Exports Source Schema Template
         * @param {string} id Source Id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportNonEmployeeSourceSchemaTemplate: function (id, axiosOptions) {
            return localVarFp.exportNonEmployeeSourceSchemaTemplate(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Approves a non-employee approval request and notifies the next approver.
         * @summary Get a non-employee approval item detail
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {string} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeApproval: function (id, includeDetail, axiosOptions) {
            return localVarFp.getNonEmployeeApproval(id, includeDetail, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
         * @summary Get Summary of Non-Employee Approval Requests
         * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeApprovalSummary: function (requestedFor, axiosOptions) {
            return localVarFp.getNonEmployeeApprovalSummary(requestedFor, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
         * @summary Bulk upload status on source
         * @param {string} id Source ID (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeBulkUploadStatus: function (id, axiosOptions) {
            return localVarFp.getNonEmployeeBulkUploadStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a non-employee record.
         * @summary Get a Non-Employee Record
         * @param {string} id Non-Employee record id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRecord: function (id, axiosOptions) {
            return localVarFp.getNonEmployeeRecord(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a non-employee request.
         * @summary Get a Non-Employee Request
         * @param {string} id Non-Employee request id (UUID)
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRequest: function (id, axiosOptions) {
            return localVarFp.getNonEmployeeRequest(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
         * @summary Get Summary of Non-Employee Requests
         * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeRequestSummary: function (requestedFor, axiosOptions) {
            return localVarFp.getNonEmployeeRequestSummary(requestedFor, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
         * @summary Get Schema Attribute Non-Employee Source
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSchemaAttribute: function (attributeId, sourceId, axiosOptions) {
            return localVarFp.getNonEmployeeSchemaAttribute(attributeId, sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a non-employee source.
         * @summary Get a Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSource: function (sourceId, axiosOptions) {
            return localVarFp.getNonEmployeeSource(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
         * @summary List Schema Attributes Non-Employee Source
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNonEmployeeSourceSchemaAttributes: function (sourceId, axiosOptions) {
            return localVarFp.getNonEmployeeSourceSchemaAttributes(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
         * @summary Imports, or Updates, Non-Employee Records
         * @param {string} id Source Id (UUID)
         * @param {any} data
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importNonEmployeeRecordsInBulk: function (id, data, axiosOptions) {
            return localVarFp.importNonEmployeeRecordsInBulk(id, data, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a list of non-employee approval requests.
         * @summary Get List of Non-Employee Approval Requests
         * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeApproval: function (requestedFor, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listNonEmployeeApproval(requestedFor, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a list of non-employee records.
         * @summary List Non-Employee Records
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeRecords: function (limit, offset, count, sorters, filters, axiosOptions) {
            return localVarFp.listNonEmployeeRecords(limit, offset, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a list of non-employee requests.
         * @summary List Non-Employee Requests
         * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeRequests: function (requestedFor, limit, offset, count, sorters, filters, axiosOptions) {
            return localVarFp.listNonEmployeeRequests(requestedFor, limit, offset, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a list of non-employee sources.
         * @summary List Non-Employee Sources
         * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
         * @param {boolean} nonEmployeeCount The flag to determine whether return a non-employee count associate with source.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNonEmployeeSources: function (requestedFor, nonEmployeeCount, limit, offset, count, sorters, axiosOptions) {
            return localVarFp.listNonEmployeeSources(requestedFor, nonEmployeeCount, limit, offset, count, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will patch a non-employee record.
         * @summary Patch Non-Employee Record
         * @param {string} id Non-employee record id (UUID)
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeRecord: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchNonEmployeeRecord(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point patches a specific schema attribute for a non-employee SourceId.
         * @summary Patch Non-Employee Source\'s Schema Attribute
         * @param {string} attributeId The Schema Attribute Id (UUID)
         * @param {string} sourceId The Source id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeSchemaAttribute: function (attributeId, sourceId, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchNonEmployeeSchemaAttribute(attributeId, sourceId, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
         * @summary Patch a Non-Employee Source
         * @param {string} sourceId Source Id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchNonEmployeeSource: function (sourceId, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchNonEmployeeSource(sourceId, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint will reject an approval item request and notify user.
         * @summary Reject a Non-Employee Request
         * @param {string} id Non-Employee approval item id (UUID)
         * @param {NonEmployeeRejectApprovalDecisionBeta} nonEmployeeRejectApprovalDecisionBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectNonEmployeeRequest: function (id, nonEmployeeRejectApprovalDecisionBeta, axiosOptions) {
            return localVarFp.rejectNonEmployeeRequest(id, nonEmployeeRejectApprovalDecisionBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This request will update a non-employee record.
         * @summary Update Non-Employee Record
         * @param {string} id Non-employee record id (UUID)
         * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateNonEmployeeRecord: function (id, nonEmployeeRequestBodyBeta, axiosOptions) {
            return localVarFp.updateNonEmployeeRecord(id, nonEmployeeRequestBodyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NonEmployeeLifecycleManagementBetaApiFactory = NonEmployeeLifecycleManagementBetaApiFactory;
/**
 * NonEmployeeLifecycleManagementBetaApi - object-oriented interface
 * @export
 * @class NonEmployeeLifecycleManagementBetaApi
 * @extends {BaseAPI}
 */
var NonEmployeeLifecycleManagementBetaApi = /** @class */ (function (_super) {
    __extends(NonEmployeeLifecycleManagementBetaApi, _super);
    function NonEmployeeLifecycleManagementBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Approve a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.approveNonEmployeeRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).approveNonEmployeeRequest(requestParameters.id, requestParameters.nonEmployeeApprovalDecisionBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.createNonEmployeeRecord = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).createNonEmployeeRecord(requestParameters.nonEmployeeRequestBodyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will create a non-employee request and notify the approver
     * @summary Create Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.createNonEmployeeRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).createNonEmployeeRequest(requestParameters.nonEmployeeRequestBodyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.createNonEmployeeSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).createNonEmployeeSource(requestParameters.nonEmployeeSourceRequestBodyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
     * @summary Create Non-Employee Source Schema Attribute
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.createNonEmployeeSourceSchemaAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).createNonEmployeeSourceSchemaAttributes(requestParameters.sourceId, requestParameters.nonEmployeeSchemaAttributeBodyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will delete a non-employee record.
     * @summary Delete Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.deleteNonEmployeeRecord = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).deleteNonEmployeeRecord(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
     * @summary Delete Multiple Non-Employee Records
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.deleteNonEmployeeRecordInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).deleteNonEmployeeRecordInBulk(requestParameters.deleteNonEmployeeRecordInBulkRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will delete a non-employee request.
     * @summary Delete Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.deleteNonEmployeeRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).deleteNonEmployeeRequest(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point deletes a specific schema attribute for a non-employee source.
     * @summary Delete Non-Employee Source\'s Schema Attribute
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.deleteNonEmployeeSchemaAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).deleteNonEmployeeSchemaAttribute(requestParameters.attributeId, requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will delete a non-employee source.
     * @summary Delete Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.deleteNonEmployeeSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).deleteNonEmployeeSource(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point deletes all custom schema attributes for a non-employee source.
     * @summary Delete all custom schema attributes
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.deleteNonEmployeeSourceSchemaAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).deleteNonEmployeeSourceSchemaAttributes(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This requests a CSV download for all non-employees from a provided source.
     * @summary Exports Non-Employee Records to CSV
     * @param {NonEmployeeLifecycleManagementBetaApiExportNonEmployeeRecordsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.exportNonEmployeeRecords = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).exportNonEmployeeRecords(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
     * @summary Exports Source Schema Template
     * @param {NonEmployeeLifecycleManagementBetaApiExportNonEmployeeSourceSchemaTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.exportNonEmployeeSourceSchemaTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).exportNonEmployeeSourceSchemaTemplate(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Get a non-employee approval item detail
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeApproval = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeApproval(requestParameters.id, requestParameters.includeDetail, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeApprovalSummary = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeApprovalSummary(requestParameters.requestedFor, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
     * @summary Bulk upload status on source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeBulkUploadStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeBulkUploadStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeBulkUploadStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a non-employee record.
     * @summary Get a Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeRecord = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeRecord(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a non-employee request.
     * @summary Get a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeRequest(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeRequestSummary = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeRequestSummary(requestParameters.requestedFor, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeSchemaAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeSchemaAttribute(requestParameters.attributeId, requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a non-employee source.
     * @summary Get a Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeSource(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
     * @summary List Schema Attributes Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.getNonEmployeeSourceSchemaAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).getNonEmployeeSourceSchemaAttributes(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
     * @summary Imports, or Updates, Non-Employee Records
     * @param {NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.importNonEmployeeRecordsInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).importNonEmployeeRecordsInBulk(requestParameters.id, requestParameters.data, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a list of non-employee approval requests.
     * @summary Get List of Non-Employee Approval Requests
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.listNonEmployeeApproval = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).listNonEmployeeApproval(requestParameters.requestedFor, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a list of non-employee records.
     * @summary List Non-Employee Records
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecordsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.listNonEmployeeRecords = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).listNonEmployeeRecords(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a list of non-employee requests.
     * @summary List Non-Employee Requests
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequestsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.listNonEmployeeRequests = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).listNonEmployeeRequests(requestParameters.requestedFor, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a list of non-employee sources.
     * @summary List Non-Employee Sources
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeSourcesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.listNonEmployeeSources = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).listNonEmployeeSources(requestParameters.requestedFor, requestParameters.nonEmployeeCount, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will patch a non-employee record.
     * @summary Patch Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.patchNonEmployeeRecord = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).patchNonEmployeeRecord(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId.
     * @summary Patch Non-Employee Source\'s Schema Attribute
     * @param {NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.patchNonEmployeeSchemaAttribute = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).patchNonEmployeeSchemaAttribute(requestParameters.attributeId, requestParameters.sourceId, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
     * @summary Patch a Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.patchNonEmployeeSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).patchNonEmployeeSource(requestParameters.sourceId, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint will reject an approval item request and notify user.
     * @summary Reject a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.rejectNonEmployeeRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).rejectNonEmployeeRequest(requestParameters.id, requestParameters.nonEmployeeRejectApprovalDecisionBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This request will update a non-employee record.
     * @summary Update Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    NonEmployeeLifecycleManagementBetaApi.prototype.updateNonEmployeeRecord = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NonEmployeeLifecycleManagementBetaApiFp)(this.configuration).updateNonEmployeeRecord(requestParameters.id, requestParameters.nonEmployeeRequestBodyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NonEmployeeLifecycleManagementBetaApi;
}(base_1.BaseAPI));
exports.NonEmployeeLifecycleManagementBetaApi = NonEmployeeLifecycleManagementBetaApi;
/**
 * NotificationsBetaApi - axios parameter creator
 * @export
 */
var NotificationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
         * @summary Verify domain address via DKIM
         * @param {DomainAddressBeta} domainAddressBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createDomainDkim: function (domainAddressBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainAddressBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createDomainDkim', 'domainAddressBeta', domainAddressBeta);
                            localVarPath = "/verified-domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainAddressBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
         * @summary Create Notification Template
         * @param {TemplateDtoBeta} templateDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationTemplate: function (templateDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'templateDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createNotificationTemplate', 'templateDtoBeta', templateDtoBeta);
                            localVarPath = "/notification-templates";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(templateDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a new sender email address and initiate verification process.
         * @summary Create Verified From Address
         * @param {EmailStatusDtoBeta} emailStatusDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createVerifiedFromAddress: function (emailStatusDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'emailStatusDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createVerifiedFromAddress', 'emailStatusDtoBeta', emailStatusDtoBeta);
                            localVarPath = "/verified-from-addresses";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(emailStatusDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
         * @summary Bulk Delete Notification Templates
         * @param {Array<TemplateBulkDeleteDtoBeta>} templateBulkDeleteDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationTemplatesInBulk: function (templateBulkDeleteDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'templateBulkDeleteDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNotificationTemplatesInBulk', 'templateBulkDeleteDtoBeta', templateBulkDeleteDtoBeta);
                            localVarPath = "/notification-templates/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(templateBulkDeleteDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a verified sender email address
         * @summary Delete Verified From Address
         * @param {string} id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteVerifiedFromAddress: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteVerifiedFromAddress', 'id', id);
                            localVarPath = "/verified-from-addresses/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
         * @summary Get DKIM Attributes
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDkimAttributes: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/verified-domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve MAIL FROM attributes for a given AWS SES identity.
         * @summary Get MAIL FROM Attributes
         * @param {string} id Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMailFromAttributes: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getMailFromAttributes', 'id', id);
                            localVarPath = "/mail-from-attributes/{identity}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a template that you have modified for your site by Id.
         * @summary Get Notification Template By Id
         * @param {string} id Id of the Notification Template
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationTemplate: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getNotificationTemplate', 'id', id);
                            localVarPath = "/notification-templates/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
         * @summary Get Notification Template Context
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTemplateContext: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/notification-template-context";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a list of sender email addresses and their verification statuses
         * @summary List From Addresses
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listFromAddresses: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/verified-from-addresses";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Returns a list of notification preferences for tenant.
         * @summary List Notification Preferences for tenant.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationPreferences: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/notification-preferences/{key}";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lists the default templates used for notifications, such as emails from IdentityNow.
         * @summary List Notification Template Defaults
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationTemplateDefaults: function (limit, offset, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/notification-template-defaults";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lists the templates that you have modified for your site.
         * @summary List Notification Templates
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationTemplates: function (limit, offset, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/notification-templates";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
         * @summary Change MAIL FROM domain
         * @param {MailFromAttributesDtoBeta} mailFromAttributesDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putMailFromAttributes: function (mailFromAttributesDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mailFromAttributesDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putMailFromAttributes', 'mailFromAttributesDtoBeta', mailFromAttributesDtoBeta);
                            localVarPath = "/mail-from-attributes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mailFromAttributesDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Send a Test Notification
         * @summary Send Test Notification
         * @param {SendTestNotificationRequestDtoBeta} sendTestNotificationRequestDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendTestNotification: function (sendTestNotificationRequestDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sendTestNotificationRequestDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('sendTestNotification', 'sendTestNotificationRequestDtoBeta', sendTestNotificationRequestDtoBeta);
                            localVarPath = "/send-test-notification";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sendTestNotificationRequestDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NotificationsBetaApiAxiosParamCreator = NotificationsBetaApiAxiosParamCreator;
/**
 * NotificationsBetaApi - functional programming interface
 * @export
 */
var NotificationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NotificationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
         * @summary Verify domain address via DKIM
         * @param {DomainAddressBeta} domainAddressBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createDomainDkim: function (domainAddressBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createDomainDkim(domainAddressBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
         * @summary Create Notification Template
         * @param {TemplateDtoBeta} templateDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationTemplate: function (templateDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createNotificationTemplate(templateDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create a new sender email address and initiate verification process.
         * @summary Create Verified From Address
         * @param {EmailStatusDtoBeta} emailStatusDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createVerifiedFromAddress: function (emailStatusDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createVerifiedFromAddress(emailStatusDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
         * @summary Bulk Delete Notification Templates
         * @param {Array<TemplateBulkDeleteDtoBeta>} templateBulkDeleteDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationTemplatesInBulk: function (templateBulkDeleteDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNotificationTemplatesInBulk(templateBulkDeleteDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a verified sender email address
         * @summary Delete Verified From Address
         * @param {string} id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteVerifiedFromAddress: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteVerifiedFromAddress(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
         * @summary Get DKIM Attributes
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDkimAttributes: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDkimAttributes(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve MAIL FROM attributes for a given AWS SES identity.
         * @summary Get MAIL FROM Attributes
         * @param {string} id Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMailFromAttributes: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getMailFromAttributes(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a template that you have modified for your site by Id.
         * @summary Get Notification Template By Id
         * @param {string} id Id of the Notification Template
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationTemplate: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNotificationTemplate(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
         * @summary Get Notification Template Context
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTemplateContext: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNotificationsTemplateContext(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a list of sender email addresses and their verification statuses
         * @summary List From Addresses
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listFromAddresses: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listFromAddresses(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Returns a list of notification preferences for tenant.
         * @summary List Notification Preferences for tenant.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationPreferences: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNotificationPreferences(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lists the default templates used for notifications, such as emails from IdentityNow.
         * @summary List Notification Template Defaults
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationTemplateDefaults: function (limit, offset, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNotificationTemplateDefaults(limit, offset, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lists the templates that you have modified for your site.
         * @summary List Notification Templates
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationTemplates: function (limit, offset, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listNotificationTemplates(limit, offset, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
         * @summary Change MAIL FROM domain
         * @param {MailFromAttributesDtoBeta} mailFromAttributesDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putMailFromAttributes: function (mailFromAttributesDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putMailFromAttributes(mailFromAttributesDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send a Test Notification
         * @summary Send Test Notification
         * @param {SendTestNotificationRequestDtoBeta} sendTestNotificationRequestDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendTestNotification: function (sendTestNotificationRequestDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.sendTestNotification(sendTestNotificationRequestDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.NotificationsBetaApiFp = NotificationsBetaApiFp;
/**
 * NotificationsBetaApi - factory interface
 * @export
 */
var NotificationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NotificationsBetaApiFp)(configuration);
    return {
        /**
         * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
         * @summary Verify domain address via DKIM
         * @param {DomainAddressBeta} domainAddressBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createDomainDkim: function (domainAddressBeta, axiosOptions) {
            return localVarFp.createDomainDkim(domainAddressBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
         * @summary Create Notification Template
         * @param {TemplateDtoBeta} templateDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationTemplate: function (templateDtoBeta, axiosOptions) {
            return localVarFp.createNotificationTemplate(templateDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new sender email address and initiate verification process.
         * @summary Create Verified From Address
         * @param {EmailStatusDtoBeta} emailStatusDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createVerifiedFromAddress: function (emailStatusDtoBeta, axiosOptions) {
            return localVarFp.createVerifiedFromAddress(emailStatusDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
         * @summary Bulk Delete Notification Templates
         * @param {Array<TemplateBulkDeleteDtoBeta>} templateBulkDeleteDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationTemplatesInBulk: function (templateBulkDeleteDtoBeta, axiosOptions) {
            return localVarFp.deleteNotificationTemplatesInBulk(templateBulkDeleteDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a verified sender email address
         * @summary Delete Verified From Address
         * @param {string} id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteVerifiedFromAddress: function (id, axiosOptions) {
            return localVarFp.deleteVerifiedFromAddress(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
         * @summary Get DKIM Attributes
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getDkimAttributes: function (axiosOptions) {
            return localVarFp.getDkimAttributes(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve MAIL FROM attributes for a given AWS SES identity.
         * @summary Get MAIL FROM Attributes
         * @param {string} id Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getMailFromAttributes: function (id, axiosOptions) {
            return localVarFp.getMailFromAttributes(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a template that you have modified for your site by Id.
         * @summary Get Notification Template By Id
         * @param {string} id Id of the Notification Template
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationTemplate: function (id, axiosOptions) {
            return localVarFp.getNotificationTemplate(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
         * @summary Get Notification Template Context
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationsTemplateContext: function (axiosOptions) {
            return localVarFp.getNotificationsTemplateContext(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a list of sender email addresses and their verification statuses
         * @summary List From Addresses
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listFromAddresses: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listFromAddresses(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Returns a list of notification preferences for tenant.
         * @summary List Notification Preferences for tenant.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationPreferences: function (axiosOptions) {
            return localVarFp.listNotificationPreferences(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lists the default templates used for notifications, such as emails from IdentityNow.
         * @summary List Notification Template Defaults
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationTemplateDefaults: function (limit, offset, filters, axiosOptions) {
            return localVarFp.listNotificationTemplateDefaults(limit, offset, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lists the templates that you have modified for your site.
         * @summary List Notification Templates
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationTemplates: function (limit, offset, filters, axiosOptions) {
            return localVarFp.listNotificationTemplates(limit, offset, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
         * @summary Change MAIL FROM domain
         * @param {MailFromAttributesDtoBeta} mailFromAttributesDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putMailFromAttributes: function (mailFromAttributesDtoBeta, axiosOptions) {
            return localVarFp.putMailFromAttributes(mailFromAttributesDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send a Test Notification
         * @summary Send Test Notification
         * @param {SendTestNotificationRequestDtoBeta} sendTestNotificationRequestDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        sendTestNotification: function (sendTestNotificationRequestDtoBeta, axiosOptions) {
            return localVarFp.sendTestNotification(sendTestNotificationRequestDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NotificationsBetaApiFactory = NotificationsBetaApiFactory;
/**
 * NotificationsBetaApi - object-oriented interface
 * @export
 * @class NotificationsBetaApi
 * @extends {BaseAPI}
 */
var NotificationsBetaApi = /** @class */ (function (_super) {
    __extends(NotificationsBetaApi, _super);
    function NotificationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
     * @summary Verify domain address via DKIM
     * @param {NotificationsBetaApiCreateDomainDkimRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.createDomainDkim = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).createDomainDkim(requestParameters.domainAddressBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
     * @summary Create Notification Template
     * @param {NotificationsBetaApiCreateNotificationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.createNotificationTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).createNotificationTemplate(requestParameters.templateDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new sender email address and initiate verification process.
     * @summary Create Verified From Address
     * @param {NotificationsBetaApiCreateVerifiedFromAddressRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.createVerifiedFromAddress = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).createVerifiedFromAddress(requestParameters.emailStatusDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
     * @summary Bulk Delete Notification Templates
     * @param {NotificationsBetaApiDeleteNotificationTemplatesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.deleteNotificationTemplatesInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).deleteNotificationTemplatesInBulk(requestParameters.templateBulkDeleteDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a verified sender email address
     * @summary Delete Verified From Address
     * @param {NotificationsBetaApiDeleteVerifiedFromAddressRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.deleteVerifiedFromAddress = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).deleteVerifiedFromAddress(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
     * @summary Get DKIM Attributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.getDkimAttributes = function (axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).getDkimAttributes(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve MAIL FROM attributes for a given AWS SES identity.
     * @summary Get MAIL FROM Attributes
     * @param {NotificationsBetaApiGetMailFromAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.getMailFromAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).getMailFromAttributes(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a template that you have modified for your site by Id.
     * @summary Get Notification Template By Id
     * @param {NotificationsBetaApiGetNotificationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.getNotificationTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).getNotificationTemplate(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
     * @summary Get Notification Template Context
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.getNotificationsTemplateContext = function (axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).getNotificationsTemplateContext(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a list of sender email addresses and their verification statuses
     * @summary List From Addresses
     * @param {NotificationsBetaApiListFromAddressesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.listFromAddresses = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.NotificationsBetaApiFp)(this.configuration).listFromAddresses(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Returns a list of notification preferences for tenant.
     * @summary List Notification Preferences for tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.listNotificationPreferences = function (axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).listNotificationPreferences(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lists the default templates used for notifications, such as emails from IdentityNow.
     * @summary List Notification Template Defaults
     * @param {NotificationsBetaApiListNotificationTemplateDefaultsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.listNotificationTemplateDefaults = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.NotificationsBetaApiFp)(this.configuration).listNotificationTemplateDefaults(requestParameters.limit, requestParameters.offset, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lists the templates that you have modified for your site.
     * @summary List Notification Templates
     * @param {NotificationsBetaApiListNotificationTemplatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.listNotificationTemplates = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.NotificationsBetaApiFp)(this.configuration).listNotificationTemplates(requestParameters.limit, requestParameters.offset, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
     * @summary Change MAIL FROM domain
     * @param {NotificationsBetaApiPutMailFromAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.putMailFromAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).putMailFromAttributes(requestParameters.mailFromAttributesDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send a Test Notification
     * @summary Send Test Notification
     * @param {NotificationsBetaApiSendTestNotificationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    NotificationsBetaApi.prototype.sendTestNotification = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.NotificationsBetaApiFp)(this.configuration).sendTestNotification(requestParameters.sendTestNotificationRequestDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NotificationsBetaApi;
}(base_1.BaseAPI));
exports.NotificationsBetaApi = NotificationsBetaApi;
/**
 * OAuthClientsBetaApi - axios parameter creator
 * @export
 */
var OAuthClientsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This creates an OAuth client.
         * @summary Create OAuth Client
         * @param {CreateOAuthClientRequestBeta} createOAuthClientRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createOauthClient: function (createOAuthClientRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createOAuthClientRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createOauthClient', 'createOAuthClientRequestBeta', createOAuthClientRequestBeta);
                            localVarPath = "/oauth-clients";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createOAuthClientRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes an OAuth client.
         * @summary Delete OAuth Client
         * @param {string} id The OAuth client id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteOauthClient: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteOauthClient', 'id', id);
                            localVarPath = "/oauth-clients/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets details of an OAuth client.
         * @summary Get OAuth Client
         * @param {string} id The OAuth client id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOauthClient: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getOauthClient', 'id', id);
                            localVarPath = "/oauth-clients/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a list of OAuth clients.
         * @summary List OAuth Clients
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listOauthClients: function (filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/oauth-clients";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
         * @summary Patch OAuth Client
         * @param {string} id The OAuth client id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchOauthClient: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchOauthClient', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchOauthClient', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/oauth-clients/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OAuthClientsBetaApiAxiosParamCreator = OAuthClientsBetaApiAxiosParamCreator;
/**
 * OAuthClientsBetaApi - functional programming interface
 * @export
 */
var OAuthClientsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OAuthClientsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This creates an OAuth client.
         * @summary Create OAuth Client
         * @param {CreateOAuthClientRequestBeta} createOAuthClientRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createOauthClient: function (createOAuthClientRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createOauthClient(createOAuthClientRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes an OAuth client.
         * @summary Delete OAuth Client
         * @param {string} id The OAuth client id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteOauthClient: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteOauthClient(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets details of an OAuth client.
         * @summary Get OAuth Client
         * @param {string} id The OAuth client id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOauthClient: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOauthClient(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a list of OAuth clients.
         * @summary List OAuth Clients
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listOauthClients: function (filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listOauthClients(filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
         * @summary Patch OAuth Client
         * @param {string} id The OAuth client id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchOauthClient: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchOauthClient(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.OAuthClientsBetaApiFp = OAuthClientsBetaApiFp;
/**
 * OAuthClientsBetaApi - factory interface
 * @export
 */
var OAuthClientsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OAuthClientsBetaApiFp)(configuration);
    return {
        /**
         * This creates an OAuth client.
         * @summary Create OAuth Client
         * @param {CreateOAuthClientRequestBeta} createOAuthClientRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createOauthClient: function (createOAuthClientRequestBeta, axiosOptions) {
            return localVarFp.createOauthClient(createOAuthClientRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes an OAuth client.
         * @summary Delete OAuth Client
         * @param {string} id The OAuth client id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteOauthClient: function (id, axiosOptions) {
            return localVarFp.deleteOauthClient(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets details of an OAuth client.
         * @summary Get OAuth Client
         * @param {string} id The OAuth client id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOauthClient: function (id, axiosOptions) {
            return localVarFp.getOauthClient(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a list of OAuth clients.
         * @summary List OAuth Clients
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listOauthClients: function (filters, axiosOptions) {
            return localVarFp.listOauthClients(filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
         * @summary Patch OAuth Client
         * @param {string} id The OAuth client id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchOauthClient: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchOauthClient(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OAuthClientsBetaApiFactory = OAuthClientsBetaApiFactory;
/**
 * OAuthClientsBetaApi - object-oriented interface
 * @export
 * @class OAuthClientsBetaApi
 * @extends {BaseAPI}
 */
var OAuthClientsBetaApi = /** @class */ (function (_super) {
    __extends(OAuthClientsBetaApi, _super);
    function OAuthClientsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {OAuthClientsBetaApiCreateOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    OAuthClientsBetaApi.prototype.createOauthClient = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.OAuthClientsBetaApiFp)(this.configuration).createOauthClient(requestParameters.createOAuthClientRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {OAuthClientsBetaApiDeleteOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    OAuthClientsBetaApi.prototype.deleteOauthClient = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.OAuthClientsBetaApiFp)(this.configuration).deleteOauthClient(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {OAuthClientsBetaApiGetOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    OAuthClientsBetaApi.prototype.getOauthClient = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.OAuthClientsBetaApiFp)(this.configuration).getOauthClient(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {OAuthClientsBetaApiListOauthClientsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    OAuthClientsBetaApi.prototype.listOauthClients = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.OAuthClientsBetaApiFp)(this.configuration).listOauthClients(requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
     * @summary Patch OAuth Client
     * @param {OAuthClientsBetaApiPatchOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    OAuthClientsBetaApi.prototype.patchOauthClient = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.OAuthClientsBetaApiFp)(this.configuration).patchOauthClient(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OAuthClientsBetaApi;
}(base_1.BaseAPI));
exports.OAuthClientsBetaApi = OAuthClientsBetaApi;
/**
 * OrgConfigBetaApi - axios parameter creator
 * @export
 */
var OrgConfigBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get org configuration with only external (org admin) accessible properties for the current org.
         * @summary Get Org configuration settings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOrgConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/org-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of valid time zones that can be set in org configurations.
         * @summary Get list of time zones
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getValidTimeZones: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/org-config/valid-time-zones";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
         * @summary Patch an Org configuration property
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchOrgConfig: function (jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchOrgConfig', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/org-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OrgConfigBetaApiAxiosParamCreator = OrgConfigBetaApiAxiosParamCreator;
/**
 * OrgConfigBetaApi - functional programming interface
 * @export
 */
var OrgConfigBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OrgConfigBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get org configuration with only external (org admin) accessible properties for the current org.
         * @summary Get Org configuration settings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOrgConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getOrgConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of valid time zones that can be set in org configurations.
         * @summary Get list of time zones
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getValidTimeZones: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getValidTimeZones(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
         * @summary Patch an Org configuration property
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchOrgConfig: function (jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchOrgConfig(jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.OrgConfigBetaApiFp = OrgConfigBetaApiFp;
/**
 * OrgConfigBetaApi - factory interface
 * @export
 */
var OrgConfigBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OrgConfigBetaApiFp)(configuration);
    return {
        /**
         * Get org configuration with only external (org admin) accessible properties for the current org.
         * @summary Get Org configuration settings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getOrgConfig: function (axiosOptions) {
            return localVarFp.getOrgConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of valid time zones that can be set in org configurations.
         * @summary Get list of time zones
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getValidTimeZones: function (axiosOptions) {
            return localVarFp.getValidTimeZones(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
         * @summary Patch an Org configuration property
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchOrgConfig: function (jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchOrgConfig(jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OrgConfigBetaApiFactory = OrgConfigBetaApiFactory;
/**
 * OrgConfigBetaApi - object-oriented interface
 * @export
 * @class OrgConfigBetaApi
 * @extends {BaseAPI}
 */
var OrgConfigBetaApi = /** @class */ (function (_super) {
    __extends(OrgConfigBetaApi, _super);
    function OrgConfigBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get org configuration with only external (org admin) accessible properties for the current org.
     * @summary Get Org configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigBetaApi
     */
    OrgConfigBetaApi.prototype.getOrgConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.OrgConfigBetaApiFp)(this.configuration).getOrgConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of valid time zones that can be set in org configurations.
     * @summary Get list of time zones
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigBetaApi
     */
    OrgConfigBetaApi.prototype.getValidTimeZones = function (axiosOptions) {
        var _this = this;
        return (0, exports.OrgConfigBetaApiFp)(this.configuration).getValidTimeZones(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
     * @summary Patch an Org configuration property
     * @param {OrgConfigBetaApiPatchOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigBetaApi
     */
    OrgConfigBetaApi.prototype.patchOrgConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.OrgConfigBetaApiFp)(this.configuration).patchOrgConfig(requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OrgConfigBetaApi;
}(base_1.BaseAPI));
exports.OrgConfigBetaApi = OrgConfigBetaApi;
/**
 * PasswordConfigurationBetaApi - axios parameter creator
 * @export
 */
var PasswordConfigurationBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
         * @summary Create Password Org Config
         * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordOrgConfig: function (passwordOrgConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordOrgConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createPasswordOrgConfig', 'passwordOrgConfigBeta', passwordOrgConfigBeta);
                            localVarPath = "/password-org-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordOrgConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
         * @summary Get Password Org Config
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordOrgConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/password-org-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
         * @summary Update Password Org Config
         * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putPasswordOrgConfig: function (passwordOrgConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordOrgConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putPasswordOrgConfig', 'passwordOrgConfigBeta', passwordOrgConfigBeta);
                            localVarPath = "/password-org-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordOrgConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PasswordConfigurationBetaApiAxiosParamCreator = PasswordConfigurationBetaApiAxiosParamCreator;
/**
 * PasswordConfigurationBetaApi - functional programming interface
 * @export
 */
var PasswordConfigurationBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PasswordConfigurationBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
         * @summary Create Password Org Config
         * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordOrgConfig: function (passwordOrgConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPasswordOrgConfig(passwordOrgConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
         * @summary Get Password Org Config
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordOrgConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPasswordOrgConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
         * @summary Update Password Org Config
         * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putPasswordOrgConfig: function (passwordOrgConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putPasswordOrgConfig(passwordOrgConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PasswordConfigurationBetaApiFp = PasswordConfigurationBetaApiFp;
/**
 * PasswordConfigurationBetaApi - factory interface
 * @export
 */
var PasswordConfigurationBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PasswordConfigurationBetaApiFp)(configuration);
    return {
        /**
         * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
         * @summary Create Password Org Config
         * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordOrgConfig: function (passwordOrgConfigBeta, axiosOptions) {
            return localVarFp.createPasswordOrgConfig(passwordOrgConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
         * @summary Get Password Org Config
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordOrgConfig: function (axiosOptions) {
            return localVarFp.getPasswordOrgConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
         * @summary Update Password Org Config
         * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putPasswordOrgConfig: function (passwordOrgConfigBeta, axiosOptions) {
            return localVarFp.putPasswordOrgConfig(passwordOrgConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PasswordConfigurationBetaApiFactory = PasswordConfigurationBetaApiFactory;
/**
 * PasswordConfigurationBetaApi - object-oriented interface
 * @export
 * @class PasswordConfigurationBetaApi
 * @extends {BaseAPI}
 */
var PasswordConfigurationBetaApi = /** @class */ (function (_super) {
    __extends(PasswordConfigurationBetaApi, _super);
    function PasswordConfigurationBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordConfigurationBetaApiCreatePasswordOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationBetaApi
     */
    PasswordConfigurationBetaApi.prototype.createPasswordOrgConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordConfigurationBetaApiFp)(this.configuration).createPasswordOrgConfig(requestParameters.passwordOrgConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationBetaApi
     */
    PasswordConfigurationBetaApi.prototype.getPasswordOrgConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.PasswordConfigurationBetaApiFp)(this.configuration).getPasswordOrgConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordConfigurationBetaApiPutPasswordOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationBetaApi
     */
    PasswordConfigurationBetaApi.prototype.putPasswordOrgConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordConfigurationBetaApiFp)(this.configuration).putPasswordOrgConfig(requestParameters.passwordOrgConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PasswordConfigurationBetaApi;
}(base_1.BaseAPI));
exports.PasswordConfigurationBetaApi = PasswordConfigurationBetaApi;
/**
 * PasswordDictionaryBetaApi - axios parameter creator
 * @export
 */
var PasswordDictionaryBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
         * @summary Get Password Dictionary
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordDictionary: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/password-dictionary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
         * @summary Update Password Dictionary
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putPasswordDictionary: function (file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/password-dictionary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PasswordDictionaryBetaApiAxiosParamCreator = PasswordDictionaryBetaApiAxiosParamCreator;
/**
 * PasswordDictionaryBetaApi - functional programming interface
 * @export
 */
var PasswordDictionaryBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PasswordDictionaryBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
         * @summary Get Password Dictionary
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordDictionary: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPasswordDictionary(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
         * @summary Update Password Dictionary
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putPasswordDictionary: function (file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putPasswordDictionary(file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PasswordDictionaryBetaApiFp = PasswordDictionaryBetaApiFp;
/**
 * PasswordDictionaryBetaApi - factory interface
 * @export
 */
var PasswordDictionaryBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PasswordDictionaryBetaApiFp)(configuration);
    return {
        /**
         * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
         * @summary Get Password Dictionary
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordDictionary: function (axiosOptions) {
            return localVarFp.getPasswordDictionary(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
         * @summary Update Password Dictionary
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putPasswordDictionary: function (file, axiosOptions) {
            return localVarFp.putPasswordDictionary(file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PasswordDictionaryBetaApiFactory = PasswordDictionaryBetaApiFactory;
/**
 * PasswordDictionaryBetaApi - object-oriented interface
 * @export
 * @class PasswordDictionaryBetaApi
 * @extends {BaseAPI}
 */
var PasswordDictionaryBetaApi = /** @class */ (function (_super) {
    __extends(PasswordDictionaryBetaApi, _super);
    function PasswordDictionaryBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordDictionaryBetaApi
     */
    PasswordDictionaryBetaApi.prototype.getPasswordDictionary = function (axiosOptions) {
        var _this = this;
        return (0, exports.PasswordDictionaryBetaApiFp)(this.configuration).getPasswordDictionary(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {PasswordDictionaryBetaApiPutPasswordDictionaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordDictionaryBetaApi
     */
    PasswordDictionaryBetaApi.prototype.putPasswordDictionary = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PasswordDictionaryBetaApiFp)(this.configuration).putPasswordDictionary(requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PasswordDictionaryBetaApi;
}(base_1.BaseAPI));
exports.PasswordDictionaryBetaApi = PasswordDictionaryBetaApi;
/**
 * PasswordManagementBetaApi - axios parameter creator
 * @export
 */
var PasswordManagementBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
         * @summary Generate a digit token
         * @param {PasswordDigitTokenResetBeta} passwordDigitTokenResetBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        generateDigitToken: function (passwordDigitTokenResetBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordDigitTokenResetBeta' is not null or undefined
                            (0, common_1.assertParamExists)('generateDigitToken', 'passwordDigitTokenResetBeta', passwordDigitTokenResetBeta);
                            localVarPath = "/generate-password-reset-token/digit";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordDigitTokenResetBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
         * @summary Get Password Change Request Status
         * @param {string} id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityPasswordChangeStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getIdentityPasswordChangeStatus', 'id', id);
                            localVarPath = "/password-change-status/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
         * @summary Query Password Info
         * @param {PasswordInfoQueryDTOBeta} passwordInfoQueryDTOBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        queryPasswordInfo: function (passwordInfoQueryDTOBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordInfoQueryDTOBeta' is not null or undefined
                            (0, common_1.assertParamExists)('queryPasswordInfo', 'passwordInfoQueryDTOBeta', passwordInfoQueryDTOBeta);
                            localVarPath = "/query-password-info";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordInfoQueryDTOBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
         * @summary Set Identity\'s Password
         * @param {PasswordChangeRequestBeta} passwordChangeRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setIdentityPassword: function (passwordChangeRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordChangeRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setIdentityPassword', 'passwordChangeRequestBeta', passwordChangeRequestBeta);
                            localVarPath = "/set-password";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordChangeRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PasswordManagementBetaApiAxiosParamCreator = PasswordManagementBetaApiAxiosParamCreator;
/**
 * PasswordManagementBetaApi - functional programming interface
 * @export
 */
var PasswordManagementBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PasswordManagementBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
         * @summary Generate a digit token
         * @param {PasswordDigitTokenResetBeta} passwordDigitTokenResetBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        generateDigitToken: function (passwordDigitTokenResetBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateDigitToken(passwordDigitTokenResetBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
         * @summary Get Password Change Request Status
         * @param {string} id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityPasswordChangeStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getIdentityPasswordChangeStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
         * @summary Query Password Info
         * @param {PasswordInfoQueryDTOBeta} passwordInfoQueryDTOBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        queryPasswordInfo: function (passwordInfoQueryDTOBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.queryPasswordInfo(passwordInfoQueryDTOBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
         * @summary Set Identity\'s Password
         * @param {PasswordChangeRequestBeta} passwordChangeRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setIdentityPassword: function (passwordChangeRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setIdentityPassword(passwordChangeRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PasswordManagementBetaApiFp = PasswordManagementBetaApiFp;
/**
 * PasswordManagementBetaApi - factory interface
 * @export
 */
var PasswordManagementBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PasswordManagementBetaApiFp)(configuration);
    return {
        /**
         * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
         * @summary Generate a digit token
         * @param {PasswordDigitTokenResetBeta} passwordDigitTokenResetBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        generateDigitToken: function (passwordDigitTokenResetBeta, axiosOptions) {
            return localVarFp.generateDigitToken(passwordDigitTokenResetBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
         * @summary Get Password Change Request Status
         * @param {string} id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityPasswordChangeStatus: function (id, axiosOptions) {
            return localVarFp.getIdentityPasswordChangeStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
         * @summary Query Password Info
         * @param {PasswordInfoQueryDTOBeta} passwordInfoQueryDTOBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        queryPasswordInfo: function (passwordInfoQueryDTOBeta, axiosOptions) {
            return localVarFp.queryPasswordInfo(passwordInfoQueryDTOBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
         * @summary Set Identity\'s Password
         * @param {PasswordChangeRequestBeta} passwordChangeRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setIdentityPassword: function (passwordChangeRequestBeta, axiosOptions) {
            return localVarFp.setIdentityPassword(passwordChangeRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PasswordManagementBetaApiFactory = PasswordManagementBetaApiFactory;
/**
 * PasswordManagementBetaApi - object-oriented interface
 * @export
 * @class PasswordManagementBetaApi
 * @extends {BaseAPI}
 */
var PasswordManagementBetaApi = /** @class */ (function (_super) {
    __extends(PasswordManagementBetaApi, _super);
    function PasswordManagementBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
     * @summary Generate a digit token
     * @param {PasswordManagementBetaApiGenerateDigitTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    PasswordManagementBetaApi.prototype.generateDigitToken = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordManagementBetaApiFp)(this.configuration).generateDigitToken(requestParameters.passwordDigitTokenResetBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {PasswordManagementBetaApiGetIdentityPasswordChangeStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    PasswordManagementBetaApi.prototype.getIdentityPasswordChangeStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordManagementBetaApiFp)(this.configuration).getIdentityPasswordChangeStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordManagementBetaApiQueryPasswordInfoRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    PasswordManagementBetaApi.prototype.queryPasswordInfo = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordManagementBetaApiFp)(this.configuration).queryPasswordInfo(requestParameters.passwordInfoQueryDTOBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordManagementBetaApiSetIdentityPasswordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    PasswordManagementBetaApi.prototype.setIdentityPassword = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordManagementBetaApiFp)(this.configuration).setIdentityPassword(requestParameters.passwordChangeRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PasswordManagementBetaApi;
}(base_1.BaseAPI));
exports.PasswordManagementBetaApi = PasswordManagementBetaApi;
/**
 * PasswordPoliciesBetaApi - axios parameter creator
 * @export
 */
var PasswordPoliciesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Password Policy
         * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordPolicy: function (passwordPolicyV3DtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordPolicyV3DtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createPasswordPolicy', 'passwordPolicyV3DtoBeta', passwordPolicyV3DtoBeta);
                            localVarPath = "/password-policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordPolicyV3DtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Password Policy by ID
         * @param {string} id The ID of password policy to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePasswordPolicy: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deletePasswordPolicy', 'id', id);
                            localVarPath = "/password-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Policy by ID
         * @param {string} id The ID of password policy to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordPolicyById: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getPasswordPolicyById', 'id', id);
                            localVarPath = "/password-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets list of all Password Policies. Requires role of ORG_ADMIN
         * @summary List Password Policies
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPasswordPolicies: function (limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/password-policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Password Policy by ID
         * @param {string} id The ID of password policy to update.
         * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setPasswordPolicy: function (id, passwordPolicyV3DtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('setPasswordPolicy', 'id', id);
                            // verify required parameter 'passwordPolicyV3DtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setPasswordPolicy', 'passwordPolicyV3DtoBeta', passwordPolicyV3DtoBeta);
                            localVarPath = "/password-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordPolicyV3DtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PasswordPoliciesBetaApiAxiosParamCreator = PasswordPoliciesBetaApiAxiosParamCreator;
/**
 * PasswordPoliciesBetaApi - functional programming interface
 * @export
 */
var PasswordPoliciesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PasswordPoliciesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Password Policy
         * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordPolicy: function (passwordPolicyV3DtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPasswordPolicy(passwordPolicyV3DtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Password Policy by ID
         * @param {string} id The ID of password policy to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePasswordPolicy: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePasswordPolicy(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Policy by ID
         * @param {string} id The ID of password policy to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordPolicyById: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPasswordPolicyById(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets list of all Password Policies. Requires role of ORG_ADMIN
         * @summary List Password Policies
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPasswordPolicies: function (limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPasswordPolicies(limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Password Policy by ID
         * @param {string} id The ID of password policy to update.
         * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setPasswordPolicy: function (id, passwordPolicyV3DtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setPasswordPolicy(id, passwordPolicyV3DtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PasswordPoliciesBetaApiFp = PasswordPoliciesBetaApiFp;
/**
 * PasswordPoliciesBetaApi - factory interface
 * @export
 */
var PasswordPoliciesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PasswordPoliciesBetaApiFp)(configuration);
    return {
        /**
         * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Password Policy
         * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordPolicy: function (passwordPolicyV3DtoBeta, axiosOptions) {
            return localVarFp.createPasswordPolicy(passwordPolicyV3DtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Password Policy by ID
         * @param {string} id The ID of password policy to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePasswordPolicy: function (id, axiosOptions) {
            return localVarFp.deletePasswordPolicy(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Policy by ID
         * @param {string} id The ID of password policy to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordPolicyById: function (id, axiosOptions) {
            return localVarFp.getPasswordPolicyById(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets list of all Password Policies. Requires role of ORG_ADMIN
         * @summary List Password Policies
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPasswordPolicies: function (limit, offset, count, axiosOptions) {
            return localVarFp.listPasswordPolicies(limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Password Policy by ID
         * @param {string} id The ID of password policy to update.
         * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setPasswordPolicy: function (id, passwordPolicyV3DtoBeta, axiosOptions) {
            return localVarFp.setPasswordPolicy(id, passwordPolicyV3DtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PasswordPoliciesBetaApiFactory = PasswordPoliciesBetaApiFactory;
/**
 * PasswordPoliciesBetaApi - object-oriented interface
 * @export
 * @class PasswordPoliciesBetaApi
 * @extends {BaseAPI}
 */
var PasswordPoliciesBetaApi = /** @class */ (function (_super) {
    __extends(PasswordPoliciesBetaApi, _super);
    function PasswordPoliciesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPoliciesBetaApiCreatePasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    PasswordPoliciesBetaApi.prototype.createPasswordPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordPoliciesBetaApiFp)(this.configuration).createPasswordPolicy(requestParameters.passwordPolicyV3DtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {PasswordPoliciesBetaApiDeletePasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    PasswordPoliciesBetaApi.prototype.deletePasswordPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordPoliciesBetaApiFp)(this.configuration).deletePasswordPolicy(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {PasswordPoliciesBetaApiGetPasswordPolicyByIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    PasswordPoliciesBetaApi.prototype.getPasswordPolicyById = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordPoliciesBetaApiFp)(this.configuration).getPasswordPolicyById(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {PasswordPoliciesBetaApiListPasswordPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    PasswordPoliciesBetaApi.prototype.listPasswordPolicies = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PasswordPoliciesBetaApiFp)(this.configuration).listPasswordPolicies(requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {PasswordPoliciesBetaApiSetPasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    PasswordPoliciesBetaApi.prototype.setPasswordPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordPoliciesBetaApiFp)(this.configuration).setPasswordPolicy(requestParameters.id, requestParameters.passwordPolicyV3DtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PasswordPoliciesBetaApi;
}(base_1.BaseAPI));
exports.PasswordPoliciesBetaApi = PasswordPoliciesBetaApi;
/**
 * PasswordSyncGroupsBetaApi - axios parameter creator
 * @export
 */
var PasswordSyncGroupsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Password Sync Group
         * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordSyncGroup: function (passwordSyncGroupBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'passwordSyncGroupBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createPasswordSyncGroup', 'passwordSyncGroupBeta', passwordSyncGroupBeta);
                            localVarPath = "/password-sync-groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordSyncGroupBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Password Sync Group by ID
         * @param {string} id The ID of password sync group to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePasswordSyncGroup: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deletePasswordSyncGroup', 'id', id);
                            localVarPath = "/password-sync-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Sync Group by ID
         * @param {string} id The ID of password sync group to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordSyncGroup: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getPasswordSyncGroup', 'id', id);
                            localVarPath = "/password-sync-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Sync Group List
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordSyncGroups: function (limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/password-sync-groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Password Sync Group by ID
         * @param {string} id The ID of password sync group to update.
         * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordSyncGroup: function (id, passwordSyncGroupBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updatePasswordSyncGroup', 'id', id);
                            // verify required parameter 'passwordSyncGroupBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updatePasswordSyncGroup', 'passwordSyncGroupBeta', passwordSyncGroupBeta);
                            localVarPath = "/password-sync-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(passwordSyncGroupBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PasswordSyncGroupsBetaApiAxiosParamCreator = PasswordSyncGroupsBetaApiAxiosParamCreator;
/**
 * PasswordSyncGroupsBetaApi - functional programming interface
 * @export
 */
var PasswordSyncGroupsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PasswordSyncGroupsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Password Sync Group
         * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordSyncGroup: function (passwordSyncGroupBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPasswordSyncGroup(passwordSyncGroupBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Password Sync Group by ID
         * @param {string} id The ID of password sync group to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePasswordSyncGroup: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePasswordSyncGroup(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Sync Group by ID
         * @param {string} id The ID of password sync group to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordSyncGroup: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPasswordSyncGroup(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Sync Group List
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordSyncGroups: function (limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPasswordSyncGroups(limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Password Sync Group by ID
         * @param {string} id The ID of password sync group to update.
         * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordSyncGroup: function (id, passwordSyncGroupBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePasswordSyncGroup(id, passwordSyncGroupBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PasswordSyncGroupsBetaApiFp = PasswordSyncGroupsBetaApiFp;
/**
 * PasswordSyncGroupsBetaApi - factory interface
 * @export
 */
var PasswordSyncGroupsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PasswordSyncGroupsBetaApiFp)(configuration);
    return {
        /**
         * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Password Sync Group
         * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPasswordSyncGroup: function (passwordSyncGroupBeta, axiosOptions) {
            return localVarFp.createPasswordSyncGroup(passwordSyncGroupBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete Password Sync Group by ID
         * @param {string} id The ID of password sync group to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePasswordSyncGroup: function (id, axiosOptions) {
            return localVarFp.deletePasswordSyncGroup(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Sync Group by ID
         * @param {string} id The ID of password sync group to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordSyncGroup: function (id, axiosOptions) {
            return localVarFp.getPasswordSyncGroup(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Password Sync Group List
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPasswordSyncGroups: function (limit, offset, count, axiosOptions) {
            return localVarFp.getPasswordSyncGroups(limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Password Sync Group by ID
         * @param {string} id The ID of password sync group to update.
         * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updatePasswordSyncGroup: function (id, passwordSyncGroupBeta, axiosOptions) {
            return localVarFp.updatePasswordSyncGroup(id, passwordSyncGroupBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PasswordSyncGroupsBetaApiFactory = PasswordSyncGroupsBetaApiFactory;
/**
 * PasswordSyncGroupsBetaApi - object-oriented interface
 * @export
 * @class PasswordSyncGroupsBetaApi
 * @extends {BaseAPI}
 */
var PasswordSyncGroupsBetaApi = /** @class */ (function (_super) {
    __extends(PasswordSyncGroupsBetaApi, _super);
    function PasswordSyncGroupsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroupsBetaApiCreatePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    PasswordSyncGroupsBetaApi.prototype.createPasswordSyncGroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordSyncGroupsBetaApiFp)(this.configuration).createPasswordSyncGroup(requestParameters.passwordSyncGroupBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {PasswordSyncGroupsBetaApiDeletePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    PasswordSyncGroupsBetaApi.prototype.deletePasswordSyncGroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordSyncGroupsBetaApiFp)(this.configuration).deletePasswordSyncGroup(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {PasswordSyncGroupsBetaApiGetPasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    PasswordSyncGroupsBetaApi.prototype.getPasswordSyncGroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordSyncGroupsBetaApiFp)(this.configuration).getPasswordSyncGroup(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {PasswordSyncGroupsBetaApiGetPasswordSyncGroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    PasswordSyncGroupsBetaApi.prototype.getPasswordSyncGroups = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PasswordSyncGroupsBetaApiFp)(this.configuration).getPasswordSyncGroups(requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {PasswordSyncGroupsBetaApiUpdatePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    PasswordSyncGroupsBetaApi.prototype.updatePasswordSyncGroup = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PasswordSyncGroupsBetaApiFp)(this.configuration).updatePasswordSyncGroup(requestParameters.id, requestParameters.passwordSyncGroupBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PasswordSyncGroupsBetaApi;
}(base_1.BaseAPI));
exports.PasswordSyncGroupsBetaApi = PasswordSyncGroupsBetaApi;
/**
 * PersonalAccessTokensBetaApi - axios parameter creator
 * @export
 */
var PersonalAccessTokensBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This creates a personal access token.
         * @summary Create Personal Access Token
         * @param {CreatePersonalAccessTokenRequestBeta} createPersonalAccessTokenRequestBeta Name and scope of personal access token.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPersonalAccessToken: function (createPersonalAccessTokenRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createPersonalAccessTokenRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createPersonalAccessToken', 'createPersonalAccessTokenRequestBeta', createPersonalAccessTokenRequestBeta);
                            localVarPath = "/personal-access-tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createPersonalAccessTokenRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes a personal access token.
         * @summary Delete Personal Access Token
         * @param {string} id The personal access token id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonalAccessToken: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deletePersonalAccessToken', 'id', id);
                            localVarPath = "/personal-access-tokens/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
         * @summary List Personal Access Tokens
         * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPersonalAccessTokens: function (ownerId, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/personal-access-tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['owner-id'] = ownerId;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This performs a targeted update to the field(s) of a Personal Access Token.
         * @summary Patch Personal Access Token
         * @param {string} id The Personal Access Token id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchPersonalAccessToken: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchPersonalAccessToken', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchPersonalAccessToken', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/personal-access-tokens/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PersonalAccessTokensBetaApiAxiosParamCreator = PersonalAccessTokensBetaApiAxiosParamCreator;
/**
 * PersonalAccessTokensBetaApi - functional programming interface
 * @export
 */
var PersonalAccessTokensBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PersonalAccessTokensBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This creates a personal access token.
         * @summary Create Personal Access Token
         * @param {CreatePersonalAccessTokenRequestBeta} createPersonalAccessTokenRequestBeta Name and scope of personal access token.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPersonalAccessToken: function (createPersonalAccessTokenRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createPersonalAccessToken(createPersonalAccessTokenRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes a personal access token.
         * @summary Delete Personal Access Token
         * @param {string} id The personal access token id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonalAccessToken: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deletePersonalAccessToken(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
         * @summary List Personal Access Tokens
         * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPersonalAccessTokens: function (ownerId, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listPersonalAccessTokens(ownerId, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This performs a targeted update to the field(s) of a Personal Access Token.
         * @summary Patch Personal Access Token
         * @param {string} id The Personal Access Token id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchPersonalAccessToken: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchPersonalAccessToken(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PersonalAccessTokensBetaApiFp = PersonalAccessTokensBetaApiFp;
/**
 * PersonalAccessTokensBetaApi - factory interface
 * @export
 */
var PersonalAccessTokensBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PersonalAccessTokensBetaApiFp)(configuration);
    return {
        /**
         * This creates a personal access token.
         * @summary Create Personal Access Token
         * @param {CreatePersonalAccessTokenRequestBeta} createPersonalAccessTokenRequestBeta Name and scope of personal access token.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createPersonalAccessToken: function (createPersonalAccessTokenRequestBeta, axiosOptions) {
            return localVarFp.createPersonalAccessToken(createPersonalAccessTokenRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes a personal access token.
         * @summary Delete Personal Access Token
         * @param {string} id The personal access token id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonalAccessToken: function (id, axiosOptions) {
            return localVarFp.deletePersonalAccessToken(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
         * @summary List Personal Access Tokens
         * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listPersonalAccessTokens: function (ownerId, filters, axiosOptions) {
            return localVarFp.listPersonalAccessTokens(ownerId, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This performs a targeted update to the field(s) of a Personal Access Token.
         * @summary Patch Personal Access Token
         * @param {string} id The Personal Access Token id
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchPersonalAccessToken: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchPersonalAccessToken(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PersonalAccessTokensBetaApiFactory = PersonalAccessTokensBetaApiFactory;
/**
 * PersonalAccessTokensBetaApi - object-oriented interface
 * @export
 * @class PersonalAccessTokensBetaApi
 * @extends {BaseAPI}
 */
var PersonalAccessTokensBetaApi = /** @class */ (function (_super) {
    __extends(PersonalAccessTokensBetaApi, _super);
    function PersonalAccessTokensBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {PersonalAccessTokensBetaApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    PersonalAccessTokensBetaApi.prototype.createPersonalAccessToken = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PersonalAccessTokensBetaApiFp)(this.configuration).createPersonalAccessToken(requestParameters.createPersonalAccessTokenRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {PersonalAccessTokensBetaApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    PersonalAccessTokensBetaApi.prototype.deletePersonalAccessToken = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PersonalAccessTokensBetaApiFp)(this.configuration).deletePersonalAccessToken(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {PersonalAccessTokensBetaApiListPersonalAccessTokensRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    PersonalAccessTokensBetaApi.prototype.listPersonalAccessTokens = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.PersonalAccessTokensBetaApiFp)(this.configuration).listPersonalAccessTokens(requestParameters.ownerId, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token.
     * @summary Patch Personal Access Token
     * @param {PersonalAccessTokensBetaApiPatchPersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    PersonalAccessTokensBetaApi.prototype.patchPersonalAccessToken = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PersonalAccessTokensBetaApiFp)(this.configuration).patchPersonalAccessToken(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PersonalAccessTokensBetaApi;
}(base_1.BaseAPI));
exports.PersonalAccessTokensBetaApi = PersonalAccessTokensBetaApi;
/**
 * PublicIdentitiesConfigBetaApi - axios parameter creator
 * @export
 */
var PublicIdentitiesConfigBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This gets details of public identity config.
         * @summary Get Public Identity Config
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPublicIdentityConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/public-identities-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates the details of public identity config.
         * @summary Update Public Identity Config
         * @param {PublicIdentityConfigBeta} publicIdentityConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicIdentityConfig: function (publicIdentityConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'publicIdentityConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updatePublicIdentityConfig', 'publicIdentityConfigBeta', publicIdentityConfigBeta);
                            localVarPath = "/public-identities-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(publicIdentityConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PublicIdentitiesConfigBetaApiAxiosParamCreator = PublicIdentitiesConfigBetaApiAxiosParamCreator;
/**
 * PublicIdentitiesConfigBetaApi - functional programming interface
 * @export
 */
var PublicIdentitiesConfigBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PublicIdentitiesConfigBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This gets details of public identity config.
         * @summary Get Public Identity Config
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPublicIdentityConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPublicIdentityConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates the details of public identity config.
         * @summary Update Public Identity Config
         * @param {PublicIdentityConfigBeta} publicIdentityConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicIdentityConfig: function (publicIdentityConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updatePublicIdentityConfig(publicIdentityConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.PublicIdentitiesConfigBetaApiFp = PublicIdentitiesConfigBetaApiFp;
/**
 * PublicIdentitiesConfigBetaApi - factory interface
 * @export
 */
var PublicIdentitiesConfigBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PublicIdentitiesConfigBetaApiFp)(configuration);
    return {
        /**
         * This gets details of public identity config.
         * @summary Get Public Identity Config
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPublicIdentityConfig: function (axiosOptions) {
            return localVarFp.getPublicIdentityConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates the details of public identity config.
         * @summary Update Public Identity Config
         * @param {PublicIdentityConfigBeta} publicIdentityConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updatePublicIdentityConfig: function (publicIdentityConfigBeta, axiosOptions) {
            return localVarFp.updatePublicIdentityConfig(publicIdentityConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PublicIdentitiesConfigBetaApiFactory = PublicIdentitiesConfigBetaApiFactory;
/**
 * PublicIdentitiesConfigBetaApi - object-oriented interface
 * @export
 * @class PublicIdentitiesConfigBetaApi
 * @extends {BaseAPI}
 */
var PublicIdentitiesConfigBetaApi = /** @class */ (function (_super) {
    __extends(PublicIdentitiesConfigBetaApi, _super);
    function PublicIdentitiesConfigBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This gets details of public identity config.
     * @summary Get Public Identity Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesConfigBetaApi
     */
    PublicIdentitiesConfigBetaApi.prototype.getPublicIdentityConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.PublicIdentitiesConfigBetaApiFp)(this.configuration).getPublicIdentityConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates the details of public identity config.
     * @summary Update Public Identity Config
     * @param {PublicIdentitiesConfigBetaApiUpdatePublicIdentityConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesConfigBetaApi
     */
    PublicIdentitiesConfigBetaApi.prototype.updatePublicIdentityConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.PublicIdentitiesConfigBetaApiFp)(this.configuration).updatePublicIdentityConfig(requestParameters.publicIdentityConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PublicIdentitiesConfigBetaApi;
}(base_1.BaseAPI));
exports.PublicIdentitiesConfigBetaApi = PublicIdentitiesConfigBetaApi;
/**
 * RequestableObjectsBetaApi - axios parameter creator
 * @export
 */
var RequestableObjectsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
         * @summary Requestable Objects List
         * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
         * @param {Array<RequestableObjectTypeBeta>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
         * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
         * @param {Array<RequestableObjectRequestStatusBeta>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listRequestableObjects: function (identityId, types, term, statuses, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/requestable-objects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (identityId !== undefined) {
                                localVarQueryParameter['identity-id'] = identityId;
                            }
                            if (types) {
                                localVarQueryParameter['types'] = types.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (term !== undefined) {
                                localVarQueryParameter['term'] = term;
                            }
                            if (statuses) {
                                localVarQueryParameter['statuses'] = statuses.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RequestableObjectsBetaApiAxiosParamCreator = RequestableObjectsBetaApiAxiosParamCreator;
/**
 * RequestableObjectsBetaApi - functional programming interface
 * @export
 */
var RequestableObjectsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RequestableObjectsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
         * @summary Requestable Objects List
         * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
         * @param {Array<RequestableObjectTypeBeta>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
         * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
         * @param {Array<RequestableObjectRequestStatusBeta>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listRequestableObjects: function (identityId, types, term, statuses, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listRequestableObjects(identityId, types, term, statuses, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.RequestableObjectsBetaApiFp = RequestableObjectsBetaApiFp;
/**
 * RequestableObjectsBetaApi - factory interface
 * @export
 */
var RequestableObjectsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RequestableObjectsBetaApiFp)(configuration);
    return {
        /**
         * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
         * @summary Requestable Objects List
         * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
         * @param {Array<RequestableObjectTypeBeta>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
         * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
         * @param {Array<RequestableObjectRequestStatusBeta>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listRequestableObjects: function (identityId, types, term, statuses, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listRequestableObjects(identityId, types, term, statuses, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RequestableObjectsBetaApiFactory = RequestableObjectsBetaApiFactory;
/**
 * RequestableObjectsBetaApi - object-oriented interface
 * @export
 * @class RequestableObjectsBetaApi
 * @extends {BaseAPI}
 */
var RequestableObjectsBetaApi = /** @class */ (function (_super) {
    __extends(RequestableObjectsBetaApi, _super);
    function RequestableObjectsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {RequestableObjectsBetaApiListRequestableObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestableObjectsBetaApi
     */
    RequestableObjectsBetaApi.prototype.listRequestableObjects = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.RequestableObjectsBetaApiFp)(this.configuration).listRequestableObjects(requestParameters.identityId, requestParameters.types, requestParameters.term, requestParameters.statuses, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RequestableObjectsBetaApi;
}(base_1.BaseAPI));
exports.RequestableObjectsBetaApi = RequestableObjectsBetaApi;
/**
 * RoleInsightsBetaApi - axios parameter creator
 * @export
 */
var RoleInsightsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
         * @summary Generate insights for roles
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createRoleInsightRequests: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/role-insights/requests";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns the entitlement insights for a role.
         * @summary Download entitlement insights for a role
         * @param {string} insightId The role insight id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        downloadRoleInsightsEntitlementsChanges: function (insightId, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'insightId' is not null or undefined
                            (0, common_1.assertParamExists)('downloadRoleInsightsEntitlementsChanges', 'insightId', insightId);
                            localVarPath = "/role-insights/{insightId}/entitlement-changes/download"
                                .replace("{".concat("insightId", "}"), encodeURIComponent(String(insightId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
         * @summary Get identities for a suggested entitlement (for a role)
         * @param {string} insightId The role insight id
         * @param {string} entitlementId The entitlement id
         * @param {boolean} [hasEntitlement] Identity has this entitlement or not
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementChangesIdentities: function (insightId, entitlementId, hasEntitlement, offset, limit, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'insightId' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementChangesIdentities', 'insightId', insightId);
                            // verify required parameter 'entitlementId' is not null or undefined
                            (0, common_1.assertParamExists)('getEntitlementChangesIdentities', 'entitlementId', entitlementId);
                            localVarPath = "/role-insights/{insightId}/entitlement-changes/{entitlementId}/identities"
                                .replace("{".concat("insightId", "}"), encodeURIComponent(String(insightId)))
                                .replace("{".concat("entitlementId", "}"), encodeURIComponent(String(entitlementId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (hasEntitlement !== undefined) {
                                localVarQueryParameter['hasEntitlement'] = hasEntitlement;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint gets role insights information for a role.
         * @summary Get a single role insight
         * @param {string} insightId The role insight id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsight: function (insightId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'insightId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleInsight', 'insightId', insightId);
                            localVarPath = "/role-insights/{insightId}"
                                .replace("{".concat("insightId", "}"), encodeURIComponent(String(insightId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns detailed role insights for each role.
         * @summary Get role insights
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsights: function (offset, limit, count, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/role-insights";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
         * @summary Get current entitlement for a role
         * @param {string} insightId The role insight id
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsCurrentEntitlements: function (insightId, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'insightId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleInsightsCurrentEntitlements', 'insightId', insightId);
                            localVarPath = "/role-insights/{insightId}/current-entitlements"
                                .replace("{".concat("insightId", "}"), encodeURIComponent(String(insightId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns entitlement insights for a role.
         * @summary Get entitlement insights for a role
         * @param {string} insightId The role insight id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsEntitlementsChanges: function (insightId, sorters, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'insightId' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleInsightsEntitlementsChanges', 'insightId', insightId);
                            localVarPath = "/role-insights/{insightId}/entitlement-changes"
                                .replace("{".concat("insightId", "}"), encodeURIComponent(String(insightId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint returns details of a prior role insights request.
         * @summary Returns metadata from prior request.
         * @param {string} id The role insights request id
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRoleInsightsRequests: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleInsightsRequests', 'id', id);
                            localVarPath = "/role-insights/requests/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This method returns high level summary information for role insights for a customer.
         * @summary Get role insights summary information
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsSummary: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/role-insights/summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RoleInsightsBetaApiAxiosParamCreator = RoleInsightsBetaApiAxiosParamCreator;
/**
 * RoleInsightsBetaApi - functional programming interface
 * @export
 */
var RoleInsightsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RoleInsightsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
         * @summary Generate insights for roles
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createRoleInsightRequests: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createRoleInsightRequests(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns the entitlement insights for a role.
         * @summary Download entitlement insights for a role
         * @param {string} insightId The role insight id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        downloadRoleInsightsEntitlementsChanges: function (insightId, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.downloadRoleInsightsEntitlementsChanges(insightId, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
         * @summary Get identities for a suggested entitlement (for a role)
         * @param {string} insightId The role insight id
         * @param {string} entitlementId The entitlement id
         * @param {boolean} [hasEntitlement] Identity has this entitlement or not
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementChangesIdentities: function (insightId, entitlementId, hasEntitlement, offset, limit, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEntitlementChangesIdentities(insightId, entitlementId, hasEntitlement, offset, limit, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint gets role insights information for a role.
         * @summary Get a single role insight
         * @param {string} insightId The role insight id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsight: function (insightId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleInsight(insightId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns detailed role insights for each role.
         * @summary Get role insights
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsights: function (offset, limit, count, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleInsights(offset, limit, count, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
         * @summary Get current entitlement for a role
         * @param {string} insightId The role insight id
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsCurrentEntitlements: function (insightId, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleInsightsCurrentEntitlements(insightId, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns entitlement insights for a role.
         * @summary Get entitlement insights for a role
         * @param {string} insightId The role insight id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsEntitlementsChanges: function (insightId, sorters, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleInsightsEntitlementsChanges(insightId, sorters, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint returns details of a prior role insights request.
         * @summary Returns metadata from prior request.
         * @param {string} id The role insights request id
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRoleInsightsRequests: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleInsightsRequests(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This method returns high level summary information for role insights for a customer.
         * @summary Get role insights summary information
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsSummary: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleInsightsSummary(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.RoleInsightsBetaApiFp = RoleInsightsBetaApiFp;
/**
 * RoleInsightsBetaApi - factory interface
 * @export
 */
var RoleInsightsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RoleInsightsBetaApiFp)(configuration);
    return {
        /**
         * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
         * @summary Generate insights for roles
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createRoleInsightRequests: function (axiosOptions) {
            return localVarFp.createRoleInsightRequests(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns the entitlement insights for a role.
         * @summary Download entitlement insights for a role
         * @param {string} insightId The role insight id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        downloadRoleInsightsEntitlementsChanges: function (insightId, sorters, filters, axiosOptions) {
            return localVarFp.downloadRoleInsightsEntitlementsChanges(insightId, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
         * @summary Get identities for a suggested entitlement (for a role)
         * @param {string} insightId The role insight id
         * @param {string} entitlementId The entitlement id
         * @param {boolean} [hasEntitlement] Identity has this entitlement or not
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlementChangesIdentities: function (insightId, entitlementId, hasEntitlement, offset, limit, count, sorters, filters, axiosOptions) {
            return localVarFp.getEntitlementChangesIdentities(insightId, entitlementId, hasEntitlement, offset, limit, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint gets role insights information for a role.
         * @summary Get a single role insight
         * @param {string} insightId The role insight id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsight: function (insightId, axiosOptions) {
            return localVarFp.getRoleInsight(insightId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns detailed role insights for each role.
         * @summary Get role insights
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsights: function (offset, limit, count, sorters, filters, axiosOptions) {
            return localVarFp.getRoleInsights(offset, limit, count, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
         * @summary Get current entitlement for a role
         * @param {string} insightId The role insight id
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsCurrentEntitlements: function (insightId, filters, axiosOptions) {
            return localVarFp.getRoleInsightsCurrentEntitlements(insightId, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns entitlement insights for a role.
         * @summary Get entitlement insights for a role
         * @param {string} insightId The role insight id
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsEntitlementsChanges: function (insightId, sorters, filters, axiosOptions) {
            return localVarFp.getRoleInsightsEntitlementsChanges(insightId, sorters, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint returns details of a prior role insights request.
         * @summary Returns metadata from prior request.
         * @param {string} id The role insights request id
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getRoleInsightsRequests: function (id, axiosOptions) {
            return localVarFp.getRoleInsightsRequests(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This method returns high level summary information for role insights for a customer.
         * @summary Get role insights summary information
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleInsightsSummary: function (axiosOptions) {
            return localVarFp.getRoleInsightsSummary(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RoleInsightsBetaApiFactory = RoleInsightsBetaApiFactory;
/**
 * RoleInsightsBetaApi - object-oriented interface
 * @export
 * @class RoleInsightsBetaApi
 * @extends {BaseAPI}
 */
var RoleInsightsBetaApi = /** @class */ (function (_super) {
    __extends(RoleInsightsBetaApi, _super);
    function RoleInsightsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
     * @summary Generate insights for roles
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.createRoleInsightRequests = function (axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).createRoleInsightRequests(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns the entitlement insights for a role.
     * @summary Download entitlement insights for a role
     * @param {RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChangesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.downloadRoleInsightsEntitlementsChanges = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).downloadRoleInsightsEntitlementsChanges(requestParameters.insightId, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
     * @summary Get identities for a suggested entitlement (for a role)
     * @param {RoleInsightsBetaApiGetEntitlementChangesIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getEntitlementChangesIdentities = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getEntitlementChangesIdentities(requestParameters.insightId, requestParameters.entitlementId, requestParameters.hasEntitlement, requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint gets role insights information for a role.
     * @summary Get a single role insight
     * @param {RoleInsightsBetaApiGetRoleInsightRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getRoleInsight = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getRoleInsight(requestParameters.insightId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns detailed role insights for each role.
     * @summary Get role insights
     * @param {RoleInsightsBetaApiGetRoleInsightsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getRoleInsights = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getRoleInsights(requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
     * @summary Get current entitlement for a role
     * @param {RoleInsightsBetaApiGetRoleInsightsCurrentEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getRoleInsightsCurrentEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getRoleInsightsCurrentEntitlements(requestParameters.insightId, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns entitlement insights for a role.
     * @summary Get entitlement insights for a role
     * @param {RoleInsightsBetaApiGetRoleInsightsEntitlementsChangesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getRoleInsightsEntitlementsChanges = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getRoleInsightsEntitlementsChanges(requestParameters.insightId, requestParameters.sorters, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint returns details of a prior role insights request.
     * @summary Returns metadata from prior request.
     * @param {RoleInsightsBetaApiGetRoleInsightsRequestsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getRoleInsightsRequests = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getRoleInsightsRequests(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This method returns high level summary information for role insights for a customer.
     * @summary Get role insights summary information
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    RoleInsightsBetaApi.prototype.getRoleInsightsSummary = function (axiosOptions) {
        var _this = this;
        return (0, exports.RoleInsightsBetaApiFp)(this.configuration).getRoleInsightsSummary(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RoleInsightsBetaApi;
}(base_1.BaseAPI));
exports.RoleInsightsBetaApi = RoleInsightsBetaApi;
/**
 * RolesBetaApi - axios parameter creator
 * @export
 */
var RolesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
         * @summary Create a Role
         * @param {RoleBeta} roleBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (roleBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createRole', 'roleBeta', roleBeta);
                            localVarPath = "/roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
         * @summary Delete Role(s)
         * @param {RoleBulkDeleteRequestBeta} roleBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteBulkRoles: function (roleBulkDeleteRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleBulkDeleteRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteBulkRoles', 'roleBulkDeleteRequestBeta', roleBulkDeleteRequestBeta);
                            localVarPath = "/roles/bulk-delete";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(roleBulkDeleteRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
         * @summary Delete a Role
         * @param {string} id ID of the Role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteRole', 'id', id);
                            localVarPath = "/roles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
         * @summary Get a Role
         * @param {string} id ID of the Role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getRole', 'id', id);
                            localVarPath = "/roles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Identities assigned a Role
         * @param {string} id ID of the Role for which the assigned Identities are to be listed
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignedIdentities: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleAssignedIdentities', 'id', id);
                            localVarPath = "/roles/{id}/assigned-identities"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary List role\'s Entitlements
         * @param {string} id ID of the containing role
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleEntitlements: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getRoleEntitlements', 'id', id);
                            localVarPath = "/roles/{id}/entitlements"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary List Roles
         * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
         * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (forSubadmin !== undefined) {
                                localVarQueryParameter['for-subadmin'] = forSubadmin;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (forSegmentIds !== undefined) {
                                localVarQueryParameter['for-segment-ids'] = forSegmentIds;
                            }
                            if (includeUnsegmented !== undefined) {
                                localVarQueryParameter['include-unsegmented'] = includeUnsegmented;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
         * @summary Patch a specified Role
         * @param {string} id ID of the Role to patch
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRole: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchRole', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchRole', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/roles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RolesBetaApiAxiosParamCreator = RolesBetaApiAxiosParamCreator;
/**
 * RolesBetaApi - functional programming interface
 * @export
 */
var RolesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RolesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
         * @summary Create a Role
         * @param {RoleBeta} roleBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (roleBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createRole(roleBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
         * @summary Delete Role(s)
         * @param {RoleBulkDeleteRequestBeta} roleBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteBulkRoles: function (roleBulkDeleteRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteBulkRoles(roleBulkDeleteRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
         * @summary Delete a Role
         * @param {string} id ID of the Role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteRole(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
         * @summary Get a Role
         * @param {string} id ID of the Role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRole(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Identities assigned a Role
         * @param {string} id ID of the Role for which the assigned Identities are to be listed
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignedIdentities: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleAssignedIdentities(id, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary List role\'s Entitlements
         * @param {string} id ID of the containing role
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleEntitlements: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getRoleEntitlements(id, limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary List Roles
         * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
         * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listRoles(forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
         * @summary Patch a specified Role
         * @param {string} id ID of the Role to patch
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRole: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchRole(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.RolesBetaApiFp = RolesBetaApiFp;
/**
 * RolesBetaApi - factory interface
 * @export
 */
var RolesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RolesBetaApiFp)(configuration);
    return {
        /**
         * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
         * @summary Create a Role
         * @param {RoleBeta} roleBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createRole: function (roleBeta, axiosOptions) {
            return localVarFp.createRole(roleBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
         * @summary Delete Role(s)
         * @param {RoleBulkDeleteRequestBeta} roleBulkDeleteRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteBulkRoles: function (roleBulkDeleteRequestBeta, axiosOptions) {
            return localVarFp.deleteBulkRoles(roleBulkDeleteRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
         * @summary Delete a Role
         * @param {string} id ID of the Role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: function (id, axiosOptions) {
            return localVarFp.deleteRole(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
         * @summary Get a Role
         * @param {string} id ID of the Role
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRole: function (id, axiosOptions) {
            return localVarFp.getRole(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Identities assigned a Role
         * @param {string} id ID of the Role for which the assigned Identities are to be listed
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleAssignedIdentities: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getRoleAssignedIdentities(id, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary List role\'s Entitlements
         * @param {string} id ID of the containing role
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getRoleEntitlements: function (id, limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getRoleEntitlements(id, limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary List Roles
         * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
         * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
         * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
         * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: function (forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions) {
            return localVarFp.listRoles(forSubadmin, limit, offset, count, filters, sorters, forSegmentIds, includeUnsegmented, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
         * @summary Patch a specified Role
         * @param {string} id ID of the Role to patch
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchRole: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchRole(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RolesBetaApiFactory = RolesBetaApiFactory;
/**
 * RolesBetaApi - object-oriented interface
 * @export
 * @class RolesBetaApi
 * @extends {BaseAPI}
 */
var RolesBetaApi = /** @class */ (function (_super) {
    __extends(RolesBetaApi, _super);
    function RolesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {RolesBetaApiCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.createRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).createRole(requestParameters.roleBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RolesBetaApiDeleteBulkRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.deleteBulkRoles = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).deleteBulkRoles(requestParameters.roleBulkDeleteRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {RolesBetaApiDeleteRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.deleteRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).deleteRole(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {RolesBetaApiGetRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.getRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).getRole(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Identities assigned a Role
     * @param {RolesBetaApiGetRoleAssignedIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.getRoleAssignedIdentities = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).getRoleAssignedIdentities(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List role\'s Entitlements
     * @param {RolesBetaApiGetRoleEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.getRoleEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).getRoleEntitlements(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {RolesBetaApiListRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.listRoles = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.RolesBetaApiFp)(this.configuration).listRoles(requestParameters.forSubadmin, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, requestParameters.forSegmentIds, requestParameters.includeUnsegmented, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {RolesBetaApiPatchRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    RolesBetaApi.prototype.patchRole = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.RolesBetaApiFp)(this.configuration).patchRole(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RolesBetaApi;
}(base_1.BaseAPI));
exports.RolesBetaApi = RolesBetaApi;
/**
 * SIMIntegrationsBetaApi - axios parameter creator
 * @export
 */
var SIMIntegrationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Create new SIM integration
         * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta DTO containing the details of the SIM integration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSIMIntegration: function (simIntegrationDetailsBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'simIntegrationDetailsBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSIMIntegration', 'simIntegrationDetailsBeta', simIntegrationDetailsBeta);
                            localVarPath = "/sim-integrations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(simIntegrationDetailsBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Delete a SIM integration
         * @param {string} id The id of the integration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSIMIntegration: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSIMIntegration', 'id', id);
                            localVarPath = "/sim-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get a SIM integration details.
         * @param {string} id The id of the integration.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSIMIntegration: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSIMIntegration', 'id', id);
                            localVarPath = "/sim-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary List the existing SIM integrations.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSIMIntegrations: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sim-integrations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Patch a SIM beforeProvisioningRule attribute.
         * @param {string} id SIM integration id
         * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchBeforeProvisioningRule: function (id, jsonPatchBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchBeforeProvisioningRule', 'id', id);
                            // verify required parameter 'jsonPatchBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchBeforeProvisioningRule', 'jsonPatchBeta', jsonPatchBeta);
                            localVarPath = "/sim-integrations/{id}/beforeProvisioningRule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Patch a SIM attribute.
         * @param {string} id SIM integration id
         * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSIMAttributes: function (id, jsonPatchBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchSIMAttributes', 'id', id);
                            // verify required parameter 'jsonPatchBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchSIMAttributes', 'jsonPatchBeta', jsonPatchBeta);
                            localVarPath = "/sim-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update an existing SIM integration
         * @param {string} id The id of the integration.
         * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta The full DTO of the integration containing the updated model
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSIMIntegration: function (id, simIntegrationDetailsBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putSIMIntegration', 'id', id);
                            // verify required parameter 'simIntegrationDetailsBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putSIMIntegration', 'simIntegrationDetailsBeta', simIntegrationDetailsBeta);
                            localVarPath = "/sim-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(simIntegrationDetailsBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SIMIntegrationsBetaApiAxiosParamCreator = SIMIntegrationsBetaApiAxiosParamCreator;
/**
 * SIMIntegrationsBetaApi - functional programming interface
 * @export
 */
var SIMIntegrationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SIMIntegrationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Create new SIM integration
         * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta DTO containing the details of the SIM integration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSIMIntegration: function (simIntegrationDetailsBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSIMIntegration(simIntegrationDetailsBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Delete a SIM integration
         * @param {string} id The id of the integration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSIMIntegration: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSIMIntegration(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get a SIM integration details.
         * @param {string} id The id of the integration.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSIMIntegration: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSIMIntegration(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary List the existing SIM integrations.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSIMIntegrations: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSIMIntegrations(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Patch a SIM beforeProvisioningRule attribute.
         * @param {string} id SIM integration id
         * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchBeforeProvisioningRule: function (id, jsonPatchBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchBeforeProvisioningRule(id, jsonPatchBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Patch a SIM attribute.
         * @param {string} id SIM integration id
         * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSIMAttributes: function (id, jsonPatchBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchSIMAttributes(id, jsonPatchBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update an existing SIM integration
         * @param {string} id The id of the integration.
         * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta The full DTO of the integration containing the updated model
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSIMIntegration: function (id, simIntegrationDetailsBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSIMIntegration(id, simIntegrationDetailsBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SIMIntegrationsBetaApiFp = SIMIntegrationsBetaApiFp;
/**
 * SIMIntegrationsBetaApi - factory interface
 * @export
 */
var SIMIntegrationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SIMIntegrationsBetaApiFp)(configuration);
    return {
        /**
         * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Create new SIM integration
         * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta DTO containing the details of the SIM integration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSIMIntegration: function (simIntegrationDetailsBeta, axiosOptions) {
            return localVarFp.createSIMIntegration(simIntegrationDetailsBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Delete a SIM integration
         * @param {string} id The id of the integration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSIMIntegration: function (id, axiosOptions) {
            return localVarFp.deleteSIMIntegration(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get a SIM integration details.
         * @param {string} id The id of the integration.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSIMIntegration: function (id, axiosOptions) {
            return localVarFp.getSIMIntegration(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary List the existing SIM integrations.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSIMIntegrations: function (axiosOptions) {
            return localVarFp.getSIMIntegrations(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Patch a SIM beforeProvisioningRule attribute.
         * @param {string} id SIM integration id
         * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchBeforeProvisioningRule: function (id, jsonPatchBeta, axiosOptions) {
            return localVarFp.patchBeforeProvisioningRule(id, jsonPatchBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Patch a SIM attribute.
         * @param {string} id SIM integration id
         * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSIMAttributes: function (id, jsonPatchBeta, axiosOptions) {
            return localVarFp.patchSIMAttributes(id, jsonPatchBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update an existing SIM integration
         * @param {string} id The id of the integration.
         * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta The full DTO of the integration containing the updated model
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSIMIntegration: function (id, simIntegrationDetailsBeta, axiosOptions) {
            return localVarFp.putSIMIntegration(id, simIntegrationDetailsBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SIMIntegrationsBetaApiFactory = SIMIntegrationsBetaApiFactory;
/**
 * SIMIntegrationsBetaApi - object-oriented interface
 * @export
 * @class SIMIntegrationsBetaApi
 * @extends {BaseAPI}
 */
var SIMIntegrationsBetaApi = /** @class */ (function (_super) {
    __extends(SIMIntegrationsBetaApi, _super);
    function SIMIntegrationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new SIM integration
     * @param {SIMIntegrationsBetaApiCreateSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.createSIMIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).createSIMIntegration(requestParameters.simIntegrationDetailsBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a SIM integration
     * @param {SIMIntegrationsBetaApiDeleteSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.deleteSIMIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).deleteSIMIntegration(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a SIM integration details.
     * @param {SIMIntegrationsBetaApiGetSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.getSIMIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).getSIMIntegration(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List the existing SIM integrations.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.getSIMIntegrations = function (axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).getSIMIntegrations(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM beforeProvisioningRule attribute.
     * @param {SIMIntegrationsBetaApiPatchBeforeProvisioningRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.patchBeforeProvisioningRule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).patchBeforeProvisioningRule(requestParameters.id, requestParameters.jsonPatchBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM attribute.
     * @param {SIMIntegrationsBetaApiPatchSIMAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.patchSIMAttributes = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).patchSIMAttributes(requestParameters.id, requestParameters.jsonPatchBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update an existing SIM integration
     * @param {SIMIntegrationsBetaApiPutSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    SIMIntegrationsBetaApi.prototype.putSIMIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SIMIntegrationsBetaApiFp)(this.configuration).putSIMIntegration(requestParameters.id, requestParameters.simIntegrationDetailsBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SIMIntegrationsBetaApi;
}(base_1.BaseAPI));
exports.SIMIntegrationsBetaApi = SIMIntegrationsBetaApi;
/**
 * SODPoliciesBetaApi - axios parameter creator
 * @export
 */
var SODPoliciesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
         * @summary Create SOD policy
         * @param {SodPolicyBeta} sodPolicyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createSodPolicy: function (sodPolicyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sodPolicyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSodPolicy', 'sodPolicyBeta', sodPolicyBeta);
                            localVarPath = "/sod-policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sodPolicyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Delete SOD policy by ID
         * @param {string} id The ID of the SOD Policy to delete.
         * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSodPolicy: function (id, logical, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSodPolicy', 'id', id);
                            localVarPath = "/sod-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (logical !== undefined) {
                                localVarQueryParameter['logical'] = logical;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Delete SOD policy schedule
         * @param {string} id The ID of the SOD policy the schedule must be deleted for.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSodPolicySchedule: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSodPolicySchedule', 'id', id);
                            localVarPath = "/sod-policies/{id}/schedule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
         * @summary Download custom violation report
         * @param {string} reportResultId The ID of the report reference to download.
         * @param {string} fileName Custom Name for the  file.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomViolationReport: function (reportResultId, fileName, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'reportResultId' is not null or undefined
                            (0, common_1.assertParamExists)('getCustomViolationReport', 'reportResultId', reportResultId);
                            // verify required parameter 'fileName' is not null or undefined
                            (0, common_1.assertParamExists)('getCustomViolationReport', 'fileName', fileName);
                            localVarPath = "/sod-violation-report/{reportResultId}/download/{fileName}"
                                .replace("{".concat("reportResultId", "}"), encodeURIComponent(String(reportResultId)))
                                .replace("{".concat("fileName", "}"), encodeURIComponent(String(fileName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
         * @summary Download violation report
         * @param {string} reportResultId The ID of the report reference to download.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getDefaultViolationReport: function (reportResultId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'reportResultId' is not null or undefined
                            (0, common_1.assertParamExists)('getDefaultViolationReport', 'reportResultId', reportResultId);
                            localVarPath = "/sod-violation-report/{reportResultId}/download"
                                .replace("{".concat("reportResultId", "}"), encodeURIComponent(String(reportResultId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
         * @summary Get multi-report run task status
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodAllReportRunStatus: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sod-violation-report";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Get SOD policy by ID
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodPolicy: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSodPolicy', 'id', id);
                            localVarPath = "/sod-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
         * @summary Get SOD policy schedule
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodPolicySchedule: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSodPolicySchedule', 'id', id);
                            localVarPath = "/sod-policies/{id}/schedule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
         * @summary Get violation report run status
         * @param {string} reportResultId The ID of the report reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodViolationReportRunStatus: function (reportResultId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'reportResultId' is not null or undefined
                            (0, common_1.assertParamExists)('getSodViolationReportRunStatus', 'reportResultId', reportResultId);
                            localVarPath = "/sod-policies/sod-violation-report-status/{reportResultId}"
                                .replace("{".concat("reportResultId", "}"), encodeURIComponent(String(reportResultId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
         * @summary Get SOD violation report status
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodViolationReportStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSodViolationReportStatus', 'id', id);
                            localVarPath = "/sod-policies/{id}/violation-report"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets list of all SOD policies. Requires role of ORG_ADMIN
         * @summary List SOD policies
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listSodPolicies: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sod-policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
         * @summary Patch a SOD policy
         * @param {string} id The ID of the SOD policy being modified.
         * @param {Array<object>} requestBody A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        patchSodPolicy: function (id, requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchSodPolicy', 'id', id);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('patchSodPolicy', 'requestBody', requestBody);
                            localVarPath = "/sod-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Update SOD Policy schedule
         * @param {string} id The ID of the SOD policy to update its schedule.
         * @param {SodPolicyScheduleBeta} sodPolicyScheduleBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putPolicySchedule: function (id, sodPolicyScheduleBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putPolicySchedule', 'id', id);
                            // verify required parameter 'sodPolicyScheduleBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putPolicySchedule', 'sodPolicyScheduleBeta', sodPolicyScheduleBeta);
                            localVarPath = "/sod-policies/{id}/schedule"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sodPolicyScheduleBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Update SOD policy by ID
         * @param {string} id The ID of the SOD policy to update.
         * @param {SodPolicyBeta} sodPolicyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putSodPolicy: function (id, sodPolicyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putSodPolicy', 'id', id);
                            // verify required parameter 'sodPolicyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putSodPolicy', 'sodPolicyBeta', sodPolicyBeta);
                            localVarPath = "/sod-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sodPolicyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
         * @summary Runs all policies for org
         * @param {MultiPolicyRequestBeta} [multiPolicyRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startSodAllPoliciesForOrg: function (multiPolicyRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sod-violation-report/run";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(multiPolicyRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
         * @summary Runs SOD policy violation report
         * @param {string} id The SOD policy ID to run.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startSodPolicy: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('startSodPolicy', 'id', id);
                            localVarPath = "/sod-policies/{id}/violation-report/run"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SODPoliciesBetaApiAxiosParamCreator = SODPoliciesBetaApiAxiosParamCreator;
/**
 * SODPoliciesBetaApi - functional programming interface
 * @export
 */
var SODPoliciesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SODPoliciesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
         * @summary Create SOD policy
         * @param {SodPolicyBeta} sodPolicyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createSodPolicy: function (sodPolicyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSodPolicy(sodPolicyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Delete SOD policy by ID
         * @param {string} id The ID of the SOD Policy to delete.
         * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSodPolicy: function (id, logical, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSodPolicy(id, logical, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Delete SOD policy schedule
         * @param {string} id The ID of the SOD policy the schedule must be deleted for.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSodPolicySchedule: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSodPolicySchedule(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
         * @summary Download custom violation report
         * @param {string} reportResultId The ID of the report reference to download.
         * @param {string} fileName Custom Name for the  file.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomViolationReport: function (reportResultId, fileName, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCustomViolationReport(reportResultId, fileName, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
         * @summary Download violation report
         * @param {string} reportResultId The ID of the report reference to download.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getDefaultViolationReport: function (reportResultId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getDefaultViolationReport(reportResultId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
         * @summary Get multi-report run task status
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodAllReportRunStatus: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSodAllReportRunStatus(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Get SOD policy by ID
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodPolicy: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSodPolicy(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
         * @summary Get SOD policy schedule
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodPolicySchedule: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSodPolicySchedule(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
         * @summary Get violation report run status
         * @param {string} reportResultId The ID of the report reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodViolationReportRunStatus: function (reportResultId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSodViolationReportRunStatus(reportResultId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
         * @summary Get SOD violation report status
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodViolationReportStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSodViolationReportStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets list of all SOD policies. Requires role of ORG_ADMIN
         * @summary List SOD policies
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listSodPolicies: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSodPolicies(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
         * @summary Patch a SOD policy
         * @param {string} id The ID of the SOD policy being modified.
         * @param {Array<object>} requestBody A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        patchSodPolicy: function (id, requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchSodPolicy(id, requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Update SOD Policy schedule
         * @param {string} id The ID of the SOD policy to update its schedule.
         * @param {SodPolicyScheduleBeta} sodPolicyScheduleBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putPolicySchedule: function (id, sodPolicyScheduleBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putPolicySchedule(id, sodPolicyScheduleBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Update SOD policy by ID
         * @param {string} id The ID of the SOD policy to update.
         * @param {SodPolicyBeta} sodPolicyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putSodPolicy: function (id, sodPolicyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSodPolicy(id, sodPolicyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
         * @summary Runs all policies for org
         * @param {MultiPolicyRequestBeta} [multiPolicyRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startSodAllPoliciesForOrg: function (multiPolicyRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startSodAllPoliciesForOrg(multiPolicyRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
         * @summary Runs SOD policy violation report
         * @param {string} id The SOD policy ID to run.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startSodPolicy: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startSodPolicy(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SODPoliciesBetaApiFp = SODPoliciesBetaApiFp;
/**
 * SODPoliciesBetaApi - factory interface
 * @export
 */
var SODPoliciesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SODPoliciesBetaApiFp)(configuration);
    return {
        /**
         * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
         * @summary Create SOD policy
         * @param {SodPolicyBeta} sodPolicyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createSodPolicy: function (sodPolicyBeta, axiosOptions) {
            return localVarFp.createSodPolicy(sodPolicyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Delete SOD policy by ID
         * @param {string} id The ID of the SOD Policy to delete.
         * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSodPolicy: function (id, logical, axiosOptions) {
            return localVarFp.deleteSodPolicy(id, logical, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Delete SOD policy schedule
         * @param {string} id The ID of the SOD policy the schedule must be deleted for.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        deleteSodPolicySchedule: function (id, axiosOptions) {
            return localVarFp.deleteSodPolicySchedule(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
         * @summary Download custom violation report
         * @param {string} reportResultId The ID of the report reference to download.
         * @param {string} fileName Custom Name for the  file.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getCustomViolationReport: function (reportResultId, fileName, axiosOptions) {
            return localVarFp.getCustomViolationReport(reportResultId, fileName, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
         * @summary Download violation report
         * @param {string} reportResultId The ID of the report reference to download.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getDefaultViolationReport: function (reportResultId, axiosOptions) {
            return localVarFp.getDefaultViolationReport(reportResultId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
         * @summary Get multi-report run task status
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodAllReportRunStatus: function (axiosOptions) {
            return localVarFp.getSodAllReportRunStatus(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Get SOD policy by ID
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodPolicy: function (id, axiosOptions) {
            return localVarFp.getSodPolicy(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
         * @summary Get SOD policy schedule
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodPolicySchedule: function (id, axiosOptions) {
            return localVarFp.getSodPolicySchedule(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
         * @summary Get violation report run status
         * @param {string} reportResultId The ID of the report reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodViolationReportRunStatus: function (reportResultId, axiosOptions) {
            return localVarFp.getSodViolationReportRunStatus(reportResultId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
         * @summary Get SOD violation report status
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getSodViolationReportStatus: function (id, axiosOptions) {
            return localVarFp.getSodViolationReportStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets list of all SOD policies. Requires role of ORG_ADMIN
         * @summary List SOD policies
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listSodPolicies: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listSodPolicies(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
         * @summary Patch a SOD policy
         * @param {string} id The ID of the SOD policy being modified.
         * @param {Array<object>} requestBody A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        patchSodPolicy: function (id, requestBody, axiosOptions) {
            return localVarFp.patchSodPolicy(id, requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Update SOD Policy schedule
         * @param {string} id The ID of the SOD policy to update its schedule.
         * @param {SodPolicyScheduleBeta} sodPolicyScheduleBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putPolicySchedule: function (id, sodPolicyScheduleBeta, axiosOptions) {
            return localVarFp.putPolicySchedule(id, sodPolicyScheduleBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates a specified SOD policy. Requires role of ORG_ADMIN.
         * @summary Update SOD policy by ID
         * @param {string} id The ID of the SOD policy to update.
         * @param {SodPolicyBeta} sodPolicyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        putSodPolicy: function (id, sodPolicyBeta, axiosOptions) {
            return localVarFp.putSodPolicy(id, sodPolicyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
         * @summary Runs all policies for org
         * @param {MultiPolicyRequestBeta} [multiPolicyRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startSodAllPoliciesForOrg: function (multiPolicyRequestBeta, axiosOptions) {
            return localVarFp.startSodAllPoliciesForOrg(multiPolicyRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
         * @summary Runs SOD policy violation report
         * @param {string} id The SOD policy ID to run.
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startSodPolicy: function (id, axiosOptions) {
            return localVarFp.startSodPolicy(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SODPoliciesBetaApiFactory = SODPoliciesBetaApiFactory;
/**
 * SODPoliciesBetaApi - object-oriented interface
 * @export
 * @class SODPoliciesBetaApi
 * @extends {BaseAPI}
 */
var SODPoliciesBetaApi = /** @class */ (function (_super) {
    __extends(SODPoliciesBetaApi, _super);
    function SODPoliciesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SODPoliciesBetaApiCreateSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.createSodPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).createSodPolicy(requestParameters.sodPolicyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {SODPoliciesBetaApiDeleteSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.deleteSodPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).deleteSodPolicy(requestParameters.id, requestParameters.logical, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy schedule
     * @param {SODPoliciesBetaApiDeleteSodPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.deleteSodPolicySchedule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).deleteSodPolicySchedule(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download custom violation report
     * @param {SODPoliciesBetaApiGetCustomViolationReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getCustomViolationReport = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getCustomViolationReport(requestParameters.reportResultId, requestParameters.fileName, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download violation report
     * @param {SODPoliciesBetaApiGetDefaultViolationReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getDefaultViolationReport = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getDefaultViolationReport(requestParameters.reportResultId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getSodAllReportRunStatus = function (axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getSodAllReportRunStatus(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {SODPoliciesBetaApiGetSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getSodPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getSodPolicy(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
     * @summary Get SOD policy schedule
     * @param {SODPoliciesBetaApiGetSodPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getSodPolicySchedule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getSodPolicySchedule(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get violation report run status
     * @param {SODPoliciesBetaApiGetSodViolationReportRunStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getSodViolationReportRunStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getSodViolationReportRunStatus(requestParameters.reportResultId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get SOD violation report status
     * @param {SODPoliciesBetaApiGetSodViolationReportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.getSodViolationReportStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).getSodViolationReportStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {SODPoliciesBetaApiListSodPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.listSodPolicies = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).listSodPolicies(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch a SOD policy
     * @param {SODPoliciesBetaApiPatchSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.patchSodPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).patchSodPolicy(requestParameters.id, requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD Policy schedule
     * @param {SODPoliciesBetaApiPutPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.putPolicySchedule = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).putPolicySchedule(requestParameters.id, requestParameters.sodPolicyScheduleBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {SODPoliciesBetaApiPutSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.putSodPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).putSodPolicy(requestParameters.id, requestParameters.sodPolicyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
     * @summary Runs all policies for org
     * @param {SODPoliciesBetaApiStartSodAllPoliciesForOrgRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.startSodAllPoliciesForOrg = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).startSodAllPoliciesForOrg(requestParameters.multiPolicyRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
     * @summary Runs SOD policy violation report
     * @param {SODPoliciesBetaApiStartSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    SODPoliciesBetaApi.prototype.startSodPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODPoliciesBetaApiFp)(this.configuration).startSodPolicy(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SODPoliciesBetaApi;
}(base_1.BaseAPI));
exports.SODPoliciesBetaApi = SODPoliciesBetaApi;
/**
 * SODViolationsBetaApi - axios parameter creator
 * @export
 */
var SODViolationsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Predict SOD violations for identity.
         * @param {IdentityWithNewAccessBeta} identityWithNewAccessBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startPredictSodViolations: function (identityWithNewAccessBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityWithNewAccessBeta' is not null or undefined
                            (0, common_1.assertParamExists)('startPredictSodViolations', 'identityWithNewAccessBeta', identityWithNewAccessBeta);
                            localVarPath = "/sod-violations/predict";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(identityWithNewAccessBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SODViolationsBetaApiAxiosParamCreator = SODViolationsBetaApiAxiosParamCreator;
/**
 * SODViolationsBetaApi - functional programming interface
 * @export
 */
var SODViolationsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SODViolationsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Predict SOD violations for identity.
         * @param {IdentityWithNewAccessBeta} identityWithNewAccessBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startPredictSodViolations: function (identityWithNewAccessBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startPredictSodViolations(identityWithNewAccessBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SODViolationsBetaApiFp = SODViolationsBetaApiFp;
/**
 * SODViolationsBetaApi - factory interface
 * @export
 */
var SODViolationsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SODViolationsBetaApiFp)(configuration);
    return {
        /**
         * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Predict SOD violations for identity.
         * @param {IdentityWithNewAccessBeta} identityWithNewAccessBeta
         * @param {*} [axiosOptions] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        startPredictSodViolations: function (identityWithNewAccessBeta, axiosOptions) {
            return localVarFp.startPredictSodViolations(identityWithNewAccessBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SODViolationsBetaApiFactory = SODViolationsBetaApiFactory;
/**
 * SODViolationsBetaApi - object-oriented interface
 * @export
 * @class SODViolationsBetaApi
 * @extends {BaseAPI}
 */
var SODViolationsBetaApi = /** @class */ (function (_super) {
    __extends(SODViolationsBetaApi, _super);
    function SODViolationsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {SODViolationsBetaApiStartPredictSodViolationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODViolationsBetaApi
     */
    SODViolationsBetaApi.prototype.startPredictSodViolations = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SODViolationsBetaApiFp)(this.configuration).startPredictSodViolations(requestParameters.identityWithNewAccessBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SODViolationsBetaApi;
}(base_1.BaseAPI));
exports.SODViolationsBetaApi = SODViolationsBetaApi;
/**
 * SPConfigBetaApi - axios parameter creator
 * @export
 */
var SPConfigBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
         * @summary Initiates configuration objects export job
         * @param {ExportPayloadBeta} exportPayloadBeta Export options control what will be included in the export.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportSpConfig: function (exportPayloadBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'exportPayloadBeta' is not null or undefined
                            (0, common_1.assertParamExists)('exportSpConfig', 'exportPayloadBeta', exportPayloadBeta);
                            localVarPath = "/sp-config/export";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(exportPayloadBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
         * @summary Download export job result.
         * @param {string} id The ID of the export job whose results will be downloaded.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigExport: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSpConfigExport', 'id', id);
                            localVarPath = "/sp-config/export/{id}/download"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
         * @summary Get export job status
         * @param {string} id The ID of the export job whose status will be returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigExportStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSpConfigExportStatus', 'id', id);
                            localVarPath = "/sp-config/export/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
         * @summary Download import job result
         * @param {string} id The ID of the import job whose results will be downloaded.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigImport: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSpConfigImport', 'id', id);
                            localVarPath = "/sp-config/import/{id}/download"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
         * @summary Get import job status
         * @param {string} id The ID of the import job whose status will be returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigImportStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSpConfigImportStatus', 'id', id);
                            localVarPath = "/sp-config/import/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
         * @summary Initiates configuration objects import job
         * @param {any} data JSON file containing the objects to be imported.
         * @param {boolean} [preview] This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
         * @param {ImportOptionsBeta} [options]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSpConfig: function (data, preview, options, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'data' is not null or undefined
                            (0, common_1.assertParamExists)('importSpConfig', 'data', data);
                            localVarPath = "/sp-config/import";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (preview !== undefined) {
                                localVarQueryParameter['preview'] = preview;
                            }
                            if (data !== undefined) {
                                localVarFormParams.append('data', data);
                            }
                            if (options !== undefined) {
                                localVarFormParams.append('options', new Blob([JSON.stringify(options)], { type: "application/json", }));
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
         * @summary Get config object details
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSpConfigObjects: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sp-config/config-objects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SPConfigBetaApiAxiosParamCreator = SPConfigBetaApiAxiosParamCreator;
/**
 * SPConfigBetaApi - functional programming interface
 * @export
 */
var SPConfigBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SPConfigBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
         * @summary Initiates configuration objects export job
         * @param {ExportPayloadBeta} exportPayloadBeta Export options control what will be included in the export.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportSpConfig: function (exportPayloadBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportSpConfig(exportPayloadBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
         * @summary Download export job result.
         * @param {string} id The ID of the export job whose results will be downloaded.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigExport: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSpConfigExport(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
         * @summary Get export job status
         * @param {string} id The ID of the export job whose status will be returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigExportStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSpConfigExportStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
         * @summary Download import job result
         * @param {string} id The ID of the import job whose results will be downloaded.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigImport: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSpConfigImport(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
         * @summary Get import job status
         * @param {string} id The ID of the import job whose status will be returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigImportStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSpConfigImportStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
         * @summary Initiates configuration objects import job
         * @param {any} data JSON file containing the objects to be imported.
         * @param {boolean} [preview] This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
         * @param {ImportOptionsBeta} [options]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSpConfig: function (data, preview, options, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importSpConfig(data, preview, options, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
         * @summary Get config object details
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSpConfigObjects: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSpConfigObjects(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SPConfigBetaApiFp = SPConfigBetaApiFp;
/**
 * SPConfigBetaApi - factory interface
 * @export
 */
var SPConfigBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SPConfigBetaApiFp)(configuration);
    return {
        /**
         * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
         * @summary Initiates configuration objects export job
         * @param {ExportPayloadBeta} exportPayloadBeta Export options control what will be included in the export.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        exportSpConfig: function (exportPayloadBeta, axiosOptions) {
            return localVarFp.exportSpConfig(exportPayloadBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
         * @summary Download export job result.
         * @param {string} id The ID of the export job whose results will be downloaded.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigExport: function (id, axiosOptions) {
            return localVarFp.getSpConfigExport(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
         * @summary Get export job status
         * @param {string} id The ID of the export job whose status will be returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigExportStatus: function (id, axiosOptions) {
            return localVarFp.getSpConfigExportStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
         * @summary Download import job result
         * @param {string} id The ID of the import job whose results will be downloaded.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigImport: function (id, axiosOptions) {
            return localVarFp.getSpConfigImport(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
         * @summary Get import job status
         * @param {string} id The ID of the import job whose status will be returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSpConfigImportStatus: function (id, axiosOptions) {
            return localVarFp.getSpConfigImportStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
         * @summary Initiates configuration objects import job
         * @param {any} data JSON file containing the objects to be imported.
         * @param {boolean} [preview] This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
         * @param {ImportOptionsBeta} [options]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSpConfig: function (data, preview, options, axiosOptions) {
            return localVarFp.importSpConfig(data, preview, options, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
         * @summary Get config object details
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSpConfigObjects: function (axiosOptions) {
            return localVarFp.listSpConfigObjects(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SPConfigBetaApiFactory = SPConfigBetaApiFactory;
/**
 * SPConfigBetaApi - object-oriented interface
 * @export
 * @class SPConfigBetaApi
 * @extends {BaseAPI}
 */
var SPConfigBetaApi = /** @class */ (function (_super) {
    __extends(SPConfigBetaApi, _super);
    function SPConfigBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
     * @summary Initiates configuration objects export job
     * @param {SPConfigBetaApiExportSpConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.exportSpConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).exportSpConfig(requestParameters.exportPayloadBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Download export job result.
     * @param {SPConfigBetaApiGetSpConfigExportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.getSpConfigExport = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).getSpConfigExport(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Get export job status
     * @param {SPConfigBetaApiGetSpConfigExportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.getSpConfigExportStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).getSpConfigExportStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
     * @summary Download import job result
     * @param {SPConfigBetaApiGetSpConfigImportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.getSpConfigImport = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).getSpConfigImport(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Get import job status
     * @param {SPConfigBetaApiGetSpConfigImportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.getSpConfigImportStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).getSpConfigImportStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Initiates configuration objects import job
     * @param {SPConfigBetaApiImportSpConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.importSpConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).importSpConfig(requestParameters.data, requestParameters.preview, requestParameters.options, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
     * @summary Get config object details
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    SPConfigBetaApi.prototype.listSpConfigObjects = function (axiosOptions) {
        var _this = this;
        return (0, exports.SPConfigBetaApiFp)(this.configuration).listSpConfigObjects(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SPConfigBetaApi;
}(base_1.BaseAPI));
exports.SPConfigBetaApi = SPConfigBetaApi;
/**
 * SearchAttributeConfigurationBetaApi - axios parameter creator
 * @export
 */
var SearchAttributeConfigurationBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configure/create extended search attributes in IdentityNow.
         * @param {SearchAttributeConfigBeta} searchAttributeConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSearchAttributeConfig: function (searchAttributeConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'searchAttributeConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSearchAttributeConfig', 'searchAttributeConfigBeta', searchAttributeConfigBeta);
                            localVarPath = "/accounts/search-attribute-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(searchAttributeConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete an extended search attribute in IdentityNow.
         * @param {string} name Name of the extended search attribute configuration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchAttributeConfig: function (name, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSearchAttributeConfig', 'name', name);
                            localVarPath = "/accounts/search-attribute-config/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
         * @summary Retrieve a list of extended search attributes in IdentityNow.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSearchAttributeConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/accounts/search-attribute-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get the details of a specific extended search attribute in IdentityNow.
         * @param {string} name Name of the extended search attribute configuration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSearchAttributeConfig: function (name, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('getSingleSearchAttributeConfig', 'name', name);
                            localVarPath = "/accounts/search-attribute-config/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
         * @summary Update the details of a specific extended search attribute in IdentityNow.
         * @param {string} name Name of the Search Attribute Configuration to patch.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSearchAttributeConfig: function (name, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'name' is not null or undefined
                            (0, common_1.assertParamExists)('patchSearchAttributeConfig', 'name', name);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchSearchAttributeConfig', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/accounts/search-attribute-config/{name}"
                                .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SearchAttributeConfigurationBetaApiAxiosParamCreator = SearchAttributeConfigurationBetaApiAxiosParamCreator;
/**
 * SearchAttributeConfigurationBetaApi - functional programming interface
 * @export
 */
var SearchAttributeConfigurationBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SearchAttributeConfigurationBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configure/create extended search attributes in IdentityNow.
         * @param {SearchAttributeConfigBeta} searchAttributeConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSearchAttributeConfig: function (searchAttributeConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSearchAttributeConfig(searchAttributeConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete an extended search attribute in IdentityNow.
         * @param {string} name Name of the extended search attribute configuration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchAttributeConfig: function (name, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSearchAttributeConfig(name, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
         * @summary Retrieve a list of extended search attributes in IdentityNow.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSearchAttributeConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSearchAttributeConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get the details of a specific extended search attribute in IdentityNow.
         * @param {string} name Name of the extended search attribute configuration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSearchAttributeConfig: function (name, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSingleSearchAttributeConfig(name, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
         * @summary Update the details of a specific extended search attribute in IdentityNow.
         * @param {string} name Name of the Search Attribute Configuration to patch.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSearchAttributeConfig: function (name, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchSearchAttributeConfig(name, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SearchAttributeConfigurationBetaApiFp = SearchAttributeConfigurationBetaApiFp;
/**
 * SearchAttributeConfigurationBetaApi - factory interface
 * @export
 */
var SearchAttributeConfigurationBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SearchAttributeConfigurationBetaApiFp)(configuration);
    return {
        /**
         * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
         * @summary Configure/create extended search attributes in IdentityNow.
         * @param {SearchAttributeConfigBeta} searchAttributeConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSearchAttributeConfig: function (searchAttributeConfigBeta, axiosOptions) {
            return localVarFp.createSearchAttributeConfig(searchAttributeConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Delete an extended search attribute in IdentityNow.
         * @param {string} name Name of the extended search attribute configuration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSearchAttributeConfig: function (name, axiosOptions) {
            return localVarFp.deleteSearchAttributeConfig(name, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
         * @summary Retrieve a list of extended search attributes in IdentityNow.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSearchAttributeConfig: function (axiosOptions) {
            return localVarFp.getSearchAttributeConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get the details of a specific extended search attribute in IdentityNow.
         * @param {string} name Name of the extended search attribute configuration to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSingleSearchAttributeConfig: function (name, axiosOptions) {
            return localVarFp.getSingleSearchAttributeConfig(name, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
         * @summary Update the details of a specific extended search attribute in IdentityNow.
         * @param {string} name Name of the Search Attribute Configuration to patch.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSearchAttributeConfig: function (name, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchSearchAttributeConfig(name, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SearchAttributeConfigurationBetaApiFactory = SearchAttributeConfigurationBetaApiFactory;
/**
 * SearchAttributeConfigurationBetaApi - object-oriented interface
 * @export
 * @class SearchAttributeConfigurationBetaApi
 * @extends {BaseAPI}
 */
var SearchAttributeConfigurationBetaApi = /** @class */ (function (_super) {
    __extends(SearchAttributeConfigurationBetaApi, _super);
    function SearchAttributeConfigurationBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create extended search attributes in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiCreateSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    SearchAttributeConfigurationBetaApi.prototype.createSearchAttributeConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SearchAttributeConfigurationBetaApiFp)(this.configuration).createSearchAttributeConfig(requestParameters.searchAttributeConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an extended search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiDeleteSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    SearchAttributeConfigurationBetaApi.prototype.deleteSearchAttributeConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SearchAttributeConfigurationBetaApiFp)(this.configuration).deleteSearchAttributeConfig(requestParameters.name, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve a list of extended search attributes in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    SearchAttributeConfigurationBetaApi.prototype.getSearchAttributeConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.SearchAttributeConfigurationBetaApiFp)(this.configuration).getSearchAttributeConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get the details of a specific extended search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiGetSingleSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    SearchAttributeConfigurationBetaApi.prototype.getSingleSearchAttributeConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SearchAttributeConfigurationBetaApiFp)(this.configuration).getSingleSearchAttributeConfig(requestParameters.name, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update the details of a specific extended search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiPatchSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    SearchAttributeConfigurationBetaApi.prototype.patchSearchAttributeConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SearchAttributeConfigurationBetaApiFp)(this.configuration).patchSearchAttributeConfig(requestParameters.name, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SearchAttributeConfigurationBetaApi;
}(base_1.BaseAPI));
exports.SearchAttributeConfigurationBetaApi = SearchAttributeConfigurationBetaApi;
/**
 * SegmentsBetaApi - axios parameter creator
 * @export
 */
var SegmentsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Create Segment
         * @param {SegmentBeta} segmentBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSegment: function (segmentBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'segmentBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSegment', 'segmentBeta', segmentBeta);
                            localVarPath = "/segments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(segmentBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Delete Segment by ID
         * @param {string} id The segment ID to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegment: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSegment', 'id', id);
                            localVarPath = "/segments/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Get Segment by ID
         * @param {string} id The segment ID to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSegment: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSegment', 'id', id);
                            localVarPath = "/segments/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary List Segments
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSegments: function (limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/segments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Update Segment
         * @param {string} id The segment ID to modify.
         * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSegment: function (id, requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchSegment', 'id', id);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('patchSegment', 'requestBody', requestBody);
                            localVarPath = "/segments/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SegmentsBetaApiAxiosParamCreator = SegmentsBetaApiAxiosParamCreator;
/**
 * SegmentsBetaApi - functional programming interface
 * @export
 */
var SegmentsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SegmentsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Create Segment
         * @param {SegmentBeta} segmentBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSegment: function (segmentBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSegment(segmentBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Delete Segment by ID
         * @param {string} id The segment ID to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegment: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSegment(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Get Segment by ID
         * @param {string} id The segment ID to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSegment: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSegment(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary List Segments
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSegments: function (limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSegments(limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Update Segment
         * @param {string} id The segment ID to modify.
         * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSegment: function (id, requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchSegment(id, requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SegmentsBetaApiFp = SegmentsBetaApiFp;
/**
 * SegmentsBetaApi - factory interface
 * @export
 */
var SegmentsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SegmentsBetaApiFp)(configuration);
    return {
        /**
         * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Create Segment
         * @param {SegmentBeta} segmentBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSegment: function (segmentBeta, axiosOptions) {
            return localVarFp.createSegment(segmentBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Delete Segment by ID
         * @param {string} id The segment ID to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegment: function (id, axiosOptions) {
            return localVarFp.deleteSegment(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Get Segment by ID
         * @param {string} id The segment ID to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSegment: function (id, axiosOptions) {
            return localVarFp.getSegment(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary List Segments
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSegments: function (limit, offset, count, axiosOptions) {
            return localVarFp.listSegments(limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
         * @summary Update Segment
         * @param {string} id The segment ID to modify.
         * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSegment: function (id, requestBody, axiosOptions) {
            return localVarFp.patchSegment(id, requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SegmentsBetaApiFactory = SegmentsBetaApiFactory;
/**
 * SegmentsBetaApi - object-oriented interface
 * @export
 * @class SegmentsBetaApi
 * @extends {BaseAPI}
 */
var SegmentsBetaApi = /** @class */ (function (_super) {
    __extends(SegmentsBetaApi, _super);
    function SegmentsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {SegmentsBetaApiCreateSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    SegmentsBetaApi.prototype.createSegment = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SegmentsBetaApiFp)(this.configuration).createSegment(requestParameters.segmentBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {SegmentsBetaApiDeleteSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    SegmentsBetaApi.prototype.deleteSegment = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SegmentsBetaApiFp)(this.configuration).deleteSegment(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {SegmentsBetaApiGetSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    SegmentsBetaApi.prototype.getSegment = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SegmentsBetaApiFp)(this.configuration).getSegment(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {SegmentsBetaApiListSegmentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    SegmentsBetaApi.prototype.listSegments = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SegmentsBetaApiFp)(this.configuration).listSegments(requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {SegmentsBetaApiPatchSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    SegmentsBetaApi.prototype.patchSegment = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SegmentsBetaApiFp)(this.configuration).patchSegment(requestParameters.id, requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SegmentsBetaApi;
}(base_1.BaseAPI));
exports.SegmentsBetaApi = SegmentsBetaApi;
/**
 * ServiceDeskIntegrationBetaApi - axios parameter creator
 * @export
 */
var ServiceDeskIntegrationBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Create new Service Desk integration
         * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of a new integration to create
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDeskIntegration: function (serviceDeskIntegrationDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'serviceDeskIntegrationDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createServiceDeskIntegration', 'serviceDeskIntegrationDtoBeta', serviceDeskIntegrationDtoBeta);
                            localVarPath = "/service-desk-integrations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceDeskIntegrationDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Delete a Service Desk integration
         * @param {string} id ID of Service Desk integration to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceDeskIntegration: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteServiceDeskIntegration', 'id', id);
                            localVarPath = "/service-desk-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get a Service Desk integration
         * @param {string} id ID of the Service Desk integration to get
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegration: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getServiceDeskIntegration', 'id', id);
                            localVarPath = "/service-desk-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary List existing Service Desk Integrations
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationList: function (offset, limit, sorters, filters, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/service-desk-integrations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Service Desk integration template by scriptName.
         * @param {string} scriptName The scriptName value of the Service Desk integration template to get
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationTemplate: function (scriptName, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'scriptName' is not null or undefined
                            (0, common_1.assertParamExists)('getServiceDeskIntegrationTemplate', 'scriptName', scriptName);
                            localVarPath = "/service-desk-integrations/templates/{scriptName}"
                                .replace("{".concat("scriptName", "}"), encodeURIComponent(String(scriptName)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Service Desk Integration Types List.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationTypes: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/service-desk-integrations/types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get the time check configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getStatusCheckDetails: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/service-desk-integrations/status-check-configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update an existing ServiceDeskIntegration by ID with a PATCH request.
         * @summary Service Desk Integration Update PATCH
         * @param {string} id ID of the Service Desk integration to update
         * @param {PatchServiceDeskIntegrationRequestBeta} patchServiceDeskIntegrationRequestBeta A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchServiceDeskIntegration: function (id, patchServiceDeskIntegrationRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchServiceDeskIntegration', 'id', id);
                            // verify required parameter 'patchServiceDeskIntegrationRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchServiceDeskIntegration', 'patchServiceDeskIntegrationRequestBeta', patchServiceDeskIntegrationRequestBeta);
                            localVarPath = "/service-desk-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(patchServiceDeskIntegrationRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update a Service Desk integration
         * @param {string} id ID of the Service Desk integration to update
         * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of the integration to update
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putServiceDeskIntegration: function (id, serviceDeskIntegrationDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putServiceDeskIntegration', 'id', id);
                            // verify required parameter 'serviceDeskIntegrationDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putServiceDeskIntegration', 'serviceDeskIntegrationDtoBeta', serviceDeskIntegrationDtoBeta);
                            localVarPath = "/service-desk-integrations/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceDeskIntegrationDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update the time check configuration
         * @param {QueuedCheckConfigDetailsBeta} queuedCheckConfigDetailsBeta the modified time check configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusCheckDetails: function (queuedCheckConfigDetailsBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'queuedCheckConfigDetailsBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateStatusCheckDetails', 'queuedCheckConfigDetailsBeta', queuedCheckConfigDetailsBeta);
                            localVarPath = "/service-desk-integrations/status-check-configuration";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(queuedCheckConfigDetailsBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ServiceDeskIntegrationBetaApiAxiosParamCreator = ServiceDeskIntegrationBetaApiAxiosParamCreator;
/**
 * ServiceDeskIntegrationBetaApi - functional programming interface
 * @export
 */
var ServiceDeskIntegrationBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ServiceDeskIntegrationBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Create new Service Desk integration
         * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of a new integration to create
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDeskIntegration: function (serviceDeskIntegrationDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createServiceDeskIntegration(serviceDeskIntegrationDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Delete a Service Desk integration
         * @param {string} id ID of Service Desk integration to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceDeskIntegration: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteServiceDeskIntegration(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get a Service Desk integration
         * @param {string} id ID of the Service Desk integration to get
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegration: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getServiceDeskIntegration(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary List existing Service Desk Integrations
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationList: function (offset, limit, sorters, filters, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getServiceDeskIntegrationList(offset, limit, sorters, filters, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Service Desk integration template by scriptName.
         * @param {string} scriptName The scriptName value of the Service Desk integration template to get
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationTemplate: function (scriptName, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getServiceDeskIntegrationTemplate(scriptName, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Service Desk Integration Types List.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationTypes: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getServiceDeskIntegrationTypes(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get the time check configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getStatusCheckDetails: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStatusCheckDetails(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update an existing ServiceDeskIntegration by ID with a PATCH request.
         * @summary Service Desk Integration Update PATCH
         * @param {string} id ID of the Service Desk integration to update
         * @param {PatchServiceDeskIntegrationRequestBeta} patchServiceDeskIntegrationRequestBeta A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchServiceDeskIntegration: function (id, patchServiceDeskIntegrationRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchServiceDeskIntegration(id, patchServiceDeskIntegrationRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update a Service Desk integration
         * @param {string} id ID of the Service Desk integration to update
         * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of the integration to update
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putServiceDeskIntegration: function (id, serviceDeskIntegrationDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putServiceDeskIntegration(id, serviceDeskIntegrationDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update the time check configuration
         * @param {QueuedCheckConfigDetailsBeta} queuedCheckConfigDetailsBeta the modified time check configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusCheckDetails: function (queuedCheckConfigDetailsBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateStatusCheckDetails(queuedCheckConfigDetailsBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ServiceDeskIntegrationBetaApiFp = ServiceDeskIntegrationBetaApiFp;
/**
 * ServiceDeskIntegrationBetaApi - factory interface
 * @export
 */
var ServiceDeskIntegrationBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ServiceDeskIntegrationBetaApiFp)(configuration);
    return {
        /**
         * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Create new Service Desk integration
         * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of a new integration to create
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDeskIntegration: function (serviceDeskIntegrationDtoBeta, axiosOptions) {
            return localVarFp.createServiceDeskIntegration(serviceDeskIntegrationDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Delete a Service Desk integration
         * @param {string} id ID of Service Desk integration to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceDeskIntegration: function (id, axiosOptions) {
            return localVarFp.deleteServiceDeskIntegration(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get a Service Desk integration
         * @param {string} id ID of the Service Desk integration to get
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegration: function (id, axiosOptions) {
            return localVarFp.getServiceDeskIntegration(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary List existing Service Desk Integrations
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationList: function (offset, limit, sorters, filters, count, axiosOptions) {
            return localVarFp.getServiceDeskIntegrationList(offset, limit, sorters, filters, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Service Desk integration template by scriptName.
         * @param {string} scriptName The scriptName value of the Service Desk integration template to get
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationTemplate: function (scriptName, axiosOptions) {
            return localVarFp.getServiceDeskIntegrationTemplate(scriptName, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Service Desk Integration Types List.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getServiceDeskIntegrationTypes: function (axiosOptions) {
            return localVarFp.getServiceDeskIntegrationTypes(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Get the time check configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getStatusCheckDetails: function (axiosOptions) {
            return localVarFp.getStatusCheckDetails(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an existing ServiceDeskIntegration by ID with a PATCH request.
         * @summary Service Desk Integration Update PATCH
         * @param {string} id ID of the Service Desk integration to update
         * @param {PatchServiceDeskIntegrationRequestBeta} patchServiceDeskIntegrationRequestBeta A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchServiceDeskIntegration: function (id, patchServiceDeskIntegrationRequestBeta, axiosOptions) {
            return localVarFp.patchServiceDeskIntegration(id, patchServiceDeskIntegrationRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update a Service Desk integration
         * @param {string} id ID of the Service Desk integration to update
         * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of the integration to update
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putServiceDeskIntegration: function (id, serviceDeskIntegrationDtoBeta, axiosOptions) {
            return localVarFp.putServiceDeskIntegration(id, serviceDeskIntegrationDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
         * @summary Update the time check configuration
         * @param {QueuedCheckConfigDetailsBeta} queuedCheckConfigDetailsBeta the modified time check configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusCheckDetails: function (queuedCheckConfigDetailsBeta, axiosOptions) {
            return localVarFp.updateStatusCheckDetails(queuedCheckConfigDetailsBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ServiceDeskIntegrationBetaApiFactory = ServiceDeskIntegrationBetaApiFactory;
/**
 * ServiceDeskIntegrationBetaApi - object-oriented interface
 * @export
 * @class ServiceDeskIntegrationBetaApi
 * @extends {BaseAPI}
 */
var ServiceDeskIntegrationBetaApi = /** @class */ (function (_super) {
    __extends(ServiceDeskIntegrationBetaApi, _super);
    function ServiceDeskIntegrationBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiCreateServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.createServiceDeskIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).createServiceDeskIntegration(requestParameters.serviceDeskIntegrationDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiDeleteServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.deleteServiceDeskIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).deleteServiceDeskIntegration(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.getServiceDeskIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).getServiceDeskIntegration(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.getServiceDeskIntegrationList = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).getServiceDeskIntegrationList(requestParameters.offset, requestParameters.limit, requestParameters.sorters, requestParameters.filters, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.getServiceDeskIntegrationTemplate = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).getServiceDeskIntegrationTemplate(requestParameters.scriptName, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.getServiceDeskIntegrationTypes = function (axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).getServiceDeskIntegrationTypes(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.getStatusCheckDetails = function (axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).getStatusCheckDetails(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {ServiceDeskIntegrationBetaApiPatchServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.patchServiceDeskIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).patchServiceDeskIntegration(requestParameters.id, requestParameters.patchServiceDeskIntegrationRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiPutServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.putServiceDeskIntegration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).putServiceDeskIntegration(requestParameters.id, requestParameters.serviceDeskIntegrationDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {ServiceDeskIntegrationBetaApiUpdateStatusCheckDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    ServiceDeskIntegrationBetaApi.prototype.updateStatusCheckDetails = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.ServiceDeskIntegrationBetaApiFp)(this.configuration).updateStatusCheckDetails(requestParameters.queuedCheckConfigDetailsBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ServiceDeskIntegrationBetaApi;
}(base_1.BaseAPI));
exports.ServiceDeskIntegrationBetaApi = ServiceDeskIntegrationBetaApi;
/**
 * SourceUsagesBetaApi - axios parameter creator
 * @export
 */
var SourceUsagesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API returns the status of the source usage insights setup by IDN source ID.
         * @summary Finds status of source usage
         * @param {string} sourceId ID of IDN source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getStatusBySourceId: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getStatusBySourceId', 'sourceId', sourceId);
                            localVarPath = "/source-usages/{sourceId}/status"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a summary of source usage insights for past 12 months.
         * @summary Returns source usage insights
         * @param {string} sourceId ID of IDN source
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getUsagesBySourceId: function (sourceId, limit, offset, count, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getUsagesBySourceId', 'sourceId', sourceId);
                            localVarPath = "/source-usages/{sourceId}/summaries"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SourceUsagesBetaApiAxiosParamCreator = SourceUsagesBetaApiAxiosParamCreator;
/**
 * SourceUsagesBetaApi - functional programming interface
 * @export
 */
var SourceUsagesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SourceUsagesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API returns the status of the source usage insights setup by IDN source ID.
         * @summary Finds status of source usage
         * @param {string} sourceId ID of IDN source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getStatusBySourceId: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStatusBySourceId(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a summary of source usage insights for past 12 months.
         * @summary Returns source usage insights
         * @param {string} sourceId ID of IDN source
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getUsagesBySourceId: function (sourceId, limit, offset, count, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getUsagesBySourceId(sourceId, limit, offset, count, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SourceUsagesBetaApiFp = SourceUsagesBetaApiFp;
/**
 * SourceUsagesBetaApi - factory interface
 * @export
 */
var SourceUsagesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SourceUsagesBetaApiFp)(configuration);
    return {
        /**
         * This API returns the status of the source usage insights setup by IDN source ID.
         * @summary Finds status of source usage
         * @param {string} sourceId ID of IDN source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getStatusBySourceId: function (sourceId, axiosOptions) {
            return localVarFp.getStatusBySourceId(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a summary of source usage insights for past 12 months.
         * @summary Returns source usage insights
         * @param {string} sourceId ID of IDN source
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getUsagesBySourceId: function (sourceId, limit, offset, count, sorters, axiosOptions) {
            return localVarFp.getUsagesBySourceId(sourceId, limit, offset, count, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SourceUsagesBetaApiFactory = SourceUsagesBetaApiFactory;
/**
 * SourceUsagesBetaApi - object-oriented interface
 * @export
 * @class SourceUsagesBetaApi
 * @extends {BaseAPI}
 */
var SourceUsagesBetaApi = /** @class */ (function (_super) {
    __extends(SourceUsagesBetaApi, _super);
    function SourceUsagesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {SourceUsagesBetaApiGetStatusBySourceIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceUsagesBetaApi
     */
    SourceUsagesBetaApi.prototype.getStatusBySourceId = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourceUsagesBetaApiFp)(this.configuration).getStatusBySourceId(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {SourceUsagesBetaApiGetUsagesBySourceIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceUsagesBetaApi
     */
    SourceUsagesBetaApi.prototype.getUsagesBySourceId = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourceUsagesBetaApiFp)(this.configuration).getUsagesBySourceId(requestParameters.sourceId, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SourceUsagesBetaApi;
}(base_1.BaseAPI));
exports.SourceUsagesBetaApi = SourceUsagesBetaApi;
/**
 * SourcesBetaApi - axios parameter creator
 * @export
 */
var SourcesBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Delete Source by ID
         * @param {string} id Source ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('_delete', 'id', id);
                            localVarPath = "/sources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Provisioning Policy
         * @param {string} sourceId The Source id
         * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningPolicy: function (sourceId, provisioningPolicyDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('createProvisioningPolicy', 'sourceId', sourceId);
                            // verify required parameter 'provisioningPolicyDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createProvisioningPolicy', 'provisioningPolicyDtoBeta', provisioningPolicyDtoBeta);
                            localVarPath = "/sources/{sourceId}/provisioning-policies"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(provisioningPolicyDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Creates a source in IdentityNow.
         * @param {SourceBeta} sourceBeta
         * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSource: function (sourceBeta, provisionAsCsv, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSource', 'sourceBeta', sourceBeta);
                            localVarPath = "/sources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (provisionAsCsv !== undefined) {
                                localVarQueryParameter['provisionAsCsv'] = provisionAsCsv;
                            }
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sourceBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
         * @summary Create Schema on Source
         * @param {string} sourceId Source ID.
         * @param {SchemaBeta} schemaBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSourceSchema: function (sourceId, schemaBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('createSourceSchema', 'sourceId', sourceId);
                            // verify required parameter 'schemaBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSourceSchema', 'schemaBeta', schemaBeta);
                            localVarPath = "/sources/{sourceId}/schemas"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(schemaBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
         * @summary Remove All Accounts in a Source
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsAsync: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteAccountsAsync', 'id', id);
                            localVarPath = "/sources/{id}/remove-accounts"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Delete Native Change Detection Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNativeChangeDetectionConfig: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNativeChangeDetectionConfig', 'id', id);
                            localVarPath = "/sources/{sourceId}/native-change-detection-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Delete Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvisioningPolicy: function (sourceId, usageType, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProvisioningPolicy', 'sourceId', sourceId);
                            // verify required parameter 'usageType' is not null or undefined
                            (0, common_1.assertParamExists)('deleteProvisioningPolicy', 'usageType', usageType);
                            localVarPath = "/sources/{sourceId}/provisioning-policies/{usageType}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("usageType", "}"), encodeURIComponent(String(usageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete Source Schema by ID
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSourceSchema: function (sourceId, schemaId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSourceSchema', 'sourceId', sourceId);
                            // verify required parameter 'schemaId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSourceSchema', 'schemaId', schemaId);
                            localVarPath = "/sources/{sourceId}/schemas/{schemaId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("schemaId", "}"), encodeURIComponent(String(schemaId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Source Correlation Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCorrelationConfig: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getCorrelationConfig', 'id', id);
                            localVarPath = "/sources/{id}/correlation-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Native Change Detection Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNativeChangeDetectionConfig: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getNativeChangeDetectionConfig', 'id', id);
                            localVarPath = "/sources/{sourceId}/native-change-detection-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProvisioningPolicy: function (sourceId, usageType, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getProvisioningPolicy', 'sourceId', sourceId);
                            // verify required parameter 'usageType' is not null or undefined
                            (0, common_1.assertParamExists)('getProvisioningPolicy', 'usageType', usageType);
                            localVarPath = "/sources/{sourceId}/provisioning-policies/{usageType}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("usageType", "}"), encodeURIComponent(String(usageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Source by ID
         * @param {string} id Source ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSource: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSource', 'id', id);
                            localVarPath = "/sources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads source accounts schema template
         * @param {string} id The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceAccountsSchema: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceAccountsSchema', 'id', id);
                            localVarPath = "/sources/{id}/schemas/accounts"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Attribute Sync Config
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceAttrSyncConfig: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceAttrSyncConfig', 'id', id);
                            localVarPath = "/sources/{id}/attribute-sync-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
         * @summary Gets source config with language translations
         * @param {string} id The Source id
         * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceConfig: function (id, locale, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceConfig', 'id', id);
                            localVarPath = "/sources/{id}/connectors/source-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (locale !== undefined) {
                                localVarQueryParameter['locale'] = locale;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Source Entitlement Request Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceEntitlementRequestConfig: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sources/{id}/entitlement-request-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads source entitlements schema template
         * @param {string} id The Source id
         * @param {string} [schemaName] Name of entitlement schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceEntitlementsSchema: function (id, schemaName, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceEntitlementsSchema', 'id', id);
                            localVarPath = "/sources/{id}/schemas/entitlements"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (schemaName !== undefined) {
                                localVarQueryParameter['schemaName'] = schemaName;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get the Source Schema by ID in IdentityNow.
         * @summary Get Source Schema by ID
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceSchema: function (sourceId, schemaId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceSchema', 'sourceId', sourceId);
                            // verify required parameter 'schemaId' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceSchema', 'schemaId', schemaId);
                            localVarPath = "/sources/{sourceId}/schemas/{schemaId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("schemaId", "}"), encodeURIComponent(String(schemaId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
         * @summary List Schemas on Source
         * @param {string} sourceId Source ID.
         * @param {'group' | 'user'} [includeTypes] If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceSchemas: function (sourceId, includeTypes, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('getSourceSchemas', 'sourceId', sourceId);
                            localVarPath = "/sources/{sourceId}/schemas"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (includeTypes !== undefined) {
                                localVarQueryParameter['include-types'] = includeTypes;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Account Aggregation
         * @param {string} id Source Id
         * @param {any} [file] The CSV file containing the source accounts to aggregate.
         * @param {string} [disableOptimization] Use this flag to reprocess every account whether or not the data has changed.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importAccounts: function (id, file, disableOptimization, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importAccounts', 'id', id);
                            localVarPath = "/sources/{id}/load-accounts"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            if (disableOptimization !== undefined) {
                                localVarFormParams.append('disableOptimization', disableOptimization);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Entitlement Aggregation
         * @param {string} id Source Id
         * @param {any} [file] The CSV file containing the source entitlements to aggregate.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importEntitlements: function (id, file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importEntitlements', 'id', id);
                            localVarPath = "/sources/{id}/load-entitlements"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API uploads a source schema template file to configure a source\'s account attributes.
         * @summary Uploads source accounts schema template
         * @param {string} id The Source id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceAccountsSchema: function (id, file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importSourceAccountsSchema', 'id', id);
                            localVarPath = "/sources/{id}/schemas/accounts"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
         * @summary Upload connector file to source
         * @param {string} sourceId The Source id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceConnectorFile: function (sourceId, file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('importSourceConnectorFile', 'sourceId', sourceId);
                            localVarPath = "/sources/{sourceId}/upload-connector-file"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API uploads a source schema template file to configure a source\'s entitlement attributes.
         * @summary Uploads source entitlements schema template
         * @param {string} id The Source id
         * @param {string} [schemaName] Name of entitlement schema
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceEntitlementsSchema: function (id, schemaName, file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importSourceEntitlementsSchema', 'id', id);
                            localVarPath = "/sources/{id}/schemas/entitlements"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (schemaName !== undefined) {
                                localVarQueryParameter['schemaName'] = schemaName;
                            }
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
         * @summary Process Uncorrelated Accounts
         * @param {string} id Source Id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importUncorrelatedAccounts: function (id, file, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('importUncorrelatedAccounts', 'id', id);
                            localVarPath = "/sources/{id}/load-uncorrelated-accounts"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (file !== undefined) {
                                localVarFormParams.append('file', file);
                            }
                            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = localVarFormParams;
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Lists ProvisioningPolicies
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listProvisioningPolicies: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('listProvisioningPolicies', 'sourceId', sourceId);
                            localVarPath = "/sources/{sourceId}/provisioning-policies"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary Lists all sources in IdentityNow.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
         * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSources: function (limit, offset, count, filters, sorters, forSubadmin, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/sources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            if (forSubadmin !== undefined) {
                                localVarQueryParameter['for-subadmin'] = forSubadmin;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
         * @summary Peek source connector\'s resource objects
         * @param {string} sourceId The ID of the Source
         * @param {ResourceObjectsRequestBeta} resourceObjectsRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        peekResourceObjects: function (sourceId, resourceObjectsRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('peekResourceObjects', 'sourceId', sourceId);
                            // verify required parameter 'resourceObjectsRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('peekResourceObjects', 'resourceObjectsRequestBeta', resourceObjectsRequestBeta);
                            localVarPath = "/sources/{sourceId}/connector/peek-resource-objects"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resourceObjectsRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
         * @summary Ping cluster for source connector
         * @param {string} sourceId The ID of the Source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        pingCluster: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('pingCluster', 'sourceId', sourceId);
                            localVarPath = "/sources/{sourceId}/connector/ping-cluster"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Source Correlation Configuration
         * @param {string} id The source id
         * @param {CorrelationConfigBeta} correlationConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putCorrelationConfig: function (id, correlationConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putCorrelationConfig', 'id', id);
                            // verify required parameter 'correlationConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putCorrelationConfig', 'correlationConfigBeta', correlationConfigBeta);
                            localVarPath = "/sources/{id}/correlation-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(correlationConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Native Change Detection Configuration
         * @param {string} id The source id
         * @param {NativeChangeDetectionConfigBeta} nativeChangeDetectionConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putNativeChangeDetectionConfig: function (id, nativeChangeDetectionConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putNativeChangeDetectionConfig', 'id', id);
                            // verify required parameter 'nativeChangeDetectionConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putNativeChangeDetectionConfig', 'nativeChangeDetectionConfigBeta', nativeChangeDetectionConfigBeta);
                            localVarPath = "/sources/{sourceId}/native-change-detection-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(nativeChangeDetectionConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putProvisioningPolicy: function (sourceId, usageType, provisioningPolicyDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('putProvisioningPolicy', 'sourceId', sourceId);
                            // verify required parameter 'usageType' is not null or undefined
                            (0, common_1.assertParamExists)('putProvisioningPolicy', 'usageType', usageType);
                            // verify required parameter 'provisioningPolicyDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putProvisioningPolicy', 'provisioningPolicyDtoBeta', provisioningPolicyDtoBeta);
                            localVarPath = "/sources/{sourceId}/provisioning-policies/{usageType}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("usageType", "}"), encodeURIComponent(String(usageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(provisioningPolicyDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Source (Full)
         * @param {string} id Source ID.
         * @param {SourceBeta} sourceBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSource: function (id, sourceBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putSource', 'id', id);
                            // verify required parameter 'sourceBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putSource', 'sourceBeta', sourceBeta);
                            localVarPath = "/sources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sourceBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Attribute Sync Config
         * @param {string} id The source id
         * @param {AttrSyncSourceConfigBeta} attrSyncSourceConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSourceAttrSyncConfig: function (id, attrSyncSourceConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putSourceAttrSyncConfig', 'id', id);
                            // verify required parameter 'attrSyncSourceConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putSourceAttrSyncConfig', 'attrSyncSourceConfigBeta', attrSyncSourceConfigBeta);
                            localVarPath = "/sources/{id}/attribute-sync-config"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(attrSyncSourceConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
         * @summary Update Source Schema (Full)
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {SchemaBeta} schemaBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSourceSchema: function (sourceId, schemaId, schemaBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('putSourceSchema', 'sourceId', sourceId);
                            // verify required parameter 'schemaId' is not null or undefined
                            (0, common_1.assertParamExists)('putSourceSchema', 'schemaId', schemaId);
                            // verify required parameter 'schemaBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putSourceSchema', 'schemaBeta', schemaBeta);
                            localVarPath = "/sources/{sourceId}/schemas/{schemaId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("schemaId", "}"), encodeURIComponent(String(schemaId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(schemaBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
         * @summary Synchronize single source attributes.
         * @param {string} id The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        syncAttributesForSource: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('syncAttributesForSource', 'id', id);
                            localVarPath = "/sources/{id}/synchronize-attributes"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
         * @summary Test configuration for source connector
         * @param {string} sourceId The ID of the Source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSourceConfiguration: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('testSourceConfiguration', 'sourceId', sourceId);
                            localVarPath = "/sources/{sourceId}/connector/test-configuration"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
         * @summary Check connection for source connector.
         * @param {string} sourceId The ID of the Source.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSourceConnection: function (sourceId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('testSourceConnection', 'sourceId', sourceId);
                            localVarPath = "/sources/{sourceId}/connector/check-connection"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Bulk Update Provisioning Policies
         * @param {string} sourceId The Source id.
         * @param {Array<ProvisioningPolicyDtoBeta>} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningPoliciesInBulk: function (sourceId, provisioningPolicyDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('updateProvisioningPoliciesInBulk', 'sourceId', sourceId);
                            // verify required parameter 'provisioningPolicyDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateProvisioningPoliciesInBulk', 'provisioningPolicyDtoBeta', provisioningPolicyDtoBeta);
                            localVarPath = "/sources/{sourceId}/provisioning-policies/bulk-update"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(provisioningPolicyDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Partial update of Provisioning Policy
         * @param {string} sourceId The Source id.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningPolicy: function (sourceId, usageType, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('updateProvisioningPolicy', 'sourceId', sourceId);
                            // verify required parameter 'usageType' is not null or undefined
                            (0, common_1.assertParamExists)('updateProvisioningPolicy', 'usageType', usageType);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateProvisioningPolicy', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/sources/{sourceId}/provisioning-policies/{usageType}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("usageType", "}"), encodeURIComponent(String(usageType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
         * @summary Update Source (Partial)
         * @param {string} id Source ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSource: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateSource', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateSource', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/sources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Source Entitlement Request Configuration
         * @param {SourceEntitlementRequestConfigBeta} sourceEntitlementRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSourceEntitlementRequestConfig: function (sourceEntitlementRequestConfigBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceEntitlementRequestConfigBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateSourceEntitlementRequestConfig', 'sourceEntitlementRequestConfigBeta', sourceEntitlementRequestConfigBeta);
                            localVarPath = "/sources/{id}/entitlement-request-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sourceEntitlementRequestConfigBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
         * @summary Update Source Schema (Partial)
         * @param {string} sourceId The Source id.
         * @param {string} schemaId The Schema id.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSourceSchema: function (sourceId, schemaId, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sourceId' is not null or undefined
                            (0, common_1.assertParamExists)('updateSourceSchema', 'sourceId', sourceId);
                            // verify required parameter 'schemaId' is not null or undefined
                            (0, common_1.assertParamExists)('updateSourceSchema', 'schemaId', schemaId);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateSourceSchema', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/sources/{sourceId}/schemas/{schemaId}"
                                .replace("{".concat("sourceId", "}"), encodeURIComponent(String(sourceId)))
                                .replace("{".concat("schemaId", "}"), encodeURIComponent(String(schemaId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SourcesBetaApiAxiosParamCreator = SourcesBetaApiAxiosParamCreator;
/**
 * SourcesBetaApi - functional programming interface
 * @export
 */
var SourcesBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SourcesBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Delete Source by ID
         * @param {string} id Source ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator._delete(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Provisioning Policy
         * @param {string} sourceId The Source id
         * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningPolicy: function (sourceId, provisioningPolicyDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createProvisioningPolicy(sourceId, provisioningPolicyDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Creates a source in IdentityNow.
         * @param {SourceBeta} sourceBeta
         * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSource: function (sourceBeta, provisionAsCsv, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSource(sourceBeta, provisionAsCsv, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
         * @summary Create Schema on Source
         * @param {string} sourceId Source ID.
         * @param {SchemaBeta} schemaBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSourceSchema: function (sourceId, schemaBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSourceSchema(sourceId, schemaBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
         * @summary Remove All Accounts in a Source
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsAsync: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteAccountsAsync(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Delete Native Change Detection Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNativeChangeDetectionConfig: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNativeChangeDetectionConfig(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Delete Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvisioningPolicy: function (sourceId, usageType, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteProvisioningPolicy(sourceId, usageType, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete Source Schema by ID
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSourceSchema: function (sourceId, schemaId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSourceSchema(sourceId, schemaId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Source Correlation Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCorrelationConfig: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCorrelationConfig(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Native Change Detection Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNativeChangeDetectionConfig: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNativeChangeDetectionConfig(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProvisioningPolicy: function (sourceId, usageType, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getProvisioningPolicy(sourceId, usageType, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Source by ID
         * @param {string} id Source ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSource: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSource(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads source accounts schema template
         * @param {string} id The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceAccountsSchema: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceAccountsSchema(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Attribute Sync Config
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceAttrSyncConfig: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceAttrSyncConfig(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
         * @summary Gets source config with language translations
         * @param {string} id The Source id
         * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceConfig: function (id, locale, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceConfig(id, locale, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Source Entitlement Request Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceEntitlementRequestConfig: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceEntitlementRequestConfig(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Downloads source entitlements schema template
         * @param {string} id The Source id
         * @param {string} [schemaName] Name of entitlement schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceEntitlementsSchema: function (id, schemaName, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceEntitlementsSchema(id, schemaName, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the Source Schema by ID in IdentityNow.
         * @summary Get Source Schema by ID
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceSchema: function (sourceId, schemaId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceSchema(sourceId, schemaId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
         * @summary List Schemas on Source
         * @param {string} sourceId Source ID.
         * @param {'group' | 'user'} [includeTypes] If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceSchemas: function (sourceId, includeTypes, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSourceSchemas(sourceId, includeTypes, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Account Aggregation
         * @param {string} id Source Id
         * @param {any} [file] The CSV file containing the source accounts to aggregate.
         * @param {string} [disableOptimization] Use this flag to reprocess every account whether or not the data has changed.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importAccounts: function (id, file, disableOptimization, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importAccounts(id, file, disableOptimization, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Entitlement Aggregation
         * @param {string} id Source Id
         * @param {any} [file] The CSV file containing the source entitlements to aggregate.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importEntitlements: function (id, file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importEntitlements(id, file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API uploads a source schema template file to configure a source\'s account attributes.
         * @summary Uploads source accounts schema template
         * @param {string} id The Source id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceAccountsSchema: function (id, file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importSourceAccountsSchema(id, file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
         * @summary Upload connector file to source
         * @param {string} sourceId The Source id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceConnectorFile: function (sourceId, file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importSourceConnectorFile(sourceId, file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API uploads a source schema template file to configure a source\'s entitlement attributes.
         * @summary Uploads source entitlements schema template
         * @param {string} id The Source id
         * @param {string} [schemaName] Name of entitlement schema
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceEntitlementsSchema: function (id, schemaName, file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importSourceEntitlementsSchema(id, schemaName, file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
         * @summary Process Uncorrelated Accounts
         * @param {string} id Source Id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importUncorrelatedAccounts: function (id, file, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importUncorrelatedAccounts(id, file, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Lists ProvisioningPolicies
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listProvisioningPolicies: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listProvisioningPolicies(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary Lists all sources in IdentityNow.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
         * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSources: function (limit, offset, count, filters, sorters, forSubadmin, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSources(limit, offset, count, filters, sorters, forSubadmin, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
         * @summary Peek source connector\'s resource objects
         * @param {string} sourceId The ID of the Source
         * @param {ResourceObjectsRequestBeta} resourceObjectsRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        peekResourceObjects: function (sourceId, resourceObjectsRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.peekResourceObjects(sourceId, resourceObjectsRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
         * @summary Ping cluster for source connector
         * @param {string} sourceId The ID of the Source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        pingCluster: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pingCluster(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Source Correlation Configuration
         * @param {string} id The source id
         * @param {CorrelationConfigBeta} correlationConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putCorrelationConfig: function (id, correlationConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putCorrelationConfig(id, correlationConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Native Change Detection Configuration
         * @param {string} id The source id
         * @param {NativeChangeDetectionConfigBeta} nativeChangeDetectionConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putNativeChangeDetectionConfig: function (id, nativeChangeDetectionConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putNativeChangeDetectionConfig(id, nativeChangeDetectionConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putProvisioningPolicy: function (sourceId, usageType, provisioningPolicyDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putProvisioningPolicy(sourceId, usageType, provisioningPolicyDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Source (Full)
         * @param {string} id Source ID.
         * @param {SourceBeta} sourceBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSource: function (id, sourceBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSource(id, sourceBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Attribute Sync Config
         * @param {string} id The source id
         * @param {AttrSyncSourceConfigBeta} attrSyncSourceConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSourceAttrSyncConfig: function (id, attrSyncSourceConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSourceAttrSyncConfig(id, attrSyncSourceConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
         * @summary Update Source Schema (Full)
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {SchemaBeta} schemaBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSourceSchema: function (sourceId, schemaId, schemaBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putSourceSchema(sourceId, schemaId, schemaBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
         * @summary Synchronize single source attributes.
         * @param {string} id The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        syncAttributesForSource: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncAttributesForSource(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
         * @summary Test configuration for source connector
         * @param {string} sourceId The ID of the Source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSourceConfiguration: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testSourceConfiguration(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
         * @summary Check connection for source connector.
         * @param {string} sourceId The ID of the Source.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSourceConnection: function (sourceId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testSourceConnection(sourceId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Bulk Update Provisioning Policies
         * @param {string} sourceId The Source id.
         * @param {Array<ProvisioningPolicyDtoBeta>} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningPoliciesInBulk: function (sourceId, provisioningPolicyDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProvisioningPoliciesInBulk(sourceId, provisioningPolicyDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Partial update of Provisioning Policy
         * @param {string} sourceId The Source id.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningPolicy: function (sourceId, usageType, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateProvisioningPolicy(sourceId, usageType, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
         * @summary Update Source (Partial)
         * @param {string} id Source ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSource: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSource(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Source Entitlement Request Configuration
         * @param {SourceEntitlementRequestConfigBeta} sourceEntitlementRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSourceEntitlementRequestConfig: function (sourceEntitlementRequestConfigBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSourceEntitlementRequestConfig(sourceEntitlementRequestConfigBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
         * @summary Update Source Schema (Partial)
         * @param {string} sourceId The Source id.
         * @param {string} schemaId The Schema id.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSourceSchema: function (sourceId, schemaId, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSourceSchema(sourceId, schemaId, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SourcesBetaApiFp = SourcesBetaApiFp;
/**
 * SourcesBetaApi - factory interface
 * @export
 */
var SourcesBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SourcesBetaApiFp)(configuration);
    return {
        /**
         * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Delete Source by ID
         * @param {string} id Source ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        _delete: function (id, axiosOptions) {
            return localVarFp._delete(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
         * @summary Create Provisioning Policy
         * @param {string} sourceId The Source id
         * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createProvisioningPolicy: function (sourceId, provisioningPolicyDtoBeta, axiosOptions) {
            return localVarFp.createProvisioningPolicy(sourceId, provisioningPolicyDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Creates a source in IdentityNow.
         * @param {SourceBeta} sourceBeta
         * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSource: function (sourceBeta, provisionAsCsv, axiosOptions) {
            return localVarFp.createSource(sourceBeta, provisionAsCsv, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
         * @summary Create Schema on Source
         * @param {string} sourceId Source ID.
         * @param {SchemaBeta} schemaBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSourceSchema: function (sourceId, schemaBeta, axiosOptions) {
            return localVarFp.createSourceSchema(sourceId, schemaBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
         * @summary Remove All Accounts in a Source
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsAsync: function (id, axiosOptions) {
            return localVarFp.deleteAccountsAsync(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Delete Native Change Detection Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteNativeChangeDetectionConfig: function (id, axiosOptions) {
            return localVarFp.deleteNativeChangeDetectionConfig(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Delete Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteProvisioningPolicy: function (sourceId, usageType, axiosOptions) {
            return localVarFp.deleteProvisioningPolicy(sourceId, usageType, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete Source Schema by ID
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSourceSchema: function (sourceId, schemaId, axiosOptions) {
            return localVarFp.deleteSourceSchema(sourceId, schemaId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get Source Correlation Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCorrelationConfig: function (id, axiosOptions) {
            return localVarFp.getCorrelationConfig(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
         * @summary Native Change Detection Configuration
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getNativeChangeDetectionConfig: function (id, axiosOptions) {
            return localVarFp.getNativeChangeDetectionConfig(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getProvisioningPolicy: function (sourceId, usageType, axiosOptions) {
            return localVarFp.getProvisioningPolicy(sourceId, usageType, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Source by ID
         * @param {string} id Source ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSource: function (id, axiosOptions) {
            return localVarFp.getSource(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Downloads source accounts schema template
         * @param {string} id The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceAccountsSchema: function (id, axiosOptions) {
            return localVarFp.getSourceAccountsSchema(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
         * @summary Attribute Sync Config
         * @param {string} id The source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceAttrSyncConfig: function (id, axiosOptions) {
            return localVarFp.getSourceAttrSyncConfig(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
         * @summary Gets source config with language translations
         * @param {string} id The Source id
         * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceConfig: function (id, locale, axiosOptions) {
            return localVarFp.getSourceConfig(id, locale, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Get Source Entitlement Request Configuration
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceEntitlementRequestConfig: function (axiosOptions) {
            return localVarFp.getSourceEntitlementRequestConfig(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Downloads source entitlements schema template
         * @param {string} id The Source id
         * @param {string} [schemaName] Name of entitlement schema
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceEntitlementsSchema: function (id, schemaName, axiosOptions) {
            return localVarFp.getSourceEntitlementsSchema(id, schemaName, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the Source Schema by ID in IdentityNow.
         * @summary Get Source Schema by ID
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceSchema: function (sourceId, schemaId, axiosOptions) {
            return localVarFp.getSourceSchema(sourceId, schemaId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
         * @summary List Schemas on Source
         * @param {string} sourceId Source ID.
         * @param {'group' | 'user'} [includeTypes] If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSourceSchemas: function (sourceId, includeTypes, axiosOptions) {
            return localVarFp.getSourceSchemas(sourceId, includeTypes, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Account Aggregation
         * @param {string} id Source Id
         * @param {any} [file] The CSV file containing the source accounts to aggregate.
         * @param {string} [disableOptimization] Use this flag to reprocess every account whether or not the data has changed.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importAccounts: function (id, file, disableOptimization, axiosOptions) {
            return localVarFp.importAccounts(id, file, disableOptimization, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Entitlement Aggregation
         * @param {string} id Source Id
         * @param {any} [file] The CSV file containing the source entitlements to aggregate.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importEntitlements: function (id, file, axiosOptions) {
            return localVarFp.importEntitlements(id, file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API uploads a source schema template file to configure a source\'s account attributes.
         * @summary Uploads source accounts schema template
         * @param {string} id The Source id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceAccountsSchema: function (id, file, axiosOptions) {
            return localVarFp.importSourceAccountsSchema(id, file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
         * @summary Upload connector file to source
         * @param {string} sourceId The Source id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceConnectorFile: function (sourceId, file, axiosOptions) {
            return localVarFp.importSourceConnectorFile(sourceId, file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API uploads a source schema template file to configure a source\'s entitlement attributes.
         * @summary Uploads source entitlements schema template
         * @param {string} id The Source id
         * @param {string} [schemaName] Name of entitlement schema
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importSourceEntitlementsSchema: function (id, schemaName, file, axiosOptions) {
            return localVarFp.importSourceEntitlementsSchema(id, schemaName, file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
         * @summary Process Uncorrelated Accounts
         * @param {string} id Source Id
         * @param {any} [file]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        importUncorrelatedAccounts: function (id, file, axiosOptions) {
            return localVarFp.importUncorrelatedAccounts(id, file, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Lists ProvisioningPolicies
         * @param {string} sourceId The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listProvisioningPolicies: function (sourceId, axiosOptions) {
            return localVarFp.listProvisioningPolicies(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
         * @summary Lists all sources in IdentityNow.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
         * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSources: function (limit, offset, count, filters, sorters, forSubadmin, axiosOptions) {
            return localVarFp.listSources(limit, offset, count, filters, sorters, forSubadmin, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
         * @summary Peek source connector\'s resource objects
         * @param {string} sourceId The ID of the Source
         * @param {ResourceObjectsRequestBeta} resourceObjectsRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        peekResourceObjects: function (sourceId, resourceObjectsRequestBeta, axiosOptions) {
            return localVarFp.peekResourceObjects(sourceId, resourceObjectsRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
         * @summary Ping cluster for source connector
         * @param {string} sourceId The ID of the Source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        pingCluster: function (sourceId, axiosOptions) {
            return localVarFp.pingCluster(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Source Correlation Configuration
         * @param {string} id The source id
         * @param {CorrelationConfigBeta} correlationConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putCorrelationConfig: function (id, correlationConfigBeta, axiosOptions) {
            return localVarFp.putCorrelationConfig(id, correlationConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Native Change Detection Configuration
         * @param {string} id The source id
         * @param {NativeChangeDetectionConfigBeta} nativeChangeDetectionConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putNativeChangeDetectionConfig: function (id, nativeChangeDetectionConfigBeta, axiosOptions) {
            return localVarFp.putNativeChangeDetectionConfig(id, nativeChangeDetectionConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Provisioning Policy by UsageType
         * @param {string} sourceId The Source ID.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putProvisioningPolicy: function (sourceId, usageType, provisioningPolicyDtoBeta, axiosOptions) {
            return localVarFp.putProvisioningPolicy(sourceId, usageType, provisioningPolicyDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Source (Full)
         * @param {string} id Source ID.
         * @param {SourceBeta} sourceBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSource: function (id, sourceBeta, axiosOptions) {
            return localVarFp.putSource(id, sourceBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
         * @summary Update Attribute Sync Config
         * @param {string} id The source id
         * @param {AttrSyncSourceConfigBeta} attrSyncSourceConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSourceAttrSyncConfig: function (id, attrSyncSourceConfigBeta, axiosOptions) {
            return localVarFp.putSourceAttrSyncConfig(id, attrSyncSourceConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
         * @summary Update Source Schema (Full)
         * @param {string} sourceId The Source ID.
         * @param {string} schemaId The Schema ID.
         * @param {SchemaBeta} schemaBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putSourceSchema: function (sourceId, schemaId, schemaBeta, axiosOptions) {
            return localVarFp.putSourceSchema(sourceId, schemaId, schemaBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
         * @summary Synchronize single source attributes.
         * @param {string} id The Source id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        syncAttributesForSource: function (id, axiosOptions) {
            return localVarFp.syncAttributesForSource(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
         * @summary Test configuration for source connector
         * @param {string} sourceId The ID of the Source
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSourceConfiguration: function (sourceId, axiosOptions) {
            return localVarFp.testSourceConfiguration(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
         * @summary Check connection for source connector.
         * @param {string} sourceId The ID of the Source.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSourceConnection: function (sourceId, axiosOptions) {
            return localVarFp.testSourceConnection(sourceId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
         * @summary Bulk Update Provisioning Policies
         * @param {string} sourceId The Source id.
         * @param {Array<ProvisioningPolicyDtoBeta>} provisioningPolicyDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningPoliciesInBulk: function (sourceId, provisioningPolicyDtoBeta, axiosOptions) {
            return localVarFp.updateProvisioningPoliciesInBulk(sourceId, provisioningPolicyDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Partial update of Provisioning Policy
         * @param {string} sourceId The Source id.
         * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateProvisioningPolicy: function (sourceId, usageType, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.updateProvisioningPolicy(sourceId, usageType, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
         * @summary Update Source (Partial)
         * @param {string} id Source ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSource: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.updateSource(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Update Source Entitlement Request Configuration
         * @param {SourceEntitlementRequestConfigBeta} sourceEntitlementRequestConfigBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSourceEntitlementRequestConfig: function (sourceEntitlementRequestConfigBeta, axiosOptions) {
            return localVarFp.updateSourceEntitlementRequestConfig(sourceEntitlementRequestConfigBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
         * @summary Update Source Schema (Partial)
         * @param {string} sourceId The Source id.
         * @param {string} schemaId The Schema id.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSourceSchema: function (sourceId, schemaId, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.updateSourceSchema(sourceId, schemaId, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SourcesBetaApiFactory = SourcesBetaApiFactory;
/**
 * SourcesBetaApi - object-oriented interface
 * @export
 * @class SourcesBetaApi
 * @extends {BaseAPI}
 */
var SourcesBetaApi = /** @class */ (function (_super) {
    __extends(SourcesBetaApi, _super);
    function SourcesBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {SourcesBetaApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype._delete = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration)._delete(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {SourcesBetaApiCreateProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.createProvisioningPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).createProvisioningPolicy(requestParameters.sourceId, requestParameters.provisioningPolicyDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {SourcesBetaApiCreateSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.createSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).createSource(requestParameters.sourceBeta, requestParameters.provisionAsCsv, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {SourcesBetaApiCreateSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.createSourceSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).createSourceSchema(requestParameters.sourceId, requestParameters.schemaBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove All Accounts in a Source
     * @param {SourcesBetaApiDeleteAccountsAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.deleteAccountsAsync = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).deleteAccountsAsync(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Native Change Detection Configuration
     * @param {SourcesBetaApiDeleteNativeChangeDetectionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.deleteNativeChangeDetectionConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).deleteNativeChangeDetectionConfig(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {SourcesBetaApiDeleteProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.deleteProvisioningPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).deleteProvisioningPolicy(requestParameters.sourceId, requestParameters.usageType, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {SourcesBetaApiDeleteSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.deleteSourceSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).deleteSourceSchema(requestParameters.sourceId, requestParameters.schemaId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Source Correlation Configuration
     * @param {SourcesBetaApiGetCorrelationConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getCorrelationConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getCorrelationConfig(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Native Change Detection Configuration
     * @param {SourcesBetaApiGetNativeChangeDetectionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getNativeChangeDetectionConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getNativeChangeDetectionConfig(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {SourcesBetaApiGetProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getProvisioningPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getProvisioningPolicy(requestParameters.sourceId, requestParameters.usageType, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {SourcesBetaApiGetSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSource(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Downloads source accounts schema template
     * @param {SourcesBetaApiGetSourceAccountsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceAccountsSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceAccountsSchema(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Attribute Sync Config
     * @param {SourcesBetaApiGetSourceAttrSyncConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceAttrSyncConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceAttrSyncConfig(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets source config with language translations
     * @param {SourcesBetaApiGetSourceConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceConfig(requestParameters.id, requestParameters.locale, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source Entitlement Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceEntitlementRequestConfig = function (axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceEntitlementRequestConfig(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Downloads source entitlements schema template
     * @param {SourcesBetaApiGetSourceEntitlementsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceEntitlementsSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceEntitlementsSchema(requestParameters.id, requestParameters.schemaName, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {SourcesBetaApiGetSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceSchema(requestParameters.sourceId, requestParameters.schemaId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {SourcesBetaApiGetSourceSchemasRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.getSourceSchemas = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).getSourceSchemas(requestParameters.sourceId, requestParameters.includeTypes, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Account Aggregation
     * @param {SourcesBetaApiImportAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.importAccounts = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).importAccounts(requestParameters.id, requestParameters.file, requestParameters.disableOptimization, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Entitlement Aggregation
     * @param {SourcesBetaApiImportEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.importEntitlements = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).importEntitlements(requestParameters.id, requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.
     * @summary Uploads source accounts schema template
     * @param {SourcesBetaApiImportSourceAccountsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.importSourceAccountsSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).importSourceAccountsSchema(requestParameters.id, requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {SourcesBetaApiImportSourceConnectorFileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.importSourceConnectorFile = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).importSourceConnectorFile(requestParameters.sourceId, requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.
     * @summary Uploads source entitlements schema template
     * @param {SourcesBetaApiImportSourceEntitlementsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.importSourceEntitlementsSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).importSourceEntitlementsSchema(requestParameters.id, requestParameters.schemaName, requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
     * @summary Process Uncorrelated Accounts
     * @param {SourcesBetaApiImportUncorrelatedAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.importUncorrelatedAccounts = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).importUncorrelatedAccounts(requestParameters.id, requestParameters.file, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {SourcesBetaApiListProvisioningPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.listProvisioningPolicies = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).listProvisioningPolicies(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {SourcesBetaApiListSourcesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.listSources = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SourcesBetaApiFp)(this.configuration).listSources(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, requestParameters.forSubadmin, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
     * @summary Peek source connector\'s resource objects
     * @param {SourcesBetaApiPeekResourceObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.peekResourceObjects = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).peekResourceObjects(requestParameters.sourceId, requestParameters.resourceObjectsRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Ping cluster for source connector
     * @param {SourcesBetaApiPingClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.pingCluster = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).pingCluster(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Source Correlation Configuration
     * @param {SourcesBetaApiPutCorrelationConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.putCorrelationConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).putCorrelationConfig(requestParameters.id, requestParameters.correlationConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Native Change Detection Configuration
     * @param {SourcesBetaApiPutNativeChangeDetectionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.putNativeChangeDetectionConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).putNativeChangeDetectionConfig(requestParameters.id, requestParameters.nativeChangeDetectionConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {SourcesBetaApiPutProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.putProvisioningPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).putProvisioningPolicy(requestParameters.sourceId, requestParameters.usageType, requestParameters.provisioningPolicyDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {SourcesBetaApiPutSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.putSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).putSource(requestParameters.id, requestParameters.sourceBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Attribute Sync Config
     * @param {SourcesBetaApiPutSourceAttrSyncConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.putSourceAttrSyncConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).putSourceAttrSyncConfig(requestParameters.id, requestParameters.attrSyncSourceConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
     * @summary Update Source Schema (Full)
     * @param {SourcesBetaApiPutSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.putSourceSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).putSourceSchema(requestParameters.sourceId, requestParameters.schemaId, requestParameters.schemaBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Synchronize single source attributes.
     * @param {SourcesBetaApiSyncAttributesForSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.syncAttributesForSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).syncAttributesForSource(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
     * @summary Test configuration for source connector
     * @param {SourcesBetaApiTestSourceConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.testSourceConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).testSourceConfiguration(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary Check connection for source connector.
     * @param {SourcesBetaApiTestSourceConnectionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.testSourceConnection = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).testSourceConnection(requestParameters.sourceId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {SourcesBetaApiUpdateProvisioningPoliciesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.updateProvisioningPoliciesInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).updateProvisioningPoliciesInBulk(requestParameters.sourceId, requestParameters.provisioningPolicyDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {SourcesBetaApiUpdateProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.updateProvisioningPolicy = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).updateProvisioningPolicy(requestParameters.sourceId, requestParameters.usageType, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {SourcesBetaApiUpdateSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.updateSource = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).updateSource(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source Entitlement Request Configuration
     * @param {SourcesBetaApiUpdateSourceEntitlementRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.updateSourceEntitlementRequestConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).updateSourceEntitlementRequestConfig(requestParameters.sourceEntitlementRequestConfigBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {SourcesBetaApiUpdateSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    SourcesBetaApi.prototype.updateSourceSchema = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SourcesBetaApiFp)(this.configuration).updateSourceSchema(requestParameters.sourceId, requestParameters.schemaId, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SourcesBetaApi;
}(base_1.BaseAPI));
exports.SourcesBetaApi = SourcesBetaApi;
/**
 * SuggestedEntitlementDescriptionBetaApi - axios parameter creator
 * @export
 */
var SuggestedEntitlementDescriptionBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
         * @summary Submit Sed Batch Stats Request
         * @param {string} batchId Batch Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSedBatchStats: function (batchId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'batchId' is not null or undefined
                            (0, common_1.assertParamExists)('getSedBatchStats', 'batchId', batchId);
                            localVarPath = "/suggested-entitlement-description-batches/{batchId}/stats"
                                .replace("{".concat("batchId", "}"), encodeURIComponent(String(batchId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List Sed Batches. API responses with Sed Batch Status
         * @summary List Sed Batch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSedBatches: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/suggested-entitlement-description-batches";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List of Suggested Entitlement Description
         * @summary List Suggested Entitlement Description
         * @param {number} [limit] Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
         * @param {boolean} [count] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
         * @param {boolean} [countOnly] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
         * @param {boolean} [requestedByAnyone] By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
         * @param {boolean} [showPendingStatusOnly] Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSeds: function (limit, filters, count, countOnly, requestedByAnyone, showPendingStatusOnly, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/suggested-entitlement-descriptions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (countOnly !== undefined) {
                                localVarQueryParameter['count-only'] = countOnly;
                            }
                            if (requestedByAnyone !== undefined) {
                                localVarQueryParameter['requested-by-anyone'] = requestedByAnyone;
                            }
                            if (showPendingStatusOnly !== undefined) {
                                localVarQueryParameter['show-pending-status-only'] = showPendingStatusOnly;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Patch Suggested Entitlement Description
         * @summary Patch Suggested Entitlement Description
         * @param {string} id id is sed id
         * @param {Array<SedPatchBeta>} sedPatchBeta Sed Patch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSed: function (id, sedPatchBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchSed', 'id', id);
                            // verify required parameter 'sedPatchBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchSed', 'sedPatchBeta', sedPatchBeta);
                            localVarPath = "/suggested-entitlement-descriptions"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sedPatchBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
         * @summary Submit Bulk Approval Request
         * @param {Array<SedApprovalBeta>} sedApprovalBeta Sed Approval
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedApproval: function (sedApprovalBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sedApprovalBeta' is not null or undefined
                            (0, common_1.assertParamExists)('submitSedApproval', 'sedApprovalBeta', sedApprovalBeta);
                            localVarPath = "/suggested-entitlement-description-approvals";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sedApprovalBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
         * @summary Submit Sed Assignment Request
         * @param {SedAssignmentBeta} sedAssignmentBeta Sed Assignment Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedAssignment: function (sedAssignmentBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'sedAssignmentBeta' is not null or undefined
                            (0, common_1.assertParamExists)('submitSedAssignment', 'sedAssignmentBeta', sedAssignmentBeta);
                            localVarPath = "/suggested-entitlement-description-assignments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sedAssignmentBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
         * @summary Submit Sed Batch Request
         * @param {SedBatchRequestBeta} [sedBatchRequestBeta] Sed Batch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedBatchRequest: function (sedBatchRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/suggested-entitlement-description-batches";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sedBatchRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SuggestedEntitlementDescriptionBetaApiAxiosParamCreator = SuggestedEntitlementDescriptionBetaApiAxiosParamCreator;
/**
 * SuggestedEntitlementDescriptionBetaApi - functional programming interface
 * @export
 */
var SuggestedEntitlementDescriptionBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SuggestedEntitlementDescriptionBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
         * @summary Submit Sed Batch Stats Request
         * @param {string} batchId Batch Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSedBatchStats: function (batchId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSedBatchStats(batchId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List Sed Batches. API responses with Sed Batch Status
         * @summary List Sed Batch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSedBatches: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSedBatches(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List of Suggested Entitlement Description
         * @summary List Suggested Entitlement Description
         * @param {number} [limit] Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
         * @param {boolean} [count] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
         * @param {boolean} [countOnly] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
         * @param {boolean} [requestedByAnyone] By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
         * @param {boolean} [showPendingStatusOnly] Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSeds: function (limit, filters, count, countOnly, requestedByAnyone, showPendingStatusOnly, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSeds(limit, filters, count, countOnly, requestedByAnyone, showPendingStatusOnly, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Patch Suggested Entitlement Description
         * @summary Patch Suggested Entitlement Description
         * @param {string} id id is sed id
         * @param {Array<SedPatchBeta>} sedPatchBeta Sed Patch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSed: function (id, sedPatchBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchSed(id, sedPatchBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
         * @summary Submit Bulk Approval Request
         * @param {Array<SedApprovalBeta>} sedApprovalBeta Sed Approval
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedApproval: function (sedApprovalBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitSedApproval(sedApprovalBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
         * @summary Submit Sed Assignment Request
         * @param {SedAssignmentBeta} sedAssignmentBeta Sed Assignment Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedAssignment: function (sedAssignmentBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitSedAssignment(sedAssignmentBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
         * @summary Submit Sed Batch Request
         * @param {SedBatchRequestBeta} [sedBatchRequestBeta] Sed Batch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedBatchRequest: function (sedBatchRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitSedBatchRequest(sedBatchRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SuggestedEntitlementDescriptionBetaApiFp = SuggestedEntitlementDescriptionBetaApiFp;
/**
 * SuggestedEntitlementDescriptionBetaApi - factory interface
 * @export
 */
var SuggestedEntitlementDescriptionBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(configuration);
    return {
        /**
         * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
         * @summary Submit Sed Batch Stats Request
         * @param {string} batchId Batch Id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSedBatchStats: function (batchId, axiosOptions) {
            return localVarFp.getSedBatchStats(batchId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List Sed Batches. API responses with Sed Batch Status
         * @summary List Sed Batch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getSedBatches: function (axiosOptions) {
            return localVarFp.getSedBatches(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List of Suggested Entitlement Description
         * @summary List Suggested Entitlement Description
         * @param {number} [limit] Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
         * @param {boolean} [count] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
         * @param {boolean} [countOnly] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
         * @param {boolean} [requestedByAnyone] By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
         * @param {boolean} [showPendingStatusOnly] Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSeds: function (limit, filters, count, countOnly, requestedByAnyone, showPendingStatusOnly, axiosOptions) {
            return localVarFp.listSeds(limit, filters, count, countOnly, requestedByAnyone, showPendingStatusOnly, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Patch Suggested Entitlement Description
         * @summary Patch Suggested Entitlement Description
         * @param {string} id id is sed id
         * @param {Array<SedPatchBeta>} sedPatchBeta Sed Patch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSed: function (id, sedPatchBeta, axiosOptions) {
            return localVarFp.patchSed(id, sedPatchBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
         * @summary Submit Bulk Approval Request
         * @param {Array<SedApprovalBeta>} sedApprovalBeta Sed Approval
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedApproval: function (sedApprovalBeta, axiosOptions) {
            return localVarFp.submitSedApproval(sedApprovalBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
         * @summary Submit Sed Assignment Request
         * @param {SedAssignmentBeta} sedAssignmentBeta Sed Assignment Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedAssignment: function (sedAssignmentBeta, axiosOptions) {
            return localVarFp.submitSedAssignment(sedAssignmentBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
         * @summary Submit Sed Batch Request
         * @param {SedBatchRequestBeta} [sedBatchRequestBeta] Sed Batch Request
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitSedBatchRequest: function (sedBatchRequestBeta, axiosOptions) {
            return localVarFp.submitSedBatchRequest(sedBatchRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SuggestedEntitlementDescriptionBetaApiFactory = SuggestedEntitlementDescriptionBetaApiFactory;
/**
 * SuggestedEntitlementDescriptionBetaApi - object-oriented interface
 * @export
 * @class SuggestedEntitlementDescriptionBetaApi
 * @extends {BaseAPI}
 */
var SuggestedEntitlementDescriptionBetaApi = /** @class */ (function (_super) {
    __extends(SuggestedEntitlementDescriptionBetaApi, _super);
    function SuggestedEntitlementDescriptionBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
     * @summary Submit Sed Batch Stats Request
     * @param {SuggestedEntitlementDescriptionBetaApiGetSedBatchStatsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.getSedBatchStats = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).getSedBatchStats(requestParameters.batchId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List Sed Batches. API responses with Sed Batch Status
     * @summary List Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.getSedBatches = function (axiosOptions) {
        var _this = this;
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).getSedBatches(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List of Suggested Entitlement Description
     * @summary List Suggested Entitlement Description
     * @param {SuggestedEntitlementDescriptionBetaApiListSedsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.listSeds = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).listSeds(requestParameters.limit, requestParameters.filters, requestParameters.count, requestParameters.countOnly, requestParameters.requestedByAnyone, requestParameters.showPendingStatusOnly, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Patch Suggested Entitlement Description
     * @summary Patch Suggested Entitlement Description
     * @param {SuggestedEntitlementDescriptionBetaApiPatchSedRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.patchSed = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).patchSed(requestParameters.id, requestParameters.sedPatchBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
     * @summary Submit Bulk Approval Request
     * @param {SuggestedEntitlementDescriptionBetaApiSubmitSedApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.submitSedApproval = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).submitSedApproval(requestParameters.sedApprovalBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
     * @summary Submit Sed Assignment Request
     * @param {SuggestedEntitlementDescriptionBetaApiSubmitSedAssignmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.submitSedAssignment = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).submitSedAssignment(requestParameters.sedAssignmentBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
     * @summary Submit Sed Batch Request
     * @param {SuggestedEntitlementDescriptionBetaApiSubmitSedBatchRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    SuggestedEntitlementDescriptionBetaApi.prototype.submitSedBatchRequest = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.SuggestedEntitlementDescriptionBetaApiFp)(this.configuration).submitSedBatchRequest(requestParameters.sedBatchRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SuggestedEntitlementDescriptionBetaApi;
}(base_1.BaseAPI));
exports.SuggestedEntitlementDescriptionBetaApi = SuggestedEntitlementDescriptionBetaApi;
/**
 * TaggedObjectsBetaApi - axios parameter creator
 * @export
 */
var TaggedObjectsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This deletes a tagged object for the specified type.
         * @summary Delete Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
         * @param {string} id The ID of the object reference to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaggedObject: function (type, id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('deleteTaggedObject', 'type', type);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteTaggedObject', 'id', id);
                            localVarPath = "/tagged-objects/{type}/{id}"
                                .replace("{".concat("type", "}"), encodeURIComponent(String(type)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Remove Tags from Multiple Objects
         * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsToManyObject: function (bulkTaggedObjectBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'bulkTaggedObjectBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteTagsToManyObject', 'bulkTaggedObjectBeta', bulkTaggedObjectBeta);
                            localVarPath = "/tagged-objects/bulk-remove";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkTaggedObjectBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a tagged object for the specified type.
         * @summary Get Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaggedObject: function (type, id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('getTaggedObject', 'type', type);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getTaggedObject', 'id', id);
                            localVarPath = "/tagged-objects/{type}/{id}"
                                .replace("{".concat("type", "}"), encodeURIComponent(String(type)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
         * @summary List Tagged Objects
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedObjects: function (limit, offset, count, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/tagged-objects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
         * @summary List Tagged Objects by Type
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedObjectsByType: function (type, limit, offset, count, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('listTaggedObjectsByType', 'type', type);
                            localVarPath = "/tagged-objects/{type}"
                                .replace("{".concat("type", "}"), encodeURIComponent(String(type)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This updates a tagged object for the specified type.
         * @summary Update Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
         * @param {string} id The ID of the object reference to update.
         * @param {TaggedObjectBeta} taggedObjectBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putTaggedObject: function (type, id, taggedObjectBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'type' is not null or undefined
                            (0, common_1.assertParamExists)('putTaggedObject', 'type', type);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('putTaggedObject', 'id', id);
                            // verify required parameter 'taggedObjectBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putTaggedObject', 'taggedObjectBeta', taggedObjectBeta);
                            localVarPath = "/tagged-objects/{type}/{id}"
                                .replace("{".concat("type", "}"), encodeURIComponent(String(type)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(taggedObjectBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This adds a tag to an object.  Any authenticated token may be used to call this API.
         * @summary Add Tag to Object
         * @param {TaggedObjectBeta} taggedObjectBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTagToObject: function (taggedObjectBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'taggedObjectBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setTagToObject', 'taggedObjectBeta', taggedObjectBeta);
                            localVarPath = "/tagged-objects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(taggedObjectBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Tag Multiple Objects
         * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTagsToManyObjects: function (bulkTaggedObjectBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'bulkTaggedObjectBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setTagsToManyObjects', 'bulkTaggedObjectBeta', bulkTaggedObjectBeta);
                            localVarPath = "/tagged-objects/bulk-add";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(bulkTaggedObjectBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TaggedObjectsBetaApiAxiosParamCreator = TaggedObjectsBetaApiAxiosParamCreator;
/**
 * TaggedObjectsBetaApi - functional programming interface
 * @export
 */
var TaggedObjectsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TaggedObjectsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This deletes a tagged object for the specified type.
         * @summary Delete Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
         * @param {string} id The ID of the object reference to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaggedObject: function (type, id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTaggedObject(type, id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Remove Tags from Multiple Objects
         * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsToManyObject: function (bulkTaggedObjectBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTagsToManyObject(bulkTaggedObjectBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a tagged object for the specified type.
         * @summary Get Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaggedObject: function (type, id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTaggedObject(type, id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
         * @summary List Tagged Objects
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedObjects: function (limit, offset, count, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTaggedObjects(limit, offset, count, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
         * @summary List Tagged Objects by Type
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedObjectsByType: function (type, limit, offset, count, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTaggedObjectsByType(type, limit, offset, count, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This updates a tagged object for the specified type.
         * @summary Update Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
         * @param {string} id The ID of the object reference to update.
         * @param {TaggedObjectBeta} taggedObjectBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putTaggedObject: function (type, id, taggedObjectBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putTaggedObject(type, id, taggedObjectBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This adds a tag to an object.  Any authenticated token may be used to call this API.
         * @summary Add Tag to Object
         * @param {TaggedObjectBeta} taggedObjectBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTagToObject: function (taggedObjectBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setTagToObject(taggedObjectBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Tag Multiple Objects
         * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTagsToManyObjects: function (bulkTaggedObjectBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setTagsToManyObjects(bulkTaggedObjectBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TaggedObjectsBetaApiFp = TaggedObjectsBetaApiFp;
/**
 * TaggedObjectsBetaApi - factory interface
 * @export
 */
var TaggedObjectsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TaggedObjectsBetaApiFp)(configuration);
    return {
        /**
         * This deletes a tagged object for the specified type.
         * @summary Delete Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
         * @param {string} id The ID of the object reference to delete.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaggedObject: function (type, id, axiosOptions) {
            return localVarFp.deleteTaggedObject(type, id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Remove Tags from Multiple Objects
         * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsToManyObject: function (bulkTaggedObjectBeta, axiosOptions) {
            return localVarFp.deleteTagsToManyObject(bulkTaggedObjectBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a tagged object for the specified type.
         * @summary Get Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
         * @param {string} id The ID of the object reference to retrieve.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaggedObject: function (type, id, axiosOptions) {
            return localVarFp.getTaggedObject(type, id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
         * @summary List Tagged Objects
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedObjects: function (limit, offset, count, filters, axiosOptions) {
            return localVarFp.listTaggedObjects(limit, offset, count, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
         * @summary List Tagged Objects by Type
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTaggedObjectsByType: function (type, limit, offset, count, filters, axiosOptions) {
            return localVarFp.listTaggedObjectsByType(type, limit, offset, count, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This updates a tagged object for the specified type.
         * @summary Update Tagged Object
         * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
         * @param {string} id The ID of the object reference to update.
         * @param {TaggedObjectBeta} taggedObjectBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putTaggedObject: function (type, id, taggedObjectBeta, axiosOptions) {
            return localVarFp.putTaggedObject(type, id, taggedObjectBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This adds a tag to an object.  Any authenticated token may be used to call this API.
         * @summary Add Tag to Object
         * @param {TaggedObjectBeta} taggedObjectBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTagToObject: function (taggedObjectBeta, axiosOptions) {
            return localVarFp.setTagToObject(taggedObjectBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
         * @summary Tag Multiple Objects
         * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTagsToManyObjects: function (bulkTaggedObjectBeta, axiosOptions) {
            return localVarFp.setTagsToManyObjects(bulkTaggedObjectBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TaggedObjectsBetaApiFactory = TaggedObjectsBetaApiFactory;
/**
 * TaggedObjectsBetaApi - object-oriented interface
 * @export
 * @class TaggedObjectsBetaApi
 * @extends {BaseAPI}
 */
var TaggedObjectsBetaApi = /** @class */ (function (_super) {
    __extends(TaggedObjectsBetaApi, _super);
    function TaggedObjectsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {TaggedObjectsBetaApiDeleteTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.deleteTaggedObject = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).deleteTaggedObject(requestParameters.type, requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {TaggedObjectsBetaApiDeleteTagsToManyObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.deleteTagsToManyObject = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).deleteTagsToManyObject(requestParameters.bulkTaggedObjectBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {TaggedObjectsBetaApiGetTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.getTaggedObject = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).getTaggedObject(requestParameters.type, requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {TaggedObjectsBetaApiListTaggedObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.listTaggedObjects = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).listTaggedObjects(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {TaggedObjectsBetaApiListTaggedObjectsByTypeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.listTaggedObjectsByType = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).listTaggedObjectsByType(requestParameters.type, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {TaggedObjectsBetaApiPutTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.putTaggedObject = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).putTaggedObject(requestParameters.type, requestParameters.id, requestParameters.taggedObjectBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObjectsBetaApiSetTagToObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.setTagToObject = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).setTagToObject(requestParameters.taggedObjectBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {TaggedObjectsBetaApiSetTagsToManyObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    TaggedObjectsBetaApi.prototype.setTagsToManyObjects = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaggedObjectsBetaApiFp)(this.configuration).setTagsToManyObjects(requestParameters.bulkTaggedObjectBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TaggedObjectsBetaApi;
}(base_1.BaseAPI));
exports.TaggedObjectsBetaApi = TaggedObjectsBetaApi;
/**
 * TaskManagementBetaApi - axios parameter creator
 * @export
 */
var TaskManagementBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Retrieve headers for a list of TaskStatus for pending tasks.
         * @summary Retrieve headers only for pending task list.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTaskHeaders: function (offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/task-status/pending-tasks";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Retrieve a list of TaskStatus for pending tasks.
         * @summary Retrieve a pending task list.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTasks: function (offset, limit, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/task-status/pending-tasks";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a TaskStatus for a task by task ID.
         * @summary Get task status by ID.
         * @param {string} id Task ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatus: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getTaskStatus', 'id', id);
                            localVarPath = "/task-status/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
         * @summary Retrieve a task status list.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatusList: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/task-status";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
         * @summary Update task status by ID
         * @param {string} id Task ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the object.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStatus: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateTaskStatus', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateTaskStatus', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/task-status/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TaskManagementBetaApiAxiosParamCreator = TaskManagementBetaApiAxiosParamCreator;
/**
 * TaskManagementBetaApi - functional programming interface
 * @export
 */
var TaskManagementBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TaskManagementBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieve headers for a list of TaskStatus for pending tasks.
         * @summary Retrieve headers only for pending task list.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTaskHeaders: function (offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPendingTaskHeaders(offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a list of TaskStatus for pending tasks.
         * @summary Retrieve a pending task list.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTasks: function (offset, limit, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPendingTasks(offset, limit, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a TaskStatus for a task by task ID.
         * @summary Get task status by ID.
         * @param {string} id Task ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatus: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTaskStatus(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
         * @summary Retrieve a task status list.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatusList: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTaskStatusList(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
         * @summary Update task status by ID
         * @param {string} id Task ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the object.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStatus: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTaskStatus(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TaskManagementBetaApiFp = TaskManagementBetaApiFp;
/**
 * TaskManagementBetaApi - factory interface
 * @export
 */
var TaskManagementBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TaskManagementBetaApiFp)(configuration);
    return {
        /**
         * Retrieve headers for a list of TaskStatus for pending tasks.
         * @summary Retrieve headers only for pending task list.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTaskHeaders: function (offset, limit, count, axiosOptions) {
            return localVarFp.getPendingTaskHeaders(offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a list of TaskStatus for pending tasks.
         * @summary Retrieve a pending task list.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTasks: function (offset, limit, count, axiosOptions) {
            return localVarFp.getPendingTasks(offset, limit, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a TaskStatus for a task by task ID.
         * @summary Get task status by ID.
         * @param {string} id Task ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatus: function (id, axiosOptions) {
            return localVarFp.getTaskStatus(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
         * @summary Retrieve a task status list.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatusList: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.getTaskStatusList(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
         * @summary Update task status by ID
         * @param {string} id Task ID.
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the object.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskStatus: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.updateTaskStatus(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TaskManagementBetaApiFactory = TaskManagementBetaApiFactory;
/**
 * TaskManagementBetaApi - object-oriented interface
 * @export
 * @class TaskManagementBetaApi
 * @extends {BaseAPI}
 */
var TaskManagementBetaApi = /** @class */ (function (_super) {
    __extends(TaskManagementBetaApi, _super);
    function TaskManagementBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Retrieve headers for a list of TaskStatus for pending tasks.
     * @summary Retrieve headers only for pending task list.
     * @param {TaskManagementBetaApiGetPendingTaskHeadersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    TaskManagementBetaApi.prototype.getPendingTaskHeaders = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TaskManagementBetaApiFp)(this.configuration).getPendingTaskHeaders(requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a list of TaskStatus for pending tasks.
     * @summary Retrieve a pending task list.
     * @param {TaskManagementBetaApiGetPendingTasksRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    TaskManagementBetaApi.prototype.getPendingTasks = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TaskManagementBetaApiFp)(this.configuration).getPendingTasks(requestParameters.offset, requestParameters.limit, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a TaskStatus for a task by task ID.
     * @summary Get task status by ID.
     * @param {TaskManagementBetaApiGetTaskStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    TaskManagementBetaApi.prototype.getTaskStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaskManagementBetaApiFp)(this.configuration).getTaskStatus(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
     * @summary Retrieve a task status list.
     * @param {TaskManagementBetaApiGetTaskStatusListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    TaskManagementBetaApi.prototype.getTaskStatusList = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TaskManagementBetaApiFp)(this.configuration).getTaskStatusList(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
     * @summary Update task status by ID
     * @param {TaskManagementBetaApiUpdateTaskStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    TaskManagementBetaApi.prototype.updateTaskStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TaskManagementBetaApiFp)(this.configuration).updateTaskStatus(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TaskManagementBetaApi;
}(base_1.BaseAPI));
exports.TaskManagementBetaApi = TaskManagementBetaApi;
/**
 * TenantBetaApi - axios parameter creator
 * @export
 */
var TenantBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This rest endpoint can be used to retrieve tenant details.
         * @summary Get Tenant Information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/tenant";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TenantBetaApiAxiosParamCreator = TenantBetaApiAxiosParamCreator;
/**
 * TenantBetaApi - functional programming interface
 * @export
 */
var TenantBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TenantBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This rest endpoint can be used to retrieve tenant details.
         * @summary Get Tenant Information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTenant(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TenantBetaApiFp = TenantBetaApiFp;
/**
 * TenantBetaApi - factory interface
 * @export
 */
var TenantBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TenantBetaApiFp)(configuration);
    return {
        /**
         * This rest endpoint can be used to retrieve tenant details.
         * @summary Get Tenant Information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: function (axiosOptions) {
            return localVarFp.getTenant(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TenantBetaApiFactory = TenantBetaApiFactory;
/**
 * TenantBetaApi - object-oriented interface
 * @export
 * @class TenantBetaApi
 * @extends {BaseAPI}
 */
var TenantBetaApi = /** @class */ (function (_super) {
    __extends(TenantBetaApi, _super);
    function TenantBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This rest endpoint can be used to retrieve tenant details.
     * @summary Get Tenant Information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantBetaApi
     */
    TenantBetaApi.prototype.getTenant = function (axiosOptions) {
        var _this = this;
        return (0, exports.TenantBetaApiFp)(this.configuration).getTenant(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TenantBetaApi;
}(base_1.BaseAPI));
exports.TenantBetaApi = TenantBetaApi;
/**
 * TransformsBetaApi - axios parameter creator
 * @export
 */
var TransformsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
         * @summary Create transform
         * @param {TransformBeta} transformBeta The transform to be created.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createTransform: function (transformBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'transformBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createTransform', 'transformBeta', transformBeta);
                            localVarPath = "/transforms";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transformBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
         * @summary Delete a transform
         * @param {string} id ID of the transform to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteTransform', 'id', id);
                            localVarPath = "/transforms/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
         * @summary Transform by ID
         * @param {string} id ID of the transform to retrieve
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTransform: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getTransform', 'id', id);
                            localVarPath = "/transforms/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
         * @summary List transforms
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [name] Name of the transform to retrieve from the list.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTransforms: function (offset, limit, count, name, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/transforms";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
         * @summary Update a transform
         * @param {string} id ID of the transform to update
         * @param {TransformBeta} [transformBeta] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateTransform: function (id, transformBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateTransform', 'id', id);
                            localVarPath = "/transforms/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(transformBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TransformsBetaApiAxiosParamCreator = TransformsBetaApiAxiosParamCreator;
/**
 * TransformsBetaApi - functional programming interface
 * @export
 */
var TransformsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TransformsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
         * @summary Create transform
         * @param {TransformBeta} transformBeta The transform to be created.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createTransform: function (transformBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createTransform(transformBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
         * @summary Delete a transform
         * @param {string} id ID of the transform to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteTransform(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
         * @summary Transform by ID
         * @param {string} id ID of the transform to retrieve
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTransform: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTransform(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
         * @summary List transforms
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [name] Name of the transform to retrieve from the list.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTransforms: function (offset, limit, count, name, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTransforms(offset, limit, count, name, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
         * @summary Update a transform
         * @param {string} id ID of the transform to update
         * @param {TransformBeta} [transformBeta] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateTransform: function (id, transformBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateTransform(id, transformBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TransformsBetaApiFp = TransformsBetaApiFp;
/**
 * TransformsBetaApi - factory interface
 * @export
 */
var TransformsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TransformsBetaApiFp)(configuration);
    return {
        /**
         * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
         * @summary Create transform
         * @param {TransformBeta} transformBeta The transform to be created.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createTransform: function (transformBeta, axiosOptions) {
            return localVarFp.createTransform(transformBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
         * @summary Delete a transform
         * @param {string} id ID of the transform to delete
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform: function (id, axiosOptions) {
            return localVarFp.deleteTransform(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
         * @summary Transform by ID
         * @param {string} id ID of the transform to retrieve
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTransform: function (id, axiosOptions) {
            return localVarFp.getTransform(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
         * @summary List transforms
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [name] Name of the transform to retrieve from the list.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTransforms: function (offset, limit, count, name, filters, axiosOptions) {
            return localVarFp.listTransforms(offset, limit, count, name, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
         * @summary Update a transform
         * @param {string} id ID of the transform to update
         * @param {TransformBeta} [transformBeta] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateTransform: function (id, transformBeta, axiosOptions) {
            return localVarFp.updateTransform(id, transformBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TransformsBetaApiFactory = TransformsBetaApiFactory;
/**
 * TransformsBetaApi - object-oriented interface
 * @export
 * @class TransformsBetaApi
 * @extends {BaseAPI}
 */
var TransformsBetaApi = /** @class */ (function (_super) {
    __extends(TransformsBetaApi, _super);
    function TransformsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {TransformsBetaApiCreateTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    TransformsBetaApi.prototype.createTransform = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TransformsBetaApiFp)(this.configuration).createTransform(requestParameters.transformBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {TransformsBetaApiDeleteTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    TransformsBetaApi.prototype.deleteTransform = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TransformsBetaApiFp)(this.configuration).deleteTransform(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {TransformsBetaApiGetTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    TransformsBetaApi.prototype.getTransform = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TransformsBetaApiFp)(this.configuration).getTransform(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {TransformsBetaApiListTransformsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    TransformsBetaApi.prototype.listTransforms = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TransformsBetaApiFp)(this.configuration).listTransforms(requestParameters.offset, requestParameters.limit, requestParameters.count, requestParameters.name, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {TransformsBetaApiUpdateTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    TransformsBetaApi.prototype.updateTransform = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TransformsBetaApiFp)(this.configuration).updateTransform(requestParameters.id, requestParameters.transformBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TransformsBetaApi;
}(base_1.BaseAPI));
exports.TransformsBetaApi = TransformsBetaApi;
/**
 * TriggersBetaApi - axios parameter creator
 * @export
 */
var TriggersBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Completes an invocation to a REQUEST_RESPONSE type trigger.
         * @summary Complete Trigger Invocation
         * @param {string} id The ID of the invocation to complete.
         * @param {CompleteInvocationBeta} completeInvocationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        completeTriggerInvocation: function (id, completeInvocationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('completeTriggerInvocation', 'id', id);
                            // verify required parameter 'completeInvocationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('completeTriggerInvocation', 'completeInvocationBeta', completeInvocationBeta);
                            localVarPath = "/trigger-invocations/{id}/complete"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(completeInvocationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
         * @summary Create a Subscription
         * @param {SubscriptionPostRequestBeta} subscriptionPostRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: function (subscriptionPostRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subscriptionPostRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createSubscription', 'subscriptionPostRequestBeta', subscriptionPostRequestBeta);
                            localVarPath = "/trigger-subscriptions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subscriptionPostRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes an existing subscription to a trigger.
         * @summary Delete a Subscription
         * @param {string} id Subscription ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscription: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteSubscription', 'id', id);
                            localVarPath = "/trigger-subscriptions/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a list of all trigger subscriptions.
         * @summary List Subscriptions
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/trigger-subscriptions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
         * @summary List Latest Invocation Statuses
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTriggerInvocationStatus: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/trigger-invocations/status";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a list of triggers that are available in the tenant.
         * @summary List Triggers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers: function (limit, offset, count, filters, sorters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/triggers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            if (sorters !== undefined) {
                                localVarQueryParameter['sorters'] = sorters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
         * @summary Patch a Subscription
         * @param {string} id ID of the Subscription to patch
         * @param {Array<SubscriptionPatchRequestInnerBeta>} subscriptionPatchRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSubscription: function (id, subscriptionPatchRequestInnerBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchSubscription', 'id', id);
                            // verify required parameter 'subscriptionPatchRequestInnerBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchSubscription', 'subscriptionPatchRequestInnerBeta', subscriptionPatchRequestInnerBeta);
                            localVarPath = "/trigger-subscriptions/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subscriptionPatchRequestInnerBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
         * @summary Start a Test Invocation
         * @param {TestInvocationBeta} testInvocationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startTestTriggerInvocation: function (testInvocationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'testInvocationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('startTestTriggerInvocation', 'testInvocationBeta', testInvocationBeta);
                            localVarPath = "/trigger-invocations/test";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testInvocationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
         * @summary Validate a Subscription Filter
         * @param {ValidateFilterInputDtoBeta} validateFilterInputDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSubscriptionFilter: function (validateFilterInputDtoBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'validateFilterInputDtoBeta' is not null or undefined
                            (0, common_1.assertParamExists)('testSubscriptionFilter', 'validateFilterInputDtoBeta', validateFilterInputDtoBeta);
                            localVarPath = "/trigger-subscriptions/validate-filter";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(validateFilterInputDtoBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
         * @summary Update a Subscription
         * @param {string} id Subscription ID
         * @param {SubscriptionPutRequestBeta} subscriptionPutRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: function (id, subscriptionPutRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateSubscription', 'id', id);
                            // verify required parameter 'subscriptionPutRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateSubscription', 'subscriptionPutRequestBeta', subscriptionPutRequestBeta);
                            localVarPath = "/trigger-subscriptions/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subscriptionPutRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TriggersBetaApiAxiosParamCreator = TriggersBetaApiAxiosParamCreator;
/**
 * TriggersBetaApi - functional programming interface
 * @export
 */
var TriggersBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TriggersBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Completes an invocation to a REQUEST_RESPONSE type trigger.
         * @summary Complete Trigger Invocation
         * @param {string} id The ID of the invocation to complete.
         * @param {CompleteInvocationBeta} completeInvocationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        completeTriggerInvocation: function (id, completeInvocationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.completeTriggerInvocation(id, completeInvocationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
         * @summary Create a Subscription
         * @param {SubscriptionPostRequestBeta} subscriptionPostRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: function (subscriptionPostRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createSubscription(subscriptionPostRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes an existing subscription to a trigger.
         * @summary Delete a Subscription
         * @param {string} id Subscription ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscription: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteSubscription(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a list of all trigger subscriptions.
         * @summary List Subscriptions
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listSubscriptions(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
         * @summary List Latest Invocation Statuses
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTriggerInvocationStatus: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTriggerInvocationStatus(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a list of triggers that are available in the tenant.
         * @summary List Triggers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers: function (limit, offset, count, filters, sorters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listTriggers(limit, offset, count, filters, sorters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
         * @summary Patch a Subscription
         * @param {string} id ID of the Subscription to patch
         * @param {Array<SubscriptionPatchRequestInnerBeta>} subscriptionPatchRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSubscription: function (id, subscriptionPatchRequestInnerBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchSubscription(id, subscriptionPatchRequestInnerBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
         * @summary Start a Test Invocation
         * @param {TestInvocationBeta} testInvocationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startTestTriggerInvocation: function (testInvocationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.startTestTriggerInvocation(testInvocationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
         * @summary Validate a Subscription Filter
         * @param {ValidateFilterInputDtoBeta} validateFilterInputDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSubscriptionFilter: function (validateFilterInputDtoBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testSubscriptionFilter(validateFilterInputDtoBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
         * @summary Update a Subscription
         * @param {string} id Subscription ID
         * @param {SubscriptionPutRequestBeta} subscriptionPutRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: function (id, subscriptionPutRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateSubscription(id, subscriptionPutRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TriggersBetaApiFp = TriggersBetaApiFp;
/**
 * TriggersBetaApi - factory interface
 * @export
 */
var TriggersBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TriggersBetaApiFp)(configuration);
    return {
        /**
         * Completes an invocation to a REQUEST_RESPONSE type trigger.
         * @summary Complete Trigger Invocation
         * @param {string} id The ID of the invocation to complete.
         * @param {CompleteInvocationBeta} completeInvocationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        completeTriggerInvocation: function (id, completeInvocationBeta, axiosOptions) {
            return localVarFp.completeTriggerInvocation(id, completeInvocationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
         * @summary Create a Subscription
         * @param {SubscriptionPostRequestBeta} subscriptionPostRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: function (subscriptionPostRequestBeta, axiosOptions) {
            return localVarFp.createSubscription(subscriptionPostRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes an existing subscription to a trigger.
         * @summary Delete a Subscription
         * @param {string} id Subscription ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscription: function (id, axiosOptions) {
            return localVarFp.deleteSubscription(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a list of all trigger subscriptions.
         * @summary List Subscriptions
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listSubscriptions(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
         * @summary List Latest Invocation Statuses
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTriggerInvocationStatus: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listTriggerInvocationStatus(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a list of triggers that are available in the tenant.
         * @summary List Triggers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
         * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listTriggers: function (limit, offset, count, filters, sorters, axiosOptions) {
            return localVarFp.listTriggers(limit, offset, count, filters, sorters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
         * @summary Patch a Subscription
         * @param {string} id ID of the Subscription to patch
         * @param {Array<SubscriptionPatchRequestInnerBeta>} subscriptionPatchRequestInnerBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchSubscription: function (id, subscriptionPatchRequestInnerBeta, axiosOptions) {
            return localVarFp.patchSubscription(id, subscriptionPatchRequestInnerBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
         * @summary Start a Test Invocation
         * @param {TestInvocationBeta} testInvocationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        startTestTriggerInvocation: function (testInvocationBeta, axiosOptions) {
            return localVarFp.startTestTriggerInvocation(testInvocationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
         * @summary Validate a Subscription Filter
         * @param {ValidateFilterInputDtoBeta} validateFilterInputDtoBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testSubscriptionFilter: function (validateFilterInputDtoBeta, axiosOptions) {
            return localVarFp.testSubscriptionFilter(validateFilterInputDtoBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
         * @summary Update a Subscription
         * @param {string} id Subscription ID
         * @param {SubscriptionPutRequestBeta} subscriptionPutRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: function (id, subscriptionPutRequestBeta, axiosOptions) {
            return localVarFp.updateSubscription(id, subscriptionPutRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TriggersBetaApiFactory = TriggersBetaApiFactory;
/**
 * TriggersBetaApi - object-oriented interface
 * @export
 * @class TriggersBetaApi
 * @extends {BaseAPI}
 */
var TriggersBetaApi = /** @class */ (function (_super) {
    __extends(TriggersBetaApi, _super);
    function TriggersBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Completes an invocation to a REQUEST_RESPONSE type trigger.
     * @summary Complete Trigger Invocation
     * @param {TriggersBetaApiCompleteTriggerInvocationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.completeTriggerInvocation = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).completeTriggerInvocation(requestParameters.id, requestParameters.completeInvocationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
     * @summary Create a Subscription
     * @param {TriggersBetaApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.createSubscription = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).createSubscription(requestParameters.subscriptionPostRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes an existing subscription to a trigger.
     * @summary Delete a Subscription
     * @param {TriggersBetaApiDeleteSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.deleteSubscription = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).deleteSubscription(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a list of all trigger subscriptions.
     * @summary List Subscriptions
     * @param {TriggersBetaApiListSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.listSubscriptions = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TriggersBetaApiFp)(this.configuration).listSubscriptions(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
     * @summary List Latest Invocation Statuses
     * @param {TriggersBetaApiListTriggerInvocationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.listTriggerInvocationStatus = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TriggersBetaApiFp)(this.configuration).listTriggerInvocationStatus(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a list of triggers that are available in the tenant.
     * @summary List Triggers
     * @param {TriggersBetaApiListTriggersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.listTriggers = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.TriggersBetaApiFp)(this.configuration).listTriggers(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, requestParameters.sorters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
     * @summary Patch a Subscription
     * @param {TriggersBetaApiPatchSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.patchSubscription = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).patchSubscription(requestParameters.id, requestParameters.subscriptionPatchRequestInnerBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
     * @summary Start a Test Invocation
     * @param {TriggersBetaApiStartTestTriggerInvocationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.startTestTriggerInvocation = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).startTestTriggerInvocation(requestParameters.testInvocationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
     * @summary Validate a Subscription Filter
     * @param {TriggersBetaApiTestSubscriptionFilterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.testSubscriptionFilter = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).testSubscriptionFilter(requestParameters.validateFilterInputDtoBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
     * @summary Update a Subscription
     * @param {TriggersBetaApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    TriggersBetaApi.prototype.updateSubscription = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.TriggersBetaApiFp)(this.configuration).updateSubscription(requestParameters.id, requestParameters.subscriptionPutRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TriggersBetaApi;
}(base_1.BaseAPI));
exports.TriggersBetaApi = TriggersBetaApi;
/**
 * UIMetadataBetaApi - axios parameter creator
 * @export
 */
var UIMetadataBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get a tenant UI metadata
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUiMetadata: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/ui-metadata/tenant";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update tenant UI metadata
         * @param {TenantUiMetadataItemUpdateRequestBeta} tenantUiMetadataItemUpdateRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTenantUiMetadata: function (tenantUiMetadataItemUpdateRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'tenantUiMetadataItemUpdateRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('setTenantUiMetadata', 'tenantUiMetadataItemUpdateRequestBeta', tenantUiMetadataItemUpdateRequestBeta);
                            localVarPath = "/ui-metadata/tenant";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tenantUiMetadataItemUpdateRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UIMetadataBetaApiAxiosParamCreator = UIMetadataBetaApiAxiosParamCreator;
/**
 * UIMetadataBetaApi - functional programming interface
 * @export
 */
var UIMetadataBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UIMetadataBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get a tenant UI metadata
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUiMetadata: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTenantUiMetadata(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update tenant UI metadata
         * @param {TenantUiMetadataItemUpdateRequestBeta} tenantUiMetadataItemUpdateRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTenantUiMetadata: function (tenantUiMetadataItemUpdateRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setTenantUiMetadata(tenantUiMetadataItemUpdateRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.UIMetadataBetaApiFp = UIMetadataBetaApiFp;
/**
 * UIMetadataBetaApi - factory interface
 * @export
 */
var UIMetadataBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UIMetadataBetaApiFp)(configuration);
    return {
        /**
         * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
         * @summary Get a tenant UI metadata
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenantUiMetadata: function (axiosOptions) {
            return localVarFp.getTenantUiMetadata(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
         * @summary Update tenant UI metadata
         * @param {TenantUiMetadataItemUpdateRequestBeta} tenantUiMetadataItemUpdateRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        setTenantUiMetadata: function (tenantUiMetadataItemUpdateRequestBeta, axiosOptions) {
            return localVarFp.setTenantUiMetadata(tenantUiMetadataItemUpdateRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UIMetadataBetaApiFactory = UIMetadataBetaApiFactory;
/**
 * UIMetadataBetaApi - object-oriented interface
 * @export
 * @class UIMetadataBetaApi
 * @extends {BaseAPI}
 */
var UIMetadataBetaApi = /** @class */ (function (_super) {
    __extends(UIMetadataBetaApi, _super);
    function UIMetadataBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get a tenant UI metadata
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UIMetadataBetaApi
     */
    UIMetadataBetaApi.prototype.getTenantUiMetadata = function (axiosOptions) {
        var _this = this;
        return (0, exports.UIMetadataBetaApiFp)(this.configuration).getTenantUiMetadata(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update tenant UI metadata
     * @param {UIMetadataBetaApiSetTenantUiMetadataRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UIMetadataBetaApi
     */
    UIMetadataBetaApi.prototype.setTenantUiMetadata = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.UIMetadataBetaApiFp)(this.configuration).setTenantUiMetadata(requestParameters.tenantUiMetadataItemUpdateRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UIMetadataBetaApi;
}(base_1.BaseAPI));
exports.UIMetadataBetaApi = UIMetadataBetaApi;
/**
 * VendorConnectorMappingsBetaApi - axios parameter creator
 * @export
 */
var VendorConnectorMappingsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
         * @summary Create a vendor connector mapping
         * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createVendorConnectorMapping: function (vendorConnectorMappingBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vendorConnectorMappingBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createVendorConnectorMapping', 'vendorConnectorMappingBeta', vendorConnectorMappingBeta);
                            localVarPath = "/vendor-connector-mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(vendorConnectorMappingBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
         * @summary Delete a vendor connector mapping
         * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendorConnectorMapping: function (vendorConnectorMappingBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'vendorConnectorMappingBeta' is not null or undefined
                            (0, common_1.assertParamExists)('deleteVendorConnectorMapping', 'vendorConnectorMappingBeta', vendorConnectorMappingBeta);
                            localVarPath = "/vendor-connector-mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(vendorConnectorMappingBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.VendorConnectorMappingsBetaApiAxiosParamCreator = VendorConnectorMappingsBetaApiAxiosParamCreator;
/**
 * VendorConnectorMappingsBetaApi - functional programming interface
 * @export
 */
var VendorConnectorMappingsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VendorConnectorMappingsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
         * @summary Create a vendor connector mapping
         * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createVendorConnectorMapping: function (vendorConnectorMappingBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createVendorConnectorMapping(vendorConnectorMappingBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
         * @summary Delete a vendor connector mapping
         * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendorConnectorMapping: function (vendorConnectorMappingBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteVendorConnectorMapping(vendorConnectorMappingBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.VendorConnectorMappingsBetaApiFp = VendorConnectorMappingsBetaApiFp;
/**
 * VendorConnectorMappingsBetaApi - factory interface
 * @export
 */
var VendorConnectorMappingsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VendorConnectorMappingsBetaApiFp)(configuration);
    return {
        /**
         * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
         * @summary Create a vendor connector mapping
         * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createVendorConnectorMapping: function (vendorConnectorMappingBeta, axiosOptions) {
            return localVarFp.createVendorConnectorMapping(vendorConnectorMappingBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
         * @summary Delete a vendor connector mapping
         * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendorConnectorMapping: function (vendorConnectorMappingBeta, axiosOptions) {
            return localVarFp.deleteVendorConnectorMapping(vendorConnectorMappingBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VendorConnectorMappingsBetaApiFactory = VendorConnectorMappingsBetaApiFactory;
/**
 * VendorConnectorMappingsBetaApi - object-oriented interface
 * @export
 * @class VendorConnectorMappingsBetaApi
 * @extends {BaseAPI}
 */
var VendorConnectorMappingsBetaApi = /** @class */ (function (_super) {
    __extends(VendorConnectorMappingsBetaApi, _super);
    function VendorConnectorMappingsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMappingsBetaApiCreateVendorConnectorMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorConnectorMappingsBetaApi
     */
    VendorConnectorMappingsBetaApi.prototype.createVendorConnectorMapping = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.VendorConnectorMappingsBetaApiFp)(this.configuration).createVendorConnectorMapping(requestParameters.vendorConnectorMappingBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMappingsBetaApiDeleteVendorConnectorMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorConnectorMappingsBetaApi
     */
    VendorConnectorMappingsBetaApi.prototype.deleteVendorConnectorMapping = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.VendorConnectorMappingsBetaApiFp)(this.configuration).deleteVendorConnectorMapping(requestParameters.vendorConnectorMappingBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VendorConnectorMappingsBetaApi;
}(base_1.BaseAPI));
exports.VendorConnectorMappingsBetaApi = VendorConnectorMappingsBetaApi;
/**
 * WorkItemsBetaApi - axios parameter creator
 * @export
 */
var WorkItemsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
         * @summary Approve an Approval Item
         * @param {string} id The ID of the work item
         * @param {string} approvalItemId The ID of the approval item.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveApprovalItem: function (id, approvalItemId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('approveApprovalItem', 'id', id);
                            // verify required parameter 'approvalItemId' is not null or undefined
                            (0, common_1.assertParamExists)('approveApprovalItem', 'approvalItemId', approvalItemId);
                            localVarPath = "/work-items/{id}/approve/{approvalItemId}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("approvalItemId", "}"), encodeURIComponent(String(approvalItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
         * @summary Bulk approve Approval Items
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveApprovalItemsInBulk: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('approveApprovalItemsInBulk', 'id', id);
                            localVarPath = "/work-items/bulk-approve/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API completes a work item. Either an admin, or the owning/current user must make this request.
         * @summary Complete a Work Item
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        completeWorkItem: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('completeWorkItem', 'id', id);
                            localVarPath = "/work-items/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
         * @summary Forward a Work Item
         * @param {string} id The ID of the work item
         * @param {WorkItemForwardBeta} workItemForwardBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        forwardWorkItem: function (id, workItemForwardBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('forwardWorkItem', 'id', id);
                            // verify required parameter 'workItemForwardBeta' is not null or undefined
                            (0, common_1.assertParamExists)('forwardWorkItem', 'workItemForwardBeta', workItemForwardBeta);
                            localVarPath = "/work-items/{id}/forward"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workItemForwardBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
         * @summary Completed Work Items
         * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedWorkItems: function (ownerId, limit, offset, count, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/work-items/completed";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['ownerId'] = ownerId;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
         * @summary Count Completed Work Items
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCountCompletedWorkItems: function (ownerId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/work-items/completed/count";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['ownerId'] = ownerId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a count of work items belonging to either the specified user(admin required), or the current user.
         * @summary Count Work Items
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCountWorkItems: function (ownerId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/work-items/count";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['ownerId'] = ownerId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
         * @summary Get a Work Item
         * @param {string} id ID of the work item.
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItem: function (id, ownerId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkItem', 'id', id);
                            localVarPath = "/work-items/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['ownerId'] = ownerId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
         * @summary Work Items Summary
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsSummary: function (ownerId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/work-items/summary";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (ownerId !== undefined) {
                                localVarQueryParameter['ownerId'] = ownerId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
         * @summary List Work Items
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkItems: function (limit, offset, count, ownerId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/work-items";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (ownerId !== undefined) {
                                localVarQueryParameter['ownerId'] = ownerId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
         * @summary Reject an Approval Item
         * @param {string} id The ID of the work item
         * @param {string} approvalItemId The ID of the approval item.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectApprovalItem: function (id, approvalItemId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('rejectApprovalItem', 'id', id);
                            // verify required parameter 'approvalItemId' is not null or undefined
                            (0, common_1.assertParamExists)('rejectApprovalItem', 'approvalItemId', approvalItemId);
                            localVarPath = "/work-items/{id}/reject/{approvalItemId}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)))
                                .replace("{".concat("approvalItemId", "}"), encodeURIComponent(String(approvalItemId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
         * @summary Bulk reject Approval Items
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectApprovalItemsInBulk: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('rejectApprovalItemsInBulk', 'id', id);
                            localVarPath = "/work-items/bulk-reject/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This API submits account selections. Either an admin, or the owning/current user must make this request.
         * @summary Submit Account Selections
         * @param {string} id The ID of the work item
         * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitAccountSelection: function (id, requestBody, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('submitAccountSelection', 'id', id);
                            // verify required parameter 'requestBody' is not null or undefined
                            (0, common_1.assertParamExists)('submitAccountSelection', 'requestBody', requestBody);
                            localVarPath = "/work-items/{id}/submit-account-selection"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkItemsBetaApiAxiosParamCreator = WorkItemsBetaApiAxiosParamCreator;
/**
 * WorkItemsBetaApi - functional programming interface
 * @export
 */
var WorkItemsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkItemsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
         * @summary Approve an Approval Item
         * @param {string} id The ID of the work item
         * @param {string} approvalItemId The ID of the approval item.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveApprovalItem: function (id, approvalItemId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.approveApprovalItem(id, approvalItemId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
         * @summary Bulk approve Approval Items
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveApprovalItemsInBulk: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.approveApprovalItemsInBulk(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API completes a work item. Either an admin, or the owning/current user must make this request.
         * @summary Complete a Work Item
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        completeWorkItem: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.completeWorkItem(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
         * @summary Forward a Work Item
         * @param {string} id The ID of the work item
         * @param {WorkItemForwardBeta} workItemForwardBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        forwardWorkItem: function (id, workItemForwardBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.forwardWorkItem(id, workItemForwardBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
         * @summary Completed Work Items
         * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedWorkItems: function (ownerId, limit, offset, count, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCompletedWorkItems(ownerId, limit, offset, count, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
         * @summary Count Completed Work Items
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCountCompletedWorkItems: function (ownerId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCountCompletedWorkItems(ownerId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a count of work items belonging to either the specified user(admin required), or the current user.
         * @summary Count Work Items
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCountWorkItems: function (ownerId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getCountWorkItems(ownerId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
         * @summary Get a Work Item
         * @param {string} id ID of the work item.
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItem: function (id, ownerId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItem(id, ownerId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
         * @summary Work Items Summary
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsSummary: function (ownerId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkItemsSummary(ownerId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
         * @summary List Work Items
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkItems: function (limit, offset, count, ownerId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkItems(limit, offset, count, ownerId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
         * @summary Reject an Approval Item
         * @param {string} id The ID of the work item
         * @param {string} approvalItemId The ID of the approval item.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectApprovalItem: function (id, approvalItemId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rejectApprovalItem(id, approvalItemId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
         * @summary Bulk reject Approval Items
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectApprovalItemsInBulk: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rejectApprovalItemsInBulk(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This API submits account selections. Either an admin, or the owning/current user must make this request.
         * @summary Submit Account Selections
         * @param {string} id The ID of the work item
         * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitAccountSelection: function (id, requestBody, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.submitAccountSelection(id, requestBody, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.WorkItemsBetaApiFp = WorkItemsBetaApiFp;
/**
 * WorkItemsBetaApi - factory interface
 * @export
 */
var WorkItemsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkItemsBetaApiFp)(configuration);
    return {
        /**
         * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
         * @summary Approve an Approval Item
         * @param {string} id The ID of the work item
         * @param {string} approvalItemId The ID of the approval item.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveApprovalItem: function (id, approvalItemId, axiosOptions) {
            return localVarFp.approveApprovalItem(id, approvalItemId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
         * @summary Bulk approve Approval Items
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        approveApprovalItemsInBulk: function (id, axiosOptions) {
            return localVarFp.approveApprovalItemsInBulk(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API completes a work item. Either an admin, or the owning/current user must make this request.
         * @summary Complete a Work Item
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        completeWorkItem: function (id, axiosOptions) {
            return localVarFp.completeWorkItem(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
         * @summary Forward a Work Item
         * @param {string} id The ID of the work item
         * @param {WorkItemForwardBeta} workItemForwardBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        forwardWorkItem: function (id, workItemForwardBeta, axiosOptions) {
            return localVarFp.forwardWorkItem(id, workItemForwardBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
         * @summary Completed Work Items
         * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCompletedWorkItems: function (ownerId, limit, offset, count, axiosOptions) {
            return localVarFp.getCompletedWorkItems(ownerId, limit, offset, count, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
         * @summary Count Completed Work Items
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCountCompletedWorkItems: function (ownerId, axiosOptions) {
            return localVarFp.getCountCompletedWorkItems(ownerId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a count of work items belonging to either the specified user(admin required), or the current user.
         * @summary Count Work Items
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getCountWorkItems: function (ownerId, axiosOptions) {
            return localVarFp.getCountWorkItems(ownerId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
         * @summary Get a Work Item
         * @param {string} id ID of the work item.
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItem: function (id, ownerId, axiosOptions) {
            return localVarFp.getWorkItem(id, ownerId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
         * @summary Work Items Summary
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkItemsSummary: function (ownerId, axiosOptions) {
            return localVarFp.getWorkItemsSummary(ownerId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
         * @summary List Work Items
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [ownerId] ID of the work item owner.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkItems: function (limit, offset, count, ownerId, axiosOptions) {
            return localVarFp.listWorkItems(limit, offset, count, ownerId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
         * @summary Reject an Approval Item
         * @param {string} id The ID of the work item
         * @param {string} approvalItemId The ID of the approval item.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectApprovalItem: function (id, approvalItemId, axiosOptions) {
            return localVarFp.rejectApprovalItem(id, approvalItemId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
         * @summary Bulk reject Approval Items
         * @param {string} id The ID of the work item
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        rejectApprovalItemsInBulk: function (id, axiosOptions) {
            return localVarFp.rejectApprovalItemsInBulk(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This API submits account selections. Either an admin, or the owning/current user must make this request.
         * @summary Submit Account Selections
         * @param {string} id The ID of the work item
         * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        submitAccountSelection: function (id, requestBody, axiosOptions) {
            return localVarFp.submitAccountSelection(id, requestBody, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkItemsBetaApiFactory = WorkItemsBetaApiFactory;
/**
 * WorkItemsBetaApi - object-oriented interface
 * @export
 * @class WorkItemsBetaApi
 * @extends {BaseAPI}
 */
var WorkItemsBetaApi = /** @class */ (function (_super) {
    __extends(WorkItemsBetaApi, _super);
    function WorkItemsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {WorkItemsBetaApiApproveApprovalItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.approveApprovalItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).approveApprovalItem(requestParameters.id, requestParameters.approvalItemId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {WorkItemsBetaApiApproveApprovalItemsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.approveApprovalItemsInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).approveApprovalItemsInBulk(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {WorkItemsBetaApiCompleteWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.completeWorkItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).completeWorkItem(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
     * @summary Forward a Work Item
     * @param {WorkItemsBetaApiForwardWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.forwardWorkItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).forwardWorkItem(requestParameters.id, requestParameters.workItemForwardBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {WorkItemsBetaApiGetCompletedWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.getCompletedWorkItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).getCompletedWorkItems(requestParameters.ownerId, requestParameters.limit, requestParameters.offset, requestParameters.count, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {WorkItemsBetaApiGetCountCompletedWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.getCountCompletedWorkItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).getCountCompletedWorkItems(requestParameters.ownerId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {WorkItemsBetaApiGetCountWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.getCountWorkItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).getCountWorkItems(requestParameters.ownerId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {WorkItemsBetaApiGetWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.getWorkItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).getWorkItem(requestParameters.id, requestParameters.ownerId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {WorkItemsBetaApiGetWorkItemsSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.getWorkItemsSummary = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).getWorkItemsSummary(requestParameters.ownerId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {WorkItemsBetaApiListWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.listWorkItems = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).listWorkItems(requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.ownerId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {WorkItemsBetaApiRejectApprovalItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.rejectApprovalItem = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).rejectApprovalItem(requestParameters.id, requestParameters.approvalItemId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {WorkItemsBetaApiRejectApprovalItemsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.rejectApprovalItemsInBulk = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).rejectApprovalItemsInBulk(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {WorkItemsBetaApiSubmitAccountSelectionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    WorkItemsBetaApi.prototype.submitAccountSelection = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkItemsBetaApiFp)(this.configuration).submitAccountSelection(requestParameters.id, requestParameters.requestBody, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkItemsBetaApi;
}(base_1.BaseAPI));
exports.WorkItemsBetaApi = WorkItemsBetaApi;
/**
 * WorkReassignmentBetaApi - axios parameter creator
 * @export
 */
var WorkReassignmentBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Creates a new Reassignment Configuration for the specified identity.
         * @summary Create a Reassignment Configuration
         * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createReassignmentConfiguration: function (configurationItemRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'configurationItemRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createReassignmentConfiguration', 'configurationItemRequestBeta', configurationItemRequestBeta);
                            localVarPath = "/reassignment-configurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(configurationItemRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deletes all Reassignment Configuration for the specified identity
         * @summary Delete Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteReassignmentConfiguration: function (identityId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('deleteReassignmentConfiguration', 'identityId', identityId);
                            localVarPath = "/reassignment-configurations/{identityId}"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
         * @summary Evaluate Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {ConfigTypeEnumBeta} configType Reassignment work type
         * @param {Array<string>} [exclusionFilters] Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluateReassignmentConfiguration: function (identityId, configType, exclusionFilters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('getEvaluateReassignmentConfiguration', 'identityId', identityId);
                            // verify required parameter 'configType' is not null or undefined
                            (0, common_1.assertParamExists)('getEvaluateReassignmentConfiguration', 'configType', configType);
                            localVarPath = "/reassignment-configurations/{identityId}/evaluate/{configType}"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)))
                                .replace("{".concat("configType", "}"), encodeURIComponent(String(configType)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (exclusionFilters) {
                                localVarQueryParameter['exclusionFilters'] = exclusionFilters.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets a collection of types which are available in the Reassignment Configuration UI.
         * @summary List Reassignment Config Types
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getReassignmentConfigTypes: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/reassignment-configurations/types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets the Reassignment Configuration for an identity.
         * @summary Get Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getReassignmentConfiguration: function (identityId, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('getReassignmentConfiguration', 'identityId', identityId);
                            localVarPath = "/reassignment-configurations/{identityId}"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
         * @summary Get Tenant-wide Reassignment Configuration settings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenantConfigConfiguration: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/reassignment-configurations/tenant-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Gets all Reassignment configuration for the current org.
         * @summary List Reassignment Configurations
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listReassignmentConfigurations: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/reassignment-configurations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
         * @summary Update Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putReassignmentConfig: function (identityId, configurationItemRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'identityId' is not null or undefined
                            (0, common_1.assertParamExists)('putReassignmentConfig', 'identityId', identityId);
                            // verify required parameter 'configurationItemRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putReassignmentConfig', 'configurationItemRequestBeta', configurationItemRequestBeta);
                            localVarPath = "/reassignment-configurations/{identityId}"
                                .replace("{".concat("identityId", "}"), encodeURIComponent(String(identityId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(configurationItemRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
         * @summary Update Tenant-wide Reassignment Configuration settings
         * @param {TenantConfigurationRequestBeta} tenantConfigurationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putTenantConfiguration: function (tenantConfigurationRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'tenantConfigurationRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('putTenantConfiguration', 'tenantConfigurationRequestBeta', tenantConfigurationRequestBeta);
                            localVarPath = "/reassignment-configurations/tenant-config";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tenantConfigurationRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkReassignmentBetaApiAxiosParamCreator = WorkReassignmentBetaApiAxiosParamCreator;
/**
 * WorkReassignmentBetaApi - functional programming interface
 * @export
 */
var WorkReassignmentBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkReassignmentBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Creates a new Reassignment Configuration for the specified identity.
         * @summary Create a Reassignment Configuration
         * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createReassignmentConfiguration: function (configurationItemRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createReassignmentConfiguration(configurationItemRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Deletes all Reassignment Configuration for the specified identity
         * @summary Delete Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteReassignmentConfiguration: function (identityId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteReassignmentConfiguration(identityId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
         * @summary Evaluate Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {ConfigTypeEnumBeta} configType Reassignment work type
         * @param {Array<string>} [exclusionFilters] Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluateReassignmentConfiguration: function (identityId, configType, exclusionFilters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getEvaluateReassignmentConfiguration(identityId, configType, exclusionFilters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a collection of types which are available in the Reassignment Configuration UI.
         * @summary List Reassignment Config Types
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getReassignmentConfigTypes: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getReassignmentConfigTypes(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets the Reassignment Configuration for an identity.
         * @summary Get Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getReassignmentConfiguration: function (identityId, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getReassignmentConfiguration(identityId, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
         * @summary Get Tenant-wide Reassignment Configuration settings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenantConfigConfiguration: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTenantConfigConfiguration(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets all Reassignment configuration for the current org.
         * @summary List Reassignment Configurations
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listReassignmentConfigurations: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listReassignmentConfigurations(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
         * @summary Update Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putReassignmentConfig: function (identityId, configurationItemRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putReassignmentConfig(identityId, configurationItemRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
         * @summary Update Tenant-wide Reassignment Configuration settings
         * @param {TenantConfigurationRequestBeta} tenantConfigurationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putTenantConfiguration: function (tenantConfigurationRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.putTenantConfiguration(tenantConfigurationRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.WorkReassignmentBetaApiFp = WorkReassignmentBetaApiFp;
/**
 * WorkReassignmentBetaApi - factory interface
 * @export
 */
var WorkReassignmentBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkReassignmentBetaApiFp)(configuration);
    return {
        /**
         * Creates a new Reassignment Configuration for the specified identity.
         * @summary Create a Reassignment Configuration
         * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createReassignmentConfiguration: function (configurationItemRequestBeta, axiosOptions) {
            return localVarFp.createReassignmentConfiguration(configurationItemRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deletes all Reassignment Configuration for the specified identity
         * @summary Delete Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteReassignmentConfiguration: function (identityId, axiosOptions) {
            return localVarFp.deleteReassignmentConfiguration(identityId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
         * @summary Evaluate Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {ConfigTypeEnumBeta} configType Reassignment work type
         * @param {Array<string>} [exclusionFilters] Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getEvaluateReassignmentConfiguration: function (identityId, configType, exclusionFilters, axiosOptions) {
            return localVarFp.getEvaluateReassignmentConfiguration(identityId, configType, exclusionFilters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a collection of types which are available in the Reassignment Configuration UI.
         * @summary List Reassignment Config Types
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getReassignmentConfigTypes: function (axiosOptions) {
            return localVarFp.getReassignmentConfigTypes(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the Reassignment Configuration for an identity.
         * @summary Get Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getReassignmentConfiguration: function (identityId, axiosOptions) {
            return localVarFp.getReassignmentConfiguration(identityId, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
         * @summary Get Tenant-wide Reassignment Configuration settings
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getTenantConfigConfiguration: function (axiosOptions) {
            return localVarFp.getTenantConfigConfiguration(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets all Reassignment configuration for the current org.
         * @summary List Reassignment Configurations
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listReassignmentConfigurations: function (axiosOptions) {
            return localVarFp.listReassignmentConfigurations(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
         * @summary Update Reassignment Configuration
         * @param {string} identityId unique identity id
         * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putReassignmentConfig: function (identityId, configurationItemRequestBeta, axiosOptions) {
            return localVarFp.putReassignmentConfig(identityId, configurationItemRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
         * @summary Update Tenant-wide Reassignment Configuration settings
         * @param {TenantConfigurationRequestBeta} tenantConfigurationRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        putTenantConfiguration: function (tenantConfigurationRequestBeta, axiosOptions) {
            return localVarFp.putTenantConfiguration(tenantConfigurationRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkReassignmentBetaApiFactory = WorkReassignmentBetaApiFactory;
/**
 * WorkReassignmentBetaApi - object-oriented interface
 * @export
 * @class WorkReassignmentBetaApi
 * @extends {BaseAPI}
 */
var WorkReassignmentBetaApi = /** @class */ (function (_super) {
    __extends(WorkReassignmentBetaApi, _super);
    function WorkReassignmentBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates a new Reassignment Configuration for the specified identity.
     * @summary Create a Reassignment Configuration
     * @param {WorkReassignmentBetaApiCreateReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.createReassignmentConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).createReassignmentConfiguration(requestParameters.configurationItemRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deletes all Reassignment Configuration for the specified identity
     * @summary Delete Reassignment Configuration
     * @param {WorkReassignmentBetaApiDeleteReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.deleteReassignmentConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).deleteReassignmentConfiguration(requestParameters.identityId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
     * @summary Evaluate Reassignment Configuration
     * @param {WorkReassignmentBetaApiGetEvaluateReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.getEvaluateReassignmentConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).getEvaluateReassignmentConfiguration(requestParameters.identityId, requestParameters.configType, requestParameters.exclusionFilters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a collection of types which are available in the Reassignment Configuration UI.
     * @summary List Reassignment Config Types
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.getReassignmentConfigTypes = function (axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).getReassignmentConfigTypes(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the Reassignment Configuration for an identity.
     * @summary Get Reassignment Configuration
     * @param {WorkReassignmentBetaApiGetReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.getReassignmentConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).getReassignmentConfiguration(requestParameters.identityId, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
     * @summary Get Tenant-wide Reassignment Configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.getTenantConfigConfiguration = function (axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).getTenantConfigConfiguration(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets all Reassignment configuration for the current org.
     * @summary List Reassignment Configurations
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.listReassignmentConfigurations = function (axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).listReassignmentConfigurations(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
     * @summary Update Reassignment Configuration
     * @param {WorkReassignmentBetaApiPutReassignmentConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.putReassignmentConfig = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).putReassignmentConfig(requestParameters.identityId, requestParameters.configurationItemRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
     * @summary Update Tenant-wide Reassignment Configuration settings
     * @param {WorkReassignmentBetaApiPutTenantConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    WorkReassignmentBetaApi.prototype.putTenantConfiguration = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkReassignmentBetaApiFp)(this.configuration).putTenantConfiguration(requestParameters.tenantConfigurationRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkReassignmentBetaApi;
}(base_1.BaseAPI));
exports.WorkReassignmentBetaApi = WorkReassignmentBetaApi;
/**
 * WorkflowsBetaApi - axios parameter creator
 * @export
 */
var WorkflowsBetaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Use this API to cancel a running workflow execution.
         * @summary Cancel Workflow Execution by ID
         * @param {string} id The workflow execution ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        cancelWorkflowExecution: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('cancelWorkflowExecution', 'id', id);
                            localVarPath = "/workflow-executions/{id}/cancel"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a new workflow with the desired trigger and steps specified in the request body.
         * @summary Create Workflow
         * @param {CreateWorkflowRequestBeta} createWorkflowRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow: function (createWorkflowRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'createWorkflowRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('createWorkflow', 'createWorkflowRequestBeta', createWorkflowRequestBeta);
                            localVarPath = "/workflows";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createWorkflowRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
         * @summary Delete Workflow By Id
         * @param {string} id Id of the Workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('deleteWorkflow', 'id', id);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a single workflow by id.
         * @summary Get Workflow By Id
         * @param {string} id Id of the workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkflow', 'id', id);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
         * @summary Get Workflow Execution
         * @param {string} id Workflow execution ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecution: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkflowExecution', 'id', id);
                            localVarPath = "/workflow-executions/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
         * @summary Get Workflow Execution History
         * @param {string} id Id of the workflow execution
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecutionHistory: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkflowExecutionHistory', 'id', id);
                            localVarPath = "/workflow-executions/{id}/history"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
         * @summary List Workflow Executions
         * @param {string} id Workflow ID.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecutions: function (id, limit, offset, count, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('getWorkflowExecutions', 'id', id);
                            localVarPath = "/workflows/{id}/executions"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (count !== undefined) {
                                localVarQueryParameter['count'] = count;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lists all triggers, actions, and operators in the library
         * @summary List Complete Workflow Library
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listCompleteWorkflowLibrary: function (limit, offset, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflow-library";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lists the workflow actions available to you.
         * @summary List Workflow Library Actions
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryActions: function (limit, offset, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflow-library/actions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lists the workflow operators available to you
         * @summary List Workflow Library Operators
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryOperators: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflow-library/operators";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This lists the workflow triggers available to you
         * @summary List Workflow Library Triggers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryTriggers: function (limit, offset, filters, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflow-library/triggers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (offset !== undefined) {
                                localVarQueryParameter['offset'] = offset;
                            }
                            if (filters !== undefined) {
                                localVarQueryParameter['filters'] = filters;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all workflows in the tenant.
         * @summary List Workflows
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows: function (axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/workflows";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
         * @summary Patch Workflow
         * @param {string} id Id of the Workflow
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkflow: function (id, jsonPatchOperationBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('patchWorkflow', 'id', id);
                            // verify required parameter 'jsonPatchOperationBeta' is not null or undefined
                            (0, common_1.assertParamExists)('patchWorkflow', 'jsonPatchOperationBeta', jsonPatchOperationBeta);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(jsonPatchOperationBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
         * @summary Execute Workflow via External Trigger
         * @param {string} id Id of the workflow
         * @param {PostExternalExecuteWorkflowRequestBeta} [postExternalExecuteWorkflowRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        postExternalExecuteWorkflow: function (id, postExternalExecuteWorkflowRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('postExternalExecuteWorkflow', 'id', id);
                            localVarPath = "/workflows/execute/external/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postExternalExecuteWorkflowRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
         * @summary Generate External Trigger OAuth Client
         * @param {string} id Id of the workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        postWorkflowExternalTrigger: function (id, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('postWorkflowExternalTrigger', 'id', id);
                            localVarPath = "/workflows/{id}/external/oauth-clients"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
         * @summary Test Workflow via External Trigger
         * @param {string} id Id of the workflow
         * @param {TestExternalExecuteWorkflowRequestBeta} [testExternalExecuteWorkflowRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testExternalExecuteWorkflow: function (id, testExternalExecuteWorkflowRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('testExternalExecuteWorkflow', 'id', id);
                            localVarPath = "/workflows/execute/external/{id}/test"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testExternalExecuteWorkflowRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
         * @summary Test Workflow By Id
         * @param {string} id Id of the workflow
         * @param {TestWorkflowRequestBeta} testWorkflowRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testWorkflow: function (id, testWorkflowRequestBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('testWorkflow', 'id', id);
                            // verify required parameter 'testWorkflowRequestBeta' is not null or undefined
                            (0, common_1.assertParamExists)('testWorkflow', 'testWorkflowRequestBeta', testWorkflowRequestBeta);
                            localVarPath = "/workflows/{id}/test"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(testWorkflowRequestBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Perform a full update of a workflow.  The updated workflow object is returned in the response.
         * @summary Update Workflow
         * @param {string} id Id of the Workflow
         * @param {WorkflowBodyBeta} workflowBodyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow: function (id, workflowBodyBeta, axiosOptions) {
            if (axiosOptions === void 0) { axiosOptions = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('updateWorkflow', 'id', id);
                            // verify required parameter 'workflowBodyBeta' is not null or undefined
                            (0, common_1.assertParamExists)('updateWorkflow', 'workflowBodyBeta', workflowBodyBeta);
                            localVarPath = "/workflows/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), axiosOptions);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)
                                // authentication UserContextAuth required
                                // oauth required
                            ];
                        case 1:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            // authentication UserContextAuth required
                            // oauth required
                            return [4 /*yield*/, (0, common_1.setOAuthToObject)(localVarHeaderParameter, "UserContextAuth", [], configuration)];
                        case 2:
                            // authentication UserContextAuth required
                            // oauth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), axiosOptions.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(workflowBodyBeta, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    axiosOptions: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.WorkflowsBetaApiAxiosParamCreator = WorkflowsBetaApiAxiosParamCreator;
/**
 * WorkflowsBetaApi - functional programming interface
 * @export
 */
var WorkflowsBetaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.WorkflowsBetaApiAxiosParamCreator)(configuration);
    return {
        /**
         * Use this API to cancel a running workflow execution.
         * @summary Cancel Workflow Execution by ID
         * @param {string} id The workflow execution ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        cancelWorkflowExecution: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.cancelWorkflowExecution(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create a new workflow with the desired trigger and steps specified in the request body.
         * @summary Create Workflow
         * @param {CreateWorkflowRequestBeta} createWorkflowRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow: function (createWorkflowRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.createWorkflow(createWorkflowRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
         * @summary Delete Workflow By Id
         * @param {string} id Id of the Workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteWorkflow(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a single workflow by id.
         * @summary Get Workflow By Id
         * @param {string} id Id of the workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflow(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
         * @summary Get Workflow Execution
         * @param {string} id Workflow execution ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecution: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflowExecution(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
         * @summary Get Workflow Execution History
         * @param {string} id Id of the workflow execution
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecutionHistory: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflowExecutionHistory(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
         * @summary List Workflow Executions
         * @param {string} id Workflow ID.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecutions: function (id, limit, offset, count, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getWorkflowExecutions(id, limit, offset, count, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lists all triggers, actions, and operators in the library
         * @summary List Complete Workflow Library
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listCompleteWorkflowLibrary: function (limit, offset, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listCompleteWorkflowLibrary(limit, offset, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lists the workflow actions available to you.
         * @summary List Workflow Library Actions
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryActions: function (limit, offset, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkflowLibraryActions(limit, offset, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lists the workflow operators available to you
         * @summary List Workflow Library Operators
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryOperators: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkflowLibraryOperators(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This lists the workflow triggers available to you
         * @summary List Workflow Library Triggers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryTriggers: function (limit, offset, filters, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkflowLibraryTriggers(limit, offset, filters, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List all workflows in the tenant.
         * @summary List Workflows
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows: function (axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.listWorkflows(axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
         * @summary Patch Workflow
         * @param {string} id Id of the Workflow
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkflow: function (id, jsonPatchOperationBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.patchWorkflow(id, jsonPatchOperationBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
         * @summary Execute Workflow via External Trigger
         * @param {string} id Id of the workflow
         * @param {PostExternalExecuteWorkflowRequestBeta} [postExternalExecuteWorkflowRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        postExternalExecuteWorkflow: function (id, postExternalExecuteWorkflowRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postExternalExecuteWorkflow(id, postExternalExecuteWorkflowRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
         * @summary Generate External Trigger OAuth Client
         * @param {string} id Id of the workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        postWorkflowExternalTrigger: function (id, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.postWorkflowExternalTrigger(id, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
         * @summary Test Workflow via External Trigger
         * @param {string} id Id of the workflow
         * @param {TestExternalExecuteWorkflowRequestBeta} [testExternalExecuteWorkflowRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testExternalExecuteWorkflow: function (id, testExternalExecuteWorkflowRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testExternalExecuteWorkflow(id, testExternalExecuteWorkflowRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
         * @summary Test Workflow By Id
         * @param {string} id Id of the workflow
         * @param {TestWorkflowRequestBeta} testWorkflowRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testWorkflow: function (id, testWorkflowRequestBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.testWorkflow(id, testWorkflowRequestBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Perform a full update of a workflow.  The updated workflow object is returned in the response.
         * @summary Update Workflow
         * @param {string} id Id of the Workflow
         * @param {WorkflowBodyBeta} workflowBodyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow: function (id, workflowBodyBeta, axiosOptions) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateWorkflow(id, workflowBodyBeta, axiosOptions)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.WorkflowsBetaApiFp = WorkflowsBetaApiFp;
/**
 * WorkflowsBetaApi - factory interface
 * @export
 */
var WorkflowsBetaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.WorkflowsBetaApiFp)(configuration);
    return {
        /**
         * Use this API to cancel a running workflow execution.
         * @summary Cancel Workflow Execution by ID
         * @param {string} id The workflow execution ID
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        cancelWorkflowExecution: function (id, axiosOptions) {
            return localVarFp.cancelWorkflowExecution(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new workflow with the desired trigger and steps specified in the request body.
         * @summary Create Workflow
         * @param {CreateWorkflowRequestBeta} createWorkflowRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        createWorkflow: function (createWorkflowRequestBeta, axiosOptions) {
            return localVarFp.createWorkflow(createWorkflowRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
         * @summary Delete Workflow By Id
         * @param {string} id Id of the Workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkflow: function (id, axiosOptions) {
            return localVarFp.deleteWorkflow(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a single workflow by id.
         * @summary Get Workflow By Id
         * @param {string} id Id of the workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflow: function (id, axiosOptions) {
            return localVarFp.getWorkflow(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
         * @summary Get Workflow Execution
         * @param {string} id Workflow execution ID.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecution: function (id, axiosOptions) {
            return localVarFp.getWorkflowExecution(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
         * @summary Get Workflow Execution History
         * @param {string} id Id of the workflow execution
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecutionHistory: function (id, axiosOptions) {
            return localVarFp.getWorkflowExecutionHistory(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
         * @summary List Workflow Executions
         * @param {string} id Workflow ID.
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        getWorkflowExecutions: function (id, limit, offset, count, filters, axiosOptions) {
            return localVarFp.getWorkflowExecutions(id, limit, offset, count, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lists all triggers, actions, and operators in the library
         * @summary List Complete Workflow Library
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listCompleteWorkflowLibrary: function (limit, offset, axiosOptions) {
            return localVarFp.listCompleteWorkflowLibrary(limit, offset, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lists the workflow actions available to you.
         * @summary List Workflow Library Actions
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryActions: function (limit, offset, filters, axiosOptions) {
            return localVarFp.listWorkflowLibraryActions(limit, offset, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lists the workflow operators available to you
         * @summary List Workflow Library Operators
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryOperators: function (axiosOptions) {
            return localVarFp.listWorkflowLibraryOperators(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This lists the workflow triggers available to you
         * @summary List Workflow Library Triggers
         * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
         * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflowLibraryTriggers: function (limit, offset, filters, axiosOptions) {
            return localVarFp.listWorkflowLibraryTriggers(limit, offset, filters, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all workflows in the tenant.
         * @summary List Workflows
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        listWorkflows: function (axiosOptions) {
            return localVarFp.listWorkflows(axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
         * @summary Patch Workflow
         * @param {string} id Id of the Workflow
         * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        patchWorkflow: function (id, jsonPatchOperationBeta, axiosOptions) {
            return localVarFp.patchWorkflow(id, jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
         * @summary Execute Workflow via External Trigger
         * @param {string} id Id of the workflow
         * @param {PostExternalExecuteWorkflowRequestBeta} [postExternalExecuteWorkflowRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        postExternalExecuteWorkflow: function (id, postExternalExecuteWorkflowRequestBeta, axiosOptions) {
            return localVarFp.postExternalExecuteWorkflow(id, postExternalExecuteWorkflowRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
         * @summary Generate External Trigger OAuth Client
         * @param {string} id Id of the workflow
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        postWorkflowExternalTrigger: function (id, axiosOptions) {
            return localVarFp.postWorkflowExternalTrigger(id, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
         * @summary Test Workflow via External Trigger
         * @param {string} id Id of the workflow
         * @param {TestExternalExecuteWorkflowRequestBeta} [testExternalExecuteWorkflowRequestBeta]
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testExternalExecuteWorkflow: function (id, testExternalExecuteWorkflowRequestBeta, axiosOptions) {
            return localVarFp.testExternalExecuteWorkflow(id, testExternalExecuteWorkflowRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
         * @summary Test Workflow By Id
         * @param {string} id Id of the workflow
         * @param {TestWorkflowRequestBeta} testWorkflowRequestBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        testWorkflow: function (id, testWorkflowRequestBeta, axiosOptions) {
            return localVarFp.testWorkflow(id, testWorkflowRequestBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Perform a full update of a workflow.  The updated workflow object is returned in the response.
         * @summary Update Workflow
         * @param {string} id Id of the Workflow
         * @param {WorkflowBodyBeta} workflowBodyBeta
         * @param {*} [axiosOptions] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkflow: function (id, workflowBodyBeta, axiosOptions) {
            return localVarFp.updateWorkflow(id, workflowBodyBeta, axiosOptions).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.WorkflowsBetaApiFactory = WorkflowsBetaApiFactory;
/**
 * WorkflowsBetaApi - object-oriented interface
 * @export
 * @class WorkflowsBetaApi
 * @extends {BaseAPI}
 */
var WorkflowsBetaApi = /** @class */ (function (_super) {
    __extends(WorkflowsBetaApi, _super);
    function WorkflowsBetaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {WorkflowsBetaApiCancelWorkflowExecutionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.cancelWorkflowExecution = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).cancelWorkflowExecution(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {WorkflowsBetaApiCreateWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.createWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).createWorkflow(requestParameters.createWorkflowRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {WorkflowsBetaApiDeleteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.deleteWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).deleteWorkflow(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {WorkflowsBetaApiGetWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.getWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).getWorkflow(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {WorkflowsBetaApiGetWorkflowExecutionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.getWorkflowExecution = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).getWorkflowExecution(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {WorkflowsBetaApiGetWorkflowExecutionHistoryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.getWorkflowExecutionHistory = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).getWorkflowExecutionHistory(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {WorkflowsBetaApiGetWorkflowExecutionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.getWorkflowExecutions = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).getWorkflowExecutions(requestParameters.id, requestParameters.limit, requestParameters.offset, requestParameters.count, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {WorkflowsBetaApiListCompleteWorkflowLibraryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.listCompleteWorkflowLibrary = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).listCompleteWorkflowLibrary(requestParameters.limit, requestParameters.offset, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {WorkflowsBetaApiListWorkflowLibraryActionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.listWorkflowLibraryActions = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).listWorkflowLibraryActions(requestParameters.limit, requestParameters.offset, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.listWorkflowLibraryOperators = function (axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).listWorkflowLibraryOperators(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {WorkflowsBetaApiListWorkflowLibraryTriggersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.listWorkflowLibraryTriggers = function (requestParameters, axiosOptions) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).listWorkflowLibraryTriggers(requestParameters.limit, requestParameters.offset, requestParameters.filters, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.listWorkflows = function (axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).listWorkflows(axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {WorkflowsBetaApiPatchWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.patchWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).patchWorkflow(requestParameters.id, requestParameters.jsonPatchOperationBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {WorkflowsBetaApiPostExternalExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.postExternalExecuteWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).postExternalExecuteWorkflow(requestParameters.id, requestParameters.postExternalExecuteWorkflowRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {WorkflowsBetaApiPostWorkflowExternalTriggerRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.postWorkflowExternalTrigger = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).postWorkflowExternalTrigger(requestParameters.id, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {WorkflowsBetaApiTestExternalExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.testExternalExecuteWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).testExternalExecuteWorkflow(requestParameters.id, requestParameters.testExternalExecuteWorkflowRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {WorkflowsBetaApiTestWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.testWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).testWorkflow(requestParameters.id, requestParameters.testWorkflowRequestBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {WorkflowsBetaApiUpdateWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    WorkflowsBetaApi.prototype.updateWorkflow = function (requestParameters, axiosOptions) {
        var _this = this;
        return (0, exports.WorkflowsBetaApiFp)(this.configuration).updateWorkflow(requestParameters.id, requestParameters.workflowBodyBeta, axiosOptions).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WorkflowsBetaApi;
}(base_1.BaseAPI));
exports.WorkflowsBetaApi = WorkflowsBetaApi;
//# sourceMappingURL=api.js.map