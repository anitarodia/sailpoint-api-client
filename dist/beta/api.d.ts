/**
 * Identity Security Cloud Beta API
 * Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.
 *
 * The version of the OpenAPI document: 3.1.0-beta
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from '../configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AccessConstraintBeta
 */
export interface AccessConstraintBeta {
    /**
     * Type of Access
     * @type {string}
     * @memberof AccessConstraintBeta
     */
    'type': AccessConstraintBetaTypeEnum;
    /**
     * Must be set only if operator is SELECTED.
     * @type {Array<string>}
     * @memberof AccessConstraintBeta
     */
    'ids'?: Array<string>;
    /**
     * Used to determine whether the scope of the campaign should be reduced for selected ids or all.
     * @type {string}
     * @memberof AccessConstraintBeta
     */
    'operator': AccessConstraintBetaOperatorEnum;
}
export declare const AccessConstraintBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
};
export type AccessConstraintBetaTypeEnum = typeof AccessConstraintBetaTypeEnum[keyof typeof AccessConstraintBetaTypeEnum];
export declare const AccessConstraintBetaOperatorEnum: {
    readonly All: "ALL";
    readonly Selected: "SELECTED";
};
export type AccessConstraintBetaOperatorEnum = typeof AccessConstraintBetaOperatorEnum[keyof typeof AccessConstraintBetaOperatorEnum];
/**
 *
 * @export
 * @interface AccessCriteriaBeta
 */
export interface AccessCriteriaBeta {
    /**
     * Business name for the access construct list
     * @type {string}
     * @memberof AccessCriteriaBeta
     */
    'name'?: string;
    /**
     * List of criteria.  There is a min of 1 and max of 50 items in the list.
     * @type {Array<AccessCriteriaCriteriaListInnerBeta>}
     * @memberof AccessCriteriaBeta
     */
    'criteriaList'?: Array<AccessCriteriaCriteriaListInnerBeta>;
}
/**
 *
 * @export
 * @interface AccessCriteriaCriteriaListInnerBeta
 */
export interface AccessCriteriaCriteriaListInnerBeta {
    /**
     * DTO type
     * @type {string}
     * @memberof AccessCriteriaCriteriaListInnerBeta
     */
    'type'?: AccessCriteriaCriteriaListInnerBetaTypeEnum;
    /**
     * ID of the object to which this reference applies to
     * @type {string}
     * @memberof AccessCriteriaCriteriaListInnerBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies to
     * @type {string}
     * @memberof AccessCriteriaCriteriaListInnerBeta
     */
    'name'?: string;
}
export declare const AccessCriteriaCriteriaListInnerBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessCriteriaCriteriaListInnerBetaTypeEnum = typeof AccessCriteriaCriteriaListInnerBetaTypeEnum[keyof typeof AccessCriteriaCriteriaListInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessItemAccessProfileResponseBeta
 */
export interface AccessItemAccessProfileResponseBeta {
    /**
     * the access item type. accessProfile in this case
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'accessType'?: string;
    /**
     * the access item id
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'id'?: string;
    /**
     * the access profile name
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'name'?: string;
    /**
     * the name of the source
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'sourceName'?: string;
    /**
     * the id of the source
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'sourceId'?: string;
    /**
     * the description for the access profile
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'description'?: string;
    /**
     * the display name of the identity
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'displayName'?: string;
    /**
     * the number of entitlements the access profile will create
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'entitlementCount'?: string;
    /**
     * the name of
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'appDisplayName'?: string;
    /**
     * the date the access profile is no longer assigned to the specified identity
     * @type {string}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'removeDate'?: string;
    /**
     * indicates whether the access profile is standalone
     * @type {boolean}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'standalone': boolean;
    /**
     * indicates whether the access profile is
     * @type {boolean}
     * @memberof AccessItemAccessProfileResponseBeta
     */
    'revocable': boolean;
}
/**
 *
 * @export
 * @interface AccessItemAccountResponseBeta
 */
export interface AccessItemAccountResponseBeta {
    /**
     * the access item type. account in this case
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'accessType'?: string;
    /**
     * the access item id
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'id'?: string;
    /**
     * the native identifier used to uniquely identify an acccount
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'nativeIdentity'?: string;
    /**
     * the name of the source
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'sourceName'?: string;
    /**
     * the id of the source
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'sourceId'?: string;
    /**
     * the number of entitlements the account will create
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'entitlementCount'?: string;
    /**
     * the display name of the identity
     * @type {string}
     * @memberof AccessItemAccountResponseBeta
     */
    'displayName'?: string;
}
/**
 *
 * @export
 * @interface AccessItemAppResponseBeta
 */
export interface AccessItemAppResponseBeta {
    /**
     * the access item type. entitlement in this case
     * @type {string}
     * @memberof AccessItemAppResponseBeta
     */
    'accessType'?: string;
    /**
     * the access item id
     * @type {string}
     * @memberof AccessItemAppResponseBeta
     */
    'id'?: string;
    /**
     * the access item display name
     * @type {string}
     * @memberof AccessItemAppResponseBeta
     */
    'displayName'?: string;
    /**
     * the associated source name if it exists
     * @type {string}
     * @memberof AccessItemAppResponseBeta
     */
    'sourceName'?: string;
    /**
     * the app role id
     * @type {string}
     * @memberof AccessItemAppResponseBeta
     */
    'appRoleId'?: string;
}
/**
 * Identity who approved the access item request.
 * @export
 * @interface AccessItemApproverDtoBeta
 */
export interface AccessItemApproverDtoBeta {
    /**
     * DTO type of identity who approved the access item request.
     * @type {string}
     * @memberof AccessItemApproverDtoBeta
     */
    'type'?: AccessItemApproverDtoBetaTypeEnum;
    /**
     * ID of identity who approved the access item request.
     * @type {string}
     * @memberof AccessItemApproverDtoBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity who approved the access item request.
     * @type {string}
     * @memberof AccessItemApproverDtoBeta
     */
    'name'?: string;
}
export declare const AccessItemApproverDtoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemApproverDtoBetaTypeEnum = typeof AccessItemApproverDtoBetaTypeEnum[keyof typeof AccessItemApproverDtoBetaTypeEnum];
/**
 * @type AccessItemAssociatedAccessItemBeta
 * @export
 */
export type AccessItemAssociatedAccessItemBeta = AccessItemAccessProfileResponseBeta | AccessItemAccountResponseBeta | AccessItemAppResponseBeta | AccessItemEntitlementResponseBeta | AccessItemRoleResponseBeta;
/**
 *
 * @export
 * @interface AccessItemAssociatedBeta
 */
export interface AccessItemAssociatedBeta {
    /**
     *
     * @type {AccessItemAssociatedAccessItemBeta}
     * @memberof AccessItemAssociatedBeta
     */
    'accessItem'?: AccessItemAssociatedAccessItemBeta;
    /**
     * the identity id
     * @type {string}
     * @memberof AccessItemAssociatedBeta
     */
    'identityId'?: string;
    /**
     * the event type
     * @type {string}
     * @memberof AccessItemAssociatedBeta
     */
    'eventType'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof AccessItemAssociatedBeta
     */
    'dt'?: string;
    /**
     *
     * @type {CorrelatedGovernanceEventBeta}
     * @memberof AccessItemAssociatedBeta
     */
    'governanceEvent'?: CorrelatedGovernanceEventBeta;
}
/**
 *
 * @export
 * @interface AccessItemDiffBeta
 */
export interface AccessItemDiffBeta {
    /**
     * the id of the access item
     * @type {string}
     * @memberof AccessItemDiffBeta
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof AccessItemDiffBeta
     */
    'eventType'?: AccessItemDiffBetaEventTypeEnum;
    /**
     * the display name of the access item
     * @type {string}
     * @memberof AccessItemDiffBeta
     */
    'displayName'?: string;
    /**
     * the source name of the access item
     * @type {string}
     * @memberof AccessItemDiffBeta
     */
    'sourceName'?: string;
}
export declare const AccessItemDiffBetaEventTypeEnum: {
    readonly Add: "ADD";
    readonly Remove: "REMOVE";
};
export type AccessItemDiffBetaEventTypeEnum = typeof AccessItemDiffBetaEventTypeEnum[keyof typeof AccessItemDiffBetaEventTypeEnum];
/**
 *
 * @export
 * @interface AccessItemEntitlementResponseBeta
 */
export interface AccessItemEntitlementResponseBeta {
    /**
     * the access item type. entitlement in this case
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'accessType'?: string;
    /**
     * the access item id
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'id'?: string;
    /**
     * the entitlement attribute
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'attribute'?: string;
    /**
     * the associated value
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'value'?: string;
    /**
     * the type of entitlement
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'entitlementType'?: string;
    /**
     * the name of the source
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'sourceName'?: string;
    /**
     * the id of the source
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'sourceId'?: string;
    /**
     * the description for the entitlment
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'description'?: string;
    /**
     * the display name of the identity
     * @type {string}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'displayName'?: string;
    /**
     * indicates whether the entitlement is standalone
     * @type {boolean}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'standalone': boolean;
    /**
     * indicates whether the entitlement is privileged
     * @type {boolean}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'privileged': boolean;
    /**
     * indicates whether the entitlement is cloud governed
     * @type {boolean}
     * @memberof AccessItemEntitlementResponseBeta
     */
    'cloudGoverned': boolean;
}
/**
 * Access item owner\'s identity.
 * @export
 * @interface AccessItemOwnerDtoBeta
 */
export interface AccessItemOwnerDtoBeta {
    /**
     * Access item owner\'s DTO type.
     * @type {string}
     * @memberof AccessItemOwnerDtoBeta
     */
    'type'?: AccessItemOwnerDtoBetaTypeEnum;
    /**
     * Access item owner\'s identity ID.
     * @type {string}
     * @memberof AccessItemOwnerDtoBeta
     */
    'id'?: string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof AccessItemOwnerDtoBeta
     */
    'name'?: string;
}
export declare const AccessItemOwnerDtoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemOwnerDtoBetaTypeEnum = typeof AccessItemOwnerDtoBetaTypeEnum[keyof typeof AccessItemOwnerDtoBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessItemRefBeta
 */
export interface AccessItemRefBeta {
    /**
     * ID of the access item to retrieve the recommendation for.
     * @type {string}
     * @memberof AccessItemRefBeta
     */
    'id'?: string;
    /**
     * Access item\'s type.
     * @type {string}
     * @memberof AccessItemRefBeta
     */
    'type'?: AccessItemRefBetaTypeEnum;
}
export declare const AccessItemRefBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
};
export type AccessItemRefBetaTypeEnum = typeof AccessItemRefBetaTypeEnum[keyof typeof AccessItemRefBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessItemRemovedBeta
 */
export interface AccessItemRemovedBeta {
    /**
     *
     * @type {AccessItemAssociatedAccessItemBeta}
     * @memberof AccessItemRemovedBeta
     */
    'accessItem'?: AccessItemAssociatedAccessItemBeta;
    /**
     * the identity id
     * @type {string}
     * @memberof AccessItemRemovedBeta
     */
    'identityId'?: string;
    /**
     * the event type
     * @type {string}
     * @memberof AccessItemRemovedBeta
     */
    'eventType'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof AccessItemRemovedBeta
     */
    'dt'?: string;
    /**
     *
     * @type {CorrelatedGovernanceEventBeta}
     * @memberof AccessItemRemovedBeta
     */
    'governanceEvent'?: CorrelatedGovernanceEventBeta;
}
/**
 * Identity the access item is requested for.
 * @export
 * @interface AccessItemRequestedForDtoBeta
 */
export interface AccessItemRequestedForDtoBeta {
    /**
     * DTO type of identity the access item is requested for.
     * @type {string}
     * @memberof AccessItemRequestedForDtoBeta
     */
    'type'?: AccessItemRequestedForDtoBetaTypeEnum;
    /**
     * ID of identity the access item is requested for.
     * @type {string}
     * @memberof AccessItemRequestedForDtoBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity the access item is requested for.
     * @type {string}
     * @memberof AccessItemRequestedForDtoBeta
     */
    'name'?: string;
}
export declare const AccessItemRequestedForDtoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemRequestedForDtoBetaTypeEnum = typeof AccessItemRequestedForDtoBetaTypeEnum[keyof typeof AccessItemRequestedForDtoBetaTypeEnum];
/**
 * Access item requester\'s identity.
 * @export
 * @interface AccessItemRequesterBeta
 */
export interface AccessItemRequesterBeta {
    /**
     * Access item requester\'s DTO type.
     * @type {string}
     * @memberof AccessItemRequesterBeta
     */
    'type'?: AccessItemRequesterBetaTypeEnum;
    /**
     * Access item requester\'s identity ID.
     * @type {string}
     * @memberof AccessItemRequesterBeta
     */
    'id'?: string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof AccessItemRequesterBeta
     */
    'name'?: string;
}
export declare const AccessItemRequesterBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemRequesterBetaTypeEnum = typeof AccessItemRequesterBetaTypeEnum[keyof typeof AccessItemRequesterBetaTypeEnum];
/**
 * Access item requester\'s identity.
 * @export
 * @interface AccessItemRequesterDtoBeta
 */
export interface AccessItemRequesterDtoBeta {
    /**
     * Access item requester\'s DTO type.
     * @type {string}
     * @memberof AccessItemRequesterDtoBeta
     */
    'type'?: AccessItemRequesterDtoBetaTypeEnum;
    /**
     * Access item requester\'s identity ID.
     * @type {string}
     * @memberof AccessItemRequesterDtoBeta
     */
    'id'?: string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof AccessItemRequesterDtoBeta
     */
    'name'?: string;
}
export declare const AccessItemRequesterDtoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemRequesterDtoBetaTypeEnum = typeof AccessItemRequesterDtoBetaTypeEnum[keyof typeof AccessItemRequesterDtoBetaTypeEnum];
/**
 * Identity who reviewed the access item request.
 * @export
 * @interface AccessItemReviewedByBeta
 */
export interface AccessItemReviewedByBeta {
    /**
     * DTO type of identity who reviewed the access item request.
     * @type {string}
     * @memberof AccessItemReviewedByBeta
     */
    'type'?: AccessItemReviewedByBetaTypeEnum;
    /**
     * ID of identity who reviewed the access item request.
     * @type {string}
     * @memberof AccessItemReviewedByBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity who reviewed the access item request.
     * @type {string}
     * @memberof AccessItemReviewedByBeta
     */
    'name'?: string;
}
export declare const AccessItemReviewedByBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessItemReviewedByBetaTypeEnum = typeof AccessItemReviewedByBetaTypeEnum[keyof typeof AccessItemReviewedByBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessItemRoleResponseBeta
 */
export interface AccessItemRoleResponseBeta {
    /**
     * the access item type. role in this case
     * @type {string}
     * @memberof AccessItemRoleResponseBeta
     */
    'accessType'?: string;
    /**
     * the access item id
     * @type {string}
     * @memberof AccessItemRoleResponseBeta
     */
    'id'?: string;
    /**
     * the role display name
     * @type {string}
     * @memberof AccessItemRoleResponseBeta
     */
    'displayName'?: string;
    /**
     * the description for the role
     * @type {string}
     * @memberof AccessItemRoleResponseBeta
     */
    'description'?: string;
    /**
     * the associated source name if it exists
     * @type {string}
     * @memberof AccessItemRoleResponseBeta
     */
    'sourceName'?: string;
    /**
     * the date the role is no longer assigned to the specified identity
     * @type {string}
     * @memberof AccessItemRoleResponseBeta
     */
    'removeDate'?: string;
    /**
     * indicates whether the role is revocable
     * @type {boolean}
     * @memberof AccessItemRoleResponseBeta
     */
    'revocable': boolean;
}
/**
 *
 * @export
 * @interface AccessProfileApprovalSchemeBeta
 */
export interface AccessProfileApprovalSchemeBeta {
    /**
     * Describes the individual or group that is responsible for an approval step. Values are as follows. **APP_OWNER**: The owner of the Application  **OWNER**: Owner of the associated Access Profile or Role  **SOURCE_OWNER**: Owner of the Source associated with an Access Profile  **MANAGER**: Manager of the Identity making the request  **GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field
     * @type {string}
     * @memberof AccessProfileApprovalSchemeBeta
     */
    'approverType'?: AccessProfileApprovalSchemeBetaApproverTypeEnum;
    /**
     * Id of the specific approver, used only when approverType is GOVERNANCE_GROUP
     * @type {string}
     * @memberof AccessProfileApprovalSchemeBeta
     */
    'approverId'?: string | null;
}
export declare const AccessProfileApprovalSchemeBetaApproverTypeEnum: {
    readonly AppOwner: "APP_OWNER";
    readonly Owner: "OWNER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Manager: "MANAGER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type AccessProfileApprovalSchemeBetaApproverTypeEnum = typeof AccessProfileApprovalSchemeBetaApproverTypeEnum[keyof typeof AccessProfileApprovalSchemeBetaApproverTypeEnum];
/**
 * Access Profile
 * @export
 * @interface AccessProfileBeta
 */
export interface AccessProfileBeta {
    /**
     * The ID of the Access Profile
     * @type {string}
     * @memberof AccessProfileBeta
     */
    'id'?: string;
    /**
     * Name of the Access Profile
     * @type {string}
     * @memberof AccessProfileBeta
     */
    'name': string;
    /**
     * Information about the Access Profile
     * @type {string}
     * @memberof AccessProfileBeta
     */
    'description'?: string | null;
    /**
     * Date the Access Profile was created
     * @type {string}
     * @memberof AccessProfileBeta
     */
    'created'?: string;
    /**
     * Date the Access Profile was last modified.
     * @type {string}
     * @memberof AccessProfileBeta
     */
    'modified'?: string;
    /**
     * Whether the Access Profile is enabled. If the Access Profile is enabled then you must include at least one Entitlement.
     * @type {boolean}
     * @memberof AccessProfileBeta
     */
    'enabled'?: boolean;
    /**
     *
     * @type {OwnerReferenceBeta}
     * @memberof AccessProfileBeta
     */
    'owner': OwnerReferenceBeta;
    /**
     *
     * @type {AccessProfileSourceRefBeta}
     * @memberof AccessProfileBeta
     */
    'source': AccessProfileSourceRefBeta;
    /**
     * A list of entitlements associated with the Access Profile. If enabled is false this is allowed to be empty otherwise it needs to contain at least one Entitlement.
     * @type {Array<EntitlementRefBeta>}
     * @memberof AccessProfileBeta
     */
    'entitlements'?: Array<EntitlementRefBeta> | null;
    /**
     * Whether the Access Profile is requestable via access request. Currently, making an Access Profile non-requestable is only supported  for customers enabled with the new Request Center. Otherwise, attempting to create an Access Profile with a value  **false** in this field results in a 400 error.
     * @type {boolean}
     * @memberof AccessProfileBeta
     */
    'requestable'?: boolean;
    /**
     *
     * @type {RequestabilityBeta}
     * @memberof AccessProfileBeta
     */
    'accessRequestConfig'?: RequestabilityBeta | null;
    /**
     *
     * @type {RevocabilityBeta}
     * @memberof AccessProfileBeta
     */
    'revocationRequestConfig'?: RevocabilityBeta | null;
    /**
     * List of IDs of segments, if any, to which this Access Profile is assigned.
     * @type {Array<string>}
     * @memberof AccessProfileBeta
     */
    'segments'?: Array<string> | null;
    /**
     *
     * @type {ProvisioningCriteriaLevel1Beta}
     * @memberof AccessProfileBeta
     */
    'provisioningCriteria'?: ProvisioningCriteriaLevel1Beta | null;
}
/**
 *
 * @export
 * @interface AccessProfileBulkDeleteRequestBeta
 */
export interface AccessProfileBulkDeleteRequestBeta {
    /**
     * List of IDs of Access Profiles to be deleted.
     * @type {Array<string>}
     * @memberof AccessProfileBulkDeleteRequestBeta
     */
    'accessProfileIds'?: Array<string>;
    /**
     * If **true**, silently skip over any of the specified Access Profiles if they cannot be deleted because they are in use. If **false**, no deletions will be attempted if any of the Access Profiles are in use.
     * @type {boolean}
     * @memberof AccessProfileBulkDeleteRequestBeta
     */
    'bestEffortOnly'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileBulkDeleteResponseBeta
 */
export interface AccessProfileBulkDeleteResponseBeta {
    /**
     * ID of the task which is executing the bulk deletion. This can be passed to the **_/task-status** API to track status.
     * @type {string}
     * @memberof AccessProfileBulkDeleteResponseBeta
     */
    'taskId'?: string;
    /**
     * List of IDs of Access Profiles which are pending deletion.
     * @type {Array<string>}
     * @memberof AccessProfileBulkDeleteResponseBeta
     */
    'pending'?: Array<string>;
    /**
     * List of usages of Access Profiles targeted for deletion.
     * @type {Array<AccessProfileUsageBeta>}
     * @memberof AccessProfileBulkDeleteResponseBeta
     */
    'inUse'?: Array<AccessProfileUsageBeta>;
}
/**
 * Access Profile\'s basic details.
 * @export
 * @interface AccessProfileBulkUpdateRequestInnerBeta
 */
export interface AccessProfileBulkUpdateRequestInnerBeta {
    /**
     * Access Profile ID.
     * @type {string}
     * @memberof AccessProfileBulkUpdateRequestInnerBeta
     */
    'id'?: string;
    /**
     * Access Profile is requestable or not.
     * @type {boolean}
     * @memberof AccessProfileBulkUpdateRequestInnerBeta
     */
    'requestable'?: boolean;
}
/**
 *
 * @export
 * @interface AccessProfileRefBeta
 */
export interface AccessProfileRefBeta {
    /**
     * ID of the Access Profile
     * @type {string}
     * @memberof AccessProfileRefBeta
     */
    'id'?: string;
    /**
     * Type of requested object. This field must be either left null or set to \'ACCESS_PROFILE\' when creating an Access Profile, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof AccessProfileRefBeta
     */
    'type'?: AccessProfileRefBetaTypeEnum;
    /**
     * Human-readable display name of the Access Profile. This field is ignored on input.
     * @type {string}
     * @memberof AccessProfileRefBeta
     */
    'name'?: string;
}
export declare const AccessProfileRefBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
};
export type AccessProfileRefBetaTypeEnum = typeof AccessProfileRefBetaTypeEnum[keyof typeof AccessProfileRefBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessProfileSourceRefBeta
 */
export interface AccessProfileSourceRefBeta {
    /**
     * The ID of the Source with with which the Access Profile is associated
     * @type {string}
     * @memberof AccessProfileSourceRefBeta
     */
    'id'?: string;
    /**
     * The type of the Source, will always be SOURCE
     * @type {string}
     * @memberof AccessProfileSourceRefBeta
     */
    'type'?: AccessProfileSourceRefBetaTypeEnum;
    /**
     * The display name of the associated Source
     * @type {string}
     * @memberof AccessProfileSourceRefBeta
     */
    'name'?: string;
}
export declare const AccessProfileSourceRefBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccessProfileSourceRefBetaTypeEnum = typeof AccessProfileSourceRefBetaTypeEnum[keyof typeof AccessProfileSourceRefBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessProfileUpdateItemBeta
 */
export interface AccessProfileUpdateItemBeta {
    /**
     * Identifier of Access Profile in bulk update request.
     * @type {string}
     * @memberof AccessProfileUpdateItemBeta
     */
    'id': string;
    /**
     * Access Profile requestable or not.
     * @type {boolean}
     * @memberof AccessProfileUpdateItemBeta
     */
    'requestable': boolean;
    /**
     *  The HTTP response status code returned for an individual Access Profile that is requested for update during a bulk update operation.  > 201   - Access profile is updated successfully.  > 404   - Access profile not found.
     * @type {string}
     * @memberof AccessProfileUpdateItemBeta
     */
    'status': string;
    /**
     * Human readable status description and containing additional context information about success or failures etc.
     * @type {string}
     * @memberof AccessProfileUpdateItemBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface AccessProfileUsageBeta
 */
export interface AccessProfileUsageBeta {
    /**
     * ID of the Access Profile that is in use
     * @type {string}
     * @memberof AccessProfileUsageBeta
     */
    'accessProfileId'?: string;
    /**
     * List of references to objects which are using the indicated Access Profile
     * @type {Array<AccessProfileUsageUsedByInnerBeta>}
     * @memberof AccessProfileUsageBeta
     */
    'usedBy'?: Array<AccessProfileUsageUsedByInnerBeta>;
}
/**
 * Role using the access profile.
 * @export
 * @interface AccessProfileUsageUsedByInnerBeta
 */
export interface AccessProfileUsageUsedByInnerBeta {
    /**
     * DTO type of role using the access profile.
     * @type {string}
     * @memberof AccessProfileUsageUsedByInnerBeta
     */
    'type'?: AccessProfileUsageUsedByInnerBetaTypeEnum;
    /**
     * ID of role using the access profile.
     * @type {string}
     * @memberof AccessProfileUsageUsedByInnerBeta
     */
    'id'?: string;
    /**
     * Display name of role using the access profile.
     * @type {string}
     * @memberof AccessProfileUsageUsedByInnerBeta
     */
    'name'?: string;
}
export declare const AccessProfileUsageUsedByInnerBetaTypeEnum: {
    readonly Role: "ROLE";
};
export type AccessProfileUsageUsedByInnerBetaTypeEnum = typeof AccessProfileUsageUsedByInnerBetaTypeEnum[keyof typeof AccessProfileUsageUsedByInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessRecommendationMessageBeta
 */
export interface AccessRecommendationMessageBeta {
    /**
     * Information about why the access item was recommended.
     * @type {string}
     * @memberof AccessRecommendationMessageBeta
     */
    'interpretation'?: string;
}
/**
 *
 * @export
 * @interface AccessRequestBeta
 */
export interface AccessRequestBeta {
    /**
     * A list of Identity IDs for whom the Access is requested. If it\'s a Revoke request, there can only be one Identity ID.
     * @type {Array<string>}
     * @memberof AccessRequestBeta
     */
    'requestedFor': Array<string>;
    /**
     *
     * @type {AccessRequestTypeBeta}
     * @memberof AccessRequestBeta
     */
    'requestType'?: AccessRequestTypeBeta | null;
    /**
     *
     * @type {Array<AccessRequestItemBeta>}
     * @memberof AccessRequestBeta
     */
    'requestedItems': Array<AccessRequestItemBeta>;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities.
     * @type {{ [key: string]: string; }}
     * @memberof AccessRequestBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface AccessRequestConfigBeta
 */
export interface AccessRequestConfigBeta {
    /**
     * If this is true, approvals must be processed by an external system. Also, if this is true, it blocks Request Center access requests and returns an error for any user who isn\'t an org admin.
     * @type {boolean}
     * @memberof AccessRequestConfigBeta
     */
    'approvalsMustBeExternal'?: boolean;
    /**
     * If this is true and the requester and reviewer are the same, the request is automatically approved.
     * @type {boolean}
     * @memberof AccessRequestConfigBeta
     */
    'autoApprovalEnabled'?: boolean;
    /**
     *
     * @type {RequestOnBehalfOfConfigBeta}
     * @memberof AccessRequestConfigBeta
     */
    'requestOnBehalfOfConfig'?: RequestOnBehalfOfConfigBeta;
    /**
     *
     * @type {ApprovalReminderAndEscalationConfigBeta}
     * @memberof AccessRequestConfigBeta
     */
    'approvalReminderAndEscalationConfig'?: ApprovalReminderAndEscalationConfigBeta;
    /**
     *
     * @type {EntitlementRequestConfig1Beta}
     * @memberof AccessRequestConfigBeta
     */
    'entitlementRequestConfig'?: EntitlementRequestConfig1Beta;
}
/**
 *
 * @export
 * @interface AccessRequestContextBeta
 */
export interface AccessRequestContextBeta {
    /**
     *
     * @type {Array<ContextAttributeDtoBeta>}
     * @memberof AccessRequestContextBeta
     */
    'contextAttributes'?: Array<ContextAttributeDtoBeta>;
}
/**
 *
 * @export
 * @interface AccessRequestDynamicApprover1Beta
 */
export interface AccessRequestDynamicApprover1Beta {
    /**
     * The unique ID of the identity to add to the approver list for the access request.
     * @type {string}
     * @memberof AccessRequestDynamicApprover1Beta
     */
    'id': string;
    /**
     * The name of the identity to add to the approver list for the access request.
     * @type {string}
     * @memberof AccessRequestDynamicApprover1Beta
     */
    'name': string;
    /**
     * The type of object being referenced.
     * @type {object}
     * @memberof AccessRequestDynamicApprover1Beta
     */
    'type': AccessRequestDynamicApprover1BetaTypeEnum;
}
export declare const AccessRequestDynamicApprover1BetaTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type AccessRequestDynamicApprover1BetaTypeEnum = typeof AccessRequestDynamicApprover1BetaTypeEnum[keyof typeof AccessRequestDynamicApprover1BetaTypeEnum];
/**
 *
 * @export
 * @interface AccessRequestDynamicApproverBeta
 */
export interface AccessRequestDynamicApproverBeta {
    /**
     * The unique ID of the access request object. Can be used with the [access request status endpoint](https://developer.sailpoint.com/idn/api/beta/list-access-request-status) to get the status of the request.
     * @type {string}
     * @memberof AccessRequestDynamicApproverBeta
     */
    'accessRequestId': string;
    /**
     * Identities access was requested for.
     * @type {Array<AccessItemRequestedForDtoBeta>}
     * @memberof AccessRequestDynamicApproverBeta
     */
    'requestedFor': Array<AccessItemRequestedForDtoBeta>;
    /**
     * The access items that are being requested.
     * @type {Array<AccessRequestDynamicApproverRequestedItemsInnerBeta>}
     * @memberof AccessRequestDynamicApproverBeta
     */
    'requestedItems': Array<AccessRequestDynamicApproverRequestedItemsInnerBeta>;
    /**
     *
     * @type {AccessRequestDynamicApproverRequestedByBeta}
     * @memberof AccessRequestDynamicApproverBeta
     */
    'requestedBy': AccessRequestDynamicApproverRequestedByBeta;
}
/**
 *
 * @export
 * @interface AccessRequestDynamicApproverRequestedByBeta
 */
export interface AccessRequestDynamicApproverRequestedByBeta {
    /**
     * Access item requester\'s DTO type.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedByBeta
     */
    'type'?: AccessRequestDynamicApproverRequestedByBetaTypeEnum;
    /**
     * Access item requester\'s identity ID.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedByBeta
     */
    'id'?: string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedByBeta
     */
    'name'?: string;
}
export declare const AccessRequestDynamicApproverRequestedByBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessRequestDynamicApproverRequestedByBetaTypeEnum = typeof AccessRequestDynamicApproverRequestedByBetaTypeEnum[keyof typeof AccessRequestDynamicApproverRequestedByBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessRequestDynamicApproverRequestedItemsInnerBeta
 */
export interface AccessRequestDynamicApproverRequestedItemsInnerBeta {
    /**
     * The unique ID of the access item.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedItemsInnerBeta
     */
    'id': string;
    /**
     * Human friendly name of the access item.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedItemsInnerBeta
     */
    'name': string;
    /**
     * Extended description of the access item.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedItemsInnerBeta
     */
    'description'?: string | null;
    /**
     * The type of access item being requested.
     * @type {object}
     * @memberof AccessRequestDynamicApproverRequestedItemsInnerBeta
     */
    'type': AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum;
    /**
     * Grant or revoke the access item
     * @type {object}
     * @memberof AccessRequestDynamicApproverRequestedItemsInnerBeta
     */
    'operation': AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum;
    /**
     * A comment from the requestor on why the access is needed.
     * @type {string}
     * @memberof AccessRequestDynamicApproverRequestedItemsInnerBeta
     */
    'comment'?: string | null;
}
export declare const AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum = typeof AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum[keyof typeof AccessRequestDynamicApproverRequestedItemsInnerBetaTypeEnum];
export declare const AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum: {
    readonly Add: "Add";
    readonly Remove: "Remove";
};
export type AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum = typeof AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum[keyof typeof AccessRequestDynamicApproverRequestedItemsInnerBetaOperationEnum];
/**
 *
 * @export
 * @interface AccessRequestItemBeta
 */
export interface AccessRequestItemBeta {
    /**
     * The type of the item being requested.
     * @type {string}
     * @memberof AccessRequestItemBeta
     */
    'type': AccessRequestItemBetaTypeEnum;
    /**
     * ID of Role, Access Profile or Entitlement being requested.
     * @type {string}
     * @memberof AccessRequestItemBeta
     */
    'id': string;
    /**
     * Comment provided by requester. * Comment is required when the request is of type Revoke Access.
     * @type {string}
     * @memberof AccessRequestItemBeta
     */
    'comment'?: string;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on associated APIs such as /account-activities and /access-request-status.
     * @type {{ [key: string]: string; }}
     * @memberof AccessRequestItemBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity. Also known as the expiration date. * Specify a date in the future. * The current SLA for the deprovisioning is 24 hours. * This date can be modified to either extend or decrease the duration of access item assignments for the specified identity. You can change the expiration date for requests for yourself or direct reports, but you cannot remove an expiration date on an already approved item. If the access request has not been approved, you can cancel it and submit a new one without the expiration. If it has already been approved, then you have to revoke the access and then re-request without the expiration.
     * @type {string}
     * @memberof AccessRequestItemBeta
     */
    'removeDate'?: string;
}
export declare const AccessRequestItemBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessRequestItemBetaTypeEnum = typeof AccessRequestItemBetaTypeEnum[keyof typeof AccessRequestItemBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessRequestItemResponseBeta
 */
export interface AccessRequestItemResponseBeta {
    /**
     * the access request item operation
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'operation'?: string;
    /**
     * the access item type
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'accessItemType'?: string;
    /**
     * the name of access request item
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'name'?: string;
    /**
     * the final decision for the access request
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'decision'?: AccessRequestItemResponseBetaDecisionEnum;
    /**
     * the description of access request item
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'description'?: string;
    /**
     * the source id
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'sourceId'?: string;
    /**
     * the source Name
     * @type {string}
     * @memberof AccessRequestItemResponseBeta
     */
    'sourceName'?: string;
    /**
     *
     * @type {Array<ApprovalInfoResponseBeta>}
     * @memberof AccessRequestItemResponseBeta
     */
    'approvalInfos'?: Array<ApprovalInfoResponseBeta>;
}
export declare const AccessRequestItemResponseBetaDecisionEnum: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type AccessRequestItemResponseBetaDecisionEnum = typeof AccessRequestItemResponseBetaDecisionEnum[keyof typeof AccessRequestItemResponseBetaDecisionEnum];
/**
 * Provides additional details about this access request phase.
 * @export
 * @interface AccessRequestPhasesBeta
 */
export interface AccessRequestPhasesBeta {
    /**
     * The time that this phase started.
     * @type {string}
     * @memberof AccessRequestPhasesBeta
     */
    'started'?: string;
    /**
     * The time that this phase finished.
     * @type {string}
     * @memberof AccessRequestPhasesBeta
     */
    'finished'?: string | null;
    /**
     * The name of this phase.
     * @type {string}
     * @memberof AccessRequestPhasesBeta
     */
    'name'?: string;
    /**
     * The state of this phase.
     * @type {string}
     * @memberof AccessRequestPhasesBeta
     */
    'state'?: AccessRequestPhasesBetaStateEnum;
    /**
     * The state of this phase.
     * @type {string}
     * @memberof AccessRequestPhasesBeta
     */
    'result'?: AccessRequestPhasesBetaResultEnum;
    /**
     * A reference to another object on the RequestedItemStatus that contains more details about the phase. Note that for the Provisioning phase, this will be empty if there are no manual work items.
     * @type {string}
     * @memberof AccessRequestPhasesBeta
     */
    'phaseReference'?: string | null;
}
export declare const AccessRequestPhasesBetaStateEnum: {
    readonly Pending: "PENDING";
    readonly Executing: "EXECUTING";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly NotExecuted: "NOT_EXECUTED";
};
export type AccessRequestPhasesBetaStateEnum = typeof AccessRequestPhasesBetaStateEnum[keyof typeof AccessRequestPhasesBetaStateEnum];
export declare const AccessRequestPhasesBetaResultEnum: {
    readonly Successful: "SUCCESSFUL";
    readonly Failed: "FAILED";
    readonly Null: "null";
};
export type AccessRequestPhasesBetaResultEnum = typeof AccessRequestPhasesBetaResultEnum[keyof typeof AccessRequestPhasesBetaResultEnum];
/**
 *
 * @export
 * @interface AccessRequestPostApprovalBeta
 */
export interface AccessRequestPostApprovalBeta {
    /**
     * The unique ID of the access request.
     * @type {string}
     * @memberof AccessRequestPostApprovalBeta
     */
    'accessRequestId': string;
    /**
     * Identities access was requested for.
     * @type {Array<AccessItemRequestedForDtoBeta>}
     * @memberof AccessRequestPostApprovalBeta
     */
    'requestedFor': Array<AccessItemRequestedForDtoBeta>;
    /**
     * Details on the outcome of each access item.
     * @type {Array<AccessRequestPostApprovalRequestedItemsStatusInnerBeta>}
     * @memberof AccessRequestPostApprovalBeta
     */
    'requestedItemsStatus': Array<AccessRequestPostApprovalRequestedItemsStatusInnerBeta>;
    /**
     *
     * @type {AccessRequestPostApprovalRequestedByBeta}
     * @memberof AccessRequestPostApprovalBeta
     */
    'requestedBy': AccessRequestPostApprovalRequestedByBeta;
}
/**
 *
 * @export
 * @interface AccessRequestPostApprovalRequestedByBeta
 */
export interface AccessRequestPostApprovalRequestedByBeta {
    /**
     * Access item requester\'s DTO type.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedByBeta
     */
    'type': AccessRequestPostApprovalRequestedByBetaTypeEnum;
    /**
     * Access item requester\'s identity ID.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedByBeta
     */
    'id': string;
    /**
     * Access item owner\'s human-readable display name.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedByBeta
     */
    'name': string;
}
export declare const AccessRequestPostApprovalRequestedByBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessRequestPostApprovalRequestedByBetaTypeEnum = typeof AccessRequestPostApprovalRequestedByBetaTypeEnum[keyof typeof AccessRequestPostApprovalRequestedByBetaTypeEnum];
/**
 * The identity of the approver.
 * @export
 * @interface AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta
 */
export interface AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta {
    /**
     * The type of object that is referenced
     * @type {object}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta
     */
    'type': AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum;
    /**
     * ID of identity who approved the access item request.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta
     */
    'id': string;
    /**
     * Human-readable display name of identity who approved the access item request.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta
     */
    'name': string;
}
export declare const AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum = typeof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum[keyof typeof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBetaTypeEnum];
/**
 *
 * @export
 * @interface AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta
 */
export interface AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta {
    /**
     * A comment left by the approver.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta
     */
    'approvalComment'?: string | null;
    /**
     * The final decision of the approver.
     * @type {object}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta
     */
    'approvalDecision': AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum;
    /**
     * The name of the approver
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta
     */
    'approverName': string;
    /**
     *
     * @type {AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta
     */
    'approver': AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApproverBeta;
}
export declare const AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum: {
    readonly Approved: "APPROVED";
    readonly Denied: "DENIED";
};
export type AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum = typeof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum[keyof typeof AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBetaApprovalDecisionEnum];
/**
 *
 * @export
 * @interface AccessRequestPostApprovalRequestedItemsStatusInnerBeta
 */
export interface AccessRequestPostApprovalRequestedItemsStatusInnerBeta {
    /**
     * The unique ID of the access item being requested.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'id': string;
    /**
     * The human friendly name of the access item.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'name': string;
    /**
     * Detailed description of the access item.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'description'?: string | null;
    /**
     * The type of access item.
     * @type {object}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'type': AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum;
    /**
     * The action to perform on the access item.
     * @type {object}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'operation': AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum;
    /**
     * A comment from the identity requesting the access.
     * @type {string}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'comment'?: string | null;
    /**
     * Additional customer defined metadata about the access item.
     * @type {{ [key: string]: any; }}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'clientMetadata'?: {
        [key: string]: any;
    } | null;
    /**
     * A list of one or more approvers for the access request.
     * @type {Array<AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta>}
     * @memberof AccessRequestPostApprovalRequestedItemsStatusInnerBeta
     */
    'approvalInfo': Array<AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerBeta>;
}
export declare const AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum = typeof AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum[keyof typeof AccessRequestPostApprovalRequestedItemsStatusInnerBetaTypeEnum];
export declare const AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum: {
    readonly Add: "Add";
    readonly Remove: "Remove";
};
export type AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum = typeof AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum[keyof typeof AccessRequestPostApprovalRequestedItemsStatusInnerBetaOperationEnum];
/**
 *
 * @export
 * @interface AccessRequestPreApproval1Beta
 */
export interface AccessRequestPreApproval1Beta {
    /**
     * Whether or not to approve the access request.
     * @type {boolean}
     * @memberof AccessRequestPreApproval1Beta
     */
    'approved': boolean;
    /**
     * A comment about the decision to approve or deny the request.
     * @type {string}
     * @memberof AccessRequestPreApproval1Beta
     */
    'comment': string;
    /**
     * The name of the entity that approved or denied the request.
     * @type {string}
     * @memberof AccessRequestPreApproval1Beta
     */
    'approver': string;
}
/**
 *
 * @export
 * @interface AccessRequestPreApprovalBeta
 */
export interface AccessRequestPreApprovalBeta {
    /**
     * The unique ID of the access request.
     * @type {string}
     * @memberof AccessRequestPreApprovalBeta
     */
    'accessRequestId': string;
    /**
     * Identities access was requested for.
     * @type {Array<AccessItemRequestedForDtoBeta>}
     * @memberof AccessRequestPreApprovalBeta
     */
    'requestedFor': Array<AccessItemRequestedForDtoBeta>;
    /**
     * Details of the access items being requested.
     * @type {Array<AccessRequestPreApprovalRequestedItemsInnerBeta>}
     * @memberof AccessRequestPreApprovalBeta
     */
    'requestedItems': Array<AccessRequestPreApprovalRequestedItemsInnerBeta>;
    /**
     *
     * @type {AccessRequestPostApprovalRequestedByBeta}
     * @memberof AccessRequestPreApprovalBeta
     */
    'requestedBy': AccessRequestPostApprovalRequestedByBeta;
}
/**
 *
 * @export
 * @interface AccessRequestPreApprovalRequestedItemsInnerBeta
 */
export interface AccessRequestPreApprovalRequestedItemsInnerBeta {
    /**
     * The unique ID of the access item being requested.
     * @type {string}
     * @memberof AccessRequestPreApprovalRequestedItemsInnerBeta
     */
    'id': string;
    /**
     * The human friendly name of the access item.
     * @type {string}
     * @memberof AccessRequestPreApprovalRequestedItemsInnerBeta
     */
    'name': string;
    /**
     * Detailed description of the access item.
     * @type {string}
     * @memberof AccessRequestPreApprovalRequestedItemsInnerBeta
     */
    'description'?: string | null;
    /**
     * The type of access item.
     * @type {object}
     * @memberof AccessRequestPreApprovalRequestedItemsInnerBeta
     */
    'type': AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum;
    /**
     * The action to perform on the access item.
     * @type {object}
     * @memberof AccessRequestPreApprovalRequestedItemsInnerBeta
     */
    'operation': AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum;
    /**
     * A comment from the identity requesting the access.
     * @type {string}
     * @memberof AccessRequestPreApprovalRequestedItemsInnerBeta
     */
    'comment'?: string | null;
}
export declare const AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum = typeof AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum[keyof typeof AccessRequestPreApprovalRequestedItemsInnerBetaTypeEnum];
export declare const AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum: {
    readonly Add: "Add";
    readonly Remove: "Remove";
};
export type AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum = typeof AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum[keyof typeof AccessRequestPreApprovalRequestedItemsInnerBetaOperationEnum];
/**
 *
 * @export
 * @interface AccessRequestRecommendationActionItemDtoBeta
 */
export interface AccessRequestRecommendationActionItemDtoBeta {
    /**
     * The identity ID taking the action.
     * @type {string}
     * @memberof AccessRequestRecommendationActionItemDtoBeta
     */
    'identityId': string;
    /**
     *
     * @type {AccessRequestRecommendationItemBeta}
     * @memberof AccessRequestRecommendationActionItemDtoBeta
     */
    'access': AccessRequestRecommendationItemBeta;
}
/**
 *
 * @export
 * @interface AccessRequestRecommendationActionItemResponseDtoBeta
 */
export interface AccessRequestRecommendationActionItemResponseDtoBeta {
    /**
     * The identity ID taking the action.
     * @type {string}
     * @memberof AccessRequestRecommendationActionItemResponseDtoBeta
     */
    'identityId'?: string;
    /**
     *
     * @type {AccessRequestRecommendationItemBeta}
     * @memberof AccessRequestRecommendationActionItemResponseDtoBeta
     */
    'access'?: AccessRequestRecommendationItemBeta;
    /**
     *
     * @type {string}
     * @memberof AccessRequestRecommendationActionItemResponseDtoBeta
     */
    'timestamp'?: string;
}
/**
 *
 * @export
 * @interface AccessRequestRecommendationItemBeta
 */
export interface AccessRequestRecommendationItemBeta {
    /**
     * ID of access item being recommended.
     * @type {string}
     * @memberof AccessRequestRecommendationItemBeta
     */
    'id'?: string;
    /**
     *
     * @type {AccessRequestRecommendationItemTypeBeta}
     * @memberof AccessRequestRecommendationItemBeta
     */
    'type'?: AccessRequestRecommendationItemTypeBeta;
}
/**
 *
 * @export
 * @interface AccessRequestRecommendationItemDetailAccessBeta
 */
export interface AccessRequestRecommendationItemDetailAccessBeta {
    /**
     * ID of access item being recommended.
     * @type {string}
     * @memberof AccessRequestRecommendationItemDetailAccessBeta
     */
    'id'?: string;
    /**
     *
     * @type {AccessRequestRecommendationItemTypeBeta}
     * @memberof AccessRequestRecommendationItemDetailAccessBeta
     */
    'type'?: AccessRequestRecommendationItemTypeBeta;
    /**
     * Name of the access item
     * @type {string}
     * @memberof AccessRequestRecommendationItemDetailAccessBeta
     */
    'name'?: string;
    /**
     * Description of the access item
     * @type {string}
     * @memberof AccessRequestRecommendationItemDetailAccessBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface AccessRequestRecommendationItemDetailBeta
 */
export interface AccessRequestRecommendationItemDetailBeta {
    /**
     * Identity ID for the recommendation
     * @type {string}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'identityId'?: string;
    /**
     *
     * @type {AccessRequestRecommendationItemDetailAccessBeta}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'access'?: AccessRequestRecommendationItemDetailAccessBeta;
    /**
     * Whether or not the identity has already chosen to ignore this recommendation.
     * @type {boolean}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'ignored'?: boolean;
    /**
     * Whether or not the identity has already chosen to request this recommendation.
     * @type {boolean}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'requested'?: boolean;
    /**
     * Whether or not the identity reportedly viewed this recommendation.
     * @type {boolean}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'viewed'?: boolean;
    /**
     *
     * @type {Array<AccessRecommendationMessageBeta>}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'messages'?: Array<AccessRecommendationMessageBeta>;
    /**
     * The list of translation messages
     * @type {Array<TranslationMessageBeta>}
     * @memberof AccessRequestRecommendationItemDetailBeta
     */
    'translationMessages'?: Array<TranslationMessageBeta>;
}
/**
 * The type of access item.
 * @export
 * @enum {string}
 */
export declare const AccessRequestRecommendationItemTypeBeta: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
};
export type AccessRequestRecommendationItemTypeBeta = typeof AccessRequestRecommendationItemTypeBeta[keyof typeof AccessRequestRecommendationItemTypeBeta];
/**
 *
 * @export
 * @interface AccessRequestResponseBeta
 */
export interface AccessRequestResponseBeta {
    /**
     * the requester Id
     * @type {string}
     * @memberof AccessRequestResponseBeta
     */
    'requesterId'?: string;
    /**
     * the requesterName
     * @type {string}
     * @memberof AccessRequestResponseBeta
     */
    'requesterName'?: string;
    /**
     *
     * @type {Array<AccessRequestItemResponseBeta>}
     * @memberof AccessRequestResponseBeta
     */
    'items'?: Array<AccessRequestItemResponseBeta>;
}
/**
 * Access request type. Defaults to GRANT_ACCESS. REVOKE_ACCESS type can only have a single Identity ID in the requestedFor field.
 * @export
 * @enum {string}
 */
export declare const AccessRequestTypeBeta: {
    readonly GrantAccess: "GRANT_ACCESS";
    readonly RevokeAccess: "REVOKE_ACCESS";
    readonly Null: "null";
};
export type AccessRequestTypeBeta = typeof AccessRequestTypeBeta[keyof typeof AccessRequestTypeBeta];
/**
 *
 * @export
 * @interface AccessRequestedBeta
 */
export interface AccessRequestedBeta {
    /**
     *
     * @type {AccessRequestResponseBeta}
     * @memberof AccessRequestedBeta
     */
    'accessRequest'?: AccessRequestResponseBeta;
    /**
     * the identity id
     * @type {string}
     * @memberof AccessRequestedBeta
     */
    'identityId'?: string;
    /**
     * the event type
     * @type {string}
     * @memberof AccessRequestedBeta
     */
    'eventType'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof AccessRequestedBeta
     */
    'dt'?: string;
}
/**
 * Access type of API Client indicating online or offline use
 * @export
 * @enum {string}
 */
export declare const AccessTypeBeta: {
    readonly Online: "ONLINE";
    readonly Offline: "OFFLINE";
};
export type AccessTypeBeta = typeof AccessTypeBeta[keyof typeof AccessTypeBeta];
/**
 *
 * @export
 * @interface AccountActionBeta
 */
export interface AccountActionBeta {
    /**
     * Describes if action will be enabled or disabled
     * @type {string}
     * @memberof AccountActionBeta
     */
    'action'?: AccountActionBetaActionEnum;
    /**
     * List of source IDs. The sources must have the ENABLE feature or flat file source. See \"/sources\" endpoint for source features.
     * @type {Array<string>}
     * @memberof AccountActionBeta
     */
    'sourceIds'?: Array<string>;
}
export declare const AccountActionBetaActionEnum: {
    readonly Enable: "ENABLE";
    readonly Disable: "DISABLE";
};
export type AccountActionBetaActionEnum = typeof AccountActionBetaActionEnum[keyof typeof AccountActionBetaActionEnum];
/**
 * The state of an approval status
 * @export
 * @enum {string}
 */
export declare const AccountActivityApprovalStatusBeta: {
    readonly Finished: "FINISHED";
    readonly Rejected: "REJECTED";
    readonly Returned: "RETURNED";
    readonly Expired: "EXPIRED";
    readonly Pending: "PENDING";
    readonly Canceled: "CANCELED";
    readonly Null: "null";
};
export type AccountActivityApprovalStatusBeta = typeof AccountActivityApprovalStatusBeta[keyof typeof AccountActivityApprovalStatusBeta];
/**
 *
 * @export
 * @interface AccountActivityItemBeta
 */
export interface AccountActivityItemBeta {
    /**
     * Item id
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of item
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'name'?: string;
    /**
     * Date and time item was requested
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'requested'?: string;
    /**
     *
     * @type {AccountActivityApprovalStatusBeta & object}
     * @memberof AccountActivityItemBeta
     */
    'approvalStatus'?: AccountActivityApprovalStatusBeta & object;
    /**
     *
     * @type {ProvisioningStateBeta}
     * @memberof AccountActivityItemBeta
     */
    'provisioningStatus'?: ProvisioningStateBeta;
    /**
     *
     * @type {CommentBeta}
     * @memberof AccountActivityItemBeta
     */
    'requesterComment'?: CommentBeta | null;
    /**
     *
     * @type {IdentitySummaryBeta}
     * @memberof AccountActivityItemBeta
     */
    'reviewerIdentitySummary'?: IdentitySummaryBeta | null;
    /**
     *
     * @type {CommentBeta}
     * @memberof AccountActivityItemBeta
     */
    'reviewerComment'?: CommentBeta | null;
    /**
     *
     * @type {AccountActivityItemOperationBeta & object}
     * @memberof AccountActivityItemBeta
     */
    'operation'?: AccountActivityItemOperationBeta & object;
    /**
     * Attribute to which account activity applies
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'attribute'?: string | null;
    /**
     * Value of attribute
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'value'?: string | null;
    /**
     * Native identity in the target system to which the account activity applies
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'nativeIdentity'?: string | null;
    /**
     * Id of Source to which account activity applies
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'sourceId'?: string;
    /**
     *
     * @type {AccountRequestInfoBeta}
     * @memberof AccountActivityItemBeta
     */
    'accountRequestInfo'?: AccountRequestInfoBeta | null;
    /**
     * Arbitrary key-value pairs, if any were included in the corresponding access request item
     * @type {{ [key: string]: string; }}
     * @memberof AccountActivityItemBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof AccountActivityItemBeta
     */
    'removeDate'?: string | null;
}
/**
 * Represents an operation in an account activity item
 * @export
 * @enum {string}
 */
export declare const AccountActivityItemOperationBeta: {
    readonly Add: "ADD";
    readonly Create: "CREATE";
    readonly Modify: "MODIFY";
    readonly Delete: "DELETE";
    readonly Disable: "DISABLE";
    readonly Enable: "ENABLE";
    readonly Unlock: "UNLOCK";
    readonly Lock: "LOCK";
    readonly Remove: "REMOVE";
    readonly Set: "SET";
    readonly Null: "null";
};
export type AccountActivityItemOperationBeta = typeof AccountActivityItemOperationBeta[keyof typeof AccountActivityItemOperationBeta];
/**
 *
 * @export
 * @interface AccountAggregationBeta
 */
export interface AccountAggregationBeta {
    /**
     * When the aggregation started.
     * @type {string}
     * @memberof AccountAggregationBeta
     */
    'start'?: string;
    /**
     * STARTED - Aggregation started, but source account iteration has not completed.  ACCOUNTS_COLLECTED - Source account iteration completed, but all accounts have not yet been processed.  COMPLETED - Aggregation completed (*possibly with errors*).  CANCELLED - Aggregation cancelled by user.  RETRIED - Aggregation retried because of connectivity issues with the Virtual Appliance.  TERMINATED - Aggregation marked as failed after 3 tries after connectivity issues with the Virtual Appliance.
     * @type {string}
     * @memberof AccountAggregationBeta
     */
    'status'?: AccountAggregationBetaStatusEnum;
    /**
     * The total number of *NEW, CHANGED and DELETED* accounts that need to be processed for this aggregation. This does not include accounts that were unchanged since the previous aggregation. This can be zero if there were no new, changed or deleted accounts since the previous aggregation. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*
     * @type {number}
     * @memberof AccountAggregationBeta
     */
    'totalAccounts'?: number;
    /**
     * The number of *NEW, CHANGED and DELETED* accounts that have been processed so far. This reflects the number of accounts that have been processed at the time of the API call, and may increase on subsequent API calls while the status is ACCOUNTS_COLLECTED. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*
     * @type {number}
     * @memberof AccountAggregationBeta
     */
    'processedAccounts'?: number;
}
export declare const AccountAggregationBetaStatusEnum: {
    readonly Started: "STARTED";
    readonly AccountsCollected: "ACCOUNTS_COLLECTED";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Retried: "RETRIED";
    readonly Terminated: "TERMINATED";
};
export type AccountAggregationBetaStatusEnum = typeof AccountAggregationBetaStatusEnum[keyof typeof AccountAggregationBetaStatusEnum];
/**
 *
 * @export
 * @interface AccountAggregationCompletedBeta
 */
export interface AccountAggregationCompletedBeta {
    /**
     *
     * @type {AccountAggregationCompletedSourceBeta}
     * @memberof AccountAggregationCompletedBeta
     */
    'source': AccountAggregationCompletedSourceBeta;
    /**
     * The overall status of the aggregation.
     * @type {object}
     * @memberof AccountAggregationCompletedBeta
     */
    'status': AccountAggregationCompletedBetaStatusEnum;
    /**
     * The date and time when the account aggregation started.
     * @type {string}
     * @memberof AccountAggregationCompletedBeta
     */
    'started': string;
    /**
     * The date and time when the account aggregation finished.
     * @type {string}
     * @memberof AccountAggregationCompletedBeta
     */
    'completed': string;
    /**
     * A list of errors that occurred during the aggregation.
     * @type {Array<string>}
     * @memberof AccountAggregationCompletedBeta
     */
    'errors': Array<string> | null;
    /**
     * A list of warnings that occurred during the aggregation.
     * @type {Array<string>}
     * @memberof AccountAggregationCompletedBeta
     */
    'warnings': Array<string> | null;
    /**
     *
     * @type {AccountAggregationCompletedStatsBeta}
     * @memberof AccountAggregationCompletedBeta
     */
    'stats': AccountAggregationCompletedStatsBeta;
}
export declare const AccountAggregationCompletedBetaStatusEnum: {
    readonly Success: "Success";
    readonly Failed: "Failed";
    readonly Terminated: "Terminated";
};
export type AccountAggregationCompletedBetaStatusEnum = typeof AccountAggregationCompletedBetaStatusEnum[keyof typeof AccountAggregationCompletedBetaStatusEnum];
/**
 * The source the accounts are being aggregated from.
 * @export
 * @interface AccountAggregationCompletedSourceBeta
 */
export interface AccountAggregationCompletedSourceBeta {
    /**
     * The DTO type of the source the accounts are being aggregated from.
     * @type {string}
     * @memberof AccountAggregationCompletedSourceBeta
     */
    'type': AccountAggregationCompletedSourceBetaTypeEnum;
    /**
     * The ID of the source the accounts are being aggregated from.
     * @type {string}
     * @memberof AccountAggregationCompletedSourceBeta
     */
    'id': string;
    /**
     * Display name of the source the accounts are being aggregated from.
     * @type {string}
     * @memberof AccountAggregationCompletedSourceBeta
     */
    'name': string;
}
export declare const AccountAggregationCompletedSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccountAggregationCompletedSourceBetaTypeEnum = typeof AccountAggregationCompletedSourceBetaTypeEnum[keyof typeof AccountAggregationCompletedSourceBetaTypeEnum];
/**
 * Overall statistics about the account aggregation.
 * @export
 * @interface AccountAggregationCompletedStatsBeta
 */
export interface AccountAggregationCompletedStatsBeta {
    /**
     * The number of accounts which were scanned / iterated over.
     * @type {number}
     * @memberof AccountAggregationCompletedStatsBeta
     */
    'scanned': number;
    /**
     * The number of accounts which existed before, but had no changes.
     * @type {number}
     * @memberof AccountAggregationCompletedStatsBeta
     */
    'unchanged': number;
    /**
     * The number of accounts which existed before, but had changes.
     * @type {number}
     * @memberof AccountAggregationCompletedStatsBeta
     */
    'changed': number;
    /**
     * The number of accounts which are new - have not existed before.
     * @type {number}
     * @memberof AccountAggregationCompletedStatsBeta
     */
    'added': number;
    /**
     * The number accounts which existed before, but no longer exist (thus getting removed).
     * @type {number}
     * @memberof AccountAggregationCompletedStatsBeta
     */
    'removed': number;
}
/**
 *
 * @export
 * @interface AccountAggregationStatusBeta
 */
export interface AccountAggregationStatusBeta {
    /**
     * When the aggregation started.
     * @type {string}
     * @memberof AccountAggregationStatusBeta
     */
    'start'?: string;
    /**
     * STARTED - Aggregation started, but source account iteration has not completed.  ACCOUNTS_COLLECTED - Source account iteration completed, but all accounts have not yet been processed.  COMPLETED - Aggregation completed (*possibly with errors*).  CANCELLED - Aggregation cancelled by user.  RETRIED - Aggregation retried because of connectivity issues with the Virtual Appliance.  TERMINATED - Aggregation marked as failed after 3 tries after connectivity issues with the Virtual Appliance.
     * @type {string}
     * @memberof AccountAggregationStatusBeta
     */
    'status'?: AccountAggregationStatusBetaStatusEnum;
    /**
     * The total number of *NEW, CHANGED and DELETED* accounts that need to be processed for this aggregation. This does not include accounts that were unchanged since the previous aggregation. This can be zero if there were no new, changed or deleted accounts since the previous aggregation. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*
     * @type {number}
     * @memberof AccountAggregationStatusBeta
     */
    'totalAccounts'?: number;
    /**
     * The number of *NEW, CHANGED and DELETED* accounts that have been processed so far. This reflects the number of accounts that have been processed at the time of the API call, and may increase on subsequent API calls while the status is ACCOUNTS_COLLECTED. *Only available when status is ACCOUNTS_COLLECTED or COMPLETED.*
     * @type {number}
     * @memberof AccountAggregationStatusBeta
     */
    'processedAccounts'?: number;
}
export declare const AccountAggregationStatusBetaStatusEnum: {
    readonly Started: "STARTED";
    readonly AccountsCollected: "ACCOUNTS_COLLECTED";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Retried: "RETRIED";
    readonly Terminated: "TERMINATED";
};
export type AccountAggregationStatusBetaStatusEnum = typeof AccountAggregationStatusBetaStatusEnum[keyof typeof AccountAggregationStatusBetaStatusEnum];
/**
 *
 * @export
 * @interface AccountAllOfBeta
 */
export interface AccountAllOfBeta {
    /**
     * The unique ID of the source this account belongs to
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'sourceId': string;
    /**
     * The display name of the source this account belongs to
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'sourceName': string;
    /**
     * The unique ID of the identity this account is correlated to
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'identityId'?: string;
    /**
     * The lifecycle state of the identity this account is correlated to
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'cloudLifecycleState'?: string | null;
    /**
     * The identity state of the identity this account is correlated to
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'identityState'?: string | null;
    /**
     * The connection type of the source this account is from
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'connectionType'?: string;
    /**
     * The type of the account
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'type'?: string | null;
    /**
     * The account attributes that are aggregated
     * @type {{ [key: string]: any; }}
     * @memberof AccountAllOfBeta
     */
    'attributes': {
        [key: string]: any;
    } | null;
    /**
     * Indicates if this account is from an authoritative source
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'authoritative': boolean;
    /**
     * A description of the account
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'description'?: string | null;
    /**
     * Indicates if the account is currently disabled
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'disabled': boolean;
    /**
     * Indicates if the account is currently locked
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'locked': boolean;
    /**
     * The unique ID of the account generated by the source system
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'nativeIdentity': string;
    /**
     * If true, this is a user account within IdentityNow.  If false, this is an account from a source system.
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'systemAccount': boolean;
    /**
     * Indicates if this account is not correlated to an identity
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'uncorrelated': boolean;
    /**
     * The unique ID of the account as determined by the account schema
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'uuid'?: string | null;
    /**
     * Indicates if the account has been manually correlated to an identity
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'manuallyCorrelated': boolean;
    /**
     * Indicates if the account has entitlements
     * @type {boolean}
     * @memberof AccountAllOfBeta
     */
    'hasEntitlements': boolean;
    /**
     *
     * @type {AccountAllOfIdentityBeta}
     * @memberof AccountAllOfBeta
     */
    'identity'?: AccountAllOfIdentityBeta;
    /**
     *
     * @type {AccountAllOfSourceOwnerBeta}
     * @memberof AccountAllOfBeta
     */
    'sourceOwner'?: AccountAllOfSourceOwnerBeta;
    /**
     * A string list containing the owning source\'s features
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'features'?: string | null;
    /**
     * The origin of the account either aggregated or provisioned
     * @type {string}
     * @memberof AccountAllOfBeta
     */
    'origin'?: AccountAllOfBetaOriginEnum;
    /**
     *
     * @type {AccountAllOfOwnerIdentityBeta}
     * @memberof AccountAllOfBeta
     */
    'ownerIdentity'?: AccountAllOfOwnerIdentityBeta | null;
    /**
     *
     * @type {AccountAllOfOwnerGroupBeta}
     * @memberof AccountAllOfBeta
     */
    'ownerGroup'?: AccountAllOfOwnerGroupBeta | null;
}
export declare const AccountAllOfBetaOriginEnum: {
    readonly Aggregated: "AGGREGATED";
    readonly Provisioned: "PROVISIONED";
    readonly Null: "null";
};
export type AccountAllOfBetaOriginEnum = typeof AccountAllOfBetaOriginEnum[keyof typeof AccountAllOfBetaOriginEnum];
/**
 * The identity this account is correlated to
 * @export
 * @interface AccountAllOfIdentityBeta
 */
export interface AccountAllOfIdentityBeta {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AccountAllOfIdentityBeta
     */
    'type'?: AccountAllOfIdentityBetaTypeEnum;
    /**
     * ID of the identity
     * @type {string}
     * @memberof AccountAllOfIdentityBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the identity
     * @type {string}
     * @memberof AccountAllOfIdentityBeta
     */
    'name'?: string;
}
export declare const AccountAllOfIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountAllOfIdentityBetaTypeEnum = typeof AccountAllOfIdentityBetaTypeEnum[keyof typeof AccountAllOfIdentityBetaTypeEnum];
/**
 * The governance group who owns this account, typically used for non-human accounts
 * @export
 * @interface AccountAllOfOwnerGroupBeta
 */
export interface AccountAllOfOwnerGroupBeta {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AccountAllOfOwnerGroupBeta
     */
    'type'?: AccountAllOfOwnerGroupBetaTypeEnum;
    /**
     * ID of the governance group
     * @type {string}
     * @memberof AccountAllOfOwnerGroupBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the governance group
     * @type {string}
     * @memberof AccountAllOfOwnerGroupBeta
     */
    'name'?: string;
}
export declare const AccountAllOfOwnerGroupBetaTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type AccountAllOfOwnerGroupBetaTypeEnum = typeof AccountAllOfOwnerGroupBetaTypeEnum[keyof typeof AccountAllOfOwnerGroupBetaTypeEnum];
/**
 * The identity who owns this account, typically used for non-human accounts
 * @export
 * @interface AccountAllOfOwnerIdentityBeta
 */
export interface AccountAllOfOwnerIdentityBeta {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AccountAllOfOwnerIdentityBeta
     */
    'type'?: AccountAllOfOwnerIdentityBetaTypeEnum;
    /**
     * ID of the identity
     * @type {string}
     * @memberof AccountAllOfOwnerIdentityBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the identity
     * @type {string}
     * @memberof AccountAllOfOwnerIdentityBeta
     */
    'name'?: string;
}
export declare const AccountAllOfOwnerIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountAllOfOwnerIdentityBetaTypeEnum = typeof AccountAllOfOwnerIdentityBetaTypeEnum[keyof typeof AccountAllOfOwnerIdentityBetaTypeEnum];
/**
 * The owner of the source this account belongs to
 * @export
 * @interface AccountAllOfSourceOwnerBeta
 */
export interface AccountAllOfSourceOwnerBeta {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AccountAllOfSourceOwnerBeta
     */
    'type'?: AccountAllOfSourceOwnerBetaTypeEnum;
    /**
     * ID of the identity
     * @type {string}
     * @memberof AccountAllOfSourceOwnerBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the identity
     * @type {string}
     * @memberof AccountAllOfSourceOwnerBeta
     */
    'name'?: string;
}
export declare const AccountAllOfSourceOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountAllOfSourceOwnerBetaTypeEnum = typeof AccountAllOfSourceOwnerBetaTypeEnum[keyof typeof AccountAllOfSourceOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface AccountAttributeBeta
 */
export interface AccountAttributeBeta {
    /**
     * A reference to the source to search for the account
     * @type {string}
     * @memberof AccountAttributeBeta
     */
    'sourceName': string;
    /**
     * The name of the attribute on the account to return. This should match the name of the account attribute name visible in the user interface, or on the source schema.
     * @type {string}
     * @memberof AccountAttributeBeta
     */
    'attributeName': string;
    /**
     * The value of this configuration is a string name of the attribute to use when determining the ordering of returned accounts when there are multiple entries
     * @type {string}
     * @memberof AccountAttributeBeta
     */
    'accountSortAttribute'?: string;
    /**
     * The value of this configuration is a boolean (true/false). Controls the order of the sort when there are multiple accounts. If not defined, the transform will default to false (ascending order)
     * @type {boolean}
     * @memberof AccountAttributeBeta
     */
    'accountSortDescending'?: boolean;
    /**
     * The value of this configuration is a boolean (true/false). Controls which account to source a value from for an attribute.  If this flag is set to true, the transform returns the value from the first account in the list, even if it is null. If it is set to false, the transform returns the first non-null value. If not defined, the transform will default to false
     * @type {boolean}
     * @memberof AccountAttributeBeta
     */
    'accountReturnFirstLink'?: boolean;
    /**
     * This expression queries the database to narrow search results. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the database.  The default filter will always include the source and identity, and any subsequent expressions will be combined in an AND operation to the existing search criteria. Only certain searchable attributes are available:  - `nativeIdentity` - the Account ID  - `displayName` - the Account Name  - `entitlements` - a boolean value to determine if the account has entitlements
     * @type {string}
     * @memberof AccountAttributeBeta
     */
    'accountFilter'?: string;
    /**
     * This expression is used to search and filter accounts in memory. The value of this configuration is a sailpoint.object.Filter expression and used when searching against the returned resultset.  All account attributes are available for filtering as this operation is performed in memory.
     * @type {string}
     * @memberof AccountAttributeBeta
     */
    'accountPropertyFilter'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof AccountAttributeBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof AccountAttributeBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface AccountAttributesBeta
 */
export interface AccountAttributesBeta {
    /**
     * The schema attribute values for the account
     * @type {object}
     * @memberof AccountAttributesBeta
     */
    'attributes': object;
}
/**
 * Details of the account where the attributes changed.
 * @export
 * @interface AccountAttributesChangedAccountBeta
 */
export interface AccountAttributesChangedAccountBeta {
    /**
     * SailPoint generated unique identifier.
     * @type {string}
     * @memberof AccountAttributesChangedAccountBeta
     */
    'id': string;
    /**
     * The source\'s unique identifier for the account. UUID is generated by the source system.
     * @type {string}
     * @memberof AccountAttributesChangedAccountBeta
     */
    'uuid': string | null;
    /**
     * Name of the account.
     * @type {string}
     * @memberof AccountAttributesChangedAccountBeta
     */
    'name': string;
    /**
     * Unique ID of the account on the source.
     * @type {string}
     * @memberof AccountAttributesChangedAccountBeta
     */
    'nativeIdentity': string;
    /**
     * The type of the account
     * @type {object}
     * @memberof AccountAttributesChangedAccountBeta
     */
    'type': AccountAttributesChangedAccountBetaTypeEnum;
}
export declare const AccountAttributesChangedAccountBetaTypeEnum: {
    readonly Account: "ACCOUNT";
};
export type AccountAttributesChangedAccountBetaTypeEnum = typeof AccountAttributesChangedAccountBetaTypeEnum[keyof typeof AccountAttributesChangedAccountBetaTypeEnum];
/**
 *
 * @export
 * @interface AccountAttributesChangedBeta
 */
export interface AccountAttributesChangedBeta {
    /**
     *
     * @type {AccountAttributesChangedIdentityBeta}
     * @memberof AccountAttributesChangedBeta
     */
    'identity': AccountAttributesChangedIdentityBeta;
    /**
     *
     * @type {AccountAttributesChangedSourceBeta}
     * @memberof AccountAttributesChangedBeta
     */
    'source': AccountAttributesChangedSourceBeta;
    /**
     *
     * @type {AccountAttributesChangedAccountBeta}
     * @memberof AccountAttributesChangedBeta
     */
    'account': AccountAttributesChangedAccountBeta;
    /**
     * A list of attributes that changed.
     * @type {Array<AccountAttributesChangedChangesInnerBeta>}
     * @memberof AccountAttributesChangedBeta
     */
    'changes': Array<AccountAttributesChangedChangesInnerBeta>;
}
/**
 *
 * @export
 * @interface AccountAttributesChangedChangesInnerBeta
 */
export interface AccountAttributesChangedChangesInnerBeta {
    /**
     * The name of the attribute.
     * @type {string}
     * @memberof AccountAttributesChangedChangesInnerBeta
     */
    'attribute': string;
    /**
     *
     * @type {AccountAttributesChangedChangesInnerOldValueBeta}
     * @memberof AccountAttributesChangedChangesInnerBeta
     */
    'oldValue': AccountAttributesChangedChangesInnerOldValueBeta | null;
    /**
     *
     * @type {AccountAttributesChangedChangesInnerNewValueBeta}
     * @memberof AccountAttributesChangedChangesInnerBeta
     */
    'newValue': AccountAttributesChangedChangesInnerNewValueBeta | null;
}
/**
 * @type AccountAttributesChangedChangesInnerNewValueBeta
 * The new value of the attribute.
 * @export
 */
export type AccountAttributesChangedChangesInnerNewValueBeta = Array<string> | boolean | string;
/**
 * @type AccountAttributesChangedChangesInnerOldValueBeta
 * The previous value of the attribute.
 * @export
 */
export type AccountAttributesChangedChangesInnerOldValueBeta = Array<string> | boolean | string;
/**
 * The identity whose account attributes were updated.
 * @export
 * @interface AccountAttributesChangedIdentityBeta
 */
export interface AccountAttributesChangedIdentityBeta {
    /**
     * DTO type of the identity whose account attributes were updated.
     * @type {string}
     * @memberof AccountAttributesChangedIdentityBeta
     */
    'type': AccountAttributesChangedIdentityBetaTypeEnum;
    /**
     * ID of the identity whose account attributes were updated.
     * @type {string}
     * @memberof AccountAttributesChangedIdentityBeta
     */
    'id': string;
    /**
     * Display name of the identity whose account attributes were updated.
     * @type {string}
     * @memberof AccountAttributesChangedIdentityBeta
     */
    'name': string;
}
export declare const AccountAttributesChangedIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountAttributesChangedIdentityBetaTypeEnum = typeof AccountAttributesChangedIdentityBetaTypeEnum[keyof typeof AccountAttributesChangedIdentityBetaTypeEnum];
/**
 * The source that contains the account.
 * @export
 * @interface AccountAttributesChangedSourceBeta
 */
export interface AccountAttributesChangedSourceBeta {
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof AccountAttributesChangedSourceBeta
     */
    'id': string;
    /**
     * The type of object that is referenced
     * @type {string}
     * @memberof AccountAttributesChangedSourceBeta
     */
    'type': AccountAttributesChangedSourceBetaTypeEnum;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof AccountAttributesChangedSourceBeta
     */
    'name': string;
}
export declare const AccountAttributesChangedSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccountAttributesChangedSourceBetaTypeEnum = typeof AccountAttributesChangedSourceBetaTypeEnum[keyof typeof AccountAttributesChangedSourceBetaTypeEnum];
/**
 * The schema attribute values for the account
 * @export
 * @interface AccountAttributesCreateAttributesBeta
 */
export interface AccountAttributesCreateAttributesBeta {
    [key: string]: string | any;
    /**
     * Target source to create an account
     * @type {string}
     * @memberof AccountAttributesCreateAttributesBeta
     */
    'sourceId': string;
}
/**
 *
 * @export
 * @interface AccountAttributesCreateBeta
 */
export interface AccountAttributesCreateBeta {
    /**
     *
     * @type {AccountAttributesCreateAttributesBeta}
     * @memberof AccountAttributesCreateBeta
     */
    'attributes': AccountAttributesCreateAttributesBeta;
}
/**
 *
 * @export
 * @interface AccountBeta
 */
export interface AccountBeta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof AccountBeta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof AccountBeta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof AccountBeta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof AccountBeta
     */
    'modified'?: string;
    /**
     * The unique ID of the source this account belongs to
     * @type {string}
     * @memberof AccountBeta
     */
    'sourceId': string;
    /**
     * The display name of the source this account belongs to
     * @type {string}
     * @memberof AccountBeta
     */
    'sourceName': string;
    /**
     * The unique ID of the identity this account is correlated to
     * @type {string}
     * @memberof AccountBeta
     */
    'identityId'?: string;
    /**
     * The lifecycle state of the identity this account is correlated to
     * @type {string}
     * @memberof AccountBeta
     */
    'cloudLifecycleState'?: string | null;
    /**
     * The identity state of the identity this account is correlated to
     * @type {string}
     * @memberof AccountBeta
     */
    'identityState'?: string | null;
    /**
     * The connection type of the source this account is from
     * @type {string}
     * @memberof AccountBeta
     */
    'connectionType'?: string;
    /**
     * The type of the account
     * @type {string}
     * @memberof AccountBeta
     */
    'type'?: string | null;
    /**
     * The account attributes that are aggregated
     * @type {{ [key: string]: any; }}
     * @memberof AccountBeta
     */
    'attributes': {
        [key: string]: any;
    } | null;
    /**
     * Indicates if this account is from an authoritative source
     * @type {boolean}
     * @memberof AccountBeta
     */
    'authoritative': boolean;
    /**
     * A description of the account
     * @type {string}
     * @memberof AccountBeta
     */
    'description'?: string | null;
    /**
     * Indicates if the account is currently disabled
     * @type {boolean}
     * @memberof AccountBeta
     */
    'disabled': boolean;
    /**
     * Indicates if the account is currently locked
     * @type {boolean}
     * @memberof AccountBeta
     */
    'locked': boolean;
    /**
     * The unique ID of the account generated by the source system
     * @type {string}
     * @memberof AccountBeta
     */
    'nativeIdentity': string;
    /**
     * If true, this is a user account within IdentityNow.  If false, this is an account from a source system.
     * @type {boolean}
     * @memberof AccountBeta
     */
    'systemAccount': boolean;
    /**
     * Indicates if this account is not correlated to an identity
     * @type {boolean}
     * @memberof AccountBeta
     */
    'uncorrelated': boolean;
    /**
     * The unique ID of the account as determined by the account schema
     * @type {string}
     * @memberof AccountBeta
     */
    'uuid'?: string | null;
    /**
     * Indicates if the account has been manually correlated to an identity
     * @type {boolean}
     * @memberof AccountBeta
     */
    'manuallyCorrelated': boolean;
    /**
     * Indicates if the account has entitlements
     * @type {boolean}
     * @memberof AccountBeta
     */
    'hasEntitlements': boolean;
    /**
     *
     * @type {AccountAllOfIdentityBeta}
     * @memberof AccountBeta
     */
    'identity'?: AccountAllOfIdentityBeta;
    /**
     *
     * @type {AccountAllOfSourceOwnerBeta}
     * @memberof AccountBeta
     */
    'sourceOwner'?: AccountAllOfSourceOwnerBeta;
    /**
     * A string list containing the owning source\'s features
     * @type {string}
     * @memberof AccountBeta
     */
    'features'?: string | null;
    /**
     * The origin of the account either aggregated or provisioned
     * @type {string}
     * @memberof AccountBeta
     */
    'origin'?: AccountBetaOriginEnum;
    /**
     *
     * @type {AccountAllOfOwnerIdentityBeta}
     * @memberof AccountBeta
     */
    'ownerIdentity'?: AccountAllOfOwnerIdentityBeta | null;
    /**
     *
     * @type {AccountAllOfOwnerGroupBeta}
     * @memberof AccountBeta
     */
    'ownerGroup'?: AccountAllOfOwnerGroupBeta | null;
}
export declare const AccountBetaOriginEnum: {
    readonly Aggregated: "AGGREGATED";
    readonly Provisioned: "PROVISIONED";
    readonly Null: "null";
};
export type AccountBetaOriginEnum = typeof AccountBetaOriginEnum[keyof typeof AccountBetaOriginEnum];
/**
 * The correlated account.
 * @export
 * @interface AccountCorrelatedAccountBeta
 */
export interface AccountCorrelatedAccountBeta {
    /**
     * The correlated account\'s DTO type.
     * @type {string}
     * @memberof AccountCorrelatedAccountBeta
     */
    'type': AccountCorrelatedAccountBetaTypeEnum;
    /**
     * The correlated account\'s ID.
     * @type {string}
     * @memberof AccountCorrelatedAccountBeta
     */
    'id': string;
    /**
     * The correlated account\'s display name.
     * @type {string}
     * @memberof AccountCorrelatedAccountBeta
     */
    'name': string;
    /**
     * Unique ID of the account on the source.
     * @type {string}
     * @memberof AccountCorrelatedAccountBeta
     */
    'nativeIdentity': string;
    /**
     * The source\'s unique identifier for the account. UUID is generated by the source system.
     * @type {string}
     * @memberof AccountCorrelatedAccountBeta
     */
    'uuid'?: string | null;
}
export declare const AccountCorrelatedAccountBetaTypeEnum: {
    readonly Account: "ACCOUNT";
};
export type AccountCorrelatedAccountBetaTypeEnum = typeof AccountCorrelatedAccountBetaTypeEnum[keyof typeof AccountCorrelatedAccountBetaTypeEnum];
/**
 *
 * @export
 * @interface AccountCorrelatedBeta
 */
export interface AccountCorrelatedBeta {
    /**
     *
     * @type {AccountCorrelatedIdentityBeta}
     * @memberof AccountCorrelatedBeta
     */
    'identity': AccountCorrelatedIdentityBeta;
    /**
     *
     * @type {AccountCorrelatedSourceBeta}
     * @memberof AccountCorrelatedBeta
     */
    'source': AccountCorrelatedSourceBeta;
    /**
     *
     * @type {AccountCorrelatedAccountBeta}
     * @memberof AccountCorrelatedBeta
     */
    'account': AccountCorrelatedAccountBeta;
    /**
     * The attributes associated with the account.  Attributes are unique per source.
     * @type {{ [key: string]: any; }}
     * @memberof AccountCorrelatedBeta
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     * The number of entitlements associated with this account.
     * @type {number}
     * @memberof AccountCorrelatedBeta
     */
    'entitlementCount'?: number;
}
/**
 * Identity the account is correlated with.
 * @export
 * @interface AccountCorrelatedIdentityBeta
 */
export interface AccountCorrelatedIdentityBeta {
    /**
     * DTO type of the identity the account is correlated with.
     * @type {string}
     * @memberof AccountCorrelatedIdentityBeta
     */
    'type': AccountCorrelatedIdentityBetaTypeEnum;
    /**
     * ID of the identity the account is correlated with.
     * @type {string}
     * @memberof AccountCorrelatedIdentityBeta
     */
    'id': string;
    /**
     * Display name of the identity the account is correlated with.
     * @type {string}
     * @memberof AccountCorrelatedIdentityBeta
     */
    'name': string;
}
export declare const AccountCorrelatedIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountCorrelatedIdentityBetaTypeEnum = typeof AccountCorrelatedIdentityBetaTypeEnum[keyof typeof AccountCorrelatedIdentityBetaTypeEnum];
/**
 * The source the accounts are being correlated from.
 * @export
 * @interface AccountCorrelatedSourceBeta
 */
export interface AccountCorrelatedSourceBeta {
    /**
     * The DTO type of the source the accounts are being correlated from.
     * @type {string}
     * @memberof AccountCorrelatedSourceBeta
     */
    'type': AccountCorrelatedSourceBetaTypeEnum;
    /**
     * The ID of the source the accounts are being correlated from.
     * @type {string}
     * @memberof AccountCorrelatedSourceBeta
     */
    'id': string;
    /**
     * Display name of the source the accounts are being correlated from.
     * @type {string}
     * @memberof AccountCorrelatedSourceBeta
     */
    'name': string;
}
export declare const AccountCorrelatedSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccountCorrelatedSourceBetaTypeEnum = typeof AccountCorrelatedSourceBetaTypeEnum[keyof typeof AccountCorrelatedSourceBetaTypeEnum];
/**
 *
 * @export
 * @interface AccountInfoDtoBeta
 */
export interface AccountInfoDtoBeta {
    /**
     * The unique ID of the account generated by the source system
     * @type {string}
     * @memberof AccountInfoDtoBeta
     */
    'nativeIdentity'?: string;
    /**
     * Display name for this account
     * @type {string}
     * @memberof AccountInfoDtoBeta
     */
    'displayName'?: string;
    /**
     * UUID associated with this account
     * @type {string}
     * @memberof AccountInfoDtoBeta
     */
    'uuid'?: string;
}
/**
 * If an account activity item is associated with an access request, captures details of that request.
 * @export
 * @interface AccountRequestInfoBeta
 */
export interface AccountRequestInfoBeta {
    /**
     * Id of requested object
     * @type {string}
     * @memberof AccountRequestInfoBeta
     */
    'requestedObjectId'?: string;
    /**
     * Human-readable name of requested object
     * @type {string}
     * @memberof AccountRequestInfoBeta
     */
    'requestedObjectName'?: string;
    /**
     *
     * @type {RequestableObjectTypeBeta}
     * @memberof AccountRequestInfoBeta
     */
    'requestedObjectType'?: RequestableObjectTypeBeta;
}
/**
 *
 * @export
 * @interface AccountStatusChangedAccountBeta
 */
export interface AccountStatusChangedAccountBeta {
    /**
     * the ID of the account in the database
     * @type {string}
     * @memberof AccountStatusChangedAccountBeta
     */
    'id'?: string;
    /**
     * the native identifier of the account
     * @type {string}
     * @memberof AccountStatusChangedAccountBeta
     */
    'nativeIdentity'?: string;
    /**
     * the display name of the account
     * @type {string}
     * @memberof AccountStatusChangedAccountBeta
     */
    'displayName'?: string;
    /**
     * the ID of the source for this account
     * @type {string}
     * @memberof AccountStatusChangedAccountBeta
     */
    'sourceId'?: string;
    /**
     * the name of the source for this account
     * @type {string}
     * @memberof AccountStatusChangedAccountBeta
     */
    'sourceName'?: string;
    /**
     * the number of entitlements on this account
     * @type {number}
     * @memberof AccountStatusChangedAccountBeta
     */
    'entitlementCount'?: number;
    /**
     * this value is always \"account\"
     * @type {string}
     * @memberof AccountStatusChangedAccountBeta
     */
    'accessType'?: string;
}
/**
 *
 * @export
 * @interface AccountStatusChangedBeta
 */
export interface AccountStatusChangedBeta {
    /**
     * the event type
     * @type {string}
     * @memberof AccountStatusChangedBeta
     */
    'eventType'?: string;
    /**
     * the identity id
     * @type {string}
     * @memberof AccountStatusChangedBeta
     */
    'identityId'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof AccountStatusChangedBeta
     */
    'dt'?: string;
    /**
     *
     * @type {AccountStatusChangedAccountBeta}
     * @memberof AccountStatusChangedBeta
     */
    'account'?: AccountStatusChangedAccountBeta;
    /**
     *
     * @type {AccountStatusChangedStatusChangeBeta}
     * @memberof AccountStatusChangedBeta
     */
    'statusChange'?: AccountStatusChangedStatusChangeBeta;
}
/**
 *
 * @export
 * @interface AccountStatusChangedStatusChangeBeta
 */
export interface AccountStatusChangedStatusChangeBeta {
    /**
     * the previous status of the account
     * @type {string}
     * @memberof AccountStatusChangedStatusChangeBeta
     */
    'previousStatus'?: AccountStatusChangedStatusChangeBetaPreviousStatusEnum;
    /**
     * the new status of the account
     * @type {string}
     * @memberof AccountStatusChangedStatusChangeBeta
     */
    'newStatus'?: AccountStatusChangedStatusChangeBetaNewStatusEnum;
}
export declare const AccountStatusChangedStatusChangeBetaPreviousStatusEnum: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
    readonly Locked: "locked";
};
export type AccountStatusChangedStatusChangeBetaPreviousStatusEnum = typeof AccountStatusChangedStatusChangeBetaPreviousStatusEnum[keyof typeof AccountStatusChangedStatusChangeBetaPreviousStatusEnum];
export declare const AccountStatusChangedStatusChangeBetaNewStatusEnum: {
    readonly Enabled: "enabled";
    readonly Disabled: "disabled";
    readonly Locked: "locked";
};
export type AccountStatusChangedStatusChangeBetaNewStatusEnum = typeof AccountStatusChangedStatusChangeBetaNewStatusEnum[keyof typeof AccountStatusChangedStatusChangeBetaNewStatusEnum];
/**
 * Request used for account enable/disable
 * @export
 * @interface AccountToggleRequestBeta
 */
export interface AccountToggleRequestBeta {
    /**
     * If set, an external process validates that the user wants to proceed with this request.
     * @type {string}
     * @memberof AccountToggleRequestBeta
     */
    'externalVerificationId'?: string;
    /**
     * If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.
     * @type {boolean}
     * @memberof AccountToggleRequestBeta
     */
    'forceProvisioning'?: boolean;
}
/**
 * Uncorrelated account.
 * @export
 * @interface AccountUncorrelatedAccountBeta
 */
export interface AccountUncorrelatedAccountBeta {
    /**
     * Uncorrelated account\'s DTO type.
     * @type {object}
     * @memberof AccountUncorrelatedAccountBeta
     */
    'type': AccountUncorrelatedAccountBetaTypeEnum;
    /**
     * Uncorrelated account\'s ID.
     * @type {string}
     * @memberof AccountUncorrelatedAccountBeta
     */
    'id': string;
    /**
     * Uncorrelated account\'s display name.
     * @type {string}
     * @memberof AccountUncorrelatedAccountBeta
     */
    'name': string;
    /**
     * Unique ID of the account on the source.
     * @type {string}
     * @memberof AccountUncorrelatedAccountBeta
     */
    'nativeIdentity': string;
    /**
     * The source\'s unique identifier for the account. UUID is generated by the source system.
     * @type {string}
     * @memberof AccountUncorrelatedAccountBeta
     */
    'uuid'?: string | null;
}
export declare const AccountUncorrelatedAccountBetaTypeEnum: {
    readonly Account: "ACCOUNT";
};
export type AccountUncorrelatedAccountBetaTypeEnum = typeof AccountUncorrelatedAccountBetaTypeEnum[keyof typeof AccountUncorrelatedAccountBetaTypeEnum];
/**
 *
 * @export
 * @interface AccountUncorrelatedBeta
 */
export interface AccountUncorrelatedBeta {
    /**
     *
     * @type {AccountUncorrelatedIdentityBeta}
     * @memberof AccountUncorrelatedBeta
     */
    'identity': AccountUncorrelatedIdentityBeta;
    /**
     *
     * @type {AccountUncorrelatedSourceBeta}
     * @memberof AccountUncorrelatedBeta
     */
    'source': AccountUncorrelatedSourceBeta;
    /**
     *
     * @type {AccountUncorrelatedAccountBeta}
     * @memberof AccountUncorrelatedBeta
     */
    'account': AccountUncorrelatedAccountBeta;
    /**
     * The number of entitlements associated with this account.
     * @type {number}
     * @memberof AccountUncorrelatedBeta
     */
    'entitlementCount'?: number;
}
/**
 * Identity the account is uncorrelated with.
 * @export
 * @interface AccountUncorrelatedIdentityBeta
 */
export interface AccountUncorrelatedIdentityBeta {
    /**
     * DTO type of the identity the account is uncorrelated with.
     * @type {string}
     * @memberof AccountUncorrelatedIdentityBeta
     */
    'type': AccountUncorrelatedIdentityBetaTypeEnum;
    /**
     * ID of the identity the account is uncorrelated with.
     * @type {string}
     * @memberof AccountUncorrelatedIdentityBeta
     */
    'id': string;
    /**
     * Display name of the identity the account is uncorrelated with.
     * @type {string}
     * @memberof AccountUncorrelatedIdentityBeta
     */
    'name': string;
}
export declare const AccountUncorrelatedIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AccountUncorrelatedIdentityBetaTypeEnum = typeof AccountUncorrelatedIdentityBetaTypeEnum[keyof typeof AccountUncorrelatedIdentityBetaTypeEnum];
/**
 * The source the accounts are uncorrelated from.
 * @export
 * @interface AccountUncorrelatedSourceBeta
 */
export interface AccountUncorrelatedSourceBeta {
    /**
     * The DTO type of the source the accounts are uncorrelated from.
     * @type {string}
     * @memberof AccountUncorrelatedSourceBeta
     */
    'type': AccountUncorrelatedSourceBetaTypeEnum;
    /**
     * The ID of the source the accounts are uncorrelated from.
     * @type {string}
     * @memberof AccountUncorrelatedSourceBeta
     */
    'id': string;
    /**
     * Display name of the source the accounts are uncorrelated from.
     * @type {string}
     * @memberof AccountUncorrelatedSourceBeta
     */
    'name': string;
}
export declare const AccountUncorrelatedSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccountUncorrelatedSourceBetaTypeEnum = typeof AccountUncorrelatedSourceBetaTypeEnum[keyof typeof AccountUncorrelatedSourceBetaTypeEnum];
/**
 * Request used for account unlock
 * @export
 * @interface AccountUnlockRequestBeta
 */
export interface AccountUnlockRequestBeta {
    /**
     * If set, an external process validates that the user wants to proceed with this request.
     * @type {string}
     * @memberof AccountUnlockRequestBeta
     */
    'externalVerificationId'?: string;
    /**
     * If set, the IDN account is unlocked after the workflow completes.
     * @type {boolean}
     * @memberof AccountUnlockRequestBeta
     */
    'unlockIDNAccount'?: boolean;
    /**
     * If set, provisioning updates the account attribute at the source.   This option is used when the account is not synced to ensure the attribute is updated.
     * @type {boolean}
     * @memberof AccountUnlockRequestBeta
     */
    'forceProvisioning'?: boolean;
}
/**
 *
 * @export
 * @interface AccountUsageBeta
 */
export interface AccountUsageBeta {
    /**
     * The first day of the month for which activity is aggregated.
     * @type {string}
     * @memberof AccountUsageBeta
     */
    'date'?: string;
    /**
     * The number of days within the month that the account was active in a source.
     * @type {number}
     * @memberof AccountUsageBeta
     */
    'count'?: number;
}
/**
 * Accounts async response containing details on started async process
 * @export
 * @interface AccountsAsyncResultBeta
 */
export interface AccountsAsyncResultBeta {
    /**
     * id of the task
     * @type {string}
     * @memberof AccountsAsyncResultBeta
     */
    'id': string;
}
/**
 *
 * @export
 * @interface AccountsCollectedForAggregationBeta
 */
export interface AccountsCollectedForAggregationBeta {
    /**
     *
     * @type {AccountsCollectedForAggregationSourceBeta}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'source': AccountsCollectedForAggregationSourceBeta;
    /**
     * The overall status of the collection.
     * @type {object}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'status': AccountsCollectedForAggregationBetaStatusEnum;
    /**
     * The date and time when the account collection started.
     * @type {string}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'started': string;
    /**
     * The date and time when the account collection finished.
     * @type {string}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'completed': string;
    /**
     * A list of errors that occurred during the collection.
     * @type {Array<string>}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'errors': Array<string> | null;
    /**
     * A list of warnings that occurred during the collection.
     * @type {Array<string>}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'warnings': Array<string> | null;
    /**
     *
     * @type {AccountsCollectedForAggregationStatsBeta}
     * @memberof AccountsCollectedForAggregationBeta
     */
    'stats': AccountsCollectedForAggregationStatsBeta;
}
export declare const AccountsCollectedForAggregationBetaStatusEnum: {
    readonly Success: "Success";
    readonly Failed: "Failed";
    readonly Terminated: "Terminated";
};
export type AccountsCollectedForAggregationBetaStatusEnum = typeof AccountsCollectedForAggregationBetaStatusEnum[keyof typeof AccountsCollectedForAggregationBetaStatusEnum];
/**
 * Reference to the source that has been aggregated.
 * @export
 * @interface AccountsCollectedForAggregationSourceBeta
 */
export interface AccountsCollectedForAggregationSourceBeta {
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof AccountsCollectedForAggregationSourceBeta
     */
    'id': string;
    /**
     * The type of object that is referenced
     * @type {string}
     * @memberof AccountsCollectedForAggregationSourceBeta
     */
    'type': AccountsCollectedForAggregationSourceBetaTypeEnum;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof AccountsCollectedForAggregationSourceBeta
     */
    'name': string;
}
export declare const AccountsCollectedForAggregationSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AccountsCollectedForAggregationSourceBetaTypeEnum = typeof AccountsCollectedForAggregationSourceBetaTypeEnum[keyof typeof AccountsCollectedForAggregationSourceBetaTypeEnum];
/**
 * Overall statistics about the account collection.
 * @export
 * @interface AccountsCollectedForAggregationStatsBeta
 */
export interface AccountsCollectedForAggregationStatsBeta {
    /**
     * The number of accounts which were scanned / iterated over.
     * @type {number}
     * @memberof AccountsCollectedForAggregationStatsBeta
     */
    'scanned': number;
    /**
     * The number of accounts which existed before, but had no changes.
     * @type {number}
     * @memberof AccountsCollectedForAggregationStatsBeta
     */
    'unchanged': number;
    /**
     * The number of accounts which existed before, but had changes.
     * @type {number}
     * @memberof AccountsCollectedForAggregationStatsBeta
     */
    'changed': number;
    /**
     * The number of accounts which are new - have not existed before.
     * @type {number}
     * @memberof AccountsCollectedForAggregationStatsBeta
     */
    'added': number;
    /**
     * The number accounts which existed before, but no longer exist (thus getting removed).
     * @type {number}
     * @memberof AccountsCollectedForAggregationStatsBeta
     */
    'removed': number;
}
/**
 *
 * @export
 * @interface ActivateCampaignOptionsBeta
 */
export interface ActivateCampaignOptionsBeta {
    /**
     * The timezone must be in a valid ISO 8601 format. Timezones in ISO 8601 are represented as UTC (represented as \'Z\') or as an offset from UTC. The offset format can be +/-hh:mm, +/-hhmm, or +/-hh.
     * @type {string}
     * @memberof ActivateCampaignOptionsBeta
     */
    'timeZone'?: string;
}
/**
 *
 * @export
 * @interface AdminReviewReassignBeta
 */
export interface AdminReviewReassignBeta {
    /**
     * List of certification IDs to reassign
     * @type {Array<string>}
     * @memberof AdminReviewReassignBeta
     */
    'certificationIds'?: Array<string>;
    /**
     *
     * @type {AdminReviewReassignReassignToBeta}
     * @memberof AdminReviewReassignBeta
     */
    'reassignTo'?: AdminReviewReassignReassignToBeta;
    /**
     * Comment to explain why the certification was reassigned
     * @type {string}
     * @memberof AdminReviewReassignBeta
     */
    'reason'?: string;
}
/**
 *
 * @export
 * @interface AdminReviewReassignReassignToBeta
 */
export interface AdminReviewReassignReassignToBeta {
    /**
     * The identity ID to which the review is being assigned.
     * @type {string}
     * @memberof AdminReviewReassignReassignToBeta
     */
    'id'?: string;
    /**
     * The type of the ID provided.
     * @type {string}
     * @memberof AdminReviewReassignReassignToBeta
     */
    'type'?: AdminReviewReassignReassignToBetaTypeEnum;
}
export declare const AdminReviewReassignReassignToBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type AdminReviewReassignReassignToBetaTypeEnum = typeof AdminReviewReassignReassignToBetaTypeEnum[keyof typeof AdminReviewReassignReassignToBetaTypeEnum];
/**
 * Batch properties if an approval is sent via batching.
 * @export
 * @interface ApprovalBatchBeta
 */
export interface ApprovalBatchBeta {
    /**
     * ID of the batch
     * @type {string}
     * @memberof ApprovalBatchBeta
     */
    'batchId'?: string;
    /**
     * How many approvals are going to be in this batch. Defaults to 1 if not provided.
     * @type {number}
     * @memberof ApprovalBatchBeta
     */
    'batchSize'?: number;
}
/**
 * Approval Object
 * @export
 * @interface ApprovalBeta
 */
export interface ApprovalBeta {
    /**
     * The Approval ID
     * @type {string}
     * @memberof ApprovalBeta
     */
    'approvalId'?: string;
    /**
     * Object representation of an approver of an approval
     * @type {Array<ApprovalIdentityBeta>}
     * @memberof ApprovalBeta
     */
    'approvers'?: Array<ApprovalIdentityBeta>;
    /**
     * Date the approval was created
     * @type {string}
     * @memberof ApprovalBeta
     */
    'createdDate'?: string;
    /**
     * Type of approval
     * @type {string}
     * @memberof ApprovalBeta
     */
    'type'?: string;
    /**
     * The name of the approval for a given locale
     * @type {Array<ApprovalNameBeta>}
     * @memberof ApprovalBeta
     */
    'name'?: Array<ApprovalNameBeta>;
    /**
     * The name of the approval for a given locale
     * @type {ApprovalBatchBeta}
     * @memberof ApprovalBeta
     */
    'batchRequest'?: ApprovalBatchBeta;
    /**
     * The description of the approval for a given locale
     * @type {Array<ApprovalDescriptionBeta>}
     * @memberof ApprovalBeta
     */
    'description'?: Array<ApprovalDescriptionBeta>;
    /**
     * The priority of the approval
     * @type {string}
     * @memberof ApprovalBeta
     */
    'priority'?: ApprovalBetaPriorityEnum;
    /**
     * Object representation of the requester of the approval
     * @type {ApprovalIdentityBeta}
     * @memberof ApprovalBeta
     */
    'requester'?: ApprovalIdentityBeta;
    /**
     * Object representation of a comment on the approval
     * @type {Array<ApprovalCommentBeta>}
     * @memberof ApprovalBeta
     */
    'comments'?: Array<ApprovalCommentBeta>;
    /**
     * Array of approvers who have approved the approval
     * @type {Array<ApprovalIdentityBeta>}
     * @memberof ApprovalBeta
     */
    'approvedBy'?: Array<ApprovalIdentityBeta>;
    /**
     * Array of approvers who have rejected the approval
     * @type {Array<ApprovalIdentityBeta>}
     * @memberof ApprovalBeta
     */
    'rejectedBy'?: Array<ApprovalIdentityBeta>;
    /**
     * Date the approval was completed
     * @type {string}
     * @memberof ApprovalBeta
     */
    'completedDate'?: string;
    /**
     * Criteria that needs to be met for an approval to be marked as approved
     * @type {string}
     * @memberof ApprovalBeta
     */
    'approvalCriteria'?: ApprovalBetaApprovalCriteriaEnum;
    /**
     * The current status of the approval
     * @type {string}
     * @memberof ApprovalBeta
     */
    'status'?: ApprovalBetaStatusEnum;
    /**
     * Json string representing additional attributes known about the object to be approved.
     * @type {string}
     * @memberof ApprovalBeta
     */
    'additionalAttributes'?: string;
    /**
     * Reference data related to the approval
     * @type {Array<ApprovalReferenceBeta>}
     * @memberof ApprovalBeta
     */
    'referenceData'?: Array<ApprovalReferenceBeta>;
}
export declare const ApprovalBetaPriorityEnum: {
    readonly High: "HIGH";
    readonly Medium: "MEDIUM";
    readonly Low: "LOW";
};
export type ApprovalBetaPriorityEnum = typeof ApprovalBetaPriorityEnum[keyof typeof ApprovalBetaPriorityEnum];
export declare const ApprovalBetaApprovalCriteriaEnum: {
    readonly Single: "SINGLE";
    readonly Double: "DOUBLE";
    readonly Triple: "TRIPLE";
    readonly Quarter: "QUARTER";
    readonly Half: "HALF";
    readonly All: "ALL";
};
export type ApprovalBetaApprovalCriteriaEnum = typeof ApprovalBetaApprovalCriteriaEnum[keyof typeof ApprovalBetaApprovalCriteriaEnum];
export declare const ApprovalBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type ApprovalBetaStatusEnum = typeof ApprovalBetaStatusEnum[keyof typeof ApprovalBetaStatusEnum];
/**
 * Comments Object
 * @export
 * @interface ApprovalCommentBeta
 */
export interface ApprovalCommentBeta {
    /**
     *
     * @type {ApprovalIdentityBeta}
     * @memberof ApprovalCommentBeta
     */
    'author'?: ApprovalIdentityBeta;
    /**
     * Comment to be left on an approval
     * @type {string}
     * @memberof ApprovalCommentBeta
     */
    'comment'?: string;
    /**
     * Date the comment was created
     * @type {string}
     * @memberof ApprovalCommentBeta
     */
    'createdDate'?: string;
}
/**
 * The description of what the approval is asking for
 * @export
 * @interface ApprovalDescriptionBeta
 */
export interface ApprovalDescriptionBeta {
    /**
     * The description of what the approval is asking for
     * @type {string}
     * @memberof ApprovalDescriptionBeta
     */
    'value'?: string;
    /**
     * What locale the description of the approval is using
     * @type {string}
     * @memberof ApprovalDescriptionBeta
     */
    'locale'?: string;
}
/**
 * Payload for changing the fields of an approval.
 * @export
 * @interface ApprovalDtoBeta
 */
export interface ApprovalDtoBeta {
    /**
     * Object representation of a comment on the approval
     * @type {object}
     * @memberof ApprovalDtoBeta
     */
    'comments'?: object;
    /**
     * An array of identities who have approved the approval
     * @type {Array<ApprovalIdentityBeta>}
     * @memberof ApprovalDtoBeta
     */
    'approvedBy'?: Array<ApprovalIdentityBeta>;
    /**
     * An array of identities who have rejected the approval
     * @type {Array<ApprovalIdentityBeta>}
     * @memberof ApprovalDtoBeta
     */
    'rejectedBy'?: Array<ApprovalIdentityBeta>;
    /**
     *
     * @type {ApprovalIdentityBeta}
     * @memberof ApprovalDtoBeta
     */
    'reassignFrom'?: ApprovalIdentityBeta;
    /**
     *
     * @type {ApprovalIdentityBeta}
     * @memberof ApprovalDtoBeta
     */
    'reassignTo'?: ApprovalIdentityBeta;
    /**
     * Any additional attributes that the approval request may need
     * @type {object}
     * @memberof ApprovalDtoBeta
     */
    'additionalAttributes'?: object;
}
/**
 *
 * @export
 * @interface ApprovalForwardHistoryBeta
 */
export interface ApprovalForwardHistoryBeta {
    /**
     * Display name of approver from whom the approval was forwarded.
     * @type {string}
     * @memberof ApprovalForwardHistoryBeta
     */
    'oldApproverName'?: string;
    /**
     * Display name of approver to whom the approval was forwarded.
     * @type {string}
     * @memberof ApprovalForwardHistoryBeta
     */
    'newApproverName'?: string;
    /**
     * Comment made while forwarding.
     * @type {string}
     * @memberof ApprovalForwardHistoryBeta
     */
    'comment'?: string | null;
    /**
     * Time at which approval was forwarded.
     * @type {string}
     * @memberof ApprovalForwardHistoryBeta
     */
    'modified'?: string;
    /**
     * Display name of forwarder who forwarded the approval.
     * @type {string}
     * @memberof ApprovalForwardHistoryBeta
     */
    'forwarderName'?: string | null;
    /**
     *
     * @type {ReassignmentTypeBeta}
     * @memberof ApprovalForwardHistoryBeta
     */
    'reassignmentType'?: ReassignmentTypeBeta;
}
/**
 * Identity Object
 * @export
 * @interface ApprovalIdentityBeta
 */
export interface ApprovalIdentityBeta {
    /**
     * The identity ID
     * @type {string}
     * @memberof ApprovalIdentityBeta
     */
    'id'?: string;
    /**
     * Indication of what group the identity belongs to. Ie, IDENTITY, GOVERNANCE_GROUP, etc
     * @type {string}
     * @memberof ApprovalIdentityBeta
     */
    'type'?: ApprovalIdentityBetaTypeEnum;
    /**
     * Name of the identity
     * @type {string}
     * @memberof ApprovalIdentityBeta
     */
    'name'?: string;
}
export declare const ApprovalIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ApprovalIdentityBetaTypeEnum = typeof ApprovalIdentityBetaTypeEnum[keyof typeof ApprovalIdentityBetaTypeEnum];
/**
 *
 * @export
 * @interface ApprovalInfoResponseBeta
 */
export interface ApprovalInfoResponseBeta {
    /**
     * the id of approver
     * @type {string}
     * @memberof ApprovalInfoResponseBeta
     */
    'id'?: string;
    /**
     * the name of approver
     * @type {string}
     * @memberof ApprovalInfoResponseBeta
     */
    'name'?: string;
    /**
     * the status of the approval request
     * @type {string}
     * @memberof ApprovalInfoResponseBeta
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface ApprovalItemDetailsBeta
 */
export interface ApprovalItemDetailsBeta {
    /**
     * The approval item\'s ID
     * @type {string}
     * @memberof ApprovalItemDetailsBeta
     */
    'id'?: string;
    /**
     * The account referenced by the approval item
     * @type {string}
     * @memberof ApprovalItemDetailsBeta
     */
    'account'?: string | null;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof ApprovalItemDetailsBeta
     */
    'application'?: string;
    /**
     * The attribute\'s name
     * @type {string}
     * @memberof ApprovalItemDetailsBeta
     */
    'name'?: string | null;
    /**
     * The attribute\'s operation
     * @type {string}
     * @memberof ApprovalItemDetailsBeta
     */
    'operation'?: string;
    /**
     * The attribute\'s value
     * @type {string}
     * @memberof ApprovalItemDetailsBeta
     */
    'value'?: string | null;
    /**
     *
     * @type {WorkItemStateBeta}
     * @memberof ApprovalItemDetailsBeta
     */
    'state'?: WorkItemStateBeta | null;
}
/**
 *
 * @export
 * @interface ApprovalItemsBeta
 */
export interface ApprovalItemsBeta {
    /**
     * The approval item\'s ID
     * @type {string}
     * @memberof ApprovalItemsBeta
     */
    'id'?: string;
    /**
     * The account referenced by the approval item
     * @type {string}
     * @memberof ApprovalItemsBeta
     */
    'account'?: string | null;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof ApprovalItemsBeta
     */
    'application'?: string;
    /**
     * The attribute\'s name
     * @type {string}
     * @memberof ApprovalItemsBeta
     */
    'name'?: string | null;
    /**
     * The attribute\'s operation
     * @type {string}
     * @memberof ApprovalItemsBeta
     */
    'operation'?: string;
    /**
     * The attribute\'s value
     * @type {string}
     * @memberof ApprovalItemsBeta
     */
    'value'?: string | null;
    /**
     *
     * @type {WorkItemStateBeta}
     * @memberof ApprovalItemsBeta
     */
    'state'?: WorkItemStateBeta | null;
}
/**
 * Approval Name Object
 * @export
 * @interface ApprovalNameBeta
 */
export interface ApprovalNameBeta {
    /**
     * Name of the approval
     * @type {string}
     * @memberof ApprovalNameBeta
     */
    'value'?: string;
    /**
     * What locale the name of the approval is using
     * @type {string}
     * @memberof ApprovalNameBeta
     */
    'locale'?: string;
}
/**
 * Reference objects related to the approval
 * @export
 * @interface ApprovalReferenceBeta
 */
export interface ApprovalReferenceBeta {
    /**
     * Id of the reference object
     * @type {string}
     * @memberof ApprovalReferenceBeta
     */
    'id'?: string;
    /**
     * What reference object does this ID correspond to
     * @type {string}
     * @memberof ApprovalReferenceBeta
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ApprovalReminderAndEscalationConfigBeta
 */
export interface ApprovalReminderAndEscalationConfigBeta {
    /**
     * Number of days to wait before the first reminder. If no reminders are configured, then this is the number of days to wait before escalation.
     * @type {number}
     * @memberof ApprovalReminderAndEscalationConfigBeta
     */
    'daysUntilEscalation'?: number | null;
    /**
     * Number of days to wait between reminder notifications.
     * @type {number}
     * @memberof ApprovalReminderAndEscalationConfigBeta
     */
    'daysBetweenReminders'?: number | null;
    /**
     * Maximum number of reminder notification to send to the reviewer before approval escalation.
     * @type {number}
     * @memberof ApprovalReminderAndEscalationConfigBeta
     */
    'maxReminders'?: number | null;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmailBeta}
     * @memberof ApprovalReminderAndEscalationConfigBeta
     */
    'fallbackApproverRef'?: IdentityReferenceWithNameAndEmailBeta | null;
}
/**
 * Describes the individual or group that is responsible for an approval step.
 * @export
 * @enum {string}
 */
export declare const ApprovalSchemeBeta: {
    readonly AppOwner: "APP_OWNER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Manager: "MANAGER";
    readonly RoleOwner: "ROLE_OWNER";
    readonly AccessProfileOwner: "ACCESS_PROFILE_OWNER";
    readonly EntitlementOwner: "ENTITLEMENT_OWNER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type ApprovalSchemeBeta = typeof ApprovalSchemeBeta[keyof typeof ApprovalSchemeBeta];
/**
 *
 * @export
 * @interface ApprovalSchemeForRoleBeta
 */
export interface ApprovalSchemeForRoleBeta {
    /**
     * Describes the individual or group that is responsible for an approval step. Values are as follows.  **OWNER**: Owner of the associated Role  **MANAGER**: Manager of the Identity making the request  **GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field
     * @type {string}
     * @memberof ApprovalSchemeForRoleBeta
     */
    'approverType'?: ApprovalSchemeForRoleBetaApproverTypeEnum;
    /**
     * Id of the specific approver, used only when approverType is GOVERNANCE_GROUP
     * @type {string}
     * @memberof ApprovalSchemeForRoleBeta
     */
    'approverId'?: string | null;
}
export declare const ApprovalSchemeForRoleBetaApproverTypeEnum: {
    readonly Owner: "OWNER";
    readonly Manager: "MANAGER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type ApprovalSchemeForRoleBetaApproverTypeEnum = typeof ApprovalSchemeForRoleBetaApproverTypeEnum[keyof typeof ApprovalSchemeForRoleBetaApproverTypeEnum];
/**
 * Enum representing the non-employee request approval status
 * @export
 * @enum {string}
 */
export declare const ApprovalStatusBeta: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
    readonly Pending: "PENDING";
    readonly NotReady: "NOT_READY";
    readonly Cancelled: "CANCELLED";
};
export type ApprovalStatusBeta = typeof ApprovalStatusBeta[keyof typeof ApprovalStatusBeta];
/**
 *
 * @export
 * @interface ApprovalStatusDtoBeta
 */
export interface ApprovalStatusDtoBeta {
    /**
     * True if the request for this item was forwarded from one owner to another.
     * @type {boolean}
     * @memberof ApprovalStatusDtoBeta
     */
    'forwarded'?: boolean;
    /**
     *
     * @type {ApprovalStatusDtoOriginalOwnerBeta}
     * @memberof ApprovalStatusDtoBeta
     */
    'originalOwner'?: ApprovalStatusDtoOriginalOwnerBeta;
    /**
     *
     * @type {ApprovalStatusDtoCurrentOwnerBeta}
     * @memberof ApprovalStatusDtoBeta
     */
    'currentOwner'?: ApprovalStatusDtoCurrentOwnerBeta;
    /**
     * Time at which item was modified.
     * @type {string}
     * @memberof ApprovalStatusDtoBeta
     */
    'modified'?: string | null;
    /**
     *
     * @type {ManualWorkItemStateBeta}
     * @memberof ApprovalStatusDtoBeta
     */
    'status'?: ManualWorkItemStateBeta;
    /**
     *
     * @type {ApprovalSchemeBeta}
     * @memberof ApprovalStatusDtoBeta
     */
    'scheme'?: ApprovalSchemeBeta;
    /**
     * If the request failed, includes any error messages that were generated.
     * @type {Array<ErrorMessageDtoBeta>}
     * @memberof ApprovalStatusDtoBeta
     */
    'errorMessages'?: Array<ErrorMessageDtoBeta> | null;
    /**
     * Comment, if any, provided by the approver.
     * @type {string}
     * @memberof ApprovalStatusDtoBeta
     */
    'comment'?: string | null;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof ApprovalStatusDtoBeta
     */
    'removeDate'?: string | null;
}
/**
 *
 * @export
 * @interface ApprovalStatusDtoCurrentOwnerBeta
 */
export interface ApprovalStatusDtoCurrentOwnerBeta {
    /**
     * DTO type of identity who reviewed the access item request.
     * @type {string}
     * @memberof ApprovalStatusDtoCurrentOwnerBeta
     */
    'type'?: ApprovalStatusDtoCurrentOwnerBetaTypeEnum;
    /**
     * ID of identity who reviewed the access item request.
     * @type {string}
     * @memberof ApprovalStatusDtoCurrentOwnerBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity who reviewed the access item request.
     * @type {string}
     * @memberof ApprovalStatusDtoCurrentOwnerBeta
     */
    'name'?: string;
}
export declare const ApprovalStatusDtoCurrentOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ApprovalStatusDtoCurrentOwnerBetaTypeEnum = typeof ApprovalStatusDtoCurrentOwnerBetaTypeEnum[keyof typeof ApprovalStatusDtoCurrentOwnerBetaTypeEnum];
/**
 * Identity of orginal approval owner.
 * @export
 * @interface ApprovalStatusDtoOriginalOwnerBeta
 */
export interface ApprovalStatusDtoOriginalOwnerBeta {
    /**
     * DTO type of original approval owner\'s identity.
     * @type {string}
     * @memberof ApprovalStatusDtoOriginalOwnerBeta
     */
    'type'?: ApprovalStatusDtoOriginalOwnerBetaTypeEnum;
    /**
     * ID of original approval owner\'s identity.
     * @type {string}
     * @memberof ApprovalStatusDtoOriginalOwnerBeta
     */
    'id'?: string;
    /**
     * Display name of original approval owner.
     * @type {string}
     * @memberof ApprovalStatusDtoOriginalOwnerBeta
     */
    'name'?: string;
}
export declare const ApprovalStatusDtoOriginalOwnerBetaTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type ApprovalStatusDtoOriginalOwnerBetaTypeEnum = typeof ApprovalStatusDtoOriginalOwnerBetaTypeEnum[keyof typeof ApprovalStatusDtoOriginalOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface ApprovalSummaryBeta
 */
export interface ApprovalSummaryBeta {
    /**
     * The number of pending access requests approvals.
     * @type {number}
     * @memberof ApprovalSummaryBeta
     */
    'pending'?: number;
    /**
     * The number of approved access requests approvals.
     * @type {number}
     * @memberof ApprovalSummaryBeta
     */
    'approved'?: number;
    /**
     * The number of rejected access requests approvals.
     * @type {number}
     * @memberof ApprovalSummaryBeta
     */
    'rejected'?: number;
}
/**
 *
 * @export
 * @interface ArgumentBeta
 */
export interface ArgumentBeta {
    /**
     * the name of the argument
     * @type {string}
     * @memberof ArgumentBeta
     */
    'name': string;
    /**
     * the description of the argument
     * @type {string}
     * @memberof ArgumentBeta
     */
    'description'?: string;
    /**
     * the programmatic type of the argument
     * @type {string}
     * @memberof ArgumentBeta
     */
    'type'?: string | null;
}
/**
 *
 * @export
 * @interface ArrayInnerBeta
 */
export interface ArrayInnerBeta {
}
/**
 *
 * @export
 * @interface AssignmentContextDtoBeta
 */
export interface AssignmentContextDtoBeta {
    /**
     *
     * @type {AccessRequestContextBeta}
     * @memberof AssignmentContextDtoBeta
     */
    'requested'?: AccessRequestContextBeta;
    /**
     *
     * @type {Array<RoleMatchDtoBeta>}
     * @memberof AssignmentContextDtoBeta
     */
    'matched'?: Array<RoleMatchDtoBeta>;
    /**
     * Date that the assignment will was evaluated
     * @type {string}
     * @memberof AssignmentContextDtoBeta
     */
    'computedDate'?: string;
}
/**
 * Specification of source attribute sync mapping configuration for an identity attribute
 * @export
 * @interface AttrSyncSourceAttributeConfigBeta
 */
export interface AttrSyncSourceAttributeConfigBeta {
    /**
     * Name of the identity attribute
     * @type {string}
     * @memberof AttrSyncSourceAttributeConfigBeta
     */
    'name': string;
    /**
     * Display name of the identity attribute
     * @type {string}
     * @memberof AttrSyncSourceAttributeConfigBeta
     */
    'displayName': string;
    /**
     * Determines whether or not the attribute is enabled for synchronization
     * @type {boolean}
     * @memberof AttrSyncSourceAttributeConfigBeta
     */
    'enabled': boolean;
    /**
     * Name of the source account attribute to which the identity attribute value will be synchronized if enabled
     * @type {string}
     * @memberof AttrSyncSourceAttributeConfigBeta
     */
    'target': string;
}
/**
 * Target source for attribute synchronization.
 * @export
 * @interface AttrSyncSourceBeta
 */
export interface AttrSyncSourceBeta {
    /**
     * DTO type of target source for attribute synchronization.
     * @type {string}
     * @memberof AttrSyncSourceBeta
     */
    'type'?: AttrSyncSourceBetaTypeEnum;
    /**
     * ID of target source for attribute synchronization.
     * @type {string}
     * @memberof AttrSyncSourceBeta
     */
    'id'?: string;
    /**
     * Human-readable name of target source for attribute synchronization.
     * @type {string}
     * @memberof AttrSyncSourceBeta
     */
    'name'?: string;
}
export declare const AttrSyncSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type AttrSyncSourceBetaTypeEnum = typeof AttrSyncSourceBetaTypeEnum[keyof typeof AttrSyncSourceBetaTypeEnum];
/**
 * Specification of attribute sync configuration for a source
 * @export
 * @interface AttrSyncSourceConfigBeta
 */
export interface AttrSyncSourceConfigBeta {
    /**
     *
     * @type {AttrSyncSourceBeta}
     * @memberof AttrSyncSourceConfigBeta
     */
    'source': AttrSyncSourceBeta;
    /**
     * Attribute synchronization configuration for specific identity attributes in the context of a source
     * @type {Array<AttrSyncSourceAttributeConfigBeta>}
     * @memberof AttrSyncSourceConfigBeta
     */
    'attributes': Array<AttrSyncSourceAttributeConfigBeta>;
}
/**
 *
 * @export
 * @interface AttributeChangeBeta
 */
export interface AttributeChangeBeta {
    /**
     * the attribute name
     * @type {string}
     * @memberof AttributeChangeBeta
     */
    'name'?: string;
    /**
     * the old value of attribute
     * @type {string}
     * @memberof AttributeChangeBeta
     */
    'previousValue'?: string;
    /**
     * the new value of attribute
     * @type {string}
     * @memberof AttributeChangeBeta
     */
    'newValue'?: string;
}
/**
 *
 * @export
 * @interface AttributeDTOBeta
 */
export interface AttributeDTOBeta {
    /**
     * Technical name of the Attribute. This is unique and cannot be changed after creation.
     * @type {string}
     * @memberof AttributeDTOBeta
     */
    'key'?: string;
    /**
     * The display name of the key.
     * @type {string}
     * @memberof AttributeDTOBeta
     */
    'name'?: string;
    /**
     * Indicates whether the attribute can have multiple values.
     * @type {boolean}
     * @memberof AttributeDTOBeta
     */
    'multiselect'?: boolean;
    /**
     * The status of the Attribute.
     * @type {string}
     * @memberof AttributeDTOBeta
     */
    'status'?: string;
    /**
     * The type of the Attribute. This can be either \"custom\" or \"governance\".
     * @type {string}
     * @memberof AttributeDTOBeta
     */
    'type'?: string;
    /**
     * An array of object types this attributes values can be applied to. Possible values are \"all\" or \"entitlement\". Value \"all\" means this attribute can be used with all object types that are supported.
     * @type {Array<string>}
     * @memberof AttributeDTOBeta
     */
    'objectTypes'?: Array<string> | null;
    /**
     * The description of the Attribute.
     * @type {string}
     * @memberof AttributeDTOBeta
     */
    'description'?: string;
    /**
     *
     * @type {Array<AttributeValueDTOBeta>}
     * @memberof AttributeDTOBeta
     */
    'values'?: Array<AttributeValueDTOBeta> | null;
}
/**
 *
 * @export
 * @interface AttributeDTOListBeta
 */
export interface AttributeDTOListBeta {
    /**
     *
     * @type {Array<AttributeDTOBeta>}
     * @memberof AttributeDTOListBeta
     */
    'attributes'?: Array<AttributeDTOBeta> | null;
}
/**
 *
 * @export
 * @interface AttributeDefinitionBeta
 */
export interface AttributeDefinitionBeta {
    /**
     * The name of the attribute.
     * @type {string}
     * @memberof AttributeDefinitionBeta
     */
    'name'?: string;
    /**
     *
     * @type {AttributeDefinitionTypeBeta}
     * @memberof AttributeDefinitionBeta
     */
    'type'?: AttributeDefinitionTypeBeta;
    /**
     *
     * @type {AttributeDefinitionSchemaBeta}
     * @memberof AttributeDefinitionBeta
     */
    'schema'?: AttributeDefinitionSchemaBeta;
    /**
     * A human-readable description of the attribute.
     * @type {string}
     * @memberof AttributeDefinitionBeta
     */
    'description'?: string;
    /**
     * Flag indicating whether or not the attribute is multi-valued.
     * @type {boolean}
     * @memberof AttributeDefinitionBeta
     */
    'isMulti'?: boolean;
    /**
     * Flag indicating whether or not the attribute is an entitlement.
     * @type {boolean}
     * @memberof AttributeDefinitionBeta
     */
    'isEntitlement'?: boolean;
    /**
     * Flag indicating whether or not the attribute represents a group. This can only be `true` if `isEntitlement` is also `true` **and** there is a schema defined for the attribute.
     * @type {boolean}
     * @memberof AttributeDefinitionBeta
     */
    'isGroup'?: boolean;
}
/**
 * A reference to the schema on the source to the attribute values map to.
 * @export
 * @interface AttributeDefinitionSchemaBeta
 */
export interface AttributeDefinitionSchemaBeta {
    /**
     * The type of object being referenced
     * @type {string}
     * @memberof AttributeDefinitionSchemaBeta
     */
    'type'?: AttributeDefinitionSchemaBetaTypeEnum;
    /**
     * The object ID this reference applies to.
     * @type {string}
     * @memberof AttributeDefinitionSchemaBeta
     */
    'id'?: string;
    /**
     * The human-readable display name of the object.
     * @type {string}
     * @memberof AttributeDefinitionSchemaBeta
     */
    'name'?: string;
}
export declare const AttributeDefinitionSchemaBetaTypeEnum: {
    readonly ConnectorSchema: "CONNECTOR_SCHEMA";
};
export type AttributeDefinitionSchemaBetaTypeEnum = typeof AttributeDefinitionSchemaBetaTypeEnum[keyof typeof AttributeDefinitionSchemaBetaTypeEnum];
/**
 * The underlying type of the value which an AttributeDefinition represents.
 * @export
 * @enum {string}
 */
export declare const AttributeDefinitionTypeBeta: {
    readonly String: "STRING";
    readonly Long: "LONG";
    readonly Int: "INT";
    readonly Boolean: "BOOLEAN";
};
export type AttributeDefinitionTypeBeta = typeof AttributeDefinitionTypeBeta[keyof typeof AttributeDefinitionTypeBeta];
/**
 *
 * @export
 * @interface AttributeValueDTOBeta
 */
export interface AttributeValueDTOBeta {
    /**
     * Technical name of the Attribute value. This is unique and cannot be changed after creation.
     * @type {string}
     * @memberof AttributeValueDTOBeta
     */
    'value'?: string;
    /**
     * The display name of the Attribute value.
     * @type {string}
     * @memberof AttributeValueDTOBeta
     */
    'name'?: string;
    /**
     * The status of the Attribute value.
     * @type {string}
     * @memberof AttributeValueDTOBeta
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface AttributesChangedBeta
 */
export interface AttributesChangedBeta {
    /**
     *
     * @type {Array<AttributeChangeBeta>}
     * @memberof AttributesChangedBeta
     */
    'changes'?: Array<AttributeChangeBeta>;
    /**
     * the event type
     * @type {string}
     * @memberof AttributesChangedBeta
     */
    'eventType'?: string;
    /**
     * the identity id
     * @type {string}
     * @memberof AttributesChangedBeta
     */
    'identityId'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof AttributesChangedBeta
     */
    'dt'?: string;
}
/**
 * Audit details for the reassignment configuration of an identity
 * @export
 * @interface AuditDetailsBeta
 */
export interface AuditDetailsBeta {
    /**
     * Initial date and time when the record was created
     * @type {string}
     * @memberof AuditDetailsBeta
     */
    'created'?: string;
    /**
     *
     * @type {Identity1Beta}
     * @memberof AuditDetailsBeta
     */
    'createdBy'?: Identity1Beta;
    /**
     * Last modified date and time for the record
     * @type {string}
     * @memberof AuditDetailsBeta
     */
    'modified'?: string;
    /**
     *
     * @type {Identity1Beta}
     * @memberof AuditDetailsBeta
     */
    'modifiedBy'?: Identity1Beta;
}
/**
 *
 * @export
 * @interface AuthProfileBeta
 */
export interface AuthProfileBeta {
    /**
     * Authentication Profile name.
     * @type {string}
     * @memberof AuthProfileBeta
     */
    'name'?: string;
    /**
     * Use it to block access from off network.
     * @type {boolean}
     * @memberof AuthProfileBeta
     */
    'offNetwork'?: boolean;
    /**
     * Use it to block access from untrusted geoographies.
     * @type {boolean}
     * @memberof AuthProfileBeta
     */
    'untrustedGeography'?: boolean;
    /**
     * Application ID.
     * @type {string}
     * @memberof AuthProfileBeta
     */
    'applicationId'?: string;
    /**
     * Application name.
     * @type {string}
     * @memberof AuthProfileBeta
     */
    'applicationName'?: string;
    /**
     * Type of the Authentication Profile.
     * @type {string}
     * @memberof AuthProfileBeta
     */
    'type'?: AuthProfileBetaTypeEnum;
    /**
     * Use it to enable strong authentication.
     * @type {boolean}
     * @memberof AuthProfileBeta
     */
    'strongAuthLogin'?: boolean;
}
export declare const AuthProfileBetaTypeEnum: {
    readonly Block: "BLOCK";
    readonly Mfa: "MFA";
    readonly NonPta: "NON_PTA";
    readonly Pta: "PTA";
};
export type AuthProfileBetaTypeEnum = typeof AuthProfileBetaTypeEnum[keyof typeof AuthProfileBetaTypeEnum];
/**
 *
 * @export
 * @interface AuthProfileSummaryBeta
 */
export interface AuthProfileSummaryBeta {
    /**
     * Tenant name.
     * @type {string}
     * @memberof AuthProfileSummaryBeta
     */
    'tenant'?: string;
    /**
     * Identity ID.
     * @type {string}
     * @memberof AuthProfileSummaryBeta
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface Base64DecodeBeta
 */
export interface Base64DecodeBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Base64DecodeBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Base64DecodeBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Base64EncodeBeta
 */
export interface Base64EncodeBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof Base64EncodeBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof Base64EncodeBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface BaseCommonDto1Beta
 */
export interface BaseCommonDto1Beta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof BaseCommonDto1Beta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof BaseCommonDto1Beta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof BaseCommonDto1Beta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof BaseCommonDto1Beta
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface BaseCommonDtoBeta
 */
export interface BaseCommonDtoBeta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof BaseCommonDtoBeta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof BaseCommonDtoBeta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof BaseCommonDtoBeta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof BaseCommonDtoBeta
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface BaseReferenceDtoBeta
 */
export interface BaseReferenceDtoBeta {
    /**
     * the application ID
     * @type {string}
     * @memberof BaseReferenceDtoBeta
     */
    'id'?: string;
    /**
     * the application name
     * @type {string}
     * @memberof BaseReferenceDtoBeta
     */
    'name'?: string;
}
/**
 * Config required if BASIC_AUTH is used.
 * @export
 * @interface BasicAuthConfigBeta
 */
export interface BasicAuthConfigBeta {
    /**
     * The username to authenticate.
     * @type {string}
     * @memberof BasicAuthConfigBeta
     */
    'userName'?: string;
    /**
     * The password to authenticate. On response, this field is set to null as to not return secrets.
     * @type {string}
     * @memberof BasicAuthConfigBeta
     */
    'password'?: string | null;
}
/**
 * Config required if BEARER_TOKEN authentication is used. On response, this field is set to null as to not return secrets.
 * @export
 * @interface BearerTokenAuthConfigBeta
 */
export interface BearerTokenAuthConfigBeta {
    /**
     * Bearer token
     * @type {string}
     * @memberof BearerTokenAuthConfigBeta
     */
    'bearerToken'?: string | null;
}
/**
 * Before Provisioning Rule.
 * @export
 * @interface BeforeProvisioningRuleDtoBeta
 */
export interface BeforeProvisioningRuleDtoBeta {
    /**
     * Before Provisioning Rule DTO type.
     * @type {string}
     * @memberof BeforeProvisioningRuleDtoBeta
     */
    'type'?: BeforeProvisioningRuleDtoBetaTypeEnum;
    /**
     * Before Provisioning Rule ID.
     * @type {string}
     * @memberof BeforeProvisioningRuleDtoBeta
     */
    'id'?: string;
    /**
     * Rule display name.
     * @type {string}
     * @memberof BeforeProvisioningRuleDtoBeta
     */
    'name'?: string;
}
export declare const BeforeProvisioningRuleDtoBetaTypeEnum: {
    readonly Rule: "RULE";
};
export type BeforeProvisioningRuleDtoBetaTypeEnum = typeof BeforeProvisioningRuleDtoBetaTypeEnum[keyof typeof BeforeProvisioningRuleDtoBetaTypeEnum];
/**
 * Bulk response object.
 * @export
 * @interface BulkIdentitiesAccountsResponseBeta
 */
export interface BulkIdentitiesAccountsResponseBeta {
    /**
     * Identifier of bulk request item.
     * @type {string}
     * @memberof BulkIdentitiesAccountsResponseBeta
     */
    'id'?: string;
    /**
     * Response status value.
     * @type {number}
     * @memberof BulkIdentitiesAccountsResponseBeta
     */
    'statusCode'?: number;
    /**
     * Status containing additional context information about failures.
     * @type {string}
     * @memberof BulkIdentitiesAccountsResponseBeta
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface BulkTaggedObjectBeta
 */
export interface BulkTaggedObjectBeta {
    /**
     *
     * @type {Array<TaggedObjectDtoBeta>}
     * @memberof BulkTaggedObjectBeta
     */
    'objectRefs'?: Array<TaggedObjectDtoBeta>;
    /**
     * Label to be applied to object.
     * @type {Array<string>}
     * @memberof BulkTaggedObjectBeta
     */
    'tags'?: Array<string>;
    /**
     * If APPEND, tags are appended to the list of tags for the object. A 400 error is returned if this would add duplicate tags to the object.  If MERGE, tags are merged with the existing tags. Duplicate tags are silently ignored.
     * @type {string}
     * @memberof BulkTaggedObjectBeta
     */
    'operation'?: BulkTaggedObjectBetaOperationEnum;
}
export declare const BulkTaggedObjectBetaOperationEnum: {
    readonly Append: "APPEND";
    readonly Merge: "MERGE";
};
export type BulkTaggedObjectBetaOperationEnum = typeof BulkTaggedObjectBetaOperationEnum[keyof typeof BulkTaggedObjectBetaOperationEnum];
/**
 * Identity\'s basic details.
 * @export
 * @interface BulkWorkgroupMembersRequestInnerBeta
 */
export interface BulkWorkgroupMembersRequestInnerBeta {
    /**
     * Identity\'s DTO type.
     * @type {string}
     * @memberof BulkWorkgroupMembersRequestInnerBeta
     */
    'type'?: BulkWorkgroupMembersRequestInnerBetaTypeEnum;
    /**
     * Identity ID.
     * @type {string}
     * @memberof BulkWorkgroupMembersRequestInnerBeta
     */
    'id'?: string;
    /**
     * Identity\'s display name.
     * @type {string}
     * @memberof BulkWorkgroupMembersRequestInnerBeta
     */
    'name'?: string;
}
export declare const BulkWorkgroupMembersRequestInnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type BulkWorkgroupMembersRequestInnerBetaTypeEnum = typeof BulkWorkgroupMembersRequestInnerBetaTypeEnum[keyof typeof BulkWorkgroupMembersRequestInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface CampaignActivatedBeta
 */
export interface CampaignActivatedBeta {
    /**
     *
     * @type {CampaignActivatedCampaignBeta}
     * @memberof CampaignActivatedBeta
     */
    'campaign': CampaignActivatedCampaignBeta;
}
/**
 * Details about the certification campaign that was activated.
 * @export
 * @interface CampaignActivatedCampaignBeta
 */
export interface CampaignActivatedCampaignBeta {
    /**
     * Unique ID for the campaign.
     * @type {string}
     * @memberof CampaignActivatedCampaignBeta
     */
    'id': string;
    /**
     * The human friendly name of the campaign.
     * @type {string}
     * @memberof CampaignActivatedCampaignBeta
     */
    'name': string;
    /**
     * Extended description of the campaign.
     * @type {string}
     * @memberof CampaignActivatedCampaignBeta
     */
    'description': string;
    /**
     * The date and time the campaign was created.
     * @type {string}
     * @memberof CampaignActivatedCampaignBeta
     */
    'created': string;
    /**
     * The date and time the campaign was last modified.
     * @type {string}
     * @memberof CampaignActivatedCampaignBeta
     */
    'modified'?: string | null;
    /**
     * The date and time the campaign is due.
     * @type {string}
     * @memberof CampaignActivatedCampaignBeta
     */
    'deadline': string;
    /**
     * The type of campaign.
     * @type {object}
     * @memberof CampaignActivatedCampaignBeta
     */
    'type': CampaignActivatedCampaignBetaTypeEnum;
    /**
     *
     * @type {CampaignActivatedCampaignCampaignOwnerBeta}
     * @memberof CampaignActivatedCampaignBeta
     */
    'campaignOwner': CampaignActivatedCampaignCampaignOwnerBeta;
    /**
     * The current status of the campaign.
     * @type {object}
     * @memberof CampaignActivatedCampaignBeta
     */
    'status': CampaignActivatedCampaignBetaStatusEnum;
}
export declare const CampaignActivatedCampaignBetaTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type CampaignActivatedCampaignBetaTypeEnum = typeof CampaignActivatedCampaignBetaTypeEnum[keyof typeof CampaignActivatedCampaignBetaTypeEnum];
export declare const CampaignActivatedCampaignBetaStatusEnum: {
    readonly Active: "ACTIVE";
};
export type CampaignActivatedCampaignBetaStatusEnum = typeof CampaignActivatedCampaignBetaStatusEnum[keyof typeof CampaignActivatedCampaignBetaStatusEnum];
/**
 * Details of the identity that owns the campaign.
 * @export
 * @interface CampaignActivatedCampaignCampaignOwnerBeta
 */
export interface CampaignActivatedCampaignCampaignOwnerBeta {
    /**
     * The unique ID of the identity.
     * @type {string}
     * @memberof CampaignActivatedCampaignCampaignOwnerBeta
     */
    'id': string;
    /**
     * The human friendly name of the identity.
     * @type {string}
     * @memberof CampaignActivatedCampaignCampaignOwnerBeta
     */
    'displayName': string;
    /**
     * The primary email address of the identity.
     * @type {string}
     * @memberof CampaignActivatedCampaignCampaignOwnerBeta
     */
    'email': string;
}
/**
 *
 * @export
 * @interface CampaignAlertBeta
 */
export interface CampaignAlertBeta {
    /**
     * Denotes the level of the message
     * @type {string}
     * @memberof CampaignAlertBeta
     */
    'level'?: CampaignAlertBetaLevelEnum;
    /**
     *
     * @type {Array<ErrorMessageDtoBeta>}
     * @memberof CampaignAlertBeta
     */
    'localizations'?: Array<ErrorMessageDtoBeta>;
}
export declare const CampaignAlertBetaLevelEnum: {
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
};
export type CampaignAlertBetaLevelEnum = typeof CampaignAlertBetaLevelEnum[keyof typeof CampaignAlertBetaLevelEnum];
/**
 *
 * @export
 * @interface CampaignBeta
 */
export interface CampaignBeta {
    /**
     * Id of the campaign
     * @type {string}
     * @memberof CampaignBeta
     */
    'id'?: string;
    /**
     * The campaign name. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof CampaignBeta
     */
    'name': string;
    /**
     * The campaign description. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof CampaignBeta
     */
    'description': string;
    /**
     * The campaign\'s completion deadline.  This date must be in the future in order to activate the campaign.  If you try to activate a campaign with a deadline of today or in the past, you will receive a 400 error response.
     * @type {string}
     * @memberof CampaignBeta
     */
    'deadline'?: string;
    /**
     * The type of campaign. Could be extended in the future.
     * @type {string}
     * @memberof CampaignBeta
     */
    'type': CampaignBetaTypeEnum;
    /**
     * Enables email notification for this campaign
     * @type {boolean}
     * @memberof CampaignBeta
     */
    'emailNotificationEnabled'?: boolean;
    /**
     * Allows auto revoke for this campaign
     * @type {boolean}
     * @memberof CampaignBeta
     */
    'autoRevokeAllowed'?: boolean;
    /**
     * Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off then campaigns generated from this template will indicate false. The real value will then be returned if IAI is ever enabled for the org in the future.
     * @type {boolean}
     * @memberof CampaignBeta
     */
    'recommendationsEnabled'?: boolean;
    /**
     * The campaign\'s current status.
     * @type {string}
     * @memberof CampaignBeta
     */
    'status'?: CampaignBetaStatusEnum;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof CampaignBeta
     */
    'correlatedStatus'?: CampaignBetaCorrelatedStatusEnum;
    /**
     * Created time of the campaign
     * @type {string}
     * @memberof CampaignBeta
     */
    'created'?: string;
    /**
     * The total number of certifications in this campaign.
     * @type {number}
     * @memberof CampaignBeta
     */
    'totalCertifications'?: number;
    /**
     * The number of completed certifications in this campaign.
     * @type {number}
     * @memberof CampaignBeta
     */
    'completedCertifications'?: number;
    /**
     * A list of errors and warnings that have accumulated.
     * @type {Array<CampaignAlertBeta>}
     * @memberof CampaignBeta
     */
    'alerts'?: Array<CampaignAlertBeta>;
    /**
     * Modified time of the campaign
     * @type {string}
     * @memberof CampaignBeta
     */
    'modified'?: string;
    /**
     *
     * @type {FullcampaignAllOfFilterBeta}
     * @memberof CampaignBeta
     */
    'filter'?: FullcampaignAllOfFilterBeta;
    /**
     * Determines if comments on sunset date changes are required.
     * @type {boolean}
     * @memberof CampaignBeta
     */
    'sunsetCommentsRequired'?: boolean;
    /**
     *
     * @type {FullcampaignAllOfSourceOwnerCampaignInfoBeta}
     * @memberof CampaignBeta
     */
    'sourceOwnerCampaignInfo'?: FullcampaignAllOfSourceOwnerCampaignInfoBeta;
    /**
     *
     * @type {FullcampaignAllOfSearchCampaignInfoBeta}
     * @memberof CampaignBeta
     */
    'searchCampaignInfo'?: FullcampaignAllOfSearchCampaignInfoBeta;
    /**
     *
     * @type {FullcampaignAllOfRoleCompositionCampaignInfoBeta}
     * @memberof CampaignBeta
     */
    'roleCompositionCampaignInfo'?: FullcampaignAllOfRoleCompositionCampaignInfoBeta;
    /**
     * A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).
     * @type {Array<FullcampaignAllOfSourcesWithOrphanEntitlementsBeta>}
     * @memberof CampaignBeta
     */
    'sourcesWithOrphanEntitlements'?: Array<FullcampaignAllOfSourcesWithOrphanEntitlementsBeta>;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof CampaignBeta
     */
    'mandatoryCommentRequirement'?: CampaignBetaMandatoryCommentRequirementEnum;
}
export declare const CampaignBetaTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type CampaignBetaTypeEnum = typeof CampaignBetaTypeEnum[keyof typeof CampaignBetaTypeEnum];
export declare const CampaignBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Staged: "STAGED";
    readonly Canceling: "CANCELING";
    readonly Activating: "ACTIVATING";
    readonly Active: "ACTIVE";
    readonly Completing: "COMPLETING";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
    readonly Archived: "ARCHIVED";
};
export type CampaignBetaStatusEnum = typeof CampaignBetaStatusEnum[keyof typeof CampaignBetaStatusEnum];
export declare const CampaignBetaCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type CampaignBetaCorrelatedStatusEnum = typeof CampaignBetaCorrelatedStatusEnum[keyof typeof CampaignBetaCorrelatedStatusEnum];
export declare const CampaignBetaMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type CampaignBetaMandatoryCommentRequirementEnum = typeof CampaignBetaMandatoryCommentRequirementEnum[keyof typeof CampaignBetaMandatoryCommentRequirementEnum];
/**
 *
 * @export
 * @interface CampaignEndedBeta
 */
export interface CampaignEndedBeta {
    /**
     *
     * @type {CampaignEndedCampaignBeta}
     * @memberof CampaignEndedBeta
     */
    'campaign': CampaignEndedCampaignBeta;
}
/**
 * Details about the certification campaign that ended.
 * @export
 * @interface CampaignEndedCampaignBeta
 */
export interface CampaignEndedCampaignBeta {
    /**
     * Unique ID for the campaign.
     * @type {string}
     * @memberof CampaignEndedCampaignBeta
     */
    'id': string;
    /**
     * The human friendly name of the campaign.
     * @type {string}
     * @memberof CampaignEndedCampaignBeta
     */
    'name': string;
    /**
     * Extended description of the campaign.
     * @type {string}
     * @memberof CampaignEndedCampaignBeta
     */
    'description': string;
    /**
     * The date and time the campaign was created.
     * @type {string}
     * @memberof CampaignEndedCampaignBeta
     */
    'created': string;
    /**
     * The date and time the campaign was last modified.
     * @type {string}
     * @memberof CampaignEndedCampaignBeta
     */
    'modified'?: string | null;
    /**
     * The date and time the campaign is due.
     * @type {string}
     * @memberof CampaignEndedCampaignBeta
     */
    'deadline': string;
    /**
     * The type of campaign.
     * @type {object}
     * @memberof CampaignEndedCampaignBeta
     */
    'type': CampaignEndedCampaignBetaTypeEnum;
    /**
     *
     * @type {CampaignActivatedCampaignCampaignOwnerBeta}
     * @memberof CampaignEndedCampaignBeta
     */
    'campaignOwner': CampaignActivatedCampaignCampaignOwnerBeta;
    /**
     * The current status of the campaign.
     * @type {object}
     * @memberof CampaignEndedCampaignBeta
     */
    'status': CampaignEndedCampaignBetaStatusEnum;
}
export declare const CampaignEndedCampaignBetaTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type CampaignEndedCampaignBetaTypeEnum = typeof CampaignEndedCampaignBetaTypeEnum[keyof typeof CampaignEndedCampaignBetaTypeEnum];
export declare const CampaignEndedCampaignBetaStatusEnum: {
    readonly Completed: "COMPLETED";
};
export type CampaignEndedCampaignBetaStatusEnum = typeof CampaignEndedCampaignBetaStatusEnum[keyof typeof CampaignEndedCampaignBetaStatusEnum];
/**
 *
 * @export
 * @interface CampaignGeneratedBeta
 */
export interface CampaignGeneratedBeta {
    /**
     *
     * @type {CampaignGeneratedCampaignBeta}
     * @memberof CampaignGeneratedBeta
     */
    'campaign': CampaignGeneratedCampaignBeta;
}
/**
 * Details about the campaign that was generated.
 * @export
 * @interface CampaignGeneratedCampaignBeta
 */
export interface CampaignGeneratedCampaignBeta {
    /**
     * The unique ID of the campaign.
     * @type {string}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'id': string;
    /**
     * Human friendly name of the campaign.
     * @type {string}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'name': string;
    /**
     * Extended description of the campaign.
     * @type {string}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'description': string;
    /**
     * The date and time the campaign was created.
     * @type {string}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'created': string;
    /**
     * The date and time the campaign was last modified.
     * @type {string}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'modified'?: string | null;
    /**
     * The date and time when the campaign must be finished by.
     * @type {string}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'deadline'?: string | null;
    /**
     * The type of campaign that was generated.
     * @type {object}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'type': CampaignGeneratedCampaignBetaTypeEnum;
    /**
     *
     * @type {CampaignGeneratedCampaignCampaignOwnerBeta}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'campaignOwner': CampaignGeneratedCampaignCampaignOwnerBeta;
    /**
     * The current status of the campaign.
     * @type {object}
     * @memberof CampaignGeneratedCampaignBeta
     */
    'status': CampaignGeneratedCampaignBetaStatusEnum;
}
export declare const CampaignGeneratedCampaignBetaTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type CampaignGeneratedCampaignBetaTypeEnum = typeof CampaignGeneratedCampaignBetaTypeEnum[keyof typeof CampaignGeneratedCampaignBetaTypeEnum];
export declare const CampaignGeneratedCampaignBetaStatusEnum: {
    readonly Staged: "STAGED";
    readonly Activating: "ACTIVATING";
    readonly Active: "ACTIVE";
};
export type CampaignGeneratedCampaignBetaStatusEnum = typeof CampaignGeneratedCampaignBetaStatusEnum[keyof typeof CampaignGeneratedCampaignBetaStatusEnum];
/**
 * The identity that owns the campaign.
 * @export
 * @interface CampaignGeneratedCampaignCampaignOwnerBeta
 */
export interface CampaignGeneratedCampaignCampaignOwnerBeta {
    /**
     * The unique ID of the identity.
     * @type {string}
     * @memberof CampaignGeneratedCampaignCampaignOwnerBeta
     */
    'id': string;
    /**
     * The display name of the identity.
     * @type {string}
     * @memberof CampaignGeneratedCampaignCampaignOwnerBeta
     */
    'displayName': string;
    /**
     * The primary email address of the identity.
     * @type {string}
     * @memberof CampaignGeneratedCampaignCampaignOwnerBeta
     */
    'email': string;
}
/**
 *
 * @export
 * @interface CampaignReferenceBeta
 */
export interface CampaignReferenceBeta {
    /**
     * The unique ID of the campaign.
     * @type {string}
     * @memberof CampaignReferenceBeta
     */
    'id': string;
    /**
     * The name of the campaign.
     * @type {string}
     * @memberof CampaignReferenceBeta
     */
    'name': string;
    /**
     * The type of object that is being referenced.
     * @type {string}
     * @memberof CampaignReferenceBeta
     */
    'type': CampaignReferenceBetaTypeEnum;
    /**
     * The type of the campaign.
     * @type {string}
     * @memberof CampaignReferenceBeta
     */
    'campaignType': CampaignReferenceBetaCampaignTypeEnum;
    /**
     * The description of the campaign set by the admin who created it.
     * @type {string}
     * @memberof CampaignReferenceBeta
     */
    'description': string | null;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof CampaignReferenceBeta
     */
    'correlatedStatus': CampaignReferenceBetaCorrelatedStatusEnum;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof CampaignReferenceBeta
     */
    'mandatoryCommentRequirement': CampaignReferenceBetaMandatoryCommentRequirementEnum;
}
export declare const CampaignReferenceBetaTypeEnum: {
    readonly Campaign: "CAMPAIGN";
};
export type CampaignReferenceBetaTypeEnum = typeof CampaignReferenceBetaTypeEnum[keyof typeof CampaignReferenceBetaTypeEnum];
export declare const CampaignReferenceBetaCampaignTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
};
export type CampaignReferenceBetaCampaignTypeEnum = typeof CampaignReferenceBetaCampaignTypeEnum[keyof typeof CampaignReferenceBetaCampaignTypeEnum];
export declare const CampaignReferenceBetaCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type CampaignReferenceBetaCorrelatedStatusEnum = typeof CampaignReferenceBetaCorrelatedStatusEnum[keyof typeof CampaignReferenceBetaCorrelatedStatusEnum];
export declare const CampaignReferenceBetaMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type CampaignReferenceBetaMandatoryCommentRequirementEnum = typeof CampaignReferenceBetaMandatoryCommentRequirementEnum[keyof typeof CampaignReferenceBetaMandatoryCommentRequirementEnum];
/**
 *
 * @export
 * @interface CampaignReportAllOfBeta
 */
export interface CampaignReportAllOfBeta {
    /**
     *
     * @type {ReportTypeBeta}
     * @memberof CampaignReportAllOfBeta
     */
    'reportType'?: ReportTypeBeta;
    /**
     * The most recent date and time this report was run
     * @type {string}
     * @memberof CampaignReportAllOfBeta
     */
    'lastRunAt'?: string;
}
/**
 *
 * @export
 * @interface CampaignReportBeta
 */
export interface CampaignReportBeta {
    /**
     * SOD policy violation report result DTO type.
     * @type {string}
     * @memberof CampaignReportBeta
     */
    'type'?: CampaignReportBetaTypeEnum;
    /**
     * SOD policy violation report result ID.
     * @type {string}
     * @memberof CampaignReportBeta
     */
    'id'?: string;
    /**
     * Human-readable name of the SOD policy violation report result.
     * @type {string}
     * @memberof CampaignReportBeta
     */
    'name'?: string;
    /**
     * Status of a SOD policy violation report.
     * @type {string}
     * @memberof CampaignReportBeta
     */
    'status'?: CampaignReportBetaStatusEnum;
    /**
     *
     * @type {ReportTypeBeta}
     * @memberof CampaignReportBeta
     */
    'reportType': ReportTypeBeta;
    /**
     * The most recent date and time this report was run
     * @type {string}
     * @memberof CampaignReportBeta
     */
    'lastRunAt'?: string;
}
export declare const CampaignReportBetaTypeEnum: {
    readonly ReportResult: "REPORT_RESULT";
};
export type CampaignReportBetaTypeEnum = typeof CampaignReportBetaTypeEnum[keyof typeof CampaignReportBetaTypeEnum];
export declare const CampaignReportBetaStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
    readonly Pending: "PENDING";
};
export type CampaignReportBetaStatusEnum = typeof CampaignReportBetaStatusEnum[keyof typeof CampaignReportBetaStatusEnum];
/**
 *
 * @export
 * @interface CampaignReportsConfigBeta
 */
export interface CampaignReportsConfigBeta {
    /**
     * list of identity attribute columns
     * @type {Array<string>}
     * @memberof CampaignReportsConfigBeta
     */
    'identityAttributeColumns'?: Array<string> | null;
}
/**
 * Campaign Template
 * @export
 * @interface CampaignTemplateBeta
 */
export interface CampaignTemplateBeta {
    /**
     * Id of the campaign template
     * @type {string}
     * @memberof CampaignTemplateBeta
     */
    'id'?: string;
    /**
     * This template\'s name. Has no bearing on generated campaigns\' names.
     * @type {string}
     * @memberof CampaignTemplateBeta
     */
    'name': string;
    /**
     * This template\'s description. Has no bearing on generated campaigns\' descriptions.
     * @type {string}
     * @memberof CampaignTemplateBeta
     */
    'description': string;
    /**
     * Creation date of Campaign Template
     * @type {string}
     * @memberof CampaignTemplateBeta
     */
    'created': string;
    /**
     * Modification date of Campaign Template
     * @type {string}
     * @memberof CampaignTemplateBeta
     */
    'modified': string;
    /**
     * Indicates if this campaign template has been scheduled.
     * @type {boolean}
     * @memberof CampaignTemplateBeta
     */
    'scheduled'?: boolean;
    /**
     *
     * @type {CampaignTemplateOwnerRefBeta}
     * @memberof CampaignTemplateBeta
     */
    'ownerRef'?: CampaignTemplateOwnerRefBeta;
    /**
     * The time period during which the campaign should be completed, formatted as an ISO-8601 Duration. When this template generates a campaign, the campaign\'s deadline will be the current date plus this duration. For example, if generation occurred on 2020-01-01 and this field was \"P2W\" (two weeks), the resulting campaign\'s deadline would be 2020-01-15 (the current date plus 14 days).
     * @type {string}
     * @memberof CampaignTemplateBeta
     */
    'deadlineDuration'?: string;
    /**
     * This will hold campaign related information like name, description etc.
     * @type {CampaignBeta}
     * @memberof CampaignTemplateBeta
     */
    'campaign': CampaignBeta;
}
/**
 * The owner of this template, and the owner of campaigns generated from this template via a schedule. This field is automatically populated at creation time with the current user.
 * @export
 * @interface CampaignTemplateOwnerRefBeta
 */
export interface CampaignTemplateOwnerRefBeta {
    /**
     * Id of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRefBeta
     */
    'id'?: string;
    /**
     * Type of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRefBeta
     */
    'type'?: CampaignTemplateOwnerRefBetaTypeEnum;
    /**
     * Name of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRefBeta
     */
    'name'?: string;
    /**
     * Email of the owner
     * @type {string}
     * @memberof CampaignTemplateOwnerRefBeta
     */
    'email'?: string;
}
export declare const CampaignTemplateOwnerRefBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CampaignTemplateOwnerRefBetaTypeEnum = typeof CampaignTemplateOwnerRefBetaTypeEnum[keyof typeof CampaignTemplateOwnerRefBetaTypeEnum];
/**
 * Request body payload for cancel access request endpoint.
 * @export
 * @interface CancelAccessRequestBeta
 */
export interface CancelAccessRequestBeta {
    /**
     * This refers to the identityRequestId. To successfully cancel an access request, you must provide the identityRequestId.
     * @type {string}
     * @memberof CancelAccessRequestBeta
     */
    'accountActivityId': string;
    /**
     * Reason for cancelling the pending access request.
     * @type {string}
     * @memberof CancelAccessRequestBeta
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface CancelableAccountActivityBeta
 */
export interface CancelableAccountActivityBeta {
    /**
     * ID of the account activity itself
     * @type {string}
     * @memberof CancelableAccountActivityBeta
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof CancelableAccountActivityBeta
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof CancelableAccountActivityBeta
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof CancelableAccountActivityBeta
     */
    'modified'?: string | null;
    /**
     *
     * @type {string}
     * @memberof CancelableAccountActivityBeta
     */
    'completed'?: string | null;
    /**
     *
     * @type {CompletionStatusBeta}
     * @memberof CancelableAccountActivityBeta
     */
    'completionStatus'?: CompletionStatusBeta | null;
    /**
     *
     * @type {string}
     * @memberof CancelableAccountActivityBeta
     */
    'type'?: string | null;
    /**
     *
     * @type {IdentitySummaryBeta}
     * @memberof CancelableAccountActivityBeta
     */
    'requesterIdentitySummary'?: IdentitySummaryBeta | null;
    /**
     *
     * @type {IdentitySummaryBeta}
     * @memberof CancelableAccountActivityBeta
     */
    'targetIdentitySummary'?: IdentitySummaryBeta | null;
    /**
     *
     * @type {Array<string>}
     * @memberof CancelableAccountActivityBeta
     */
    'errors'?: Array<string> | null;
    /**
     *
     * @type {Array<string>}
     * @memberof CancelableAccountActivityBeta
     */
    'warnings'?: Array<string> | null;
    /**
     *
     * @type {Array<AccountActivityItemBeta>}
     * @memberof CancelableAccountActivityBeta
     */
    'items'?: Array<AccountActivityItemBeta> | null;
    /**
     *
     * @type {ExecutionStatusBeta}
     * @memberof CancelableAccountActivityBeta
     */
    'executionStatus'?: ExecutionStatusBeta;
    /**
     * Arbitrary key-value pairs, if any were included in the corresponding access request
     * @type {{ [key: string]: string; }}
     * @memberof CancelableAccountActivityBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
    /**
     * Whether the account activity can be canceled before completion
     * @type {boolean}
     * @memberof CancelableAccountActivityBeta
     */
    'cancelable'?: boolean;
    /**
     *
     * @type {CommentBeta}
     * @memberof CancelableAccountActivityBeta
     */
    'cancelComment'?: CommentBeta | null;
}
/**
 * Provides additional details for a request that has been cancelled.
 * @export
 * @interface CancelledRequestDetailsBeta
 */
export interface CancelledRequestDetailsBeta {
    /**
     * Comment made by the owner when cancelling the associated request.
     * @type {string}
     * @memberof CancelledRequestDetailsBeta
     */
    'comment'?: string;
    /**
     *
     * @type {OwnerDtoBeta}
     * @memberof CancelledRequestDetailsBeta
     */
    'owner'?: OwnerDtoBeta;
    /**
     * Date comment was added by the owner when cancelling the associated request.
     * @type {string}
     * @memberof CancelledRequestDetailsBeta
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface CertificationDtoBeta
 */
export interface CertificationDtoBeta {
    /**
     *
     * @type {CampaignReferenceBeta}
     * @memberof CertificationDtoBeta
     */
    'campaignRef': CampaignReferenceBeta;
    /**
     *
     * @type {CertificationPhaseBeta}
     * @memberof CertificationDtoBeta
     */
    'phase': CertificationPhaseBeta;
    /**
     * The due date of the certification.
     * @type {string}
     * @memberof CertificationDtoBeta
     */
    'due': string;
    /**
     * The date the reviewer signed off on the certification.
     * @type {string}
     * @memberof CertificationDtoBeta
     */
    'signed': string;
    /**
     *
     * @type {ReviewerBeta}
     * @memberof CertificationDtoBeta
     */
    'reviewer': ReviewerBeta;
    /**
     *
     * @type {ReassignmentBeta}
     * @memberof CertificationDtoBeta
     */
    'reassignment'?: ReassignmentBeta;
    /**
     * Indicates it the certification has any errors.
     * @type {boolean}
     * @memberof CertificationDtoBeta
     */
    'hasErrors': boolean;
    /**
     * A message indicating what the error is.
     * @type {string}
     * @memberof CertificationDtoBeta
     */
    'errorMessage'?: string | null;
    /**
     * Indicates if all certification decisions have been made.
     * @type {boolean}
     * @memberof CertificationDtoBeta
     */
    'completed': boolean;
    /**
     * The number of approve/revoke/acknowledge decisions that have been made by the reviewer.
     * @type {number}
     * @memberof CertificationDtoBeta
     */
    'decisionsMade': number;
    /**
     * The total number of approve/revoke/acknowledge decisions for the certification.
     * @type {number}
     * @memberof CertificationDtoBeta
     */
    'decisionsTotal': number;
    /**
     * The number of entities (identities, access profiles, roles, etc.) for which all decisions have been made and are complete.
     * @type {number}
     * @memberof CertificationDtoBeta
     */
    'entitiesCompleted': number;
    /**
     * The total number of entities (identities, access profiles, roles, etc.) in the certification, both complete and incomplete.
     * @type {number}
     * @memberof CertificationDtoBeta
     */
    'entitiesTotal': number;
}
/**
 * The current phase of the campaign. * `STAGED`: The campaign is waiting to be activated. * `ACTIVE`: The campaign is active. * `SIGNED`: The reviewer has signed off on the campaign, and it is considered complete.
 * @export
 * @enum {string}
 */
export declare const CertificationPhaseBeta: {
    readonly Staged: "STAGED";
    readonly Active: "ACTIVE";
    readonly Signed: "SIGNED";
};
export type CertificationPhaseBeta = typeof CertificationPhaseBeta[keyof typeof CertificationPhaseBeta];
/**
 *
 * @export
 * @interface CertificationReferenceAllOfBeta
 */
export interface CertificationReferenceAllOfBeta {
    /**
     *
     * @type {ReviewerBeta}
     * @memberof CertificationReferenceAllOfBeta
     */
    'reviewer'?: ReviewerBeta;
}
/**
 * Previous certification.
 * @export
 * @interface CertificationReferenceBeta
 */
export interface CertificationReferenceBeta {
    /**
     * DTO type of certification for review.
     * @type {string}
     * @memberof CertificationReferenceBeta
     */
    'type'?: CertificationReferenceBetaTypeEnum;
    /**
     * ID of certification for review.
     * @type {string}
     * @memberof CertificationReferenceBeta
     */
    'id'?: string;
    /**
     * Display name of certification for review.
     * @type {string}
     * @memberof CertificationReferenceBeta
     */
    'name'?: string;
    /**
     *
     * @type {ReviewerBeta}
     * @memberof CertificationReferenceBeta
     */
    'reviewer'?: ReviewerBeta;
}
export declare const CertificationReferenceBetaTypeEnum: {
    readonly Certification: "CERTIFICATION";
};
export type CertificationReferenceBetaTypeEnum = typeof CertificationReferenceBetaTypeEnum[keyof typeof CertificationReferenceBetaTypeEnum];
/**
 * Certification for review.
 * @export
 * @interface CertificationReferenceDtoBeta
 */
export interface CertificationReferenceDtoBeta {
    /**
     * DTO type of certification for review.
     * @type {string}
     * @memberof CertificationReferenceDtoBeta
     */
    'type'?: CertificationReferenceDtoBetaTypeEnum;
    /**
     * ID of certification for review.
     * @type {string}
     * @memberof CertificationReferenceDtoBeta
     */
    'id'?: string;
    /**
     * Display name of certification for review.
     * @type {string}
     * @memberof CertificationReferenceDtoBeta
     */
    'name'?: string;
}
export declare const CertificationReferenceDtoBetaTypeEnum: {
    readonly Certification: "CERTIFICATION";
};
export type CertificationReferenceDtoBetaTypeEnum = typeof CertificationReferenceDtoBetaTypeEnum[keyof typeof CertificationReferenceDtoBetaTypeEnum];
/**
 *
 * @export
 * @interface CertificationSignedOffBeta
 */
export interface CertificationSignedOffBeta {
    /**
     *
     * @type {CertificationSignedOffCertificationBeta}
     * @memberof CertificationSignedOffBeta
     */
    'certification': CertificationSignedOffCertificationBeta;
}
/**
 * The certification campaign that was signed off on.
 * @export
 * @interface CertificationSignedOffCertificationBeta
 */
export interface CertificationSignedOffCertificationBeta {
    /**
     * Unique ID of the certification.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'id': string;
    /**
     * The name of the certification.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'name': string;
    /**
     * The date and time the certification was created.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'created': string;
    /**
     * The date and time the certification was last modified.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'modified'?: string | null;
    /**
     *
     * @type {CampaignReferenceBeta}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'campaignRef': CampaignReferenceBeta;
    /**
     *
     * @type {CertificationPhaseBeta}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'phase': CertificationPhaseBeta;
    /**
     * The due date of the certification.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'due': string;
    /**
     * The date the reviewer signed off on the certification.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'signed': string;
    /**
     *
     * @type {ReviewerBeta}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'reviewer': ReviewerBeta;
    /**
     *
     * @type {ReassignmentBeta}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'reassignment'?: ReassignmentBeta;
    /**
     * Indicates it the certification has any errors.
     * @type {boolean}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'hasErrors': boolean;
    /**
     * A message indicating what the error is.
     * @type {string}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'errorMessage'?: string | null;
    /**
     * Indicates if all certification decisions have been made.
     * @type {boolean}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'completed': boolean;
    /**
     * The number of approve/revoke/acknowledge decisions that have been made by the reviewer.
     * @type {number}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'decisionsMade': number;
    /**
     * The total number of approve/revoke/acknowledge decisions for the certification.
     * @type {number}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'decisionsTotal': number;
    /**
     * The number of entities (identities, access profiles, roles, etc.) for which all decisions have been made and are complete.
     * @type {number}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'entitiesCompleted': number;
    /**
     * The total number of entities (identities, access profiles, roles, etc.) in the certification, both complete and incomplete.
     * @type {number}
     * @memberof CertificationSignedOffCertificationBeta
     */
    'entitiesTotal': number;
}
/**
 *
 * @export
 * @interface CertificationTaskBeta
 */
export interface CertificationTaskBeta {
    /**
     * The ID of the certification task.
     * @type {string}
     * @memberof CertificationTaskBeta
     */
    'id'?: string;
    /**
     * The type of the certification task. More values may be added in the future.
     * @type {string}
     * @memberof CertificationTaskBeta
     */
    'type'?: CertificationTaskBetaTypeEnum;
    /**
     * The type of item that is being operated on by this task whose ID is stored in the targetId field.
     * @type {string}
     * @memberof CertificationTaskBeta
     */
    'targetType'?: CertificationTaskBetaTargetTypeEnum;
    /**
     * The ID of the item being operated on by this task.
     * @type {string}
     * @memberof CertificationTaskBeta
     */
    'targetId'?: string;
    /**
     * The status of the task.
     * @type {string}
     * @memberof CertificationTaskBeta
     */
    'status'?: CertificationTaskBetaStatusEnum;
    /**
     *
     * @type {Array<ErrorMessageDtoBeta>}
     * @memberof CertificationTaskBeta
     */
    'errors'?: Array<ErrorMessageDtoBeta>;
    /**
     * The date and time on which this task was created.
     * @type {string}
     * @memberof CertificationTaskBeta
     */
    'created'?: string;
}
export declare const CertificationTaskBetaTypeEnum: {
    readonly Reassign: "REASSIGN";
    readonly AdminReassign: "ADMIN_REASSIGN";
    readonly CompleteCertification: "COMPLETE_CERTIFICATION";
    readonly FinishCertification: "FINISH_CERTIFICATION";
    readonly CompleteCampaign: "COMPLETE_CAMPAIGN";
    readonly ActivateCampaign: "ACTIVATE_CAMPAIGN";
    readonly CampaignCreate: "CAMPAIGN_CREATE";
    readonly CampaignDelete: "CAMPAIGN_DELETE";
};
export type CertificationTaskBetaTypeEnum = typeof CertificationTaskBetaTypeEnum[keyof typeof CertificationTaskBetaTypeEnum];
export declare const CertificationTaskBetaTargetTypeEnum: {
    readonly Certification: "CERTIFICATION";
    readonly Campaign: "CAMPAIGN";
};
export type CertificationTaskBetaTargetTypeEnum = typeof CertificationTaskBetaTargetTypeEnum[keyof typeof CertificationTaskBetaTargetTypeEnum];
export declare const CertificationTaskBetaStatusEnum: {
    readonly Queued: "QUEUED";
    readonly InProgress: "IN_PROGRESS";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type CertificationTaskBetaStatusEnum = typeof CertificationTaskBetaStatusEnum[keyof typeof CertificationTaskBetaStatusEnum];
/**
 *
 * @export
 * @interface CertifierResponseBeta
 */
export interface CertifierResponseBeta {
    /**
     * the id of the certifier
     * @type {string}
     * @memberof CertifierResponseBeta
     */
    'id'?: string;
    /**
     * the name of the certifier
     * @type {string}
     * @memberof CertifierResponseBeta
     */
    'displayName'?: string;
}
/**
 *
 * @export
 * @interface ChildrenBeta
 */
export interface ChildrenBeta {
    /**
     *
     * @type {string}
     * @memberof ChildrenBeta
     */
    'operator'?: string;
    /**
     *
     * @type {string}
     * @memberof ChildrenBeta
     */
    'attribute'?: string;
    /**
     *
     * @type {ValueBeta}
     * @memberof ChildrenBeta
     */
    'value'?: ValueBeta | null;
    /**
     *
     * @type {string}
     * @memberof ChildrenBeta
     */
    'children'?: string | null;
}
/**
 * Client Runtime Logging Configuration
 * @export
 * @interface ClientLogConfigurationBeta
 */
export interface ClientLogConfigurationBeta {
    /**
     * Log configuration\'s client ID
     * @type {string}
     * @memberof ClientLogConfigurationBeta
     */
    'clientId'?: string;
    /**
     * Duration in minutes for log configuration to remain in effect before resetting to defaults
     * @type {number}
     * @memberof ClientLogConfigurationBeta
     */
    'durationMinutes': number;
    /**
     * Expiration date-time of the log configuration request
     * @type {string}
     * @memberof ClientLogConfigurationBeta
     */
    'expiration'?: string;
    /**
     *
     * @type {StandardLevelBeta}
     * @memberof ClientLogConfigurationBeta
     */
    'rootLevel': StandardLevelBeta;
    /**
     * Mapping of identifiers to Standard Log Level values
     * @type {{ [key: string]: StandardLevelBeta; }}
     * @memberof ClientLogConfigurationBeta
     */
    'logLevels'?: {
        [key: string]: StandardLevelBeta;
    };
}
/**
 * Type of an API Client indicating public or confidentials use
 * @export
 * @enum {string}
 */
export declare const ClientTypeBeta: {
    readonly Confidential: "CONFIDENTIAL";
    readonly Public: "PUBLIC";
};
export type ClientTypeBeta = typeof ClientTypeBeta[keyof typeof ClientTypeBeta];
/**
 * Request body payload for close access requests endpoint.
 * @export
 * @interface CloseAccessRequestBeta
 */
export interface CloseAccessRequestBeta {
    /**
     * Access Request IDs for the requests to be closed. Accepts 1-500 Identity Request IDs per request.
     * @type {Array<string>}
     * @memberof CloseAccessRequestBeta
     */
    'accessRequestIds': Array<string>;
    /**
     * Reason for closing the access request. Displayed under Warnings in IdentityNow.
     * @type {string}
     * @memberof CloseAccessRequestBeta
     */
    'message'?: string;
    /**
     * The request\'s provisioning status. Displayed as Stage in IdentityNow.
     * @type {string}
     * @memberof CloseAccessRequestBeta
     */
    'executionStatus'?: CloseAccessRequestBetaExecutionStatusEnum;
    /**
     * The request\'s overall status. Displayed as Status in IdentityNow.
     * @type {string}
     * @memberof CloseAccessRequestBeta
     */
    'completionStatus'?: CloseAccessRequestBetaCompletionStatusEnum;
}
export declare const CloseAccessRequestBetaExecutionStatusEnum: {
    readonly Terminated: "Terminated";
    readonly Completed: "Completed";
};
export type CloseAccessRequestBetaExecutionStatusEnum = typeof CloseAccessRequestBetaExecutionStatusEnum[keyof typeof CloseAccessRequestBetaExecutionStatusEnum];
export declare const CloseAccessRequestBetaCompletionStatusEnum: {
    readonly Success: "Success";
    readonly Incomplete: "Incomplete";
    readonly Failure: "Failure";
};
export type CloseAccessRequestBetaCompletionStatusEnum = typeof CloseAccessRequestBetaCompletionStatusEnum[keyof typeof CloseAccessRequestBetaCompletionStatusEnum];
/**
 *
 * @export
 * @interface CommentBeta
 */
export interface CommentBeta {
    /**
     * Id of the identity making the comment
     * @type {string}
     * @memberof CommentBeta
     */
    'commenterId'?: string;
    /**
     * Human-readable display name of the identity making the comment
     * @type {string}
     * @memberof CommentBeta
     */
    'commenterName'?: string;
    /**
     * Content of the comment
     * @type {string}
     * @memberof CommentBeta
     */
    'body'?: string;
    /**
     * Date and time comment was made
     * @type {string}
     * @memberof CommentBeta
     */
    'date'?: string;
}
/**
 * Author of the comment
 * @export
 * @interface CommentDto1AuthorBeta
 */
export interface CommentDto1AuthorBeta {
    /**
     * The type of object
     * @type {string}
     * @memberof CommentDto1AuthorBeta
     */
    'type'?: CommentDto1AuthorBetaTypeEnum;
    /**
     * The unique ID of the object
     * @type {string}
     * @memberof CommentDto1AuthorBeta
     */
    'id'?: string;
    /**
     * The display name of the object
     * @type {string}
     * @memberof CommentDto1AuthorBeta
     */
    'name'?: string;
}
export declare const CommentDto1AuthorBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CommentDto1AuthorBetaTypeEnum = typeof CommentDto1AuthorBetaTypeEnum[keyof typeof CommentDto1AuthorBetaTypeEnum];
/**
 *
 * @export
 * @interface CommentDto1Beta
 */
export interface CommentDto1Beta {
    /**
     * Comment content.
     * @type {string}
     * @memberof CommentDto1Beta
     */
    'comment'?: string | null;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof CommentDto1Beta
     */
    'created'?: string;
    /**
     *
     * @type {CommentDto1AuthorBeta}
     * @memberof CommentDto1Beta
     */
    'author'?: CommentDto1AuthorBeta;
}
/**
 *
 * @export
 * @interface CommentDtoAuthorBeta
 */
export interface CommentDtoAuthorBeta {
    /**
     * DTO type of the commenting identity.
     * @type {string}
     * @memberof CommentDtoAuthorBeta
     */
    'type'?: CommentDtoAuthorBetaTypeEnum;
    /**
     * ID of the commenting identity.
     * @type {string}
     * @memberof CommentDtoAuthorBeta
     */
    'id'?: string;
    /**
     * Display name of the commenting identity.
     * @type {string}
     * @memberof CommentDtoAuthorBeta
     */
    'name'?: string;
}
export declare const CommentDtoAuthorBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CommentDtoAuthorBetaTypeEnum = typeof CommentDtoAuthorBetaTypeEnum[keyof typeof CommentDtoAuthorBetaTypeEnum];
/**
 *
 * @export
 * @interface CommentDtoBeta
 */
export interface CommentDtoBeta {
    /**
     * Comment content.
     * @type {string}
     * @memberof CommentDtoBeta
     */
    'comment'?: string | null;
    /**
     *
     * @type {CommentDtoAuthorBeta}
     * @memberof CommentDtoBeta
     */
    'author'?: CommentDtoAuthorBeta;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof CommentDtoBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface CommonAccessIDStatusBeta
 */
export interface CommonAccessIDStatusBeta {
    /**
     * List of confirmed common access ids.
     * @type {Array<string>}
     * @memberof CommonAccessIDStatusBeta
     */
    'confirmedIds'?: Array<string>;
    /**
     * List of denied common access ids.
     * @type {Array<string>}
     * @memberof CommonAccessIDStatusBeta
     */
    'deniedIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface CommonAccessItemAccessBeta
 */
export interface CommonAccessItemAccessBeta {
    /**
     * Common access ID
     * @type {string}
     * @memberof CommonAccessItemAccessBeta
     */
    'id'?: string;
    /**
     *
     * @type {CommonAccessTypeBeta}
     * @memberof CommonAccessItemAccessBeta
     */
    'type'?: CommonAccessTypeBeta;
    /**
     * Common access name
     * @type {string}
     * @memberof CommonAccessItemAccessBeta
     */
    'name'?: string;
    /**
     * Common access description
     * @type {string}
     * @memberof CommonAccessItemAccessBeta
     */
    'description'?: string | null;
    /**
     * Common access owner name
     * @type {string}
     * @memberof CommonAccessItemAccessBeta
     */
    'ownerName'?: string;
    /**
     * Common access owner ID
     * @type {string}
     * @memberof CommonAccessItemAccessBeta
     */
    'ownerId'?: string;
}
/**
 *
 * @export
 * @interface CommonAccessItemRequestBeta
 */
export interface CommonAccessItemRequestBeta {
    /**
     *
     * @type {CommonAccessItemAccessBeta}
     * @memberof CommonAccessItemRequestBeta
     */
    'access'?: CommonAccessItemAccessBeta;
    /**
     *
     * @type {CommonAccessItemStateBeta}
     * @memberof CommonAccessItemRequestBeta
     */
    'status'?: CommonAccessItemStateBeta;
}
/**
 *
 * @export
 * @interface CommonAccessItemResponseBeta
 */
export interface CommonAccessItemResponseBeta {
    /**
     * Common Access Item ID
     * @type {string}
     * @memberof CommonAccessItemResponseBeta
     */
    'id'?: string;
    /**
     *
     * @type {CommonAccessItemAccessBeta}
     * @memberof CommonAccessItemResponseBeta
     */
    'access'?: CommonAccessItemAccessBeta;
    /**
     *
     * @type {CommonAccessItemStateBeta}
     * @memberof CommonAccessItemResponseBeta
     */
    'status'?: CommonAccessItemStateBeta;
    /**
     *
     * @type {string}
     * @memberof CommonAccessItemResponseBeta
     */
    'lastUpdated'?: string;
    /**
     *
     * @type {boolean}
     * @memberof CommonAccessItemResponseBeta
     */
    'reviewedByUser'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CommonAccessItemResponseBeta
     */
    'lastReviewed'?: string;
    /**
     *
     * @type {string}
     * @memberof CommonAccessItemResponseBeta
     */
    'createdByUser'?: string;
}
/**
 * State of common access item.
 * @export
 * @enum {string}
 */
export declare const CommonAccessItemStateBeta: {
    readonly Confirmed: "CONFIRMED";
    readonly Denied: "DENIED";
};
export type CommonAccessItemStateBeta = typeof CommonAccessItemStateBeta[keyof typeof CommonAccessItemStateBeta];
/**
 *
 * @export
 * @interface CommonAccessResponseBeta
 */
export interface CommonAccessResponseBeta {
    /**
     * Unique ID of the common access item
     * @type {string}
     * @memberof CommonAccessResponseBeta
     */
    'id'?: string;
    /**
     *
     * @type {CommonAccessItemAccessBeta}
     * @memberof CommonAccessResponseBeta
     */
    'access'?: CommonAccessItemAccessBeta;
    /**
     * CONFIRMED or DENIED
     * @type {string}
     * @memberof CommonAccessResponseBeta
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof CommonAccessResponseBeta
     */
    'commonAccessType'?: string;
    /**
     *
     * @type {string}
     * @memberof CommonAccessResponseBeta
     */
    'lastUpdated'?: string;
    /**
     * true if user has confirmed or denied status
     * @type {boolean}
     * @memberof CommonAccessResponseBeta
     */
    'reviewedByUser'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CommonAccessResponseBeta
     */
    'lastReviewed'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof CommonAccessResponseBeta
     */
    'createdByUser'?: boolean;
}
/**
 * The type of access item.
 * @export
 * @enum {string}
 */
export declare const CommonAccessTypeBeta: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
};
export type CommonAccessTypeBeta = typeof CommonAccessTypeBeta[keyof typeof CommonAccessTypeBeta];
/**
 *
 * @export
 * @interface CompleteCampaignOptionsBeta
 */
export interface CompleteCampaignOptionsBeta {
    /**
     * Determines whether to auto-approve(APPROVE) or auto-revoke(REVOKE) upon campaign completion.
     * @type {string}
     * @memberof CompleteCampaignOptionsBeta
     */
    'autoCompleteAction'?: CompleteCampaignOptionsBetaAutoCompleteActionEnum;
}
export declare const CompleteCampaignOptionsBetaAutoCompleteActionEnum: {
    readonly Approve: "APPROVE";
    readonly Revoke: "REVOKE";
};
export type CompleteCampaignOptionsBetaAutoCompleteActionEnum = typeof CompleteCampaignOptionsBetaAutoCompleteActionEnum[keyof typeof CompleteCampaignOptionsBetaAutoCompleteActionEnum];
/**
 *
 * @export
 * @interface CompleteInvocationBeta
 */
export interface CompleteInvocationBeta {
    /**
     * Unique invocation secret that was generated when the invocation was created. Required to authenticate to the endpoint.
     * @type {string}
     * @memberof CompleteInvocationBeta
     */
    'secret': string;
    /**
     * The error message to indicate a failed invocation or error if any.
     * @type {string}
     * @memberof CompleteInvocationBeta
     */
    'error'?: string;
    /**
     * Trigger output to complete the invocation. Its schema is defined in the trigger definition.
     * @type {object}
     * @memberof CompleteInvocationBeta
     */
    'output': object;
}
/**
 *
 * @export
 * @interface CompleteInvocationInputBeta
 */
export interface CompleteInvocationInputBeta {
    /**
     *
     * @type {LocalizedMessageBeta}
     * @memberof CompleteInvocationInputBeta
     */
    'localizedError'?: LocalizedMessageBeta | null;
    /**
     * Trigger output that completed the invocation. Its schema is defined in the trigger definition.
     * @type {object}
     * @memberof CompleteInvocationInputBeta
     */
    'output'?: object | null;
}
/**
 *
 * @export
 * @interface CompletedApprovalBeta
 */
export interface CompletedApprovalBeta {
    /**
     * The approval id.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'id'?: string;
    /**
     * The name of the approval.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'name'?: string;
    /**
     * When the approval was created.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'created'?: string;
    /**
     * When the approval was modified last time.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'modified'?: string;
    /**
     * When the access-request was created.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'requestCreated'?: string;
    /**
     *
     * @type {AccessRequestTypeBeta}
     * @memberof CompletedApprovalBeta
     */
    'requestType'?: AccessRequestTypeBeta | null;
    /**
     *
     * @type {AccessItemRequesterDtoBeta}
     * @memberof CompletedApprovalBeta
     */
    'requester'?: AccessItemRequesterDtoBeta;
    /**
     *
     * @type {RequestedItemStatusRequestedForBeta}
     * @memberof CompletedApprovalBeta
     */
    'requestedFor'?: RequestedItemStatusRequestedForBeta;
    /**
     *
     * @type {CompletedApprovalReviewedByBeta}
     * @memberof CompletedApprovalBeta
     */
    'reviewedBy'?: CompletedApprovalReviewedByBeta;
    /**
     *
     * @type {AccessItemOwnerDtoBeta}
     * @memberof CompletedApprovalBeta
     */
    'owner'?: AccessItemOwnerDtoBeta;
    /**
     *
     * @type {RequestableObjectReferenceBeta}
     * @memberof CompletedApprovalBeta
     */
    'requestedObject'?: RequestableObjectReferenceBeta;
    /**
     *
     * @type {CommentDto1Beta}
     * @memberof CompletedApprovalBeta
     */
    'requesterComment'?: CommentDto1Beta;
    /**
     *
     * @type {CompletedApprovalReviewerCommentBeta}
     * @memberof CompletedApprovalBeta
     */
    'reviewerComment'?: CompletedApprovalReviewerCommentBeta | null;
    /**
     * The history of the previous reviewers comments.
     * @type {Array<CommentDto1Beta>}
     * @memberof CompletedApprovalBeta
     */
    'previousReviewersComments'?: Array<CommentDto1Beta>;
    /**
     * The history of approval forward action.
     * @type {Array<ApprovalForwardHistoryBeta>}
     * @memberof CompletedApprovalBeta
     */
    'forwardHistory'?: Array<ApprovalForwardHistoryBeta>;
    /**
     * When true the rejector has to provide comments when rejecting
     * @type {boolean}
     * @memberof CompletedApprovalBeta
     */
    'commentRequiredWhenRejected'?: boolean;
    /**
     *
     * @type {CompletedApprovalStateBeta}
     * @memberof CompletedApprovalBeta
     */
    'state'?: CompletedApprovalStateBeta;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'removeDate'?: string | null;
    /**
     * If true, then the request was to change the remove date or sunset date.
     * @type {boolean}
     * @memberof CompletedApprovalBeta
     */
    'removeDateUpdateRequested'?: boolean;
    /**
     * The remove date or sunset date that was assigned at the time of the request.
     * @type {string}
     * @memberof CompletedApprovalBeta
     */
    'currentRemoveDate'?: string | null;
    /**
     *
     * @type {SodViolationContextCheckCompleted1Beta}
     * @memberof CompletedApprovalBeta
     */
    'sodViolationContext'?: SodViolationContextCheckCompleted1Beta | null;
    /**
     *
     * @type {CompletedApprovalPreApprovalTriggerResultBeta}
     * @memberof CompletedApprovalBeta
     */
    'preApprovalTriggerResult'?: CompletedApprovalPreApprovalTriggerResultBeta | null;
    /**
     * Arbitrary key-value pairs provided during the request.
     * @type {{ [key: string]: string; }}
     * @memberof CompletedApprovalBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
}
/**
 * If the access request submitted event trigger is configured and this access request was intercepted by it, then this is the result of the trigger\'s decision to either approve or deny the request.
 * @export
 * @interface CompletedApprovalPreApprovalTriggerResultBeta
 */
export interface CompletedApprovalPreApprovalTriggerResultBeta {
    /**
     * The comment from the trigger
     * @type {string}
     * @memberof CompletedApprovalPreApprovalTriggerResultBeta
     */
    'comment'?: string;
    /**
     *
     * @type {CompletedApprovalStateBeta}
     * @memberof CompletedApprovalPreApprovalTriggerResultBeta
     */
    'decision'?: CompletedApprovalStateBeta;
    /**
     * The name of the approver
     * @type {string}
     * @memberof CompletedApprovalPreApprovalTriggerResultBeta
     */
    'reviewer'?: string;
    /**
     * The date and time the trigger decided on the request
     * @type {string}
     * @memberof CompletedApprovalPreApprovalTriggerResultBeta
     */
    'date'?: string;
}
/**
 * Identity who reviewed the access item request.
 * @export
 * @interface CompletedApprovalReviewedByBeta
 */
export interface CompletedApprovalReviewedByBeta {
    /**
     * DTO type of identity who reviewed the access item request.
     * @type {string}
     * @memberof CompletedApprovalReviewedByBeta
     */
    'type'?: CompletedApprovalReviewedByBetaTypeEnum;
    /**
     * ID of identity who reviewed the access item request.
     * @type {string}
     * @memberof CompletedApprovalReviewedByBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity who reviewed the access item request.
     * @type {string}
     * @memberof CompletedApprovalReviewedByBeta
     */
    'name'?: string;
}
export declare const CompletedApprovalReviewedByBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type CompletedApprovalReviewedByBetaTypeEnum = typeof CompletedApprovalReviewedByBetaTypeEnum[keyof typeof CompletedApprovalReviewedByBetaTypeEnum];
/**
 * The approval\'s reviewer\'s comment.
 * @export
 * @interface CompletedApprovalReviewerCommentBeta
 */
export interface CompletedApprovalReviewerCommentBeta {
    /**
     * Comment content.
     * @type {string}
     * @memberof CompletedApprovalReviewerCommentBeta
     */
    'comment'?: string | null;
    /**
     *
     * @type {CommentDtoAuthorBeta}
     * @memberof CompletedApprovalReviewerCommentBeta
     */
    'author'?: CommentDtoAuthorBeta;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof CompletedApprovalReviewerCommentBeta
     */
    'created'?: string;
}
/**
 * Enum represents completed approval object\'s state.
 * @export
 * @enum {string}
 */
export declare const CompletedApprovalStateBeta: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type CompletedApprovalStateBeta = typeof CompletedApprovalStateBeta[keyof typeof CompletedApprovalStateBeta];
/**
 * The status after completion.
 * @export
 * @enum {string}
 */
export declare const CompletionStatusBeta: {
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
    readonly Incomplete: "INCOMPLETE";
    readonly Pending: "PENDING";
    readonly Null: "null";
};
export type CompletionStatusBeta = typeof CompletionStatusBeta[keyof typeof CompletionStatusBeta];
/**
 *
 * @export
 * @interface ConcatenationBeta
 */
export interface ConcatenationBeta {
    /**
     * An array of items to join together
     * @type {Array<object>}
     * @memberof ConcatenationBeta
     */
    'values': Array<object>;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ConcatenationBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ConcatenationBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Effect produced by a condition.
 * @export
 * @interface ConditionEffectBeta
 */
export interface ConditionEffectBeta {
    /**
     * Type of effect to perform when the conditions are evaluated for this logic block. HIDE ConditionEffectTypeHide  Disables validations. SHOW ConditionEffectTypeShow  Enables validations. DISABLE ConditionEffectTypeDisable  Disables validations. ENABLE ConditionEffectTypeEnable  Enables validations. REQUIRE ConditionEffectTypeRequire OPTIONAL ConditionEffectTypeOptional SUBMIT_MESSAGE ConditionEffectTypeSubmitMessage SUBMIT_NOTIFICATION ConditionEffectTypeSubmitNotification SET_DEFAULT_VALUE ConditionEffectTypeSetDefaultValue  This value is ignored on purpose.
     * @type {string}
     * @memberof ConditionEffectBeta
     */
    'effectType'?: ConditionEffectBetaEffectTypeEnum;
    /**
     *
     * @type {ConditionEffectConfigBeta}
     * @memberof ConditionEffectBeta
     */
    'config'?: ConditionEffectConfigBeta;
}
export declare const ConditionEffectBetaEffectTypeEnum: {
    readonly Hide: "HIDE";
    readonly Show: "SHOW";
    readonly Disable: "DISABLE";
    readonly Enable: "ENABLE";
    readonly Require: "REQUIRE";
    readonly Optional: "OPTIONAL";
    readonly SubmitMessage: "SUBMIT_MESSAGE";
    readonly SubmitNotification: "SUBMIT_NOTIFICATION";
    readonly SetDefaultValue: "SET_DEFAULT_VALUE";
};
export type ConditionEffectBetaEffectTypeEnum = typeof ConditionEffectBetaEffectTypeEnum[keyof typeof ConditionEffectBetaEffectTypeEnum];
/**
 * Arbitrary map containing a configuration based on the EffectType.
 * @export
 * @interface ConditionEffectConfigBeta
 */
export interface ConditionEffectConfigBeta {
    /**
     * Effect type\'s label.
     * @type {string}
     * @memberof ConditionEffectConfigBeta
     */
    'defaultValueLabel'?: string;
    /**
     * Element\'s identifier.
     * @type {string}
     * @memberof ConditionEffectConfigBeta
     */
    'element'?: string;
}
/**
 *
 * @export
 * @interface ConditionRuleBeta
 */
export interface ConditionRuleBeta {
    /**
     * Defines the type of object being selected. It will be either a reference to a form input (by input name) or a form element (by technical key). INPUT ConditionRuleSourceTypeInput ELEMENT ConditionRuleSourceTypeElement
     * @type {string}
     * @memberof ConditionRuleBeta
     */
    'sourceType'?: ConditionRuleBetaSourceTypeEnum;
    /**
     * Source - if the sourceType is ConditionRuleSourceTypeInput, the source type is the name of the form input to accept. However, if the sourceType is ConditionRuleSourceTypeElement, the source is the name of a technical key of an element to retrieve its value.
     * @type {string}
     * @memberof ConditionRuleBeta
     */
    'source'?: string;
    /**
     * ConditionRuleComparisonOperatorType value. EQ ConditionRuleComparisonOperatorTypeEquals  This comparison operator compares the source and target for equality. NE ConditionRuleComparisonOperatorTypeNotEquals  This comparison operator compares the source and target for inequality. CO ConditionRuleComparisonOperatorTypeContains  This comparison operator searches the source to see whether it contains the value. NOT_CO ConditionRuleComparisonOperatorTypeNotContains IN ConditionRuleComparisonOperatorTypeIncludes  This comparison operator searches the source if it equals any of the values. NOT_IN ConditionRuleComparisonOperatorTypeNotIncludes EM ConditionRuleComparisonOperatorTypeEmpty NOT_EM ConditionRuleComparisonOperatorTypeNotEmpty SW ConditionRuleComparisonOperatorTypeStartsWith  Checks whether a string starts with another substring of the same string. This operator is case-sensitive. NOT_SW ConditionRuleComparisonOperatorTypeNotStartsWith EW ConditionRuleComparisonOperatorTypeEndsWith  Checks whether a string ends with another substring of the same string. This operator is case-sensitive. NOT_EW ConditionRuleComparisonOperatorTypeNotEndsWith
     * @type {string}
     * @memberof ConditionRuleBeta
     */
    'operator'?: ConditionRuleBetaOperatorEnum;
    /**
     * ConditionRuleValueType type. STRING ConditionRuleValueTypeString  This value is a static string. STRING_LIST ConditionRuleValueTypeStringList  This value is an array of string values. INPUT ConditionRuleValueTypeInput  This value is a reference to a form input. ELEMENT ConditionRuleValueTypeElement  This value is a reference to a form element (by technical key). LIST ConditionRuleValueTypeList BOOLEAN ConditionRuleValueTypeBoolean
     * @type {string}
     * @memberof ConditionRuleBeta
     */
    'valueType'?: ConditionRuleBetaValueTypeEnum;
    /**
     * Based on the ValueType.
     * @type {object}
     * @memberof ConditionRuleBeta
     */
    'value'?: object;
}
export declare const ConditionRuleBetaSourceTypeEnum: {
    readonly Input: "INPUT";
    readonly Element: "ELEMENT";
};
export type ConditionRuleBetaSourceTypeEnum = typeof ConditionRuleBetaSourceTypeEnum[keyof typeof ConditionRuleBetaSourceTypeEnum];
export declare const ConditionRuleBetaOperatorEnum: {
    readonly Eq: "EQ";
    readonly Ne: "NE";
    readonly Co: "CO";
    readonly NotCo: "NOT_CO";
    readonly In: "IN";
    readonly NotIn: "NOT_IN";
    readonly Em: "EM";
    readonly NotEm: "NOT_EM";
    readonly Sw: "SW";
    readonly NotSw: "NOT_SW";
    readonly Ew: "EW";
    readonly NotEw: "NOT_EW";
};
export type ConditionRuleBetaOperatorEnum = typeof ConditionRuleBetaOperatorEnum[keyof typeof ConditionRuleBetaOperatorEnum];
export declare const ConditionRuleBetaValueTypeEnum: {
    readonly String: "STRING";
    readonly StringList: "STRING_LIST";
    readonly Input: "INPUT";
    readonly Element: "ELEMENT";
    readonly List: "LIST";
    readonly Boolean: "BOOLEAN";
};
export type ConditionRuleBetaValueTypeEnum = typeof ConditionRuleBetaValueTypeEnum[keyof typeof ConditionRuleBetaValueTypeEnum];
/**
 *
 * @export
 * @interface ConditionalBeta
 */
export interface ConditionalBeta {
    /**
     * A comparison statement that follows the structure of `ValueA eq ValueB` where `ValueA` and `ValueB` are static strings or outputs of other transforms.   The `eq` operator is the only valid comparison
     * @type {string}
     * @memberof ConditionalBeta
     */
    'expression': string;
    /**
     * The output of the transform if the expression evalutes to true
     * @type {string}
     * @memberof ConditionalBeta
     */
    'positiveCondition': string;
    /**
     * The output of the transform if the expression evalutes to false
     * @type {string}
     * @memberof ConditionalBeta
     */
    'negativeCondition': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ConditionalBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ConditionalBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Config export and import format for individual object configurations.
 * @export
 * @interface ConfigObjectBeta
 */
export interface ConfigObjectBeta {
    /**
     * Current version of configuration object.
     * @type {number}
     * @memberof ConfigObjectBeta
     */
    'version'?: number;
    /**
     *
     * @type {SelfImportExportDtoBeta}
     * @memberof ConfigObjectBeta
     */
    'self'?: SelfImportExportDtoBeta;
    /**
     * Object details. Format dependant on the object type.
     * @type {{ [key: string]: any; }}
     * @memberof ConfigObjectBeta
     */
    'object'?: {
        [key: string]: any;
    };
}
/**
 * Type of Reassignment Configuration.
 * @export
 * @interface ConfigTypeBeta
 */
export interface ConfigTypeBeta {
    /**
     *
     * @type {number}
     * @memberof ConfigTypeBeta
     */
    'priority'?: number;
    /**
     *
     * @type {ConfigTypeEnumCamelBeta}
     * @memberof ConfigTypeBeta
     */
    'internalName'?: ConfigTypeEnumCamelBeta;
    /**
     *
     * @type {ConfigTypeEnumBeta}
     * @memberof ConfigTypeBeta
     */
    'internalNameCamel'?: ConfigTypeEnumBeta;
    /**
     * Human readable display name of the type to be shown on UI
     * @type {string}
     * @memberof ConfigTypeBeta
     */
    'displayName'?: string;
    /**
     * Description of the type of work to be reassigned, displayed by the UI.
     * @type {string}
     * @memberof ConfigTypeBeta
     */
    'description'?: string;
}
/**
 * Enum list of valid work types that can be selected for a Reassignment Configuration
 * @export
 * @enum {string}
 */
export declare const ConfigTypeEnumBeta: {
    readonly AccessRequests: "ACCESS_REQUESTS";
    readonly Certifications: "CERTIFICATIONS";
    readonly ManualTasks: "MANUAL_TASKS";
};
export type ConfigTypeEnumBeta = typeof ConfigTypeEnumBeta[keyof typeof ConfigTypeEnumBeta];
/**
 * Enum list of valid work types that can be selected for a Reassignment Configuration
 * @export
 * @enum {string}
 */
export declare const ConfigTypeEnumCamelBeta: {
    readonly AccessRequests: "accessRequests";
    readonly Certifications: "certifications";
    readonly ManualTasks: "manualTasks";
};
export type ConfigTypeEnumCamelBeta = typeof ConfigTypeEnumCamelBeta[keyof typeof ConfigTypeEnumCamelBeta];
/**
 * The request body of Reassignment Configuration Details for a specific identity and config type
 * @export
 * @interface ConfigurationDetailsResponseBeta
 */
export interface ConfigurationDetailsResponseBeta {
    /**
     *
     * @type {ConfigTypeEnumBeta}
     * @memberof ConfigurationDetailsResponseBeta
     */
    'configType'?: ConfigTypeEnumBeta;
    /**
     *
     * @type {Identity1Beta}
     * @memberof ConfigurationDetailsResponseBeta
     */
    'targetIdentity'?: Identity1Beta;
    /**
     * The date from which to start reassigning work items
     * @type {string}
     * @memberof ConfigurationDetailsResponseBeta
     */
    'startDate'?: string;
    /**
     * The date from which to stop reassigning work items.  If this is an empty string it indicates a permanent reassignment.
     * @type {string}
     * @memberof ConfigurationDetailsResponseBeta
     */
    'endDate'?: string;
    /**
     *
     * @type {AuditDetailsBeta}
     * @memberof ConfigurationDetailsResponseBeta
     */
    'auditDetails'?: AuditDetailsBeta;
}
/**
 * The request body for creation or update of a Reassignment Configuration for a single identity and work type
 * @export
 * @interface ConfigurationItemRequestBeta
 */
export interface ConfigurationItemRequestBeta {
    /**
     * The identity id to reassign an item from
     * @type {string}
     * @memberof ConfigurationItemRequestBeta
     */
    'reassignedFromId'?: string;
    /**
     * The identity id to reassign an item to
     * @type {string}
     * @memberof ConfigurationItemRequestBeta
     */
    'reassignedToId'?: string;
    /**
     *
     * @type {ConfigTypeEnumBeta}
     * @memberof ConfigurationItemRequestBeta
     */
    'configType'?: ConfigTypeEnumBeta;
    /**
     * The date from which to start reassigning work items
     * @type {string}
     * @memberof ConfigurationItemRequestBeta
     */
    'startDate'?: string;
    /**
     * The date from which to stop reassigning work items.  If this is an null string it indicates a permanent reassignment.
     * @type {string}
     * @memberof ConfigurationItemRequestBeta
     */
    'endDate'?: string | null;
}
/**
 * The response body of a Reassignment Configuration for a single identity
 * @export
 * @interface ConfigurationItemResponseBeta
 */
export interface ConfigurationItemResponseBeta {
    /**
     *
     * @type {Identity1Beta}
     * @memberof ConfigurationItemResponseBeta
     */
    'identity'?: Identity1Beta;
    /**
     * Details of how work should be reassigned for an Identity
     * @type {Array<ConfigurationDetailsResponseBeta>}
     * @memberof ConfigurationItemResponseBeta
     */
    'configDetails'?: Array<ConfigurationDetailsResponseBeta>;
}
/**
 * The response body of a Reassignment Configuration for a single identity
 * @export
 * @interface ConfigurationResponseBeta
 */
export interface ConfigurationResponseBeta {
    /**
     *
     * @type {Identity1Beta}
     * @memberof ConfigurationResponseBeta
     */
    'identity'?: Identity1Beta;
    /**
     * Details of how work should be reassigned for an Identity
     * @type {Array<ConfigurationDetailsResponseBeta>}
     * @memberof ConfigurationResponseBeta
     */
    'configDetails'?: Array<ConfigurationDetailsResponseBeta>;
}
/**
 *
 * @export
 * @interface ConflictingAccessCriteriaBeta
 */
export interface ConflictingAccessCriteriaBeta {
    /**
     *
     * @type {AccessCriteriaBeta}
     * @memberof ConflictingAccessCriteriaBeta
     */
    'leftCriteria'?: AccessCriteriaBeta;
    /**
     *
     * @type {AccessCriteriaBeta}
     * @memberof ConflictingAccessCriteriaBeta
     */
    'rightCriteria'?: AccessCriteriaBeta;
}
/**
 *
 * @export
 * @interface ConnectedObjectBeta
 */
export interface ConnectedObjectBeta {
    /**
     *
     * @type {ConnectedObjectTypeBeta}
     * @memberof ConnectedObjectBeta
     */
    'type'?: ConnectedObjectTypeBeta;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof ConnectedObjectBeta
     */
    'id'?: string;
    /**
     * Human-readable name of Connected object
     * @type {string}
     * @memberof ConnectedObjectBeta
     */
    'name'?: string;
    /**
     * Description of the Connected object.
     * @type {string}
     * @memberof ConnectedObjectBeta
     */
    'description'?: string;
}
/**
 * An enumeration of the types of Objects associated with a Governance Group. Supported object types are ACCESS_PROFILE, ROLE, SOD_POLICY and SOURCE.
 * @export
 * @enum {string}
 */
export declare const ConnectedObjectTypeBeta: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
};
export type ConnectedObjectTypeBeta = typeof ConnectedObjectTypeBeta[keyof typeof ConnectedObjectTypeBeta];
/**
 *
 * @export
 * @interface ConnectorDetailBeta
 */
export interface ConnectorDetailBeta {
    /**
     * The connector name
     * @type {string}
     * @memberof ConnectorDetailBeta
     */
    'name'?: string;
    /**
     * XML representation of the source config data
     * @type {string}
     * @memberof ConnectorDetailBeta
     */
    'sourceConfigXml'?: string;
    /**
     * JSON representation of the source config data
     * @type {string}
     * @memberof ConnectorDetailBeta
     */
    'sourceConfig'?: string;
    /**
     * true if the source is a direct connect source
     * @type {boolean}
     * @memberof ConnectorDetailBeta
     */
    'directConnect'?: boolean;
    /**
     * Connector config\'s file upload attribute, false if not there
     * @type {boolean}
     * @memberof ConnectorDetailBeta
     */
    'fileUpload'?: boolean;
    /**
     * List of uploaded file strings for the connector
     * @type {string}
     * @memberof ConnectorDetailBeta
     */
    'uploadedFiles'?: string;
    /**
     * Object containing metadata pertinent to the UI to be used
     * @type {object}
     * @memberof ConnectorDetailBeta
     */
    'connectorMetadata'?: object;
}
/**
 * ConnectorRuleCreateRequest
 * @export
 * @interface ConnectorRuleCreateRequestBeta
 */
export interface ConnectorRuleCreateRequestBeta {
    /**
     * the name of the rule
     * @type {string}
     * @memberof ConnectorRuleCreateRequestBeta
     */
    'name': string;
    /**
     * a description of the rule\'s purpose
     * @type {string}
     * @memberof ConnectorRuleCreateRequestBeta
     */
    'description'?: string;
    /**
     * the type of rule
     * @type {string}
     * @memberof ConnectorRuleCreateRequestBeta
     */
    'type': ConnectorRuleCreateRequestBetaTypeEnum;
    /**
     *
     * @type {ConnectorRuleCreateRequestSignatureBeta}
     * @memberof ConnectorRuleCreateRequestBeta
     */
    'signature'?: ConnectorRuleCreateRequestSignatureBeta;
    /**
     *
     * @type {SourceCodeBeta}
     * @memberof ConnectorRuleCreateRequestBeta
     */
    'sourceCode': SourceCodeBeta;
    /**
     * a map of string to objects
     * @type {object}
     * @memberof ConnectorRuleCreateRequestBeta
     */
    'attributes'?: object | null;
}
export declare const ConnectorRuleCreateRequestBetaTypeEnum: {
    readonly BuildMap: "BuildMap";
    readonly ConnectorAfterCreate: "ConnectorAfterCreate";
    readonly ConnectorAfterDelete: "ConnectorAfterDelete";
    readonly ConnectorAfterModify: "ConnectorAfterModify";
    readonly ConnectorBeforeCreate: "ConnectorBeforeCreate";
    readonly ConnectorBeforeDelete: "ConnectorBeforeDelete";
    readonly ConnectorBeforeModify: "ConnectorBeforeModify";
    readonly JdbcBuildMap: "JDBCBuildMap";
    readonly JdbcOperationProvisioning: "JDBCOperationProvisioning";
    readonly JdbcProvision: "JDBCProvision";
    readonly PeopleSoftHrmsBuildMap: "PeopleSoftHRMSBuildMap";
    readonly PeopleSoftHrmsOperationProvisioning: "PeopleSoftHRMSOperationProvisioning";
    readonly PeopleSoftHrmsProvision: "PeopleSoftHRMSProvision";
    readonly RacfPermissionCustomization: "RACFPermissionCustomization";
    readonly SapBuildMap: "SAPBuildMap";
    readonly SapHrManagerRule: "SapHrManagerRule";
    readonly SapHrOperationProvisioning: "SapHrOperationProvisioning";
    readonly SapHrProvision: "SapHrProvision";
    readonly SuccessFactorsOperationProvisioning: "SuccessFactorsOperationProvisioning";
    readonly WebServiceAfterOperationRule: "WebServiceAfterOperationRule";
    readonly WebServiceBeforeOperationRule: "WebServiceBeforeOperationRule";
};
export type ConnectorRuleCreateRequestBetaTypeEnum = typeof ConnectorRuleCreateRequestBetaTypeEnum[keyof typeof ConnectorRuleCreateRequestBetaTypeEnum];
/**
 * The rule\'s function signature. Describes the rule\'s input arguments and output (if any)
 * @export
 * @interface ConnectorRuleCreateRequestSignatureBeta
 */
export interface ConnectorRuleCreateRequestSignatureBeta {
    /**
     *
     * @type {Array<ArgumentBeta>}
     * @memberof ConnectorRuleCreateRequestSignatureBeta
     */
    'input': Array<ArgumentBeta>;
    /**
     *
     * @type {ArgumentBeta}
     * @memberof ConnectorRuleCreateRequestSignatureBeta
     */
    'output'?: ArgumentBeta | null;
}
/**
 *
 * @export
 * @interface ConnectorRuleResponseAllOfBeta
 */
export interface ConnectorRuleResponseAllOfBeta {
    /**
     * the ID of the rule
     * @type {string}
     * @memberof ConnectorRuleResponseAllOfBeta
     */
    'id': string;
    /**
     * an ISO 8601 UTC timestamp when this rule was created
     * @type {string}
     * @memberof ConnectorRuleResponseAllOfBeta
     */
    'created': string;
    /**
     * an ISO 8601 UTC timestamp when this rule was last modified
     * @type {string}
     * @memberof ConnectorRuleResponseAllOfBeta
     */
    'modified'?: string | null;
}
/**
 * ConnectorRuleResponse
 * @export
 * @interface ConnectorRuleResponseBeta
 */
export interface ConnectorRuleResponseBeta {
    /**
     * the name of the rule
     * @type {string}
     * @memberof ConnectorRuleResponseBeta
     */
    'name': string;
    /**
     * a description of the rule\'s purpose
     * @type {string}
     * @memberof ConnectorRuleResponseBeta
     */
    'description'?: string;
    /**
     * the type of rule
     * @type {string}
     * @memberof ConnectorRuleResponseBeta
     */
    'type': ConnectorRuleResponseBetaTypeEnum;
    /**
     *
     * @type {ConnectorRuleCreateRequestSignatureBeta}
     * @memberof ConnectorRuleResponseBeta
     */
    'signature'?: ConnectorRuleCreateRequestSignatureBeta;
    /**
     *
     * @type {SourceCodeBeta}
     * @memberof ConnectorRuleResponseBeta
     */
    'sourceCode': SourceCodeBeta;
    /**
     * a map of string to objects
     * @type {object}
     * @memberof ConnectorRuleResponseBeta
     */
    'attributes'?: object | null;
    /**
     * the ID of the rule
     * @type {string}
     * @memberof ConnectorRuleResponseBeta
     */
    'id': string;
    /**
     * an ISO 8601 UTC timestamp when this rule was created
     * @type {string}
     * @memberof ConnectorRuleResponseBeta
     */
    'created': string;
    /**
     * an ISO 8601 UTC timestamp when this rule was last modified
     * @type {string}
     * @memberof ConnectorRuleResponseBeta
     */
    'modified'?: string | null;
}
export declare const ConnectorRuleResponseBetaTypeEnum: {
    readonly BuildMap: "BuildMap";
    readonly ConnectorAfterCreate: "ConnectorAfterCreate";
    readonly ConnectorAfterDelete: "ConnectorAfterDelete";
    readonly ConnectorAfterModify: "ConnectorAfterModify";
    readonly ConnectorBeforeCreate: "ConnectorBeforeCreate";
    readonly ConnectorBeforeDelete: "ConnectorBeforeDelete";
    readonly ConnectorBeforeModify: "ConnectorBeforeModify";
    readonly JdbcBuildMap: "JDBCBuildMap";
    readonly JdbcOperationProvisioning: "JDBCOperationProvisioning";
    readonly JdbcProvision: "JDBCProvision";
    readonly PeopleSoftHrmsBuildMap: "PeopleSoftHRMSBuildMap";
    readonly PeopleSoftHrmsOperationProvisioning: "PeopleSoftHRMSOperationProvisioning";
    readonly PeopleSoftHrmsProvision: "PeopleSoftHRMSProvision";
    readonly RacfPermissionCustomization: "RACFPermissionCustomization";
    readonly SapBuildMap: "SAPBuildMap";
    readonly SapHrManagerRule: "SapHrManagerRule";
    readonly SapHrOperationProvisioning: "SapHrOperationProvisioning";
    readonly SapHrProvision: "SapHrProvision";
    readonly SuccessFactorsOperationProvisioning: "SuccessFactorsOperationProvisioning";
    readonly WebServiceAfterOperationRule: "WebServiceAfterOperationRule";
    readonly WebServiceBeforeOperationRule: "WebServiceBeforeOperationRule";
};
export type ConnectorRuleResponseBetaTypeEnum = typeof ConnectorRuleResponseBetaTypeEnum[keyof typeof ConnectorRuleResponseBetaTypeEnum];
/**
 *
 * @export
 * @interface ConnectorRuleUpdateRequestAllOfBeta
 */
export interface ConnectorRuleUpdateRequestAllOfBeta {
    /**
     * the ID of the rule to update
     * @type {string}
     * @memberof ConnectorRuleUpdateRequestAllOfBeta
     */
    'id': string;
}
/**
 * ConnectorRuleUpdateRequest
 * @export
 * @interface ConnectorRuleUpdateRequestBeta
 */
export interface ConnectorRuleUpdateRequestBeta {
    /**
     * the ID of the rule to update
     * @type {string}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'id': string;
    /**
     * the name of the rule
     * @type {string}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'name': string;
    /**
     * a description of the rule\'s purpose
     * @type {string}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'description'?: string;
    /**
     * the type of rule
     * @type {string}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'type': ConnectorRuleUpdateRequestBetaTypeEnum;
    /**
     *
     * @type {ConnectorRuleCreateRequestSignatureBeta}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'signature'?: ConnectorRuleCreateRequestSignatureBeta;
    /**
     *
     * @type {SourceCodeBeta}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'sourceCode': SourceCodeBeta;
    /**
     * a map of string to objects
     * @type {object}
     * @memberof ConnectorRuleUpdateRequestBeta
     */
    'attributes'?: object | null;
}
export declare const ConnectorRuleUpdateRequestBetaTypeEnum: {
    readonly BuildMap: "BuildMap";
    readonly ConnectorAfterCreate: "ConnectorAfterCreate";
    readonly ConnectorAfterDelete: "ConnectorAfterDelete";
    readonly ConnectorAfterModify: "ConnectorAfterModify";
    readonly ConnectorBeforeCreate: "ConnectorBeforeCreate";
    readonly ConnectorBeforeDelete: "ConnectorBeforeDelete";
    readonly ConnectorBeforeModify: "ConnectorBeforeModify";
    readonly JdbcBuildMap: "JDBCBuildMap";
    readonly JdbcOperationProvisioning: "JDBCOperationProvisioning";
    readonly JdbcProvision: "JDBCProvision";
    readonly PeopleSoftHrmsBuildMap: "PeopleSoftHRMSBuildMap";
    readonly PeopleSoftHrmsOperationProvisioning: "PeopleSoftHRMSOperationProvisioning";
    readonly PeopleSoftHrmsProvision: "PeopleSoftHRMSProvision";
    readonly RacfPermissionCustomization: "RACFPermissionCustomization";
    readonly SapBuildMap: "SAPBuildMap";
    readonly SapHrManagerRule: "SapHrManagerRule";
    readonly SapHrOperationProvisioning: "SapHrOperationProvisioning";
    readonly SapHrProvision: "SapHrProvision";
    readonly SuccessFactorsOperationProvisioning: "SuccessFactorsOperationProvisioning";
    readonly WebServiceAfterOperationRule: "WebServiceAfterOperationRule";
    readonly WebServiceBeforeOperationRule: "WebServiceBeforeOperationRule";
};
export type ConnectorRuleUpdateRequestBetaTypeEnum = typeof ConnectorRuleUpdateRequestBetaTypeEnum[keyof typeof ConnectorRuleUpdateRequestBetaTypeEnum];
/**
 * ConnectorRuleValidationResponse
 * @export
 * @interface ConnectorRuleValidationResponseBeta
 */
export interface ConnectorRuleValidationResponseBeta {
    /**
     *
     * @type {string}
     * @memberof ConnectorRuleValidationResponseBeta
     */
    'state': ConnectorRuleValidationResponseBetaStateEnum;
    /**
     *
     * @type {Array<ConnectorRuleValidationResponseDetailsInnerBeta>}
     * @memberof ConnectorRuleValidationResponseBeta
     */
    'details': Array<ConnectorRuleValidationResponseDetailsInnerBeta>;
}
export declare const ConnectorRuleValidationResponseBetaStateEnum: {
    readonly Ok: "OK";
    readonly Error: "ERROR";
};
export type ConnectorRuleValidationResponseBetaStateEnum = typeof ConnectorRuleValidationResponseBetaStateEnum[keyof typeof ConnectorRuleValidationResponseBetaStateEnum];
/**
 * CodeErrorDetail
 * @export
 * @interface ConnectorRuleValidationResponseDetailsInnerBeta
 */
export interface ConnectorRuleValidationResponseDetailsInnerBeta {
    /**
     * The line number where the issue occurred
     * @type {number}
     * @memberof ConnectorRuleValidationResponseDetailsInnerBeta
     */
    'line': number;
    /**
     * the column number where the issue occurred
     * @type {number}
     * @memberof ConnectorRuleValidationResponseDetailsInnerBeta
     */
    'column': number;
    /**
     * a description of the issue in the code
     * @type {string}
     * @memberof ConnectorRuleValidationResponseDetailsInnerBeta
     */
    'messsage'?: string;
}
/**
 *
 * @export
 * @interface ContextAttributeDtoBeta
 */
export interface ContextAttributeDtoBeta {
    /**
     * The name of the attribute
     * @type {string}
     * @memberof ContextAttributeDtoBeta
     */
    'attribute'?: string;
    /**
     *
     * @type {ContextAttributeDtoValueBeta}
     * @memberof ContextAttributeDtoBeta
     */
    'value'?: ContextAttributeDtoValueBeta;
    /**
     * True if the attribute was derived.
     * @type {boolean}
     * @memberof ContextAttributeDtoBeta
     */
    'derived'?: boolean;
}
/**
 * @type ContextAttributeDtoValueBeta
 * The value of the attribute.  This can be either a string or a multi-valued string
 * @export
 */
export type ContextAttributeDtoValueBeta = Array<string> | string;
/**
 *
 * @export
 * @interface CorrelatedGovernanceEventBeta
 */
export interface CorrelatedGovernanceEventBeta {
    /**
     * The name of the governance event, such as the certification name or access request ID.
     * @type {string}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'name'?: string;
    /**
     * The date that the certification or access request was completed.
     * @type {string}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'dt'?: string;
    /**
     * The type of governance event.
     * @type {string}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'type'?: CorrelatedGovernanceEventBetaTypeEnum;
    /**
     * The ID of the instance that caused the event - either the certification ID or access request ID.
     * @type {string}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'governanceId'?: string;
    /**
     * The owners of the governance event (the certifiers or approvers)
     * @type {Array<CertifierResponseBeta>}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'owners'?: Array<CertifierResponseBeta>;
    /**
     * The owners of the governance event (the certifiers or approvers), this field should be preferred over owners
     * @type {Array<CertifierResponseBeta>}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'reviewers'?: Array<CertifierResponseBeta>;
    /**
     *
     * @type {CertifierResponseBeta}
     * @memberof CorrelatedGovernanceEventBeta
     */
    'decisionMaker'?: CertifierResponseBeta;
}
export declare const CorrelatedGovernanceEventBetaTypeEnum: {
    readonly Certification: "certification";
    readonly AccessRequest: "accessRequest";
};
export type CorrelatedGovernanceEventBetaTypeEnum = typeof CorrelatedGovernanceEventBetaTypeEnum[keyof typeof CorrelatedGovernanceEventBetaTypeEnum];
/**
 * The attribute assignment of the correlation configuration.
 * @export
 * @interface CorrelationConfigAttributeAssignmentsInnerBeta
 */
export interface CorrelationConfigAttributeAssignmentsInnerBeta {
    /**
     * The property of the attribute assignment.
     * @type {string}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'property'?: string;
    /**
     * The value of the attribute assignment.
     * @type {string}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'value'?: string;
    /**
     * The operation of the attribute assignment.
     * @type {string}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'operation'?: CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum;
    /**
     * Whether or not the it\'s a complex attribute assignment.
     * @type {boolean}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'complex'?: boolean;
    /**
     * Whether or not the attribute assignment should ignore case.
     * @type {boolean}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'ignoreCase'?: boolean;
    /**
     * The match mode of the attribute assignment.
     * @type {string}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'matchMode'?: CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum;
    /**
     * The filter string of the attribute assignment.
     * @type {string}
     * @memberof CorrelationConfigAttributeAssignmentsInnerBeta
     */
    'filterString'?: string;
}
export declare const CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum: {
    readonly Eq: "EQ";
};
export type CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum = typeof CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum[keyof typeof CorrelationConfigAttributeAssignmentsInnerBetaOperationEnum];
export declare const CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum: {
    readonly Anywhere: "ANYWHERE";
    readonly Start: "START";
    readonly End: "END";
};
export type CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum = typeof CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum[keyof typeof CorrelationConfigAttributeAssignmentsInnerBetaMatchModeEnum];
/**
 * Source configuration information that is used by correlation process.
 * @export
 * @interface CorrelationConfigBeta
 */
export interface CorrelationConfigBeta {
    /**
     * The ID of the correlation configuration.
     * @type {string}
     * @memberof CorrelationConfigBeta
     */
    'id'?: string;
    /**
     * The name of the correlation configuration.
     * @type {string}
     * @memberof CorrelationConfigBeta
     */
    'name'?: string;
    /**
     * The list of attribute assignments of the correlation configuration.
     * @type {Array<CorrelationConfigAttributeAssignmentsInnerBeta>}
     * @memberof CorrelationConfigBeta
     */
    'attributeAssignments'?: Array<CorrelationConfigAttributeAssignmentsInnerBeta>;
}
/**
 *
 * @export
 * @interface CreateDomainDkim405ResponseBeta
 */
export interface CreateDomainDkim405ResponseBeta {
    /**
     * A message describing the error
     * @type {object}
     * @memberof CreateDomainDkim405ResponseBeta
     */
    'errorName'?: object;
    /**
     * Description of the error
     * @type {object}
     * @memberof CreateDomainDkim405ResponseBeta
     */
    'errorMessage'?: object;
    /**
     * Unique tracking id for the error.
     * @type {string}
     * @memberof CreateDomainDkim405ResponseBeta
     */
    'trackingId'?: string;
}
/**
 *
 * @export
 * @interface CreateFormDefinitionFileRequestRequestBeta
 */
export interface CreateFormDefinitionFileRequestRequestBeta {
    /**
     * File specifying the multipart
     * @type {any}
     * @memberof CreateFormDefinitionFileRequestRequestBeta
     */
    'file': any;
}
/**
 *
 * @export
 * @interface CreateFormDefinitionRequestBeta
 */
export interface CreateFormDefinitionRequestBeta {
    /**
     * Description is the form definition description
     * @type {string}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'description'?: string;
    /**
     * FormConditions is the conditional logic that modify the form dynamically modify the form as the recipient is interacting out the form
     * @type {Array<FormConditionBeta>}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'formConditions'?: Array<FormConditionBeta>;
    /**
     * FormElements is a list of nested form elements
     * @type {Array<FormElementBeta>}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'formElements'?: Array<FormElementBeta>;
    /**
     * FormInput is a list of form inputs that are required when creating a form-instance object
     * @type {Array<FormDefinitionInputBeta>}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'formInput'?: Array<FormDefinitionInputBeta>;
    /**
     * Name is the form definition name
     * @type {string}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'name': string;
    /**
     *
     * @type {FormOwnerBeta}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'owner': FormOwnerBeta;
    /**
     * UsedBy is a list of objects where when any system uses a particular form it reaches out to the form service to record it is currently being used
     * @type {Array<FormUsedByBeta>}
     * @memberof CreateFormDefinitionRequestBeta
     */
    'usedBy'?: Array<FormUsedByBeta>;
}
/**
 *
 * @export
 * @interface CreateFormInstanceRequestBeta
 */
export interface CreateFormInstanceRequestBeta {
    /**
     *
     * @type {FormInstanceCreatedByBeta}
     * @memberof CreateFormInstanceRequestBeta
     */
    'createdBy': FormInstanceCreatedByBeta;
    /**
     * Expire is required
     * @type {string}
     * @memberof CreateFormInstanceRequestBeta
     */
    'expire': string;
    /**
     * FormDefinitionID is the id of the form definition that created this form
     * @type {string}
     * @memberof CreateFormInstanceRequestBeta
     */
    'formDefinitionId': string;
    /**
     * FormInput is an object of form input labels to value
     * @type {{ [key: string]: any; }}
     * @memberof CreateFormInstanceRequestBeta
     */
    'formInput'?: {
        [key: string]: any;
    };
    /**
     * Recipients is required
     * @type {Array<FormInstanceRecipientBeta>}
     * @memberof CreateFormInstanceRequestBeta
     */
    'recipients': Array<FormInstanceRecipientBeta>;
    /**
     * StandAloneForm is a boolean flag to indicate if this form should be available for users to complete via the standalone form UI or should this only be available to be completed by as an embedded form
     * @type {boolean}
     * @memberof CreateFormInstanceRequestBeta
     */
    'standAloneForm'?: boolean;
    /**
     * State is required, if not present initial state is FormInstanceStateAssigned ASSIGNED FormInstanceStateAssigned IN_PROGRESS FormInstanceStateInProgress SUBMITTED FormInstanceStateSubmitted COMPLETED FormInstanceStateCompleted CANCELLED FormInstanceStateCancelled
     * @type {string}
     * @memberof CreateFormInstanceRequestBeta
     */
    'state'?: CreateFormInstanceRequestBetaStateEnum;
    /**
     * TTL an epoch timestamp in seconds, it most be in seconds or dynamodb will ignore it SEE: https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/time-to-live-ttl-before-you-start.html
     * @type {number}
     * @memberof CreateFormInstanceRequestBeta
     */
    'ttl'?: number;
}
export declare const CreateFormInstanceRequestBetaStateEnum: {
    readonly Assigned: "ASSIGNED";
    readonly InProgress: "IN_PROGRESS";
    readonly Submitted: "SUBMITTED";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
};
export type CreateFormInstanceRequestBetaStateEnum = typeof CreateFormInstanceRequestBetaStateEnum[keyof typeof CreateFormInstanceRequestBetaStateEnum];
/**
 *
 * @export
 * @interface CreateOAuthClientRequestBeta
 */
export interface CreateOAuthClientRequestBeta {
    /**
     * The name of the business the API Client should belong to
     * @type {string}
     * @memberof CreateOAuthClientRequestBeta
     */
    'businessName'?: string | null;
    /**
     * The homepage URL associated with the owner of the API Client
     * @type {string}
     * @memberof CreateOAuthClientRequestBeta
     */
    'homepageUrl'?: string | null;
    /**
     * A human-readable name for the API Client
     * @type {string}
     * @memberof CreateOAuthClientRequestBeta
     */
    'name': string | null;
    /**
     * A description of the API Client
     * @type {string}
     * @memberof CreateOAuthClientRequestBeta
     */
    'description': string | null;
    /**
     * The number of seconds an access token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientRequestBeta
     */
    'accessTokenValiditySeconds': number;
    /**
     * The number of seconds a refresh token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientRequestBeta
     */
    'refreshTokenValiditySeconds'?: number;
    /**
     * A list of the approved redirect URIs. Provide one or more URIs when assigning the AUTHORIZATION_CODE grant type to a new OAuth Client.
     * @type {Array<string>}
     * @memberof CreateOAuthClientRequestBeta
     */
    'redirectUris'?: Array<string> | null;
    /**
     * A list of OAuth 2.0 grant types this API Client can be used with
     * @type {Array<GrantTypeBeta>}
     * @memberof CreateOAuthClientRequestBeta
     */
    'grantTypes': Array<GrantTypeBeta> | null;
    /**
     *
     * @type {AccessTypeBeta}
     * @memberof CreateOAuthClientRequestBeta
     */
    'accessType': AccessTypeBeta;
    /**
     *
     * @type {ClientTypeBeta}
     * @memberof CreateOAuthClientRequestBeta
     */
    'type'?: ClientTypeBeta;
    /**
     * An indicator of whether the API Client can be used for requests internal within the product.
     * @type {boolean}
     * @memberof CreateOAuthClientRequestBeta
     */
    'internal'?: boolean;
    /**
     * An indicator of whether the API Client is enabled for use
     * @type {boolean}
     * @memberof CreateOAuthClientRequestBeta
     */
    'enabled': boolean;
    /**
     * An indicator of whether the API Client supports strong authentication
     * @type {boolean}
     * @memberof CreateOAuthClientRequestBeta
     */
    'strongAuthSupported'?: boolean;
    /**
     * An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow
     * @type {boolean}
     * @memberof CreateOAuthClientRequestBeta
     */
    'claimsSupported'?: boolean;
    /**
     * Scopes of the API Client. If no scope is specified, the client will be created with the default scope \"sp:scopes:all\". This means the API Client will have all the rights of the owner who created it.
     * @type {Array<string>}
     * @memberof CreateOAuthClientRequestBeta
     */
    'scope'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface CreateOAuthClientResponseBeta
 */
export interface CreateOAuthClientResponseBeta {
    /**
     * ID of the OAuth client
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'id': string;
    /**
     * Secret of the OAuth client (This field is only returned on the intial create call.)
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'secret': string;
    /**
     * The name of the business the API Client should belong to
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'businessName': string;
    /**
     * The homepage URL associated with the owner of the API Client
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'homepageUrl': string;
    /**
     * A human-readable name for the API Client
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'name': string;
    /**
     * A description of the API Client
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'description': string;
    /**
     * The number of seconds an access token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientResponseBeta
     */
    'accessTokenValiditySeconds': number;
    /**
     * The number of seconds a refresh token generated for this API Client is valid for
     * @type {number}
     * @memberof CreateOAuthClientResponseBeta
     */
    'refreshTokenValiditySeconds': number;
    /**
     * A list of the approved redirect URIs used with the authorization_code flow
     * @type {Array<string>}
     * @memberof CreateOAuthClientResponseBeta
     */
    'redirectUris': Array<string>;
    /**
     * A list of OAuth 2.0 grant types this API Client can be used with
     * @type {Array<GrantTypeBeta>}
     * @memberof CreateOAuthClientResponseBeta
     */
    'grantTypes': Array<GrantTypeBeta>;
    /**
     *
     * @type {AccessTypeBeta}
     * @memberof CreateOAuthClientResponseBeta
     */
    'accessType': AccessTypeBeta;
    /**
     *
     * @type {ClientTypeBeta}
     * @memberof CreateOAuthClientResponseBeta
     */
    'type': ClientTypeBeta;
    /**
     * An indicator of whether the API Client can be used for requests internal to IDN
     * @type {boolean}
     * @memberof CreateOAuthClientResponseBeta
     */
    'internal': boolean;
    /**
     * An indicator of whether the API Client is enabled for use
     * @type {boolean}
     * @memberof CreateOAuthClientResponseBeta
     */
    'enabled': boolean;
    /**
     * An indicator of whether the API Client supports strong authentication
     * @type {boolean}
     * @memberof CreateOAuthClientResponseBeta
     */
    'strongAuthSupported': boolean;
    /**
     * An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow
     * @type {boolean}
     * @memberof CreateOAuthClientResponseBeta
     */
    'claimsSupported': boolean;
    /**
     * The date and time, down to the millisecond, when the API Client was created
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'created': string;
    /**
     * The date and time, down to the millisecond, when the API Client was last updated
     * @type {string}
     * @memberof CreateOAuthClientResponseBeta
     */
    'modified': string;
    /**
     * Scopes of the API Client.
     * @type {Array<string>}
     * @memberof CreateOAuthClientResponseBeta
     */
    'scope': Array<string> | null;
}
/**
 * Object for specifying the name of a personal access token to create
 * @export
 * @interface CreatePersonalAccessTokenRequestBeta
 */
export interface CreatePersonalAccessTokenRequestBeta {
    /**
     * The name of the personal access token (PAT) to be created. Cannot be the same as another PAT owned by the user for whom this PAT is being created.
     * @type {string}
     * @memberof CreatePersonalAccessTokenRequestBeta
     */
    'name': string;
    /**
     * Scopes of the personal access token. If no scope is specified, the token will be created with the default scope \"sp:scopes:all\". This means the personal access token will have all the rights of the owner who created it.
     * @type {Array<string>}
     * @memberof CreatePersonalAccessTokenRequestBeta
     */
    'scope'?: Array<string> | null;
}
/**
 *
 * @export
 * @interface CreatePersonalAccessTokenResponseBeta
 */
export interface CreatePersonalAccessTokenResponseBeta {
    /**
     * The ID of the personal access token (to be used as the username for Basic Auth).
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponseBeta
     */
    'id': string;
    /**
     * The secret of the personal access token (to be used as the password for Basic Auth).
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponseBeta
     */
    'secret': string;
    /**
     * Scopes of the personal  access token.
     * @type {Array<string>}
     * @memberof CreatePersonalAccessTokenResponseBeta
     */
    'scope': Array<string> | null;
    /**
     * The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponseBeta
     */
    'name': string;
    /**
     *
     * @type {PatOwnerBeta}
     * @memberof CreatePersonalAccessTokenResponseBeta
     */
    'owner': PatOwnerBeta;
    /**
     * The date and time, down to the millisecond, when this personal access token was created.
     * @type {string}
     * @memberof CreatePersonalAccessTokenResponseBeta
     */
    'created': string;
}
/**
 *
 * @export
 * @interface CreateWorkflowRequestBeta
 */
export interface CreateWorkflowRequestBeta {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof CreateWorkflowRequestBeta
     */
    'name': string;
    /**
     *
     * @type {WorkflowBodyOwnerBeta}
     * @memberof CreateWorkflowRequestBeta
     */
    'owner': WorkflowBodyOwnerBeta;
    /**
     * Description of what the workflow accomplishes
     * @type {string}
     * @memberof CreateWorkflowRequestBeta
     */
    'description'?: string;
    /**
     *
     * @type {WorkflowDefinitionBeta}
     * @memberof CreateWorkflowRequestBeta
     */
    'definition'?: WorkflowDefinitionBeta;
    /**
     * Enable or disable the workflow.  Workflows cannot be created in an enabled state.
     * @type {boolean}
     * @memberof CreateWorkflowRequestBeta
     */
    'enabled'?: boolean;
    /**
     *
     * @type {WorkflowTriggerBeta}
     * @memberof CreateWorkflowRequestBeta
     */
    'trigger'?: WorkflowTriggerBeta;
}
/**
 *
 * @export
 * @interface CustomPasswordInstructionBeta
 */
export interface CustomPasswordInstructionBeta {
    /**
     * The page ID that represents the page for forget user name, reset password and unlock account flow.
     * @type {string}
     * @memberof CustomPasswordInstructionBeta
     */
    'pageId'?: CustomPasswordInstructionBetaPageIdEnum;
    /**
     * The custom instructions for the specified page. Allow basic HTML format and maximum length is 1000 characters. The custom instructions will be sanitized to avoid attacks. If the customization text includes a link, like <A HREF=\\\"URL\\\">...</A> clicking on this will open the link on the current browser page. If you want your link to be redirected to a different page, please redirect it to \"_blank\" like this: <a href=\\\"URL\" target=\\\"_blank\\\" >link</a>. This will open a new tab when the link is clicked. Notice we\'re only supporting _blank as the redirection target.
     * @type {string}
     * @memberof CustomPasswordInstructionBeta
     */
    'pageContent'?: string;
    /**
     * The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\".
     * @type {string}
     * @memberof CustomPasswordInstructionBeta
     */
    'locale'?: string;
}
export declare const CustomPasswordInstructionBetaPageIdEnum: {
    readonly ChangePasswordenterPassword: "change-password:enter-password";
    readonly ChangePasswordfinish: "change-password:finish";
    readonly FlowSelectionselect: "flow-selection:select";
    readonly ForgetUsernameuserEmail: "forget-username:user-email";
    readonly MfaenterCode: "mfa:enter-code";
    readonly MfaenterKba: "mfa:enter-kba";
    readonly Mfaselect: "mfa:select";
    readonly ResetPasswordenterPassword: "reset-password:enter-password";
    readonly ResetPasswordenterUsername: "reset-password:enter-username";
    readonly ResetPasswordfinish: "reset-password:finish";
    readonly UnlockAccountenterUsername: "unlock-account:enter-username";
    readonly UnlockAccountfinish: "unlock-account:finish";
};
export type CustomPasswordInstructionBetaPageIdEnum = typeof CustomPasswordInstructionBetaPageIdEnum[keyof typeof CustomPasswordInstructionBetaPageIdEnum];
/**
 *
 * @export
 * @interface DateCompareBeta
 */
export interface DateCompareBeta {
    /**
     *
     * @type {DateCompareFirstDateBeta}
     * @memberof DateCompareBeta
     */
    'firstDate': DateCompareFirstDateBeta;
    /**
     *
     * @type {DateCompareSecondDateBeta}
     * @memberof DateCompareBeta
     */
    'secondDate': DateCompareSecondDateBeta;
    /**
     * This is the comparison to perform. | Operation | Description | | --------- | ------- | | LT        | Strictly less than: firstDate < secondDate | | LTE       | Less than or equal to: firstDate <= secondDate | | GT        | Strictly greater than: firstDate > secondDate | | GTE       | Greater than or equal to: firstDate >= secondDate |
     * @type {string}
     * @memberof DateCompareBeta
     */
    'operator': DateCompareBetaOperatorEnum;
    /**
     * The output of the transform if the expression evalutes to true
     * @type {string}
     * @memberof DateCompareBeta
     */
    'positiveCondition': string;
    /**
     * The output of the transform if the expression evalutes to false
     * @type {string}
     * @memberof DateCompareBeta
     */
    'negativeCondition': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DateCompareBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DateCompareBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
export declare const DateCompareBetaOperatorEnum: {
    readonly Lt: "LT";
    readonly Lte: "LTE";
    readonly Gt: "GT";
    readonly Gte: "GTE";
};
export type DateCompareBetaOperatorEnum = typeof DateCompareBetaOperatorEnum[keyof typeof DateCompareBetaOperatorEnum];
/**
 * @type DateCompareFirstDateBeta
 * This is the first date to consider (The date that would be on the left hand side of the comparison operation).
 * @export
 */
export type DateCompareFirstDateBeta = AccountAttributeBeta | DateFormatBeta;
/**
 * @type DateCompareSecondDateBeta
 * This is the second date to consider (The date that would be on the right hand side of the comparison operation).
 * @export
 */
export type DateCompareSecondDateBeta = AccountAttributeBeta | DateFormatBeta;
/**
 *
 * @export
 * @interface DateFormatBeta
 */
export interface DateFormatBeta {
    /**
     *
     * @type {DateFormatInputFormatBeta}
     * @memberof DateFormatBeta
     */
    'inputFormat'?: DateFormatInputFormatBeta;
    /**
     *
     * @type {DateFormatOutputFormatBeta}
     * @memberof DateFormatBeta
     */
    'outputFormat'?: DateFormatOutputFormatBeta;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DateFormatBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DateFormatBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * @type DateFormatInputFormatBeta
 * A string value indicating either the explicit SimpleDateFormat or the built-in named format that the data is coming in as.  *If no inputFormat is provided, the transform assumes that it is in ISO8601 format*
 * @export
 */
export type DateFormatInputFormatBeta = NamedConstructsBeta | string;
/**
 * @type DateFormatOutputFormatBeta
 * A string value indicating either the explicit SimpleDateFormat or the built-in named format that the data should be formatted into.  *If no inputFormat is provided, the transform assumes that it is in ISO8601 format*
 * @export
 */
export type DateFormatOutputFormatBeta = NamedConstructsBeta | string;
/**
 *
 * @export
 * @interface DateMathBeta
 */
export interface DateMathBeta {
    /**
     * A string value of the date and time components to operation on, along with the math operations to execute.
     * @type {string}
     * @memberof DateMathBeta
     */
    'expression': string;
    /**
     * A boolean value to indicate whether the transform should round up or down when a rounding `/` operation is defined in the expression.    If not provided, the transform will default to `false`   `true` indicates the transform should round up (i.e., truncate the fractional date/time component indicated and then add one unit of that component)   `false` indicates the transform should round down (i.e., truncate the fractional date/time component indicated)
     * @type {boolean}
     * @memberof DateMathBeta
     */
    'roundUp'?: boolean;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DateMathBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DateMathBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface DecomposeDiacriticalMarksBeta
 */
export interface DecomposeDiacriticalMarksBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof DecomposeDiacriticalMarksBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof DecomposeDiacriticalMarksBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface Delete202ResponseBeta
 */
export interface Delete202ResponseBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof Delete202ResponseBeta
     */
    'type'?: Delete202ResponseBetaTypeEnum;
    /**
     * Task result ID.
     * @type {string}
     * @memberof Delete202ResponseBeta
     */
    'id'?: string;
    /**
     * Task result\'s human-readable display name (this should be null/empty).
     * @type {string}
     * @memberof Delete202ResponseBeta
     */
    'name'?: string;
}
export declare const Delete202ResponseBetaTypeEnum: {
    readonly TaskResult: "TASK_RESULT";
};
export type Delete202ResponseBetaTypeEnum = typeof Delete202ResponseBetaTypeEnum[keyof typeof Delete202ResponseBetaTypeEnum];
/**
 *
 * @export
 * @interface DeleteCampaignsRequestBeta
 */
export interface DeleteCampaignsRequestBeta {
    /**
     * The ids of the campaigns to delete
     * @type {Array<string>}
     * @memberof DeleteCampaignsRequestBeta
     */
    'ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface DeleteNonEmployeeRecordInBulkRequestBeta
 */
export interface DeleteNonEmployeeRecordInBulkRequestBeta {
    /**
     * List of non-employee ids.
     * @type {Array<string>}
     * @memberof DeleteNonEmployeeRecordInBulkRequestBeta
     */
    'ids': Array<string>;
}
/**
 *
 * @export
 * @interface DeleteVendorConnectorMapping200ResponseBeta
 */
export interface DeleteVendorConnectorMapping200ResponseBeta {
    /**
     * The number of vendor connector mappings successfully deleted.
     * @type {number}
     * @memberof DeleteVendorConnectorMapping200ResponseBeta
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface DiscoveredApplicationsInnerBeta
 */
export interface DiscoveredApplicationsInnerBeta {
    /**
     * Unique identifier for the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'id'?: string;
    /**
     * Name of the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'name'?: string;
    /**
     * Source from which the application was discovered.
     * @type {string}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'discoverySource'?: string;
    /**
     * The vendor associated with the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'discoveredVendor'?: string;
    /**
     * A brief description of the discovered application.
     * @type {string}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'description'?: string;
    /**
     * List of recommended connectors for the application.
     * @type {Array<string>}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'recommendedConnectors'?: Array<string>;
    /**
     * The timestamp when the application was discovered, in ISO 8601 format.
     * @type {string}
     * @memberof DiscoveredApplicationsInnerBeta
     */
    'discoveredTimestamp'?: string;
}
/**
 * DKIM attributes for a domain or identity
 * @export
 * @interface DkimAttributesBeta
 */
export interface DkimAttributesBeta {
    /**
     * UUID associated with domain to be verified
     * @type {string}
     * @memberof DkimAttributesBeta
     */
    'id'?: string;
    /**
     * The identity or domain address
     * @type {string}
     * @memberof DkimAttributesBeta
     */
    'address'?: string;
    /**
     * Whether or not DKIM has been enabled for this domain / identity
     * @type {boolean}
     * @memberof DkimAttributesBeta
     */
    'dkimEnabled'?: boolean;
    /**
     * The tokens to be added to a DNS for verification
     * @type {Array<string>}
     * @memberof DkimAttributesBeta
     */
    'dkimTokens'?: Array<string>;
    /**
     * The current status if the domain /identity has been verified. Ie Success, Failed, Pending
     * @type {string}
     * @memberof DkimAttributesBeta
     */
    'dkimVerificationStatus'?: string;
}
/**
 *
 * @export
 * @interface DomainAddressBeta
 */
export interface DomainAddressBeta {
    /**
     * A domain address
     * @type {string}
     * @memberof DomainAddressBeta
     */
    'domain'?: string;
}
/**
 * Domain status DTO containing everything required to verify via DKIM
 * @export
 * @interface DomainStatusDtoBeta
 */
export interface DomainStatusDtoBeta {
    /**
     * New UUID associated with domain to be verified
     * @type {string}
     * @memberof DomainStatusDtoBeta
     */
    'id'?: string;
    /**
     * A domain address
     * @type {string}
     * @memberof DomainStatusDtoBeta
     */
    'domain'?: string;
    /**
     * DKIM is enabled for this domain
     * @type {object}
     * @memberof DomainStatusDtoBeta
     */
    'dkimEnabled'?: object;
    /**
     * DKIM tokens required for authentication
     * @type {Array<string>}
     * @memberof DomainStatusDtoBeta
     */
    'dkimTokens'?: Array<string>;
    /**
     * Status of DKIM authentication
     * @type {string}
     * @memberof DomainStatusDtoBeta
     */
    'dkimVerificationStatus'?: string;
}
/**
 * An enumeration of the types of DTOs supported within the IdentityNow infrastructure.
 * @export
 * @enum {string}
 */
export declare const DtoTypeBeta: {
    readonly AccountCorrelationConfig: "ACCOUNT_CORRELATION_CONFIG";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestApproval: "ACCESS_REQUEST_APPROVAL";
    readonly Account: "ACCOUNT";
    readonly Application: "APPLICATION";
    readonly Campaign: "CAMPAIGN";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly Certification: "CERTIFICATION";
    readonly Cluster: "CLUSTER";
    readonly ConnectorSchema: "CONNECTOR_SCHEMA";
    readonly Entitlement: "ENTITLEMENT";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly IdentityRequest: "IDENTITY_REQUEST";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly TagCategory: "TAG_CATEGORY";
    readonly TaskResult: "TASK_RESULT";
    readonly ReportResult: "REPORT_RESULT";
    readonly SodViolation: "SOD_VIOLATION";
    readonly AccountActivity: "ACCOUNT_ACTIVITY";
    readonly Workgroup: "WORKGROUP";
};
export type DtoTypeBeta = typeof DtoTypeBeta[keyof typeof DtoTypeBeta];
/**
 *
 * @export
 * @interface DuoVerificationRequestBeta
 */
export interface DuoVerificationRequestBeta {
    /**
     * User id for Verification request.
     * @type {string}
     * @memberof DuoVerificationRequestBeta
     */
    'userId': string;
    /**
     * User id for Verification request.
     * @type {string}
     * @memberof DuoVerificationRequestBeta
     */
    'signedResponse': string;
}
/**
 *
 * @export
 * @interface E164phoneBeta
 */
export interface E164phoneBeta {
    /**
     * This is an optional attribute that can be used to define the region of the phone number to format into.   If defaultRegion is not provided, it will take US as the default country.   The format of the country code should be in [ISO 3166-1 alpha-2 format](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @type {string}
     * @memberof E164phoneBeta
     */
    'defaultRegion'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof E164phoneBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof E164phoneBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface EmailNotificationOptionBeta
 */
export interface EmailNotificationOptionBeta {
    /**
     * If true, then the manager is notified of the lifecycle state change.
     * @type {boolean}
     * @memberof EmailNotificationOptionBeta
     */
    'notifyManagers'?: boolean;
    /**
     * If true, then all the admins are notified of the lifecycle state change.
     * @type {boolean}
     * @memberof EmailNotificationOptionBeta
     */
    'notifyAllAdmins'?: boolean;
    /**
     * If true, then the users specified in \"emailAddressList\" below are notified of lifecycle state change.
     * @type {boolean}
     * @memberof EmailNotificationOptionBeta
     */
    'notifySpecificUsers'?: boolean;
    /**
     * List of user email addresses. If \"notifySpecificUsers\" option is true, then these users are notified of lifecycle state change.
     * @type {Array<string>}
     * @memberof EmailNotificationOptionBeta
     */
    'emailAddressList'?: Array<string>;
}
/**
 *
 * @export
 * @interface EmailStatusDtoBeta
 */
export interface EmailStatusDtoBeta {
    /**
     *
     * @type {string}
     * @memberof EmailStatusDtoBeta
     */
    'id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof EmailStatusDtoBeta
     */
    'email'?: string;
    /**
     *
     * @type {boolean}
     * @memberof EmailStatusDtoBeta
     */
    'isVerifiedByDomain'?: boolean;
    /**
     *
     * @type {string}
     * @memberof EmailStatusDtoBeta
     */
    'verificationStatus'?: EmailStatusDtoBetaVerificationStatusEnum;
}
export declare const EmailStatusDtoBetaVerificationStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type EmailStatusDtoBetaVerificationStatusEnum = typeof EmailStatusDtoBetaVerificationStatusEnum[keyof typeof EmailStatusDtoBetaVerificationStatusEnum];
/**
 *
 * @export
 * @interface EntitlementAccessModelMetadataBeta
 */
export interface EntitlementAccessModelMetadataBeta {
    /**
     *
     * @type {Array<AttributeDTOBeta>}
     * @memberof EntitlementAccessModelMetadataBeta
     */
    'attributes'?: Array<AttributeDTOBeta> | null;
}
/**
 *
 * @export
 * @interface EntitlementAccessRequestConfigBeta
 */
export interface EntitlementAccessRequestConfigBeta {
    /**
     * Ordered list of approval steps for the access request. Empty when no approval is required.
     * @type {Array<EntitlementApprovalSchemeBeta>}
     * @memberof EntitlementAccessRequestConfigBeta
     */
    'approvalSchemes'?: Array<EntitlementApprovalSchemeBeta>;
    /**
     * If the requester must provide a comment during access request.
     * @type {boolean}
     * @memberof EntitlementAccessRequestConfigBeta
     */
    'requestCommentRequired'?: boolean;
    /**
     * If the reviewer must provide a comment when denying the access request.
     * @type {boolean}
     * @memberof EntitlementAccessRequestConfigBeta
     */
    'denialCommentRequired'?: boolean;
}
/**
 *
 * @export
 * @interface EntitlementApprovalSchemeBeta
 */
export interface EntitlementApprovalSchemeBeta {
    /**
     * Describes the individual or group that is responsible for an approval step. Values are as follows.  **ENTITLEMENT_OWNER**: Owner of the associated Entitlement  **SOURCE_OWNER**: Owner of the associated Source  **MANAGER**: Manager of the Identity for whom the request is being made  **GOVERNANCE_GROUP**: A Governance Group, the ID of which is specified by the **approverId** field
     * @type {string}
     * @memberof EntitlementApprovalSchemeBeta
     */
    'approverType'?: EntitlementApprovalSchemeBetaApproverTypeEnum;
    /**
     * Id of the specific approver, used only when approverType is GOVERNANCE_GROUP
     * @type {string}
     * @memberof EntitlementApprovalSchemeBeta
     */
    'approverId'?: string | null;
}
export declare const EntitlementApprovalSchemeBetaApproverTypeEnum: {
    readonly EntitlementOwner: "ENTITLEMENT_OWNER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Manager: "MANAGER";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type EntitlementApprovalSchemeBetaApproverTypeEnum = typeof EntitlementApprovalSchemeBetaApproverTypeEnum[keyof typeof EntitlementApprovalSchemeBetaApproverTypeEnum];
/**
 *
 * @export
 * @interface EntitlementBeta
 */
export interface EntitlementBeta {
    /**
     * The entitlement id
     * @type {string}
     * @memberof EntitlementBeta
     */
    'id'?: string;
    /**
     * The entitlement name
     * @type {string}
     * @memberof EntitlementBeta
     */
    'name'?: string;
    /**
     * Time when the entitlement was created
     * @type {string}
     * @memberof EntitlementBeta
     */
    'created'?: string;
    /**
     * Time when the entitlement was last modified
     * @type {string}
     * @memberof EntitlementBeta
     */
    'modified'?: string;
    /**
     * The entitlement attribute name
     * @type {string}
     * @memberof EntitlementBeta
     */
    'attribute'?: string | null;
    /**
     * The value of the entitlement
     * @type {string}
     * @memberof EntitlementBeta
     */
    'value'?: string;
    /**
     * The object type of the entitlement from the source schema
     * @type {string}
     * @memberof EntitlementBeta
     */
    'sourceSchemaObjectType'?: string;
    /**
     * True if the entitlement is privileged
     * @type {boolean}
     * @memberof EntitlementBeta
     */
    'privileged'?: boolean;
    /**
     * True if the entitlement is cloud governed
     * @type {boolean}
     * @memberof EntitlementBeta
     */
    'cloudGoverned'?: boolean;
    /**
     * The description of the entitlement
     * @type {string}
     * @memberof EntitlementBeta
     */
    'description'?: string | null;
    /**
     * True if the entitlement is requestable
     * @type {boolean}
     * @memberof EntitlementBeta
     */
    'requestable'?: boolean;
    /**
     * A map of free-form key-value pairs from the source system
     * @type {{ [key: string]: any; }}
     * @memberof EntitlementBeta
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {EntitlementSourceBeta}
     * @memberof EntitlementBeta
     */
    'source'?: EntitlementSourceBeta;
    /**
     *
     * @type {EntitlementOwnerBeta}
     * @memberof EntitlementBeta
     */
    'owner'?: EntitlementOwnerBeta;
    /**
     *
     * @type {Array<PermissionDtoBeta>}
     * @memberof EntitlementBeta
     */
    'directPermissions'?: Array<PermissionDtoBeta>;
    /**
     * List of IDs of segments, if any, to which this Entitlement is assigned.
     * @type {Array<string>}
     * @memberof EntitlementBeta
     */
    'segments'?: Array<string> | null;
    /**
     *
     * @type {EntitlementManuallyUpdatedFieldsBeta}
     * @memberof EntitlementBeta
     */
    'manuallyUpdatedFields'?: EntitlementManuallyUpdatedFieldsBeta;
    /**
     *
     * @type {EntitlementAccessModelMetadataBeta}
     * @memberof EntitlementBeta
     */
    'accessModelMetadata'?: EntitlementAccessModelMetadataBeta;
}
/**
 *
 * @export
 * @interface EntitlementBulkUpdateRequestBeta
 */
export interface EntitlementBulkUpdateRequestBeta {
    /**
     * List of entitlement ids to update
     * @type {Array<string>}
     * @memberof EntitlementBulkUpdateRequestBeta
     */
    'entitlementIds': Array<string>;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof EntitlementBulkUpdateRequestBeta
     */
    'jsonPatch': Array<JsonPatchOperationBeta>;
}
/**
 *
 * @export
 * @interface EntitlementManuallyUpdatedFieldsBeta
 */
export interface EntitlementManuallyUpdatedFieldsBeta {
    /**
     * True if the entitlements name was updated manually via entitlement import csv or patch endpoint.  False means that property value has not been change after first entitlement aggregation. Field refers to [Entitlement response schema](https://developer.sailpoint.com/idn/api/beta/get-entitlement) > `name` property.
     * @type {boolean}
     * @memberof EntitlementManuallyUpdatedFieldsBeta
     */
    'DISPLAY_NAME'?: boolean;
    /**
     * True if the entitlement description was updated manually via entitlement import csv or patch endpoint.  False means that property value has not been change after first entitlement aggregation. Field refers to [Entitlement response schema](https://developer.sailpoint.com/idn/api/beta/get-entitlement) > `description` property.
     * @type {boolean}
     * @memberof EntitlementManuallyUpdatedFieldsBeta
     */
    'DESCRIPTION'?: boolean;
}
/**
 *
 * @export
 * @interface EntitlementOwnerBeta
 */
export interface EntitlementOwnerBeta {
    /**
     * The owner id for the entitlement
     * @type {string}
     * @memberof EntitlementOwnerBeta
     */
    'id'?: string;
    /**
     * The owner name for the entitlement
     * @type {string}
     * @memberof EntitlementOwnerBeta
     */
    'name'?: string;
    /**
     * The type of the owner. Initially only type IDENTITY is supported
     * @type {string}
     * @memberof EntitlementOwnerBeta
     */
    'type'?: EntitlementOwnerBetaTypeEnum;
}
export declare const EntitlementOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type EntitlementOwnerBetaTypeEnum = typeof EntitlementOwnerBetaTypeEnum[keyof typeof EntitlementOwnerBetaTypeEnum];
/**
 * Entitlement including a specific set of access.
 * @export
 * @interface EntitlementRefBeta
 */
export interface EntitlementRefBeta {
    /**
     * Entitlement\'s DTO type.
     * @type {string}
     * @memberof EntitlementRefBeta
     */
    'type'?: EntitlementRefBetaTypeEnum;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof EntitlementRefBeta
     */
    'id'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof EntitlementRefBeta
     */
    'name'?: string | null;
}
export declare const EntitlementRefBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type EntitlementRefBetaTypeEnum = typeof EntitlementRefBetaTypeEnum[keyof typeof EntitlementRefBetaTypeEnum];
/**
 *
 * @export
 * @interface EntitlementRequestConfig1Beta
 */
export interface EntitlementRequestConfig1Beta {
    /**
     * If this is true, entitlement requests are allowed.
     * @type {boolean}
     * @memberof EntitlementRequestConfig1Beta
     */
    'allowEntitlementRequest'?: boolean;
    /**
     * If this is true, comments are required to submit entitlement requests.
     * @type {boolean}
     * @memberof EntitlementRequestConfig1Beta
     */
    'requestCommentsRequired'?: boolean;
    /**
     * If this is true, comments are required to reject entitlement requests.
     * @type {boolean}
     * @memberof EntitlementRequestConfig1Beta
     */
    'deniedCommentsRequired'?: boolean;
    /**
     * Approval schemes for granting entitlement request. This can be empty if no approval is needed. Multiple schemes must be comma-separated. The valid schemes are \"entitlementOwner\", \"sourceOwner\", \"manager\" and \"workgroup:{id}\". You can use multiple governance groups (workgroups).
     * @type {string}
     * @memberof EntitlementRequestConfig1Beta
     */
    'grantRequestApprovalSchemes'?: string | null;
}
/**
 *
 * @export
 * @interface EntitlementRequestConfigBeta
 */
export interface EntitlementRequestConfigBeta {
    /**
     *
     * @type {EntitlementAccessRequestConfigBeta}
     * @memberof EntitlementRequestConfigBeta
     */
    'accessRequestConfig'?: EntitlementAccessRequestConfigBeta;
}
/**
 *
 * @export
 * @interface EntitlementSourceBeta
 */
export interface EntitlementSourceBeta {
    /**
     * The source ID
     * @type {string}
     * @memberof EntitlementSourceBeta
     */
    'id'?: string;
    /**
     * The source type, will always be \"SOURCE\"
     * @type {string}
     * @memberof EntitlementSourceBeta
     */
    'type'?: string;
    /**
     * The source name
     * @type {string}
     * @memberof EntitlementSourceBeta
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface EntitlementSourceResetBaseReferenceDtoBeta
 */
export interface EntitlementSourceResetBaseReferenceDtoBeta {
    /**
     * The DTO type
     * @type {string}
     * @memberof EntitlementSourceResetBaseReferenceDtoBeta
     */
    'type'?: string;
    /**
     * The task ID of the object to which this reference applies
     * @type {string}
     * @memberof EntitlementSourceResetBaseReferenceDtoBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof EntitlementSourceResetBaseReferenceDtoBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface EntityCreatedByDTOBeta
 */
export interface EntityCreatedByDTOBeta {
    /**
     * ID of the creator
     * @type {string}
     * @memberof EntityCreatedByDTOBeta
     */
    'id'?: string;
    /**
     * The display name of the creator
     * @type {string}
     * @memberof EntityCreatedByDTOBeta
     */
    'displayName'?: string;
}
/**
 *
 * @export
 * @interface ErrorBeta
 */
export interface ErrorBeta {
    /**
     * DetailCode is the text of the status code returned
     * @type {string}
     * @memberof ErrorBeta
     */
    'detailCode'?: string;
    /**
     *
     * @type {Array<ErrorMessageBeta>}
     * @memberof ErrorBeta
     */
    'messages'?: Array<ErrorMessageBeta>;
    /**
     * TrackingID is the request tracking unique identifier
     * @type {string}
     * @memberof ErrorBeta
     */
    'trackingId'?: string;
}
/**
 *
 * @export
 * @interface ErrorMessageBeta
 */
export interface ErrorMessageBeta {
    /**
     * Locale is the current Locale
     * @type {string}
     * @memberof ErrorMessageBeta
     */
    'locale'?: string;
    /**
     * LocaleOrigin holds possible values of how the locale was selected
     * @type {string}
     * @memberof ErrorMessageBeta
     */
    'localeOrigin'?: string;
    /**
     * Text is the actual text of the error message
     * @type {string}
     * @memberof ErrorMessageBeta
     */
    'text'?: string;
}
/**
 *
 * @export
 * @interface ErrorMessageDtoBeta
 */
export interface ErrorMessageDtoBeta {
    /**
     * The locale for the message text, a BCP 47 language tag.
     * @type {string}
     * @memberof ErrorMessageDtoBeta
     */
    'locale'?: string | null;
    /**
     *
     * @type {LocaleOriginBeta}
     * @memberof ErrorMessageDtoBeta
     */
    'localeOrigin'?: LocaleOriginBeta | null;
    /**
     * Actual text of the error message in the indicated locale.
     * @type {string}
     * @memberof ErrorMessageDtoBeta
     */
    'text'?: string;
}
/**
 *
 * @export
 * @interface ErrorResponseDtoBeta
 */
export interface ErrorResponseDtoBeta {
    /**
     * Fine-grained error code providing more detail of the error.
     * @type {string}
     * @memberof ErrorResponseDtoBeta
     */
    'detailCode'?: string;
    /**
     * Unique tracking id for the error.
     * @type {string}
     * @memberof ErrorResponseDtoBeta
     */
    'trackingId'?: string;
    /**
     * Generic localized reason for error
     * @type {Array<ErrorMessageDtoBeta>}
     * @memberof ErrorResponseDtoBeta
     */
    'messages'?: Array<ErrorMessageDtoBeta>;
    /**
     * Plain-text descriptive reasons to provide additional detail to the text provided in the messages field
     * @type {Array<ErrorMessageDtoBeta>}
     * @memberof ErrorResponseDtoBeta
     */
    'causes'?: Array<ErrorMessageDtoBeta>;
}
/**
 * The response body for Evaluate Reassignment Configuration
 * @export
 * @interface EvaluateResponseBeta
 */
export interface EvaluateResponseBeta {
    /**
     * The Identity ID which should be the recipient of any work items sent to a specific identity & work type
     * @type {string}
     * @memberof EvaluateResponseBeta
     */
    'reassignToId'?: string;
    /**
     * List of Reassignments found by looking up the next `TargetIdentity` in a ReassignmentConfiguration
     * @type {Array<LookupStepBeta>}
     * @memberof EvaluateResponseBeta
     */
    'lookupTrail'?: Array<LookupStepBeta>;
}
/**
 * Attributes related to an IdentityNow ETS event
 * @export
 * @interface EventAttributesBeta
 */
export interface EventAttributesBeta {
    /**
     * The unique ID of the trigger
     * @type {string}
     * @memberof EventAttributesBeta
     */
    'id': string;
    /**
     * JSON path expression that will limit which events the trigger will fire on
     * @type {string}
     * @memberof EventAttributesBeta
     */
    'filter.$'?: string;
    /**
     * Description of the event trigger
     * @type {string}
     * @memberof EventAttributesBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface EventBridgeConfigBeta
 */
export interface EventBridgeConfigBeta {
    /**
     * AWS Account Number (12-digit number) that has the EventBridge Partner Event Source Resource.
     * @type {string}
     * @memberof EventBridgeConfigBeta
     */
    'awsAccount': string;
    /**
     * AWS Region that has the EventBridge Partner Event Source Resource. See https://docs.aws.amazon.com/general/latest/gr/rande.html for a full list of available values.
     * @type {string}
     * @memberof EventBridgeConfigBeta
     */
    'awsRegion': string;
}
/**
 *
 * @export
 * @interface ExceptionAccessCriteriaBeta
 */
export interface ExceptionAccessCriteriaBeta {
    /**
     *
     * @type {ExceptionCriteriaBeta}
     * @memberof ExceptionAccessCriteriaBeta
     */
    'leftCriteria'?: ExceptionCriteriaBeta;
    /**
     *
     * @type {ExceptionCriteriaBeta}
     * @memberof ExceptionAccessCriteriaBeta
     */
    'rightCriteria'?: ExceptionCriteriaBeta;
}
/**
 * Access reference with addition of boolean existing flag to indicate whether the access was extant
 * @export
 * @interface ExceptionCriteriaAccessBeta
 */
export interface ExceptionCriteriaAccessBeta {
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof ExceptionCriteriaAccessBeta
     */
    'type'?: DtoTypeBeta;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaAccessBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaAccessBeta
     */
    'name'?: string;
    /**
     * Whether the subject identity already had that access or not
     * @type {boolean}
     * @memberof ExceptionCriteriaAccessBeta
     */
    'existing'?: boolean;
}
/**
 *
 * @export
 * @interface ExceptionCriteriaBeta
 */
export interface ExceptionCriteriaBeta {
    /**
     * List of exception criteria. There is a min of 1 and max of 50 items in the list.
     * @type {Array<ExceptionCriteriaCriteriaListInnerBeta>}
     * @memberof ExceptionCriteriaBeta
     */
    'criteriaList'?: Array<ExceptionCriteriaCriteriaListInnerBeta>;
}
/**
 * The types of objects supported for SOD violations
 * @export
 * @interface ExceptionCriteriaCriteriaListInnerBeta
 */
export interface ExceptionCriteriaCriteriaListInnerBeta {
    /**
     * The type of object that is referenced
     * @type {object}
     * @memberof ExceptionCriteriaCriteriaListInnerBeta
     */
    'type'?: ExceptionCriteriaCriteriaListInnerBetaTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaCriteriaListInnerBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof ExceptionCriteriaCriteriaListInnerBeta
     */
    'name'?: string;
    /**
     * Whether the subject identity already had that access or not
     * @type {boolean}
     * @memberof ExceptionCriteriaCriteriaListInnerBeta
     */
    'existing'?: boolean;
}
export declare const ExceptionCriteriaCriteriaListInnerBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type ExceptionCriteriaCriteriaListInnerBetaTypeEnum = typeof ExceptionCriteriaCriteriaListInnerBetaTypeEnum[keyof typeof ExceptionCriteriaCriteriaListInnerBetaTypeEnum];
/**
 * The current state of execution.
 * @export
 * @enum {string}
 */
export declare const ExecutionStatusBeta: {
    readonly Executing: "EXECUTING";
    readonly Verifying: "VERIFYING";
    readonly Terminated: "TERMINATED";
    readonly Completed: "COMPLETED";
};
export type ExecutionStatusBeta = typeof ExecutionStatusBeta[keyof typeof ExecutionStatusBeta];
/**
 *
 * @export
 * @interface ExportFormDefinitionsByTenant200ResponseInnerBeta
 */
export interface ExportFormDefinitionsByTenant200ResponseInnerBeta {
    /**
     *
     * @type {FormDefinitionResponseBeta}
     * @memberof ExportFormDefinitionsByTenant200ResponseInnerBeta
     */
    'object'?: FormDefinitionResponseBeta;
    /**
     *
     * @type {FormDefinitionSelfImportExportDtoBeta}
     * @memberof ExportFormDefinitionsByTenant200ResponseInnerBeta
     */
    'self'?: FormDefinitionSelfImportExportDtoBeta;
    /**
     *
     * @type {number}
     * @memberof ExportFormDefinitionsByTenant200ResponseInnerBeta
     */
    'version'?: number;
}
/**
 *
 * @export
 * @interface ExportOptionsBeta
 */
export interface ExportOptionsBeta {
    /**
     * Object type names to be excluded from an sp-config export command.
     * @type {Array<string>}
     * @memberof ExportOptionsBeta
     */
    'excludeTypes'?: Array<ExportOptionsBetaExcludeTypesEnum>;
    /**
     * Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.
     * @type {Array<string>}
     * @memberof ExportOptionsBeta
     */
    'includeTypes'?: Array<ExportOptionsBetaIncludeTypesEnum>;
    /**
     * Additional options targeting specific objects related to each item in the includeTypes field
     * @type {{ [key: string]: ObjectExportImportOptionsBeta; }}
     * @memberof ExportOptionsBeta
     */
    'objectOptions'?: {
        [key: string]: ObjectExportImportOptionsBeta;
    };
}
export declare const ExportOptionsBetaExcludeTypesEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type ExportOptionsBetaExcludeTypesEnum = typeof ExportOptionsBetaExcludeTypesEnum[keyof typeof ExportOptionsBetaExcludeTypesEnum];
export declare const ExportOptionsBetaIncludeTypesEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type ExportOptionsBetaIncludeTypesEnum = typeof ExportOptionsBetaIncludeTypesEnum[keyof typeof ExportOptionsBetaIncludeTypesEnum];
/**
 *
 * @export
 * @interface ExportPayloadBeta
 */
export interface ExportPayloadBeta {
    /**
     * Optional user defined description/name for export job.
     * @type {string}
     * @memberof ExportPayloadBeta
     */
    'description'?: string;
    /**
     * Object type names to be excluded from an sp-config export command.
     * @type {Array<string>}
     * @memberof ExportPayloadBeta
     */
    'excludeTypes'?: Array<ExportPayloadBetaExcludeTypesEnum>;
    /**
     * Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.
     * @type {Array<string>}
     * @memberof ExportPayloadBeta
     */
    'includeTypes'?: Array<ExportPayloadBetaIncludeTypesEnum>;
    /**
     * Additional options targeting specific objects related to each item in the includeTypes field
     * @type {{ [key: string]: ObjectExportImportOptionsBeta; }}
     * @memberof ExportPayloadBeta
     */
    'objectOptions'?: {
        [key: string]: ObjectExportImportOptionsBeta;
    };
}
export declare const ExportPayloadBetaExcludeTypesEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type ExportPayloadBetaExcludeTypesEnum = typeof ExportPayloadBetaExcludeTypesEnum[keyof typeof ExportPayloadBetaExcludeTypesEnum];
export declare const ExportPayloadBetaIncludeTypesEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type ExportPayloadBetaIncludeTypesEnum = typeof ExportPayloadBetaIncludeTypesEnum[keyof typeof ExportPayloadBetaIncludeTypesEnum];
/**
 *
 * @export
 * @interface ExpressionBeta
 */
export interface ExpressionBeta {
    /**
     * Operator for the expression
     * @type {string}
     * @memberof ExpressionBeta
     */
    'operator'?: ExpressionBetaOperatorEnum;
    /**
     * Name for the attribute
     * @type {string}
     * @memberof ExpressionBeta
     */
    'attribute'?: string | null;
    /**
     *
     * @type {ValueBeta}
     * @memberof ExpressionBeta
     */
    'value'?: ValueBeta | null;
    /**
     * List of expressions
     * @type {Array<ChildrenBeta>}
     * @memberof ExpressionBeta
     */
    'children'?: Array<ChildrenBeta> | null;
}
export declare const ExpressionBetaOperatorEnum: {
    readonly And: "AND";
    readonly Equals: "EQUALS";
};
export type ExpressionBetaOperatorEnum = typeof ExpressionBetaOperatorEnum[keyof typeof ExpressionBetaOperatorEnum];
/**
 * Attributes related to an external trigger
 * @export
 * @interface ExternalAttributesBeta
 */
export interface ExternalAttributesBeta {
    /**
     * A unique name for the external trigger
     * @type {string}
     * @memberof ExternalAttributesBeta
     */
    'name'?: string;
    /**
     * Additional context about the external trigger
     * @type {string}
     * @memberof ExternalAttributesBeta
     */
    'description'?: string;
    /**
     * OAuth Client ID to authenticate with this trigger
     * @type {string}
     * @memberof ExternalAttributesBeta
     */
    'clientId'?: string;
    /**
     * URL to invoke this workflow
     * @type {string}
     * @memberof ExternalAttributesBeta
     */
    'url'?: string;
}
/**
 *
 * @export
 * @interface FeatureValueDtoBeta
 */
export interface FeatureValueDtoBeta {
    /**
     * The type of feature
     * @type {string}
     * @memberof FeatureValueDtoBeta
     */
    'feature'?: string;
    /**
     * The number of identities that have access to the feature
     * @type {number}
     * @memberof FeatureValueDtoBeta
     */
    'numerator'?: number;
    /**
     * The number of identities with the corresponding feature
     * @type {number}
     * @memberof FeatureValueDtoBeta
     */
    'denominator'?: number;
}
/**
 *
 * @export
 * @interface FieldAllOfBeta
 */
export interface FieldAllOfBeta {
    /**
     * Display name of the field
     * @type {string}
     * @memberof FieldAllOfBeta
     */
    'displayName'?: string;
    /**
     * Type of the field to display
     * @type {string}
     * @memberof FieldAllOfBeta
     */
    'displayType'?: string;
    /**
     * True if the field is required
     * @type {boolean}
     * @memberof FieldAllOfBeta
     */
    'required'?: boolean;
    /**
     * List of allowed values for the field
     * @type {Array<object>}
     * @memberof FieldAllOfBeta
     */
    'allowedValuesList'?: Array<object>;
    /**
     * Value of the field
     * @type {object}
     * @memberof FieldAllOfBeta
     */
    'value'?: object;
}
/**
 *
 * @export
 * @interface FieldBeta
 */
export interface FieldBeta {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof FieldBeta
     */
    'name'?: string;
    /**
     * Display name of the field
     * @type {string}
     * @memberof FieldBeta
     */
    'displayName'?: string;
    /**
     * Type of the field to display
     * @type {string}
     * @memberof FieldBeta
     */
    'displayType'?: string;
    /**
     * True if the field is required
     * @type {boolean}
     * @memberof FieldBeta
     */
    'required'?: boolean;
    /**
     * List of allowed values for the field
     * @type {Array<object>}
     * @memberof FieldBeta
     */
    'allowedValuesList'?: Array<object>;
    /**
     * Value of the field
     * @type {object}
     * @memberof FieldBeta
     */
    'value'?: object;
}
/**
 *
 * @export
 * @interface FieldDetailsBeta
 */
export interface FieldDetailsBeta {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof FieldDetailsBeta
     */
    'name'?: string;
    /**
     * Display name of the field
     * @type {string}
     * @memberof FieldDetailsBeta
     */
    'displayName'?: string;
    /**
     * Type of the field to display
     * @type {string}
     * @memberof FieldDetailsBeta
     */
    'displayType'?: string;
    /**
     * True if the field is required
     * @type {boolean}
     * @memberof FieldDetailsBeta
     */
    'required'?: boolean;
    /**
     * List of allowed values for the field
     * @type {Array<object>}
     * @memberof FieldDetailsBeta
     */
    'allowedValuesList'?: Array<object>;
    /**
     * Value of the field
     * @type {object}
     * @memberof FieldDetailsBeta
     */
    'value'?: object;
}
/**
 *
 * @export
 * @interface FieldDetailsDtoBeta
 */
export interface FieldDetailsDtoBeta {
    /**
     * The name of the attribute.
     * @type {string}
     * @memberof FieldDetailsDtoBeta
     */
    'name'?: string;
    /**
     * The transform to apply to the field
     * @type {object}
     * @memberof FieldDetailsDtoBeta
     */
    'transform'?: object;
    /**
     * Attributes required for the transform
     * @type {object}
     * @memberof FieldDetailsDtoBeta
     */
    'attributes'?: object;
    /**
     * Flag indicating whether or not the attribute is required.
     * @type {boolean}
     * @memberof FieldDetailsDtoBeta
     */
    'isRequired'?: boolean;
    /**
     * The type of the attribute.
     * @type {string}
     * @memberof FieldDetailsDtoBeta
     */
    'type'?: string;
    /**
     * Flag indicating whether or not the attribute is multi-valued.
     * @type {boolean}
     * @memberof FieldDetailsDtoBeta
     */
    'isMultiValued'?: boolean;
}
/**
 *
 * @export
 * @interface FirstValidBeta
 */
export interface FirstValidBeta {
    /**
     * An array of attributes to evaluate for existence.
     * @type {Array<object>}
     * @memberof FirstValidBeta
     */
    'values': Array<object>;
    /**
     * a true or false value representing to move on to the next option if an error (like an Null Pointer Exception) were to occur.
     * @type {boolean}
     * @memberof FirstValidBeta
     */
    'ignoreErrors'?: boolean;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof FirstValidBeta
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface FormBeta
 */
export interface FormBeta {
    /**
     * ID of the form
     * @type {string}
     * @memberof FormBeta
     */
    'id'?: string | null;
    /**
     * Name of the form
     * @type {string}
     * @memberof FormBeta
     */
    'name'?: string | null;
    /**
     * The form title
     * @type {string}
     * @memberof FormBeta
     */
    'title'?: string;
    /**
     * The form subtitle.
     * @type {string}
     * @memberof FormBeta
     */
    'subtitle'?: string;
    /**
     * The name of the user that should be shown this form
     * @type {string}
     * @memberof FormBeta
     */
    'targetUser'?: string;
    /**
     *
     * @type {Array<SectionDetailsBeta>}
     * @memberof FormBeta
     */
    'sections'?: Array<SectionDetailsBeta>;
}
/**
 * Represent a form conditional.
 * @export
 * @interface FormConditionBeta
 */
export interface FormConditionBeta {
    /**
     * ConditionRuleLogicalOperatorType value. AND ConditionRuleLogicalOperatorTypeAnd OR ConditionRuleLogicalOperatorTypeOr
     * @type {string}
     * @memberof FormConditionBeta
     */
    'ruleOperator'?: FormConditionBetaRuleOperatorEnum;
    /**
     * List of rules.
     * @type {Array<ConditionRuleBeta>}
     * @memberof FormConditionBeta
     */
    'rules'?: Array<ConditionRuleBeta>;
    /**
     * List of effects.
     * @type {Array<ConditionEffectBeta>}
     * @memberof FormConditionBeta
     */
    'effects'?: Array<ConditionEffectBeta>;
}
export declare const FormConditionBetaRuleOperatorEnum: {
    readonly And: "AND";
    readonly Or: "OR";
};
export type FormConditionBetaRuleOperatorEnum = typeof FormConditionBetaRuleOperatorEnum[keyof typeof FormConditionBetaRuleOperatorEnum];
/**
 *
 * @export
 * @interface FormDefinitionDynamicSchemaRequestAttributesBeta
 */
export interface FormDefinitionDynamicSchemaRequestAttributesBeta {
    /**
     * FormDefinitionID is a unique guid identifying this form definition
     * @type {string}
     * @memberof FormDefinitionDynamicSchemaRequestAttributesBeta
     */
    'formDefinitionId'?: string;
}
/**
 *
 * @export
 * @interface FormDefinitionDynamicSchemaRequestBeta
 */
export interface FormDefinitionDynamicSchemaRequestBeta {
    /**
     *
     * @type {FormDefinitionDynamicSchemaRequestAttributesBeta}
     * @memberof FormDefinitionDynamicSchemaRequestBeta
     */
    'attributes'?: FormDefinitionDynamicSchemaRequestAttributesBeta;
    /**
     * Description is the form definition dynamic schema description text
     * @type {string}
     * @memberof FormDefinitionDynamicSchemaRequestBeta
     */
    'description'?: string;
    /**
     * ID is a unique identifier
     * @type {string}
     * @memberof FormDefinitionDynamicSchemaRequestBeta
     */
    'id'?: string;
    /**
     * Type is the form definition dynamic schema type
     * @type {string}
     * @memberof FormDefinitionDynamicSchemaRequestBeta
     */
    'type'?: string;
    /**
     * VersionNumber is the form definition dynamic schema version number
     * @type {number}
     * @memberof FormDefinitionDynamicSchemaRequestBeta
     */
    'versionNumber'?: number;
}
/**
 *
 * @export
 * @interface FormDefinitionDynamicSchemaResponseBeta
 */
export interface FormDefinitionDynamicSchemaResponseBeta {
    /**
     * OutputSchema holds a JSON schema generated dynamically
     * @type {{ [key: string]: object; }}
     * @memberof FormDefinitionDynamicSchemaResponseBeta
     */
    'outputSchema'?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface FormDefinitionFileUploadResponseBeta
 */
export interface FormDefinitionFileUploadResponseBeta {
    /**
     * Created is the date the file was uploaded
     * @type {string}
     * @memberof FormDefinitionFileUploadResponseBeta
     */
    'created'?: string;
    /**
     * fileId is a unique ULID that serves as an identifier for the form definition file
     * @type {string}
     * @memberof FormDefinitionFileUploadResponseBeta
     */
    'fileId'?: string;
    /**
     * FormDefinitionID is a unique guid identifying this form definition
     * @type {string}
     * @memberof FormDefinitionFileUploadResponseBeta
     */
    'formDefinitionId'?: string;
}
/**
 *
 * @export
 * @interface FormDefinitionInputBeta
 */
export interface FormDefinitionInputBeta {
    /**
     * Unique identifier for the form input.
     * @type {string}
     * @memberof FormDefinitionInputBeta
     */
    'id'?: string;
    /**
     * FormDefinitionInputType value. STRING FormDefinitionInputTypeString
     * @type {string}
     * @memberof FormDefinitionInputBeta
     */
    'type'?: FormDefinitionInputBetaTypeEnum;
    /**
     * Name for the form input.
     * @type {string}
     * @memberof FormDefinitionInputBeta
     */
    'label'?: string;
    /**
     * Form input\'s description.
     * @type {string}
     * @memberof FormDefinitionInputBeta
     */
    'description'?: string;
}
export declare const FormDefinitionInputBetaTypeEnum: {
    readonly String: "STRING";
};
export type FormDefinitionInputBetaTypeEnum = typeof FormDefinitionInputBetaTypeEnum[keyof typeof FormDefinitionInputBetaTypeEnum];
/**
 *
 * @export
 * @interface FormDefinitionResponseBeta
 */
export interface FormDefinitionResponseBeta {
    /**
     * Unique guid identifying the form definition.
     * @type {string}
     * @memberof FormDefinitionResponseBeta
     */
    'id'?: string;
    /**
     * Name of the form definition.
     * @type {string}
     * @memberof FormDefinitionResponseBeta
     */
    'name'?: string;
    /**
     * Form definition\'s description.
     * @type {string}
     * @memberof FormDefinitionResponseBeta
     */
    'description'?: string;
    /**
     *
     * @type {FormOwnerBeta}
     * @memberof FormDefinitionResponseBeta
     */
    'owner'?: FormOwnerBeta;
    /**
     * List of objects using the form definition. Whenever a system uses a form, the API reaches out to the form service to record that the system is currently using it.
     * @type {Array<FormUsedByBeta>}
     * @memberof FormDefinitionResponseBeta
     */
    'usedBy'?: Array<FormUsedByBeta>;
    /**
     * List of form inputs required to create a form-instance object.
     * @type {Array<FormDefinitionInputBeta>}
     * @memberof FormDefinitionResponseBeta
     */
    'formInput'?: Array<FormDefinitionInputBeta>;
    /**
     * List of nested form elements.
     * @type {Array<FormElementBeta>}
     * @memberof FormDefinitionResponseBeta
     */
    'formElements'?: Array<FormElementBeta>;
    /**
     * Conditional logic that can dynamically modify the form as the recipient is interacting with it.
     * @type {Array<FormConditionBeta>}
     * @memberof FormDefinitionResponseBeta
     */
    'formConditions'?: Array<FormConditionBeta>;
    /**
     * Created is the date the form definition was created
     * @type {string}
     * @memberof FormDefinitionResponseBeta
     */
    'created'?: string;
    /**
     * Modified is the last date the form definition was modified
     * @type {string}
     * @memberof FormDefinitionResponseBeta
     */
    'modified'?: string;
}
/**
 * Self block for imported/exported object.
 * @export
 * @interface FormDefinitionSelfImportExportDtoBeta
 */
export interface FormDefinitionSelfImportExportDtoBeta {
    /**
     * Imported/exported object\'s DTO type.
     * @type {string}
     * @memberof FormDefinitionSelfImportExportDtoBeta
     */
    'type'?: FormDefinitionSelfImportExportDtoBetaTypeEnum;
    /**
     * Imported/exported object\'s ID.
     * @type {string}
     * @memberof FormDefinitionSelfImportExportDtoBeta
     */
    'id'?: string;
    /**
     * Imported/exported object\'s display name.
     * @type {string}
     * @memberof FormDefinitionSelfImportExportDtoBeta
     */
    'name'?: string;
}
export declare const FormDefinitionSelfImportExportDtoBetaTypeEnum: {
    readonly FormDefinition: "FORM_DEFINITION";
};
export type FormDefinitionSelfImportExportDtoBetaTypeEnum = typeof FormDefinitionSelfImportExportDtoBetaTypeEnum[keyof typeof FormDefinitionSelfImportExportDtoBetaTypeEnum];
/**
 *
 * @export
 * @interface FormDetailsBeta
 */
export interface FormDetailsBeta {
    /**
     * ID of the form
     * @type {string}
     * @memberof FormDetailsBeta
     */
    'id'?: string | null;
    /**
     * Name of the form
     * @type {string}
     * @memberof FormDetailsBeta
     */
    'name'?: string | null;
    /**
     * The form title
     * @type {string}
     * @memberof FormDetailsBeta
     */
    'title'?: string;
    /**
     * The form subtitle.
     * @type {string}
     * @memberof FormDetailsBeta
     */
    'subtitle'?: string;
    /**
     * The name of the user that should be shown this form
     * @type {string}
     * @memberof FormDetailsBeta
     */
    'targetUser'?: string;
    /**
     *
     * @type {Array<SectionDetailsBeta>}
     * @memberof FormDetailsBeta
     */
    'sections'?: Array<SectionDetailsBeta>;
}
/**
 *
 * @export
 * @interface FormElementBeta
 */
export interface FormElementBeta {
    /**
     * Form element identifier.
     * @type {string}
     * @memberof FormElementBeta
     */
    'id'?: string;
    /**
     * FormElementType value.  TEXT FormElementTypeText TOGGLE FormElementTypeToggle TEXTAREA FormElementTypeTextArea HIDDEN FormElementTypeHidden PHONE FormElementTypePhone EMAIL FormElementTypeEmail SELECT FormElementTypeSelect DATE FormElementTypeDate SECTION FormElementTypeSection COLUMN_SET FormElementTypeColumns IMAGE FormElementTypeImage DESCRIPTION FormElementTypeDescription
     * @type {string}
     * @memberof FormElementBeta
     */
    'elementType'?: FormElementBetaElementTypeEnum;
    /**
     * Config object.
     * @type {{ [key: string]: object; }}
     * @memberof FormElementBeta
     */
    'config'?: {
        [key: string]: object;
    };
    /**
     * Technical key.
     * @type {string}
     * @memberof FormElementBeta
     */
    'key'?: string;
    /**
     *
     * @type {Array<FormElementValidationsSetBeta>}
     * @memberof FormElementBeta
     */
    'validations'?: Array<FormElementValidationsSetBeta> | null;
}
export declare const FormElementBetaElementTypeEnum: {
    readonly Text: "TEXT";
    readonly Toggle: "TOGGLE";
    readonly Textarea: "TEXTAREA";
    readonly Hidden: "HIDDEN";
    readonly Phone: "PHONE";
    readonly Email: "EMAIL";
    readonly Select: "SELECT";
    readonly Date: "DATE";
    readonly Section: "SECTION";
    readonly ColumnSet: "COLUMN_SET";
    readonly Image: "IMAGE";
    readonly Description: "DESCRIPTION";
};
export type FormElementBetaElementTypeEnum = typeof FormElementBetaElementTypeEnum[keyof typeof FormElementBetaElementTypeEnum];
/**
 *
 * @export
 * @interface FormElementDataSourceConfigOptionsBeta
 */
export interface FormElementDataSourceConfigOptionsBeta {
    /**
     * Label is the main label to display to the user when selecting this option
     * @type {string}
     * @memberof FormElementDataSourceConfigOptionsBeta
     */
    'label'?: string;
    /**
     * SubLabel is the sub label to display below the label in diminutive styling to help describe or identify this option
     * @type {string}
     * @memberof FormElementDataSourceConfigOptionsBeta
     */
    'subLabel'?: string;
    /**
     * Value is the value to save as an entry when the user selects this option
     * @type {string}
     * @memberof FormElementDataSourceConfigOptionsBeta
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface FormElementDynamicDataSourceBeta
 */
export interface FormElementDynamicDataSourceBeta {
    /**
     *
     * @type {FormElementDynamicDataSourceConfigBeta}
     * @memberof FormElementDynamicDataSourceBeta
     */
    'config'?: FormElementDynamicDataSourceConfigBeta;
    /**
     * DataSourceType is a FormElementDataSourceType value STATIC FormElementDataSourceTypeStatic INTERNAL FormElementDataSourceTypeInternal SEARCH FormElementDataSourceTypeSearch FORM_INPUT FormElementDataSourceTypeFormInput
     * @type {string}
     * @memberof FormElementDynamicDataSourceBeta
     */
    'dataSourceType'?: FormElementDynamicDataSourceBetaDataSourceTypeEnum;
}
export declare const FormElementDynamicDataSourceBetaDataSourceTypeEnum: {
    readonly Static: "STATIC";
    readonly Internal: "INTERNAL";
    readonly Search: "SEARCH";
    readonly FormInput: "FORM_INPUT";
};
export type FormElementDynamicDataSourceBetaDataSourceTypeEnum = typeof FormElementDynamicDataSourceBetaDataSourceTypeEnum[keyof typeof FormElementDynamicDataSourceBetaDataSourceTypeEnum];
/**
 *
 * @export
 * @interface FormElementDynamicDataSourceConfigBeta
 */
export interface FormElementDynamicDataSourceConfigBeta {
    /**
     * AggregationBucketField is the aggregation bucket field name
     * @type {string}
     * @memberof FormElementDynamicDataSourceConfigBeta
     */
    'aggregationBucketField'?: string;
    /**
     * Indices is a list of indices to use
     * @type {Array<string>}
     * @memberof FormElementDynamicDataSourceConfigBeta
     */
    'indices'?: Array<FormElementDynamicDataSourceConfigBetaIndicesEnum>;
    /**
     * ObjectType is a PreDefinedSelectOption value IDENTITY PreDefinedSelectOptionIdentity ACCESS_PROFILE PreDefinedSelectOptionAccessProfile SOURCES PreDefinedSelectOptionSources ROLE PreDefinedSelectOptionRole ENTITLEMENT PreDefinedSelectOptionEntitlement
     * @type {string}
     * @memberof FormElementDynamicDataSourceConfigBeta
     */
    'objectType'?: FormElementDynamicDataSourceConfigBetaObjectTypeEnum;
    /**
     * Query is a text
     * @type {string}
     * @memberof FormElementDynamicDataSourceConfigBeta
     */
    'query'?: string;
}
export declare const FormElementDynamicDataSourceConfigBetaIndicesEnum: {
    readonly Accessprofiles: "accessprofiles";
    readonly Accountactivities: "accountactivities";
    readonly Entitlements: "entitlements";
    readonly Identities: "identities";
    readonly Events: "events";
    readonly Roles: "roles";
    readonly Star: "*";
};
export type FormElementDynamicDataSourceConfigBetaIndicesEnum = typeof FormElementDynamicDataSourceConfigBetaIndicesEnum[keyof typeof FormElementDynamicDataSourceConfigBetaIndicesEnum];
export declare const FormElementDynamicDataSourceConfigBetaObjectTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Sources: "SOURCES";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type FormElementDynamicDataSourceConfigBetaObjectTypeEnum = typeof FormElementDynamicDataSourceConfigBetaObjectTypeEnum[keyof typeof FormElementDynamicDataSourceConfigBetaObjectTypeEnum];
/**
 *
 * @export
 * @interface FormElementPreviewRequestBeta
 */
export interface FormElementPreviewRequestBeta {
    /**
     *
     * @type {FormElementDynamicDataSourceBeta}
     * @memberof FormElementPreviewRequestBeta
     */
    'dataSource'?: FormElementDynamicDataSourceBeta;
}
/**
 * Set of FormElementValidation items.
 * @export
 * @interface FormElementValidationsSetBeta
 */
export interface FormElementValidationsSetBeta {
    /**
     *
     * @type {string}
     * @memberof FormElementValidationsSetBeta
     */
    'validationType'?: FormElementValidationsSetBetaValidationTypeEnum;
}
export declare const FormElementValidationsSetBetaValidationTypeEnum: {
    readonly Required: "REQUIRED";
    readonly MinLength: "MIN_LENGTH";
    readonly MaxLength: "MAX_LENGTH";
    readonly Regex: "REGEX";
    readonly Date: "DATE";
    readonly MaxDate: "MAX_DATE";
    readonly MinDate: "MIN_DATE";
    readonly LessThanDate: "LESS_THAN_DATE";
    readonly Phone: "PHONE";
    readonly Email: "EMAIL";
    readonly DataSource: "DATA_SOURCE";
    readonly Textarea: "TEXTAREA";
};
export type FormElementValidationsSetBetaValidationTypeEnum = typeof FormElementValidationsSetBetaValidationTypeEnum[keyof typeof FormElementValidationsSetBetaValidationTypeEnum];
/**
 *
 * @export
 * @interface FormErrorBeta
 */
export interface FormErrorBeta {
    /**
     * Key is the technical key
     * @type {string}
     * @memberof FormErrorBeta
     */
    'key'?: string;
    /**
     * Messages is a list of web.ErrorMessage items
     * @type {Array<ErrorMessageBeta>}
     * @memberof FormErrorBeta
     */
    'messages'?: Array<ErrorMessageBeta>;
    /**
     * Value is the value associated with a Key
     * @type {object}
     * @memberof FormErrorBeta
     */
    'value'?: object;
}
/**
 *
 * @export
 * @interface FormInstanceCreatedByBeta
 */
export interface FormInstanceCreatedByBeta {
    /**
     * ID is a unique identifier
     * @type {string}
     * @memberof FormInstanceCreatedByBeta
     */
    'id'?: string;
    /**
     * Type is a form instance created by type enum value WORKFLOW_EXECUTION FormInstanceCreatedByTypeWorkflowExecution SOURCE FormInstanceCreatedByTypeSource
     * @type {string}
     * @memberof FormInstanceCreatedByBeta
     */
    'type'?: FormInstanceCreatedByBetaTypeEnum;
}
export declare const FormInstanceCreatedByBetaTypeEnum: {
    readonly WorkflowExecution: "WORKFLOW_EXECUTION";
    readonly Source: "SOURCE";
};
export type FormInstanceCreatedByBetaTypeEnum = typeof FormInstanceCreatedByBetaTypeEnum[keyof typeof FormInstanceCreatedByBetaTypeEnum];
/**
 *
 * @export
 * @interface FormInstanceRecipientBeta
 */
export interface FormInstanceRecipientBeta {
    /**
     * ID is a unique identifier
     * @type {string}
     * @memberof FormInstanceRecipientBeta
     */
    'id'?: string;
    /**
     * Type is a FormInstanceRecipientType value IDENTITY FormInstanceRecipientIdentity
     * @type {string}
     * @memberof FormInstanceRecipientBeta
     */
    'type'?: FormInstanceRecipientBetaTypeEnum;
}
export declare const FormInstanceRecipientBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type FormInstanceRecipientBetaTypeEnum = typeof FormInstanceRecipientBetaTypeEnum[keyof typeof FormInstanceRecipientBetaTypeEnum];
/**
 *
 * @export
 * @interface FormInstanceResponseBeta
 */
export interface FormInstanceResponseBeta {
    /**
     * Created is the date the form instance was assigned
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'created'?: string;
    /**
     *
     * @type {FormInstanceCreatedByBeta}
     * @memberof FormInstanceResponseBeta
     */
    'createdBy'?: FormInstanceCreatedByBeta;
    /**
     * Expire is the maximum amount of time that a form can be in progress. After this time is reached then the form will be moved to a CANCELED state automatically. The user will no longer be able to complete the submission. When a form instance is expires an audit log will be generated for that record
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'expire'?: string;
    /**
     * FormConditions is the conditional logic that modify the form dynamically modify the form as the recipient is interacting out the form
     * @type {Array<FormConditionBeta>}
     * @memberof FormInstanceResponseBeta
     */
    'formConditions'?: Array<FormConditionBeta>;
    /**
     * FormData is the data provided by the form on submit. The data is in a key -> value map
     * @type {{ [key: string]: object; }}
     * @memberof FormInstanceResponseBeta
     */
    'formData'?: {
        [key: string]: object;
    };
    /**
     * FormDefinitionID is the id of the form definition that created this form
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'formDefinitionId'?: string;
    /**
     * FormElements is the configuration of the form, this would be a repeat of the fields from the form-config
     * @type {Array<FormElementBeta>}
     * @memberof FormInstanceResponseBeta
     */
    'formElements'?: Array<FormElementBeta>;
    /**
     * FormErrors is an array of form validation errors from the last time the form instance was transitioned to the SUBMITTED state. If the form instance had validation errors then it would be moved to the IN PROGRESS state where the client can retrieve these errors
     * @type {Array<FormErrorBeta>}
     * @memberof FormInstanceResponseBeta
     */
    'formErrors'?: Array<FormErrorBeta>;
    /**
     * FormInput is an object of form input labels to value
     * @type {{ [key: string]: object; }}
     * @memberof FormInstanceResponseBeta
     */
    'formInput'?: {
        [key: string]: object;
    } | null;
    /**
     * Unique guid identifying this form instance
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'id'?: string;
    /**
     * Modified is the last date the form instance was modified
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'modified'?: string;
    /**
     * Recipients references to the recipient of a form. The recipients are those who are responsible for filling out a form and completing it
     * @type {Array<FormInstanceRecipientBeta>}
     * @memberof FormInstanceResponseBeta
     */
    'recipients'?: Array<FormInstanceRecipientBeta>;
    /**
     * StandAloneForm is a boolean flag to indicate if this form should be available for users to complete via the standalone form UI or should this only be available to be completed by as an embedded form
     * @type {boolean}
     * @memberof FormInstanceResponseBeta
     */
    'standAloneForm'?: boolean;
    /**
     * StandAloneFormURL is the URL where this form may be completed by the designated recipients using the standalone form UI
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'standAloneFormUrl'?: string;
    /**
     * State the state of the form instance ASSIGNED FormInstanceStateAssigned IN_PROGRESS FormInstanceStateInProgress SUBMITTED FormInstanceStateSubmitted COMPLETED FormInstanceStateCompleted CANCELLED FormInstanceStateCancelled
     * @type {string}
     * @memberof FormInstanceResponseBeta
     */
    'state'?: FormInstanceResponseBetaStateEnum;
}
export declare const FormInstanceResponseBetaStateEnum: {
    readonly Assigned: "ASSIGNED";
    readonly InProgress: "IN_PROGRESS";
    readonly Submitted: "SUBMITTED";
    readonly Completed: "COMPLETED";
    readonly Cancelled: "CANCELLED";
};
export type FormInstanceResponseBetaStateEnum = typeof FormInstanceResponseBetaStateEnum[keyof typeof FormInstanceResponseBetaStateEnum];
/**
 *
 * @export
 * @interface FormItemBeta
 */
export interface FormItemBeta {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof FormItemBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface FormItemDetailsBeta
 */
export interface FormItemDetailsBeta {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof FormItemDetailsBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface FormOwnerBeta
 */
export interface FormOwnerBeta {
    /**
     * FormOwnerType value. IDENTITY FormOwnerTypeIdentity
     * @type {string}
     * @memberof FormOwnerBeta
     */
    'type'?: FormOwnerBetaTypeEnum;
    /**
     * Unique identifier of the form\'s owner.
     * @type {string}
     * @memberof FormOwnerBeta
     */
    'id'?: string;
    /**
     * Name of the form\'s owner.
     * @type {string}
     * @memberof FormOwnerBeta
     */
    'name'?: string;
}
export declare const FormOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type FormOwnerBetaTypeEnum = typeof FormOwnerBetaTypeEnum[keyof typeof FormOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface FormUsedByBeta
 */
export interface FormUsedByBeta {
    /**
     * FormUsedByType value.  WORKFLOW FormUsedByTypeWorkflow SOURCE FormUsedByTypeSource MySailPoint FormUsedByType
     * @type {string}
     * @memberof FormUsedByBeta
     */
    'type'?: FormUsedByBetaTypeEnum;
    /**
     * Unique identifier of the system using the form.
     * @type {string}
     * @memberof FormUsedByBeta
     */
    'id'?: string;
    /**
     * Name of the system using the form.
     * @type {string}
     * @memberof FormUsedByBeta
     */
    'name'?: string;
}
export declare const FormUsedByBetaTypeEnum: {
    readonly Workflow: "WORKFLOW";
    readonly Source: "SOURCE";
    readonly MySailPoint: "MySailPoint";
};
export type FormUsedByBetaTypeEnum = typeof FormUsedByBetaTypeEnum[keyof typeof FormUsedByBetaTypeEnum];
/**
 *
 * @export
 * @interface ForwardApprovalDtoBeta
 */
export interface ForwardApprovalDtoBeta {
    /**
     * The Id of the new owner
     * @type {string}
     * @memberof ForwardApprovalDtoBeta
     */
    'newOwnerId': string;
    /**
     * The comment provided by the forwarder
     * @type {string}
     * @memberof ForwardApprovalDtoBeta
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface FullcampaignAllOfBeta
 */
export interface FullcampaignAllOfBeta {
    /**
     * Modified time of the campaign
     * @type {string}
     * @memberof FullcampaignAllOfBeta
     */
    'modified'?: string;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof FullcampaignAllOfBeta
     */
    'correlatedStatus'?: FullcampaignAllOfBetaCorrelatedStatusEnum;
    /**
     *
     * @type {FullcampaignAllOfFilterBeta}
     * @memberof FullcampaignAllOfBeta
     */
    'filter'?: FullcampaignAllOfFilterBeta;
    /**
     * Determines if comments on sunset date changes are required.
     * @type {boolean}
     * @memberof FullcampaignAllOfBeta
     */
    'sunsetCommentsRequired'?: boolean;
    /**
     *
     * @type {FullcampaignAllOfSourceOwnerCampaignInfoBeta}
     * @memberof FullcampaignAllOfBeta
     */
    'sourceOwnerCampaignInfo'?: FullcampaignAllOfSourceOwnerCampaignInfoBeta;
    /**
     *
     * @type {FullcampaignAllOfSearchCampaignInfoBeta}
     * @memberof FullcampaignAllOfBeta
     */
    'searchCampaignInfo'?: FullcampaignAllOfSearchCampaignInfoBeta;
    /**
     *
     * @type {FullcampaignAllOfRoleCompositionCampaignInfoBeta}
     * @memberof FullcampaignAllOfBeta
     */
    'roleCompositionCampaignInfo'?: FullcampaignAllOfRoleCompositionCampaignInfoBeta;
    /**
     * A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).
     * @type {Array<FullcampaignAllOfSourcesWithOrphanEntitlementsBeta>}
     * @memberof FullcampaignAllOfBeta
     */
    'sourcesWithOrphanEntitlements'?: Array<FullcampaignAllOfSourcesWithOrphanEntitlementsBeta>;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof FullcampaignAllOfBeta
     */
    'mandatoryCommentRequirement'?: FullcampaignAllOfBetaMandatoryCommentRequirementEnum;
}
export declare const FullcampaignAllOfBetaCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type FullcampaignAllOfBetaCorrelatedStatusEnum = typeof FullcampaignAllOfBetaCorrelatedStatusEnum[keyof typeof FullcampaignAllOfBetaCorrelatedStatusEnum];
export declare const FullcampaignAllOfBetaMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type FullcampaignAllOfBetaMandatoryCommentRequirementEnum = typeof FullcampaignAllOfBetaMandatoryCommentRequirementEnum[keyof typeof FullcampaignAllOfBetaMandatoryCommentRequirementEnum];
/**
 * Determines which items will be included in this campaign. The default campaign filter is used if this field is left blank.
 * @export
 * @interface FullcampaignAllOfFilterBeta
 */
export interface FullcampaignAllOfFilterBeta {
    /**
     * The ID of whatever type of filter is being used.
     * @type {string}
     * @memberof FullcampaignAllOfFilterBeta
     */
    'id'?: string;
    /**
     * Type of the filter
     * @type {string}
     * @memberof FullcampaignAllOfFilterBeta
     */
    'type'?: FullcampaignAllOfFilterBetaTypeEnum;
    /**
     * Name of the filter
     * @type {string}
     * @memberof FullcampaignAllOfFilterBeta
     */
    'name'?: string;
}
export declare const FullcampaignAllOfFilterBetaTypeEnum: {
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly Rule: "RULE";
};
export type FullcampaignAllOfFilterBetaTypeEnum = typeof FullcampaignAllOfFilterBetaTypeEnum[keyof typeof FullcampaignAllOfFilterBetaTypeEnum];
/**
 * Optional configuration options for role composition campaigns.
 * @export
 * @interface FullcampaignAllOfRoleCompositionCampaignInfoBeta
 */
export interface FullcampaignAllOfRoleCompositionCampaignInfoBeta {
    /**
     *
     * @type {FullcampaignAllOfSearchCampaignInfoReviewerBeta}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoBeta
     */
    'reviewer'?: FullcampaignAllOfSearchCampaignInfoReviewerBeta;
    /**
     * Optional list of roles to include in this campaign. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.
     * @type {Array<string>}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoBeta
     */
    'roleIds'?: Array<string>;
    /**
     *
     * @type {FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoBeta
     */
    'remediatorRef': FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta;
    /**
     * Optional search query to scope this campaign to a set of roles. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.
     * @type {string}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoBeta
     */
    'query'?: string;
    /**
     * Describes this role composition campaign. Intended for storing the query used, and possibly the number of roles selected/available.
     * @type {string}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoBeta
     */
    'description'?: string;
}
/**
 * This determines who remediation tasks will be assigned to. Remediation tasks are created for each revoke decision on items in the campaign. The only legal remediator type is \'IDENTITY\', and the chosen identity must be a Role Admin or Org Admin.
 * @export
 * @interface FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta
 */
export interface FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta {
    /**
     * Legal Remediator Type
     * @type {string}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta
     */
    'type': FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum;
    /**
     * The ID of the remediator.
     * @type {string}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta
     */
    'id': string;
    /**
     * The name of the remediator.
     * @type {string}
     * @memberof FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBeta
     */
    'name'?: string;
}
export declare const FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum = typeof FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum[keyof typeof FullcampaignAllOfRoleCompositionCampaignInfoRemediatorRefBetaTypeEnum];
/**
 * Must be set only if the campaign type is SEARCH.
 * @export
 * @interface FullcampaignAllOfSearchCampaignInfoBeta
 */
export interface FullcampaignAllOfSearchCampaignInfoBeta {
    /**
     * The type of search campaign represented.
     * @type {string}
     * @memberof FullcampaignAllOfSearchCampaignInfoBeta
     */
    'type': FullcampaignAllOfSearchCampaignInfoBetaTypeEnum;
    /**
     * Describes this search campaign. Intended for storing the query used, and possibly the number of identities selected/available.
     * @type {string}
     * @memberof FullcampaignAllOfSearchCampaignInfoBeta
     */
    'description'?: string;
    /**
     *
     * @type {FullcampaignAllOfSearchCampaignInfoReviewerBeta}
     * @memberof FullcampaignAllOfSearchCampaignInfoBeta
     */
    'reviewer'?: FullcampaignAllOfSearchCampaignInfoReviewerBeta;
    /**
     * The scope for the campaign. The campaign will cover identities returned by the query and identities that have access items returned by the query. One of `query` or `identityIds` must be set.
     * @type {string}
     * @memberof FullcampaignAllOfSearchCampaignInfoBeta
     */
    'query'?: string;
    /**
     * A direct list of identities to include in this campaign. One of `identityIds` or `query` must be set.
     * @type {Array<string>}
     * @memberof FullcampaignAllOfSearchCampaignInfoBeta
     */
    'identityIds'?: Array<string>;
    /**
     * Further reduces the scope of the campaign by excluding identities (from `query` or `identityIds`) that do not have this access.
     * @type {Array<AccessConstraintBeta>}
     * @memberof FullcampaignAllOfSearchCampaignInfoBeta
     */
    'accessConstraints'?: Array<AccessConstraintBeta>;
}
export declare const FullcampaignAllOfSearchCampaignInfoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly Access: "ACCESS";
};
export type FullcampaignAllOfSearchCampaignInfoBetaTypeEnum = typeof FullcampaignAllOfSearchCampaignInfoBetaTypeEnum[keyof typeof FullcampaignAllOfSearchCampaignInfoBetaTypeEnum];
/**
 * If specified, this identity or governance group will be the reviewer for all certifications in this campaign. The allowed DTO types are IDENTITY and GOVERNANCE_GROUP.
 * @export
 * @interface FullcampaignAllOfSearchCampaignInfoReviewerBeta
 */
export interface FullcampaignAllOfSearchCampaignInfoReviewerBeta {
    /**
     * The reviewer\'s DTO type.
     * @type {string}
     * @memberof FullcampaignAllOfSearchCampaignInfoReviewerBeta
     */
    'type'?: FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum;
    /**
     * The reviewer\'s ID.
     * @type {string}
     * @memberof FullcampaignAllOfSearchCampaignInfoReviewerBeta
     */
    'id'?: string;
    /**
     * The reviewer\'s name.
     * @type {string}
     * @memberof FullcampaignAllOfSearchCampaignInfoReviewerBeta
     */
    'name'?: string;
}
export declare const FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum = typeof FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum[keyof typeof FullcampaignAllOfSearchCampaignInfoReviewerBetaTypeEnum];
/**
 * Must be set only if the campaign type is SOURCE_OWNER.
 * @export
 * @interface FullcampaignAllOfSourceOwnerCampaignInfoBeta
 */
export interface FullcampaignAllOfSourceOwnerCampaignInfoBeta {
    /**
     * The list of sources to be included in the campaign.
     * @type {Array<string>}
     * @memberof FullcampaignAllOfSourceOwnerCampaignInfoBeta
     */
    'sourceIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface FullcampaignAllOfSourcesWithOrphanEntitlementsBeta
 */
export interface FullcampaignAllOfSourcesWithOrphanEntitlementsBeta {
    /**
     * Id of the source
     * @type {string}
     * @memberof FullcampaignAllOfSourcesWithOrphanEntitlementsBeta
     */
    'id'?: string;
    /**
     * Type
     * @type {string}
     * @memberof FullcampaignAllOfSourcesWithOrphanEntitlementsBeta
     */
    'type'?: FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum;
    /**
     * Name of the source
     * @type {string}
     * @memberof FullcampaignAllOfSourcesWithOrphanEntitlementsBeta
     */
    'name'?: string;
}
export declare const FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum = typeof FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum[keyof typeof FullcampaignAllOfSourcesWithOrphanEntitlementsBetaTypeEnum];
/**
 *
 * @export
 * @interface FullcampaignBeta
 */
export interface FullcampaignBeta {
    /**
     * Id of the campaign
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'id'?: string;
    /**
     * The campaign name. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'name': string;
    /**
     * The campaign description. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'description': string;
    /**
     * The campaign\'s completion deadline.  This date must be in the future in order to activate the campaign.  If you try to activate a campaign with a deadline of today or in the past, you will receive a 400 error response.
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'deadline'?: string;
    /**
     * The type of campaign. Could be extended in the future.
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'type': FullcampaignBetaTypeEnum;
    /**
     * Enables email notification for this campaign
     * @type {boolean}
     * @memberof FullcampaignBeta
     */
    'emailNotificationEnabled'?: boolean;
    /**
     * Allows auto revoke for this campaign
     * @type {boolean}
     * @memberof FullcampaignBeta
     */
    'autoRevokeAllowed'?: boolean;
    /**
     * Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off then campaigns generated from this template will indicate false. The real value will then be returned if IAI is ever enabled for the org in the future.
     * @type {boolean}
     * @memberof FullcampaignBeta
     */
    'recommendationsEnabled'?: boolean;
    /**
     * The campaign\'s current status.
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'status'?: FullcampaignBetaStatusEnum;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {object}
     * @memberof FullcampaignBeta
     */
    'correlatedStatus'?: FullcampaignBetaCorrelatedStatusEnum;
    /**
     * Created time of the campaign
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'created'?: string;
    /**
     * The total number of certifications in this campaign.
     * @type {number}
     * @memberof FullcampaignBeta
     */
    'totalCertifications'?: number;
    /**
     * The number of completed certifications in this campaign.
     * @type {number}
     * @memberof FullcampaignBeta
     */
    'completedCertifications'?: number;
    /**
     * A list of errors and warnings that have accumulated.
     * @type {Array<CampaignAlertBeta>}
     * @memberof FullcampaignBeta
     */
    'alerts'?: Array<CampaignAlertBeta>;
    /**
     * Modified time of the campaign
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'modified'?: string;
    /**
     *
     * @type {FullcampaignAllOfFilterBeta}
     * @memberof FullcampaignBeta
     */
    'filter'?: FullcampaignAllOfFilterBeta;
    /**
     * Determines if comments on sunset date changes are required.
     * @type {boolean}
     * @memberof FullcampaignBeta
     */
    'sunsetCommentsRequired'?: boolean;
    /**
     *
     * @type {FullcampaignAllOfSourceOwnerCampaignInfoBeta}
     * @memberof FullcampaignBeta
     */
    'sourceOwnerCampaignInfo'?: FullcampaignAllOfSourceOwnerCampaignInfoBeta;
    /**
     *
     * @type {FullcampaignAllOfSearchCampaignInfoBeta}
     * @memberof FullcampaignBeta
     */
    'searchCampaignInfo'?: FullcampaignAllOfSearchCampaignInfoBeta;
    /**
     *
     * @type {FullcampaignAllOfRoleCompositionCampaignInfoBeta}
     * @memberof FullcampaignBeta
     */
    'roleCompositionCampaignInfo'?: FullcampaignAllOfRoleCompositionCampaignInfoBeta;
    /**
     * A list of sources in the campaign that contain \\\"orphan entitlements\\\" (entitlements without a corresponding Managed Attribute). An empty list indicates the campaign has no orphan entitlements. Null indicates there may be unknown orphan entitlements in the campaign (the campaign was created before this feature was implemented).
     * @type {Array<FullcampaignAllOfSourcesWithOrphanEntitlementsBeta>}
     * @memberof FullcampaignBeta
     */
    'sourcesWithOrphanEntitlements'?: Array<FullcampaignAllOfSourcesWithOrphanEntitlementsBeta>;
    /**
     * Determines whether comments are required for decisions during certification reviews. You can require comments for all decisions, revoke-only decisions, or no decisions. By default, comments are not required for decisions.
     * @type {string}
     * @memberof FullcampaignBeta
     */
    'mandatoryCommentRequirement'?: FullcampaignBetaMandatoryCommentRequirementEnum;
}
export declare const FullcampaignBetaTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type FullcampaignBetaTypeEnum = typeof FullcampaignBetaTypeEnum[keyof typeof FullcampaignBetaTypeEnum];
export declare const FullcampaignBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Staged: "STAGED";
    readonly Canceling: "CANCELING";
    readonly Activating: "ACTIVATING";
    readonly Active: "ACTIVE";
    readonly Completing: "COMPLETING";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
    readonly Archived: "ARCHIVED";
};
export type FullcampaignBetaStatusEnum = typeof FullcampaignBetaStatusEnum[keyof typeof FullcampaignBetaStatusEnum];
export declare const FullcampaignBetaCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type FullcampaignBetaCorrelatedStatusEnum = typeof FullcampaignBetaCorrelatedStatusEnum[keyof typeof FullcampaignBetaCorrelatedStatusEnum];
export declare const FullcampaignBetaMandatoryCommentRequirementEnum: {
    readonly AllDecisions: "ALL_DECISIONS";
    readonly RevokeOnlyDecisions: "REVOKE_ONLY_DECISIONS";
    readonly NoDecisions: "NO_DECISIONS";
};
export type FullcampaignBetaMandatoryCommentRequirementEnum = typeof FullcampaignBetaMandatoryCommentRequirementEnum[keyof typeof FullcampaignBetaMandatoryCommentRequirementEnum];
/**
 *
 * @export
 * @interface GenerateRandomStringBeta
 */
export interface GenerateRandomStringBeta {
    /**
     * This must always be set to \"Cloud Services Deployment Utility\"
     * @type {string}
     * @memberof GenerateRandomStringBeta
     */
    'name': string;
    /**
     * The operation to perform `generateRandomString`
     * @type {string}
     * @memberof GenerateRandomStringBeta
     */
    'operation': string;
    /**
     * This must be either \"true\" or \"false\" to indicate whether the generator logic should include numbers
     * @type {boolean}
     * @memberof GenerateRandomStringBeta
     */
    'includeNumbers': boolean;
    /**
     * This must be either \"true\" or \"false\" to indicate whether the generator logic should include special characters
     * @type {boolean}
     * @memberof GenerateRandomStringBeta
     */
    'includeSpecialChars': boolean;
    /**
     * This specifies how long the randomly generated string needs to be   >NOTE Due to identity attribute data constraints, the maximum allowable value is 450 characters
     * @type {string}
     * @memberof GenerateRandomStringBeta
     */
    'length': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof GenerateRandomStringBeta
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 * @type GetActiveCampaigns200ResponseInnerBeta
 * @export
 */
export type GetActiveCampaigns200ResponseInnerBeta = CampaignBeta | SlimcampaignBeta;
/**
 *
 * @export
 * @interface GetFormDefinitionByKey400ResponseBeta
 */
export interface GetFormDefinitionByKey400ResponseBeta {
    /**
     *
     * @type {string}
     * @memberof GetFormDefinitionByKey400ResponseBeta
     */
    'detailCode'?: string;
    /**
     *
     * @type {Array<ErrorMessageBeta>}
     * @memberof GetFormDefinitionByKey400ResponseBeta
     */
    'messages'?: Array<ErrorMessageBeta>;
    /**
     *
     * @type {number}
     * @memberof GetFormDefinitionByKey400ResponseBeta
     */
    'statusCode'?: number;
    /**
     *
     * @type {string}
     * @memberof GetFormDefinitionByKey400ResponseBeta
     */
    'trackingId'?: string;
}
/**
 *
 * @export
 * @interface GetHistoricalIdentityEvents200ResponseInnerBeta
 */
export interface GetHistoricalIdentityEvents200ResponseInnerBeta {
    /**
     *
     * @type {AccessItemAssociatedAccessItemBeta}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'accessItem'?: AccessItemAssociatedAccessItemBeta;
    /**
     * the identity id
     * @type {string}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'identityId'?: string;
    /**
     * the event type
     * @type {string}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'eventType'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'dt'?: string;
    /**
     *
     * @type {CorrelatedGovernanceEventBeta}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'governanceEvent'?: CorrelatedGovernanceEventBeta;
    /**
     *
     * @type {Array<AttributeChangeBeta>}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'changes'?: Array<AttributeChangeBeta>;
    /**
     *
     * @type {AccessRequestResponseBeta}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'accessRequest'?: AccessRequestResponseBeta;
    /**
     * the id of the certification item
     * @type {string}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'certificationId'?: string;
    /**
     * the certification item name
     * @type {string}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'certificationName'?: string;
    /**
     * the date ceritification was signed
     * @type {string}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'signedDate'?: string;
    /**
     * this field is deprecated and may go away
     * @type {Array<CertifierResponseBeta>}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'certifiers'?: Array<CertifierResponseBeta>;
    /**
     * The list of identities who review this certification
     * @type {Array<CertifierResponseBeta>}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'reviewers'?: Array<CertifierResponseBeta>;
    /**
     *
     * @type {CertifierResponseBeta}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'signer'?: CertifierResponseBeta;
    /**
     *
     * @type {AccountStatusChangedAccountBeta}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'account'?: AccountStatusChangedAccountBeta;
    /**
     *
     * @type {AccountStatusChangedStatusChangeBeta}
     * @memberof GetHistoricalIdentityEvents200ResponseInnerBeta
     */
    'statusChange'?: AccountStatusChangedStatusChangeBeta;
}
/**
 *
 * @export
 * @interface GetOAuthClientResponseBeta
 */
export interface GetOAuthClientResponseBeta {
    /**
     * ID of the OAuth client
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'id': string;
    /**
     * The name of the business the API Client should belong to
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'businessName': string | null;
    /**
     * The homepage URL associated with the owner of the API Client
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'homepageUrl': string | null;
    /**
     * A human-readable name for the API Client
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'name': string;
    /**
     * A description of the API Client
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'description': string | null;
    /**
     * The number of seconds an access token generated for this API Client is valid for
     * @type {number}
     * @memberof GetOAuthClientResponseBeta
     */
    'accessTokenValiditySeconds': number;
    /**
     * The number of seconds a refresh token generated for this API Client is valid for
     * @type {number}
     * @memberof GetOAuthClientResponseBeta
     */
    'refreshTokenValiditySeconds': number;
    /**
     * A list of the approved redirect URIs used with the authorization_code flow
     * @type {Array<string>}
     * @memberof GetOAuthClientResponseBeta
     */
    'redirectUris': Array<string> | null;
    /**
     * A list of OAuth 2.0 grant types this API Client can be used with
     * @type {Array<GrantTypeBeta>}
     * @memberof GetOAuthClientResponseBeta
     */
    'grantTypes': Array<GrantTypeBeta>;
    /**
     *
     * @type {AccessTypeBeta}
     * @memberof GetOAuthClientResponseBeta
     */
    'accessType': AccessTypeBeta;
    /**
     *
     * @type {ClientTypeBeta}
     * @memberof GetOAuthClientResponseBeta
     */
    'type': ClientTypeBeta;
    /**
     * An indicator of whether the API Client can be used for requests internal to IDN
     * @type {boolean}
     * @memberof GetOAuthClientResponseBeta
     */
    'internal': boolean;
    /**
     * An indicator of whether the API Client is enabled for use
     * @type {boolean}
     * @memberof GetOAuthClientResponseBeta
     */
    'enabled': boolean;
    /**
     * An indicator of whether the API Client supports strong authentication
     * @type {boolean}
     * @memberof GetOAuthClientResponseBeta
     */
    'strongAuthSupported': boolean;
    /**
     * An indicator of whether the API Client supports the serialization of SAML claims when used with the authorization_code flow
     * @type {boolean}
     * @memberof GetOAuthClientResponseBeta
     */
    'claimsSupported': boolean;
    /**
     * The date and time, down to the millisecond, when the API Client was created
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'created': string;
    /**
     * The date and time, down to the millisecond, when the API Client was last updated
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'modified': string;
    /**
     *
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'secret'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'metadata'?: string | null;
    /**
     * The date and time, down to the millisecond, when this API Client was last used to generate an access token. This timestamp does not get updated on every API Client usage, but only once a day. This property can be useful for identifying which API Clients are no longer actively used and can be removed.
     * @type {string}
     * @memberof GetOAuthClientResponseBeta
     */
    'lastUsed'?: string | null;
    /**
     * Scopes of the API Client.
     * @type {Array<string>}
     * @memberof GetOAuthClientResponseBeta
     */
    'scope': Array<string> | null;
}
/**
 *
 * @export
 * @interface GetPersonalAccessTokenResponseBeta
 */
export interface GetPersonalAccessTokenResponseBeta {
    /**
     * The ID of the personal access token (to be used as the username for Basic Auth).
     * @type {string}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'id': string;
    /**
     * The name of the personal access token. Cannot be the same as other personal access tokens owned by a user.
     * @type {string}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'name': string;
    /**
     * Scopes of the personal  access token.
     * @type {Array<string>}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'scope': Array<string> | null;
    /**
     *
     * @type {PatOwnerBeta}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'owner': PatOwnerBeta;
    /**
     * The date and time, down to the millisecond, when this personal access token was created.
     * @type {string}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'created': string;
    /**
     * The date and time, down to the millisecond, when this personal access token was last used to generate an access token. This timestamp does not get updated on every PAT usage, but only once a day. This property can be useful for identifying which PATs are no longer actively used and can be removed.
     * @type {string}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'lastUsed'?: string | null;
    /**
     * If true, this token is managed by the SailPoint platform, and is not visible in the user interface. For example, Workflows will create managed personal access tokens for users who create workflows.
     * @type {boolean}
     * @memberof GetPersonalAccessTokenResponseBeta
     */
    'managed'?: boolean;
}
/**
 *
 * @export
 * @interface GetReferenceIdentityAttributeBeta
 */
export interface GetReferenceIdentityAttributeBeta {
    /**
     * This must always be set to \"Cloud Services Deployment Utility\"
     * @type {string}
     * @memberof GetReferenceIdentityAttributeBeta
     */
    'name': string;
    /**
     * The operation to perform `getReferenceIdentityAttribute`
     * @type {string}
     * @memberof GetReferenceIdentityAttributeBeta
     */
    'operation': string;
    /**
     * This is the SailPoint User Name (uid) value of the identity whose attribute is desired  As a convenience feature, you can use the `manager` keyword to dynamically look up the user\'s manager and then get that manager\'s identity attribute.
     * @type {string}
     * @memberof GetReferenceIdentityAttributeBeta
     */
    'uid': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof GetReferenceIdentityAttributeBeta
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface GetRoleAssignments200ResponseInnerBeta
 */
export interface GetRoleAssignments200ResponseInnerBeta {
    /**
     * Assignment Id
     * @type {string}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'id'?: string;
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'role'?: BaseReferenceDtoBeta;
    /**
     * Comments added by the user when the assignment was made
     * @type {string}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'comments'?: string;
    /**
     * Source describing how this assignment was made
     * @type {string}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'assignmentSource'?: string;
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'assigner'?: BaseReferenceDtoBeta;
    /**
     * Dimensions assigned related to this role
     * @type {Array<BaseReferenceDtoBeta>}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'assignedDimensions'?: Array<BaseReferenceDtoBeta>;
    /**
     *
     * @type {AssignmentContextDtoBeta}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'assignmentContext'?: AssignmentContextDtoBeta;
    /**
     *
     * @type {Array<RoleTargetDtoBeta>}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'accountTargets'?: Array<RoleTargetDtoBeta>;
    /**
     * Date that the assignment will be removed
     * @type {string}
     * @memberof GetRoleAssignments200ResponseInnerBeta
     */
    'removeDate'?: string;
}
/**
 * OAuth2 Grant Type
 * @export
 * @enum {string}
 */
export declare const GrantTypeBeta: {
    readonly ClientCredentials: "CLIENT_CREDENTIALS";
    readonly AuthorizationCode: "AUTHORIZATION_CODE";
    readonly RefreshToken: "REFRESH_TOKEN";
};
export type GrantTypeBeta = typeof GrantTypeBeta[keyof typeof GrantTypeBeta];
/**
 * Defines the HTTP Authentication type. Additional values may be added in the future.  If *NO_AUTH* is selected, no extra information will be in HttpConfig.  If *BASIC_AUTH* is selected, HttpConfig will include BasicAuthConfig with Username and Password as strings.  If *BEARER_TOKEN* is selected, HttpConfig will include BearerTokenAuthConfig with Token as string.
 * @export
 * @enum {string}
 */
export declare const HttpAuthenticationTypeBeta: {
    readonly NoAuth: "NO_AUTH";
    readonly BasicAuth: "BASIC_AUTH";
    readonly BearerToken: "BEARER_TOKEN";
};
export type HttpAuthenticationTypeBeta = typeof HttpAuthenticationTypeBeta[keyof typeof HttpAuthenticationTypeBeta];
/**
 *
 * @export
 * @interface HttpConfigBeta
 */
export interface HttpConfigBeta {
    /**
     * URL of the external/custom integration.
     * @type {string}
     * @memberof HttpConfigBeta
     */
    'url': string;
    /**
     *
     * @type {HttpDispatchModeBeta}
     * @memberof HttpConfigBeta
     */
    'httpDispatchMode': HttpDispatchModeBeta;
    /**
     *
     * @type {HttpAuthenticationTypeBeta}
     * @memberof HttpConfigBeta
     */
    'httpAuthenticationType'?: HttpAuthenticationTypeBeta;
    /**
     *
     * @type {BasicAuthConfigBeta}
     * @memberof HttpConfigBeta
     */
    'basicAuthConfig'?: BasicAuthConfigBeta | null;
    /**
     *
     * @type {BearerTokenAuthConfigBeta}
     * @memberof HttpConfigBeta
     */
    'bearerTokenAuthConfig'?: BearerTokenAuthConfigBeta | null;
}
/**
 * HTTP response modes, i.e. SYNC, ASYNC, or DYNAMIC.
 * @export
 * @enum {string}
 */
export declare const HttpDispatchModeBeta: {
    readonly Sync: "SYNC";
    readonly Async: "ASYNC";
    readonly Dynamic: "DYNAMIC";
};
export type HttpDispatchModeBeta = typeof HttpDispatchModeBeta[keyof typeof HttpDispatchModeBeta];
/**
 *
 * @export
 * @interface ISO3166Beta
 */
export interface ISO3166Beta {
    /**
     * An optional value to denote which ISO 3166 format to return. Valid values are:   `alpha2` - Two-character country code (e.g., \"US\"); this is the default value if no format is supplied   `alpha3` - Three-character country code (e.g., \"USA\")   `numeric` - The numeric country code (e.g., \"840\")
     * @type {string}
     * @memberof ISO3166Beta
     */
    'format'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ISO3166Beta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ISO3166Beta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface IdentitiesAccountsBulkRequestBeta
 */
export interface IdentitiesAccountsBulkRequestBeta {
    /**
     * The ids of the identities for which enable/disable accounts.
     * @type {Array<string>}
     * @memberof IdentitiesAccountsBulkRequestBeta
     */
    'identityIds'?: Array<string>;
}
/**
 * The definition of an Identity according to the Reassignment Configuration service
 * @export
 * @interface Identity1Beta
 */
export interface Identity1Beta {
    /**
     * The ID of the object
     * @type {string}
     * @memberof Identity1Beta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object
     * @type {string}
     * @memberof Identity1Beta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface IdentityAssociationDetailsAssociationDetailsInnerBeta
 */
export interface IdentityAssociationDetailsAssociationDetailsInnerBeta {
    /**
     * association type with the identity
     * @type {string}
     * @memberof IdentityAssociationDetailsAssociationDetailsInnerBeta
     */
    'associationType'?: string;
    /**
     * the specific resource this identity has ownership on
     * @type {Array<IdentityEntitiesBeta>}
     * @memberof IdentityAssociationDetailsAssociationDetailsInnerBeta
     */
    'entities'?: Array<IdentityEntitiesBeta>;
}
/**
 *
 * @export
 * @interface IdentityAssociationDetailsBeta
 */
export interface IdentityAssociationDetailsBeta {
    /**
     * any additional context information of the http call result
     * @type {string}
     * @memberof IdentityAssociationDetailsBeta
     */
    'message'?: string;
    /**
     * list of all the resource associations for the identity
     * @type {Array<IdentityAssociationDetailsAssociationDetailsInnerBeta>}
     * @memberof IdentityAssociationDetailsBeta
     */
    'associationDetails'?: Array<IdentityAssociationDetailsAssociationDetailsInnerBeta>;
}
/**
 *
 * @export
 * @interface IdentityAttribute1Beta
 */
export interface IdentityAttribute1Beta {
    /**
     * The system (camel-cased) name of the identity attribute to bring in
     * @type {string}
     * @memberof IdentityAttribute1Beta
     */
    'name': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof IdentityAttribute1Beta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof IdentityAttribute1Beta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface IdentityAttributeBeta
 */
export interface IdentityAttributeBeta {
    /**
     * Identity attribute\'s technical name.
     * @type {string}
     * @memberof IdentityAttributeBeta
     */
    'name': string;
    /**
     * Identity attribute\'s business-friendly name.
     * @type {string}
     * @memberof IdentityAttributeBeta
     */
    'displayName'?: string;
    /**
     * Indicates whether the attribute is \'standard\' or \'default\'.
     * @type {boolean}
     * @memberof IdentityAttributeBeta
     */
    'standard'?: boolean;
    /**
     * Identity attribute\'s type.
     * @type {string}
     * @memberof IdentityAttributeBeta
     */
    'type'?: string | null;
    /**
     * Indicates whether the identity attribute is multi-valued.
     * @type {boolean}
     * @memberof IdentityAttributeBeta
     */
    'multi'?: boolean;
    /**
     * Indicates whether the identity attribute is searchable.
     * @type {boolean}
     * @memberof IdentityAttributeBeta
     */
    'searchable'?: boolean;
    /**
     * Indicates whether the identity attribute is \'system\', meaning that it doesn\'t have a source and isn\'t configurable.
     * @type {boolean}
     * @memberof IdentityAttributeBeta
     */
    'system'?: boolean;
    /**
     * Identity attribute\'s list of sources - this specifies how the rule\'s value is derived.
     * @type {Array<Source1Beta>}
     * @memberof IdentityAttributeBeta
     */
    'sources'?: Array<Source1Beta>;
}
/**
 * Defines all the identity attribute mapping configurations. This defines how to generate or collect data for each identity attributes in identity refresh process.
 * @export
 * @interface IdentityAttributeConfig1Beta
 */
export interface IdentityAttributeConfig1Beta {
    /**
     * The backend will only promote values if the profile/mapping is enabled.
     * @type {boolean}
     * @memberof IdentityAttributeConfig1Beta
     */
    'enabled'?: boolean;
    /**
     *
     * @type {Array<IdentityAttributeTransform1Beta>}
     * @memberof IdentityAttributeConfig1Beta
     */
    'attributeTransforms'?: Array<IdentityAttributeTransform1Beta>;
}
/**
 *
 * @export
 * @interface IdentityAttributeConfigBeta
 */
export interface IdentityAttributeConfigBeta {
    /**
     * If the profile or mapping is enabled
     * @type {boolean}
     * @memberof IdentityAttributeConfigBeta
     */
    'enabled'?: boolean;
    /**
     *
     * @type {Array<IdentityAttributeTransformBeta>}
     * @memberof IdentityAttributeConfigBeta
     */
    'attributeTransforms'?: Array<IdentityAttributeTransformBeta>;
}
/**
 * Identity attribute IDs.
 * @export
 * @interface IdentityAttributeNamesBeta
 */
export interface IdentityAttributeNamesBeta {
    /**
     * List of identity attributes\' technical names.
     * @type {Array<string>}
     * @memberof IdentityAttributeNamesBeta
     */
    'ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface IdentityAttributePreviewBeta
 */
export interface IdentityAttributePreviewBeta {
    /**
     * Name of the attribute that is being previewed.
     * @type {string}
     * @memberof IdentityAttributePreviewBeta
     */
    'name'?: string;
    /**
     * Value that was derived during the preview.
     * @type {string}
     * @memberof IdentityAttributePreviewBeta
     */
    'value'?: string;
    /**
     * The value of the attribute before the preview.
     * @type {string}
     * @memberof IdentityAttributePreviewBeta
     */
    'previousValue'?: string;
    /**
     *
     * @type {Array<ErrorMessageDtoBeta>}
     * @memberof IdentityAttributePreviewBeta
     */
    'errorMessages'?: Array<ErrorMessageDtoBeta>;
}
/**
 * Defines a transformation definition for an identity attribute.
 * @export
 * @interface IdentityAttributeTransform1Beta
 */
export interface IdentityAttributeTransform1Beta {
    /**
     * Name of the identity attribute.
     * @type {string}
     * @memberof IdentityAttributeTransform1Beta
     */
    'identityAttributeName'?: string;
    /**
     *
     * @type {TransformDefinition1Beta}
     * @memberof IdentityAttributeTransform1Beta
     */
    'transformDefinition'?: TransformDefinition1Beta;
}
/**
 *
 * @export
 * @interface IdentityAttributeTransformBeta
 */
export interface IdentityAttributeTransformBeta {
    /**
     * Name of the identity attribute
     * @type {string}
     * @memberof IdentityAttributeTransformBeta
     */
    'identityAttributeName'?: string;
    /**
     *
     * @type {TransformDefinitionBeta}
     * @memberof IdentityAttributeTransformBeta
     */
    'transformDefinition'?: TransformDefinitionBeta;
}
/**
 *
 * @export
 * @interface IdentityAttributesChangedBeta
 */
export interface IdentityAttributesChangedBeta {
    /**
     *
     * @type {IdentityAttributesChangedIdentityBeta}
     * @memberof IdentityAttributesChangedBeta
     */
    'identity': IdentityAttributesChangedIdentityBeta;
    /**
     * A list of one or more identity attributes that changed on the identity.
     * @type {Array<IdentityAttributesChangedChangesInnerBeta>}
     * @memberof IdentityAttributesChangedBeta
     */
    'changes': Array<IdentityAttributesChangedChangesInnerBeta>;
}
/**
 *
 * @export
 * @interface IdentityAttributesChangedChangesInnerBeta
 */
export interface IdentityAttributesChangedChangesInnerBeta {
    /**
     * The name of the identity attribute that changed.
     * @type {string}
     * @memberof IdentityAttributesChangedChangesInnerBeta
     */
    'attribute': string;
    /**
     *
     * @type {IdentityAttributesChangedChangesInnerOldValueBeta}
     * @memberof IdentityAttributesChangedChangesInnerBeta
     */
    'oldValue'?: IdentityAttributesChangedChangesInnerOldValueBeta | null;
    /**
     *
     * @type {IdentityAttributesChangedChangesInnerNewValueBeta}
     * @memberof IdentityAttributesChangedChangesInnerBeta
     */
    'newValue'?: IdentityAttributesChangedChangesInnerNewValueBeta;
}
/**
 * @type IdentityAttributesChangedChangesInnerNewValueBeta
 * The value of the identity attribute after it changed.
 * @export
 */
export type IdentityAttributesChangedChangesInnerNewValueBeta = Array<string> | boolean | string | {
    [key: string]: IdentityAttributesChangedChangesInnerOldValueOneOfValueBeta;
};
/**
 * @type IdentityAttributesChangedChangesInnerOldValueBeta
 * The value of the identity attribute before it changed.
 * @export
 */
export type IdentityAttributesChangedChangesInnerOldValueBeta = Array<string> | boolean | string | {
    [key: string]: IdentityAttributesChangedChangesInnerOldValueOneOfValueBeta;
};
/**
 * @type IdentityAttributesChangedChangesInnerOldValueOneOfValueBeta
 * @export
 */
export type IdentityAttributesChangedChangesInnerOldValueOneOfValueBeta = boolean | number | string;
/**
 * Identity whose attributes changed.
 * @export
 * @interface IdentityAttributesChangedIdentityBeta
 */
export interface IdentityAttributesChangedIdentityBeta {
    /**
     * DTO type of identity whose attributes changed.
     * @type {string}
     * @memberof IdentityAttributesChangedIdentityBeta
     */
    'type': IdentityAttributesChangedIdentityBetaTypeEnum;
    /**
     * ID of identity whose attributes changed.
     * @type {string}
     * @memberof IdentityAttributesChangedIdentityBeta
     */
    'id': string;
    /**
     * Display name of identity whose attributes changed.
     * @type {string}
     * @memberof IdentityAttributesChangedIdentityBeta
     */
    'name': string;
}
export declare const IdentityAttributesChangedIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityAttributesChangedIdentityBetaTypeEnum = typeof IdentityAttributesChangedIdentityBetaTypeEnum[keyof typeof IdentityAttributesChangedIdentityBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityBeta
 */
export interface IdentityBeta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof IdentityBeta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof IdentityBeta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof IdentityBeta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof IdentityBeta
     */
    'modified'?: string;
    /**
     * Alternate unique identifier for the identity
     * @type {string}
     * @memberof IdentityBeta
     */
    'alias'?: string;
    /**
     * The email address of the identity
     * @type {string}
     * @memberof IdentityBeta
     */
    'emailAddress'?: string | null;
    /**
     * The processing state of the identity
     * @type {string}
     * @memberof IdentityBeta
     */
    'processingState'?: IdentityBetaProcessingStateEnum;
    /**
     * The identity\'s status in the system
     * @type {string}
     * @memberof IdentityBeta
     */
    'identityStatus'?: IdentityBetaIdentityStatusEnum;
    /**
     *
     * @type {IdentityDtoManagerRefBeta}
     * @memberof IdentityBeta
     */
    'managerRef'?: IdentityDtoManagerRefBeta | null;
    /**
     * Whether this identity is a manager of another identity
     * @type {boolean}
     * @memberof IdentityBeta
     */
    'isManager'?: boolean;
    /**
     * The last time the identity was refreshed by the system
     * @type {string}
     * @memberof IdentityBeta
     */
    'lastRefresh'?: string;
    /**
     * A map with the identity attributes for the identity
     * @type {object}
     * @memberof IdentityBeta
     */
    'attributes'?: object;
    /**
     *
     * @type {LifecycleStateDtoBeta & object}
     * @memberof IdentityBeta
     */
    'lifecycleState'?: LifecycleStateDtoBeta & object;
}
export declare const IdentityBetaProcessingStateEnum: {
    readonly Error: "ERROR";
    readonly Ok: "OK";
    readonly Null: "null";
};
export type IdentityBetaProcessingStateEnum = typeof IdentityBetaProcessingStateEnum[keyof typeof IdentityBetaProcessingStateEnum];
export declare const IdentityBetaIdentityStatusEnum: {
    readonly Unregistered: "UNREGISTERED";
    readonly Registered: "REGISTERED";
    readonly Pending: "PENDING";
    readonly Warning: "WARNING";
    readonly Disabled: "DISABLED";
    readonly Active: "ACTIVE";
    readonly Deactivated: "DEACTIVATED";
    readonly Terminated: "TERMINATED";
    readonly Error: "ERROR";
    readonly Locked: "LOCKED";
};
export type IdentityBetaIdentityStatusEnum = typeof IdentityBetaIdentityStatusEnum[keyof typeof IdentityBetaIdentityStatusEnum];
/**
 *
 * @export
 * @interface IdentityCertificationTaskBeta
 */
export interface IdentityCertificationTaskBeta {
    /**
     * The task id
     * @type {string}
     * @memberof IdentityCertificationTaskBeta
     */
    'id'?: string;
    /**
     * The certification id
     * @type {string}
     * @memberof IdentityCertificationTaskBeta
     */
    'certificationId'?: string;
    /**
     *
     * @type {string}
     * @memberof IdentityCertificationTaskBeta
     */
    'type'?: IdentityCertificationTaskBetaTypeEnum;
    /**
     *
     * @type {string}
     * @memberof IdentityCertificationTaskBeta
     */
    'status'?: IdentityCertificationTaskBetaStatusEnum;
    /**
     * Any errors executing the task (Optional).
     * @type {Array<string>}
     * @memberof IdentityCertificationTaskBeta
     */
    'errors'?: Array<string>;
}
export declare const IdentityCertificationTaskBetaTypeEnum: {
    readonly Reassign: "REASSIGN";
};
export type IdentityCertificationTaskBetaTypeEnum = typeof IdentityCertificationTaskBetaTypeEnum[keyof typeof IdentityCertificationTaskBetaTypeEnum];
export declare const IdentityCertificationTaskBetaStatusEnum: {
    readonly Queued: "QUEUED";
    readonly InProgress: "IN_PROGRESS";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type IdentityCertificationTaskBetaStatusEnum = typeof IdentityCertificationTaskBetaStatusEnum[keyof typeof IdentityCertificationTaskBetaStatusEnum];
/**
 *
 * @export
 * @interface IdentityCertifiedBeta
 */
export interface IdentityCertifiedBeta {
    /**
     * the id of the certification item
     * @type {string}
     * @memberof IdentityCertifiedBeta
     */
    'certificationId'?: string;
    /**
     * the certification item name
     * @type {string}
     * @memberof IdentityCertifiedBeta
     */
    'certificationName'?: string;
    /**
     * the date ceritification was signed
     * @type {string}
     * @memberof IdentityCertifiedBeta
     */
    'signedDate'?: string;
    /**
     * this field is deprecated and may go away
     * @type {Array<CertifierResponseBeta>}
     * @memberof IdentityCertifiedBeta
     */
    'certifiers'?: Array<CertifierResponseBeta>;
    /**
     * The list of identities who review this certification
     * @type {Array<CertifierResponseBeta>}
     * @memberof IdentityCertifiedBeta
     */
    'reviewers'?: Array<CertifierResponseBeta>;
    /**
     *
     * @type {CertifierResponseBeta}
     * @memberof IdentityCertifiedBeta
     */
    'signer'?: CertifierResponseBeta;
    /**
     * the event type
     * @type {string}
     * @memberof IdentityCertifiedBeta
     */
    'eventType'?: string;
    /**
     * the date of event
     * @type {string}
     * @memberof IdentityCertifiedBeta
     */
    'dt'?: string;
}
/**
 *
 * @export
 * @interface IdentityCompareResponseBeta
 */
export interface IdentityCompareResponseBeta {
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.
     * @type {{ [key: string]: object; }}
     * @memberof IdentityCompareResponseBeta
     */
    'accessItemDiff'?: {
        [key: string]: object;
    };
}
/**
 *
 * @export
 * @interface IdentityCreatedBeta
 */
export interface IdentityCreatedBeta {
    /**
     *
     * @type {IdentityCreatedIdentityBeta}
     * @memberof IdentityCreatedBeta
     */
    'identity': IdentityCreatedIdentityBeta;
    /**
     * The attributes assigned to the identity. Attributes are determined by the identity profile.
     * @type {{ [key: string]: any; }}
     * @memberof IdentityCreatedBeta
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 * Created identity.
 * @export
 * @interface IdentityCreatedIdentityBeta
 */
export interface IdentityCreatedIdentityBeta {
    /**
     * Created identity\'s DTO type.
     * @type {string}
     * @memberof IdentityCreatedIdentityBeta
     */
    'type': IdentityCreatedIdentityBetaTypeEnum;
    /**
     * Created identity ID.
     * @type {string}
     * @memberof IdentityCreatedIdentityBeta
     */
    'id': string;
    /**
     * Created identity\'s display name.
     * @type {string}
     * @memberof IdentityCreatedIdentityBeta
     */
    'name': string;
}
export declare const IdentityCreatedIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityCreatedIdentityBetaTypeEnum = typeof IdentityCreatedIdentityBetaTypeEnum[keyof typeof IdentityCreatedIdentityBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityDeletedBeta
 */
export interface IdentityDeletedBeta {
    /**
     *
     * @type {IdentityDeletedIdentityBeta}
     * @memberof IdentityDeletedBeta
     */
    'identity': IdentityDeletedIdentityBeta;
    /**
     * The attributes assigned to the identity. Attributes are determined by the identity profile.
     * @type {{ [key: string]: any; }}
     * @memberof IdentityDeletedBeta
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 * Deleted identity.
 * @export
 * @interface IdentityDeletedIdentityBeta
 */
export interface IdentityDeletedIdentityBeta {
    /**
     * Deleted identity\'s DTO type.
     * @type {string}
     * @memberof IdentityDeletedIdentityBeta
     */
    'type': IdentityDeletedIdentityBetaTypeEnum;
    /**
     * Deleted identity ID.
     * @type {string}
     * @memberof IdentityDeletedIdentityBeta
     */
    'id': string;
    /**
     * Deleted identity\'s display name.
     * @type {string}
     * @memberof IdentityDeletedIdentityBeta
     */
    'name': string;
}
export declare const IdentityDeletedIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityDeletedIdentityBetaTypeEnum = typeof IdentityDeletedIdentityBetaTypeEnum[keyof typeof IdentityDeletedIdentityBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityDtoBeta
 */
export interface IdentityDtoBeta {
    /**
     * Alternate unique identifier for the identity
     * @type {string}
     * @memberof IdentityDtoBeta
     */
    'alias'?: string;
    /**
     * The email address of the identity
     * @type {string}
     * @memberof IdentityDtoBeta
     */
    'emailAddress'?: string | null;
    /**
     * The processing state of the identity
     * @type {string}
     * @memberof IdentityDtoBeta
     */
    'processingState'?: IdentityDtoBetaProcessingStateEnum;
    /**
     * The identity\'s status in the system
     * @type {string}
     * @memberof IdentityDtoBeta
     */
    'identityStatus'?: IdentityDtoBetaIdentityStatusEnum;
    /**
     *
     * @type {IdentityDtoManagerRefBeta}
     * @memberof IdentityDtoBeta
     */
    'managerRef'?: IdentityDtoManagerRefBeta | null;
    /**
     * Whether this identity is a manager of another identity
     * @type {boolean}
     * @memberof IdentityDtoBeta
     */
    'isManager'?: boolean;
    /**
     * The last time the identity was refreshed by the system
     * @type {string}
     * @memberof IdentityDtoBeta
     */
    'lastRefresh'?: string;
    /**
     * A map with the identity attributes for the identity
     * @type {object}
     * @memberof IdentityDtoBeta
     */
    'attributes'?: object;
    /**
     *
     * @type {LifecycleStateDtoBeta & object}
     * @memberof IdentityDtoBeta
     */
    'lifecycleState'?: LifecycleStateDtoBeta & object;
}
export declare const IdentityDtoBetaProcessingStateEnum: {
    readonly Error: "ERROR";
    readonly Ok: "OK";
    readonly Null: "null";
};
export type IdentityDtoBetaProcessingStateEnum = typeof IdentityDtoBetaProcessingStateEnum[keyof typeof IdentityDtoBetaProcessingStateEnum];
export declare const IdentityDtoBetaIdentityStatusEnum: {
    readonly Unregistered: "UNREGISTERED";
    readonly Registered: "REGISTERED";
    readonly Pending: "PENDING";
    readonly Warning: "WARNING";
    readonly Disabled: "DISABLED";
    readonly Active: "ACTIVE";
    readonly Deactivated: "DEACTIVATED";
    readonly Terminated: "TERMINATED";
    readonly Error: "ERROR";
    readonly Locked: "LOCKED";
};
export type IdentityDtoBetaIdentityStatusEnum = typeof IdentityDtoBetaIdentityStatusEnum[keyof typeof IdentityDtoBetaIdentityStatusEnum];
/**
 * Identity\'s manager.
 * @export
 * @interface IdentityDtoManagerRefBeta
 */
export interface IdentityDtoManagerRefBeta {
    /**
     * DTO type of identity\'s manager.
     * @type {string}
     * @memberof IdentityDtoManagerRefBeta
     */
    'type'?: IdentityDtoManagerRefBetaTypeEnum;
    /**
     * ID of identity\'s manager.
     * @type {string}
     * @memberof IdentityDtoManagerRefBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity\'s manager.
     * @type {string}
     * @memberof IdentityDtoManagerRefBeta
     */
    'name'?: string;
}
export declare const IdentityDtoManagerRefBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityDtoManagerRefBetaTypeEnum = typeof IdentityDtoManagerRefBetaTypeEnum[keyof typeof IdentityDtoManagerRefBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityEntitiesBeta
 */
export interface IdentityEntitiesBeta {
    /**
     *
     * @type {IdentityEntitiesIdentityEntityBeta}
     * @memberof IdentityEntitiesBeta
     */
    'identityEntity'?: IdentityEntitiesIdentityEntityBeta;
}
/**
 *
 * @export
 * @interface IdentityEntitiesIdentityEntityBeta
 */
export interface IdentityEntitiesIdentityEntityBeta {
    /**
     * id of the resource to which the identity is associated
     * @type {string}
     * @memberof IdentityEntitiesIdentityEntityBeta
     */
    'id'?: string;
    /**
     * name of the resource to which the identity is associated
     * @type {string}
     * @memberof IdentityEntitiesIdentityEntityBeta
     */
    'name'?: string;
    /**
     * type of the resource to which the identity is associated
     * @type {string}
     * @memberof IdentityEntitiesIdentityEntityBeta
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface IdentityExceptionReportReference1Beta
 */
export interface IdentityExceptionReportReference1Beta {
    /**
     * The id of the task result.
     * @type {string}
     * @memberof IdentityExceptionReportReference1Beta
     */
    'taskResultId'?: string;
    /**
     * The name of the report.
     * @type {string}
     * @memberof IdentityExceptionReportReference1Beta
     */
    'reportName'?: string;
}
/**
 *
 * @export
 * @interface IdentityExceptionReportReferenceBeta
 */
export interface IdentityExceptionReportReferenceBeta {
    /**
     * The id of the task result
     * @type {string}
     * @memberof IdentityExceptionReportReferenceBeta
     */
    'taskResultId'?: string;
    /**
     * The name of the report
     * @type {string}
     * @memberof IdentityExceptionReportReferenceBeta
     */
    'reportName'?: string;
}
/**
 *
 * @export
 * @interface IdentityHistoryResponseBeta
 */
export interface IdentityHistoryResponseBeta {
    /**
     * the identity ID
     * @type {string}
     * @memberof IdentityHistoryResponseBeta
     */
    'id'?: string;
    /**
     * the display name of the identity
     * @type {string}
     * @memberof IdentityHistoryResponseBeta
     */
    'displayName'?: string;
    /**
     * the date when the identity record was created
     * @type {string}
     * @memberof IdentityHistoryResponseBeta
     */
    'snapshot'?: string;
    /**
     * the date when the identity was deleted
     * @type {string}
     * @memberof IdentityHistoryResponseBeta
     */
    'deletedDate'?: string;
    /**
     * A map containing the count of each access item
     * @type {{ [key: string]: number; }}
     * @memberof IdentityHistoryResponseBeta
     */
    'accessItemCount'?: {
        [key: string]: number;
    };
    /**
     * A map containing the identity attributes
     * @type {{ [key: string]: any; }}
     * @memberof IdentityHistoryResponseBeta
     */
    'attributes'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface IdentityListItemBeta
 */
export interface IdentityListItemBeta {
    /**
     * the identity ID
     * @type {string}
     * @memberof IdentityListItemBeta
     */
    'id'?: string;
    /**
     * the display name of the identity
     * @type {string}
     * @memberof IdentityListItemBeta
     */
    'displayName'?: string;
    /**
     * the first name of the identity
     * @type {string}
     * @memberof IdentityListItemBeta
     */
    'firstName'?: string | null;
    /**
     * the last name of the identity
     * @type {string}
     * @memberof IdentityListItemBeta
     */
    'lastName'?: string | null;
    /**
     * indicates if an identity is active or not
     * @type {boolean}
     * @memberof IdentityListItemBeta
     */
    'active'?: boolean;
    /**
     * the date when the identity was deleted
     * @type {string}
     * @memberof IdentityListItemBeta
     */
    'deletedDate'?: string | null;
}
/**
 *
 * @export
 * @interface IdentityOwnershipAssociationDetailsAssociationDetailsInnerBeta
 */
export interface IdentityOwnershipAssociationDetailsAssociationDetailsInnerBeta {
    /**
     * association type with the identity
     * @type {string}
     * @memberof IdentityOwnershipAssociationDetailsAssociationDetailsInnerBeta
     */
    'associationType'?: string;
    /**
     * the specific resource this identity has ownership on
     * @type {Array<IdentityEntitiesBeta>}
     * @memberof IdentityOwnershipAssociationDetailsAssociationDetailsInnerBeta
     */
    'entities'?: Array<IdentityEntitiesBeta>;
}
/**
 *
 * @export
 * @interface IdentityOwnershipAssociationDetailsBeta
 */
export interface IdentityOwnershipAssociationDetailsBeta {
    /**
     * list of all the resource associations for the identity
     * @type {Array<IdentityOwnershipAssociationDetailsAssociationDetailsInnerBeta>}
     * @memberof IdentityOwnershipAssociationDetailsBeta
     */
    'associationDetails'?: Array<IdentityOwnershipAssociationDetailsAssociationDetailsInnerBeta>;
}
/**
 *
 * @export
 * @interface IdentityPreviewRequestBeta
 */
export interface IdentityPreviewRequestBeta {
    /**
     *
     * @type {string}
     * @memberof IdentityPreviewRequestBeta
     */
    'identityId'?: string;
    /**
     *
     * @type {IdentityAttributeConfigBeta}
     * @memberof IdentityPreviewRequestBeta
     */
    'identityAttributeConfig'?: IdentityAttributeConfigBeta;
}
/**
 *
 * @export
 * @interface IdentityPreviewResponseBeta
 */
export interface IdentityPreviewResponseBeta {
    /**
     *
     * @type {IdentityPreviewResponseIdentityBeta}
     * @memberof IdentityPreviewResponseBeta
     */
    'identity'?: IdentityPreviewResponseIdentityBeta;
    /**
     *
     * @type {Array<IdentityAttributePreviewBeta>}
     * @memberof IdentityPreviewResponseBeta
     */
    'previewAttributes'?: Array<IdentityAttributePreviewBeta>;
}
/**
 * Identity\'s manager.
 * @export
 * @interface IdentityPreviewResponseIdentityBeta
 */
export interface IdentityPreviewResponseIdentityBeta {
    /**
     * DTO type of identity\'s manager.
     * @type {string}
     * @memberof IdentityPreviewResponseIdentityBeta
     */
    'type'?: IdentityPreviewResponseIdentityBetaTypeEnum;
    /**
     * ID of identity\'s manager.
     * @type {string}
     * @memberof IdentityPreviewResponseIdentityBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity\'s manager.
     * @type {string}
     * @memberof IdentityPreviewResponseIdentityBeta
     */
    'name'?: string;
}
export declare const IdentityPreviewResponseIdentityBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityPreviewResponseIdentityBetaTypeEnum = typeof IdentityPreviewResponseIdentityBetaTypeEnum[keyof typeof IdentityPreviewResponseIdentityBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityProfile1AllOfAuthoritativeSourceBeta
 */
export interface IdentityProfile1AllOfAuthoritativeSourceBeta {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfile1AllOfAuthoritativeSourceBeta
     */
    'type'?: IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfile1AllOfAuthoritativeSourceBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfile1AllOfAuthoritativeSourceBeta
     */
    'name'?: string;
}
export declare const IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum = typeof IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum[keyof typeof IdentityProfile1AllOfAuthoritativeSourceBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityProfile1AllOfBeta
 */
export interface IdentityProfile1AllOfBeta {
    /**
     * The description of the Identity Profile.
     * @type {string}
     * @memberof IdentityProfile1AllOfBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {IdentityProfileAllOfOwnerBeta}
     * @memberof IdentityProfile1AllOfBeta
     */
    'owner'?: IdentityProfileAllOfOwnerBeta | null;
    /**
     * The priority for an Identity Profile.
     * @type {number}
     * @memberof IdentityProfile1AllOfBeta
     */
    'priority'?: number;
    /**
     *
     * @type {IdentityProfile1AllOfAuthoritativeSourceBeta}
     * @memberof IdentityProfile1AllOfBeta
     */
    'authoritativeSource': IdentityProfile1AllOfAuthoritativeSourceBeta;
    /**
     * True if a identity refresh is needed. Typically triggered when a change on the source has been made.
     * @type {boolean}
     * @memberof IdentityProfile1AllOfBeta
     */
    'identityRefreshRequired'?: boolean;
    /**
     * The number of identities that belong to the Identity Profile.
     * @type {number}
     * @memberof IdentityProfile1AllOfBeta
     */
    'identityCount'?: number;
    /**
     *
     * @type {IdentityAttributeConfig1Beta}
     * @memberof IdentityProfile1AllOfBeta
     */
    'identityAttributeConfig'?: IdentityAttributeConfig1Beta;
    /**
     *
     * @type {IdentityExceptionReportReference1Beta}
     * @memberof IdentityProfile1AllOfBeta
     */
    'identityExceptionReportReference'?: IdentityExceptionReportReference1Beta | null;
    /**
     * Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
     * @type {boolean}
     * @memberof IdentityProfile1AllOfBeta
     */
    'hasTimeBasedAttr'?: boolean;
}
/**
 *
 * @export
 * @interface IdentityProfile1Beta
 */
export interface IdentityProfile1Beta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof IdentityProfile1Beta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof IdentityProfile1Beta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof IdentityProfile1Beta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof IdentityProfile1Beta
     */
    'modified'?: string;
    /**
     * The description of the Identity Profile.
     * @type {string}
     * @memberof IdentityProfile1Beta
     */
    'description'?: string | null;
    /**
     *
     * @type {IdentityProfileAllOfOwnerBeta}
     * @memberof IdentityProfile1Beta
     */
    'owner'?: IdentityProfileAllOfOwnerBeta | null;
    /**
     * The priority for an Identity Profile.
     * @type {number}
     * @memberof IdentityProfile1Beta
     */
    'priority'?: number;
    /**
     *
     * @type {IdentityProfile1AllOfAuthoritativeSourceBeta}
     * @memberof IdentityProfile1Beta
     */
    'authoritativeSource': IdentityProfile1AllOfAuthoritativeSourceBeta;
    /**
     * True if a identity refresh is needed. Typically triggered when a change on the source has been made.
     * @type {boolean}
     * @memberof IdentityProfile1Beta
     */
    'identityRefreshRequired'?: boolean;
    /**
     * The number of identities that belong to the Identity Profile.
     * @type {number}
     * @memberof IdentityProfile1Beta
     */
    'identityCount'?: number;
    /**
     *
     * @type {IdentityAttributeConfig1Beta}
     * @memberof IdentityProfile1Beta
     */
    'identityAttributeConfig'?: IdentityAttributeConfig1Beta;
    /**
     *
     * @type {IdentityExceptionReportReference1Beta}
     * @memberof IdentityProfile1Beta
     */
    'identityExceptionReportReference'?: IdentityExceptionReportReference1Beta | null;
    /**
     * Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
     * @type {boolean}
     * @memberof IdentityProfile1Beta
     */
    'hasTimeBasedAttr'?: boolean;
}
/**
 * The authoritative source for this Identity Profile.
 * @export
 * @interface IdentityProfileAllOfAuthoritativeSourceBeta
 */
export interface IdentityProfileAllOfAuthoritativeSourceBeta {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfAuthoritativeSourceBeta
     */
    'type'?: IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfAuthoritativeSourceBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfAuthoritativeSourceBeta
     */
    'name'?: string;
}
export declare const IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum = typeof IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum[keyof typeof IdentityProfileAllOfAuthoritativeSourceBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityProfileAllOfBeta
 */
export interface IdentityProfileAllOfBeta {
    /**
     * The description of the Identity Profile.
     * @type {string}
     * @memberof IdentityProfileAllOfBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {IdentityProfileAllOfOwnerBeta}
     * @memberof IdentityProfileAllOfBeta
     */
    'owner'?: IdentityProfileAllOfOwnerBeta | null;
    /**
     * The priority for an Identity Profile.
     * @type {number}
     * @memberof IdentityProfileAllOfBeta
     */
    'priority'?: number;
    /**
     *
     * @type {IdentityProfileAllOfAuthoritativeSourceBeta}
     * @memberof IdentityProfileAllOfBeta
     */
    'authoritativeSource': IdentityProfileAllOfAuthoritativeSourceBeta;
    /**
     * True if a identity refresh is needed. Typically triggered when a change on the source has been made
     * @type {boolean}
     * @memberof IdentityProfileAllOfBeta
     */
    'identityRefreshRequired'?: boolean;
    /**
     * The number of identities that belong to the Identity Profile.
     * @type {number}
     * @memberof IdentityProfileAllOfBeta
     */
    'identityCount'?: number;
    /**
     *
     * @type {IdentityAttributeConfigBeta}
     * @memberof IdentityProfileAllOfBeta
     */
    'identityAttributeConfig'?: IdentityAttributeConfigBeta;
    /**
     *
     * @type {IdentityExceptionReportReferenceBeta}
     * @memberof IdentityProfileAllOfBeta
     */
    'identityExceptionReportReference'?: IdentityExceptionReportReferenceBeta | null;
    /**
     * Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
     * @type {boolean}
     * @memberof IdentityProfileAllOfBeta
     */
    'hasTimeBasedAttr'?: boolean;
}
/**
 * The owner of the Identity Profile.
 * @export
 * @interface IdentityProfileAllOfOwnerBeta
 */
export interface IdentityProfileAllOfOwnerBeta {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfOwnerBeta
     */
    'type'?: IdentityProfileAllOfOwnerBetaTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfOwnerBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof IdentityProfileAllOfOwnerBeta
     */
    'name'?: string;
}
export declare const IdentityProfileAllOfOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type IdentityProfileAllOfOwnerBetaTypeEnum = typeof IdentityProfileAllOfOwnerBetaTypeEnum[keyof typeof IdentityProfileAllOfOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface IdentityProfileBeta
 */
export interface IdentityProfileBeta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof IdentityProfileBeta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof IdentityProfileBeta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof IdentityProfileBeta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof IdentityProfileBeta
     */
    'modified'?: string;
    /**
     * The description of the Identity Profile.
     * @type {string}
     * @memberof IdentityProfileBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {IdentityProfileAllOfOwnerBeta}
     * @memberof IdentityProfileBeta
     */
    'owner'?: IdentityProfileAllOfOwnerBeta | null;
    /**
     * The priority for an Identity Profile.
     * @type {number}
     * @memberof IdentityProfileBeta
     */
    'priority'?: number;
    /**
     *
     * @type {IdentityProfileAllOfAuthoritativeSourceBeta}
     * @memberof IdentityProfileBeta
     */
    'authoritativeSource': IdentityProfileAllOfAuthoritativeSourceBeta;
    /**
     * True if a identity refresh is needed. Typically triggered when a change on the source has been made
     * @type {boolean}
     * @memberof IdentityProfileBeta
     */
    'identityRefreshRequired'?: boolean;
    /**
     * The number of identities that belong to the Identity Profile.
     * @type {number}
     * @memberof IdentityProfileBeta
     */
    'identityCount'?: number;
    /**
     *
     * @type {IdentityAttributeConfigBeta}
     * @memberof IdentityProfileBeta
     */
    'identityAttributeConfig'?: IdentityAttributeConfigBeta;
    /**
     *
     * @type {IdentityExceptionReportReferenceBeta}
     * @memberof IdentityProfileBeta
     */
    'identityExceptionReportReference'?: IdentityExceptionReportReferenceBeta | null;
    /**
     * Indicates the value of requiresPeriodicRefresh attribute for the Identity Profile.
     * @type {boolean}
     * @memberof IdentityProfileBeta
     */
    'hasTimeBasedAttr'?: boolean;
}
/**
 * Identity Profile exported object
 * @export
 * @interface IdentityProfileExportedObjectBeta
 */
export interface IdentityProfileExportedObjectBeta {
    /**
     * Version or object from the target service.
     * @type {number}
     * @memberof IdentityProfileExportedObjectBeta
     */
    'version'?: number;
    /**
     *
     * @type {SelfImportExportDtoBeta}
     * @memberof IdentityProfileExportedObjectBeta
     */
    'self'?: SelfImportExportDtoBeta;
    /**
     *
     * @type {IdentityProfile1Beta}
     * @memberof IdentityProfileExportedObjectBeta
     */
    'object'?: IdentityProfile1Beta;
}
/**
 * The manager for the identity.
 * @export
 * @interface IdentityReferenceBeta
 */
export interface IdentityReferenceBeta {
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof IdentityReferenceBeta
     */
    'type'?: DtoTypeBeta;
    /**
     * Identity id
     * @type {string}
     * @memberof IdentityReferenceBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity.
     * @type {string}
     * @memberof IdentityReferenceBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface IdentityReferenceWithIdBeta
 */
export interface IdentityReferenceWithIdBeta {
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof IdentityReferenceWithIdBeta
     */
    'type'?: DtoTypeBeta;
    /**
     * Identity id
     * @type {string}
     * @memberof IdentityReferenceWithIdBeta
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface IdentityReferenceWithNameAndEmailBeta
 */
export interface IdentityReferenceWithNameAndEmailBeta {
    /**
     * The type can only be IDENTITY. This is read-only.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmailBeta
     */
    'type'?: string;
    /**
     * Identity ID.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmailBeta
     */
    'id'?: string;
    /**
     * Identity\'s human-readable display name. This is read-only.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmailBeta
     */
    'name'?: string;
    /**
     * Identity\'s email address. This is read-only.
     * @type {string}
     * @memberof IdentityReferenceWithNameAndEmailBeta
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface IdentitySnapshotSummaryResponseBeta
 */
export interface IdentitySnapshotSummaryResponseBeta {
    /**
     * the date when the identity record was created
     * @type {string}
     * @memberof IdentitySnapshotSummaryResponseBeta
     */
    'snapshot'?: string;
}
/**
 *
 * @export
 * @interface IdentitySummaryBeta
 */
export interface IdentitySummaryBeta {
    /**
     * ID of this identity summary
     * @type {string}
     * @memberof IdentitySummaryBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity
     * @type {string}
     * @memberof IdentitySummaryBeta
     */
    'name'?: string;
    /**
     * ID of the identity that this summary represents
     * @type {string}
     * @memberof IdentitySummaryBeta
     */
    'identityId'?: string;
    /**
     * Indicates if all access items for this summary have been decided on
     * @type {boolean}
     * @memberof IdentitySummaryBeta
     */
    'completed'?: boolean;
}
/**
 *
 * @export
 * @interface IdentitySyncJobBeta
 */
export interface IdentitySyncJobBeta {
    /**
     * Job ID.
     * @type {string}
     * @memberof IdentitySyncJobBeta
     */
    'id': string;
    /**
     * The job status.
     * @type {string}
     * @memberof IdentitySyncJobBeta
     */
    'status': IdentitySyncJobBetaStatusEnum;
    /**
     *
     * @type {IdentitySyncPayloadBeta}
     * @memberof IdentitySyncJobBeta
     */
    'payload': IdentitySyncPayloadBeta;
}
export declare const IdentitySyncJobBetaStatusEnum: {
    readonly Queued: "QUEUED";
    readonly InProgress: "IN_PROGRESS";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type IdentitySyncJobBetaStatusEnum = typeof IdentitySyncJobBetaStatusEnum[keyof typeof IdentitySyncJobBetaStatusEnum];
/**
 *
 * @export
 * @interface IdentitySyncPayloadBeta
 */
export interface IdentitySyncPayloadBeta {
    /**
     * Payload type.
     * @type {string}
     * @memberof IdentitySyncPayloadBeta
     */
    'type': string;
    /**
     * Payload type.
     * @type {string}
     * @memberof IdentitySyncPayloadBeta
     */
    'dataJson': string;
}
/**
 * Entitlement including a specific set of access.
 * @export
 * @interface IdentityWithNewAccessAccessRefsInnerBeta
 */
export interface IdentityWithNewAccessAccessRefsInnerBeta {
    /**
     * Entitlement\'s DTO type.
     * @type {string}
     * @memberof IdentityWithNewAccessAccessRefsInnerBeta
     */
    'type'?: IdentityWithNewAccessAccessRefsInnerBetaTypeEnum;
    /**
     * Entitlement\'s ID.
     * @type {string}
     * @memberof IdentityWithNewAccessAccessRefsInnerBeta
     */
    'id'?: string;
    /**
     * Entitlement\'s display name.
     * @type {string}
     * @memberof IdentityWithNewAccessAccessRefsInnerBeta
     */
    'name'?: string;
}
export declare const IdentityWithNewAccessAccessRefsInnerBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type IdentityWithNewAccessAccessRefsInnerBetaTypeEnum = typeof IdentityWithNewAccessAccessRefsInnerBetaTypeEnum[keyof typeof IdentityWithNewAccessAccessRefsInnerBetaTypeEnum];
/**
 * An identity with a set of access to be added
 * @export
 * @interface IdentityWithNewAccessBeta
 */
export interface IdentityWithNewAccessBeta {
    /**
     * Identity id to be checked.
     * @type {string}
     * @memberof IdentityWithNewAccessBeta
     */
    'identityId': string;
    /**
     * The list of entitlements to consider for possible violations in a preventive check.
     * @type {Array<IdentityWithNewAccessAccessRefsInnerBeta>}
     * @memberof IdentityWithNewAccessBeta
     */
    'accessRefs': Array<IdentityWithNewAccessAccessRefsInnerBeta>;
}
/**
 * This content type is provided for compatibility with services that don\'t support multipart/form-data, such as SailPoint Workflows. This content type does not support files, so it can only be used for direct connect sources.
 * @export
 * @interface ImportAccountsRequest1Beta
 */
export interface ImportAccountsRequest1Beta {
    /**
     * Use this flag to reprocess every account whether or not the data has changed.
     * @type {string}
     * @memberof ImportAccountsRequest1Beta
     */
    'disableOptimization'?: ImportAccountsRequest1BetaDisableOptimizationEnum;
}
export declare const ImportAccountsRequest1BetaDisableOptimizationEnum: {
    readonly True: "true";
    readonly False: "false";
};
export type ImportAccountsRequest1BetaDisableOptimizationEnum = typeof ImportAccountsRequest1BetaDisableOptimizationEnum[keyof typeof ImportAccountsRequest1BetaDisableOptimizationEnum];
/**
 *
 * @export
 * @interface ImportAccountsRequestBeta
 */
export interface ImportAccountsRequestBeta {
    /**
     * The CSV file containing the source accounts to aggregate.
     * @type {any}
     * @memberof ImportAccountsRequestBeta
     */
    'file'?: any;
    /**
     * Use this flag to reprocess every account whether or not the data has changed.
     * @type {string}
     * @memberof ImportAccountsRequestBeta
     */
    'disableOptimization'?: ImportAccountsRequestBetaDisableOptimizationEnum;
}
export declare const ImportAccountsRequestBetaDisableOptimizationEnum: {
    readonly True: "true";
    readonly False: "false";
};
export type ImportAccountsRequestBetaDisableOptimizationEnum = typeof ImportAccountsRequestBetaDisableOptimizationEnum[keyof typeof ImportAccountsRequestBetaDisableOptimizationEnum];
/**
 *
 * @export
 * @interface ImportEntitlementsBySourceRequestBeta
 */
export interface ImportEntitlementsBySourceRequestBeta {
    /**
     * The CSV file containing the source entitlements to aggregate.
     * @type {any}
     * @memberof ImportEntitlementsBySourceRequestBeta
     */
    'csvFile'?: any;
}
/**
 *
 * @export
 * @interface ImportEntitlementsRequestBeta
 */
export interface ImportEntitlementsRequestBeta {
    /**
     * The CSV file containing the source entitlements to aggregate.
     * @type {any}
     * @memberof ImportEntitlementsRequestBeta
     */
    'file'?: any;
}
/**
 *
 * @export
 * @interface ImportFormDefinitions202ResponseBeta
 */
export interface ImportFormDefinitions202ResponseBeta {
    /**
     *
     * @type {Array<ImportFormDefinitions202ResponseErrorsInnerBeta>}
     * @memberof ImportFormDefinitions202ResponseBeta
     */
    'errors'?: Array<ImportFormDefinitions202ResponseErrorsInnerBeta>;
    /**
     *
     * @type {Array<ExportFormDefinitionsByTenant200ResponseInnerBeta>}
     * @memberof ImportFormDefinitions202ResponseBeta
     */
    'importedObjects'?: Array<ExportFormDefinitionsByTenant200ResponseInnerBeta>;
    /**
     *
     * @type {Array<ImportFormDefinitions202ResponseErrorsInnerBeta>}
     * @memberof ImportFormDefinitions202ResponseBeta
     */
    'infos'?: Array<ImportFormDefinitions202ResponseErrorsInnerBeta>;
    /**
     *
     * @type {Array<ImportFormDefinitions202ResponseErrorsInnerBeta>}
     * @memberof ImportFormDefinitions202ResponseBeta
     */
    'warnings'?: Array<ImportFormDefinitions202ResponseErrorsInnerBeta>;
}
/**
 *
 * @export
 * @interface ImportFormDefinitions202ResponseErrorsInnerBeta
 */
export interface ImportFormDefinitions202ResponseErrorsInnerBeta {
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof ImportFormDefinitions202ResponseErrorsInnerBeta
     */
    'detail'?: {
        [key: string]: object;
    };
    /**
     *
     * @type {string}
     * @memberof ImportFormDefinitions202ResponseErrorsInnerBeta
     */
    'key'?: string;
    /**
     *
     * @type {string}
     * @memberof ImportFormDefinitions202ResponseErrorsInnerBeta
     */
    'text'?: string;
}
/**
 *
 * @export
 * @interface ImportFormDefinitionsRequestInnerBeta
 */
export interface ImportFormDefinitionsRequestInnerBeta {
    /**
     *
     * @type {FormDefinitionResponseBeta}
     * @memberof ImportFormDefinitionsRequestInnerBeta
     */
    'object'?: FormDefinitionResponseBeta;
    /**
     *
     * @type {string}
     * @memberof ImportFormDefinitionsRequestInnerBeta
     */
    'self'?: string;
    /**
     *
     * @type {number}
     * @memberof ImportFormDefinitionsRequestInnerBeta
     */
    'version'?: number;
}
/**
 *
 * @export
 * @interface ImportNonEmployeeRecordsInBulkRequestBeta
 */
export interface ImportNonEmployeeRecordsInBulkRequestBeta {
    /**
     *
     * @type {any}
     * @memberof ImportNonEmployeeRecordsInBulkRequestBeta
     */
    'data': any;
}
/**
 * Object created or updated by import.
 * @export
 * @interface ImportObjectBeta
 */
export interface ImportObjectBeta {
    /**
     * DTO type of object created or updated by import.
     * @type {string}
     * @memberof ImportObjectBeta
     */
    'type'?: ImportObjectBetaTypeEnum;
    /**
     * ID of object created or updated by import.
     * @type {string}
     * @memberof ImportObjectBeta
     */
    'id'?: string;
    /**
     * Display name of object created or updated by import.
     * @type {string}
     * @memberof ImportObjectBeta
     */
    'name'?: string;
}
export declare const ImportObjectBetaTypeEnum: {
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly Rule: "RULE";
    readonly Source: "SOURCE";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
};
export type ImportObjectBetaTypeEnum = typeof ImportObjectBetaTypeEnum[keyof typeof ImportObjectBetaTypeEnum];
/**
 *
 * @export
 * @interface ImportOptionsBeta
 */
export interface ImportOptionsBeta {
    /**
     * Object type names to be excluded from an sp-config export command.
     * @type {Array<string>}
     * @memberof ImportOptionsBeta
     */
    'excludeTypes'?: Array<ImportOptionsBetaExcludeTypesEnum>;
    /**
     * Object type names to be included in an sp-config export command. IncludeTypes takes precedence over excludeTypes.
     * @type {Array<string>}
     * @memberof ImportOptionsBeta
     */
    'includeTypes'?: Array<ImportOptionsBetaIncludeTypesEnum>;
    /**
     * Additional options targeting specific objects related to each item in the includeTypes field
     * @type {{ [key: string]: ObjectExportImportOptionsBeta; }}
     * @memberof ImportOptionsBeta
     */
    'objectOptions'?: {
        [key: string]: ObjectExportImportOptionsBeta;
    };
    /**
     * List of object types that can be used to resolve references on import.
     * @type {Array<string>}
     * @memberof ImportOptionsBeta
     */
    'defaultReferences'?: Array<ImportOptionsBetaDefaultReferencesEnum>;
    /**
     * By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. If excludeBackup is true, the backup will not be performed.
     * @type {boolean}
     * @memberof ImportOptionsBeta
     */
    'excludeBackup'?: boolean;
}
export declare const ImportOptionsBetaExcludeTypesEnum: {
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly Rule: "RULE";
    readonly Source: "SOURCE";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
};
export type ImportOptionsBetaExcludeTypesEnum = typeof ImportOptionsBetaExcludeTypesEnum[keyof typeof ImportOptionsBetaExcludeTypesEnum];
export declare const ImportOptionsBetaIncludeTypesEnum: {
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly Rule: "RULE";
    readonly Source: "SOURCE";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
};
export type ImportOptionsBetaIncludeTypesEnum = typeof ImportOptionsBetaIncludeTypesEnum[keyof typeof ImportOptionsBetaIncludeTypesEnum];
export declare const ImportOptionsBetaDefaultReferencesEnum: {
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly Rule: "RULE";
    readonly Source: "SOURCE";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
};
export type ImportOptionsBetaDefaultReferencesEnum = typeof ImportOptionsBetaDefaultReferencesEnum[keyof typeof ImportOptionsBetaDefaultReferencesEnum];
/**
 *
 * @export
 * @interface ImportSpConfigRequestBeta
 */
export interface ImportSpConfigRequestBeta {
    /**
     * JSON file containing the objects to be imported.
     * @type {any}
     * @memberof ImportSpConfigRequestBeta
     */
    'data': any;
    /**
     *
     * @type {ImportOptionsBeta}
     * @memberof ImportSpConfigRequestBeta
     */
    'options'?: ImportOptionsBeta;
}
/**
 *
 * @export
 * @interface IndexOfBeta
 */
export interface IndexOfBeta {
    /**
     * A substring to search for, searches the entire calling string, and returns the index of the first occurrence of the specified substring.
     * @type {string}
     * @memberof IndexOfBeta
     */
    'substring': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof IndexOfBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof IndexOfBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface InviteIdentitiesRequestBeta
 */
export interface InviteIdentitiesRequestBeta {
    /**
     * The list of Identities IDs to invite - required when \'uninvited\' is false
     * @type {Array<string>}
     * @memberof InviteIdentitiesRequestBeta
     */
    'ids'?: Array<string> | null;
    /**
     * indicator (optional) to invite all unregistered identities in the system within a limit 1000. This parameter makes sense only when \'ids\' is empty.
     * @type {boolean}
     * @memberof InviteIdentitiesRequestBeta
     */
    'uninvited'?: boolean;
}
/**
 *
 * @export
 * @interface InvocationBeta
 */
export interface InvocationBeta {
    /**
     * Invocation ID
     * @type {string}
     * @memberof InvocationBeta
     */
    'id'?: string;
    /**
     * Trigger ID
     * @type {string}
     * @memberof InvocationBeta
     */
    'triggerId'?: string;
    /**
     * Unique invocation secret.
     * @type {string}
     * @memberof InvocationBeta
     */
    'secret'?: string;
    /**
     * JSON map of invocation metadata.
     * @type {object}
     * @memberof InvocationBeta
     */
    'contentJson'?: object;
}
/**
 *
 * @export
 * @interface InvocationStatusBeta
 */
export interface InvocationStatusBeta {
    /**
     * Invocation ID
     * @type {string}
     * @memberof InvocationStatusBeta
     */
    'id': string;
    /**
     * Trigger ID
     * @type {string}
     * @memberof InvocationStatusBeta
     */
    'triggerId': string;
    /**
     * Subscription name
     * @type {string}
     * @memberof InvocationStatusBeta
     */
    'subscriptionName': string;
    /**
     * Subscription ID
     * @type {string}
     * @memberof InvocationStatusBeta
     */
    'subscriptionId': string;
    /**
     *
     * @type {InvocationStatusTypeBeta}
     * @memberof InvocationStatusBeta
     */
    'type': InvocationStatusTypeBeta;
    /**
     * Invocation created timestamp. ISO-8601 in UTC.
     * @type {string}
     * @memberof InvocationStatusBeta
     */
    'created': string;
    /**
     * Invocation completed timestamp; empty fields imply invocation is in-flight or not completed. ISO-8601 in UTC.
     * @type {string}
     * @memberof InvocationStatusBeta
     */
    'completed'?: string;
    /**
     *
     * @type {StartInvocationInputBeta}
     * @memberof InvocationStatusBeta
     */
    'startInvocationInput': StartInvocationInputBeta;
    /**
     *
     * @type {CompleteInvocationInputBeta}
     * @memberof InvocationStatusBeta
     */
    'completeInvocationInput'?: CompleteInvocationInputBeta;
}
/**
 * Defines the Invocation type.  **TEST** The trigger was invocated as a test, either via the test subscription button in the UI or via the start test invocation API.  **REAL_TIME** The trigger subscription is live and was invocated by a real event in IdentityNow.
 * @export
 * @enum {string}
 */
export declare const InvocationStatusTypeBeta: {
    readonly Test: "TEST";
    readonly RealTime: "REAL_TIME";
};
export type InvocationStatusTypeBeta = typeof InvocationStatusTypeBeta[keyof typeof InvocationStatusTypeBeta];
/**
 * A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)
 * @export
 * @interface JsonPatchBeta
 */
export interface JsonPatchBeta {
    /**
     * Operations to be applied
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof JsonPatchBeta
     */
    'operations'?: Array<JsonPatchOperationBeta>;
}
/**
 * A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)
 * @export
 * @interface JsonPatchOperationBeta
 */
export interface JsonPatchOperationBeta {
    /**
     * The operation to be performed
     * @type {string}
     * @memberof JsonPatchOperationBeta
     */
    'op': JsonPatchOperationBetaOpEnum;
    /**
     * A string JSON Pointer representing the target path to an element to be affected by the operation
     * @type {string}
     * @memberof JsonPatchOperationBeta
     */
    'path': string;
    /**
     *
     * @type {JsonPatchOperationValueBeta}
     * @memberof JsonPatchOperationBeta
     */
    'value'?: JsonPatchOperationValueBeta;
}
export declare const JsonPatchOperationBetaOpEnum: {
    readonly Add: "add";
    readonly Remove: "remove";
    readonly Replace: "replace";
    readonly Move: "move";
    readonly Copy: "copy";
    readonly Test: "test";
};
export type JsonPatchOperationBetaOpEnum = typeof JsonPatchOperationBetaOpEnum[keyof typeof JsonPatchOperationBetaOpEnum];
/**
 * @type JsonPatchOperationValueBeta
 * The value to be used for the operation, required for \"add\" and \"replace\" operations
 * @export
 */
export type JsonPatchOperationValueBeta = Array<ArrayInnerBeta> | boolean | number | object | string;
/**
 *
 * @export
 * @interface KbaAnswerRequestItemBeta
 */
export interface KbaAnswerRequestItemBeta {
    /**
     * Question Id
     * @type {string}
     * @memberof KbaAnswerRequestItemBeta
     */
    'id': string;
    /**
     * An answer for the KBA question
     * @type {string}
     * @memberof KbaAnswerRequestItemBeta
     */
    'answer': string;
}
/**
 *
 * @export
 * @interface KbaAnswerResponseItemBeta
 */
export interface KbaAnswerResponseItemBeta {
    /**
     * Question Id
     * @type {string}
     * @memberof KbaAnswerResponseItemBeta
     */
    'id': string;
    /**
     * Question description
     * @type {string}
     * @memberof KbaAnswerResponseItemBeta
     */
    'question': string;
    /**
     * Denotes whether the KBA question has an answer configured for the current user
     * @type {boolean}
     * @memberof KbaAnswerResponseItemBeta
     */
    'hasAnswer': boolean;
}
/**
 *
 * @export
 * @interface KbaAuthResponseBeta
 */
export interface KbaAuthResponseBeta {
    /**
     *
     * @type {Array<KbaAuthResponseItemBeta>}
     * @memberof KbaAuthResponseBeta
     */
    'kbaAuthResponseItems'?: Array<KbaAuthResponseItemBeta>;
    /**
     * MFA Authentication status
     * @type {string}
     * @memberof KbaAuthResponseBeta
     */
    'status'?: KbaAuthResponseBetaStatusEnum;
}
export declare const KbaAuthResponseBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
    readonly Lockout: "LOCKOUT";
    readonly NotEnoughData: "NOT_ENOUGH_DATA";
};
export type KbaAuthResponseBetaStatusEnum = typeof KbaAuthResponseBetaStatusEnum[keyof typeof KbaAuthResponseBetaStatusEnum];
/**
 *
 * @export
 * @interface KbaAuthResponseItemBeta
 */
export interface KbaAuthResponseItemBeta {
    /**
     * The KBA question id
     * @type {string}
     * @memberof KbaAuthResponseItemBeta
     */
    'questionId'?: string | null;
    /**
     * Return true if verified
     * @type {boolean}
     * @memberof KbaAuthResponseItemBeta
     */
    'isVerified'?: boolean | null;
}
/**
 * KBA Configuration
 * @export
 * @interface KbaQuestionBeta
 */
export interface KbaQuestionBeta {
    /**
     * KBA Question Id
     * @type {string}
     * @memberof KbaQuestionBeta
     */
    'id': string;
    /**
     * KBA Question description
     * @type {string}
     * @memberof KbaQuestionBeta
     */
    'text': string;
    /**
     * Denotes whether the KBA question has an answer configured for any user in the tenant
     * @type {boolean}
     * @memberof KbaQuestionBeta
     */
    'hasAnswer': boolean;
    /**
     * Denotes the number of KBA configurations for this question
     * @type {number}
     * @memberof KbaQuestionBeta
     */
    'numAnswers': number;
}
/**
 *
 * @export
 * @interface LatestOutlierSummaryBeta
 */
export interface LatestOutlierSummaryBeta {
    /**
     * The type of outlier summary
     * @type {string}
     * @memberof LatestOutlierSummaryBeta
     */
    'type'?: LatestOutlierSummaryBetaTypeEnum;
    /**
     * The date the bulk outlier detection ran/snapshot was created
     * @type {string}
     * @memberof LatestOutlierSummaryBeta
     */
    'snapshotDate'?: string;
    /**
     * Total number of outliers for the customer making the request
     * @type {number}
     * @memberof LatestOutlierSummaryBeta
     */
    'totalOutliers'?: number;
    /**
     * Total number of identities for the customer making the request
     * @type {number}
     * @memberof LatestOutlierSummaryBeta
     */
    'totalIdentities'?: number;
    /**
     * Total number of ignored outliers
     * @type {number}
     * @memberof LatestOutlierSummaryBeta
     */
    'totalIgnored'?: number;
}
export declare const LatestOutlierSummaryBetaTypeEnum: {
    readonly LowSimilarity: "LOW_SIMILARITY";
    readonly Structural: "STRUCTURAL";
};
export type LatestOutlierSummaryBetaTypeEnum = typeof LatestOutlierSummaryBetaTypeEnum[keyof typeof LatestOutlierSummaryBetaTypeEnum];
/**
 *
 * @export
 * @interface LeftPadBeta
 */
export interface LeftPadBeta {
    /**
     * An integer value for the desired length of the final output string
     * @type {string}
     * @memberof LeftPadBeta
     */
    'length': string;
    /**
     * A string value representing the character that the incoming data should be padded with to get to the desired length   If not provided, the transform will default to a single space (\" \") character for padding
     * @type {string}
     * @memberof LeftPadBeta
     */
    'padding'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof LeftPadBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof LeftPadBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface LicenseBeta
 */
export interface LicenseBeta {
    /**
     * Name of the license
     * @type {string}
     * @memberof LicenseBeta
     */
    'licenseId'?: string;
    /**
     * Legacy name of the license
     * @type {string}
     * @memberof LicenseBeta
     */
    'legacyFeatureName'?: string;
}
/**
 *
 * @export
 * @interface LifecycleStateBeta
 */
export interface LifecycleStateBeta {
    /**
     * Lifecycle state ID.
     * @type {string}
     * @memberof LifecycleStateBeta
     */
    'id'?: string;
    /**
     * Lifecycle state name.
     * @type {string}
     * @memberof LifecycleStateBeta
     */
    'name'?: string;
    /**
     * Lifecycle state technical name. This is for internal use.
     * @type {string}
     * @memberof LifecycleStateBeta
     */
    'technicalName'?: string;
    /**
     * Lifecycle state description.
     * @type {string}
     * @memberof LifecycleStateBeta
     */
    'description'?: string;
    /**
     * Lifecycle state created date.
     * @type {string}
     * @memberof LifecycleStateBeta
     */
    'created'?: string;
    /**
     * Lifecycle state modified date.
     * @type {string}
     * @memberof LifecycleStateBeta
     */
    'modified'?: string;
    /**
     * Indicates whether the lifecycle state is enabled or disabled.
     * @type {boolean}
     * @memberof LifecycleStateBeta
     */
    'enabled'?: boolean;
    /**
     * Number of identities that have the lifecycle state.
     * @type {number}
     * @memberof LifecycleStateBeta
     */
    'identityCount'?: number;
    /**
     *
     * @type {EmailNotificationOptionBeta}
     * @memberof LifecycleStateBeta
     */
    'emailNotificationOption'?: EmailNotificationOptionBeta;
    /**
     *
     * @type {Array<AccountActionBeta>}
     * @memberof LifecycleStateBeta
     */
    'accountActions'?: Array<AccountActionBeta>;
    /**
     * List of access-profile IDs that are associated with the lifecycle state.
     * @type {Array<string>}
     * @memberof LifecycleStateBeta
     */
    'accessProfileIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface LifecycleStateDtoBeta
 */
export interface LifecycleStateDtoBeta {
    /**
     * The name of the lifecycle state
     * @type {string}
     * @memberof LifecycleStateDtoBeta
     */
    'stateName': string;
    /**
     * Whether the lifecycle state has been manually or automatically set
     * @type {boolean}
     * @memberof LifecycleStateDtoBeta
     */
    'manuallyUpdated': boolean;
}
/**
 *
 * @export
 * @interface ListAccessModelMetadataAttribute401ResponseBeta
 */
export interface ListAccessModelMetadataAttribute401ResponseBeta {
    /**
     * A message describing the error
     * @type {object}
     * @memberof ListAccessModelMetadataAttribute401ResponseBeta
     */
    'error'?: object;
}
/**
 *
 * @export
 * @interface ListAccessModelMetadataAttribute429ResponseBeta
 */
export interface ListAccessModelMetadataAttribute429ResponseBeta {
    /**
     * A message describing the error
     * @type {object}
     * @memberof ListAccessModelMetadataAttribute429ResponseBeta
     */
    'message'?: object;
}
/**
 *
 * @export
 * @interface ListCompleteWorkflowLibrary200ResponseInnerBeta
 */
export interface ListCompleteWorkflowLibrary200ResponseInnerBeta {
    /**
     * Operator ID.
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'id'?: string;
    /**
     * Operator friendly name
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'name'?: string;
    /**
     * Operator type
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'type'?: string;
    /**
     * Description of the operator
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'description'?: string;
    /**
     * One or more inputs that the operator accepts
     * @type {Array<WorkflowLibraryFormFieldsBeta>}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'formFields'?: Array<WorkflowLibraryFormFieldsBeta> | null;
    /**
     *
     * @type {WorkflowLibraryActionExampleOutputBeta}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'exampleOutput'?: WorkflowLibraryActionExampleOutputBeta;
    /**
     *
     * @type {boolean}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'deprecatedBy'?: string;
    /**
     * Version number
     * @type {number}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'versionNumber'?: number;
    /**
     *
     * @type {boolean}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'isSimulationEnabled'?: boolean;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'isDynamicSchema'?: boolean;
    /**
     * Example output schema
     * @type {object}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'outputSchema'?: object;
    /**
     * Example trigger payload if applicable
     * @type {object}
     * @memberof ListCompleteWorkflowLibrary200ResponseInnerBeta
     */
    'inputExample'?: object | null;
}
/**
 *
 * @export
 * @interface ListFormDefinitionsByTenantResponseBeta
 */
export interface ListFormDefinitionsByTenantResponseBeta {
    /**
     * Count number of results.
     * @type {number}
     * @memberof ListFormDefinitionsByTenantResponseBeta
     */
    'count'?: number;
    /**
     * List of FormDefinitionResponse items.
     * @type {Array<FormDefinitionResponseBeta>}
     * @memberof ListFormDefinitionsByTenantResponseBeta
     */
    'results'?: Array<FormDefinitionResponseBeta>;
}
/**
 *
 * @export
 * @interface ListFormElementDataByElementIDResponseBeta
 */
export interface ListFormElementDataByElementIDResponseBeta {
    /**
     * Results holds a list of FormElementDataSourceConfigOptions items
     * @type {Array<FormElementDataSourceConfigOptionsBeta>}
     * @memberof ListFormElementDataByElementIDResponseBeta
     */
    'results'?: Array<FormElementDataSourceConfigOptionsBeta>;
}
/**
 * @type ListIdentityAccessItems200ResponseInnerBeta
 * @export
 */
export type ListIdentityAccessItems200ResponseInnerBeta = AccessItemAccessProfileResponseBeta | AccessItemAccountResponseBeta | AccessItemAppResponseBeta | AccessItemEntitlementResponseBeta | AccessItemRoleResponseBeta;
/**
 *
 * @export
 * @interface ListPredefinedSelectOptionsResponseBeta
 */
export interface ListPredefinedSelectOptionsResponseBeta {
    /**
     * Results holds a list of PreDefinedSelectOption items
     * @type {Array<string>}
     * @memberof ListPredefinedSelectOptionsResponseBeta
     */
    'results'?: Array<string>;
}
/**
 * Identity of workgroup member.
 * @export
 * @interface ListWorkgroupMembers200ResponseInnerBeta
 */
export interface ListWorkgroupMembers200ResponseInnerBeta {
    /**
     * Workgroup member identity DTO type.
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerBeta
     */
    'type'?: ListWorkgroupMembers200ResponseInnerBetaTypeEnum;
    /**
     * Workgroup member identity ID.
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerBeta
     */
    'id'?: string;
    /**
     * Workgroup member identity display name.
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerBeta
     */
    'name'?: string;
    /**
     * Workgroup member identity email.
     * @type {string}
     * @memberof ListWorkgroupMembers200ResponseInnerBeta
     */
    'email'?: string;
}
export declare const ListWorkgroupMembers200ResponseInnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ListWorkgroupMembers200ResponseInnerBetaTypeEnum = typeof ListWorkgroupMembers200ResponseInnerBetaTypeEnum[keyof typeof ListWorkgroupMembers200ResponseInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface LoadAccountsTaskBeta
 */
export interface LoadAccountsTaskBeta {
    /**
     * The status of the result
     * @type {boolean}
     * @memberof LoadAccountsTaskBeta
     */
    'success'?: boolean;
    /**
     *
     * @type {LoadAccountsTaskTaskBeta}
     * @memberof LoadAccountsTaskBeta
     */
    'task'?: LoadAccountsTaskTaskBeta;
}
/**
 * Extra attributes map(dictionary) for the task.
 * @export
 * @interface LoadAccountsTaskTaskAttributesBeta
 */
export interface LoadAccountsTaskTaskAttributesBeta {
    [key: string]: object | any;
    /**
     * The id of the source
     * @type {string}
     * @memberof LoadAccountsTaskTaskAttributesBeta
     */
    'appId'?: string;
    /**
     * The indicator if the aggregation process was enabled/disabled for the aggregation job
     * @type {string}
     * @memberof LoadAccountsTaskTaskAttributesBeta
     */
    'optimizedAggregation'?: string;
}
/**
 *
 * @export
 * @interface LoadAccountsTaskTaskBeta
 */
export interface LoadAccountsTaskTaskBeta {
    /**
     * System-generated unique ID of the task this taskStatus represents
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'id'?: string;
    /**
     * Type of task this task represents
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'type'?: string;
    /**
     * The name of the aggregation process
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'name'?: string;
    /**
     * The description of the task
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'description'?: string;
    /**
     * The user who initiated the task
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'launcher'?: string;
    /**
     * The Task creation date
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'created'?: string;
    /**
     * The task start date
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'launched'?: string | null;
    /**
     * The task completion date
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'completed'?: string | null;
    /**
     * Task completion status.
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'completionStatus'?: LoadAccountsTaskTaskBetaCompletionStatusEnum;
    /**
     * Name of the parent task if exists.
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'parentName'?: string | null;
    /**
     * List of the messages dedicated to the report.  From task definition perspective here usually should be warnings or errors.
     * @type {Array<LoadAccountsTaskTaskMessagesInnerBeta>}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'messages'?: Array<LoadAccountsTaskTaskMessagesInnerBeta>;
    /**
     * Current task state.
     * @type {string}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'progress'?: string | null;
    /**
     *
     * @type {LoadAccountsTaskTaskAttributesBeta}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'attributes'?: LoadAccountsTaskTaskAttributesBeta;
    /**
     * Return values from the task
     * @type {Array<LoadAccountsTaskTaskReturnsInnerBeta>}
     * @memberof LoadAccountsTaskTaskBeta
     */
    'returns'?: Array<LoadAccountsTaskTaskReturnsInnerBeta>;
}
export declare const LoadAccountsTaskTaskBetaCompletionStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
};
export type LoadAccountsTaskTaskBetaCompletionStatusEnum = typeof LoadAccountsTaskTaskBetaCompletionStatusEnum[keyof typeof LoadAccountsTaskTaskBetaCompletionStatusEnum];
/**
 *
 * @export
 * @interface LoadAccountsTaskTaskMessagesInnerBeta
 */
export interface LoadAccountsTaskTaskMessagesInnerBeta {
    /**
     * Type of the message.
     * @type {string}
     * @memberof LoadAccountsTaskTaskMessagesInnerBeta
     */
    'type'?: LoadAccountsTaskTaskMessagesInnerBetaTypeEnum;
    /**
     * Flag whether message is an error.
     * @type {boolean}
     * @memberof LoadAccountsTaskTaskMessagesInnerBeta
     */
    'error'?: boolean;
    /**
     * Flag whether message is a warning.
     * @type {boolean}
     * @memberof LoadAccountsTaskTaskMessagesInnerBeta
     */
    'warning'?: boolean;
    /**
     * Message string identifier.
     * @type {string}
     * @memberof LoadAccountsTaskTaskMessagesInnerBeta
     */
    'key'?: string;
    /**
     * Message context with the locale based language.
     * @type {string}
     * @memberof LoadAccountsTaskTaskMessagesInnerBeta
     */
    'localizedText'?: string;
}
export declare const LoadAccountsTaskTaskMessagesInnerBetaTypeEnum: {
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
export type LoadAccountsTaskTaskMessagesInnerBetaTypeEnum = typeof LoadAccountsTaskTaskMessagesInnerBetaTypeEnum[keyof typeof LoadAccountsTaskTaskMessagesInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface LoadAccountsTaskTaskReturnsInnerBeta
 */
export interface LoadAccountsTaskTaskReturnsInnerBeta {
    /**
     * The display label of the return value
     * @type {string}
     * @memberof LoadAccountsTaskTaskReturnsInnerBeta
     */
    'displayLabel'?: string;
    /**
     * The attribute name of the return value
     * @type {string}
     * @memberof LoadAccountsTaskTaskReturnsInnerBeta
     */
    'attributeName'?: string;
}
/**
 *
 * @export
 * @interface LoadEntitlementTaskBeta
 */
export interface LoadEntitlementTaskBeta {
    /**
     * System-generated unique ID of the task this taskStatus represents
     * @type {string}
     * @memberof LoadEntitlementTaskBeta
     */
    'id'?: string;
    /**
     * Type of task this task represents
     * @type {string}
     * @memberof LoadEntitlementTaskBeta
     */
    'type'?: string;
    /**
     * The name of the task
     * @type {string}
     * @memberof LoadEntitlementTaskBeta
     */
    'uniqueName'?: string;
    /**
     * The description of the task
     * @type {string}
     * @memberof LoadEntitlementTaskBeta
     */
    'description'?: string;
    /**
     * The user who initiated the task
     * @type {string}
     * @memberof LoadEntitlementTaskBeta
     */
    'launcher'?: string;
    /**
     * The creation date of the task
     * @type {string}
     * @memberof LoadEntitlementTaskBeta
     */
    'created'?: string;
    /**
     * Return values from the task
     * @type {Array<LoadEntitlementTaskReturnsInnerBeta>}
     * @memberof LoadEntitlementTaskBeta
     */
    'returns'?: Array<LoadEntitlementTaskReturnsInnerBeta>;
}
/**
 *
 * @export
 * @interface LoadEntitlementTaskReturnsInnerBeta
 */
export interface LoadEntitlementTaskReturnsInnerBeta {
    /**
     * The display label for the return value
     * @type {string}
     * @memberof LoadEntitlementTaskReturnsInnerBeta
     */
    'displayLabel'?: string;
    /**
     * The attribute name for the return value
     * @type {string}
     * @memberof LoadEntitlementTaskReturnsInnerBeta
     */
    'attributeName'?: string;
}
/**
 *
 * @export
 * @interface LoadUncorrelatedAccountsTaskBeta
 */
export interface LoadUncorrelatedAccountsTaskBeta {
    /**
     * The status of the result
     * @type {boolean}
     * @memberof LoadUncorrelatedAccountsTaskBeta
     */
    'success'?: boolean;
    /**
     *
     * @type {LoadUncorrelatedAccountsTaskTaskBeta}
     * @memberof LoadUncorrelatedAccountsTaskBeta
     */
    'task'?: LoadUncorrelatedAccountsTaskTaskBeta;
}
/**
 * Extra attributes map(dictionary) for the task.
 * @export
 * @interface LoadUncorrelatedAccountsTaskTaskAttributesBeta
 */
export interface LoadUncorrelatedAccountsTaskTaskAttributesBeta {
    /**
     * The id of qpoc job
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskAttributesBeta
     */
    'qpocJobId'?: string;
    /**
     * the task start delay value
     * @type {object}
     * @memberof LoadUncorrelatedAccountsTaskTaskAttributesBeta
     */
    'taskStartDelay'?: object;
}
/**
 *
 * @export
 * @interface LoadUncorrelatedAccountsTaskTaskBeta
 */
export interface LoadUncorrelatedAccountsTaskTaskBeta {
    /**
     * System-generated unique ID of the task this taskStatus represents
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'id'?: string;
    /**
     * Type of task this task represents
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'type'?: string;
    /**
     * The name of uncorrelated accounts process
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'name'?: string;
    /**
     * The description of the task
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'description'?: string;
    /**
     * The user who initiated the task
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'launcher'?: string;
    /**
     * The Task creation date
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'created'?: string;
    /**
     * The task start date
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'launched'?: string | null;
    /**
     * The task completion date
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'completed'?: string | null;
    /**
     * Task completion status.
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'completionStatus'?: LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum;
    /**
     * Name of the parent task if exists.
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'parentName'?: string | null;
    /**
     * List of the messages dedicated to the report.  From task definition perspective here usually should be warnings or errors.
     * @type {Array<LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta>}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'messages'?: Array<LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta>;
    /**
     * Current task state.
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'progress'?: string | null;
    /**
     *
     * @type {LoadUncorrelatedAccountsTaskTaskAttributesBeta}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'attributes'?: LoadUncorrelatedAccountsTaskTaskAttributesBeta;
    /**
     * Return values from the task
     * @type {object}
     * @memberof LoadUncorrelatedAccountsTaskTaskBeta
     */
    'returns'?: object;
}
export declare const LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
};
export type LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum = typeof LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum[keyof typeof LoadUncorrelatedAccountsTaskTaskBetaCompletionStatusEnum];
/**
 *
 * @export
 * @interface LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta
 */
export interface LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta {
    /**
     * Type of the message.
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta
     */
    'type'?: LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum;
    /**
     * Flag whether message is an error.
     * @type {boolean}
     * @memberof LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta
     */
    'error'?: boolean;
    /**
     * Flag whether message is a warning.
     * @type {boolean}
     * @memberof LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta
     */
    'warning'?: boolean;
    /**
     * Message string identifier.
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta
     */
    'key'?: string;
    /**
     * Message context with the locale based language.
     * @type {string}
     * @memberof LoadUncorrelatedAccountsTaskTaskMessagesInnerBeta
     */
    'localizedText'?: string;
}
export declare const LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum: {
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
export type LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum = typeof LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum[keyof typeof LoadUncorrelatedAccountsTaskTaskMessagesInnerBetaTypeEnum];
/**
 * An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const LocaleOriginBeta: {
    readonly Default: "DEFAULT";
    readonly Request: "REQUEST";
    readonly Null: "null";
};
export type LocaleOriginBeta = typeof LocaleOriginBeta[keyof typeof LocaleOriginBeta];
/**
 * Localized error message to indicate a failed invocation or error if any.
 * @export
 * @interface LocalizedMessageBeta
 */
export interface LocalizedMessageBeta {
    /**
     * Message locale
     * @type {string}
     * @memberof LocalizedMessageBeta
     */
    'locale': string;
    /**
     * Message text
     * @type {string}
     * @memberof LocalizedMessageBeta
     */
    'message': string;
}
/**
 *
 * @export
 * @interface LookupBeta
 */
export interface LookupBeta {
    /**
     * This is a JSON object of key-value pairs. The key is the string that will attempt to be matched to the input, and the value is the output string that should be returned if the key is matched   >**Note** the use of the optional default key value here; if none of the three countries in the above example match the input string, the transform will return \"Unknown Region\" for the attribute that is mapped to this transform.
     * @type {{ [key: string]: any; }}
     * @memberof LookupBeta
     */
    'table': {
        [key: string]: any;
    };
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof LookupBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof LookupBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * The definition of an Identity according to the Reassignment Configuration service
 * @export
 * @interface LookupStepBeta
 */
export interface LookupStepBeta {
    /**
     * The ID of the Identity who work is reassigned to
     * @type {string}
     * @memberof LookupStepBeta
     */
    'reassignedToId'?: string;
    /**
     * The ID of the Identity who work is reassigned from
     * @type {string}
     * @memberof LookupStepBeta
     */
    'reassignedFromId'?: string;
    /**
     *
     * @type {ReassignmentTypeEnumBeta}
     * @memberof LookupStepBeta
     */
    'reassignmentType'?: ReassignmentTypeEnumBeta;
}
/**
 *
 * @export
 * @interface LowerBeta
 */
export interface LowerBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof LowerBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof LowerBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * MAIL FROM attributes for a domain / identity
 * @export
 * @interface MailFromAttributesBeta
 */
export interface MailFromAttributesBeta {
    /**
     * The email identity
     * @type {string}
     * @memberof MailFromAttributesBeta
     */
    'identity'?: string;
    /**
     * The name of a domain that an email identity uses as a custom MAIL FROM domain
     * @type {string}
     * @memberof MailFromAttributesBeta
     */
    'mailFromDomain'?: string;
    /**
     * MX record that is required in customer\'s DNS to allow the domain to receive bounce and complaint notifications that email providers send you
     * @type {string}
     * @memberof MailFromAttributesBeta
     */
    'mxRecord'?: string;
    /**
     * TXT record that is required in customer\'s DNS in order to prove that Amazon SES is authorized to send email from your domain
     * @type {string}
     * @memberof MailFromAttributesBeta
     */
    'txtRecord'?: string;
    /**
     * The current status of the MAIL FROM verification
     * @type {string}
     * @memberof MailFromAttributesBeta
     */
    'mailFromDomainStatus'?: MailFromAttributesBetaMailFromDomainStatusEnum;
}
export declare const MailFromAttributesBetaMailFromDomainStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type MailFromAttributesBetaMailFromDomainStatusEnum = typeof MailFromAttributesBetaMailFromDomainStatusEnum[keyof typeof MailFromAttributesBetaMailFromDomainStatusEnum];
/**
 * MAIL FROM attributes for a domain / identity
 * @export
 * @interface MailFromAttributesDtoBeta
 */
export interface MailFromAttributesDtoBeta {
    /**
     * The identity or domain address
     * @type {string}
     * @memberof MailFromAttributesDtoBeta
     */
    'identity'?: string;
    /**
     * The new MAIL FROM domain of the identity. Must be a subdomain of the identity.
     * @type {string}
     * @memberof MailFromAttributesDtoBeta
     */
    'mailFromDomain'?: string;
}
/**
 * Managed Client
 * @export
 * @interface ManagedClientBeta
 */
export interface ManagedClientBeta {
    /**
     * ManagedClient ID
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'id'?: string;
    /**
     * ManagedClient alert key
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'alertKey'?: string;
    /**
     * ManagedClient gateway base url
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'apiGatewayBaseUrl'?: string;
    /**
     * Previous CC ID to be used in data migration. (This field will be deleted after CC migration!)
     * @type {number}
     * @memberof ManagedClientBeta
     */
    'ccId'?: number;
    /**
     * The client ID used in API management
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'clientId': string;
    /**
     * Cluster ID that the ManagedClient is linked to
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'clusterId': string;
    /**
     * VA cookbook
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'cookbook'?: string;
    /**
     * ManagedClient description
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'description': string;
    /**
     * The public IP address of the ManagedClient
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'ipAddress'?: string;
    /**
     * When the ManagedClient was last seen by the server
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'lastSeen'?: string;
    /**
     * ManagedClient name
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'name'?: string;
    /**
     * Milliseconds since the ManagedClient has polled the server
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'sinceLastSeen'?: string;
    /**
     * Status of the ManagedClient
     * @type {ManagedClientStatusEnumBeta}
     * @memberof ManagedClientBeta
     */
    'status'?: ManagedClientStatusEnumBeta;
    /**
     * Type of the ManagedClient (VA, CCG)
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'type': string;
    /**
     * ManagedClient VA download URL
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'vaDownloadUrl'?: string;
    /**
     * Version that the ManagedClient\'s VA is running
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'vaVersion'?: string;
    /**
     * Client\'s apiKey
     * @type {string}
     * @memberof ManagedClientBeta
     */
    'secret'?: string;
}
/**
 * Managed Client Status
 * @export
 * @interface ManagedClientStatusAggResponseBeta
 */
export interface ManagedClientStatusAggResponseBeta {
    /**
     * ManagedClientStatus body information
     * @type {object}
     * @memberof ManagedClientStatusAggResponseBeta
     */
    'body': object;
    /**
     *
     * @type {ManagedClientStatusEnumBeta}
     * @memberof ManagedClientStatusAggResponseBeta
     */
    'status': ManagedClientStatusEnumBeta;
    /**
     *
     * @type {ManagedClientTypeBeta}
     * @memberof ManagedClientStatusAggResponseBeta
     */
    'type': ManagedClientTypeBeta | null;
    /**
     * timestamp on the Client Status update
     * @type {string}
     * @memberof ManagedClientStatusAggResponseBeta
     */
    'timestamp': string;
}
/**
 * Managed Client Status
 * @export
 * @interface ManagedClientStatusBeta
 */
export interface ManagedClientStatusBeta {
    /**
     * ManagedClientStatus body information
     * @type {object}
     * @memberof ManagedClientStatusBeta
     */
    'body': object;
    /**
     *
     * @type {ManagedClientStatusEnumBeta}
     * @memberof ManagedClientStatusBeta
     */
    'status': ManagedClientStatusEnumBeta;
    /**
     *
     * @type {ManagedClientTypeBeta}
     * @memberof ManagedClientStatusBeta
     */
    'type': ManagedClientTypeBeta | null;
    /**
     * timestamp on the Client Status update
     * @type {string}
     * @memberof ManagedClientStatusBeta
     */
    'timestamp': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const ManagedClientStatusEnumBeta: {
    readonly Normal: "NORMAL";
    readonly Undefined: "UNDEFINED";
    readonly NotConfigured: "NOT_CONFIGURED";
    readonly Configuring: "CONFIGURING";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Failed: "FAILED";
};
export type ManagedClientStatusEnumBeta = typeof ManagedClientStatusEnumBeta[keyof typeof ManagedClientStatusEnumBeta];
/**
 * Managed Client type
 * @export
 * @enum {string}
 */
export declare const ManagedClientTypeBeta: {
    readonly Ccg: "CCG";
    readonly Va: "VA";
    readonly Internal: "INTERNAL";
    readonly IiqHarvester: "IIQ_HARVESTER";
    readonly Null: "null";
};
export type ManagedClientTypeBeta = typeof ManagedClientTypeBeta[keyof typeof ManagedClientTypeBeta];
/**
 * Managed Cluster Attributes for Cluster Configuration. Supported Cluster Types [sqsCluster, spConnectCluster]
 * @export
 * @interface ManagedClusterAttributesBeta
 */
export interface ManagedClusterAttributesBeta {
    /**
     *
     * @type {ManagedClusterQueueBeta}
     * @memberof ManagedClusterAttributesBeta
     */
    'queue'?: ManagedClusterQueueBeta;
    /**
     * ManagedCluster keystore for spConnectCluster type
     * @type {string}
     * @memberof ManagedClusterAttributesBeta
     */
    'keystore'?: string | null;
}
/**
 * Managed Cluster
 * @export
 * @interface ManagedClusterBeta
 */
export interface ManagedClusterBeta {
    /**
     * ManagedCluster ID
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'id': string;
    /**
     * ManagedCluster name
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'name'?: string;
    /**
     * ManagedCluster pod
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'pod'?: string;
    /**
     * ManagedCluster org
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'org'?: string;
    /**
     *
     * @type {ManagedClusterTypesBeta}
     * @memberof ManagedClusterBeta
     */
    'type'?: ManagedClusterTypesBeta;
    /**
     * ManagedProcess configuration map
     * @type {{ [key: string]: string; }}
     * @memberof ManagedClusterBeta
     */
    'configuration'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ManagedClusterKeyPairBeta}
     * @memberof ManagedClusterBeta
     */
    'keyPair'?: ManagedClusterKeyPairBeta;
    /**
     *
     * @type {ManagedClusterAttributesBeta}
     * @memberof ManagedClusterBeta
     */
    'attributes'?: ManagedClusterAttributesBeta;
    /**
     * ManagedCluster description
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'description'?: string;
    /**
     *
     * @type {ManagedClusterRedisBeta}
     * @memberof ManagedClusterBeta
     */
    'redis'?: ManagedClusterRedisBeta;
    /**
     *
     * @type {ManagedClientTypeBeta}
     * @memberof ManagedClusterBeta
     */
    'clientType': ManagedClientTypeBeta | null;
    /**
     * CCG version used by the ManagedCluster
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'ccgVersion': string;
    /**
     * boolean flag indiacting whether or not the cluster configuration is pinned
     * @type {boolean}
     * @memberof ManagedClusterBeta
     */
    'pinnedConfig'?: boolean;
    /**
     *
     * @type {ClientLogConfigurationBeta}
     * @memberof ManagedClusterBeta
     */
    'logConfiguration'?: ClientLogConfigurationBeta | null;
    /**
     * Whether or not the cluster is operational or not
     * @type {boolean}
     * @memberof ManagedClusterBeta
     */
    'operational'?: boolean;
    /**
     * Cluster status
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'status'?: string;
    /**
     * Public key certificate
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'publicKeyCertificate'?: string | null;
    /**
     * Public key thumbprint
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'publicKeyThumbprint'?: string | null;
    /**
     * Public key
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'publicKey'?: string | null;
    /**
     * Key describing any immediate cluster alerts
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'alertKey'?: string;
    /**
     * List of clients in a cluster
     * @type {Array<string>}
     * @memberof ManagedClusterBeta
     */
    'clientIds'?: Array<string>;
    /**
     * Number of services bound to a cluster
     * @type {number}
     * @memberof ManagedClusterBeta
     */
    'serviceCount'?: number;
    /**
     * CC ID only used in calling CC, will be removed without notice when Migration to CEGS is finished
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'ccId'?: string;
    /**
     * The date/time this cluster was created
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'createdAt'?: string | null;
    /**
     * The date/time this cluster was last updated
     * @type {string}
     * @memberof ManagedClusterBeta
     */
    'updatedAt'?: string | null;
}
/**
 * Managed Cluster key pair for Cluster
 * @export
 * @interface ManagedClusterKeyPairBeta
 */
export interface ManagedClusterKeyPairBeta {
    /**
     * ManagedCluster publicKey
     * @type {string}
     * @memberof ManagedClusterKeyPairBeta
     */
    'publicKey'?: string | null;
    /**
     * ManagedCluster publicKeyThumbprint
     * @type {string}
     * @memberof ManagedClusterKeyPairBeta
     */
    'publicKeyThumbprint'?: string | null;
    /**
     * ManagedCluster publicKeyCertificate
     * @type {string}
     * @memberof ManagedClusterKeyPairBeta
     */
    'publicKeyCertificate'?: string | null;
}
/**
 * Managed Cluster key pair for Cluster
 * @export
 * @interface ManagedClusterQueueBeta
 */
export interface ManagedClusterQueueBeta {
    /**
     * ManagedCluster queue name
     * @type {string}
     * @memberof ManagedClusterQueueBeta
     */
    'name'?: string;
    /**
     * ManagedCluster queue aws region
     * @type {string}
     * @memberof ManagedClusterQueueBeta
     */
    'region'?: string;
}
/**
 * Managed Cluster Redis Configuration
 * @export
 * @interface ManagedClusterRedisBeta
 */
export interface ManagedClusterRedisBeta {
    /**
     * ManagedCluster redisHost
     * @type {string}
     * @memberof ManagedClusterRedisBeta
     */
    'redisHost'?: string;
    /**
     * ManagedCluster redisPort
     * @type {number}
     * @memberof ManagedClusterRedisBeta
     */
    'redisPort'?: number;
}
/**
 * The Type of Cluster
 * @export
 * @enum {string}
 */
export declare const ManagedClusterTypesBeta: {
    readonly Idn: "idn";
    readonly Iai: "iai";
};
export type ManagedClusterTypesBeta = typeof ManagedClusterTypesBeta[keyof typeof ManagedClusterTypesBeta];
/**
 *
 * @export
 * @interface ManagerCorrelationMappingBeta
 */
export interface ManagerCorrelationMappingBeta {
    /**
     * Name of the attribute to use for manager correlation. The value found on the account attribute will be used to lookup the manager\'s identity.
     * @type {string}
     * @memberof ManagerCorrelationMappingBeta
     */
    'accountAttributeName'?: string;
    /**
     * Name of the identity attribute to search when trying to find a manager using the value from the accountAttribute.
     * @type {string}
     * @memberof ManagerCorrelationMappingBeta
     */
    'identityAttributeName'?: string;
}
/**
 *
 * @export
 * @interface ManualDiscoverApplicationsBeta
 */
export interface ManualDiscoverApplicationsBeta {
    /**
     * The CSV file to upload containing `application_name` and `description` columns. Each row represents an application to be discovered.
     * @type {any}
     * @memberof ManualDiscoverApplicationsBeta
     */
    'file': any;
}
/**
 *
 * @export
 * @interface ManualDiscoverApplicationsTemplateBeta
 */
export interface ManualDiscoverApplicationsTemplateBeta {
    /**
     * Name of the example application.
     * @type {string}
     * @memberof ManualDiscoverApplicationsTemplateBeta
     */
    'application_name'?: string;
    /**
     * Description of the example application.
     * @type {string}
     * @memberof ManualDiscoverApplicationsTemplateBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface ManualWorkItemDetailsBeta
 */
export interface ManualWorkItemDetailsBeta {
    /**
     * True if the request for this item was forwarded from one owner to another.
     * @type {boolean}
     * @memberof ManualWorkItemDetailsBeta
     */
    'forwarded'?: boolean;
    /**
     *
     * @type {ManualWorkItemDetailsOriginalOwnerBeta}
     * @memberof ManualWorkItemDetailsBeta
     */
    'originalOwner'?: ManualWorkItemDetailsOriginalOwnerBeta | null;
    /**
     *
     * @type {ManualWorkItemDetailsCurrentOwnerBeta}
     * @memberof ManualWorkItemDetailsBeta
     */
    'currentOwner'?: ManualWorkItemDetailsCurrentOwnerBeta | null;
    /**
     * Time at which item was modified.
     * @type {string}
     * @memberof ManualWorkItemDetailsBeta
     */
    'modified'?: string;
    /**
     *
     * @type {ManualWorkItemStateBeta}
     * @memberof ManualWorkItemDetailsBeta
     */
    'status'?: ManualWorkItemStateBeta;
    /**
     * The history of approval forward action.
     * @type {Array<ApprovalForwardHistoryBeta>}
     * @memberof ManualWorkItemDetailsBeta
     */
    'forwardHistory'?: Array<ApprovalForwardHistoryBeta> | null;
}
/**
 * Identity of current work item owner.
 * @export
 * @interface ManualWorkItemDetailsCurrentOwnerBeta
 */
export interface ManualWorkItemDetailsCurrentOwnerBeta {
    /**
     * DTO type of current work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsCurrentOwnerBeta
     */
    'type'?: ManualWorkItemDetailsCurrentOwnerBetaTypeEnum;
    /**
     * ID of current work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsCurrentOwnerBeta
     */
    'id'?: string;
    /**
     * Display name of current work item owner.
     * @type {string}
     * @memberof ManualWorkItemDetailsCurrentOwnerBeta
     */
    'name'?: string;
}
export declare const ManualWorkItemDetailsCurrentOwnerBetaTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type ManualWorkItemDetailsCurrentOwnerBetaTypeEnum = typeof ManualWorkItemDetailsCurrentOwnerBetaTypeEnum[keyof typeof ManualWorkItemDetailsCurrentOwnerBetaTypeEnum];
/**
 * Identity of original work item owner, if the work item has been forwarded.
 * @export
 * @interface ManualWorkItemDetailsOriginalOwnerBeta
 */
export interface ManualWorkItemDetailsOriginalOwnerBeta {
    /**
     * DTO type of original work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsOriginalOwnerBeta
     */
    'type'?: ManualWorkItemDetailsOriginalOwnerBetaTypeEnum;
    /**
     * ID of original work item owner\'s identity.
     * @type {string}
     * @memberof ManualWorkItemDetailsOriginalOwnerBeta
     */
    'id'?: string;
    /**
     * Display name of original work item owner.
     * @type {string}
     * @memberof ManualWorkItemDetailsOriginalOwnerBeta
     */
    'name'?: string;
}
export declare const ManualWorkItemDetailsOriginalOwnerBetaTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Identity: "IDENTITY";
};
export type ManualWorkItemDetailsOriginalOwnerBetaTypeEnum = typeof ManualWorkItemDetailsOriginalOwnerBetaTypeEnum[keyof typeof ManualWorkItemDetailsOriginalOwnerBetaTypeEnum];
/**
 * Indicates the state of the request processing for this item: * PENDING: The request for this item is awaiting processing. * APPROVED: The request for this item has been approved. * REJECTED: The request for this item was rejected. * EXPIRED: The request for this item expired with no action taken. * CANCELLED: The request for this item was cancelled with no user action. * ARCHIVED: The request for this item has been archived after completion.
 * @export
 * @enum {string}
 */
export declare const ManualWorkItemStateBeta: {
    readonly Pending: "PENDING";
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
    readonly Expired: "EXPIRED";
    readonly Cancelled: "CANCELLED";
    readonly Archived: "ARCHIVED";
};
export type ManualWorkItemStateBeta = typeof ManualWorkItemStateBeta[keyof typeof ManualWorkItemStateBeta];
/**
 *
 * @export
 * @interface ManuallyUpdatedFieldsDTOBeta
 */
export interface ManuallyUpdatedFieldsDTOBeta {
    /**
     * True if the entitlements name was updated manually via entitlement import csv or patch endpoint.  False means that property value has not been change after first entitlement aggregation. Field refers to [Entitlement response schema](https://developer.sailpoint.com/idn/api/beta/get-entitlement) > `name` property.
     * @type {boolean}
     * @memberof ManuallyUpdatedFieldsDTOBeta
     */
    'DISPLAY_NAME'?: boolean;
    /**
     * True if the entitlement description was updated manually via entitlement import csv or patch endpoint.  False means that property value has not been change after first entitlement aggregation. Field refers to [Entitlement response schema](https://developer.sailpoint.com/idn/api/beta/get-entitlement) > `description` property.
     * @type {boolean}
     * @memberof ManuallyUpdatedFieldsDTOBeta
     */
    'DESCRIPTION'?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const MediumBeta: {
    readonly Email: "EMAIL";
    readonly Sms: "SMS";
    readonly Phone: "PHONE";
    readonly Slack: "SLACK";
    readonly Teams: "TEAMS";
};
export type MediumBeta = typeof MediumBeta[keyof typeof MediumBeta];
/**
 *
 * @export
 * @interface MessageCatalogDtoBeta
 */
export interface MessageCatalogDtoBeta {
    /**
     * The language in which the messages are returned
     * @type {string}
     * @memberof MessageCatalogDtoBeta
     */
    'locale'?: string;
    /**
     * The list of message with their keys and formats
     * @type {Array<ResourceBundleMessageBeta>}
     * @memberof MessageCatalogDtoBeta
     */
    'messages'?: Array<ResourceBundleMessageBeta>;
}
/**
 *
 * @export
 * @interface MetricResponseBeta
 */
export interface MetricResponseBeta {
    /**
     * the name of metric
     * @type {string}
     * @memberof MetricResponseBeta
     */
    'name'?: string;
    /**
     * the value associated to the metric
     * @type {number}
     * @memberof MetricResponseBeta
     */
    'value'?: number;
}
/**
 * Response model for configuration test of a given MFA method
 * @export
 * @interface MfaConfigTestResponseBeta
 */
export interface MfaConfigTestResponseBeta {
    /**
     * The configuration test result.
     * @type {string}
     * @memberof MfaConfigTestResponseBeta
     */
    'state'?: MfaConfigTestResponseBetaStateEnum;
    /**
     * The error message to indicate the failure of configuration test.
     * @type {string}
     * @memberof MfaConfigTestResponseBeta
     */
    'error'?: string;
}
export declare const MfaConfigTestResponseBetaStateEnum: {
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type MfaConfigTestResponseBetaStateEnum = typeof MfaConfigTestResponseBetaStateEnum[keyof typeof MfaConfigTestResponseBetaStateEnum];
/**
 *
 * @export
 * @interface MfaDuoConfigBeta
 */
export interface MfaDuoConfigBeta {
    /**
     * Mfa method name
     * @type {string}
     * @memberof MfaDuoConfigBeta
     */
    'mfaMethod'?: string | null;
    /**
     * If MFA method is enabled.
     * @type {boolean}
     * @memberof MfaDuoConfigBeta
     */
    'enabled'?: boolean;
    /**
     * The server host name or IP address of the MFA provider.
     * @type {string}
     * @memberof MfaDuoConfigBeta
     */
    'host'?: string | null;
    /**
     * The secret key for authenticating requests to the MFA provider.
     * @type {string}
     * @memberof MfaDuoConfigBeta
     */
    'accessKey'?: string | null;
    /**
     * Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.
     * @type {string}
     * @memberof MfaDuoConfigBeta
     */
    'identityAttribute'?: string | null;
    /**
     * A map with additional config properties for the given MFA method - duo-web.
     * @type {{ [key: string]: any; }}
     * @memberof MfaDuoConfigBeta
     */
    'configProperties'?: {
        [key: string]: any;
    } | null;
}
/**
 *
 * @export
 * @interface MfaOktaConfigBeta
 */
export interface MfaOktaConfigBeta {
    /**
     * Mfa method name
     * @type {string}
     * @memberof MfaOktaConfigBeta
     */
    'mfaMethod'?: string | null;
    /**
     * If MFA method is enabled.
     * @type {boolean}
     * @memberof MfaOktaConfigBeta
     */
    'enabled'?: boolean;
    /**
     * The server host name or IP address of the MFA provider.
     * @type {string}
     * @memberof MfaOktaConfigBeta
     */
    'host'?: string | null;
    /**
     * The secret key for authenticating requests to the MFA provider.
     * @type {string}
     * @memberof MfaOktaConfigBeta
     */
    'accessKey'?: string | null;
    /**
     * Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.
     * @type {string}
     * @memberof MfaOktaConfigBeta
     */
    'identityAttribute'?: string | null;
}
/**
 *
 * @export
 * @interface MultiPolicyRequestBeta
 */
export interface MultiPolicyRequestBeta {
    /**
     * Multi-policy report will be run for this list of ids
     * @type {Array<string>}
     * @memberof MultiPolicyRequestBeta
     */
    'filteredPolicyList'?: Array<string>;
}
/**
 *
 * @export
 * @interface NameNormalizerBeta
 */
export interface NameNormalizerBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof NameNormalizerBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof NameNormalizerBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * | Construct       | Date Time Pattern | Description | | ---------       | ----------------- | ----------- | | ISO8601         | `yyyy-MM-dd\'T\'HH:mm:ss.SSSX` | The ISO8601 standard. |           | LDAP            | `yyyyMMddHHmmss.Z`           | The LDAP standard.    | | PEOPLE_SOFT     | `MM/dd/yyyy`                 | The date format People Soft uses. | | EPOCH_TIME_JAVA | # ms from midnight, January 1st, 1970 | The incoming date value as elapsed time in milliseconds from midnight, January 1st, 1970. | | EPOCH_TIME_WIN32| # intervals of 100ns from midnight, January 1st, 1601 | The incoming date value as elapsed time in 100-nanosecond intervals from midnight, January 1st, 1601. |
 * @export
 * @enum {string}
 */
export declare const NamedConstructsBeta: {
    readonly Iso8601: "ISO8601";
    readonly Ldap: "LDAP";
    readonly PeopleSoft: "PEOPLE_SOFT";
    readonly EpochTimeJava: "EPOCH_TIME_JAVA";
    readonly EpochTimeWin32: "EPOCH_TIME_WIN32";
};
export type NamedConstructsBeta = typeof NamedConstructsBeta[keyof typeof NamedConstructsBeta];
/**
 * Source configuration information for Native Change Detection that is read and used by account aggregation process.
 * @export
 * @interface NativeChangeDetectionConfigBeta
 */
export interface NativeChangeDetectionConfigBeta {
    /**
     * A flag indicating if Native Change Detection is enabled for a source.
     * @type {boolean}
     * @memberof NativeChangeDetectionConfigBeta
     */
    'enabled'?: boolean;
    /**
     * Operation types for which Native Change Detection is enabled for a source.
     * @type {Array<string>}
     * @memberof NativeChangeDetectionConfigBeta
     */
    'operations'?: Array<NativeChangeDetectionConfigBetaOperationsEnum>;
    /**
     * A flag indicating that all entitlements participate in Native Change Detection.
     * @type {boolean}
     * @memberof NativeChangeDetectionConfigBeta
     */
    'allEntitlements'?: boolean;
    /**
     * A flag indicating that all non-entitlement account attributes participate in Native Change Detection.
     * @type {boolean}
     * @memberof NativeChangeDetectionConfigBeta
     */
    'allNonEntitlementAttributes'?: boolean;
    /**
     * If allEntitlements flag is off this field lists entitlements that participate in Native Change Detection.
     * @type {Array<string>}
     * @memberof NativeChangeDetectionConfigBeta
     */
    'selectedEntitlements'?: Array<string>;
    /**
     * If allNonEntitlementAttributes flag is off this field lists non-entitlement account attributes that participate in Native Change Detection.
     * @type {Array<string>}
     * @memberof NativeChangeDetectionConfigBeta
     */
    'selectedNonEntitlementAttributes'?: Array<string>;
}
export declare const NativeChangeDetectionConfigBetaOperationsEnum: {
    readonly Updated: "ACCOUNT_UPDATED";
    readonly Created: "ACCOUNT_CREATED";
    readonly Deleted: "ACCOUNT_DELETED";
};
export type NativeChangeDetectionConfigBetaOperationsEnum = typeof NativeChangeDetectionConfigBetaOperationsEnum[keyof typeof NativeChangeDetectionConfigBetaOperationsEnum];
/**
 *
 * @export
 * @interface NonEmployeeApprovalDecisionBeta
 */
export interface NonEmployeeApprovalDecisionBeta {
    /**
     * Comment on the approval item.
     * @type {string}
     * @memberof NonEmployeeApprovalDecisionBeta
     */
    'comment'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemAllOfBeta
 */
export interface NonEmployeeApprovalItemAllOfBeta {
    /**
     *
     * @type {NonEmployeeRequestLiteBeta}
     * @memberof NonEmployeeApprovalItemAllOfBeta
     */
    'nonEmployeeRequest'?: NonEmployeeRequestLiteBeta;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemBaseBeta
 */
export interface NonEmployeeApprovalItemBaseBeta {
    /**
     * Non-Employee approval item id
     * @type {string}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'id'?: string;
    /**
     *
     * @type {IdentityReferenceWithIdBeta}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'approver'?: IdentityReferenceWithIdBeta;
    /**
     * Requested identity account name
     * @type {string}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'accountName'?: string;
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * Approval order
     * @type {number}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'approvalOrder'?: number;
    /**
     * comment of approver
     * @type {string}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'comment'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeApprovalItemBaseBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemBeta
 */
export interface NonEmployeeApprovalItemBeta {
    /**
     * Non-Employee approval item id
     * @type {string}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'id'?: string;
    /**
     *
     * @type {IdentityReferenceWithIdBeta}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'approver'?: IdentityReferenceWithIdBeta;
    /**
     * Requested identity account name
     * @type {string}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'accountName'?: string;
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * Approval order
     * @type {number}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'approvalOrder'?: number;
    /**
     * comment of approver
     * @type {string}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'comment'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'created'?: string;
    /**
     *
     * @type {NonEmployeeRequestLiteBeta}
     * @memberof NonEmployeeApprovalItemBeta
     */
    'nonEmployeeRequest'?: NonEmployeeRequestLiteBeta;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemDetailAllOfBeta
 */
export interface NonEmployeeApprovalItemDetailAllOfBeta {
    /**
     *
     * @type {NonEmployeeRequestWithoutApprovalItemBeta}
     * @memberof NonEmployeeApprovalItemDetailAllOfBeta
     */
    'nonEmployeeRequest'?: NonEmployeeRequestWithoutApprovalItemBeta;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalItemDetailBeta
 */
export interface NonEmployeeApprovalItemDetailBeta {
    /**
     * Non-Employee approval item id
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'id'?: string;
    /**
     *
     * @type {IdentityReferenceWithIdBeta}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'approver'?: IdentityReferenceWithIdBeta;
    /**
     * Requested identity account name
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'accountName'?: string;
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * Approval order
     * @type {number}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'approvalOrder'?: number;
    /**
     * comment of approver
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'comment'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'created'?: string;
    /**
     *
     * @type {NonEmployeeRequestWithoutApprovalItemBeta}
     * @memberof NonEmployeeApprovalItemDetailBeta
     */
    'nonEmployeeRequest'?: NonEmployeeRequestWithoutApprovalItemBeta;
}
/**
 *
 * @export
 * @interface NonEmployeeApprovalSummaryBeta
 */
export interface NonEmployeeApprovalSummaryBeta {
    /**
     * The number of approved non-employee approval requests.
     * @type {number}
     * @memberof NonEmployeeApprovalSummaryBeta
     */
    'approved'?: number;
    /**
     * The number of pending non-employee approval requests.
     * @type {number}
     * @memberof NonEmployeeApprovalSummaryBeta
     */
    'pending'?: number;
    /**
     * The number of rejected non-employee approval requests.
     * @type {number}
     * @memberof NonEmployeeApprovalSummaryBeta
     */
    'rejected'?: number;
}
/**
 *
 * @export
 * @interface NonEmployeeBulkUploadJobBeta
 */
export interface NonEmployeeBulkUploadJobBeta {
    /**
     * The bulk upload job\'s ID. (UUID)
     * @type {string}
     * @memberof NonEmployeeBulkUploadJobBeta
     */
    'id'?: string;
    /**
     * The ID of the source to bulk-upload non-employees to. (UUID)
     * @type {string}
     * @memberof NonEmployeeBulkUploadJobBeta
     */
    'sourceId'?: string;
    /**
     * The date-time the job was submitted.
     * @type {string}
     * @memberof NonEmployeeBulkUploadJobBeta
     */
    'created'?: string;
    /**
     * The date-time that the job was last updated.
     * @type {string}
     * @memberof NonEmployeeBulkUploadJobBeta
     */
    'modified'?: string;
    /**
     * Returns the following values indicating the progress or result of the bulk upload job. \"PENDING\" means the job is queued and waiting to be processed. \"IN_PROGRESS\" means the job is currently being processed. \"COMPLETED\" means the job has been completed without any errors. \"ERROR\" means the job failed to process with errors.
     * @type {string}
     * @memberof NonEmployeeBulkUploadJobBeta
     */
    'status'?: NonEmployeeBulkUploadJobBetaStatusEnum;
}
export declare const NonEmployeeBulkUploadJobBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
};
export type NonEmployeeBulkUploadJobBetaStatusEnum = typeof NonEmployeeBulkUploadJobBetaStatusEnum[keyof typeof NonEmployeeBulkUploadJobBetaStatusEnum];
/**
 *
 * @export
 * @interface NonEmployeeBulkUploadStatusBeta
 */
export interface NonEmployeeBulkUploadStatusBeta {
    /**
     * Returns the following values indicating the progress or result of the bulk upload job. \"PENDING\" means the job is queued and waiting to be processed. \"IN_PROGRESS\" means the job is currently being processed. \"COMPLETED\" means the job has been completed without any errors. \"ERROR\" means the job failed to process with errors. null means job has been submitted to the source.
     * @type {string}
     * @memberof NonEmployeeBulkUploadStatusBeta
     */
    'status'?: NonEmployeeBulkUploadStatusBetaStatusEnum;
}
export declare const NonEmployeeBulkUploadStatusBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly InProgress: "IN_PROGRESS";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
};
export type NonEmployeeBulkUploadStatusBetaStatusEnum = typeof NonEmployeeBulkUploadStatusBetaStatusEnum[keyof typeof NonEmployeeBulkUploadStatusBetaStatusEnum];
/**
 *
 * @export
 * @interface NonEmployeeIdnUserRequestBeta
 */
export interface NonEmployeeIdnUserRequestBeta {
    /**
     * Identity id.
     * @type {string}
     * @memberof NonEmployeeIdnUserRequestBeta
     */
    'id': string;
}
/**
 *
 * @export
 * @interface NonEmployeeRecordBeta
 */
export interface NonEmployeeRecordBeta {
    /**
     * Non-Employee record id.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'id'?: string;
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'manager'?: string;
    /**
     * Non-Employee\'s source id.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'sourceId'?: string;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRecordBeta
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRecordBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRejectApprovalDecisionBeta
 */
export interface NonEmployeeRejectApprovalDecisionBeta {
    /**
     * Comment on the approval item.
     * @type {string}
     * @memberof NonEmployeeRejectApprovalDecisionBeta
     */
    'comment': string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestAllOfBeta
 */
export interface NonEmployeeRequestAllOfBeta {
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLiteBeta}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'nonEmployeeSource'?: NonEmployeeSourceLiteBeta;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * List of approval item for the request
     * @type {Array<NonEmployeeApprovalItemBaseBeta>}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'approvalItems'?: Array<NonEmployeeApprovalItemBaseBeta>;
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestAllOfBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestBeta
 */
export interface NonEmployeeRequestBeta {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'description'?: string;
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLiteBeta}
     * @memberof NonEmployeeRequestBeta
     */
    'nonEmployeeSource'?: NonEmployeeSourceLiteBeta;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestBeta
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * List of approval item for the request
     * @type {Array<NonEmployeeApprovalItemBaseBeta>}
     * @memberof NonEmployeeRequestBeta
     */
    'approvalItems'?: Array<NonEmployeeApprovalItemBaseBeta>;
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeRequestBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestBodyBeta
 */
export interface NonEmployeeRequestBodyBeta {
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'accountName': string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'firstName': string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'lastName': string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'email': string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'phone': string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'manager': string;
    /**
     * Non-Employee\'s source id.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'sourceId': string;
    /**
     * Attribute blob/bag for a non-employee, 10 attributes is the maximum size supported.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'startDate': string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestBodyBeta
     */
    'endDate': string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestLiteBeta
 */
export interface NonEmployeeRequestLiteBeta {
    /**
     * Non-Employee request id.
     * @type {string}
     * @memberof NonEmployeeRequestLiteBeta
     */
    'id'?: string;
    /**
     *
     * @type {IdentityReferenceWithIdBeta}
     * @memberof NonEmployeeRequestLiteBeta
     */
    'requester'?: IdentityReferenceWithIdBeta;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestSummaryBeta
 */
export interface NonEmployeeRequestSummaryBeta {
    /**
     * The number of approved non-employee requests on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummaryBeta
     */
    'approved'?: number;
    /**
     * The number of rejected non-employee requests on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummaryBeta
     */
    'rejected'?: number;
    /**
     * The number of pending non-employee requests on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummaryBeta
     */
    'pending'?: number;
    /**
     * The number of non-employee records on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeRequestSummaryBeta
     */
    'nonEmployeeCount'?: number;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestWithoutApprovalItemAllOfBeta
 */
export interface NonEmployeeRequestWithoutApprovalItemAllOfBeta {
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLiteWithSchemaAttributesBeta}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'nonEmployeeSource'?: NonEmployeeSourceLiteWithSchemaAttributesBeta;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemAllOfBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeRequestWithoutApprovalItemBeta
 */
export interface NonEmployeeRequestWithoutApprovalItemBeta {
    /**
     * Non-Employee request id.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'id'?: string;
    /**
     *
     * @type {IdentityReferenceWithIdBeta}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'requester'?: IdentityReferenceWithIdBeta;
    /**
     * Requested identity account name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'accountName'?: string;
    /**
     * Non-Employee\'s first name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'firstName'?: string;
    /**
     * Non-Employee\'s last name.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'lastName'?: string;
    /**
     * Non-Employee\'s email.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'email'?: string;
    /**
     * Non-Employee\'s phone.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'phone'?: string;
    /**
     * The account ID of a valid identity to serve as this non-employee\'s manager.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'manager'?: string;
    /**
     *
     * @type {NonEmployeeSourceLiteWithSchemaAttributesBeta}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'nonEmployeeSource'?: NonEmployeeSourceLiteWithSchemaAttributesBeta;
    /**
     * Attribute blob/bag for a non-employee.
     * @type {{ [key: string]: string; }}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'data'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {ApprovalStatusBeta}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'approvalStatus'?: ApprovalStatusBeta;
    /**
     * comment of requester
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'comment'?: string;
    /**
     * When the request was completely approved.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'completionDate'?: string;
    /**
     * Non-Employee employment start date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'startDate'?: string;
    /**
     * Non-Employee employment end date.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'endDate'?: string;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeRequestWithoutApprovalItemBeta
     */
    'created'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSchemaAttributeBeta
 */
export interface NonEmployeeSchemaAttributeBeta {
    /**
     * Schema Attribute Id
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'id'?: string;
    /**
     * True if this schema attribute is mandatory on all non-employees sources.
     * @type {boolean}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'system'?: boolean;
    /**
     * When the schema attribute was last modified.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'modified'?: string;
    /**
     * When the schema attribute was created.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'created'?: string;
    /**
     *
     * @type {NonEmployeeSchemaAttributeTypeBeta}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'type': NonEmployeeSchemaAttributeTypeBeta;
    /**
     * Label displayed on the UI for this schema attribute.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'label': string;
    /**
     * The technical name of the attribute. Must be unique per source.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'technicalName': string;
    /**
     * help text displayed by UI.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'helpText'?: string;
    /**
     * Hint text that fills UI box.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'placeholder'?: string;
    /**
     * If true, the schema attribute is required for all non-employees in the source
     * @type {boolean}
     * @memberof NonEmployeeSchemaAttributeBeta
     */
    'required'?: boolean;
}
/**
 *
 * @export
 * @interface NonEmployeeSchemaAttributeBodyBeta
 */
export interface NonEmployeeSchemaAttributeBodyBeta {
    /**
     * Type of the attribute. Only type \'TEXT\' is supported for custom attributes.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBodyBeta
     */
    'type': string;
    /**
     * Label displayed on the UI for this schema attribute.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBodyBeta
     */
    'label': string;
    /**
     * The technical name of the attribute. Must be unique per source.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBodyBeta
     */
    'technicalName': string;
    /**
     * help text displayed by UI.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBodyBeta
     */
    'helpText'?: string;
    /**
     * Hint text that fills UI box.
     * @type {string}
     * @memberof NonEmployeeSchemaAttributeBodyBeta
     */
    'placeholder'?: string;
    /**
     * If true, the schema attribute is required for all non-employees in the source
     * @type {boolean}
     * @memberof NonEmployeeSchemaAttributeBodyBeta
     */
    'required'?: boolean;
}
/**
 * Enum representing the type of data a schema attribute accepts.
 * @export
 * @enum {string}
 */
export declare const NonEmployeeSchemaAttributeTypeBeta: {
    readonly Text: "TEXT";
    readonly Date: "DATE";
    readonly Identity: "IDENTITY";
};
export type NonEmployeeSchemaAttributeTypeBeta = typeof NonEmployeeSchemaAttributeTypeBeta[keyof typeof NonEmployeeSchemaAttributeTypeBeta];
/**
 *
 * @export
 * @interface NonEmployeeSourceAllOfBeta
 */
export interface NonEmployeeSourceAllOfBeta {
    /**
     * List of approvers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceAllOfBeta
     */
    'approvers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * List of account managers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceAllOfBeta
     */
    'accountManagers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceAllOfBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceAllOfBeta
     */
    'created'?: string;
    /**
     * The number of non-employee records on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeSourceAllOfBeta
     */
    'nonEmployeeCount'?: number | null;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceBeta
 */
export interface NonEmployeeSourceBeta {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceBeta
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceBeta
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceBeta
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceBeta
     */
    'description'?: string;
    /**
     * List of approvers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceBeta
     */
    'approvers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * List of account managers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceBeta
     */
    'accountManagers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceBeta
     */
    'created'?: string;
    /**
     * The number of non-employee records on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeSourceBeta
     */
    'nonEmployeeCount'?: number | null;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceLiteBeta
 */
export interface NonEmployeeSourceLiteBeta {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceLiteBeta
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteBeta
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteBeta
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceLiteWithSchemaAttributesAllOfBeta
 */
export interface NonEmployeeSourceLiteWithSchemaAttributesAllOfBeta {
    /**
     * List of schema attributes associated with this non-employee source.
     * @type {Array<NonEmployeeSchemaAttributeBeta>}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesAllOfBeta
     */
    'schemaAttributes'?: Array<NonEmployeeSchemaAttributeBeta>;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceLiteWithSchemaAttributesBeta
 */
export interface NonEmployeeSourceLiteWithSchemaAttributesBeta {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesBeta
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesBeta
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesBeta
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesBeta
     */
    'description'?: string;
    /**
     * List of schema attributes associated with this non-employee source.
     * @type {Array<NonEmployeeSchemaAttributeBeta>}
     * @memberof NonEmployeeSourceLiteWithSchemaAttributesBeta
     */
    'schemaAttributes'?: Array<NonEmployeeSchemaAttributeBeta>;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceRequestBodyBeta
 */
export interface NonEmployeeSourceRequestBodyBeta {
    /**
     * Name of non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceRequestBodyBeta
     */
    'name': string;
    /**
     * Description of non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceRequestBodyBeta
     */
    'description': string;
    /**
     *
     * @type {NonEmployeeIdnUserRequestBeta}
     * @memberof NonEmployeeSourceRequestBodyBeta
     */
    'owner': NonEmployeeIdnUserRequestBeta;
    /**
     * The ID for the management workgroup that contains source sub-admins
     * @type {string}
     * @memberof NonEmployeeSourceRequestBodyBeta
     */
    'managementWorkgroup'?: string;
    /**
     * List of approvers.
     * @type {Array<NonEmployeeIdnUserRequestBeta>}
     * @memberof NonEmployeeSourceRequestBodyBeta
     */
    'approvers'?: Array<NonEmployeeIdnUserRequestBeta>;
    /**
     * List of account managers.
     * @type {Array<NonEmployeeIdnUserRequestBeta>}
     * @memberof NonEmployeeSourceRequestBodyBeta
     */
    'accountManagers'?: Array<NonEmployeeIdnUserRequestBeta>;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithCloudExternalIdAllOfBeta
 */
export interface NonEmployeeSourceWithCloudExternalIdAllOfBeta {
    /**
     * Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdAllOfBeta
     */
    'cloudExternalId'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithCloudExternalIdBeta
 */
export interface NonEmployeeSourceWithCloudExternalIdBeta {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'description'?: string;
    /**
     * List of approvers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'approvers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * List of account managers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'accountManagers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'created'?: string;
    /**
     * The number of non-employee records on all sources that *requested-for* user manages.
     * @type {number}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'nonEmployeeCount'?: number | null;
    /**
     * Legacy ID used for sources from the V1 API. This attribute will be removed from a future version of the API and will not be considered a breaking change. No clients should rely on this ID always being present.
     * @type {string}
     * @memberof NonEmployeeSourceWithCloudExternalIdBeta
     */
    'cloudExternalId'?: string;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithNECountAllOfBeta
 */
export interface NonEmployeeSourceWithNECountAllOfBeta {
    /**
     * Number of non-employee records associated with this source.
     * @type {number}
     * @memberof NonEmployeeSourceWithNECountAllOfBeta
     */
    'nonEmployeeCount'?: number;
}
/**
 *
 * @export
 * @interface NonEmployeeSourceWithNECountBeta
 */
export interface NonEmployeeSourceWithNECountBeta {
    /**
     * Non-Employee source id.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'id'?: string;
    /**
     * Source Id associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'sourceId'?: string;
    /**
     * Source name associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'name'?: string;
    /**
     * Source description associated with this non-employee source.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'description'?: string;
    /**
     * List of approvers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'approvers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * List of account managers
     * @type {Array<IdentityReferenceWithIdBeta>}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'accountManagers'?: Array<IdentityReferenceWithIdBeta>;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'modified'?: string;
    /**
     * When the request was created.
     * @type {string}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'created'?: string;
    /**
     * Number of non-employee records associated with this source.
     * @type {number}
     * @memberof NonEmployeeSourceWithNECountBeta
     */
    'nonEmployeeCount'?: number;
}
/**
 *
 * @export
 * @interface NotificationTemplateContextBeta
 */
export interface NotificationTemplateContextBeta {
    /**
     * A JSON object that stores the context.
     * @type {{ [key: string]: any; }}
     * @memberof NotificationTemplateContextBeta
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * When the global context was created
     * @type {string}
     * @memberof NotificationTemplateContextBeta
     */
    'created'?: string;
    /**
     * When the global context was last modified
     * @type {string}
     * @memberof NotificationTemplateContextBeta
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface ObjectExportImportOptionsBeta
 */
export interface ObjectExportImportOptionsBeta {
    /**
     * Object ids to be included in an import or export.
     * @type {Array<string>}
     * @memberof ObjectExportImportOptionsBeta
     */
    'includedIds'?: Array<string>;
    /**
     * Object names to be included in an import or export.
     * @type {Array<string>}
     * @memberof ObjectExportImportOptionsBeta
     */
    'includedNames'?: Array<string>;
}
/**
 * Response model for import of a single object.
 * @export
 * @interface ObjectImportResultBeta
 */
export interface ObjectImportResultBeta {
    /**
     * Informational messages returned from the target service on import.
     * @type {Array<SpConfigMessageBeta>}
     * @memberof ObjectImportResultBeta
     */
    'infos': Array<SpConfigMessageBeta>;
    /**
     * Warning messages returned from the target service on import.
     * @type {Array<SpConfigMessageBeta>}
     * @memberof ObjectImportResultBeta
     */
    'warnings': Array<SpConfigMessageBeta>;
    /**
     * Error messages returned from the target service on import.
     * @type {Array<SpConfigMessageBeta>}
     * @memberof ObjectImportResultBeta
     */
    'errors': Array<SpConfigMessageBeta>;
    /**
     * References to objects that were created or updated by the import.
     * @type {Array<ImportObjectBeta>}
     * @memberof ObjectImportResultBeta
     */
    'importedObjects': Array<ImportObjectBeta>;
}
/**
 *
 * @export
 * @interface OktaVerificationRequestBeta
 */
export interface OktaVerificationRequestBeta {
    /**
     * User identifier for Verification request. The value of the user\'s attribute.
     * @type {string}
     * @memberof OktaVerificationRequestBeta
     */
    'userId': string;
}
/**
 * DTO class for OrgConfig data accessible by customer external org admin (\"ORG_ADMIN\") users
 * @export
 * @interface OrgConfigBeta
 */
export interface OrgConfigBeta {
    /**
     * The name of the org.
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'orgName'?: string;
    /**
     * The selected time zone which is to be used for the org.  This directly affects when scheduled tasks are executed.  Valid options can be found at /beta/org-config/valid-time-zones
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'timeZone'?: string;
    /**
     * Flag to determine whether the LCS_CHANGE_HONORS_SOURCE_ENABLE_FEATURE flag is enabled for the current org.
     * @type {boolean}
     * @memberof OrgConfigBeta
     */
    'lcsChangeHonorsSourceEnableFeature'?: boolean;
    /**
     * ARM Customer ID
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'armCustomerId'?: string | null;
    /**
     * A list of IDN::sourceId to ARM::systemId mappings.
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'armSapSystemIdMappings'?: string | null;
    /**
     * ARM authentication string
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'armAuth'?: string | null;
    /**
     * ARM database name
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'armDb'?: string | null;
    /**
     * ARM SSO URL
     * @type {string}
     * @memberof OrgConfigBeta
     */
    'armSsoUrl'?: string | null;
    /**
     * Flag to determine whether IAI Certification Recommendations are enabled for the current org
     * @type {boolean}
     * @memberof OrgConfigBeta
     */
    'iaiEnableCertificationRecommendations'?: boolean;
    /**
     *
     * @type {Array<ReportConfigDTOBeta>}
     * @memberof OrgConfigBeta
     */
    'sodReportConfigs'?: Array<ReportConfigDTOBeta>;
}
/**
 *
 * @export
 * @interface OutlierBeta
 */
export interface OutlierBeta {
    /**
     * The identity\'s unique identifier for the outlier record
     * @type {string}
     * @memberof OutlierBeta
     */
    'id'?: string;
    /**
     * The ID of the identity that is detected as an outlier
     * @type {string}
     * @memberof OutlierBeta
     */
    'identityId'?: string;
    /**
     * The type of outlier summary
     * @type {string}
     * @memberof OutlierBeta
     */
    'type'?: OutlierBetaTypeEnum;
    /**
     * The first date the outlier was detected
     * @type {string}
     * @memberof OutlierBeta
     */
    'firstDetectionDate'?: string;
    /**
     * The most recent date the outlier was detected
     * @type {string}
     * @memberof OutlierBeta
     */
    'latestDetectionDate'?: string;
    /**
     * Flag whether or not the outlier has been ignored
     * @type {boolean}
     * @memberof OutlierBeta
     */
    'ignored'?: boolean;
    /**
     * Object containing mapped identity attributes
     * @type {object}
     * @memberof OutlierBeta
     */
    'attributes'?: object;
    /**
     * The outlier score determined by the detection engine ranging from 0..1
     * @type {number}
     * @memberof OutlierBeta
     */
    'score'?: number;
    /**
     * Enum value of if the outlier manually or automatically un-ignored. Will be NULL if outlier is not ignored
     * @type {string}
     * @memberof OutlierBeta
     */
    'unignoreType'?: OutlierBetaUnignoreTypeEnum;
    /**
     * shows date when last time has been unignored outlier
     * @type {string}
     * @memberof OutlierBeta
     */
    'unignoreDate'?: string | null;
    /**
     * shows date when last time has been ignored outlier
     * @type {string}
     * @memberof OutlierBeta
     */
    'ignoreDate'?: string | null;
}
export declare const OutlierBetaTypeEnum: {
    readonly LowSimilarity: "LOW_SIMILARITY";
    readonly Structural: "STRUCTURAL";
};
export type OutlierBetaTypeEnum = typeof OutlierBetaTypeEnum[keyof typeof OutlierBetaTypeEnum];
export declare const OutlierBetaUnignoreTypeEnum: {
    readonly Manual: "MANUAL";
    readonly Automatic: "AUTOMATIC";
    readonly Null: "null";
};
export type OutlierBetaUnignoreTypeEnum = typeof OutlierBetaUnignoreTypeEnum[keyof typeof OutlierBetaUnignoreTypeEnum];
/**
 *
 * @export
 * @interface OutlierContributingFeatureBeta
 */
export interface OutlierContributingFeatureBeta {
    /**
     * Contributing feature id
     * @type {string}
     * @memberof OutlierContributingFeatureBeta
     */
    'id'?: string;
    /**
     * The name of the feature
     * @type {string}
     * @memberof OutlierContributingFeatureBeta
     */
    'name'?: string;
    /**
     * The data type of the value field
     * @type {string}
     * @memberof OutlierContributingFeatureBeta
     */
    'valueType'?: OutlierContributingFeatureBetaValueTypeEnum;
    /**
     *
     * @type {OutlierContributingFeatureValueBeta}
     * @memberof OutlierContributingFeatureBeta
     */
    'value'?: OutlierContributingFeatureValueBeta;
    /**
     * The importance of the feature. This can also be a negative value
     * @type {number}
     * @memberof OutlierContributingFeatureBeta
     */
    'importance'?: number;
    /**
     * The (translated if header is passed) displayName for the feature
     * @type {string}
     * @memberof OutlierContributingFeatureBeta
     */
    'displayName'?: string;
    /**
     * The (translated if header is passed) description for the feature
     * @type {string}
     * @memberof OutlierContributingFeatureBeta
     */
    'description'?: string;
    /**
     *
     * @type {OutlierFeatureTranslationBeta}
     * @memberof OutlierContributingFeatureBeta
     */
    'translationMessages'?: OutlierFeatureTranslationBeta;
}
export declare const OutlierContributingFeatureBetaValueTypeEnum: {
    readonly Integer: "INTEGER";
    readonly Float: "FLOAT";
};
export type OutlierContributingFeatureBetaValueTypeEnum = typeof OutlierContributingFeatureBetaValueTypeEnum[keyof typeof OutlierContributingFeatureBetaValueTypeEnum];
/**
 * @type OutlierContributingFeatureValueBeta
 * The feature value
 * @export
 */
export type OutlierContributingFeatureValueBeta = number;
/**
 *
 * @export
 * @interface OutlierFeatureSummaryBeta
 */
export interface OutlierFeatureSummaryBeta {
    /**
     * Contributing feature name
     * @type {string}
     * @memberof OutlierFeatureSummaryBeta
     */
    'contributingFeatureName'?: string;
    /**
     * Identity display name
     * @type {string}
     * @memberof OutlierFeatureSummaryBeta
     */
    'identityOutlierDisplayName'?: string;
    /**
     *
     * @type {Array<OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta>}
     * @memberof OutlierFeatureSummaryBeta
     */
    'outlierFeatureDisplayValues'?: Array<OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta>;
    /**
     * Definition of the feature
     * @type {string}
     * @memberof OutlierFeatureSummaryBeta
     */
    'featureDefinition'?: string;
    /**
     * Detailed explanation of the feature
     * @type {string}
     * @memberof OutlierFeatureSummaryBeta
     */
    'featureExplanation'?: string;
    /**
     * outlier\'s peer identity display name
     * @type {string}
     * @memberof OutlierFeatureSummaryBeta
     */
    'peerDisplayName'?: string;
    /**
     * outlier\'s peer identity id
     * @type {string}
     * @memberof OutlierFeatureSummaryBeta
     */
    'peerIdentityId'?: string;
    /**
     * Access Item reference
     * @type {object}
     * @memberof OutlierFeatureSummaryBeta
     */
    'accessItemReference'?: object;
}
/**
 *
 * @export
 * @interface OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta
 */
export interface OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta {
    /**
     * display name
     * @type {string}
     * @memberof OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta
     */
    'displayName'?: string;
    /**
     * value
     * @type {string}
     * @memberof OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta
     */
    'value'?: string;
    /**
     * The data type of the value field
     * @type {string}
     * @memberof OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBeta
     */
    'valueType'?: OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum;
}
export declare const OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum: {
    readonly Integer: "INTEGER";
    readonly Float: "FLOAT";
};
export type OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum = typeof OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum[keyof typeof OutlierFeatureSummaryOutlierFeatureDisplayValuesInnerBetaValueTypeEnum];
/**
 *
 * @export
 * @interface OutlierFeatureTranslationBeta
 */
export interface OutlierFeatureTranslationBeta {
    /**
     *
     * @type {TranslationMessageBeta}
     * @memberof OutlierFeatureTranslationBeta
     */
    'displayName'?: TranslationMessageBeta;
    /**
     *
     * @type {TranslationMessageBeta}
     * @memberof OutlierFeatureTranslationBeta
     */
    'description'?: TranslationMessageBeta;
}
/**
 *
 * @export
 * @interface OutlierSummaryBeta
 */
export interface OutlierSummaryBeta {
    /**
     * The type of outlier summary
     * @type {string}
     * @memberof OutlierSummaryBeta
     */
    'type'?: OutlierSummaryBetaTypeEnum;
    /**
     * The date the bulk outlier detection ran/snapshot was created
     * @type {string}
     * @memberof OutlierSummaryBeta
     */
    'snapshotDate'?: string;
    /**
     * Total number of outliers for the customer making the request
     * @type {number}
     * @memberof OutlierSummaryBeta
     */
    'totalOutliers'?: number;
    /**
     * Total number of identities for the customer making the request
     * @type {number}
     * @memberof OutlierSummaryBeta
     */
    'totalIdentities'?: number;
    /**
     *
     * @type {number}
     * @memberof OutlierSummaryBeta
     */
    'totalIgnored'?: number;
}
export declare const OutlierSummaryBetaTypeEnum: {
    readonly LowSimilarity: "LOW_SIMILARITY";
    readonly Structural: "STRUCTURAL";
};
export type OutlierSummaryBetaTypeEnum = typeof OutlierSummaryBetaTypeEnum[keyof typeof OutlierSummaryBetaTypeEnum];
/**
 *
 * @export
 * @interface OutliersContributingFeatureAccessItemsBeta
 */
export interface OutliersContributingFeatureAccessItemsBeta {
    /**
     * The ID of the access item
     * @type {string}
     * @memberof OutliersContributingFeatureAccessItemsBeta
     */
    'id'?: string;
    /**
     * the display name of the access item
     * @type {string}
     * @memberof OutliersContributingFeatureAccessItemsBeta
     */
    'displayName'?: string;
    /**
     * Description of the access item.
     * @type {string}
     * @memberof OutliersContributingFeatureAccessItemsBeta
     */
    'description'?: string;
    /**
     * The type of the access item.
     * @type {string}
     * @memberof OutliersContributingFeatureAccessItemsBeta
     */
    'accessType'?: OutliersContributingFeatureAccessItemsBetaAccessTypeEnum;
    /**
     * the associated source name if it exists
     * @type {string}
     * @memberof OutliersContributingFeatureAccessItemsBeta
     */
    'sourceName'?: string;
    /**
     * rarest access
     * @type {boolean}
     * @memberof OutliersContributingFeatureAccessItemsBeta
     */
    'extremelyRare'?: boolean;
}
export declare const OutliersContributingFeatureAccessItemsBetaAccessTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
};
export type OutliersContributingFeatureAccessItemsBetaAccessTypeEnum = typeof OutliersContributingFeatureAccessItemsBetaAccessTypeEnum[keyof typeof OutliersContributingFeatureAccessItemsBetaAccessTypeEnum];
/**
 * Owner\'s identity.
 * @export
 * @interface OwnerDtoBeta
 */
export interface OwnerDtoBeta {
    /**
     * Owner\'s DTO type.
     * @type {string}
     * @memberof OwnerDtoBeta
     */
    'type'?: OwnerDtoBetaTypeEnum;
    /**
     * Owner\'s identity ID.
     * @type {string}
     * @memberof OwnerDtoBeta
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof OwnerDtoBeta
     */
    'name'?: string;
}
export declare const OwnerDtoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerDtoBetaTypeEnum = typeof OwnerDtoBetaTypeEnum[keyof typeof OwnerDtoBetaTypeEnum];
/**
 * The owner of this object.
 * @export
 * @interface OwnerReferenceBeta
 */
export interface OwnerReferenceBeta {
    /**
     * Owner type. This field must be either left null or set to \'IDENTITY\' on input, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReferenceBeta
     */
    'type'?: OwnerReferenceBetaTypeEnum;
    /**
     * Identity id
     * @type {string}
     * @memberof OwnerReferenceBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the owner. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner\'s display name, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReferenceBeta
     */
    'name'?: string;
}
export declare const OwnerReferenceBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerReferenceBetaTypeEnum = typeof OwnerReferenceBetaTypeEnum[keyof typeof OwnerReferenceBetaTypeEnum];
/**
 * Simplified DTO for the owner object of the entitlement
 * @export
 * @interface OwnerReferenceDtoBeta
 */
export interface OwnerReferenceDtoBeta {
    /**
     * The owner id for the entitlement
     * @type {string}
     * @memberof OwnerReferenceDtoBeta
     */
    'id'?: string;
    /**
     * The owner name for the entitlement
     * @type {string}
     * @memberof OwnerReferenceDtoBeta
     */
    'name'?: string;
    /**
     * The type of the owner. Initially only type IDENTITY is supported
     * @type {string}
     * @memberof OwnerReferenceDtoBeta
     */
    'type'?: OwnerReferenceDtoBetaTypeEnum;
}
export declare const OwnerReferenceDtoBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerReferenceDtoBetaTypeEnum = typeof OwnerReferenceDtoBetaTypeEnum[keyof typeof OwnerReferenceDtoBetaTypeEnum];
/**
 * The owner of this object.
 * @export
 * @interface OwnerReferenceSegmentsBeta
 */
export interface OwnerReferenceSegmentsBeta {
    /**
     * Owner type. This field must be either left null or set to \'IDENTITY\' on input, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReferenceSegmentsBeta
     */
    'type'?: OwnerReferenceSegmentsBetaTypeEnum;
    /**
     * Identity id
     * @type {string}
     * @memberof OwnerReferenceSegmentsBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the owner. It may be left null or omitted in a POST or PATCH. If set, it must match the current value of the owner\'s display name, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof OwnerReferenceSegmentsBeta
     */
    'name'?: string;
}
export declare const OwnerReferenceSegmentsBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type OwnerReferenceSegmentsBetaTypeEnum = typeof OwnerReferenceSegmentsBetaTypeEnum[keyof typeof OwnerReferenceSegmentsBetaTypeEnum];
/**
 *
 * @export
 * @interface PasswordChangeRequestBeta
 */
export interface PasswordChangeRequestBeta {
    /**
     * The identity ID that requested the password change
     * @type {string}
     * @memberof PasswordChangeRequestBeta
     */
    'identityId'?: string;
    /**
     * The RSA encrypted password
     * @type {string}
     * @memberof PasswordChangeRequestBeta
     */
    'encryptedPassword'?: string;
    /**
     * The encryption key ID
     * @type {string}
     * @memberof PasswordChangeRequestBeta
     */
    'publicKeyId'?: string;
    /**
     * Account ID of the account This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350
     * @type {string}
     * @memberof PasswordChangeRequestBeta
     */
    'accountId'?: string;
    /**
     * The ID of the source for which identity is requesting the password change
     * @type {string}
     * @memberof PasswordChangeRequestBeta
     */
    'sourceId'?: string;
}
/**
 *
 * @export
 * @interface PasswordChangeResponseBeta
 */
export interface PasswordChangeResponseBeta {
    /**
     * The password change request ID
     * @type {string}
     * @memberof PasswordChangeResponseBeta
     */
    'requestId'?: string | null;
    /**
     * Password change state
     * @type {string}
     * @memberof PasswordChangeResponseBeta
     */
    'state'?: PasswordChangeResponseBetaStateEnum;
}
export declare const PasswordChangeResponseBetaStateEnum: {
    readonly InProgress: "IN_PROGRESS";
    readonly Finished: "FINISHED";
    readonly Failed: "FAILED";
};
export type PasswordChangeResponseBetaStateEnum = typeof PasswordChangeResponseBetaStateEnum[keyof typeof PasswordChangeResponseBetaStateEnum];
/**
 *
 * @export
 * @interface PasswordDigitTokenBeta
 */
export interface PasswordDigitTokenBeta {
    /**
     * The digit token for password management
     * @type {string}
     * @memberof PasswordDigitTokenBeta
     */
    'digitToken'?: string;
    /**
     * The reference ID of the digit token generation request
     * @type {string}
     * @memberof PasswordDigitTokenBeta
     */
    'requestId'?: string;
}
/**
 *
 * @export
 * @interface PasswordDigitTokenResetBeta
 */
export interface PasswordDigitTokenResetBeta {
    /**
     * The uid of the user requested for digit token
     * @type {string}
     * @memberof PasswordDigitTokenResetBeta
     */
    'userId': string;
    /**
     * The length of digit token. It should be from 6 to 18, inclusive. The default value is 6.
     * @type {number}
     * @memberof PasswordDigitTokenResetBeta
     */
    'length'?: number;
    /**
     * The time to live for the digit token in minutes. The default value is 5 minutes.
     * @type {number}
     * @memberof PasswordDigitTokenResetBeta
     */
    'durationMinutes'?: number;
}
/**
 *
 * @export
 * @interface PasswordInfoAccountBeta
 */
export interface PasswordInfoAccountBeta {
    /**
     * Account ID of the account. This is specified per account schema in the source configuration. It is used to distinguish accounts. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-ID-for-a/ta-p/80350
     * @type {string}
     * @memberof PasswordInfoAccountBeta
     */
    'accountId'?: string;
    /**
     * Display name of the account. This is specified per account schema in the source configuration. It is used to display name of the account. More info can be found here https://community.sailpoint.com/t5/IdentityNow-Connectors/How-do-I-designate-an-account-attribute-as-the-Account-Name-for/ta-p/74008
     * @type {string}
     * @memberof PasswordInfoAccountBeta
     */
    'accountName'?: string;
}
/**
 *
 * @export
 * @interface PasswordInfoBeta
 */
export interface PasswordInfoBeta {
    /**
     *
     * @type {string}
     * @memberof PasswordInfoBeta
     */
    'identityId'?: string;
    /**
     *
     * @type {string}
     * @memberof PasswordInfoBeta
     */
    'sourceId'?: string;
    /**
     *
     * @type {string}
     * @memberof PasswordInfoBeta
     */
    'publicKeyId'?: string;
    /**
     * User\'s public key with Base64 encoding
     * @type {string}
     * @memberof PasswordInfoBeta
     */
    'publicKey'?: string;
    /**
     * Account info related to queried identity and source
     * @type {Array<PasswordInfoAccountBeta>}
     * @memberof PasswordInfoBeta
     */
    'accounts'?: Array<PasswordInfoAccountBeta>;
    /**
     * Password constraints
     * @type {Array<string>}
     * @memberof PasswordInfoBeta
     */
    'policies'?: Array<string>;
}
/**
 *
 * @export
 * @interface PasswordInfoQueryDTOBeta
 */
export interface PasswordInfoQueryDTOBeta {
    /**
     * The login name of the user
     * @type {string}
     * @memberof PasswordInfoQueryDTOBeta
     */
    'userName'?: string;
    /**
     * The display name of the source
     * @type {string}
     * @memberof PasswordInfoQueryDTOBeta
     */
    'sourceName'?: string;
}
/**
 *
 * @export
 * @interface PasswordOrgConfigBeta
 */
export interface PasswordOrgConfigBeta {
    /**
     * Indicator whether custom password instructions feature is enabled. The default value is false.
     * @type {boolean}
     * @memberof PasswordOrgConfigBeta
     */
    'customInstructionsEnabled'?: boolean;
    /**
     * Indicator whether \"digit token\" feature is enabled. The default value is false.
     * @type {boolean}
     * @memberof PasswordOrgConfigBeta
     */
    'digitTokenEnabled'?: boolean;
    /**
     * The duration of \"digit token\" in minutes. The default value is 5.
     * @type {number}
     * @memberof PasswordOrgConfigBeta
     */
    'digitTokenDurationMinutes'?: number;
    /**
     * The length of \"digit token\". The default value is 6.
     * @type {number}
     * @memberof PasswordOrgConfigBeta
     */
    'digitTokenLength'?: number;
}
/**
 *
 * @export
 * @interface PasswordPolicyV3DtoBeta
 */
export interface PasswordPolicyV3DtoBeta {
    /**
     * The password policy Id.
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'id'?: string;
    /**
     * Description for current password policy.
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'description'?: string | null;
    /**
     * The name of the password policy.
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'name'?: string;
    /**
     * Date the Password Policy was created.
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'dateCreated'?: string;
    /**
     * Date the Password Policy was updated.
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'lastUpdated'?: string | null;
    /**
     * The number of days before expiration remaninder.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'firstExpirationReminder'?: number;
    /**
     * The minimun length of account Id. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'accountIdMinWordLength'?: number;
    /**
     * The minimun length of account name. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'accountNameMinWordLength'?: number;
    /**
     * Maximum alpha. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minAlpha'?: number;
    /**
     * MinCharacterTypes. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minCharacterTypes'?: number;
    /**
     * Maximum length of the password.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'maxLength'?: number;
    /**
     * Minimum length of the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minLength'?: number;
    /**
     * Maximum repetition of the same character in the password. By default is equals to -1.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'maxRepeatedChars'?: number;
    /**
     * Minimum amount of lower case character in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minLower'?: number;
    /**
     * Minimum amount of numeric characters in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minNumeric'?: number;
    /**
     * Minimum amount of special symbols in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minSpecial'?: number;
    /**
     * Minimum amount of upper case symbols in the password. By default is equals to 0.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'minUpper'?: number;
    /**
     * Number of days before current password expires. By default is equals to 90.
     * @type {number}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'passwordExpiration'?: number;
    /**
     * Defines whether this policy is default or not. Default policy is created automatically when an org is setup. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'defaultPolicy'?: boolean;
    /**
     * Defines whether this policy is enabled to expire or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'enablePasswdExpiration'?: boolean;
    /**
     * Defines whether this policy require strong Auth or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'requireStrongAuthn'?: boolean;
    /**
     * Defines whether this policy require strong Auth of network or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'requireStrongAuthOffNetwork'?: boolean;
    /**
     * Defines whether this policy require strong Auth for untrusted geographies. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'requireStrongAuthUntrustedGeographies'?: boolean;
    /**
     * Defines whether this policy uses account attributes or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'useAccountAttributes'?: boolean;
    /**
     * Defines whether this policy uses dictionary or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'useDictionary'?: boolean;
    /**
     * Defines whether this policy uses identity attributes or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'useIdentityAttributes'?: boolean;
    /**
     * Defines whether this policy validate against account id or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'validateAgainstAccountId'?: boolean;
    /**
     * Defines whether this policy validate against account name or not. This field is false by default.
     * @type {boolean}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'validateAgainstAccountName'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'created'?: string | null;
    /**
     *
     * @type {string}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'modified'?: string | null;
    /**
     * List of sources IDs managed by this password policy.
     * @type {Array<string>}
     * @memberof PasswordPolicyV3DtoBeta
     */
    'sourceIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface PasswordStatusBeta
 */
export interface PasswordStatusBeta {
    /**
     * The password change request ID
     * @type {string}
     * @memberof PasswordStatusBeta
     */
    'requestId'?: string | null;
    /**
     * Password change state
     * @type {string}
     * @memberof PasswordStatusBeta
     */
    'state'?: PasswordStatusBetaStateEnum;
    /**
     * The errors during the password change request
     * @type {Array<string>}
     * @memberof PasswordStatusBeta
     */
    'errors'?: Array<string>;
    /**
     * List of source IDs in the password change request
     * @type {Array<string>}
     * @memberof PasswordStatusBeta
     */
    'sourceIds'?: Array<string>;
}
export declare const PasswordStatusBetaStateEnum: {
    readonly InProgress: "IN_PROGRESS";
    readonly Finished: "FINISHED";
    readonly Failed: "FAILED";
};
export type PasswordStatusBetaStateEnum = typeof PasswordStatusBetaStateEnum[keyof typeof PasswordStatusBetaStateEnum];
/**
 *
 * @export
 * @interface PasswordSyncGroupBeta
 */
export interface PasswordSyncGroupBeta {
    /**
     * ID of the sync group
     * @type {string}
     * @memberof PasswordSyncGroupBeta
     */
    'id'?: string;
    /**
     * Name of the sync group
     * @type {string}
     * @memberof PasswordSyncGroupBeta
     */
    'name'?: string;
    /**
     * ID of the password policy
     * @type {string}
     * @memberof PasswordSyncGroupBeta
     */
    'passwordPolicyId'?: string;
    /**
     * List of password managed sources IDs
     * @type {Array<string>}
     * @memberof PasswordSyncGroupBeta
     */
    'sourceIds'?: Array<string>;
    /**
     * The date and time this sync group was created
     * @type {string}
     * @memberof PasswordSyncGroupBeta
     */
    'created'?: string | null;
    /**
     * The date and time this sync group was last modified
     * @type {string}
     * @memberof PasswordSyncGroupBeta
     */
    'modified'?: string | null;
}
/**
 * Personal access token owner\'s identity.
 * @export
 * @interface PatOwnerBeta
 */
export interface PatOwnerBeta {
    /**
     * Personal access token owner\'s DTO type.
     * @type {string}
     * @memberof PatOwnerBeta
     */
    'type'?: PatOwnerBetaTypeEnum;
    /**
     * Personal access token owner\'s identity ID.
     * @type {string}
     * @memberof PatOwnerBeta
     */
    'id'?: string;
    /**
     * Personal access token owner\'s human-readable display name.
     * @type {string}
     * @memberof PatOwnerBeta
     */
    'name'?: string;
}
export declare const PatOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type PatOwnerBetaTypeEnum = typeof PatOwnerBetaTypeEnum[keyof typeof PatOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface PatchPotentialRoleRequestInnerBeta
 */
export interface PatchPotentialRoleRequestInnerBeta {
    /**
     * The operation to be performed
     * @type {string}
     * @memberof PatchPotentialRoleRequestInnerBeta
     */
    'op'?: PatchPotentialRoleRequestInnerBetaOpEnum;
    /**
     * A string JSON Pointer representing the target path to an element to be affected by the operation
     * @type {string}
     * @memberof PatchPotentialRoleRequestInnerBeta
     */
    'path': string;
    /**
     *
     * @type {JsonPatchOperationValueBeta}
     * @memberof PatchPotentialRoleRequestInnerBeta
     */
    'value'?: JsonPatchOperationValueBeta;
}
export declare const PatchPotentialRoleRequestInnerBetaOpEnum: {
    readonly Remove: "remove";
    readonly Replace: "replace";
};
export type PatchPotentialRoleRequestInnerBetaOpEnum = typeof PatchPotentialRoleRequestInnerBetaOpEnum[keyof typeof PatchPotentialRoleRequestInnerBetaOpEnum];
/**
 * A JSONPatch document as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902).  Only `replace` operations are accepted by this endpoint.
 * @export
 * @interface PatchServiceDeskIntegrationRequestBeta
 */
export interface PatchServiceDeskIntegrationRequestBeta {
    /**
     * Operations to be applied
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof PatchServiceDeskIntegrationRequestBeta
     */
    'operations'?: Array<JsonPatchOperationBeta>;
}
/**
 *
 * @export
 * @interface PeerGroupMemberBeta
 */
export interface PeerGroupMemberBeta {
    /**
     * A unique identifier for the peer group member.
     * @type {string}
     * @memberof PeerGroupMemberBeta
     */
    'id'?: string;
    /**
     * The type of the peer group member.
     * @type {string}
     * @memberof PeerGroupMemberBeta
     */
    'type'?: string;
    /**
     * The ID of the peer group.
     * @type {string}
     * @memberof PeerGroupMemberBeta
     */
    'peer_group_id'?: string;
    /**
     * Arbitrary key-value pairs, belonging to the peer group member.
     * @type {{ [key: string]: object; }}
     * @memberof PeerGroupMemberBeta
     */
    'attributes'?: {
        [key: string]: object;
    };
}
/**
 * Enum represents action that is being processed on an approval.
 * @export
 * @enum {string}
 */
export declare const PendingApprovalActionBeta: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
    readonly Forwarded: "FORWARDED";
};
export type PendingApprovalActionBeta = typeof PendingApprovalActionBeta[keyof typeof PendingApprovalActionBeta];
/**
 *
 * @export
 * @interface PendingApprovalBeta
 */
export interface PendingApprovalBeta {
    /**
     * The approval id.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'id'?: string;
    /**
     * The name of the approval.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'name'?: string;
    /**
     * When the approval was created.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'created'?: string;
    /**
     * When the approval was modified last time.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'modified'?: string;
    /**
     * When the access-request was created.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'requestCreated'?: string;
    /**
     *
     * @type {AccessRequestTypeBeta}
     * @memberof PendingApprovalBeta
     */
    'requestType'?: AccessRequestTypeBeta | null;
    /**
     *
     * @type {AccessItemRequesterDtoBeta}
     * @memberof PendingApprovalBeta
     */
    'requester'?: AccessItemRequesterDtoBeta;
    /**
     * Identities access was requested for.
     * @type {Array<AccessItemRequestedForDtoBeta>}
     * @memberof PendingApprovalBeta
     */
    'requestedFor'?: Array<AccessItemRequestedForDtoBeta>;
    /**
     *
     * @type {AccessItemOwnerDtoBeta}
     * @memberof PendingApprovalBeta
     */
    'owner'?: AccessItemOwnerDtoBeta;
    /**
     *
     * @type {RequestableObjectReferenceBeta}
     * @memberof PendingApprovalBeta
     */
    'requestedObject'?: RequestableObjectReferenceBeta;
    /**
     *
     * @type {CommentDto1Beta}
     * @memberof PendingApprovalBeta
     */
    'requesterComment'?: CommentDto1Beta;
    /**
     * The history of the previous reviewers comments.
     * @type {Array<CommentDto1Beta>}
     * @memberof PendingApprovalBeta
     */
    'previousReviewersComments'?: Array<CommentDto1Beta>;
    /**
     * The history of approval forward action.
     * @type {Array<ApprovalForwardHistoryBeta>}
     * @memberof PendingApprovalBeta
     */
    'forwardHistory'?: Array<ApprovalForwardHistoryBeta>;
    /**
     * When true the rejector has to provide comments when rejecting
     * @type {boolean}
     * @memberof PendingApprovalBeta
     */
    'commentRequiredWhenRejected'?: boolean;
    /**
     *
     * @type {PendingApprovalActionBeta}
     * @memberof PendingApprovalBeta
     */
    'actionInProcess'?: PendingApprovalActionBeta;
    /**
     * The date the role or access profile or entitlement is no longer assigned to the specified identity.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'removeDate'?: string;
    /**
     * If true, then the request is to change the remove date or sunset date.
     * @type {boolean}
     * @memberof PendingApprovalBeta
     */
    'removeDateUpdateRequested'?: boolean;
    /**
     * The remove date or sunset date that was assigned at the time of the request.
     * @type {string}
     * @memberof PendingApprovalBeta
     */
    'currentRemoveDate'?: string;
    /**
     *
     * @type {SodViolationContextCheckCompleted1Beta}
     * @memberof PendingApprovalBeta
     */
    'sodViolationContext'?: SodViolationContextCheckCompleted1Beta | null;
}
/**
 * Simplified DTO for the Permission objects stored in SailPoint\'s database. The data is aggregated from customer systems and is free-form, so its appearance can vary largely between different clients/customers.
 * @export
 * @interface PermissionDtoBeta
 */
export interface PermissionDtoBeta {
    /**
     * All the rights (e.g. actions) that this permission allows on the target
     * @type {Array<string>}
     * @memberof PermissionDtoBeta
     */
    'rights'?: Array<string>;
    /**
     * The target the permission would grants rights on.
     * @type {string}
     * @memberof PermissionDtoBeta
     */
    'target'?: string;
}
/**
 *
 * @export
 * @interface PostExternalExecuteWorkflow200ResponseBeta
 */
export interface PostExternalExecuteWorkflow200ResponseBeta {
    /**
     * The workflow execution id
     * @type {string}
     * @memberof PostExternalExecuteWorkflow200ResponseBeta
     */
    'workflowExecutionId'?: string;
    /**
     * An error message if any errors occurred
     * @type {string}
     * @memberof PostExternalExecuteWorkflow200ResponseBeta
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface PostExternalExecuteWorkflowRequestBeta
 */
export interface PostExternalExecuteWorkflowRequestBeta {
    /**
     * The input for the workflow
     * @type {object}
     * @memberof PostExternalExecuteWorkflowRequestBeta
     */
    'input'?: object;
}
/**
 * Provides additional details about the pre-approval trigger for this request.
 * @export
 * @interface PreApprovalTriggerDetailsBeta
 */
export interface PreApprovalTriggerDetailsBeta {
    /**
     * Comment left for the pre-approval decision
     * @type {string}
     * @memberof PreApprovalTriggerDetailsBeta
     */
    'comment'?: string;
    /**
     * The reviewer of the pre-approval decision
     * @type {string}
     * @memberof PreApprovalTriggerDetailsBeta
     */
    'reviewer'?: string;
    /**
     * The decision of the pre-approval trigger
     * @type {string}
     * @memberof PreApprovalTriggerDetailsBeta
     */
    'decision'?: PreApprovalTriggerDetailsBetaDecisionEnum;
}
export declare const PreApprovalTriggerDetailsBetaDecisionEnum: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type PreApprovalTriggerDetailsBetaDecisionEnum = typeof PreApprovalTriggerDetailsBetaDecisionEnum[keyof typeof PreApprovalTriggerDetailsBetaDecisionEnum];
/**
 * Maps an Identity\'s attribute key to a list of preferred notification mediums.
 * @export
 * @interface PreferencesDtoBeta
 */
export interface PreferencesDtoBeta {
    /**
     * The template notification key.
     * @type {string}
     * @memberof PreferencesDtoBeta
     */
    'key'?: string;
    /**
     * List of preferred notification mediums, i.e., the mediums (or method) for which notifications are enabled. More mediums may be added in the future.
     * @type {Array<MediumBeta>}
     * @memberof PreferencesDtoBeta
     */
    'mediums'?: Array<MediumBeta>;
    /**
     * Modified date of preference
     * @type {string}
     * @memberof PreferencesDtoBeta
     */
    'modified'?: string;
}
/**
 * PreviewDataSourceResponse is the response sent by /form-definitions/{formDefinitionID}/data-source endpoint
 * @export
 * @interface PreviewDataSourceResponseBeta
 */
export interface PreviewDataSourceResponseBeta {
    /**
     * Results holds a list of FormElementDataSourceConfigOptions items
     * @type {Array<FormElementDataSourceConfigOptionsBeta>}
     * @memberof PreviewDataSourceResponseBeta
     */
    'results'?: Array<FormElementDataSourceConfigOptionsBeta>;
}
/**
 *
 * @export
 * @interface ProcessIdentitiesRequestBeta
 */
export interface ProcessIdentitiesRequestBeta {
    /**
     * List of up to 250 identity IDs to process.
     * @type {Array<string>}
     * @memberof ProcessIdentitiesRequestBeta
     */
    'identityIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface ProductBeta
 */
export interface ProductBeta {
    /**
     * Name of the Product
     * @type {string}
     * @memberof ProductBeta
     */
    'productName'?: string;
    /**
     * URL of the Product
     * @type {string}
     * @memberof ProductBeta
     */
    'url'?: string;
    /**
     * An identifier for a specific product-tenant combination
     * @type {string}
     * @memberof ProductBeta
     */
    'productTenantId'?: string;
    /**
     * Product region
     * @type {string}
     * @memberof ProductBeta
     */
    'productRegion'?: string;
    /**
     * Right needed for the Product
     * @type {string}
     * @memberof ProductBeta
     */
    'productRight'?: string;
    /**
     * API URL of the Product
     * @type {string}
     * @memberof ProductBeta
     */
    'apiUrl'?: string | null;
    /**
     *
     * @type {Array<LicenseBeta>}
     * @memberof ProductBeta
     */
    'licenses'?: Array<LicenseBeta>;
    /**
     * Additional attributes for a product
     * @type {{ [key: string]: any; }}
     * @memberof ProductBeta
     */
    'attributes'?: {
        [key: string]: any;
    };
    /**
     * Zone
     * @type {string}
     * @memberof ProductBeta
     */
    'zone'?: string;
    /**
     * Status of the product
     * @type {string}
     * @memberof ProductBeta
     */
    'status'?: string;
    /**
     * Status datetime
     * @type {string}
     * @memberof ProductBeta
     */
    'statusDateTime'?: string;
    /**
     * If there\'s a tenant provisioning failure then reason will have the description of error
     * @type {string}
     * @memberof ProductBeta
     */
    'reason'?: string;
    /**
     * Product could have additional notes added during tenant provisioning.
     * @type {string}
     * @memberof ProductBeta
     */
    'notes'?: string;
    /**
     * Date when the product was created
     * @type {string}
     * @memberof ProductBeta
     */
    'dateCreated'?: string | null;
    /**
     * Date when the product was last updated
     * @type {string}
     * @memberof ProductBeta
     */
    'lastUpdated'?: string | null;
    /**
     * Type of org
     * @type {string}
     * @memberof ProductBeta
     */
    'orgType'?: ProductBetaOrgTypeEnum;
}
export declare const ProductBetaOrgTypeEnum: {
    readonly Development: "development";
    readonly Staging: "staging";
    readonly Production: "production";
    readonly Test: "test";
    readonly Partner: "partner";
    readonly Training: "training";
    readonly Demonstration: "demonstration";
    readonly Sandbox: "sandbox";
    readonly Null: "null";
};
export type ProductBetaOrgTypeEnum = typeof ProductBetaOrgTypeEnum[keyof typeof ProductBetaOrgTypeEnum];
/**
 *
 * @export
 * @interface ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta
 */
export interface ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta {
    /**
     * The name of the attribute being provisioned.
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta
     */
    'attributeName': string;
    /**
     * The value of the attribute being provisioned.
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta
     */
    'attributeValue'?: string | null;
    /**
     * The operation to handle the attribute.
     * @type {object}
     * @memberof ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta
     */
    'operation': ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum;
}
export declare const ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum: {
    readonly Add: "Add";
    readonly Set: "Set";
    readonly Remove: "Remove";
};
export type ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum = typeof ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum[keyof typeof ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBetaOperationEnum];
/**
 *
 * @export
 * @interface ProvisioningCompletedAccountRequestsInnerBeta
 */
export interface ProvisioningCompletedAccountRequestsInnerBeta {
    /**
     *
     * @type {ProvisioningCompletedAccountRequestsInnerSourceBeta}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'source': ProvisioningCompletedAccountRequestsInnerSourceBeta;
    /**
     * The unique idenfier of the account being provisioned.
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'accountId'?: string;
    /**
     * The provisioning operation; typically Create, Modify, Enable, Disable, Unlock, or Delete.
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'accountOperation': string;
    /**
     * The overall result of the provisioning transaction; this could be success, pending, failed, etc.
     * @type {object}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'provisioningResult': ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum;
    /**
     * The name of the provisioning channel selected; this could be the same as the source, or could be a Service Desk Integration Module (SDIM).
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'provisioningTarget': string;
    /**
     * A reference to a tracking number, if this is sent to a Service Desk Integration Module (SDIM).
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'ticketId'?: string | null;
    /**
     * A list of attributes as part of the provisioning transaction.
     * @type {Array<ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta>}
     * @memberof ProvisioningCompletedAccountRequestsInnerBeta
     */
    'attributeRequests'?: Array<ProvisioningCompletedAccountRequestsInnerAttributeRequestsInnerBeta> | null;
}
export declare const ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum: {
    readonly Success: "SUCCESS";
    readonly Pending: "PENDING";
    readonly Failed: "FAILED";
};
export type ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum = typeof ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum[keyof typeof ProvisioningCompletedAccountRequestsInnerBetaProvisioningResultEnum];
/**
 * Reference to the source being provisioned against.
 * @export
 * @interface ProvisioningCompletedAccountRequestsInnerSourceBeta
 */
export interface ProvisioningCompletedAccountRequestsInnerSourceBeta {
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerSourceBeta
     */
    'id': string;
    /**
     * The type of object that is referenced
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerSourceBeta
     */
    'type': ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof ProvisioningCompletedAccountRequestsInnerSourceBeta
     */
    'name': string;
}
export declare const ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum = typeof ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum[keyof typeof ProvisioningCompletedAccountRequestsInnerSourceBetaTypeEnum];
/**
 *
 * @export
 * @interface ProvisioningCompletedBeta
 */
export interface ProvisioningCompletedBeta {
    /**
     * The reference number of the provisioning request. Useful for tracking status in the Account Activity search interface.
     * @type {string}
     * @memberof ProvisioningCompletedBeta
     */
    'trackingNumber': string;
    /**
     * One or more sources that the provisioning transaction(s) were done against.  Sources are comma separated.
     * @type {string}
     * @memberof ProvisioningCompletedBeta
     */
    'sources': string;
    /**
     * Origin of where the provisioning request came from.
     * @type {string}
     * @memberof ProvisioningCompletedBeta
     */
    'action'?: string | null;
    /**
     * A list of any accumulated error messages that occurred during provisioning.
     * @type {Array<string>}
     * @memberof ProvisioningCompletedBeta
     */
    'errors'?: Array<string> | null;
    /**
     * A list of any accumulated warning messages that occurred during provisioning.
     * @type {Array<string>}
     * @memberof ProvisioningCompletedBeta
     */
    'warnings'?: Array<string> | null;
    /**
     *
     * @type {ProvisioningCompletedRecipientBeta}
     * @memberof ProvisioningCompletedBeta
     */
    'recipient': ProvisioningCompletedRecipientBeta;
    /**
     *
     * @type {ProvisioningCompletedRequesterBeta}
     * @memberof ProvisioningCompletedBeta
     */
    'requester'?: ProvisioningCompletedRequesterBeta | null;
    /**
     * A list of provisioning instructions to perform on an account-by-account basis.
     * @type {Array<ProvisioningCompletedAccountRequestsInnerBeta>}
     * @memberof ProvisioningCompletedBeta
     */
    'accountRequests': Array<ProvisioningCompletedAccountRequestsInnerBeta>;
}
/**
 * Provisioning recpient.
 * @export
 * @interface ProvisioningCompletedRecipientBeta
 */
export interface ProvisioningCompletedRecipientBeta {
    /**
     * Provisioning recipient DTO type.
     * @type {string}
     * @memberof ProvisioningCompletedRecipientBeta
     */
    'type': ProvisioningCompletedRecipientBetaTypeEnum;
    /**
     * Provisioning recipient\'s identity ID.
     * @type {string}
     * @memberof ProvisioningCompletedRecipientBeta
     */
    'id': string;
    /**
     * Provisioning recipient\'s display name.
     * @type {string}
     * @memberof ProvisioningCompletedRecipientBeta
     */
    'name': string;
}
export declare const ProvisioningCompletedRecipientBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ProvisioningCompletedRecipientBetaTypeEnum = typeof ProvisioningCompletedRecipientBetaTypeEnum[keyof typeof ProvisioningCompletedRecipientBetaTypeEnum];
/**
 * Provisioning requester\'s identity.
 * @export
 * @interface ProvisioningCompletedRequesterBeta
 */
export interface ProvisioningCompletedRequesterBeta {
    /**
     * Provisioning requester\'s DTO type.
     * @type {string}
     * @memberof ProvisioningCompletedRequesterBeta
     */
    'type': ProvisioningCompletedRequesterBetaTypeEnum;
    /**
     * Provisioning requester\'s identity ID.
     * @type {string}
     * @memberof ProvisioningCompletedRequesterBeta
     */
    'id': string;
    /**
     * Provisioning owner\'s human-readable display name.
     * @type {string}
     * @memberof ProvisioningCompletedRequesterBeta
     */
    'name': string;
}
export declare const ProvisioningCompletedRequesterBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type ProvisioningCompletedRequesterBetaTypeEnum = typeof ProvisioningCompletedRequesterBetaTypeEnum[keyof typeof ProvisioningCompletedRequesterBetaTypeEnum];
/**
 * Specification of a Service Desk integration provisioning configuration.
 * @export
 * @interface ProvisioningConfigBeta
 */
export interface ProvisioningConfigBeta {
    /**
     * Specifies whether this configuration is used to manage provisioning requests for all sources from the org.  If true, no managedResourceRefs are allowed.
     * @type {boolean}
     * @memberof ProvisioningConfigBeta
     */
    'universalManager'?: boolean;
    /**
     * References to sources for the Service Desk integration template.  May only be specified if universalManager is false.
     * @type {Array<ProvisioningConfigManagedResourceRefsInnerBeta>}
     * @memberof ProvisioningConfigBeta
     */
    'managedResourceRefs'?: Array<ProvisioningConfigManagedResourceRefsInnerBeta>;
    /**
     *
     * @type {ProvisioningConfigPlanInitializerScriptBeta}
     * @memberof ProvisioningConfigBeta
     */
    'planInitializerScript'?: ProvisioningConfigPlanInitializerScriptBeta;
    /**
     * Name of an attribute that when true disables the saving of ProvisioningRequest objects whenever plans are sent through this integration.
     * @type {boolean}
     * @memberof ProvisioningConfigBeta
     */
    'noProvisioningRequests'?: boolean;
    /**
     * When saving pending requests is enabled, this defines the number of hours the request is allowed to live before it is considered expired and no longer affects plan compilation.
     * @type {number}
     * @memberof ProvisioningConfigBeta
     */
    'provisioningRequestExpiration'?: number;
}
/**
 *
 * @export
 * @interface ProvisioningConfigManagedResourceRefsInnerBeta
 */
export interface ProvisioningConfigManagedResourceRefsInnerBeta {
    /**
     * The type of object being referenced
     * @type {object}
     * @memberof ProvisioningConfigManagedResourceRefsInnerBeta
     */
    'type'?: ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum;
    /**
     * ID of the source
     * @type {object}
     * @memberof ProvisioningConfigManagedResourceRefsInnerBeta
     */
    'id'?: object;
    /**
     * Human-readable display name of the source
     * @type {object}
     * @memberof ProvisioningConfigManagedResourceRefsInnerBeta
     */
    'name'?: object;
}
export declare const ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum = typeof ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum[keyof typeof ProvisioningConfigManagedResourceRefsInnerBetaTypeEnum];
/**
 * This is a reference to a plan initializer script.
 * @export
 * @interface ProvisioningConfigPlanInitializerScriptBeta
 */
export interface ProvisioningConfigPlanInitializerScriptBeta {
    /**
     * This is a Rule that allows provisioning instruction changes.
     * @type {string}
     * @memberof ProvisioningConfigPlanInitializerScriptBeta
     */
    'source'?: string;
}
/**
 * Defines matching criteria for an Account to be provisioned with a specific Access Profile
 * @export
 * @interface ProvisioningCriteriaLevel1Beta
 */
export interface ProvisioningCriteriaLevel1Beta {
    /**
     *
     * @type {ProvisioningCriteriaOperationBeta}
     * @memberof ProvisioningCriteriaLevel1Beta
     */
    'operation'?: ProvisioningCriteriaOperationBeta;
    /**
     * Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel1Beta
     */
    'attribute'?: string | null;
    /**
     * String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel1Beta
     */
    'value'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.
     * @type {Array<ProvisioningCriteriaLevel2Beta>}
     * @memberof ProvisioningCriteriaLevel1Beta
     */
    'children'?: Array<ProvisioningCriteriaLevel2Beta> | null;
}
/**
 * Defines matching criteria for an Account to be provisioned with a specific Access Profile
 * @export
 * @interface ProvisioningCriteriaLevel2Beta
 */
export interface ProvisioningCriteriaLevel2Beta {
    /**
     *
     * @type {ProvisioningCriteriaOperationBeta}
     * @memberof ProvisioningCriteriaLevel2Beta
     */
    'operation'?: ProvisioningCriteriaOperationBeta;
    /**
     * Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel2Beta
     */
    'attribute'?: string | null;
    /**
     * String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel2Beta
     */
    'value'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.
     * @type {Array<ProvisioningCriteriaLevel3Beta>}
     * @memberof ProvisioningCriteriaLevel2Beta
     */
    'children'?: Array<ProvisioningCriteriaLevel3Beta> | null;
}
/**
 * Defines matching criteria for an Account to be provisioned with a specific Access Profile
 * @export
 * @interface ProvisioningCriteriaLevel3Beta
 */
export interface ProvisioningCriteriaLevel3Beta {
    /**
     *
     * @type {ProvisioningCriteriaOperationBeta}
     * @memberof ProvisioningCriteriaLevel3Beta
     */
    'operation'?: ProvisioningCriteriaOperationBeta;
    /**
     * Name of the Account attribute to be tested. If **operation** is one of EQUALS, NOT_EQUALS, CONTAINS, or HAS, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel3Beta
     */
    'attribute'?: string | null;
    /**
     * String value to test the Account attribute w/r/t the specified operation. If the operation is one of EQUALS, NOT_EQUALS, or CONTAINS, this field is required. Otherwise, specifying it is an error. If the Attribute is not String-typed, it will be converted to the appropriate type.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel3Beta
     */
    'value'?: string;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes.
     * @type {string}
     * @memberof ProvisioningCriteriaLevel3Beta
     */
    'children'?: string | null;
}
/**
 * Supported operations on ProvisioningCriteria
 * @export
 * @enum {string}
 */
export declare const ProvisioningCriteriaOperationBeta: {
    readonly Equals: "EQUALS";
    readonly NotEquals: "NOT_EQUALS";
    readonly Contains: "CONTAINS";
    readonly Has: "HAS";
    readonly And: "AND";
    readonly Or: "OR";
};
export type ProvisioningCriteriaOperationBeta = typeof ProvisioningCriteriaOperationBeta[keyof typeof ProvisioningCriteriaOperationBeta];
/**
 * Provides additional details about provisioning for this request.
 * @export
 * @interface ProvisioningDetailsBeta
 */
export interface ProvisioningDetailsBeta {
    /**
     * Ordered CSV of sub phase references to objects that contain more information about provisioning. For example, this can contain \"manualWorkItemDetails\" which indicate that there is further information in that object for this phase.
     * @type {string}
     * @memberof ProvisioningDetailsBeta
     */
    'orderedSubPhaseReferences'?: string;
}
/**
 *
 * @export
 * @interface ProvisioningPolicyDtoBeta
 */
export interface ProvisioningPolicyDtoBeta {
    /**
     * the provisioning policy name
     * @type {string}
     * @memberof ProvisioningPolicyDtoBeta
     */
    'name': string;
    /**
     * the description of the provisioning policy
     * @type {string}
     * @memberof ProvisioningPolicyDtoBeta
     */
    'description'?: string;
    /**
     *
     * @type {UsageTypeBeta}
     * @memberof ProvisioningPolicyDtoBeta
     */
    'usageType'?: UsageTypeBeta;
    /**
     *
     * @type {Array<FieldDetailsDtoBeta>}
     * @memberof ProvisioningPolicyDtoBeta
     */
    'fields'?: Array<FieldDetailsDtoBeta>;
}
/**
 * Provisioning state of an account activity item
 * @export
 * @enum {string}
 */
export declare const ProvisioningStateBeta: {
    readonly Pending: "PENDING";
    readonly Finished: "FINISHED";
    readonly Unverifiable: "UNVERIFIABLE";
    readonly Commited: "COMMITED";
    readonly Failed: "FAILED";
    readonly Retry: "RETRY";
};
export type ProvisioningStateBeta = typeof ProvisioningStateBeta[keyof typeof ProvisioningStateBeta];
/**
 * Used to map an attribute key for an Identity to its display name.
 * @export
 * @interface PublicIdentityAttributeConfigBeta
 */
export interface PublicIdentityAttributeConfigBeta {
    /**
     * the key of the attribute
     * @type {string}
     * @memberof PublicIdentityAttributeConfigBeta
     */
    'key'?: string;
    /**
     * the display name of the attribute
     * @type {string}
     * @memberof PublicIdentityAttributeConfigBeta
     */
    'name'?: string;
}
/**
 * Details of up to 5 Identity attributes that will be publicly accessible for all Identities to anyone in the org
 * @export
 * @interface PublicIdentityConfigBeta
 */
export interface PublicIdentityConfigBeta {
    /**
     *
     * @type {Array<PublicIdentityAttributeConfigBeta>}
     * @memberof PublicIdentityConfigBeta
     */
    'attributes'?: Array<PublicIdentityAttributeConfigBeta>;
    /**
     *
     * @type {IdentityReferenceBeta}
     * @memberof PublicIdentityConfigBeta
     */
    'modifiedBy'?: IdentityReferenceBeta | null;
    /**
     * the date/time of the modification
     * @type {string}
     * @memberof PublicIdentityConfigBeta
     */
    'modified'?: string | null;
}
/**
 *
 * @export
 * @interface PutPasswordDictionaryRequestBeta
 */
export interface PutPasswordDictionaryRequestBeta {
    /**
     *
     * @type {any}
     * @memberof PutPasswordDictionaryRequestBeta
     */
    'file'?: any;
}
/**
 * Configuration of maximum number days and interval for checking Service Desk integration queue status
 * @export
 * @interface QueuedCheckConfigDetailsBeta
 */
export interface QueuedCheckConfigDetailsBeta {
    /**
     * interval in minutes between status checks
     * @type {string}
     * @memberof QueuedCheckConfigDetailsBeta
     */
    'provisioningStatusCheckIntervalMinutes': string;
    /**
     * maximum number of days to check
     * @type {string}
     * @memberof QueuedCheckConfigDetailsBeta
     */
    'provisioningMaxStatusCheckDays': string;
}
/**
 *
 * @export
 * @interface RandomAlphaNumericBeta
 */
export interface RandomAlphaNumericBeta {
    /**
     * This is an integer value specifying the size/number of characters the random string must contain   * This value must be a positive number and cannot be blank   * If no length is provided, the transform will default to a value of `32`   * Due to identity attribute data constraints, the maximum allowable value is `450` characters
     * @type {string}
     * @memberof RandomAlphaNumericBeta
     */
    'length'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof RandomAlphaNumericBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof RandomAlphaNumericBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface RandomNumericBeta
 */
export interface RandomNumericBeta {
    /**
     * This is an integer value specifying the size/number of characters the random string must contain   * This value must be a positive number and cannot be blank   * If no length is provided, the transform will default to a value of `32`   * Due to identity attribute data constraints, the maximum allowable value is `450` characters
     * @type {string}
     * @memberof RandomNumericBeta
     */
    'length'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof RandomNumericBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof RandomNumericBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ReassignReferenceBeta
 */
export interface ReassignReferenceBeta {
    /**
     * The ID of item or identity being reassigned.
     * @type {string}
     * @memberof ReassignReferenceBeta
     */
    'id': string;
    /**
     * The type of item or identity being reassigned.
     * @type {string}
     * @memberof ReassignReferenceBeta
     */
    'type': ReassignReferenceBetaTypeEnum;
}
export declare const ReassignReferenceBetaTypeEnum: {
    readonly TargetSummary: "TARGET_SUMMARY";
    readonly Item: "ITEM";
    readonly IdentitySummary: "IDENTITY_SUMMARY";
};
export type ReassignReferenceBetaTypeEnum = typeof ReassignReferenceBetaTypeEnum[keyof typeof ReassignReferenceBetaTypeEnum];
/**
 *
 * @export
 * @interface ReassignmentBeta
 */
export interface ReassignmentBeta {
    /**
     *
     * @type {CertificationReferenceBeta}
     * @memberof ReassignmentBeta
     */
    'from'?: CertificationReferenceBeta;
    /**
     * Comments from the previous reviewer.
     * @type {string}
     * @memberof ReassignmentBeta
     */
    'comment'?: string;
}
/**
 * The approval reassignment type.  * MANUAL_REASSIGNMENT: An approval with this reassignment type has been specifically reassigned by the approval task\'s owner, from their queue to someone else\'s.  * AUTOMATIC_REASSIGNMENT: An approval with this reassignment type has been automatically reassigned from another approver\'s queue, according to that approver\'s reassignment configuration. The approver\'s reassignment configuration may be set up to automatically reassign approval tasks for a defined (or possibly open-ended) period of time. * AUTO_ESCALATION: An approval with this reassignment type has been automatically reassigned from another approver\'s queue, according to the request\'s escalation configuration. For more information about escalation configuration, refer to [Setting Global Reminders and Escalation Policies](https://documentation.sailpoint.com/saas/help/requests/config_emails.html). * SELF_REVIEW_DELEGATION: An approval with this reassignment type has been automatically reassigned by the system to prevent self-review. This helps prevent situations like a requester being tasked with approving their own request. For more information about preventing self-review, refer to [Self-review Prevention](https://documentation.sailpoint.com/saas/help/users/work_reassignment.html#self-review-prevention) and [Preventing Self-approval](https://documentation.sailpoint.com/saas/help/requests/config_ap_roles.html#preventing-self-approval).
 * @export
 * @enum {string}
 */
export declare const ReassignmentTypeBeta: {
    readonly ManualReassignment: "MANUAL_REASSIGNMENT";
    readonly AutomaticReassignment: "AUTOMATIC_REASSIGNMENT";
    readonly AutoEscalation: "AUTO_ESCALATION";
    readonly SelfReviewDelegation: "SELF_REVIEW_DELEGATION";
};
export type ReassignmentTypeBeta = typeof ReassignmentTypeBeta[keyof typeof ReassignmentTypeBeta];
/**
 * Enum list containing types of Reassignment that can be found in the evaluate response.
 * @export
 * @enum {string}
 */
export declare const ReassignmentTypeEnumBeta: {
    readonly ManualReassignment: "MANUAL_REASSIGNMENT,";
    readonly AutomaticReassignment: "AUTOMATIC_REASSIGNMENT,";
    readonly AutoEscalation: "AUTO_ESCALATION,";
    readonly SelfReviewDelegation: "SELF_REVIEW_DELEGATION";
};
export type ReassignmentTypeEnumBeta = typeof ReassignmentTypeEnumBeta[keyof typeof ReassignmentTypeEnumBeta];
/**
 *
 * @export
 * @interface RecommendationConfigDtoBeta
 */
export interface RecommendationConfigDtoBeta {
    /**
     * List of identity attributes to use for calculating certification recommendations
     * @type {Array<string>}
     * @memberof RecommendationConfigDtoBeta
     */
    'recommenderFeatures'?: Array<string>;
    /**
     * The percent value that the recommendation calculation must surpass to produce a YES recommendation
     * @type {number}
     * @memberof RecommendationConfigDtoBeta
     */
    'peerGroupPercentageThreshold'?: number;
    /**
     * If true, rulesRecommenderConfig will be refreshed with new programatically selected attribute and threshold values on the next pipeline run
     * @type {boolean}
     * @memberof RecommendationConfigDtoBeta
     */
    'runAutoSelectOnce'?: boolean;
    /**
     * If true, rulesRecommenderConfig will be refreshed with new programatically selected threshold values on the next pipeline run
     * @type {boolean}
     * @memberof RecommendationConfigDtoBeta
     */
    'onlyTuneThreshold'?: boolean;
}
/**
 *
 * @export
 * @interface RecommendationRequestBeta
 */
export interface RecommendationRequestBeta {
    /**
     * The identity ID
     * @type {string}
     * @memberof RecommendationRequestBeta
     */
    'identityId'?: string;
    /**
     *
     * @type {AccessItemRefBeta}
     * @memberof RecommendationRequestBeta
     */
    'item'?: AccessItemRefBeta;
}
/**
 *
 * @export
 * @interface RecommendationRequestDtoBeta
 */
export interface RecommendationRequestDtoBeta {
    /**
     *
     * @type {Array<RecommendationRequestBeta>}
     * @memberof RecommendationRequestDtoBeta
     */
    'requests'?: Array<RecommendationRequestBeta>;
    /**
     * Exclude interpretations in the response if \"true\". Return interpretations in the response if this attribute is not specified.
     * @type {boolean}
     * @memberof RecommendationRequestDtoBeta
     */
    'excludeInterpretations'?: boolean;
    /**
     * When set to true, the calling system uses the translated messages for the specified language
     * @type {boolean}
     * @memberof RecommendationRequestDtoBeta
     */
    'includeTranslationMessages'?: boolean;
    /**
     * Returns the recommender calculations if set to true
     * @type {boolean}
     * @memberof RecommendationRequestDtoBeta
     */
    'includeDebugInformation'?: boolean;
    /**
     * When set to true, uses prescribedRulesRecommenderConfig to get identity attributes and peer group threshold instead of standard config.
     * @type {boolean}
     * @memberof RecommendationRequestDtoBeta
     */
    'prescribeMode'?: boolean;
}
/**
 *
 * @export
 * @interface RecommendationResponseBeta
 */
export interface RecommendationResponseBeta {
    /**
     *
     * @type {RecommendationRequestBeta}
     * @memberof RecommendationResponseBeta
     */
    'request'?: RecommendationRequestBeta;
    /**
     * The recommendation - YES if the access is recommended, NO if not recommended, MAYBE if there is not enough information to make a recommendation, NOT_FOUND if the identity is not found in the system
     * @type {string}
     * @memberof RecommendationResponseBeta
     */
    'recommendation'?: RecommendationResponseBetaRecommendationEnum;
    /**
     * The list of interpretations explaining the recommendation. The array is empty if includeInterpretations is false or not present in the request. e.g. - [ \"Not approved in the last 6 months.\" ]. Interpretations will be translated using the client\'s locale as found in the Accept-Language header. If a translation for the client\'s locale cannot be found, the US English translation will be returned.
     * @type {Array<string>}
     * @memberof RecommendationResponseBeta
     */
    'interpretations'?: Array<string>;
    /**
     * The list of translation messages, if they have been requested.
     * @type {Array<TranslationMessageBeta>}
     * @memberof RecommendationResponseBeta
     */
    'translationMessages'?: Array<TranslationMessageBeta>;
    /**
     *
     * @type {RecommenderCalculationsBeta}
     * @memberof RecommendationResponseBeta
     */
    'recommenderCalculations'?: RecommenderCalculationsBeta;
}
export declare const RecommendationResponseBetaRecommendationEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Maybe: "MAYBE";
    readonly NotFound: "NOT_FOUND";
};
export type RecommendationResponseBetaRecommendationEnum = typeof RecommendationResponseBetaRecommendationEnum[keyof typeof RecommendationResponseBetaRecommendationEnum];
/**
 *
 * @export
 * @interface RecommendationResponseDtoBeta
 */
export interface RecommendationResponseDtoBeta {
    /**
     *
     * @type {Array<RecommendationResponseBeta>}
     * @memberof RecommendationResponseDtoBeta
     */
    'response'?: Array<RecommendationResponseBeta>;
}
/**
 *
 * @export
 * @interface RecommenderCalculationsBeta
 */
export interface RecommenderCalculationsBeta {
    /**
     * The ID of the identity
     * @type {string}
     * @memberof RecommenderCalculationsBeta
     */
    'identityId'?: string;
    /**
     * The entitlement ID
     * @type {string}
     * @memberof RecommenderCalculationsBeta
     */
    'entitlementId'?: string;
    /**
     * The actual recommendation
     * @type {string}
     * @memberof RecommenderCalculationsBeta
     */
    'recommendation'?: string;
    /**
     * The overall weighted score
     * @type {number}
     * @memberof RecommenderCalculationsBeta
     */
    'overallWeightedScore'?: number;
    /**
     * The weighted score of each individual feature
     * @type {{ [key: string]: number; }}
     * @memberof RecommenderCalculationsBeta
     */
    'featureWeightedScores'?: {
        [key: string]: number;
    };
    /**
     * The configured value against which the overallWeightedScore is compared
     * @type {number}
     * @memberof RecommenderCalculationsBeta
     */
    'threshold'?: number;
    /**
     * The values for your configured features
     * @type {{ [key: string]: RecommenderCalculationsIdentityAttributesValueBeta; }}
     * @memberof RecommenderCalculationsBeta
     */
    'identityAttributes'?: {
        [key: string]: RecommenderCalculationsIdentityAttributesValueBeta;
    };
    /**
     *
     * @type {FeatureValueDtoBeta}
     * @memberof RecommenderCalculationsBeta
     */
    'featureValues'?: FeatureValueDtoBeta;
}
/**
 *
 * @export
 * @interface RecommenderCalculationsIdentityAttributesValueBeta
 */
export interface RecommenderCalculationsIdentityAttributesValueBeta {
    /**
     *
     * @type {string}
     * @memberof RecommenderCalculationsIdentityAttributesValueBeta
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface ReferenceBeta
 */
export interface ReferenceBeta {
    /**
     * This ID specifies the name of the pre-existing transform which you want to use within your current transform
     * @type {string}
     * @memberof ReferenceBeta
     */
    'id': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ReferenceBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ReferenceBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface RemediationItemDetailsBeta
 */
export interface RemediationItemDetailsBeta {
    /**
     * The ID of the certification
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'id'?: string;
    /**
     * The ID of the certification target
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'targetId'?: string;
    /**
     * The name of the certification target
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'targetName'?: string;
    /**
     * The display name of the certification target
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'targetDisplayName'?: string;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'applicationName'?: string;
    /**
     * The name of the attribute being certified
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'attributeName'?: string;
    /**
     * The operation of the certification on the attribute
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'attributeOperation'?: string;
    /**
     * The value of the attribute being certified
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'attributeValue'?: string;
    /**
     * The native identity of the target
     * @type {string}
     * @memberof RemediationItemDetailsBeta
     */
    'nativeIdentity'?: string;
}
/**
 *
 * @export
 * @interface RemediationItemsBeta
 */
export interface RemediationItemsBeta {
    /**
     * The ID of the certification
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'id'?: string;
    /**
     * The ID of the certification target
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'targetId'?: string;
    /**
     * The name of the certification target
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'targetName'?: string;
    /**
     * The display name of the certification target
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'targetDisplayName'?: string;
    /**
     * The name of the application/source
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'applicationName'?: string;
    /**
     * The name of the attribute being certified
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'attributeName'?: string;
    /**
     * The operation of the certification on the attribute
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'attributeOperation'?: string;
    /**
     * The value of the attribute being certified
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'attributeValue'?: string;
    /**
     * The native identity of the target
     * @type {string}
     * @memberof RemediationItemsBeta
     */
    'nativeIdentity'?: string;
}
/**
 *
 * @export
 * @interface ReplaceAllBeta
 */
export interface ReplaceAllBeta {
    /**
     * An attribute of key-value pairs. Each pair identifies the pattern to search for as its key, and the replacement string as its value.
     * @type {{ [key: string]: any; }}
     * @memberof ReplaceAllBeta
     */
    'table': {
        [key: string]: any;
    };
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ReplaceAllBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ReplaceAllBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ReplaceBeta
 */
export interface ReplaceBeta {
    /**
     * This can be a string or a regex pattern in which you want to replace.
     * @type {string}
     * @memberof ReplaceBeta
     */
    'regex': string;
    /**
     * This is the replacement string that should be substituded wherever the string or pattern is found.
     * @type {string}
     * @memberof ReplaceBeta
     */
    'replacement': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof ReplaceBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof ReplaceBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface ReportConfigDTOBeta
 */
export interface ReportConfigDTOBeta {
    /**
     * Name of column in report
     * @type {string}
     * @memberof ReportConfigDTOBeta
     */
    'columnName'?: string;
    /**
     * If true, column is required in all reports, and this entry is immutable. A 400 error will result from any attempt to modify the column\'s definition.
     * @type {boolean}
     * @memberof ReportConfigDTOBeta
     */
    'required'?: boolean;
    /**
     * If true, column is included in the report. A 400 error will be thrown if an attempt is made to set included=false if required==true.
     * @type {boolean}
     * @memberof ReportConfigDTOBeta
     */
    'included'?: boolean;
    /**
     * Relative sort order for the column. Columns will be displayed left-to-right in nondecreasing order.
     * @type {number}
     * @memberof ReportConfigDTOBeta
     */
    'order'?: number;
}
/**
 *
 * @export
 * @interface ReportResultReferenceAllOfBeta
 */
export interface ReportResultReferenceAllOfBeta {
    /**
     * Status of a SOD policy violation report.
     * @type {string}
     * @memberof ReportResultReferenceAllOfBeta
     */
    'status'?: ReportResultReferenceAllOfBetaStatusEnum;
}
export declare const ReportResultReferenceAllOfBetaStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
    readonly Pending: "PENDING";
};
export type ReportResultReferenceAllOfBetaStatusEnum = typeof ReportResultReferenceAllOfBetaStatusEnum[keyof typeof ReportResultReferenceAllOfBetaStatusEnum];
/**
 *
 * @export
 * @interface ReportResultReferenceBeta
 */
export interface ReportResultReferenceBeta {
    /**
     * SOD policy violation report result DTO type.
     * @type {string}
     * @memberof ReportResultReferenceBeta
     */
    'type'?: ReportResultReferenceBetaTypeEnum;
    /**
     * SOD policy violation report result ID.
     * @type {string}
     * @memberof ReportResultReferenceBeta
     */
    'id'?: string;
    /**
     * Human-readable name of the SOD policy violation report result.
     * @type {string}
     * @memberof ReportResultReferenceBeta
     */
    'name'?: string;
    /**
     * Status of a SOD policy violation report.
     * @type {string}
     * @memberof ReportResultReferenceBeta
     */
    'status'?: ReportResultReferenceBetaStatusEnum;
}
export declare const ReportResultReferenceBetaTypeEnum: {
    readonly ReportResult: "REPORT_RESULT";
};
export type ReportResultReferenceBetaTypeEnum = typeof ReportResultReferenceBetaTypeEnum[keyof typeof ReportResultReferenceBetaTypeEnum];
export declare const ReportResultReferenceBetaStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly TempError: "TEMP_ERROR";
    readonly Pending: "PENDING";
};
export type ReportResultReferenceBetaStatusEnum = typeof ReportResultReferenceBetaStatusEnum[keyof typeof ReportResultReferenceBetaStatusEnum];
/**
 * type of a Report
 * @export
 * @enum {string}
 */
export declare const ReportTypeBeta: {
    readonly CampaignCompositionReport: "CAMPAIGN_COMPOSITION_REPORT";
    readonly CampaignRemediationStatusReport: "CAMPAIGN_REMEDIATION_STATUS_REPORT";
    readonly CampaignStatusReport: "CAMPAIGN_STATUS_REPORT";
    readonly CertificationSignoffReport: "CERTIFICATION_SIGNOFF_REPORT";
};
export type ReportTypeBeta = typeof ReportTypeBeta[keyof typeof ReportTypeBeta];
/**
 *
 * @export
 * @interface RequestOnBehalfOfConfigBeta
 */
export interface RequestOnBehalfOfConfigBeta {
    /**
     * If this is true, anyone can request access for anyone.
     * @type {boolean}
     * @memberof RequestOnBehalfOfConfigBeta
     */
    'allowRequestOnBehalfOfAnyoneByAnyone'?: boolean;
    /**
     * If this is true, a manager can request access for his or her direct reports.
     * @type {boolean}
     * @memberof RequestOnBehalfOfConfigBeta
     */
    'allowRequestOnBehalfOfEmployeeByManager'?: boolean;
}
/**
 *
 * @export
 * @interface RequestabilityBeta
 */
export interface RequestabilityBeta {
    /**
     * Whether the requester of the containing object must provide comments justifying the request
     * @type {boolean}
     * @memberof RequestabilityBeta
     */
    'commentsRequired'?: boolean | null;
    /**
     * Whether an approver must provide comments when denying the request
     * @type {boolean}
     * @memberof RequestabilityBeta
     */
    'denialCommentsRequired'?: boolean | null;
    /**
     * List describing the steps in approving the request
     * @type {Array<AccessProfileApprovalSchemeBeta>}
     * @memberof RequestabilityBeta
     */
    'approvalSchemes'?: Array<AccessProfileApprovalSchemeBeta> | null;
}
/**
 *
 * @export
 * @interface RequestabilityForRoleBeta
 */
export interface RequestabilityForRoleBeta {
    /**
     * Whether the requester of the containing object must provide comments justifying the request
     * @type {boolean}
     * @memberof RequestabilityForRoleBeta
     */
    'commentsRequired'?: boolean | null;
    /**
     * Whether an approver must provide comments when denying the request
     * @type {boolean}
     * @memberof RequestabilityForRoleBeta
     */
    'denialCommentsRequired'?: boolean | null;
    /**
     * List describing the steps in approving the request
     * @type {Array<ApprovalSchemeForRoleBeta>}
     * @memberof RequestabilityForRoleBeta
     */
    'approvalSchemes'?: Array<ApprovalSchemeForRoleBeta>;
}
/**
 *
 * @export
 * @interface RequestableObjectBeta
 */
export interface RequestableObjectBeta {
    /**
     * Id of the requestable object itself
     * @type {string}
     * @memberof RequestableObjectBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the requestable object
     * @type {string}
     * @memberof RequestableObjectBeta
     */
    'name'?: string;
    /**
     * The time when the requestable object was created
     * @type {string}
     * @memberof RequestableObjectBeta
     */
    'created'?: string;
    /**
     * The time when the requestable object was last modified
     * @type {string}
     * @memberof RequestableObjectBeta
     */
    'modified'?: string | null;
    /**
     * Description of the requestable object.
     * @type {string}
     * @memberof RequestableObjectBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {RequestableObjectTypeBeta}
     * @memberof RequestableObjectBeta
     */
    'type'?: RequestableObjectTypeBeta;
    /**
     *
     * @type {RequestableObjectRequestStatusBeta & object}
     * @memberof RequestableObjectBeta
     */
    'requestStatus'?: RequestableObjectRequestStatusBeta & object;
    /**
     * If *requestStatus* is *PENDING*, indicates the id of the associated account activity.
     * @type {string}
     * @memberof RequestableObjectBeta
     */
    'identityRequestId'?: string | null;
    /**
     *
     * @type {IdentityReferenceWithNameAndEmailBeta}
     * @memberof RequestableObjectBeta
     */
    'ownerRef'?: IdentityReferenceWithNameAndEmailBeta | null;
    /**
     * Whether the requester must provide comments when requesting the object.
     * @type {boolean}
     * @memberof RequestableObjectBeta
     */
    'requestCommentsRequired'?: boolean;
}
/**
 *
 * @export
 * @interface RequestableObjectReferenceBeta
 */
export interface RequestableObjectReferenceBeta {
    /**
     * Id of the object.
     * @type {string}
     * @memberof RequestableObjectReferenceBeta
     */
    'id'?: string;
    /**
     * Name of the object.
     * @type {string}
     * @memberof RequestableObjectReferenceBeta
     */
    'name'?: string;
    /**
     * Description of the object.
     * @type {string}
     * @memberof RequestableObjectReferenceBeta
     */
    'description'?: string;
    /**
     * Type of the object.
     * @type {string}
     * @memberof RequestableObjectReferenceBeta
     */
    'type'?: RequestableObjectReferenceBetaTypeEnum;
}
export declare const RequestableObjectReferenceBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type RequestableObjectReferenceBetaTypeEnum = typeof RequestableObjectReferenceBetaTypeEnum[keyof typeof RequestableObjectReferenceBetaTypeEnum];
/**
 * Status indicating the ability of an access request for the object to be made by or on behalf of the identity specified by *identity-id*. *AVAILABLE* indicates the object is available to request. *PENDING* indicates the object is unavailable because the identity has a pending request in flight. *ASSIGNED* indicates the object is unavailable because the identity already has the indicated role or access profile. If *identity-id* is not specified (allowed only for admin users), then status will be *AVAILABLE* for all results.
 * @export
 * @enum {string}
 */
export declare const RequestableObjectRequestStatusBeta: {
    readonly Available: "AVAILABLE";
    readonly Pending: "PENDING";
    readonly Assigned: "ASSIGNED";
    readonly Null: "null";
};
export type RequestableObjectRequestStatusBeta = typeof RequestableObjectRequestStatusBeta[keyof typeof RequestableObjectRequestStatusBeta];
/**
 * The currently supported requestable object types.
 * @export
 * @enum {string}
 */
export declare const RequestableObjectTypeBeta: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
};
export type RequestableObjectTypeBeta = typeof RequestableObjectTypeBeta[keyof typeof RequestableObjectTypeBeta];
/**
 *
 * @export
 * @interface RequestedItemStatusBeta
 */
export interface RequestedItemStatusBeta {
    /**
     * Human-readable display name of the item being requested.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'name'?: string | null;
    /**
     * Type of requested object.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'type'?: RequestedItemStatusBetaTypeEnum;
    /**
     *
     * @type {RequestedItemStatusCancelledRequestDetailsBeta}
     * @memberof RequestedItemStatusBeta
     */
    'cancelledRequestDetails'?: RequestedItemStatusCancelledRequestDetailsBeta;
    /**
     * List of list of localized error messages, if any, encountered during the approval/provisioning process.
     * @type {Array<Array<ErrorMessageDtoBeta>>}
     * @memberof RequestedItemStatusBeta
     */
    'errorMessages'?: Array<Array<ErrorMessageDtoBeta>> | null;
    /**
     *
     * @type {RequestedItemStatusRequestStateBeta}
     * @memberof RequestedItemStatusBeta
     */
    'state'?: RequestedItemStatusRequestStateBeta;
    /**
     * Approval details for each item.
     * @type {Array<ApprovalStatusDtoBeta>}
     * @memberof RequestedItemStatusBeta
     */
    'approvalDetails'?: Array<ApprovalStatusDtoBeta>;
    /**
     * Manual work items created for provisioning the item.
     * @type {Array<ManualWorkItemDetailsBeta>}
     * @memberof RequestedItemStatusBeta
     */
    'manualWorkItemDetails'?: Array<ManualWorkItemDetailsBeta> | null;
    /**
     * Id of associated account activity item.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'accountActivityItemId'?: string;
    /**
     *
     * @type {AccessRequestTypeBeta}
     * @memberof RequestedItemStatusBeta
     */
    'requestType'?: AccessRequestTypeBeta | null;
    /**
     * When the request was last modified.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'modified'?: string | null;
    /**
     * When the request was created.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'created'?: string;
    /**
     *
     * @type {AccessItemRequesterBeta}
     * @memberof RequestedItemStatusBeta
     */
    'requester'?: AccessItemRequesterBeta;
    /**
     *
     * @type {RequestedItemStatusRequestedForBeta}
     * @memberof RequestedItemStatusBeta
     */
    'requestedFor'?: RequestedItemStatusRequestedForBeta;
    /**
     *
     * @type {RequestedItemStatusRequesterCommentBeta}
     * @memberof RequestedItemStatusBeta
     */
    'requesterComment'?: RequestedItemStatusRequesterCommentBeta;
    /**
     *
     * @type {RequestedItemStatusSodViolationContextBeta}
     * @memberof RequestedItemStatusBeta
     */
    'sodViolationContext'?: RequestedItemStatusSodViolationContextBeta;
    /**
     *
     * @type {RequestedItemStatusProvisioningDetailsBeta}
     * @memberof RequestedItemStatusBeta
     */
    'provisioningDetails'?: RequestedItemStatusProvisioningDetailsBeta;
    /**
     *
     * @type {RequestedItemStatusPreApprovalTriggerDetailsBeta}
     * @memberof RequestedItemStatusBeta
     */
    'preApprovalTriggerDetails'?: RequestedItemStatusPreApprovalTriggerDetailsBeta;
    /**
     * A list of Phases that the Access Request has gone through in order, to help determine the status of the request.
     * @type {Array<AccessRequestPhasesBeta>}
     * @memberof RequestedItemStatusBeta
     */
    'accessRequestPhases'?: Array<AccessRequestPhasesBeta> | null;
    /**
     * Description associated to the requested object.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'description'?: string | null;
    /**
     * When the role access is scheduled for removal.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'removeDate'?: string | null;
    /**
     * True if the request can be canceled.
     * @type {boolean}
     * @memberof RequestedItemStatusBeta
     */
    'cancelable'?: boolean;
    /**
     * This is the account activity id.
     * @type {string}
     * @memberof RequestedItemStatusBeta
     */
    'accessRequestId'?: string;
    /**
     * Arbitrary key-value pairs, if any were included in the corresponding access request
     * @type {{ [key: string]: string; }}
     * @memberof RequestedItemStatusBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
}
export declare const RequestedItemStatusBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Role: "ROLE";
    readonly Entitlement: "ENTITLEMENT";
    readonly Null: "null";
};
export type RequestedItemStatusBetaTypeEnum = typeof RequestedItemStatusBetaTypeEnum[keyof typeof RequestedItemStatusBetaTypeEnum];
/**
 *
 * @export
 * @interface RequestedItemStatusCancelledRequestDetailsBeta
 */
export interface RequestedItemStatusCancelledRequestDetailsBeta {
    /**
     * Comment made by the owner when cancelling the associated request.
     * @type {string}
     * @memberof RequestedItemStatusCancelledRequestDetailsBeta
     */
    'comment'?: string;
    /**
     *
     * @type {OwnerDtoBeta}
     * @memberof RequestedItemStatusCancelledRequestDetailsBeta
     */
    'owner'?: OwnerDtoBeta;
    /**
     * Date comment was added by the owner when cancelling the associated request.
     * @type {string}
     * @memberof RequestedItemStatusCancelledRequestDetailsBeta
     */
    'modified'?: string;
}
/**
 *
 * @export
 * @interface RequestedItemStatusPreApprovalTriggerDetailsBeta
 */
export interface RequestedItemStatusPreApprovalTriggerDetailsBeta {
    /**
     * Comment left for the pre-approval decision
     * @type {string}
     * @memberof RequestedItemStatusPreApprovalTriggerDetailsBeta
     */
    'comment'?: string;
    /**
     * The reviewer of the pre-approval decision
     * @type {string}
     * @memberof RequestedItemStatusPreApprovalTriggerDetailsBeta
     */
    'reviewer'?: string;
    /**
     * The decision of the pre-approval trigger
     * @type {string}
     * @memberof RequestedItemStatusPreApprovalTriggerDetailsBeta
     */
    'decision'?: RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum;
}
export declare const RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum: {
    readonly Approved: "APPROVED";
    readonly Rejected: "REJECTED";
};
export type RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum = typeof RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum[keyof typeof RequestedItemStatusPreApprovalTriggerDetailsBetaDecisionEnum];
/**
 *
 * @export
 * @interface RequestedItemStatusProvisioningDetailsBeta
 */
export interface RequestedItemStatusProvisioningDetailsBeta {
    /**
     * Ordered CSV of sub phase references to objects that contain more information about provisioning. For example, this can contain \"manualWorkItemDetails\" which indicate that there is further information in that object for this phase.
     * @type {string}
     * @memberof RequestedItemStatusProvisioningDetailsBeta
     */
    'orderedSubPhaseReferences'?: string;
}
/**
 * Indicates the state of an access request: * EXECUTING: The request is executing, which indicates the system is doing some processing. * REQUEST_COMPLETED: Indicates the request  has been completed. * CANCELLED: The request was cancelled with no user input. * TERMINATED: The request has been terminated before it was able to complete. * PROVISIONING_VERIFICATION_PENDING: The request has finished any approval steps and provisioning is waiting to be verified. * REJECTED: The request was rejected. * PROVISIONING_FAILED: The request has failed to complete. * NOT_ALL_ITEMS_PROVISIONED: One or more of the requested items failed to complete, but there were one or more  successes. * ERROR: An error occurred during request processing.
 * @export
 * @enum {string}
 */
export declare const RequestedItemStatusRequestStateBeta: {
    readonly Executing: "EXECUTING";
    readonly RequestCompleted: "REQUEST_COMPLETED";
    readonly Cancelled: "CANCELLED";
    readonly Terminated: "TERMINATED";
    readonly ProvisioningVerificationPending: "PROVISIONING_VERIFICATION_PENDING";
    readonly Rejected: "REJECTED";
    readonly ProvisioningFailed: "PROVISIONING_FAILED";
    readonly NotAllItemsProvisioned: "NOT_ALL_ITEMS_PROVISIONED";
    readonly Error: "ERROR";
};
export type RequestedItemStatusRequestStateBeta = typeof RequestedItemStatusRequestStateBeta[keyof typeof RequestedItemStatusRequestStateBeta];
/**
 * Identity access was requested for.
 * @export
 * @interface RequestedItemStatusRequestedForBeta
 */
export interface RequestedItemStatusRequestedForBeta {
    /**
     * Type of the object to which this reference applies
     * @type {string}
     * @memberof RequestedItemStatusRequestedForBeta
     */
    'type'?: RequestedItemStatusRequestedForBetaTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof RequestedItemStatusRequestedForBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof RequestedItemStatusRequestedForBeta
     */
    'name'?: string;
}
export declare const RequestedItemStatusRequestedForBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type RequestedItemStatusRequestedForBetaTypeEnum = typeof RequestedItemStatusRequestedForBetaTypeEnum[keyof typeof RequestedItemStatusRequestedForBetaTypeEnum];
/**
 *
 * @export
 * @interface RequestedItemStatusRequesterCommentBeta
 */
export interface RequestedItemStatusRequesterCommentBeta {
    /**
     * Comment content.
     * @type {string}
     * @memberof RequestedItemStatusRequesterCommentBeta
     */
    'comment'?: string | null;
    /**
     * Date and time comment was created.
     * @type {string}
     * @memberof RequestedItemStatusRequesterCommentBeta
     */
    'created'?: string;
    /**
     *
     * @type {CommentDto1AuthorBeta}
     * @memberof RequestedItemStatusRequesterCommentBeta
     */
    'author'?: CommentDto1AuthorBeta;
}
/**
 *
 * @export
 * @interface RequestedItemStatusSodViolationContextBeta
 */
export interface RequestedItemStatusSodViolationContextBeta {
    /**
     * The status of SOD violation check
     * @type {string}
     * @memberof RequestedItemStatusSodViolationContextBeta
     */
    'state'?: RequestedItemStatusSodViolationContextBetaStateEnum;
    /**
     * The id of the Violation check event
     * @type {string}
     * @memberof RequestedItemStatusSodViolationContextBeta
     */
    'uuid'?: string | null;
    /**
     *
     * @type {SodViolationCheckResultBeta}
     * @memberof RequestedItemStatusSodViolationContextBeta
     */
    'violationCheckResult'?: SodViolationCheckResultBeta;
}
export declare const RequestedItemStatusSodViolationContextBetaStateEnum: {
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
    readonly Null: "null";
};
export type RequestedItemStatusSodViolationContextBetaStateEnum = typeof RequestedItemStatusSodViolationContextBetaStateEnum[keyof typeof RequestedItemStatusSodViolationContextBetaStateEnum];
/**
 *
 * @export
 * @interface ResourceBundleMessageBeta
 */
export interface ResourceBundleMessageBeta {
    /**
     * The key of the message
     * @type {string}
     * @memberof ResourceBundleMessageBeta
     */
    'key'?: string;
    /**
     * The format of the message
     * @type {string}
     * @memberof ResourceBundleMessageBeta
     */
    'format'?: string;
}
/**
 * Representation of the object which is returned from source connectors.
 * @export
 * @interface ResourceObjectBeta
 */
export interface ResourceObjectBeta {
    /**
     * Identifier of the specific instance where this object resides.
     * @type {string}
     * @memberof ResourceObjectBeta
     */
    'instance'?: string;
    /**
     * Native identity of the object in the Source.
     * @type {string}
     * @memberof ResourceObjectBeta
     */
    'identity'?: string;
    /**
     * Universal unique identifier of the object in the Source.
     * @type {string}
     * @memberof ResourceObjectBeta
     */
    'uuid'?: string;
    /**
     * Native identity that the object has previously.
     * @type {string}
     * @memberof ResourceObjectBeta
     */
    'previousIdentity'?: string;
    /**
     * Display name for this object.
     * @type {string}
     * @memberof ResourceObjectBeta
     */
    'name'?: string;
    /**
     * Type of object.
     * @type {string}
     * @memberof ResourceObjectBeta
     */
    'objectType'?: string;
    /**
     * A flag indicating that this is an incomplete object. Used in special cases where the connector has to return account information in several phases and the objects might not have a complete set of all account attributes. The attributes in this object will replace the corresponding attributes in the Link, but no other Link attributes will be changed.
     * @type {boolean}
     * @memberof ResourceObjectBeta
     */
    'incomplete'?: boolean;
    /**
     * A flag indicating that this is an incremental change object. This is similar to incomplete but it also means that the values of any multi-valued attributes in this object should be merged with the existing values in the Link rather than replacing the existing Link value.
     * @type {boolean}
     * @memberof ResourceObjectBeta
     */
    'incremental'?: boolean;
    /**
     * A flag indicating that this object has been deleted. This is set only when doing delta aggregation and the connector supports detection of native deletes.
     * @type {boolean}
     * @memberof ResourceObjectBeta
     */
    'delete'?: boolean;
    /**
     * A flag set indicating that the values in the attributes represent things to remove rather than things to add. Setting this implies incremental. The values which are always for multi-valued attributes are removed from the current values.
     * @type {boolean}
     * @memberof ResourceObjectBeta
     */
    'remove'?: boolean;
    /**
     * A list of attribute names that are not included in this object. This is only used with SMConnector and will only contain \"groups\".
     * @type {Array<string>}
     * @memberof ResourceObjectBeta
     */
    'missing'?: Array<string>;
    /**
     * Attributes of this ResourceObject.
     * @type {object}
     * @memberof ResourceObjectBeta
     */
    'attributes'?: object;
    /**
     * In Aggregation, for sparse object the count for total accounts scanned identities updated is not incremented.
     * @type {boolean}
     * @memberof ResourceObjectBeta
     */
    'finalUpdate'?: boolean;
}
/**
 * Request model for peek resource objects from source connectors.
 * @export
 * @interface ResourceObjectsRequestBeta
 */
export interface ResourceObjectsRequestBeta {
    /**
     * The type of resource objects to iterate over.
     * @type {string}
     * @memberof ResourceObjectsRequestBeta
     */
    'objectType'?: string;
    /**
     * The maximum number of resource objects to iterate over and return.
     * @type {number}
     * @memberof ResourceObjectsRequestBeta
     */
    'maxCount'?: number;
}
/**
 * Response model for peek resource objects from source connectors.
 * @export
 * @interface ResourceObjectsResponseBeta
 */
export interface ResourceObjectsResponseBeta {
    /**
     * ID of the source
     * @type {string}
     * @memberof ResourceObjectsResponseBeta
     */
    'id'?: string;
    /**
     * Name of the source
     * @type {string}
     * @memberof ResourceObjectsResponseBeta
     */
    'name'?: string;
    /**
     * The number of objects that were fetched by the connector.
     * @type {number}
     * @memberof ResourceObjectsResponseBeta
     */
    'objectCount'?: number;
    /**
     * The number of milliseconds spent on the entire request.
     * @type {number}
     * @memberof ResourceObjectsResponseBeta
     */
    'elapsedMillis'?: number;
    /**
     * Fetched objects from the source connector.
     * @type {Array<ResourceObjectBeta>}
     * @memberof ResourceObjectsResponseBeta
     */
    'resourceObjects'?: Array<ResourceObjectBeta>;
}
/**
 *
 * @export
 * @interface ReviewReassignBeta
 */
export interface ReviewReassignBeta {
    /**
     *
     * @type {Array<ReassignReferenceBeta>}
     * @memberof ReviewReassignBeta
     */
    'reassign': Array<ReassignReferenceBeta>;
    /**
     * The ID of the identity to which the certification is reassigned
     * @type {string}
     * @memberof ReviewReassignBeta
     */
    'reassignTo': string;
    /**
     * The reason comment for why the reassign was made
     * @type {string}
     * @memberof ReviewReassignBeta
     */
    'reason': string;
}
/**
 * Details of the reviewer for certification.
 * @export
 * @interface ReviewerBeta
 */
export interface ReviewerBeta {
    /**
     * The reviewer\'s DTO type.
     * @type {string}
     * @memberof ReviewerBeta
     */
    'type': ReviewerBetaTypeEnum;
    /**
     * The reviewer\'s ID.
     * @type {string}
     * @memberof ReviewerBeta
     */
    'id': string;
    /**
     * The reviewer\'s display name.
     * @type {string}
     * @memberof ReviewerBeta
     */
    'name': string;
    /**
     * The reviewing identity\'s email. Only applicable to `IDENTITY`.
     * @type {string}
     * @memberof ReviewerBeta
     */
    'email'?: string | null;
}
export declare const ReviewerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type ReviewerBetaTypeEnum = typeof ReviewerBetaTypeEnum[keyof typeof ReviewerBetaTypeEnum];
/**
 *
 * @export
 * @interface RevocabilityBeta
 */
export interface RevocabilityBeta {
    /**
     * List describing the steps in approving the revocation request
     * @type {Array<AccessProfileApprovalSchemeBeta>}
     * @memberof RevocabilityBeta
     */
    'approvalSchemes'?: Array<AccessProfileApprovalSchemeBeta> | null;
}
/**
 *
 * @export
 * @interface RevocabilityForRoleBeta
 */
export interface RevocabilityForRoleBeta {
    /**
     * Whether the requester of the containing object must provide comments justifying the request
     * @type {boolean}
     * @memberof RevocabilityForRoleBeta
     */
    'commentsRequired'?: boolean | null;
    /**
     * Whether an approver must provide comments when denying the request
     * @type {boolean}
     * @memberof RevocabilityForRoleBeta
     */
    'denialCommentsRequired'?: boolean | null;
    /**
     * List describing the steps in approving the revocation request
     * @type {Array<ApprovalSchemeForRoleBeta>}
     * @memberof RevocabilityForRoleBeta
     */
    'approvalSchemes'?: Array<ApprovalSchemeForRoleBeta>;
}
/**
 *
 * @export
 * @interface RightPadBeta
 */
export interface RightPadBeta {
    /**
     * An integer value for the desired length of the final output string
     * @type {string}
     * @memberof RightPadBeta
     */
    'length': string;
    /**
     * A string value representing the character that the incoming data should be padded with to get to the desired length   If not provided, the transform will default to a single space (\" \") character for padding
     * @type {string}
     * @memberof RightPadBeta
     */
    'padding'?: string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof RightPadBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof RightPadBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface RoleAssignmentDtoBeta
 */
export interface RoleAssignmentDtoBeta {
    /**
     * Assignment Id
     * @type {string}
     * @memberof RoleAssignmentDtoBeta
     */
    'id'?: string;
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof RoleAssignmentDtoBeta
     */
    'role'?: BaseReferenceDtoBeta;
    /**
     * Comments added by the user when the assignment was made
     * @type {string}
     * @memberof RoleAssignmentDtoBeta
     */
    'comments'?: string;
    /**
     * Source describing how this assignment was made
     * @type {string}
     * @memberof RoleAssignmentDtoBeta
     */
    'assignmentSource'?: string;
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof RoleAssignmentDtoBeta
     */
    'assigner'?: BaseReferenceDtoBeta;
    /**
     * Dimensions assigned related to this role
     * @type {Array<BaseReferenceDtoBeta>}
     * @memberof RoleAssignmentDtoBeta
     */
    'assignedDimensions'?: Array<BaseReferenceDtoBeta>;
    /**
     *
     * @type {AssignmentContextDtoBeta}
     * @memberof RoleAssignmentDtoBeta
     */
    'assignmentContext'?: AssignmentContextDtoBeta;
    /**
     *
     * @type {Array<RoleTargetDtoBeta>}
     * @memberof RoleAssignmentDtoBeta
     */
    'accountTargets'?: Array<RoleTargetDtoBeta>;
    /**
     * Date that the assignment will be removed
     * @type {string}
     * @memberof RoleAssignmentDtoBeta
     */
    'removeDate'?: string;
}
/**
 *
 * @export
 * @interface RoleAssignmentRefBeta
 */
export interface RoleAssignmentRefBeta {
    /**
     * Assignment Id
     * @type {string}
     * @memberof RoleAssignmentRefBeta
     */
    'id'?: string;
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof RoleAssignmentRefBeta
     */
    'role'?: BaseReferenceDtoBeta;
}
/**
 * Type which indicates how a particular Identity obtained a particular Role
 * @export
 * @enum {string}
 */
export declare const RoleAssignmentSourceTypeBeta: {
    readonly AccessRequest: "ACCESS_REQUEST";
    readonly RoleMembership: "ROLE_MEMBERSHIP";
};
export type RoleAssignmentSourceTypeBeta = typeof RoleAssignmentSourceTypeBeta[keyof typeof RoleAssignmentSourceTypeBeta];
/**
 * A Role
 * @export
 * @interface RoleBeta
 */
export interface RoleBeta {
    /**
     * The id of the Role. This field must be left null when creating an Role, otherwise a 400 Bad Request error will result.
     * @type {string}
     * @memberof RoleBeta
     */
    'id'?: string;
    /**
     * The human-readable display name of the Role
     * @type {string}
     * @memberof RoleBeta
     */
    'name': string;
    /**
     * Date the Role was created
     * @type {string}
     * @memberof RoleBeta
     */
    'created'?: string;
    /**
     * Date the Role was last modified.
     * @type {string}
     * @memberof RoleBeta
     */
    'modified'?: string;
    /**
     * A human-readable description of the Role
     * @type {string}
     * @memberof RoleBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {OwnerReferenceBeta}
     * @memberof RoleBeta
     */
    'owner': OwnerReferenceBeta;
    /**
     *
     * @type {Array<AccessProfileRefBeta>}
     * @memberof RoleBeta
     */
    'accessProfiles'?: Array<AccessProfileRefBeta> | null;
    /**
     *
     * @type {Array<EntitlementRefBeta>}
     * @memberof RoleBeta
     */
    'entitlements'?: Array<EntitlementRefBeta>;
    /**
     *
     * @type {RoleMembershipSelectorBeta}
     * @memberof RoleBeta
     */
    'membership'?: RoleMembershipSelectorBeta | null;
    /**
     * This field is not directly modifiable and is generally expected to be *null*. In very rare instances, some Roles may have been created using membership selection criteria that are no longer fully supported. While these Roles will still work, they should be migrated to STANDARD or IDENTITY_LIST selection criteria. This field exists for informational purposes as an aid to such migration.
     * @type {{ [key: string]: any; }}
     * @memberof RoleBeta
     */
    'legacyMembershipInfo'?: {
        [key: string]: any;
    } | null;
    /**
     * Whether the Role is enabled or not.
     * @type {boolean}
     * @memberof RoleBeta
     */
    'enabled'?: boolean;
    /**
     * Whether the Role can be the target of access requests.
     * @type {boolean}
     * @memberof RoleBeta
     */
    'requestable'?: boolean;
    /**
     *
     * @type {RequestabilityForRoleBeta}
     * @memberof RoleBeta
     */
    'accessRequestConfig'?: RequestabilityForRoleBeta;
    /**
     *
     * @type {RevocabilityForRoleBeta}
     * @memberof RoleBeta
     */
    'revocationRequestConfig'?: RevocabilityForRoleBeta;
    /**
     * List of IDs of segments, if any, to which this Role is assigned.
     * @type {Array<string>}
     * @memberof RoleBeta
     */
    'segments'?: Array<string> | null;
    /**
     *
     * @type {boolean}
     * @memberof RoleBeta
     */
    'dimensional'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof RoleBeta
     */
    'dimensionRefs'?: string | null;
}
/**
 *
 * @export
 * @interface RoleBulkDeleteRequestBeta
 */
export interface RoleBulkDeleteRequestBeta {
    /**
     * List of IDs of Roles to be deleted.
     * @type {Array<string>}
     * @memberof RoleBulkDeleteRequestBeta
     */
    'roleIds': Array<string>;
}
/**
 * Refers to a specific Identity attribute, Account attibute, or Entitlement used in Role membership criteria
 * @export
 * @interface RoleCriteriaKeyBeta
 */
export interface RoleCriteriaKeyBeta {
    /**
     *
     * @type {RoleCriteriaKeyTypeBeta}
     * @memberof RoleCriteriaKeyBeta
     */
    'type': RoleCriteriaKeyTypeBeta;
    /**
     * The name of the attribute or entitlement to which the associated criteria applies.
     * @type {string}
     * @memberof RoleCriteriaKeyBeta
     */
    'property': string;
    /**
     * ID of the Source from which an account attribute or entitlement is drawn. Required if type is ACCOUNT or ENTITLEMENT
     * @type {string}
     * @memberof RoleCriteriaKeyBeta
     */
    'sourceId'?: string | null;
}
/**
 * Indicates whether the associated criteria represents an expression on identity attributes, account attributes, or entitlements, respectively.
 * @export
 * @enum {string}
 */
export declare const RoleCriteriaKeyTypeBeta: {
    readonly Identity: "IDENTITY";
    readonly Account: "ACCOUNT";
    readonly Entitlement: "ENTITLEMENT";
};
export type RoleCriteriaKeyTypeBeta = typeof RoleCriteriaKeyTypeBeta[keyof typeof RoleCriteriaKeyTypeBeta];
/**
 * Defines STANDARD type Role membership
 * @export
 * @interface RoleCriteriaLevel1Beta
 */
export interface RoleCriteriaLevel1Beta {
    /**
     *
     * @type {RoleCriteriaOperationBeta}
     * @memberof RoleCriteriaLevel1Beta
     */
    'operation'?: RoleCriteriaOperationBeta;
    /**
     *
     * @type {RoleCriteriaKeyBeta}
     * @memberof RoleCriteriaLevel1Beta
     */
    'key'?: RoleCriteriaKeyBeta | null;
    /**
     * String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof RoleCriteriaLevel1Beta
     */
    'stringValue'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa.
     * @type {Array<RoleCriteriaLevel2Beta>}
     * @memberof RoleCriteriaLevel1Beta
     */
    'children'?: Array<RoleCriteriaLevel2Beta> | null;
}
/**
 * Defines STANDARD type Role membership
 * @export
 * @interface RoleCriteriaLevel2Beta
 */
export interface RoleCriteriaLevel2Beta {
    /**
     *
     * @type {RoleCriteriaOperationBeta}
     * @memberof RoleCriteriaLevel2Beta
     */
    'operation'?: RoleCriteriaOperationBeta;
    /**
     *
     * @type {RoleCriteriaKeyBeta}
     * @memberof RoleCriteriaLevel2Beta
     */
    'key'?: RoleCriteriaKeyBeta | null;
    /**
     * String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof RoleCriteriaLevel2Beta
     */
    'stringValue'?: string | null;
    /**
     * Array of child criteria. Required if the operation is AND or OR, otherwise it must be left null. A maximum of three levels of criteria are supported, including leaf nodes. Additionally, AND nodes can only be children or OR nodes and vice-versa.
     * @type {Array<RoleCriteriaLevel3Beta>}
     * @memberof RoleCriteriaLevel2Beta
     */
    'children'?: Array<RoleCriteriaLevel3Beta> | null;
}
/**
 * Defines STANDARD type Role membership
 * @export
 * @interface RoleCriteriaLevel3Beta
 */
export interface RoleCriteriaLevel3Beta {
    /**
     *
     * @type {RoleCriteriaOperationBeta}
     * @memberof RoleCriteriaLevel3Beta
     */
    'operation'?: RoleCriteriaOperationBeta;
    /**
     *
     * @type {RoleCriteriaKeyBeta}
     * @memberof RoleCriteriaLevel3Beta
     */
    'key'?: RoleCriteriaKeyBeta | null;
    /**
     * String value to test the Identity attribute, Account attribute, or Entitlement specified in the key w/r/t the specified operation. If this criteria is a leaf node, that is, if the operation is one of EQUALS, NOT_EQUALS, CONTAINS, STARTS_WITH, or ENDS_WITH, this field is required. Otherwise, specifying it is an error.
     * @type {string}
     * @memberof RoleCriteriaLevel3Beta
     */
    'stringValue'?: string;
}
/**
 * An operation
 * @export
 * @enum {string}
 */
export declare const RoleCriteriaOperationBeta: {
    readonly Equals: "EQUALS";
    readonly NotEquals: "NOT_EQUALS";
    readonly Contains: "CONTAINS";
    readonly StartsWith: "STARTS_WITH";
    readonly EndsWith: "ENDS_WITH";
    readonly And: "AND";
    readonly Or: "OR";
};
export type RoleCriteriaOperationBeta = typeof RoleCriteriaOperationBeta[keyof typeof RoleCriteriaOperationBeta];
/**
 * A subset of the fields of an Identity which is a member of a Role.
 * @export
 * @interface RoleIdentityBeta
 */
export interface RoleIdentityBeta {
    /**
     * The ID of the Identity
     * @type {string}
     * @memberof RoleIdentityBeta
     */
    'id'?: string;
    /**
     * The alias / username of the Identity
     * @type {string}
     * @memberof RoleIdentityBeta
     */
    'aliasName'?: string;
    /**
     * The human-readable display name of the Identity
     * @type {string}
     * @memberof RoleIdentityBeta
     */
    'name'?: string;
    /**
     * Email address of the Identity
     * @type {string}
     * @memberof RoleIdentityBeta
     */
    'email'?: string;
    /**
     *
     * @type {RoleAssignmentSourceTypeBeta}
     * @memberof RoleIdentityBeta
     */
    'roleAssignmentSource'?: RoleAssignmentSourceTypeBeta;
}
/**
 *
 * @export
 * @interface RoleInsightBeta
 */
export interface RoleInsightBeta {
    /**
     * Insight id
     * @type {string}
     * @memberof RoleInsightBeta
     */
    'id'?: string;
    /**
     * Total number of updates for this role
     * @type {number}
     * @memberof RoleInsightBeta
     */
    'numberOfUpdates'?: number;
    /**
     * The date-time insights were last created for this role.
     * @type {string}
     * @memberof RoleInsightBeta
     */
    'createdDate'?: string;
    /**
     * The date-time insights were last modified for this role.
     * @type {string}
     * @memberof RoleInsightBeta
     */
    'modifiedDate'?: string | null;
    /**
     *
     * @type {RoleInsightsRoleBeta}
     * @memberof RoleInsightBeta
     */
    'role'?: RoleInsightsRoleBeta;
    /**
     *
     * @type {RoleInsightsInsightBeta}
     * @memberof RoleInsightBeta
     */
    'insight'?: RoleInsightsInsightBeta;
}
/**
 *
 * @export
 * @interface RoleInsightsEntitlementBeta
 */
export interface RoleInsightsEntitlementBeta {
    /**
     * Name of the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementBeta
     */
    'name'?: string;
    /**
     * Id of the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementBeta
     */
    'id'?: string;
    /**
     * Description for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementBeta
     */
    'description'?: string;
    /**
     * Source or the application for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementBeta
     */
    'source'?: string;
    /**
     * Attribute for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementBeta
     */
    'attribute'?: string;
    /**
     * Attribute value for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementBeta
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface RoleInsightsEntitlementChangesBeta
 */
export interface RoleInsightsEntitlementChangesBeta {
    /**
     * Name of the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'name'?: string;
    /**
     * Id of the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'id'?: string;
    /**
     * Description for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'description'?: string;
    /**
     * Attribute for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'attribute'?: string;
    /**
     * Attribute value for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'value'?: string;
    /**
     * Source or the application for the entitlement
     * @type {string}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'source'?: string;
    /**
     *
     * @type {RoleInsightsInsightBeta}
     * @memberof RoleInsightsEntitlementChangesBeta
     */
    'insight'?: RoleInsightsInsightBeta;
}
/**
 *
 * @export
 * @interface RoleInsightsIdentitiesBeta
 */
export interface RoleInsightsIdentitiesBeta {
    /**
     * Id for identity
     * @type {string}
     * @memberof RoleInsightsIdentitiesBeta
     */
    'id'?: string;
    /**
     * Name for identity
     * @type {string}
     * @memberof RoleInsightsIdentitiesBeta
     */
    'name'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof RoleInsightsIdentitiesBeta
     */
    'attributes'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface RoleInsightsInsightBeta
 */
export interface RoleInsightsInsightBeta {
    /**
     * The number of identities in this role with the entitlement.
     * @type {string}
     * @memberof RoleInsightsInsightBeta
     */
    'type'?: string;
    /**
     * The number of identities in this role with the entitlement.
     * @type {number}
     * @memberof RoleInsightsInsightBeta
     */
    'identitiesWithAccess'?: number;
    /**
     * The number of identities in this role that do not have the specified entitlement.
     * @type {number}
     * @memberof RoleInsightsInsightBeta
     */
    'identitiesImpacted'?: number;
    /**
     * The total number of identities.
     * @type {number}
     * @memberof RoleInsightsInsightBeta
     */
    'totalNumberOfIdentities'?: number;
    /**
     *
     * @type {string}
     * @memberof RoleInsightsInsightBeta
     */
    'impactedIdentityNames'?: string | null;
}
/**
 *
 * @export
 * @interface RoleInsightsResponseBeta
 */
export interface RoleInsightsResponseBeta {
    /**
     * Request Id for a role insight generation request
     * @type {string}
     * @memberof RoleInsightsResponseBeta
     */
    'id'?: string;
    /**
     * The date-time role insights request was created.
     * @type {string}
     * @memberof RoleInsightsResponseBeta
     */
    'createdDate'?: string;
    /**
     * The date-time role insights request was completed.
     * @type {string}
     * @memberof RoleInsightsResponseBeta
     */
    'lastGenerated'?: string;
    /**
     * Total number of updates for this request. Starts with 0 and will have correct number when request is COMPLETED.
     * @type {number}
     * @memberof RoleInsightsResponseBeta
     */
    'numberOfUpdates'?: number;
    /**
     * The role IDs that are in this request.
     * @type {Array<string>}
     * @memberof RoleInsightsResponseBeta
     */
    'roleIds'?: Array<string>;
    /**
     * Request status
     * @type {string}
     * @memberof RoleInsightsResponseBeta
     */
    'status'?: RoleInsightsResponseBetaStatusEnum;
}
export declare const RoleInsightsResponseBetaStatusEnum: {
    readonly Created: "CREATED";
    readonly InProgress: "IN PROGRESS";
    readonly Completed: "COMPLETED";
    readonly Failed: "FAILED";
};
export type RoleInsightsResponseBetaStatusEnum = typeof RoleInsightsResponseBetaStatusEnum[keyof typeof RoleInsightsResponseBetaStatusEnum];
/**
 *
 * @export
 * @interface RoleInsightsRoleBeta
 */
export interface RoleInsightsRoleBeta {
    /**
     * Role name
     * @type {string}
     * @memberof RoleInsightsRoleBeta
     */
    'name'?: string;
    /**
     * Role id
     * @type {string}
     * @memberof RoleInsightsRoleBeta
     */
    'id'?: string;
    /**
     * Role description
     * @type {string}
     * @memberof RoleInsightsRoleBeta
     */
    'description'?: string;
    /**
     * Role owner name
     * @type {string}
     * @memberof RoleInsightsRoleBeta
     */
    'ownerName'?: string;
    /**
     * Role owner id
     * @type {string}
     * @memberof RoleInsightsRoleBeta
     */
    'ownerId'?: string;
}
/**
 *
 * @export
 * @interface RoleInsightsSummaryBeta
 */
export interface RoleInsightsSummaryBeta {
    /**
     * Total number of roles with updates
     * @type {number}
     * @memberof RoleInsightsSummaryBeta
     */
    'numberOfUpdates'?: number;
    /**
     * The date-time role insights were last found.
     * @type {string}
     * @memberof RoleInsightsSummaryBeta
     */
    'lastGenerated'?: string;
    /**
     * The number of entitlements included in roles (vs free radicals).
     * @type {number}
     * @memberof RoleInsightsSummaryBeta
     */
    'entitlementsIncludedInRoles'?: number;
    /**
     * The total number of entitlements.
     * @type {number}
     * @memberof RoleInsightsSummaryBeta
     */
    'totalNumberOfEntitlements'?: number;
    /**
     * The number of identities in roles vs. identities with just entitlements and not in roles.
     * @type {number}
     * @memberof RoleInsightsSummaryBeta
     */
    'identitiesWithAccessViaRoles'?: number;
    /**
     * The total number of identities.
     * @type {number}
     * @memberof RoleInsightsSummaryBeta
     */
    'totalNumberOfIdentities'?: number;
}
/**
 *
 * @export
 * @interface RoleMatchDtoBeta
 */
export interface RoleMatchDtoBeta {
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof RoleMatchDtoBeta
     */
    'roleRef'?: BaseReferenceDtoBeta;
    /**
     *
     * @type {Array<ContextAttributeDtoBeta>}
     * @memberof RoleMatchDtoBeta
     */
    'matchedAttributes'?: Array<ContextAttributeDtoBeta>;
}
/**
 * A reference to an Identity in an IDENTITY_LIST role membership criteria.
 * @export
 * @interface RoleMembershipIdentityBeta
 */
export interface RoleMembershipIdentityBeta {
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof RoleMembershipIdentityBeta
     */
    'type'?: DtoTypeBeta;
    /**
     * Identity id
     * @type {string}
     * @memberof RoleMembershipIdentityBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the Identity.
     * @type {string}
     * @memberof RoleMembershipIdentityBeta
     */
    'name'?: string | null;
    /**
     * User name of the Identity
     * @type {string}
     * @memberof RoleMembershipIdentityBeta
     */
    'aliasName'?: string | null;
}
/**
 * When present, specifies that the Role is to be granted to Identities which either satisfy specific criteria or which are members of a given list of Identities.
 * @export
 * @interface RoleMembershipSelectorBeta
 */
export interface RoleMembershipSelectorBeta {
    /**
     *
     * @type {RoleMembershipSelectorTypeBeta}
     * @memberof RoleMembershipSelectorBeta
     */
    'type'?: RoleMembershipSelectorTypeBeta;
    /**
     *
     * @type {RoleCriteriaLevel1Beta}
     * @memberof RoleMembershipSelectorBeta
     */
    'criteria'?: RoleCriteriaLevel1Beta | null;
    /**
     * Defines role membership as being exclusive to the specified Identities, when type is IDENTITY_LIST.
     * @type {Array<RoleMembershipIdentityBeta>}
     * @memberof RoleMembershipSelectorBeta
     */
    'identities'?: Array<RoleMembershipIdentityBeta> | null;
}
/**
 * This enum characterizes the type of a Role\'s membership selector. Only the following two are fully supported:  STANDARD: Indicates that Role membership is defined in terms of a criteria expression  IDENTITY_LIST: Indicates that Role membership is conferred on the specific identities listed
 * @export
 * @enum {string}
 */
export declare const RoleMembershipSelectorTypeBeta: {
    readonly Standard: "STANDARD";
    readonly IdentityList: "IDENTITY_LIST";
};
export type RoleMembershipSelectorTypeBeta = typeof RoleMembershipSelectorTypeBeta[keyof typeof RoleMembershipSelectorTypeBeta];
/**
 *
 * @export
 * @interface RoleMiningEntitlementBeta
 */
export interface RoleMiningEntitlementBeta {
    /**
     *
     * @type {RoleMiningEntitlementRefBeta}
     * @memberof RoleMiningEntitlementBeta
     */
    'entitlementRef'?: RoleMiningEntitlementRefBeta;
    /**
     * Name of the entitlement
     * @type {string}
     * @memberof RoleMiningEntitlementBeta
     */
    'name'?: string;
    /**
     * Application name of the entitlement
     * @type {string}
     * @memberof RoleMiningEntitlementBeta
     */
    'applicationName'?: string;
    /**
     * The number of identities with this entitlement in a role.
     * @type {number}
     * @memberof RoleMiningEntitlementBeta
     */
    'identityCount'?: number;
    /**
     * The % popularity of this entitlement in a role.
     * @type {number}
     * @memberof RoleMiningEntitlementBeta
     */
    'popularity'?: number;
    /**
     * The % popularity of this entitlement in the org.
     * @type {number}
     * @memberof RoleMiningEntitlementBeta
     */
    'popularityInOrg'?: number;
    /**
     * The ID of the source/application.
     * @type {string}
     * @memberof RoleMiningEntitlementBeta
     */
    'sourceId'?: string;
    /**
     * The status of activity data for the source.   Value is complete or notComplete.
     * @type {string}
     * @memberof RoleMiningEntitlementBeta
     */
    'activitySourceState'?: string | null;
    /**
     * The percentage of identities in the potential role that have usage of the source/application of this entitlement.
     * @type {number}
     * @memberof RoleMiningEntitlementBeta
     */
    'sourceUsagePercent'?: number | null;
}
/**
 *
 * @export
 * @interface RoleMiningEntitlementRefBeta
 */
export interface RoleMiningEntitlementRefBeta {
    /**
     * Id of the entitlement
     * @type {string}
     * @memberof RoleMiningEntitlementRefBeta
     */
    'id'?: string;
    /**
     * Name of the entitlement
     * @type {string}
     * @memberof RoleMiningEntitlementRefBeta
     */
    'name'?: string;
    /**
     * Description forthe entitlement
     * @type {string}
     * @memberof RoleMiningEntitlementRefBeta
     */
    'description'?: string | null;
    /**
     * The entitlement attribute
     * @type {string}
     * @memberof RoleMiningEntitlementRefBeta
     */
    'attribute'?: string;
}
/**
 *
 * @export
 * @interface RoleMiningIdentityBeta
 */
export interface RoleMiningIdentityBeta {
    /**
     * Id of the identity
     * @type {string}
     * @memberof RoleMiningIdentityBeta
     */
    'id'?: string;
    /**
     * Name of the identity
     * @type {string}
     * @memberof RoleMiningIdentityBeta
     */
    'name'?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof RoleMiningIdentityBeta
     */
    'attributes'?: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface RoleMiningIdentityDistributionBeta
 */
export interface RoleMiningIdentityDistributionBeta {
    /**
     * Id of the potential role
     * @type {string}
     * @memberof RoleMiningIdentityDistributionBeta
     */
    'attributeName'?: string;
    /**
     *
     * @type {Array<{ [key: string]: string; }>}
     * @memberof RoleMiningIdentityDistributionBeta
     */
    'distribution'?: Array<{
        [key: string]: string;
    }>;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleApplicationBeta
 */
export interface RoleMiningPotentialRoleApplicationBeta {
    /**
     * Id of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleApplicationBeta
     */
    'id'?: string;
    /**
     * Name of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleApplicationBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleBeta
 */
export interface RoleMiningPotentialRoleBeta {
    /**
     *
     * @type {RoleMiningSessionResponseCreatedByBeta}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'createdBy'?: RoleMiningSessionResponseCreatedByBeta;
    /**
     * The density of a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'density'?: number;
    /**
     * The description of a potential role.
     * @type {string}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'description'?: string | null;
    /**
     * The number of entitlements in a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'entitlementCount'?: number;
    /**
     * The list of entitlement ids to be excluded.
     * @type {Array<string>}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'excludedEntitlements'?: Array<string> | null;
    /**
     * The freshness of a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'freshness'?: number;
    /**
     * The number of identities in a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'identityCount'?: number;
    /**
     * Identity attribute distribution.
     * @type {Array<RoleMiningIdentityDistributionBeta>}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'identityDistribution'?: Array<RoleMiningIdentityDistributionBeta> | null;
    /**
     * The list of ids in a potential role.
     * @type {Array<string>}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'identityIds'?: Array<string>;
    /**
     * Name of the potential role.
     * @type {string}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'name'?: string;
    /**
     *
     * @type {RoleMiningPotentialRoleProvisionStateBeta}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'provisionState'?: RoleMiningPotentialRoleProvisionStateBeta;
    /**
     * The quality of a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'quality'?: number;
    /**
     * The roleId of a potential role.
     * @type {string}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'roleId'?: string | null;
    /**
     * The potential role\'s saved status.
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'saved'?: boolean;
    /**
     *
     * @type {RoleMiningSessionParametersDtoBeta}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'session'?: RoleMiningSessionParametersDtoBeta;
    /**
     *
     * @type {RoleMiningRoleTypeBeta}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'type'?: RoleMiningRoleTypeBeta;
    /**
     * Id of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'id'?: string;
    /**
     * The date-time when this potential role was created.
     * @type {string}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'createdDate'?: string;
    /**
     * The date-time when this potential role was modified.
     * @type {string}
     * @memberof RoleMiningPotentialRoleBeta
     */
    'modifiedDate'?: string;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleEditEntitlementsBeta
 */
export interface RoleMiningPotentialRoleEditEntitlementsBeta {
    /**
     * The list of entitlement ids to be edited
     * @type {Array<string>}
     * @memberof RoleMiningPotentialRoleEditEntitlementsBeta
     */
    'ids'?: Array<string>;
    /**
     * If true, add ids to be exclusion list. If false, remove ids from the exclusion list.
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleEditEntitlementsBeta
     */
    'exclude'?: boolean;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleExportRequestBeta
 */
export interface RoleMiningPotentialRoleExportRequestBeta {
    /**
     * The minimum popularity among identities in the role which an entitlement must have to be included in the report
     * @type {number}
     * @memberof RoleMiningPotentialRoleExportRequestBeta
     */
    'minEntitlementPopularity'?: number;
    /**
     * If false, do not include entitlements that are highly popular among the entire orginization
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleExportRequestBeta
     */
    'includeCommonAccess'?: boolean;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleExportResponseAllOfBeta
 */
export interface RoleMiningPotentialRoleExportResponseAllOfBeta {
    /**
     * ID used to reference this export
     * @type {string}
     * @memberof RoleMiningPotentialRoleExportResponseAllOfBeta
     */
    'exportId'?: string;
    /**
     *
     * @type {RoleMiningPotentialRoleExportStateBeta}
     * @memberof RoleMiningPotentialRoleExportResponseAllOfBeta
     */
    'status'?: RoleMiningPotentialRoleExportStateBeta;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleExportResponseBeta
 */
export interface RoleMiningPotentialRoleExportResponseBeta {
    /**
     * The minimum popularity among identities in the role which an entitlement must have to be included in the report
     * @type {number}
     * @memberof RoleMiningPotentialRoleExportResponseBeta
     */
    'minEntitlementPopularity'?: number;
    /**
     * If false, do not include entitlements that are highly popular among the entire orginization
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleExportResponseBeta
     */
    'includeCommonAccess'?: boolean;
    /**
     * ID used to reference this export
     * @type {string}
     * @memberof RoleMiningPotentialRoleExportResponseBeta
     */
    'exportId'?: string;
    /**
     *
     * @type {RoleMiningPotentialRoleExportStateBeta}
     * @memberof RoleMiningPotentialRoleExportResponseBeta
     */
    'status'?: RoleMiningPotentialRoleExportStateBeta;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const RoleMiningPotentialRoleExportStateBeta: {
    readonly Queued: "QUEUED";
    readonly InProgress: "IN_PROGRESS";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type RoleMiningPotentialRoleExportStateBeta = typeof RoleMiningPotentialRoleExportStateBeta[keyof typeof RoleMiningPotentialRoleExportStateBeta];
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleProvisionRequestBeta
 */
export interface RoleMiningPotentialRoleProvisionRequestBeta {
    /**
     * Name of the new role being created
     * @type {string}
     * @memberof RoleMiningPotentialRoleProvisionRequestBeta
     */
    'roleName'?: string;
    /**
     * Short description of the new role being created
     * @type {string}
     * @memberof RoleMiningPotentialRoleProvisionRequestBeta
     */
    'roleDescription'?: string;
    /**
     * ID of the identity that will own this role
     * @type {string}
     * @memberof RoleMiningPotentialRoleProvisionRequestBeta
     */
    'ownerId'?: string;
    /**
     * When true, create access requests for the identities associated with the potential role
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleProvisionRequestBeta
     */
    'includeIdentities'?: boolean;
    /**
     * When true, assign entitlements directly to the role; otherwise, create access profiles containing the entitlements
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleProvisionRequestBeta
     */
    'directlyAssignedEntitlements'?: boolean;
}
/**
 * Provision state
 * @export
 * @enum {string}
 */
export declare const RoleMiningPotentialRoleProvisionStateBeta: {
    readonly Potential: "POTENTIAL";
    readonly Pending: "PENDING";
    readonly Complete: "COMPLETE";
    readonly Failed: "FAILED";
};
export type RoleMiningPotentialRoleProvisionStateBeta = typeof RoleMiningPotentialRoleProvisionStateBeta[keyof typeof RoleMiningPotentialRoleProvisionStateBeta];
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleRefBeta
 */
export interface RoleMiningPotentialRoleRefBeta {
    /**
     * Id of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleRefBeta
     */
    'id'?: string;
    /**
     * Name of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleRefBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleSourceUsageBeta
 */
export interface RoleMiningPotentialRoleSourceUsageBeta {
    /**
     * The identity ID
     * @type {string}
     * @memberof RoleMiningPotentialRoleSourceUsageBeta
     */
    'id'?: string;
    /**
     * Display name for the identity
     * @type {string}
     * @memberof RoleMiningPotentialRoleSourceUsageBeta
     */
    'displayName'?: string;
    /**
     * Email address for the identity
     * @type {string}
     * @memberof RoleMiningPotentialRoleSourceUsageBeta
     */
    'email'?: string;
    /**
     * The number of days there has been usage of the source by the identity.
     * @type {number}
     * @memberof RoleMiningPotentialRoleSourceUsageBeta
     */
    'usageCount'?: number;
}
/**
 *
 * @export
 * @interface RoleMiningPotentialRoleSummaryBeta
 */
export interface RoleMiningPotentialRoleSummaryBeta {
    /**
     * Id of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'id'?: string;
    /**
     * Name of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'name'?: string;
    /**
     *
     * @type {RoleMiningPotentialRoleRefBeta}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'potentialRoleRef'?: RoleMiningPotentialRoleRefBeta;
    /**
     * The number of identities in a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'identityCount'?: number;
    /**
     * The number of entitlements in a potential role.
     * @type {number}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'entitlementCount'?: number;
    /**
     * The status for this identity group which can be \"REQUESTED\" or \"OBTAINED\"
     * @type {string}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'identityGroupStatus'?: string;
    /**
     *
     * @type {RoleMiningPotentialRoleProvisionStateBeta}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'provisionState'?: RoleMiningPotentialRoleProvisionStateBeta;
    /**
     * ID of the provisioned role in IIQ or IDN.  Null if this potential role has not been provisioned.
     * @type {string}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'roleId'?: string | null;
    /**
     * The density metric (0-100) of this potential role. Higher density values indicate higher similarity amongst the identities.
     * @type {number}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'density'?: number;
    /**
     * The freshness metric (0-100) of this potential role. Higher freshness values indicate this potential role is more distinctive compared to existing roles.
     * @type {number}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'freshness'?: number;
    /**
     * The quality metric (0-100) of this potential role. Higher quality values indicate this potential role has high density and freshness.
     * @type {number}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'quality'?: number;
    /**
     *
     * @type {RoleMiningRoleTypeBeta}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'type'?: RoleMiningRoleTypeBeta;
    /**
     *
     * @type {RoleMiningPotentialRoleSummaryCreatedByBeta}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'createdBy'?: RoleMiningPotentialRoleSummaryCreatedByBeta;
    /**
     * The date-time when this potential role was created.
     * @type {string}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'createdDate'?: string;
    /**
     * The potential role\'s saved status
     * @type {boolean}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'saved'?: boolean;
    /**
     * Description of the potential role
     * @type {string}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {RoleMiningSessionParametersDtoBeta}
     * @memberof RoleMiningPotentialRoleSummaryBeta
     */
    'session'?: RoleMiningSessionParametersDtoBeta;
}
/**
 * @type RoleMiningPotentialRoleSummaryCreatedByBeta
 * The potential role created by details
 * @export
 */
export type RoleMiningPotentialRoleSummaryCreatedByBeta = EntityCreatedByDTOBeta | string;
/**
 * Role type
 * @export
 * @enum {string}
 */
export declare const RoleMiningRoleTypeBeta: {
    readonly Specialized: "SPECIALIZED";
    readonly Common: "COMMON";
};
export type RoleMiningRoleTypeBeta = typeof RoleMiningRoleTypeBeta[keyof typeof RoleMiningRoleTypeBeta];
/**
 *
 * @export
 * @interface RoleMiningSessionDraftRoleDtoBeta
 */
export interface RoleMiningSessionDraftRoleDtoBeta {
    /**
     * Name of the draft role
     * @type {string}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'name'?: string;
    /**
     * Draft role description
     * @type {string}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'description'?: string;
    /**
     * The list of identities for this role mining session.
     * @type {Array<string>}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'identityIds'?: Array<string>;
    /**
     * The list of entitlement ids for this role mining session.
     * @type {Array<string>}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'entitlementIds'?: Array<string>;
    /**
     * The list of excluded entitlement ids.
     * @type {Array<string>}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'excludedEntitlements'?: Array<string>;
    /**
     * Last modified date
     * @type {string}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'modified'?: string;
    /**
     *
     * @type {RoleMiningRoleTypeBeta}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'type'?: RoleMiningRoleTypeBeta;
    /**
     * Id of the potential draft role
     * @type {string}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'id'?: string;
    /**
     * The date-time when this potential draft role was created.
     * @type {string}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'createdDate'?: string;
    /**
     * The date-time when this potential draft role was modified.
     * @type {string}
     * @memberof RoleMiningSessionDraftRoleDtoBeta
     */
    'modifiedDate'?: string;
}
/**
 *
 * @export
 * @interface RoleMiningSessionDtoBeta
 */
export interface RoleMiningSessionDtoBeta {
    /**
     *
     * @type {RoleMiningSessionScopeBeta}
     * @memberof RoleMiningSessionDtoBeta
     */
    'scope'?: RoleMiningSessionScopeBeta;
    /**
     * The prune threshold to be used or null to calculate prescribedPruneThreshold
     * @type {number}
     * @memberof RoleMiningSessionDtoBeta
     */
    'pruneThreshold'?: number | null;
    /**
     * The calculated prescribedPruneThreshold
     * @type {number}
     * @memberof RoleMiningSessionDtoBeta
     */
    'prescribedPruneThreshold'?: number | null;
    /**
     * Minimum number of identities in a potential role
     * @type {number}
     * @memberof RoleMiningSessionDtoBeta
     */
    'minNumIdentitiesInPotentialRole'?: number | null;
    /**
     * Number of potential roles
     * @type {number}
     * @memberof RoleMiningSessionDtoBeta
     */
    'potentialRoleCount'?: number;
    /**
     * Number of potential roles ready
     * @type {number}
     * @memberof RoleMiningSessionDtoBeta
     */
    'potentialRolesReadyCount'?: number;
    /**
     *
     * @type {RoleMiningRoleTypeBeta}
     * @memberof RoleMiningSessionDtoBeta
     */
    'type'?: RoleMiningRoleTypeBeta;
    /**
     * The id of the user who will receive an email about the role mining session
     * @type {string}
     * @memberof RoleMiningSessionDtoBeta
     */
    'emailRecipientId'?: string | null;
    /**
     * Number of identities in the population which meet the search criteria or identity list provided
     * @type {number}
     * @memberof RoleMiningSessionDtoBeta
     */
    'identityCount'?: number;
    /**
     * The session\'s saved status
     * @type {boolean}
     * @memberof RoleMiningSessionDtoBeta
     */
    'saved'?: boolean;
    /**
     * The session\'s saved name
     * @type {string}
     * @memberof RoleMiningSessionDtoBeta
     */
    'name'?: string | null;
}
/**
 *
 * @export
 * @interface RoleMiningSessionParametersDtoBeta
 */
export interface RoleMiningSessionParametersDtoBeta {
    /**
     * The ID of the role mining session
     * @type {string}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'id'?: string;
    /**
     * The session\'s saved name
     * @type {string}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'name'?: string | null;
    /**
     * Minimum number of identities in a potential role
     * @type {number}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'minNumIdentitiesInPotentialRole'?: number | null;
    /**
     * The prune threshold to be used or null to calculate prescribedPruneThreshold
     * @type {number}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'pruneThreshold'?: number | null;
    /**
     * The session\'s saved status
     * @type {boolean}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'saved'?: boolean;
    /**
     *
     * @type {RoleMiningSessionScopeBeta}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'scope'?: RoleMiningSessionScopeBeta;
    /**
     *
     * @type {RoleMiningRoleTypeBeta}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'type'?: RoleMiningRoleTypeBeta;
    /**
     *
     * @type {RoleMiningSessionStateBeta}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'state'?: RoleMiningSessionStateBeta;
    /**
     *
     * @type {RoleMiningSessionScopingMethodBeta}
     * @memberof RoleMiningSessionParametersDtoBeta
     */
    'scopingMethod'?: RoleMiningSessionScopingMethodBeta;
}
/**
 *
 * @export
 * @interface RoleMiningSessionResponseBeta
 */
export interface RoleMiningSessionResponseBeta {
    /**
     *
     * @type {RoleMiningSessionScopeBeta}
     * @memberof RoleMiningSessionResponseBeta
     */
    'scope'?: RoleMiningSessionScopeBeta;
    /**
     * Minimum number of identities in a potential role
     * @type {number}
     * @memberof RoleMiningSessionResponseBeta
     */
    'minNumIdentitiesInPotentialRole'?: number | null;
    /**
     * The scoping method of the role mining session
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'scopingMethod'?: string | null;
    /**
     * The computed (or prescribed) prune threshold for this session
     * @type {number}
     * @memberof RoleMiningSessionResponseBeta
     */
    'prescribedPruneThreshold'?: number | null;
    /**
     * The prune threshold to be used for this role mining session
     * @type {number}
     * @memberof RoleMiningSessionResponseBeta
     */
    'pruneThreshold'?: number | null;
    /**
     * The number of potential roles
     * @type {number}
     * @memberof RoleMiningSessionResponseBeta
     */
    'potentialRoleCount'?: number;
    /**
     * The number of potential roles which have completed processing
     * @type {number}
     * @memberof RoleMiningSessionResponseBeta
     */
    'potentialRolesReadyCount'?: number;
    /**
     *
     * @type {RoleMiningSessionStatusBeta}
     * @memberof RoleMiningSessionResponseBeta
     */
    'status'?: RoleMiningSessionStatusBeta;
    /**
     * The id of the user who will receive an email about the role mining session
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'emailRecipientId'?: string | null;
    /**
     *
     * @type {RoleMiningSessionResponseCreatedByBeta}
     * @memberof RoleMiningSessionResponseBeta
     */
    'createdBy'?: RoleMiningSessionResponseCreatedByBeta;
    /**
     * The number of identities
     * @type {number}
     * @memberof RoleMiningSessionResponseBeta
     */
    'identityCount'?: number;
    /**
     * The session\'s saved status
     * @type {boolean}
     * @memberof RoleMiningSessionResponseBeta
     */
    'saved'?: boolean;
    /**
     * The session\'s saved name
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'name'?: string | null;
    /**
     * The data file path of the role mining session
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'dataFilePath'?: string | null;
    /**
     * Session Id for this role mining session
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'id'?: string;
    /**
     * The date-time when this role mining session was created.
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'createdDate'?: string;
    /**
     * The date-time when this role mining session was completed.
     * @type {string}
     * @memberof RoleMiningSessionResponseBeta
     */
    'modifiedDate'?: string;
    /**
     *
     * @type {RoleMiningRoleTypeBeta}
     * @memberof RoleMiningSessionResponseBeta
     */
    'type'?: RoleMiningRoleTypeBeta;
}
/**
 * @type RoleMiningSessionResponseCreatedByBeta
 * The session created by details
 * @export
 */
export type RoleMiningSessionResponseCreatedByBeta = EntityCreatedByDTOBeta | string;
/**
 *
 * @export
 * @interface RoleMiningSessionScopeBeta
 */
export interface RoleMiningSessionScopeBeta {
    /**
     * The list of identities for this role mining session.
     * @type {Array<string>}
     * @memberof RoleMiningSessionScopeBeta
     */
    'identityIds'?: Array<string>;
    /**
     * The \"search\" criteria that produces the list of identities for this role mining session.
     * @type {string}
     * @memberof RoleMiningSessionScopeBeta
     */
    'criteria'?: string | null;
    /**
     * The filter criteria for this role mining session.
     * @type {Array<object>}
     * @memberof RoleMiningSessionScopeBeta
     */
    'attributeFilterCriteria'?: Array<object> | null;
}
/**
 * The scoping method used in the current role mining session.
 * @export
 * @enum {string}
 */
export declare const RoleMiningSessionScopingMethodBeta: {
    readonly Manual: "MANUAL";
    readonly AutoRm: "AUTO_RM";
};
export type RoleMiningSessionScopingMethodBeta = typeof RoleMiningSessionScopingMethodBeta[keyof typeof RoleMiningSessionScopingMethodBeta];
/**
 * Role mining session status
 * @export
 * @enum {string}
 */
export declare const RoleMiningSessionStateBeta: {
    readonly Created: "CREATED";
    readonly Updated: "UPDATED";
    readonly IdentitiesObtained: "IDENTITIES_OBTAINED";
    readonly PruneThresholdObtained: "PRUNE_THRESHOLD_OBTAINED";
    readonly PotentialRolesProcessing: "POTENTIAL_ROLES_PROCESSING";
    readonly PotentialRolesCreated: "POTENTIAL_ROLES_CREATED";
};
export type RoleMiningSessionStateBeta = typeof RoleMiningSessionStateBeta[keyof typeof RoleMiningSessionStateBeta];
/**
 *
 * @export
 * @interface RoleMiningSessionStatusBeta
 */
export interface RoleMiningSessionStatusBeta {
    /**
     *
     * @type {RoleMiningSessionStateBeta}
     * @memberof RoleMiningSessionStatusBeta
     */
    'state'?: RoleMiningSessionStateBeta;
}
/**
 *
 * @export
 * @interface RoleTargetDtoBeta
 */
export interface RoleTargetDtoBeta {
    /**
     *
     * @type {BaseReferenceDtoBeta}
     * @memberof RoleTargetDtoBeta
     */
    'source'?: BaseReferenceDtoBeta;
    /**
     *
     * @type {AccountInfoDtoBeta}
     * @memberof RoleTargetDtoBeta
     */
    'accountInfo'?: AccountInfoDtoBeta;
    /**
     * Specific role name for this target if using multiple accounts
     * @type {string}
     * @memberof RoleTargetDtoBeta
     */
    'roleName'?: string;
}
/**
 * @type RuleBeta
 * @export
 */
export type RuleBeta = GenerateRandomStringBeta | GetReferenceIdentityAttributeBeta | TransformRuleBeta;
/**
 *
 * @export
 * @interface SavedSearchCompleteBeta
 */
export interface SavedSearchCompleteBeta {
    /**
     * A name for the report file.
     * @type {string}
     * @memberof SavedSearchCompleteBeta
     */
    'fileName': string;
    /**
     * The email address of the identity that owns the saved search.
     * @type {string}
     * @memberof SavedSearchCompleteBeta
     */
    'ownerEmail': string;
    /**
     * The name of the identity that owns the saved search.
     * @type {string}
     * @memberof SavedSearchCompleteBeta
     */
    'ownerName': string;
    /**
     * The search query that was used to generate the report.
     * @type {string}
     * @memberof SavedSearchCompleteBeta
     */
    'query': string;
    /**
     * The name of the saved search.
     * @type {string}
     * @memberof SavedSearchCompleteBeta
     */
    'searchName': string;
    /**
     *
     * @type {SavedSearchCompleteSearchResultsBeta}
     * @memberof SavedSearchCompleteBeta
     */
    'searchResults': SavedSearchCompleteSearchResultsBeta;
    /**
     * The Amazon S3 URL to download the report from.
     * @type {string}
     * @memberof SavedSearchCompleteBeta
     */
    'signedS3Url': string;
}
/**
 * A table of accounts that match the search criteria.
 * @export
 * @interface SavedSearchCompleteSearchResultsAccountBeta
 */
export interface SavedSearchCompleteSearchResultsAccountBeta {
    /**
     * The number of rows in the table.
     * @type {string}
     * @memberof SavedSearchCompleteSearchResultsAccountBeta
     */
    'count': string;
    /**
     * The type of object represented in the table.
     * @type {string}
     * @memberof SavedSearchCompleteSearchResultsAccountBeta
     */
    'noun': string;
    /**
     * A sample of the data in the table.
     * @type {Array<Array<string>>}
     * @memberof SavedSearchCompleteSearchResultsAccountBeta
     */
    'preview': Array<Array<string>>;
}
/**
 * A preview of the search results for each object type. This includes a count as well as headers, and the first several rows of data, per object type.
 * @export
 * @interface SavedSearchCompleteSearchResultsBeta
 */
export interface SavedSearchCompleteSearchResultsBeta {
    /**
     *
     * @type {SavedSearchCompleteSearchResultsAccountBeta}
     * @memberof SavedSearchCompleteSearchResultsBeta
     */
    'Account'?: SavedSearchCompleteSearchResultsAccountBeta | null;
    /**
     *
     * @type {SavedSearchCompleteSearchResultsEntitlementBeta}
     * @memberof SavedSearchCompleteSearchResultsBeta
     */
    'Entitlement'?: SavedSearchCompleteSearchResultsEntitlementBeta | null;
    /**
     *
     * @type {SavedSearchCompleteSearchResultsIdentityBeta}
     * @memberof SavedSearchCompleteSearchResultsBeta
     */
    'Identity'?: SavedSearchCompleteSearchResultsIdentityBeta | null;
}
/**
 * A table of entitlements that match the search criteria.
 * @export
 * @interface SavedSearchCompleteSearchResultsEntitlementBeta
 */
export interface SavedSearchCompleteSearchResultsEntitlementBeta {
    /**
     * The number of rows in the table.
     * @type {string}
     * @memberof SavedSearchCompleteSearchResultsEntitlementBeta
     */
    'count': string;
    /**
     * The type of object represented in the table.
     * @type {string}
     * @memberof SavedSearchCompleteSearchResultsEntitlementBeta
     */
    'noun': string;
    /**
     * A sample of the data in the table.
     * @type {Array<Array<string>>}
     * @memberof SavedSearchCompleteSearchResultsEntitlementBeta
     */
    'preview': Array<Array<string>>;
}
/**
 * A table of identities that match the search criteria.
 * @export
 * @interface SavedSearchCompleteSearchResultsIdentityBeta
 */
export interface SavedSearchCompleteSearchResultsIdentityBeta {
    /**
     * The number of rows in the table.
     * @type {string}
     * @memberof SavedSearchCompleteSearchResultsIdentityBeta
     */
    'count': string;
    /**
     * The type of object represented in the table.
     * @type {string}
     * @memberof SavedSearchCompleteSearchResultsIdentityBeta
     */
    'noun': string;
    /**
     * A sample of the data in the table.
     * @type {Array<Array<string>>}
     * @memberof SavedSearchCompleteSearchResultsIdentityBeta
     */
    'preview': Array<Array<string>>;
}
/**
 * The schedule information.
 * @export
 * @interface Schedule1Beta
 */
export interface Schedule1Beta {
    /**
     *
     * @type {ScheduleTypeBeta}
     * @memberof Schedule1Beta
     */
    'type': ScheduleTypeBeta;
    /**
     *
     * @type {Schedule1MonthsBeta}
     * @memberof Schedule1Beta
     */
    'months'?: Schedule1MonthsBeta;
    /**
     *
     * @type {Schedule1DaysBeta}
     * @memberof Schedule1Beta
     */
    'days'?: Schedule1DaysBeta;
    /**
     *
     * @type {Schedule1HoursBeta}
     * @memberof Schedule1Beta
     */
    'hours': Schedule1HoursBeta;
    /**
     * A date-time in ISO-8601 format
     * @type {string}
     * @memberof Schedule1Beta
     */
    'expiration'?: string | null;
    /**
     * The canonical TZ identifier the schedule will run in (ex. America/New_York).  If no timezone is specified, the org\'s default timezone is used.
     * @type {string}
     * @memberof Schedule1Beta
     */
    'timeZoneId'?: string | null;
}
/**
 *
 * @export
 * @interface Schedule1DaysBeta
 */
export interface Schedule1DaysBeta {
    /**
     *
     * @type {SelectorTypeBeta}
     * @memberof Schedule1DaysBeta
     */
    'type': SelectorTypeBeta;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Schedule1DaysBeta
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Schedule1DaysBeta
     */
    'interval'?: number | null;
}
/**
 *
 * @export
 * @interface Schedule1HoursBeta
 */
export interface Schedule1HoursBeta {
    /**
     *
     * @type {SelectorTypeBeta}
     * @memberof Schedule1HoursBeta
     */
    'type': SelectorTypeBeta;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Schedule1HoursBeta
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Schedule1HoursBeta
     */
    'interval'?: number | null;
}
/**
 *
 * @export
 * @interface Schedule1MonthsBeta
 */
export interface Schedule1MonthsBeta {
    /**
     *
     * @type {SelectorTypeBeta}
     * @memberof Schedule1MonthsBeta
     */
    'type': SelectorTypeBeta;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof Schedule1MonthsBeta
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof Schedule1MonthsBeta
     */
    'interval'?: number | null;
}
/**
 *
 * @export
 * @interface ScheduleBeta
 */
export interface ScheduleBeta {
    /**
     * Determines the overall schedule cadence. In general, all time period fields smaller than the chosen type can be configured. For example, a DAILY schedule can have \'hours\' set, but not \'days\'; a WEEKLY schedule can have both \'hours\' and \'days\' set.
     * @type {string}
     * @memberof ScheduleBeta
     */
    'type': ScheduleBetaTypeEnum;
    /**
     *
     * @type {ScheduleMonthsBeta}
     * @memberof ScheduleBeta
     */
    'months'?: ScheduleMonthsBeta;
    /**
     *
     * @type {ScheduleDaysBeta}
     * @memberof ScheduleBeta
     */
    'days'?: ScheduleDaysBeta;
    /**
     *
     * @type {ScheduleHoursBeta}
     * @memberof ScheduleBeta
     */
    'hours': ScheduleHoursBeta;
    /**
     * Specifies the time after which this schedule will no longer occur.
     * @type {string}
     * @memberof ScheduleBeta
     */
    'expiration'?: string;
    /**
     * The time zone to use when running the schedule. For instance, if the schedule is scheduled to run at 1AM, and this field is set to \"CST\", the schedule will run at 1AM CST.
     * @type {string}
     * @memberof ScheduleBeta
     */
    'timeZoneId'?: string;
}
export declare const ScheduleBetaTypeEnum: {
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
    readonly Annually: "ANNUALLY";
    readonly Calendar: "CALENDAR";
};
export type ScheduleBetaTypeEnum = typeof ScheduleBetaTypeEnum[keyof typeof ScheduleBetaTypeEnum];
/**
 * Specifies which day(s) a schedule is active for. This is required for all schedule types. The \"values\" field holds different data depending on the type of schedule: * WEEKLY: days of the week (1-7) * MONTHLY: days of the month (1-31, L, L-1...) * ANNUALLY: if the \"months\" field is also set: days of the month (1-31, L, L-1...); otherwise: ISO-8601 dates without year (\"--12-31\") * CALENDAR: ISO-8601 dates (\"2020-12-31\")  Note that CALENDAR only supports the LIST type, and ANNUALLY does not support the RANGE type when provided with ISO-8601 dates without year.  Examples:  On Sundays: * type LIST * values \"1\"  The second to last day of the month: * type LIST * values \"L-1\"  From the 20th to the last day of the month: * type RANGE * values \"20\", \"L\"  Every March 2nd: * type LIST * values \"--03-02\"  On March 2nd, 2021: * type: LIST * values \"2021-03-02\"
 * @export
 * @interface ScheduleDaysBeta
 */
export interface ScheduleDaysBeta {
    /**
     * Enum type to specify days value
     * @type {string}
     * @memberof ScheduleDaysBeta
     */
    'type': ScheduleDaysBetaTypeEnum;
    /**
     * Values of the days based on the enum type mentioned above
     * @type {Array<string>}
     * @memberof ScheduleDaysBeta
     */
    'values': Array<string>;
    /**
     * Interval between the cert generations
     * @type {number}
     * @memberof ScheduleDaysBeta
     */
    'interval'?: number;
}
export declare const ScheduleDaysBetaTypeEnum: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type ScheduleDaysBetaTypeEnum = typeof ScheduleDaysBetaTypeEnum[keyof typeof ScheduleDaysBetaTypeEnum];
/**
 * Specifies which hour(s) a schedule is active for. Examples:  Every three hours starting from 8AM, inclusive: * type LIST * values \"8\" * interval 3  During business hours: * type RANGE * values \"9\", \"5\"  At 5AM, noon, and 5PM: * type LIST * values \"5\", \"12\", \"17\"
 * @export
 * @interface ScheduleHoursBeta
 */
export interface ScheduleHoursBeta {
    /**
     * Enum type to specify hours value
     * @type {string}
     * @memberof ScheduleHoursBeta
     */
    'type': ScheduleHoursBetaTypeEnum;
    /**
     * Values of the days based on the enum type mentioned above
     * @type {Array<string>}
     * @memberof ScheduleHoursBeta
     */
    'values': Array<string>;
    /**
     * Interval between the cert generations
     * @type {number}
     * @memberof ScheduleHoursBeta
     */
    'interval'?: number;
}
export declare const ScheduleHoursBetaTypeEnum: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type ScheduleHoursBetaTypeEnum = typeof ScheduleHoursBetaTypeEnum[keyof typeof ScheduleHoursBetaTypeEnum];
/**
 * Specifies which months of a schedule are active. Only valid for ANNUALLY schedule types. Examples:  On February and March: * type LIST * values \"2\", \"3\"  Every 3 months, starting in January (quarterly): * type LIST * values \"1\" * interval 3  Every two months between July and December: * type RANGE * values \"7\", \"12\" * interval 2
 * @export
 * @interface ScheduleMonthsBeta
 */
export interface ScheduleMonthsBeta {
    /**
     * Enum type to specify months value
     * @type {string}
     * @memberof ScheduleMonthsBeta
     */
    'type': ScheduleMonthsBetaTypeEnum;
    /**
     * Values of the months based on the enum type mentioned above
     * @type {Array<string>}
     * @memberof ScheduleMonthsBeta
     */
    'values': Array<string>;
    /**
     * Interval between the cert generations
     * @type {number}
     * @memberof ScheduleMonthsBeta
     */
    'interval'?: number;
}
export declare const ScheduleMonthsBetaTypeEnum: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type ScheduleMonthsBetaTypeEnum = typeof ScheduleMonthsBetaTypeEnum[keyof typeof ScheduleMonthsBetaTypeEnum];
/**
 * Enum representing the currently supported schedule types.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const ScheduleTypeBeta: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Monthly: "MONTHLY";
    readonly Calendar: "CALENDAR";
    readonly Annually: "ANNUALLY";
};
export type ScheduleTypeBeta = typeof ScheduleTypeBeta[keyof typeof ScheduleTypeBeta];
/**
 * Attributes related to a scheduled trigger
 * @export
 * @interface ScheduledAttributesBeta
 */
export interface ScheduledAttributesBeta {
    /**
     * Frequency of execution
     * @type {string}
     * @memberof ScheduledAttributesBeta
     */
    'frequency': ScheduledAttributesBetaFrequencyEnum;
    /**
     * Time zone identifier
     * @type {string}
     * @memberof ScheduledAttributesBeta
     */
    'timeZone'?: string;
    /**
     *
     * @type {string}
     * @memberof ScheduledAttributesBeta
     */
    'cronString'?: string;
    /**
     * Scheduled days of the week for execution
     * @type {Array<string>}
     * @memberof ScheduledAttributesBeta
     */
    'weeklyDays'?: Array<string>;
    /**
     * Scheduled execution times
     * @type {Array<string>}
     * @memberof ScheduledAttributesBeta
     */
    'weeklyTimes'?: Array<string>;
}
export declare const ScheduledAttributesBetaFrequencyEnum: {
    readonly Daily: "daily";
    readonly Weekly: "weekly";
    readonly Monthly: "monthly";
    readonly Yearly: "yearly";
    readonly CronSchedule: "cronSchedule";
};
export type ScheduledAttributesBetaFrequencyEnum = typeof ScheduledAttributesBetaFrequencyEnum[keyof typeof ScheduledAttributesBetaFrequencyEnum];
/**
 *
 * @export
 * @interface SchemaBeta
 */
export interface SchemaBeta {
    /**
     * The id of the Schema.
     * @type {string}
     * @memberof SchemaBeta
     */
    'id'?: string;
    /**
     * The name of the Schema.
     * @type {string}
     * @memberof SchemaBeta
     */
    'name'?: string;
    /**
     * The name of the object type on the native system that the schema represents.
     * @type {string}
     * @memberof SchemaBeta
     */
    'nativeObjectType'?: string;
    /**
     * The name of the attribute used to calculate the unique identifier for an object in the schema.
     * @type {string}
     * @memberof SchemaBeta
     */
    'identityAttribute'?: string;
    /**
     * The name of the attribute used to calculate the display value for an object in the schema.
     * @type {string}
     * @memberof SchemaBeta
     */
    'displayAttribute'?: string;
    /**
     * The name of the attribute whose values represent other objects in a hierarchy. Only relevant to group schemas.
     * @type {string}
     * @memberof SchemaBeta
     */
    'hierarchyAttribute'?: string;
    /**
     * Flag indicating whether or not the include permissions with the object data when aggregating the schema.
     * @type {boolean}
     * @memberof SchemaBeta
     */
    'includePermissions'?: boolean;
    /**
     * Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure. * PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning. * ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM * ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM * ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM
     * @type {Array<string>}
     * @memberof SchemaBeta
     */
    'features'?: Array<SchemaBetaFeaturesEnum>;
    /**
     * Holds any extra configuration data that the schema may require.
     * @type {object}
     * @memberof SchemaBeta
     */
    'configuration'?: object;
    /**
     * The attribute definitions which form the schema.
     * @type {Array<AttributeDefinitionBeta>}
     * @memberof SchemaBeta
     */
    'attributes'?: Array<AttributeDefinitionBeta>;
    /**
     * The date the Schema was created.
     * @type {string}
     * @memberof SchemaBeta
     */
    'created'?: string;
    /**
     * The date the Schema was last modified.
     * @type {string}
     * @memberof SchemaBeta
     */
    'modified'?: string;
}
export declare const SchemaBetaFeaturesEnum: {
    readonly Authenticate: "AUTHENTICATE";
    readonly Composite: "COMPOSITE";
    readonly DirectPermissions: "DIRECT_PERMISSIONS";
    readonly DiscoverSchema: "DISCOVER_SCHEMA";
    readonly Enable: "ENABLE";
    readonly ManagerLookup: "MANAGER_LOOKUP";
    readonly NoRandomAccess: "NO_RANDOM_ACCESS";
    readonly Proxy: "PROXY";
    readonly Search: "SEARCH";
    readonly Template: "TEMPLATE";
    readonly Unlock: "UNLOCK";
    readonly UnstructuredTargets: "UNSTRUCTURED_TARGETS";
    readonly SharepointTarget: "SHAREPOINT_TARGET";
    readonly Provisioning: "PROVISIONING";
    readonly GroupProvisioning: "GROUP_PROVISIONING";
    readonly SyncProvisioning: "SYNC_PROVISIONING";
    readonly Password: "PASSWORD";
    readonly CurrentPassword: "CURRENT_PASSWORD";
    readonly AccountOnlyRequest: "ACCOUNT_ONLY_REQUEST";
    readonly AdditionalAccountRequest: "ADDITIONAL_ACCOUNT_REQUEST";
    readonly NoAggregation: "NO_AGGREGATION";
    readonly GroupsHaveMembers: "GROUPS_HAVE_MEMBERS";
    readonly NoPermissionsProvisioning: "NO_PERMISSIONS_PROVISIONING";
    readonly NoGroupPermissionsProvisioning: "NO_GROUP_PERMISSIONS_PROVISIONING";
    readonly NoUnstructuredTargetsProvisioning: "NO_UNSTRUCTURED_TARGETS_PROVISIONING";
    readonly NoDirectPermissionsProvisioning: "NO_DIRECT_PERMISSIONS_PROVISIONING";
    readonly PreferUuid: "PREFER_UUID";
    readonly ArmSecurityExtract: "ARM_SECURITY_EXTRACT";
    readonly ArmUtilizationExtract: "ARM_UTILIZATION_EXTRACT";
    readonly ArmChangelogExtract: "ARM_CHANGELOG_EXTRACT";
    readonly UsesUuid: "USES_UUID";
};
export type SchemaBetaFeaturesEnum = typeof SchemaBetaFeaturesEnum[keyof typeof SchemaBetaFeaturesEnum];
/**
 *
 * @export
 * @interface SearchAttributeConfigBeta
 */
export interface SearchAttributeConfigBeta {
    /**
     * Name of the new attribute
     * @type {string}
     * @memberof SearchAttributeConfigBeta
     */
    'name'?: string;
    /**
     * The display name of the new attribute
     * @type {string}
     * @memberof SearchAttributeConfigBeta
     */
    'displayName'?: string;
    /**
     * Map of application id and their associated attribute.
     * @type {object}
     * @memberof SearchAttributeConfigBeta
     */
    'applicationAttributes'?: object;
}
/**
 *
 * @export
 * @interface SearchFormDefinitionsByTenant400ResponseBeta
 */
export interface SearchFormDefinitionsByTenant400ResponseBeta {
    /**
     *
     * @type {string}
     * @memberof SearchFormDefinitionsByTenant400ResponseBeta
     */
    'detailCode'?: string;
    /**
     *
     * @type {Array<ErrorMessageBeta>}
     * @memberof SearchFormDefinitionsByTenant400ResponseBeta
     */
    'messages'?: Array<ErrorMessageBeta>;
    /**
     *
     * @type {number}
     * @memberof SearchFormDefinitionsByTenant400ResponseBeta
     */
    'statusCode'?: number;
    /**
     *
     * @type {string}
     * @memberof SearchFormDefinitionsByTenant400ResponseBeta
     */
    'trackingId'?: string;
}
/**
 *
 * @export
 * @interface SectionAllOfBeta
 */
export interface SectionAllOfBeta {
    /**
     * Label of the section
     * @type {string}
     * @memberof SectionAllOfBeta
     */
    'label'?: string;
    /**
     * List of FormItems. FormItems can be SectionDetails and/or FieldDetails
     * @type {Array<object>}
     * @memberof SectionAllOfBeta
     */
    'formItems'?: Array<object>;
}
/**
 *
 * @export
 * @interface SectionBeta
 */
export interface SectionBeta {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof SectionBeta
     */
    'name'?: string;
    /**
     * Label of the section
     * @type {string}
     * @memberof SectionBeta
     */
    'label'?: string;
    /**
     * List of FormItems. FormItems can be SectionDetails and/or FieldDetails
     * @type {Array<object>}
     * @memberof SectionBeta
     */
    'formItems'?: Array<object>;
}
/**
 *
 * @export
 * @interface SectionDetailsBeta
 */
export interface SectionDetailsBeta {
    /**
     * Name of the FormItem
     * @type {string}
     * @memberof SectionDetailsBeta
     */
    'name'?: string;
    /**
     * Label of the section
     * @type {string}
     * @memberof SectionDetailsBeta
     */
    'label'?: string;
    /**
     * List of FormItems. FormItems can be SectionDetails and/or FieldDetails
     * @type {Array<object>}
     * @memberof SectionDetailsBeta
     */
    'formItems'?: Array<object>;
}
/**
 * Sed Approval Request Body
 * @export
 * @interface SedApprovalBeta
 */
export interface SedApprovalBeta {
    /**
     * List of SED id\'s
     * @type {Array<string>}
     * @memberof SedApprovalBeta
     */
    'items'?: Array<string>;
}
/**
 * SED Approval Status
 * @export
 * @interface SedApprovalStatusBeta
 */
export interface SedApprovalStatusBeta {
    /**
     * failed reason will be display if status is failed
     * @type {string}
     * @memberof SedApprovalStatusBeta
     */
    'failedReason'?: string;
    /**
     * Sed id
     * @type {string}
     * @memberof SedApprovalStatusBeta
     */
    'id'?: string;
    /**
     * SUCCESS | FAILED
     * @type {string}
     * @memberof SedApprovalStatusBeta
     */
    'status'?: string;
}
/**
 * Sed Assignee
 * @export
 * @interface SedAssigneeBeta
 */
export interface SedAssigneeBeta {
    /**
     * Type of assignment When value is PERSONA, the value MUST be SOURCE_OWNER or ENTITLEMENT_OWNER IDENTITY SED_ASSIGNEE_IDENTITY_TYPE GROUP SED_ASSIGNEE_GROUP_TYPE SOURCE_OWNER SED_ASSIGNEE_SOURCE_OWNER_TYPE ENTITLEMENT_OWNER SED_ASSIGNEE_ENTITLEMENT_OWNER_TYPE
     * @type {string}
     * @memberof SedAssigneeBeta
     */
    'type': SedAssigneeBetaTypeEnum;
    /**
     * Identity or Group identifier Empty when using source/entitlement owner personas
     * @type {string}
     * @memberof SedAssigneeBeta
     */
    'value'?: string;
}
export declare const SedAssigneeBetaTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly Group: "GROUP";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly EntitlementOwner: "ENTITLEMENT_OWNER";
};
export type SedAssigneeBetaTypeEnum = typeof SedAssigneeBetaTypeEnum[keyof typeof SedAssigneeBetaTypeEnum];
/**
 * Sed Assignment
 * @export
 * @interface SedAssignmentBeta
 */
export interface SedAssignmentBeta {
    /**
     *
     * @type {SedAssigneeBeta}
     * @memberof SedAssignmentBeta
     */
    'assignee'?: SedAssigneeBeta;
    /**
     * List of SED id\'s
     * @type {Array<string>}
     * @memberof SedAssignmentBeta
     */
    'items'?: Array<string>;
}
/**
 * Sed Assignment Response
 * @export
 * @interface SedAssignmentResponseBeta
 */
export interface SedAssignmentResponseBeta {
    /**
     * BatchId that groups all the ids together
     * @type {string}
     * @memberof SedAssignmentResponseBeta
     */
    'batchId'?: string;
}
/**
 * Sed Batch Request
 * @export
 * @interface SedBatchRequestBeta
 */
export interface SedBatchRequestBeta {
    /**
     * list of entitlement ids
     * @type {Array<string>}
     * @memberof SedBatchRequestBeta
     */
    'entitlements'?: Array<string>;
}
/**
 * Sed Batch Response
 * @export
 * @interface SedBatchResponseBeta
 */
export interface SedBatchResponseBeta {
    /**
     * BatchId that groups all the ids together
     * @type {string}
     * @memberof SedBatchResponseBeta
     */
    'batchId'?: string;
}
/**
 * Sed Batch Stats
 * @export
 * @interface SedBatchStatsBeta
 */
export interface SedBatchStatsBeta {
    /**
     * batch complete
     * @type {boolean}
     * @memberof SedBatchStatsBeta
     */
    'batchComplete'?: boolean;
    /**
     * batch Id
     * @type {string}
     * @memberof SedBatchStatsBeta
     */
    'batchId'?: string;
    /**
     * discovered count
     * @type {number}
     * @memberof SedBatchStatsBeta
     */
    'discoveredCount'?: number;
    /**
     * discovery complete
     * @type {boolean}
     * @memberof SedBatchStatsBeta
     */
    'discoveryComplete'?: boolean;
    /**
     * processed count
     * @type {number}
     * @memberof SedBatchStatsBeta
     */
    'processedCount'?: number;
}
/**
 * Sed Batch Status
 * @export
 * @interface SedBatchStatusBeta
 */
export interface SedBatchStatusBeta {
    /**
     * status of batch
     * @type {string}
     * @memberof SedBatchStatusBeta
     */
    'status'?: string;
}
/**
 * Suggested Entitlement Description
 * @export
 * @interface SedBeta
 */
export interface SedBeta {
    /**
     * name of the entitlement
     * @type {string}
     * @memberof SedBeta
     */
    'Name'?: string;
    /**
     * entitlement approved by
     * @type {string}
     * @memberof SedBeta
     */
    'approved_by'?: string;
    /**
     * entitlement approved type
     * @type {string}
     * @memberof SedBeta
     */
    'approved_type'?: string;
    /**
     * entitlement approved then
     * @type {string}
     * @memberof SedBeta
     */
    'approved_when'?: string;
    /**
     * entitlement attribute
     * @type {string}
     * @memberof SedBeta
     */
    'attribute'?: string;
    /**
     * description of entitlement
     * @type {string}
     * @memberof SedBeta
     */
    'description'?: string;
    /**
     * entitlement display name
     * @type {string}
     * @memberof SedBeta
     */
    'displayName'?: string;
    /**
     * sed id
     * @type {string}
     * @memberof SedBeta
     */
    'id'?: string;
    /**
     * entitlement source id
     * @type {string}
     * @memberof SedBeta
     */
    'sourceId'?: string;
    /**
     * entitlement source name
     * @type {string}
     * @memberof SedBeta
     */
    'sourceName'?: string;
    /**
     * entitlement status
     * @type {string}
     * @memberof SedBeta
     */
    'status'?: string;
    /**
     * llm suggested entitlement description
     * @type {string}
     * @memberof SedBeta
     */
    'suggestedDescription'?: string;
    /**
     * entitlement type
     * @type {string}
     * @memberof SedBeta
     */
    'type'?: string;
    /**
     * entitlement value
     * @type {string}
     * @memberof SedBeta
     */
    'value'?: string;
}
/**
 * Patch for Suggested Entitlement Description
 * @export
 * @interface SedPatchBeta
 */
export interface SedPatchBeta {
    /**
     * desired operation
     * @type {string}
     * @memberof SedPatchBeta
     */
    'op'?: string;
    /**
     * field to be patched
     * @type {string}
     * @memberof SedPatchBeta
     */
    'path'?: string;
    /**
     * value to replace with
     * @type {object}
     * @memberof SedPatchBeta
     */
    'value'?: object;
}
/**
 *
 * @export
 * @interface SegmentBeta
 */
export interface SegmentBeta {
    /**
     * The segment\'s ID.
     * @type {string}
     * @memberof SegmentBeta
     */
    'id'?: string;
    /**
     * The segment\'s business name.
     * @type {string}
     * @memberof SegmentBeta
     */
    'name'?: string;
    /**
     * The time when the segment is created.
     * @type {string}
     * @memberof SegmentBeta
     */
    'created'?: string;
    /**
     * The time when the segment is modified.
     * @type {string}
     * @memberof SegmentBeta
     */
    'modified'?: string;
    /**
     * The segment\'s optional description.
     * @type {string}
     * @memberof SegmentBeta
     */
    'description'?: string;
    /**
     *
     * @type {OwnerReferenceSegmentsBeta}
     * @memberof SegmentBeta
     */
    'owner'?: OwnerReferenceSegmentsBeta | null;
    /**
     *
     * @type {VisibilityCriteriaBeta}
     * @memberof SegmentBeta
     */
    'visibilityCriteria'?: VisibilityCriteriaBeta | null;
    /**
     * This boolean indicates whether the segment is currently active. Inactive segments have no effect.
     * @type {boolean}
     * @memberof SegmentBeta
     */
    'active'?: boolean;
}
/**
 *
 * @export
 * @interface SelectorBeta
 */
export interface SelectorBeta {
    /**
     *
     * @type {SelectorTypeBeta}
     * @memberof SelectorBeta
     */
    'type': SelectorTypeBeta;
    /**
     * The selected values.
     * @type {Array<string>}
     * @memberof SelectorBeta
     */
    'values': Array<string>;
    /**
     * The selected interval for RANGE selectors.
     * @type {number}
     * @memberof SelectorBeta
     */
    'interval'?: number | null;
}
/**
 * Enum representing the currently supported selector types.  LIST - the *values* array contains one or more distinct values.  RANGE - the *values* array contains two values: the start and end of the range, inclusive.  Additional values may be added in the future without notice.
 * @export
 * @enum {string}
 */
export declare const SelectorTypeBeta: {
    readonly List: "LIST";
    readonly Range: "RANGE";
};
export type SelectorTypeBeta = typeof SelectorTypeBeta[keyof typeof SelectorTypeBeta];
/**
 * Self block for imported/exported object.
 * @export
 * @interface SelfImportExportDtoBeta
 */
export interface SelfImportExportDtoBeta {
    /**
     * Imported/exported object\'s DTO type. Import is currently only possible with the IDENTITY_OBJECT_CONFIG, IDENTITY_PROFILE, RULE, SOURCE, TRANSFORM, and TRIGGER_SUBSCRIPTION object types.
     * @type {string}
     * @memberof SelfImportExportDtoBeta
     */
    'type'?: SelfImportExportDtoBetaTypeEnum;
    /**
     * Imported/exported object\'s ID.
     * @type {string}
     * @memberof SelfImportExportDtoBeta
     */
    'id'?: string;
    /**
     * Imported/exported object\'s display name.
     * @type {string}
     * @memberof SelfImportExportDtoBeta
     */
    'name'?: string;
}
export declare const SelfImportExportDtoBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly AccessRequestConfig: "ACCESS_REQUEST_CONFIG";
    readonly AttrSyncSourceConfig: "ATTR_SYNC_SOURCE_CONFIG";
    readonly AuthOrg: "AUTH_ORG";
    readonly CampaignFilter: "CAMPAIGN_FILTER";
    readonly FormDefinition: "FORM_DEFINITION";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly IdentityObjectConfig: "IDENTITY_OBJECT_CONFIG";
    readonly IdentityProfile: "IDENTITY_PROFILE";
    readonly LifecycleState: "LIFECYCLE_STATE";
    readonly NotificationTemplate: "NOTIFICATION_TEMPLATE";
    readonly PasswordPolicy: "PASSWORD_POLICY";
    readonly PasswordSyncGroup: "PASSWORD_SYNC_GROUP";
    readonly PublicIdentitiesConfig: "PUBLIC_IDENTITIES_CONFIG";
    readonly Role: "ROLE";
    readonly Rule: "RULE";
    readonly Segment: "SEGMENT";
    readonly ServiceDeskIntegration: "SERVICE_DESK_INTEGRATION";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
    readonly Tag: "TAG";
    readonly Transform: "TRANSFORM";
    readonly TriggerSubscription: "TRIGGER_SUBSCRIPTION";
    readonly Workflow: "WORKFLOW";
};
export type SelfImportExportDtoBetaTypeEnum = typeof SelfImportExportDtoBetaTypeEnum[keyof typeof SelfImportExportDtoBetaTypeEnum];
/**
 *
 * @export
 * @interface SendAccountVerificationRequestBeta
 */
export interface SendAccountVerificationRequestBeta {
    /**
     * The source name where identity account password should be reset
     * @type {string}
     * @memberof SendAccountVerificationRequestBeta
     */
    'sourceName'?: string | null;
    /**
     * The method to send notification
     * @type {string}
     * @memberof SendAccountVerificationRequestBeta
     */
    'via': SendAccountVerificationRequestBetaViaEnum;
}
export declare const SendAccountVerificationRequestBetaViaEnum: {
    readonly EmailWork: "EMAIL_WORK";
    readonly EmailPersonal: "EMAIL_PERSONAL";
    readonly LinkWork: "LINK_WORK";
    readonly LinkPersonal: "LINK_PERSONAL";
};
export type SendAccountVerificationRequestBetaViaEnum = typeof SendAccountVerificationRequestBetaViaEnum[keyof typeof SendAccountVerificationRequestBetaViaEnum];
/**
 *
 * @export
 * @interface SendTestNotificationRequestDtoBeta
 */
export interface SendTestNotificationRequestDtoBeta {
    /**
     * The template notification key.
     * @type {string}
     * @memberof SendTestNotificationRequestDtoBeta
     */
    'key'?: string;
    /**
     * The notification medium. Has to be one of the following enum values.
     * @type {string}
     * @memberof SendTestNotificationRequestDtoBeta
     */
    'medium'?: SendTestNotificationRequestDtoBetaMediumEnum;
    /**
     * A Json object that denotes the context specific to the template.
     * @type {object}
     * @memberof SendTestNotificationRequestDtoBeta
     */
    'context'?: object;
}
export declare const SendTestNotificationRequestDtoBetaMediumEnum: {
    readonly Email: "EMAIL";
    readonly Slack: "SLACK";
    readonly Teams: "TEAMS";
};
export type SendTestNotificationRequestDtoBetaMediumEnum = typeof SendTestNotificationRequestDtoBetaMediumEnum[keyof typeof SendTestNotificationRequestDtoBetaMediumEnum];
/**
 *
 * @export
 * @interface SendTokenRequestBeta
 */
export interface SendTokenRequestBeta {
    /**
     * User alias from table spt_identity field named \'name\'
     * @type {string}
     * @memberof SendTokenRequestBeta
     */
    'userAlias': string;
    /**
     * Token delivery type
     * @type {string}
     * @memberof SendTokenRequestBeta
     */
    'deliveryType': SendTokenRequestBetaDeliveryTypeEnum;
}
export declare const SendTokenRequestBetaDeliveryTypeEnum: {
    readonly SmsPersonal: "SMS_PERSONAL";
    readonly VoicePersonal: "VOICE_PERSONAL";
    readonly SmsWork: "SMS_WORK";
    readonly VoiceWork: "VOICE_WORK";
    readonly EmailWork: "EMAIL_WORK";
    readonly EmailPersonal: "EMAIL_PERSONAL";
};
export type SendTokenRequestBetaDeliveryTypeEnum = typeof SendTokenRequestBetaDeliveryTypeEnum[keyof typeof SendTokenRequestBetaDeliveryTypeEnum];
/**
 *
 * @export
 * @interface SendTokenResponseBeta
 */
export interface SendTokenResponseBeta {
    /**
     * The token request ID
     * @type {string}
     * @memberof SendTokenResponseBeta
     */
    'requestId'?: string | null;
    /**
     * Status of sending token
     * @type {string}
     * @memberof SendTokenResponseBeta
     */
    'status'?: SendTokenResponseBetaStatusEnum;
    /**
     * Error messages from token send request
     * @type {string}
     * @memberof SendTokenResponseBeta
     */
    'errorMessage'?: string | null;
}
export declare const SendTokenResponseBetaStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
};
export type SendTokenResponseBetaStatusEnum = typeof SendTokenResponseBetaStatusEnum[keyof typeof SendTokenResponseBetaStatusEnum];
/**
 * Service Desk integration\'s specification.
 * @export
 * @interface ServiceDeskIntegrationDtoAllOfBeta
 */
export interface ServiceDeskIntegrationDtoAllOfBeta {
    /**
     * Service Desk integration\'s name. The name must be unique.
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'name': string;
    /**
     * Service Desk integration\'s description.
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'description': string;
    /**
     * Service Desk integration types:  - ServiceNowSDIM - ServiceNow
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'type': string;
    /**
     *
     * @type {OwnerDtoBeta}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'ownerRef'?: OwnerDtoBeta;
    /**
     *
     * @type {SourceClusterDtoBeta}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'clusterRef'?: SourceClusterDtoBeta;
    /**
     * Cluster ID for the Service Desk integration (replaced by clusterRef, retained for backward compatibility).
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     * @deprecated
     */
    'cluster'?: string;
    /**
     * Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility).
     * @type {Array<string>}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     * @deprecated
     */
    'managedSources'?: Array<string>;
    /**
     *
     * @type {ProvisioningConfigBeta}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'provisioningConfig'?: ProvisioningConfigBeta;
    /**
     * Service Desk integration\'s attributes. Validation constraints enforced by the implementation.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {BeforeProvisioningRuleDtoBeta}
     * @memberof ServiceDeskIntegrationDtoAllOfBeta
     */
    'beforeProvisioningRule'?: BeforeProvisioningRuleDtoBeta;
}
/**
 *
 * @export
 * @interface ServiceDeskIntegrationDtoBeta
 */
export interface ServiceDeskIntegrationDtoBeta {
    /**
     * Service Desk integration\'s name. The name must be unique.
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'name': string;
    /**
     * Service Desk integration\'s description.
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'description': string;
    /**
     * Service Desk integration types:  - ServiceNowSDIM - ServiceNow
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'type': string;
    /**
     *
     * @type {OwnerDtoBeta}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'ownerRef'?: OwnerDtoBeta;
    /**
     *
     * @type {SourceClusterDtoBeta}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'clusterRef'?: SourceClusterDtoBeta;
    /**
     * Cluster ID for the Service Desk integration (replaced by clusterRef, retained for backward compatibility).
     * @type {string}
     * @memberof ServiceDeskIntegrationDtoBeta
     * @deprecated
     */
    'cluster'?: string;
    /**
     * Source IDs for the Service Desk integration (replaced by provisioningConfig.managedSResourceRefs, but retained here for backward compatibility).
     * @type {Array<string>}
     * @memberof ServiceDeskIntegrationDtoBeta
     * @deprecated
     */
    'managedSources'?: Array<string>;
    /**
     *
     * @type {ProvisioningConfigBeta}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'provisioningConfig'?: ProvisioningConfigBeta;
    /**
     * Service Desk integration\'s attributes. Validation constraints enforced by the implementation.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {BeforeProvisioningRuleDtoBeta}
     * @memberof ServiceDeskIntegrationDtoBeta
     */
    'beforeProvisioningRule'?: BeforeProvisioningRuleDtoBeta;
}
/**
 * This is the model for a Service Desk integration template, used to create and edit Service Desk Integrations.
 * @export
 * @interface ServiceDeskIntegrationTemplateDtoAllOfBeta
 */
export interface ServiceDeskIntegrationTemplateDtoAllOfBeta {
    /**
     * The \'type\' property specifies the type of the Service Desk integration template.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoAllOfBeta
     */
    'type': string;
    /**
     * The \'attributes\' property value is a map of attributes available for integrations using this Service Desk integration template.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationTemplateDtoAllOfBeta
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {ProvisioningConfigBeta}
     * @memberof ServiceDeskIntegrationTemplateDtoAllOfBeta
     */
    'provisioningConfig': ProvisioningConfigBeta;
}
/**
 *
 * @export
 * @interface ServiceDeskIntegrationTemplateDtoBeta
 */
export interface ServiceDeskIntegrationTemplateDtoBeta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'modified'?: string;
    /**
     * The \'type\' property specifies the type of the Service Desk integration template.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'type': string;
    /**
     * The \'attributes\' property value is a map of attributes available for integrations using this Service Desk integration template.
     * @type {{ [key: string]: any; }}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     *
     * @type {ProvisioningConfigBeta}
     * @memberof ServiceDeskIntegrationTemplateDtoBeta
     */
    'provisioningConfig': ProvisioningConfigBeta;
}
/**
 * This represents a Service Desk Integration template type.
 * @export
 * @interface ServiceDeskIntegrationTemplateTypeBeta
 */
export interface ServiceDeskIntegrationTemplateTypeBeta {
    /**
     * This is the name of the type.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateTypeBeta
     */
    'name'?: string;
    /**
     * This is the type value for the type.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateTypeBeta
     */
    'type': string;
    /**
     * This is the scriptName attribute value for the type.
     * @type {string}
     * @memberof ServiceDeskIntegrationTemplateTypeBeta
     */
    'scriptName': string;
}
/**
 * Source for Service Desk integration template.
 * @export
 * @interface ServiceDeskSourceBeta
 */
export interface ServiceDeskSourceBeta {
    /**
     * DTO type of source for service desk integration template.
     * @type {string}
     * @memberof ServiceDeskSourceBeta
     */
    'type'?: ServiceDeskSourceBetaTypeEnum;
    /**
     * ID of source for service desk integration template.
     * @type {string}
     * @memberof ServiceDeskSourceBeta
     */
    'id'?: string;
    /**
     * Human-readable name of source for service desk integration template.
     * @type {string}
     * @memberof ServiceDeskSourceBeta
     */
    'name'?: string;
}
export declare const ServiceDeskSourceBetaTypeEnum: {
    readonly Source: "SOURCE";
};
export type ServiceDeskSourceBetaTypeEnum = typeof ServiceDeskSourceBetaTypeEnum[keyof typeof ServiceDeskSourceBetaTypeEnum];
/**
 *
 * @export
 * @interface SetIcon200ResponseBeta
 */
export interface SetIcon200ResponseBeta {
    /**
     * url to file with icon
     * @type {string}
     * @memberof SetIcon200ResponseBeta
     */
    'icon'?: string;
}
/**
 *
 * @export
 * @interface SetIconRequestBeta
 */
export interface SetIconRequestBeta {
    /**
     * file with icon. Allowed mime-types [\'image/png\', \'image/jpeg\']
     * @type {any}
     * @memberof SetIconRequestBeta
     */
    'image': any;
}
/**
 * Before provisioning rule of integration
 * @export
 * @interface SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta
 */
export interface SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta {
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta
     */
    'type'?: DtoTypeBeta;
    /**
     * ID of the rule
     * @type {string}
     * @memberof SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the rule
     * @type {string}
     * @memberof SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface SimIntegrationDetailsAllOfBeta
 */
export interface SimIntegrationDetailsAllOfBeta {
    /**
     * The description of the integration
     * @type {string}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'description'?: string;
    /**
     * The integration type
     * @type {string}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'type'?: string;
    /**
     * The attributes map containing the credentials used to configure the integration.
     * @type {object}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'attributes'?: object | null;
    /**
     * The list of sources (managed resources)
     * @type {Array<string>}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'sources'?: Array<string>;
    /**
     * The cluster/proxy
     * @type {string}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'cluster'?: string;
    /**
     * Custom mapping between the integration result and the provisioning result
     * @type {object}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'statusMap'?: object;
    /**
     * Request data to customize desc and body of the created ticket
     * @type {object}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'request'?: object;
    /**
     *
     * @type {SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta}
     * @memberof SimIntegrationDetailsAllOfBeta
     */
    'beforeProvisioningRule'?: SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta;
}
/**
 *
 * @export
 * @interface SimIntegrationDetailsBeta
 */
export interface SimIntegrationDetailsBeta {
    /**
     * System-generated unique ID of the Object
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'id'?: string;
    /**
     * Name of the Object
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'name': string;
    /**
     * Creation date of the Object
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'created'?: string;
    /**
     * Last modification date of the Object
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'modified'?: string;
    /**
     * The description of the integration
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'description'?: string;
    /**
     * The integration type
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'type'?: string;
    /**
     * The attributes map containing the credentials used to configure the integration.
     * @type {object}
     * @memberof SimIntegrationDetailsBeta
     */
    'attributes'?: object | null;
    /**
     * The list of sources (managed resources)
     * @type {Array<string>}
     * @memberof SimIntegrationDetailsBeta
     */
    'sources'?: Array<string>;
    /**
     * The cluster/proxy
     * @type {string}
     * @memberof SimIntegrationDetailsBeta
     */
    'cluster'?: string;
    /**
     * Custom mapping between the integration result and the provisioning result
     * @type {object}
     * @memberof SimIntegrationDetailsBeta
     */
    'statusMap'?: object;
    /**
     * Request data to customize desc and body of the created ticket
     * @type {object}
     * @memberof SimIntegrationDetailsBeta
     */
    'request'?: object;
    /**
     *
     * @type {SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta}
     * @memberof SimIntegrationDetailsBeta
     */
    'beforeProvisioningRule'?: SimIntegrationDetailsAllOfBeforeProvisioningRuleBeta;
}
/**
 *
 * @export
 * @interface SlimcampaignBeta
 */
export interface SlimcampaignBeta {
    /**
     * Id of the campaign
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'id'?: string;
    /**
     * The campaign name. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'name': string;
    /**
     * The campaign description. If this object is part of a template, special formatting applies; see the `/campaign-templates/{id}/generate` endpoint documentation for details.
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'description': string;
    /**
     * The campaign\'s completion deadline.  This date must be in the future in order to activate the campaign.  If you try to activate a campaign with a deadline of today or in the past, you will receive a 400 error response.
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'deadline'?: string;
    /**
     * The type of campaign. Could be extended in the future.
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'type': SlimcampaignBetaTypeEnum;
    /**
     * Enables email notification for this campaign
     * @type {boolean}
     * @memberof SlimcampaignBeta
     */
    'emailNotificationEnabled'?: boolean;
    /**
     * Allows auto revoke for this campaign
     * @type {boolean}
     * @memberof SlimcampaignBeta
     */
    'autoRevokeAllowed'?: boolean;
    /**
     * Enables IAI for this campaign. Accepts true even if the IAI product feature is off. If IAI is turned off then campaigns generated from this template will indicate false. The real value will then be returned if IAI is ever enabled for the org in the future.
     * @type {boolean}
     * @memberof SlimcampaignBeta
     */
    'recommendationsEnabled'?: boolean;
    /**
     * The campaign\'s current status.
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'status'?: SlimcampaignBetaStatusEnum;
    /**
     * The correlatedStatus of the campaign. Only SOURCE_OWNER campaigns can be Uncorrelated. An Uncorrelated certification campaign only includes Uncorrelated identities (An identity is uncorrelated if it has no accounts on an authoritative source).
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'correlatedStatus'?: SlimcampaignBetaCorrelatedStatusEnum;
    /**
     * Created time of the campaign
     * @type {string}
     * @memberof SlimcampaignBeta
     */
    'created'?: string;
    /**
     * The total number of certifications in this campaign.
     * @type {number}
     * @memberof SlimcampaignBeta
     */
    'totalCertifications'?: number;
    /**
     * The number of completed certifications in this campaign.
     * @type {number}
     * @memberof SlimcampaignBeta
     */
    'completedCertifications'?: number;
    /**
     * A list of errors and warnings that have accumulated.
     * @type {Array<CampaignAlertBeta>}
     * @memberof SlimcampaignBeta
     */
    'alerts'?: Array<CampaignAlertBeta>;
}
export declare const SlimcampaignBetaTypeEnum: {
    readonly Manager: "MANAGER";
    readonly SourceOwner: "SOURCE_OWNER";
    readonly Search: "SEARCH";
    readonly RoleComposition: "ROLE_COMPOSITION";
};
export type SlimcampaignBetaTypeEnum = typeof SlimcampaignBetaTypeEnum[keyof typeof SlimcampaignBetaTypeEnum];
export declare const SlimcampaignBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Staged: "STAGED";
    readonly Canceling: "CANCELING";
    readonly Activating: "ACTIVATING";
    readonly Active: "ACTIVE";
    readonly Completing: "COMPLETING";
    readonly Completed: "COMPLETED";
    readonly Error: "ERROR";
    readonly Archived: "ARCHIVED";
};
export type SlimcampaignBetaStatusEnum = typeof SlimcampaignBetaStatusEnum[keyof typeof SlimcampaignBetaStatusEnum];
export declare const SlimcampaignBetaCorrelatedStatusEnum: {
    readonly Correlated: "CORRELATED";
    readonly Uncorrelated: "UNCORRELATED";
};
export type SlimcampaignBetaCorrelatedStatusEnum = typeof SlimcampaignBetaCorrelatedStatusEnum[keyof typeof SlimcampaignBetaCorrelatedStatusEnum];
/**
 * Details of the Entitlement criteria
 * @export
 * @interface SodExemptCriteria1Beta
 */
export interface SodExemptCriteria1Beta {
    /**
     * If the entitlement already belonged to the user or not.
     * @type {boolean}
     * @memberof SodExemptCriteria1Beta
     */
    'existing'?: boolean;
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof SodExemptCriteria1Beta
     */
    'type'?: DtoTypeBeta;
    /**
     * Entitlement ID
     * @type {string}
     * @memberof SodExemptCriteria1Beta
     */
    'id'?: string;
    /**
     * Entitlement name
     * @type {string}
     * @memberof SodExemptCriteria1Beta
     */
    'name'?: string;
}
/**
 * Details of the Entitlement criteria
 * @export
 * @interface SodExemptCriteriaBeta
 */
export interface SodExemptCriteriaBeta {
    /**
     * If the entitlement already belonged to the user or not.
     * @type {boolean}
     * @memberof SodExemptCriteriaBeta
     */
    'existing'?: boolean;
    /**
     *
     * @type {DtoTypeBeta}
     * @memberof SodExemptCriteriaBeta
     */
    'type'?: DtoTypeBeta;
    /**
     * Entitlement ID
     * @type {string}
     * @memberof SodExemptCriteriaBeta
     */
    'id'?: string;
    /**
     * Entitlement name
     * @type {string}
     * @memberof SodExemptCriteriaBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface SodPolicyBeta
 */
export interface SodPolicyBeta {
    /**
     * Policy ID.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'id'?: string;
    /**
     * Policy business name.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'name'?: string;
    /**
     * The time when this SOD policy is created.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'created'?: string;
    /**
     * The time when this SOD policy is modified.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'modified'?: string;
    /**
     * Optional description of the SOD policy.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {SodPolicyOwnerRefBeta}
     * @memberof SodPolicyBeta
     */
    'ownerRef'?: SodPolicyOwnerRefBeta;
    /**
     * Optional external policy reference.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'externalPolicyReference'?: string | null;
    /**
     * Search query of the SOD policy.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'policyQuery'?: string;
    /**
     * Optional compensating controls (Mitigating Controls).
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'compensatingControls'?: string | null;
    /**
     * Optional correction advice.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'correctionAdvice'?: string | null;
    /**
     * Whether the policy is enforced or not.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'state'?: SodPolicyBetaStateEnum;
    /**
     * Tags for the policy object.
     * @type {Array<string>}
     * @memberof SodPolicyBeta
     */
    'tags'?: Array<string>;
    /**
     * Policy\'s creator ID.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'creatorId'?: string;
    /**
     * Policy\'s modifier ID.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'modifierId'?: string | null;
    /**
     *
     * @type {ViolationOwnerAssignmentConfigBeta}
     * @memberof SodPolicyBeta
     */
    'violationOwnerAssignmentConfig'?: ViolationOwnerAssignmentConfigBeta;
    /**
     * Defines whether a policy has been scheduled or not.
     * @type {boolean}
     * @memberof SodPolicyBeta
     */
    'scheduled'?: boolean;
    /**
     * Whether a policy is query based or conflicting access based.
     * @type {string}
     * @memberof SodPolicyBeta
     */
    'type'?: SodPolicyBetaTypeEnum;
    /**
     *
     * @type {SodPolicyConflictingAccessCriteriaBeta}
     * @memberof SodPolicyBeta
     */
    'conflictingAccessCriteria'?: SodPolicyConflictingAccessCriteriaBeta;
}
export declare const SodPolicyBetaStateEnum: {
    readonly Enforced: "ENFORCED";
    readonly NotEnforced: "NOT_ENFORCED";
};
export type SodPolicyBetaStateEnum = typeof SodPolicyBetaStateEnum[keyof typeof SodPolicyBetaStateEnum];
export declare const SodPolicyBetaTypeEnum: {
    readonly General: "GENERAL";
    readonly ConflictingAccessBased: "CONFLICTING_ACCESS_BASED";
};
export type SodPolicyBetaTypeEnum = typeof SodPolicyBetaTypeEnum[keyof typeof SodPolicyBetaTypeEnum];
/**
 *
 * @export
 * @interface SodPolicyConflictingAccessCriteriaBeta
 */
export interface SodPolicyConflictingAccessCriteriaBeta {
    /**
     *
     * @type {AccessCriteriaBeta}
     * @memberof SodPolicyConflictingAccessCriteriaBeta
     */
    'leftCriteria'?: AccessCriteriaBeta;
    /**
     *
     * @type {AccessCriteriaBeta}
     * @memberof SodPolicyConflictingAccessCriteriaBeta
     */
    'rightCriteria'?: AccessCriteriaBeta;
}
/**
 * SOD policy.
 * @export
 * @interface SodPolicyDtoBeta
 */
export interface SodPolicyDtoBeta {
    /**
     * SOD policy DTO type.
     * @type {string}
     * @memberof SodPolicyDtoBeta
     */
    'type'?: SodPolicyDtoBetaTypeEnum;
    /**
     * SOD policy ID.
     * @type {string}
     * @memberof SodPolicyDtoBeta
     */
    'id'?: string;
    /**
     * SOD policy display name.
     * @type {string}
     * @memberof SodPolicyDtoBeta
     */
    'name'?: string;
}
export declare const SodPolicyDtoBetaTypeEnum: {
    readonly SodPolicy: "SOD_POLICY";
};
export type SodPolicyDtoBetaTypeEnum = typeof SodPolicyDtoBetaTypeEnum[keyof typeof SodPolicyDtoBetaTypeEnum];
/**
 * The owner of the SOD policy.
 * @export
 * @interface SodPolicyOwnerRefBeta
 */
export interface SodPolicyOwnerRefBeta {
    /**
     * Owner type.
     * @type {string}
     * @memberof SodPolicyOwnerRefBeta
     */
    'type'?: SodPolicyOwnerRefBetaTypeEnum;
    /**
     * Owner\'s ID.
     * @type {string}
     * @memberof SodPolicyOwnerRefBeta
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof SodPolicyOwnerRefBeta
     */
    'name'?: string;
}
export declare const SodPolicyOwnerRefBetaTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type SodPolicyOwnerRefBetaTypeEnum = typeof SodPolicyOwnerRefBetaTypeEnum[keyof typeof SodPolicyOwnerRefBetaTypeEnum];
/**
 *
 * @export
 * @interface SodPolicyScheduleBeta
 */
export interface SodPolicyScheduleBeta {
    /**
     * SOD Policy schedule name
     * @type {string}
     * @memberof SodPolicyScheduleBeta
     */
    'name'?: string;
    /**
     * The time when this SOD policy schedule is created.
     * @type {string}
     * @memberof SodPolicyScheduleBeta
     */
    'created'?: string;
    /**
     * The time when this SOD policy schedule is modified.
     * @type {string}
     * @memberof SodPolicyScheduleBeta
     */
    'modified'?: string;
    /**
     * SOD Policy schedule description
     * @type {string}
     * @memberof SodPolicyScheduleBeta
     */
    'description'?: string;
    /**
     *
     * @type {Schedule1Beta}
     * @memberof SodPolicyScheduleBeta
     */
    'schedule'?: Schedule1Beta;
    /**
     *
     * @type {Array<SodRecipientBeta>}
     * @memberof SodPolicyScheduleBeta
     */
    'recipients'?: Array<SodRecipientBeta>;
    /**
     * Indicates if empty results need to be emailed
     * @type {boolean}
     * @memberof SodPolicyScheduleBeta
     */
    'emailEmptyResults'?: boolean;
    /**
     * Policy\'s creator ID
     * @type {string}
     * @memberof SodPolicyScheduleBeta
     */
    'creatorId'?: string;
    /**
     * Policy\'s modifier ID
     * @type {string}
     * @memberof SodPolicyScheduleBeta
     */
    'modifierId'?: string;
}
/**
 * SOD policy recipient.
 * @export
 * @interface SodRecipientBeta
 */
export interface SodRecipientBeta {
    /**
     * SOD policy recipient DTO type.
     * @type {string}
     * @memberof SodRecipientBeta
     */
    'type'?: SodRecipientBetaTypeEnum;
    /**
     * SOD policy recipient\'s identity ID.
     * @type {string}
     * @memberof SodRecipientBeta
     */
    'id'?: string;
    /**
     * SOD policy recipient\'s display name.
     * @type {string}
     * @memberof SodRecipientBeta
     */
    'name'?: string;
}
export declare const SodRecipientBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SodRecipientBetaTypeEnum = typeof SodRecipientBetaTypeEnum[keyof typeof SodRecipientBetaTypeEnum];
/**
 * SOD policy violation report result.
 * @export
 * @interface SodReportResultDtoBeta
 */
export interface SodReportResultDtoBeta {
    /**
     * SOD policy violation report result DTO type.
     * @type {string}
     * @memberof SodReportResultDtoBeta
     */
    'type'?: SodReportResultDtoBetaTypeEnum;
    /**
     * SOD policy violation report result ID.
     * @type {string}
     * @memberof SodReportResultDtoBeta
     */
    'id'?: string;
    /**
     * Human-readable name of the SOD policy violation report result.
     * @type {string}
     * @memberof SodReportResultDtoBeta
     */
    'name'?: string;
}
export declare const SodReportResultDtoBetaTypeEnum: {
    readonly ReportResult: "REPORT_RESULT";
};
export type SodReportResultDtoBetaTypeEnum = typeof SodReportResultDtoBetaTypeEnum[keyof typeof SodReportResultDtoBetaTypeEnum];
/**
 * The inner object representing the completed SOD Violation check
 * @export
 * @interface SodViolationCheckResult1Beta
 */
export interface SodViolationCheckResult1Beta {
    /**
     *
     * @type {ErrorMessageDtoBeta}
     * @memberof SodViolationCheckResult1Beta
     */
    'message'?: ErrorMessageDtoBeta;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.
     * @type {{ [key: string]: string; }}
     * @memberof SodViolationCheckResult1Beta
     */
    'clientMetadata'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {Array<SodViolationContext1Beta>}
     * @memberof SodViolationCheckResult1Beta
     */
    'violationContexts'?: Array<SodViolationContext1Beta>;
    /**
     * A list of the Policies that were violated.
     * @type {Array<SodPolicyDtoBeta>}
     * @memberof SodViolationCheckResult1Beta
     */
    'violatedPolicies'?: Array<SodPolicyDtoBeta>;
}
/**
 * The inner object representing the completed SOD Violation check
 * @export
 * @interface SodViolationCheckResultBeta
 */
export interface SodViolationCheckResultBeta {
    /**
     *
     * @type {ErrorMessageDtoBeta}
     * @memberof SodViolationCheckResultBeta
     */
    'message'?: ErrorMessageDtoBeta;
    /**
     * Arbitrary key-value pairs. They will never be processed by the IdentityNow system but will be returned on completion of the violation check.
     * @type {{ [key: string]: string; }}
     * @memberof SodViolationCheckResultBeta
     */
    'clientMetadata'?: {
        [key: string]: string;
    } | null;
    /**
     *
     * @type {Array<SodViolationContextBeta>}
     * @memberof SodViolationCheckResultBeta
     */
    'violationContexts'?: Array<SodViolationContextBeta> | null;
    /**
     * A list of the SOD policies that were violated.
     * @type {Array<SodPolicyDtoBeta>}
     * @memberof SodViolationCheckResultBeta
     */
    'violatedPolicies'?: Array<SodPolicyDtoBeta> | null;
}
/**
 * The contextual information of the violated criteria.
 * @export
 * @interface SodViolationContext1Beta
 */
export interface SodViolationContext1Beta {
    /**
     *
     * @type {SodPolicyDtoBeta}
     * @memberof SodViolationContext1Beta
     */
    'policy'?: SodPolicyDtoBeta;
    /**
     *
     * @type {SodViolationContext1ConflictingAccessCriteriaBeta}
     * @memberof SodViolationContext1Beta
     */
    'conflictingAccessCriteria'?: SodViolationContext1ConflictingAccessCriteriaBeta;
}
/**
 * The object which contains the left and right hand side of the entitlements that got violated according to the policy.
 * @export
 * @interface SodViolationContext1ConflictingAccessCriteriaBeta
 */
export interface SodViolationContext1ConflictingAccessCriteriaBeta {
    /**
     *
     * @type {SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta}
     * @memberof SodViolationContext1ConflictingAccessCriteriaBeta
     */
    'leftCriteria'?: SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta;
    /**
     *
     * @type {SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta}
     * @memberof SodViolationContext1ConflictingAccessCriteriaBeta
     */
    'rightCriteria'?: SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta;
}
/**
 *
 * @export
 * @interface SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta
 */
export interface SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta {
    /**
     *
     * @type {Array<SodExemptCriteria1Beta>}
     * @memberof SodViolationContext1ConflictingAccessCriteriaLeftCriteriaBeta
     */
    'criteriaList'?: Array<SodExemptCriteria1Beta>;
}
/**
 * The contextual information of the violated criteria
 * @export
 * @interface SodViolationContextBeta
 */
export interface SodViolationContextBeta {
    /**
     *
     * @type {SodPolicyDtoBeta}
     * @memberof SodViolationContextBeta
     */
    'policy'?: SodPolicyDtoBeta;
    /**
     *
     * @type {SodViolationContextConflictingAccessCriteriaBeta}
     * @memberof SodViolationContextBeta
     */
    'conflictingAccessCriteria'?: SodViolationContextConflictingAccessCriteriaBeta;
}
/**
 * An object referencing a completed SOD violation check
 * @export
 * @interface SodViolationContextCheckCompleted1Beta
 */
export interface SodViolationContextCheckCompleted1Beta {
    /**
     * The status of SOD violation check
     * @type {string}
     * @memberof SodViolationContextCheckCompleted1Beta
     */
    'state'?: SodViolationContextCheckCompleted1BetaStateEnum;
    /**
     * The id of the Violation check event
     * @type {string}
     * @memberof SodViolationContextCheckCompleted1Beta
     */
    'uuid'?: string;
    /**
     *
     * @type {SodViolationCheckResult1Beta}
     * @memberof SodViolationContextCheckCompleted1Beta
     */
    'violationCheckResult'?: SodViolationCheckResult1Beta;
}
export declare const SodViolationContextCheckCompleted1BetaStateEnum: {
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type SodViolationContextCheckCompleted1BetaStateEnum = typeof SodViolationContextCheckCompleted1BetaStateEnum[keyof typeof SodViolationContextCheckCompleted1BetaStateEnum];
/**
 * An object referencing a completed SOD violation check
 * @export
 * @interface SodViolationContextCheckCompletedBeta
 */
export interface SodViolationContextCheckCompletedBeta {
    /**
     * The status of SOD violation check
     * @type {string}
     * @memberof SodViolationContextCheckCompletedBeta
     */
    'state'?: SodViolationContextCheckCompletedBetaStateEnum;
    /**
     * The id of the Violation check event
     * @type {string}
     * @memberof SodViolationContextCheckCompletedBeta
     */
    'uuid'?: string | null;
    /**
     *
     * @type {SodViolationCheckResultBeta}
     * @memberof SodViolationContextCheckCompletedBeta
     */
    'violationCheckResult'?: SodViolationCheckResultBeta;
}
export declare const SodViolationContextCheckCompletedBetaStateEnum: {
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
    readonly Null: "null";
};
export type SodViolationContextCheckCompletedBetaStateEnum = typeof SodViolationContextCheckCompletedBetaStateEnum[keyof typeof SodViolationContextCheckCompletedBetaStateEnum];
/**
 * The object which contains the left and right hand side of the entitlements that got violated according to the policy.
 * @export
 * @interface SodViolationContextConflictingAccessCriteriaBeta
 */
export interface SodViolationContextConflictingAccessCriteriaBeta {
    /**
     *
     * @type {SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta}
     * @memberof SodViolationContextConflictingAccessCriteriaBeta
     */
    'leftCriteria'?: SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta;
    /**
     *
     * @type {SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta}
     * @memberof SodViolationContextConflictingAccessCriteriaBeta
     */
    'rightCriteria'?: SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta;
}
/**
 *
 * @export
 * @interface SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta
 */
export interface SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta {
    /**
     *
     * @type {Array<SodExemptCriteriaBeta>}
     * @memberof SodViolationContextConflictingAccessCriteriaLeftCriteriaBeta
     */
    'criteriaList'?: Array<SodExemptCriteriaBeta>;
}
/**
 *
 * @export
 * @interface Source1Beta
 */
export interface Source1Beta {
    /**
     * Attribute mapping type.
     * @type {string}
     * @memberof Source1Beta
     */
    'type'?: string;
    /**
     * Attribute mapping properties.
     * @type {object}
     * @memberof Source1Beta
     */
    'properties'?: object;
}
/**
 * Reference to account correlation config object.
 * @export
 * @interface SourceAccountCorrelationConfigBeta
 */
export interface SourceAccountCorrelationConfigBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceAccountCorrelationConfigBeta
     */
    'type'?: SourceAccountCorrelationConfigBetaTypeEnum;
    /**
     * Account correlation config ID.
     * @type {string}
     * @memberof SourceAccountCorrelationConfigBeta
     */
    'id'?: string;
    /**
     * Account correlation config\'s human-readable display name.
     * @type {string}
     * @memberof SourceAccountCorrelationConfigBeta
     */
    'name'?: string;
}
export declare const SourceAccountCorrelationConfigBetaTypeEnum: {
    readonly AccountCorrelationConfig: "ACCOUNT_CORRELATION_CONFIG";
};
export type SourceAccountCorrelationConfigBetaTypeEnum = typeof SourceAccountCorrelationConfigBetaTypeEnum[keyof typeof SourceAccountCorrelationConfigBetaTypeEnum];
/**
 * Reference to a rule that can do COMPLEX correlation. Only use this rule when you can\'t use accountCorrelationConfig.
 * @export
 * @interface SourceAccountCorrelationRuleBeta
 */
export interface SourceAccountCorrelationRuleBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceAccountCorrelationRuleBeta
     */
    'type'?: SourceAccountCorrelationRuleBetaTypeEnum;
    /**
     * Rule ID.
     * @type {string}
     * @memberof SourceAccountCorrelationRuleBeta
     */
    'id'?: string;
    /**
     * Rule\'s human-readable display name.
     * @type {string}
     * @memberof SourceAccountCorrelationRuleBeta
     */
    'name'?: string;
}
export declare const SourceAccountCorrelationRuleBetaTypeEnum: {
    readonly Rule: "RULE";
};
export type SourceAccountCorrelationRuleBetaTypeEnum = typeof SourceAccountCorrelationRuleBetaTypeEnum[keyof typeof SourceAccountCorrelationRuleBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceAccountCreatedBeta
 */
export interface SourceAccountCreatedBeta {
    /**
     * Source unique identifier for the identity. UUID is generated by the source system.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'uuid'?: string;
    /**
     * SailPoint generated unique identifier.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'id': string;
    /**
     * Unique ID of the account on the source.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'nativeIdentifier': string;
    /**
     * The ID of the source.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'sourceId': string;
    /**
     * The name of the source.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'sourceName': string;
    /**
     * The ID of the identity that is correlated with this account.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'identityId': string;
    /**
     * The name of the identity that is correlated with this account.
     * @type {string}
     * @memberof SourceAccountCreatedBeta
     */
    'identityName': string;
    /**
     * The attributes of the account. The contents of attributes depends on the account schema for the source.
     * @type {{ [key: string]: any; }}
     * @memberof SourceAccountCreatedBeta
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface SourceAccountDeletedBeta
 */
export interface SourceAccountDeletedBeta {
    /**
     * Source unique identifier for the identity. UUID is generated by the source system.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'uuid'?: string;
    /**
     * SailPoint generated unique identifier.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'id': string;
    /**
     * Unique ID of the account on the source.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'nativeIdentifier': string;
    /**
     * The ID of the source.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'sourceId': string;
    /**
     * The name of the source.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'sourceName': string;
    /**
     * The ID of the identity that is correlated with this account.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'identityId': string;
    /**
     * The name of the identity that is correlated with this account.
     * @type {string}
     * @memberof SourceAccountDeletedBeta
     */
    'identityName': string;
    /**
     * The attributes of the account. The contents of attributes depends on the account schema for the source.
     * @type {{ [key: string]: any; }}
     * @memberof SourceAccountDeletedBeta
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface SourceAccountUpdatedBeta
 */
export interface SourceAccountUpdatedBeta {
    /**
     * Source unique identifier for the identity. UUID is generated by the source system.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'uuid'?: string;
    /**
     * SailPoint generated unique identifier.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'id': string;
    /**
     * Unique ID of the account on the source.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'nativeIdentifier': string;
    /**
     * The ID of the source.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'sourceId': string;
    /**
     * The name of the source.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'sourceName': string;
    /**
     * The ID of the identity that is correlated with this account.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'identityId': string;
    /**
     * The name of the identity that is correlated with this account.
     * @type {string}
     * @memberof SourceAccountUpdatedBeta
     */
    'identityName': string;
    /**
     * The attributes of the account. The contents of attributes depends on the account schema for the source.
     * @type {{ [key: string]: any; }}
     * @memberof SourceAccountUpdatedBeta
     */
    'attributes': {
        [key: string]: any;
    };
}
/**
 * Rule that runs on the CCG and allows for customization of provisioning plans before the API calls the connector.
 * @export
 * @interface SourceBeforeProvisioningRuleBeta
 */
export interface SourceBeforeProvisioningRuleBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceBeforeProvisioningRuleBeta
     */
    'type'?: SourceBeforeProvisioningRuleBetaTypeEnum;
    /**
     * Rule ID.
     * @type {string}
     * @memberof SourceBeforeProvisioningRuleBeta
     */
    'id'?: string;
    /**
     * Rule\'s human-readable display name.
     * @type {string}
     * @memberof SourceBeforeProvisioningRuleBeta
     */
    'name'?: string;
}
export declare const SourceBeforeProvisioningRuleBetaTypeEnum: {
    readonly Rule: "RULE";
};
export type SourceBeforeProvisioningRuleBetaTypeEnum = typeof SourceBeforeProvisioningRuleBetaTypeEnum[keyof typeof SourceBeforeProvisioningRuleBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceBeta
 */
export interface SourceBeta {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourceBeta
     */
    'id'?: string;
    /**
     * Source\'s human-readable name.
     * @type {string}
     * @memberof SourceBeta
     */
    'name': string;
    /**
     * Source\'s human-readable description.
     * @type {string}
     * @memberof SourceBeta
     */
    'description'?: string;
    /**
     *
     * @type {SourceOwnerBeta}
     * @memberof SourceBeta
     */
    'owner': SourceOwnerBeta;
    /**
     *
     * @type {SourceClusterBeta}
     * @memberof SourceBeta
     */
    'cluster'?: SourceClusterBeta | null;
    /**
     *
     * @type {SourceAccountCorrelationConfigBeta}
     * @memberof SourceBeta
     */
    'accountCorrelationConfig'?: SourceAccountCorrelationConfigBeta | null;
    /**
     *
     * @type {SourceAccountCorrelationRuleBeta}
     * @memberof SourceBeta
     */
    'accountCorrelationRule'?: SourceAccountCorrelationRuleBeta | null;
    /**
     *
     * @type {ManagerCorrelationMappingBeta}
     * @memberof SourceBeta
     */
    'managerCorrelationMapping'?: ManagerCorrelationMappingBeta | null;
    /**
     *
     * @type {SourceManagerCorrelationRuleBeta}
     * @memberof SourceBeta
     */
    'managerCorrelationRule'?: SourceManagerCorrelationRuleBeta | null;
    /**
     *
     * @type {SourceBeforeProvisioningRuleBeta}
     * @memberof SourceBeta
     */
    'beforeProvisioningRule'?: SourceBeforeProvisioningRuleBeta | null;
    /**
     * List of references to schema objects.
     * @type {Array<SourceSchemasInnerBeta>}
     * @memberof SourceBeta
     */
    'schemas'?: Array<SourceSchemasInnerBeta>;
    /**
     * List of references to the associated PasswordPolicy objects.
     * @type {Array<SourcePasswordPoliciesInnerBeta>}
     * @memberof SourceBeta
     */
    'passwordPolicies'?: Array<SourcePasswordPoliciesInnerBeta> | null;
    /**
     * Optional features that can be supported by a source. Modifying the features array may cause source configuration errors that are unsupportable. It is recommended to not modify this array for SailPoint supported connectors. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * USES_UUID: Connectivity 2.0 flag used to indicate that the connector supports a compound naming structure. * PREFER_UUID: Used in ISC Provisioning AND Aggregation to decide if it should prefer account.uuid to account.nativeIdentity when data is read in through aggregation OR pushed out through provisioning. * ARM_SECURITY_EXTRACT: Indicates the application supports Security extracts for ARM * ARM_UTILIZATION_EXTRACT: Indicates the application supports Utilization extracts for ARM * ARM_CHANGELOG_EXTRACT: Indicates the application supports Change-log extracts for ARM
     * @type {Array<string>}
     * @memberof SourceBeta
     */
    'features'?: Array<SourceBetaFeaturesEnum>;
    /**
     * Specifies the type of system being managed e.g. Active Directory, Workday, etc.. If you are creating a delimited file source, you must set the `provisionasCsv` query parameter to `true`.
     * @type {string}
     * @memberof SourceBeta
     */
    'type'?: string;
    /**
     * Connector script name.
     * @type {string}
     * @memberof SourceBeta
     */
    'connector': string;
    /**
     * Fully qualified name of the Java class that implements the connector interface.
     * @type {string}
     * @memberof SourceBeta
     */
    'connectorClass'?: string;
    /**
     * Connector specific configuration. This configuration will differ from type to type.
     * @type {object}
     * @memberof SourceBeta
     */
    'connectorAttributes'?: object;
    /**
     * Number from 0 to 100 that specifies when to skip the delete phase.
     * @type {number}
     * @memberof SourceBeta
     */
    'deleteThreshold'?: number;
    /**
     * When this is true, it indicates that the source is referenced by an identity profile.
     * @type {boolean}
     * @memberof SourceBeta
     */
    'authoritative'?: boolean;
    /**
     *
     * @type {SourceManagementWorkgroupBeta}
     * @memberof SourceBeta
     */
    'managementWorkgroup'?: SourceManagementWorkgroupBeta | null;
    /**
     * When this is true, it indicates that the source is healthy.
     * @type {boolean}
     * @memberof SourceBeta
     */
    'healthy'?: boolean;
    /**
     * Status identifier that gives specific information about why a source is or isn\'t healthy.
     * @type {string}
     * @memberof SourceBeta
     */
    'status'?: SourceBetaStatusEnum;
    /**
     * Timestamp that shows when a source health check was last performed.
     * @type {string}
     * @memberof SourceBeta
     */
    'since'?: string;
    /**
     * Connector ID
     * @type {string}
     * @memberof SourceBeta
     */
    'connectorId'?: string;
    /**
     * Name of the connector that was chosen during source creation.
     * @type {string}
     * @memberof SourceBeta
     */
    'connectorName'?: string;
    /**
     * Type of connection (direct or file).
     * @type {string}
     * @memberof SourceBeta
     */
    'connectionType'?: string;
    /**
     * Connector implementation ID.
     * @type {string}
     * @memberof SourceBeta
     */
    'connectorImplementationId'?: string;
    /**
     * Date-time when the source was created
     * @type {string}
     * @memberof SourceBeta
     */
    'created'?: string;
    /**
     * Date-time when the source was last modified.
     * @type {string}
     * @memberof SourceBeta
     */
    'modified'?: string;
    /**
     * If this is true, it enables a credential provider for the source. If credentialProvider is turned on,  then the source can use credential provider(s) to fetch credentials.
     * @type {boolean}
     * @memberof SourceBeta
     */
    'credentialProviderEnabled'?: boolean;
    /**
     * Source category (e.g. null, CredentialProvider).
     * @type {string}
     * @memberof SourceBeta
     */
    'category'?: string | null;
}
export declare const SourceBetaFeaturesEnum: {
    readonly Authenticate: "AUTHENTICATE";
    readonly Composite: "COMPOSITE";
    readonly DirectPermissions: "DIRECT_PERMISSIONS";
    readonly DiscoverSchema: "DISCOVER_SCHEMA";
    readonly Enable: "ENABLE";
    readonly ManagerLookup: "MANAGER_LOOKUP";
    readonly NoRandomAccess: "NO_RANDOM_ACCESS";
    readonly Proxy: "PROXY";
    readonly Search: "SEARCH";
    readonly Template: "TEMPLATE";
    readonly Unlock: "UNLOCK";
    readonly UnstructuredTargets: "UNSTRUCTURED_TARGETS";
    readonly SharepointTarget: "SHAREPOINT_TARGET";
    readonly Provisioning: "PROVISIONING";
    readonly GroupProvisioning: "GROUP_PROVISIONING";
    readonly SyncProvisioning: "SYNC_PROVISIONING";
    readonly Password: "PASSWORD";
    readonly CurrentPassword: "CURRENT_PASSWORD";
    readonly AccountOnlyRequest: "ACCOUNT_ONLY_REQUEST";
    readonly AdditionalAccountRequest: "ADDITIONAL_ACCOUNT_REQUEST";
    readonly NoAggregation: "NO_AGGREGATION";
    readonly GroupsHaveMembers: "GROUPS_HAVE_MEMBERS";
    readonly NoPermissionsProvisioning: "NO_PERMISSIONS_PROVISIONING";
    readonly NoGroupPermissionsProvisioning: "NO_GROUP_PERMISSIONS_PROVISIONING";
    readonly NoUnstructuredTargetsProvisioning: "NO_UNSTRUCTURED_TARGETS_PROVISIONING";
    readonly NoDirectPermissionsProvisioning: "NO_DIRECT_PERMISSIONS_PROVISIONING";
    readonly PreferUuid: "PREFER_UUID";
    readonly ArmSecurityExtract: "ARM_SECURITY_EXTRACT";
    readonly ArmUtilizationExtract: "ARM_UTILIZATION_EXTRACT";
    readonly ArmChangelogExtract: "ARM_CHANGELOG_EXTRACT";
    readonly UsesUuid: "USES_UUID";
};
export type SourceBetaFeaturesEnum = typeof SourceBetaFeaturesEnum[keyof typeof SourceBetaFeaturesEnum];
export declare const SourceBetaStatusEnum: {
    readonly ErrorAccountFileImport: "SOURCE_STATE_ERROR_ACCOUNT_FILE_IMPORT";
    readonly ErrorCluster: "SOURCE_STATE_ERROR_CLUSTER";
    readonly ErrorSource: "SOURCE_STATE_ERROR_SOURCE";
    readonly ErrorVa: "SOURCE_STATE_ERROR_VA";
    readonly FailureCluster: "SOURCE_STATE_FAILURE_CLUSTER";
    readonly FailureSource: "SOURCE_STATE_FAILURE_SOURCE";
    readonly Healthy: "SOURCE_STATE_HEALTHY";
    readonly UncheckedCluster: "SOURCE_STATE_UNCHECKED_CLUSTER";
    readonly UncheckedClusterNoSources: "SOURCE_STATE_UNCHECKED_CLUSTER_NO_SOURCES";
    readonly UncheckedSource: "SOURCE_STATE_UNCHECKED_SOURCE";
    readonly UncheckedSourceNoAccounts: "SOURCE_STATE_UNCHECKED_SOURCE_NO_ACCOUNTS";
};
export type SourceBetaStatusEnum = typeof SourceBetaStatusEnum[keyof typeof SourceBetaStatusEnum];
/**
 * Reference to the source\'s associated cluster.
 * @export
 * @interface SourceClusterBeta
 */
export interface SourceClusterBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceClusterBeta
     */
    'type': SourceClusterBetaTypeEnum;
    /**
     * Cluster ID.
     * @type {string}
     * @memberof SourceClusterBeta
     */
    'id': string;
    /**
     * Cluster\'s human-readable display name.
     * @type {string}
     * @memberof SourceClusterBeta
     */
    'name': string;
}
export declare const SourceClusterBetaTypeEnum: {
    readonly Cluster: "CLUSTER";
};
export type SourceClusterBetaTypeEnum = typeof SourceClusterBetaTypeEnum[keyof typeof SourceClusterBetaTypeEnum];
/**
 * Source cluster.
 * @export
 * @interface SourceClusterDtoBeta
 */
export interface SourceClusterDtoBeta {
    /**
     * Source cluster DTO type.
     * @type {string}
     * @memberof SourceClusterDtoBeta
     */
    'type'?: SourceClusterDtoBetaTypeEnum;
    /**
     * Source cluster ID.
     * @type {string}
     * @memberof SourceClusterDtoBeta
     */
    'id'?: string;
    /**
     * Source cluster display name.
     * @type {string}
     * @memberof SourceClusterDtoBeta
     */
    'name'?: string;
}
export declare const SourceClusterDtoBetaTypeEnum: {
    readonly Cluster: "CLUSTER";
};
export type SourceClusterDtoBetaTypeEnum = typeof SourceClusterDtoBetaTypeEnum[keyof typeof SourceClusterDtoBetaTypeEnum];
/**
 * SourceCode
 * @export
 * @interface SourceCodeBeta
 */
export interface SourceCodeBeta {
    /**
     * the version of the code
     * @type {string}
     * @memberof SourceCodeBeta
     */
    'version': string;
    /**
     * The code
     * @type {string}
     * @memberof SourceCodeBeta
     */
    'script': string;
}
/**
 * Identity who created the source.
 * @export
 * @interface SourceCreatedActorBeta
 */
export interface SourceCreatedActorBeta {
    /**
     * DTO type of identity who created the source.
     * @type {string}
     * @memberof SourceCreatedActorBeta
     */
    'type': SourceCreatedActorBetaTypeEnum;
    /**
     * ID of identity who created the source.
     * @type {string}
     * @memberof SourceCreatedActorBeta
     */
    'id': string;
    /**
     * Display name of identity who created the source.
     * @type {string}
     * @memberof SourceCreatedActorBeta
     */
    'name': string;
}
export declare const SourceCreatedActorBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SourceCreatedActorBetaTypeEnum = typeof SourceCreatedActorBetaTypeEnum[keyof typeof SourceCreatedActorBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceCreatedBeta
 */
export interface SourceCreatedBeta {
    /**
     * The unique ID of the source.
     * @type {string}
     * @memberof SourceCreatedBeta
     */
    'id': string;
    /**
     * Human friendly name of the source.
     * @type {string}
     * @memberof SourceCreatedBeta
     */
    'name': string;
    /**
     * The connection type.
     * @type {string}
     * @memberof SourceCreatedBeta
     */
    'type': string;
    /**
     * The date and time the source was created.
     * @type {string}
     * @memberof SourceCreatedBeta
     */
    'created': string;
    /**
     * The connector type used to connect to the source.
     * @type {string}
     * @memberof SourceCreatedBeta
     */
    'connector': string;
    /**
     *
     * @type {SourceCreatedActorBeta}
     * @memberof SourceCreatedBeta
     */
    'actor': SourceCreatedActorBeta;
}
/**
 * Identity who deleted the source.
 * @export
 * @interface SourceDeletedActorBeta
 */
export interface SourceDeletedActorBeta {
    /**
     * DTO type of identity who deleted the source.
     * @type {string}
     * @memberof SourceDeletedActorBeta
     */
    'type': SourceDeletedActorBetaTypeEnum;
    /**
     * ID of identity who deleted the source.
     * @type {string}
     * @memberof SourceDeletedActorBeta
     */
    'id': string;
    /**
     * Display name of identity who deleted the source.
     * @type {string}
     * @memberof SourceDeletedActorBeta
     */
    'name': string;
}
export declare const SourceDeletedActorBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SourceDeletedActorBetaTypeEnum = typeof SourceDeletedActorBetaTypeEnum[keyof typeof SourceDeletedActorBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceDeletedBeta
 */
export interface SourceDeletedBeta {
    /**
     * The unique ID of the source.
     * @type {string}
     * @memberof SourceDeletedBeta
     */
    'id': string;
    /**
     * Human friendly name of the source.
     * @type {string}
     * @memberof SourceDeletedBeta
     */
    'name': string;
    /**
     * The connection type.
     * @type {string}
     * @memberof SourceDeletedBeta
     */
    'type': string;
    /**
     * The date and time the source was deleted.
     * @type {string}
     * @memberof SourceDeletedBeta
     */
    'deleted': string;
    /**
     * The connector type used to connect to the source.
     * @type {string}
     * @memberof SourceDeletedBeta
     */
    'connector': string;
    /**
     *
     * @type {SourceDeletedActorBeta}
     * @memberof SourceDeletedBeta
     */
    'actor': SourceDeletedActorBeta;
}
/**
 * Entitlement Request Configuration
 * @export
 * @interface SourceEntitlementRequestConfigBeta
 */
export interface SourceEntitlementRequestConfigBeta {
    /**
     *
     * @type {EntitlementAccessRequestConfigBeta}
     * @memberof SourceEntitlementRequestConfigBeta
     */
    'accessRequestConfig'?: EntitlementAccessRequestConfigBeta;
}
/**
 * Reference to management workgroup for the source.
 * @export
 * @interface SourceManagementWorkgroupBeta
 */
export interface SourceManagementWorkgroupBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceManagementWorkgroupBeta
     */
    'type'?: SourceManagementWorkgroupBetaTypeEnum;
    /**
     * Management workgroup ID.
     * @type {string}
     * @memberof SourceManagementWorkgroupBeta
     */
    'id'?: string;
    /**
     * Management workgroup\'s human-readable display name.
     * @type {string}
     * @memberof SourceManagementWorkgroupBeta
     */
    'name'?: string;
}
export declare const SourceManagementWorkgroupBetaTypeEnum: {
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
};
export type SourceManagementWorkgroupBetaTypeEnum = typeof SourceManagementWorkgroupBetaTypeEnum[keyof typeof SourceManagementWorkgroupBetaTypeEnum];
/**
 * Reference to the ManagerCorrelationRule. Only use this rule when a simple filter isn\'t sufficient.
 * @export
 * @interface SourceManagerCorrelationRuleBeta
 */
export interface SourceManagerCorrelationRuleBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceManagerCorrelationRuleBeta
     */
    'type'?: SourceManagerCorrelationRuleBetaTypeEnum;
    /**
     * Rule ID.
     * @type {string}
     * @memberof SourceManagerCorrelationRuleBeta
     */
    'id'?: string;
    /**
     * Rule\'s human-readable display name.
     * @type {string}
     * @memberof SourceManagerCorrelationRuleBeta
     */
    'name'?: string;
}
export declare const SourceManagerCorrelationRuleBetaTypeEnum: {
    readonly Rule: "RULE";
};
export type SourceManagerCorrelationRuleBetaTypeEnum = typeof SourceManagerCorrelationRuleBetaTypeEnum[keyof typeof SourceManagerCorrelationRuleBetaTypeEnum];
/**
 * Reference to identity object who owns the source.
 * @export
 * @interface SourceOwnerBeta
 */
export interface SourceOwnerBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceOwnerBeta
     */
    'type'?: SourceOwnerBetaTypeEnum;
    /**
     * Owner identity\'s ID.
     * @type {string}
     * @memberof SourceOwnerBeta
     */
    'id'?: string;
    /**
     * Owner identity\'s human-readable display name.
     * @type {string}
     * @memberof SourceOwnerBeta
     */
    'name'?: string;
}
export declare const SourceOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SourceOwnerBetaTypeEnum = typeof SourceOwnerBetaTypeEnum[keyof typeof SourceOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface SourcePasswordPoliciesInnerBeta
 */
export interface SourcePasswordPoliciesInnerBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourcePasswordPoliciesInnerBeta
     */
    'type'?: SourcePasswordPoliciesInnerBetaTypeEnum;
    /**
     * Policy ID.
     * @type {string}
     * @memberof SourcePasswordPoliciesInnerBeta
     */
    'id'?: string;
    /**
     * Policy\'s human-readable display name.
     * @type {string}
     * @memberof SourcePasswordPoliciesInnerBeta
     */
    'name'?: string;
}
export declare const SourcePasswordPoliciesInnerBetaTypeEnum: {
    readonly PasswordPolicy: "PASSWORD_POLICY";
};
export type SourcePasswordPoliciesInnerBetaTypeEnum = typeof SourcePasswordPoliciesInnerBetaTypeEnum[keyof typeof SourcePasswordPoliciesInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceSchemasInnerBeta
 */
export interface SourceSchemasInnerBeta {
    /**
     * Type of object being referenced.
     * @type {string}
     * @memberof SourceSchemasInnerBeta
     */
    'type'?: SourceSchemasInnerBetaTypeEnum;
    /**
     * Schema ID.
     * @type {string}
     * @memberof SourceSchemasInnerBeta
     */
    'id'?: string;
    /**
     * Schema\'s human-readable display name.
     * @type {string}
     * @memberof SourceSchemasInnerBeta
     */
    'name'?: string;
}
export declare const SourceSchemasInnerBetaTypeEnum: {
    readonly ConnectorSchema: "CONNECTOR_SCHEMA";
};
export type SourceSchemasInnerBetaTypeEnum = typeof SourceSchemasInnerBetaTypeEnum[keyof typeof SourceSchemasInnerBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceSyncJobBeta
 */
export interface SourceSyncJobBeta {
    /**
     * Job ID.
     * @type {string}
     * @memberof SourceSyncJobBeta
     */
    'id': string;
    /**
     * The job status.
     * @type {string}
     * @memberof SourceSyncJobBeta
     */
    'status': SourceSyncJobBetaStatusEnum;
    /**
     *
     * @type {SourceSyncPayloadBeta}
     * @memberof SourceSyncJobBeta
     */
    'payload': SourceSyncPayloadBeta;
}
export declare const SourceSyncJobBetaStatusEnum: {
    readonly Queued: "QUEUED";
    readonly InProgress: "IN_PROGRESS";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
export type SourceSyncJobBetaStatusEnum = typeof SourceSyncJobBetaStatusEnum[keyof typeof SourceSyncJobBetaStatusEnum];
/**
 *
 * @export
 * @interface SourceSyncPayloadBeta
 */
export interface SourceSyncPayloadBeta {
    /**
     * Payload type.
     * @type {string}
     * @memberof SourceSyncPayloadBeta
     */
    'type': string;
    /**
     * Payload type.
     * @type {string}
     * @memberof SourceSyncPayloadBeta
     */
    'dataJson': string;
}
/**
 * Identity who updated the source.
 * @export
 * @interface SourceUpdatedActorBeta
 */
export interface SourceUpdatedActorBeta {
    /**
     * DTO type of identity who updated the source.
     * @type {string}
     * @memberof SourceUpdatedActorBeta
     */
    'type': SourceUpdatedActorBetaTypeEnum;
    /**
     * ID of identity who updated the source.
     * @type {string}
     * @memberof SourceUpdatedActorBeta
     */
    'id'?: string;
    /**
     * Display name of identity who updated the source.
     * @type {string}
     * @memberof SourceUpdatedActorBeta
     */
    'name': string;
}
export declare const SourceUpdatedActorBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type SourceUpdatedActorBetaTypeEnum = typeof SourceUpdatedActorBetaTypeEnum[keyof typeof SourceUpdatedActorBetaTypeEnum];
/**
 *
 * @export
 * @interface SourceUpdatedBeta
 */
export interface SourceUpdatedBeta {
    /**
     * The unique ID of the source.
     * @type {string}
     * @memberof SourceUpdatedBeta
     */
    'id': string;
    /**
     * The user friendly name of the source.
     * @type {string}
     * @memberof SourceUpdatedBeta
     */
    'name': string;
    /**
     * The connection type of the source.
     * @type {string}
     * @memberof SourceUpdatedBeta
     */
    'type': string;
    /**
     * The date and time the source was modified.
     * @type {string}
     * @memberof SourceUpdatedBeta
     */
    'modified': string;
    /**
     * The connector type used to connect to the source.
     * @type {string}
     * @memberof SourceUpdatedBeta
     */
    'connector': string;
    /**
     *
     * @type {SourceUpdatedActorBeta}
     * @memberof SourceUpdatedBeta
     */
    'actor': SourceUpdatedActorBeta;
}
/**
 *
 * @export
 * @interface SourceUsageBeta
 */
export interface SourceUsageBeta {
    /**
     * The first day of the month for which activity is aggregated.
     * @type {string}
     * @memberof SourceUsageBeta
     */
    'date'?: string;
    /**
     * The average number of days that accounts were active within this source, for the month.
     * @type {number}
     * @memberof SourceUsageBeta
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface SourceUsageStatusBeta
 */
export interface SourceUsageStatusBeta {
    /**
     * Source Usage Status. Acceptable values are:   - COMPLETE       - This status means that an activity data source has been setup and usage insights are available for the source.   - INCOMPLETE       - This status means that an activity data source has not been setup and usage insights are not available for the source.
     * @type {string}
     * @memberof SourceUsageStatusBeta
     */
    'status'?: SourceUsageStatusBetaStatusEnum;
}
export declare const SourceUsageStatusBetaStatusEnum: {
    readonly Complete: "COMPLETE";
    readonly Incomplete: "INCOMPLETE";
};
export type SourceUsageStatusBetaStatusEnum = typeof SourceUsageStatusBetaStatusEnum[keyof typeof SourceUsageStatusBetaStatusEnum];
/**
 *
 * @export
 * @interface SpConfigExportJobAllOfBeta
 */
export interface SpConfigExportJobAllOfBeta {
    /**
     * Optional user defined description/name for export job.
     * @type {string}
     * @memberof SpConfigExportJobAllOfBeta
     */
    'description': string;
}
/**
 *
 * @export
 * @interface SpConfigExportJobBeta
 */
export interface SpConfigExportJobBeta {
    /**
     * Unique id assigned to this job.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'jobId': string;
    /**
     * Status of the job.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'status': SpConfigExportJobBetaStatusEnum;
    /**
     * Type of the job, either export or import.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'type': SpConfigExportJobBetaTypeEnum;
    /**
     * The time until which the artifacts will be available for download.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'expiration': string;
    /**
     * The time the job was started.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'created': string;
    /**
     * The time of the last update to the job.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'modified': string;
    /**
     * Optional user defined description/name for export job.
     * @type {string}
     * @memberof SpConfigExportJobBeta
     */
    'description': string;
}
export declare const SpConfigExportJobBetaStatusEnum: {
    readonly NotStarted: "NOT_STARTED";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export type SpConfigExportJobBetaStatusEnum = typeof SpConfigExportJobBetaStatusEnum[keyof typeof SpConfigExportJobBetaStatusEnum];
export declare const SpConfigExportJobBetaTypeEnum: {
    readonly Export: "EXPORT";
    readonly Import: "IMPORT";
};
export type SpConfigExportJobBetaTypeEnum = typeof SpConfigExportJobBetaTypeEnum[keyof typeof SpConfigExportJobBetaTypeEnum];
/**
 *
 * @export
 * @interface SpConfigExportJobStatusAllOfBeta
 */
export interface SpConfigExportJobStatusAllOfBeta {
    /**
     * The time the job was completed.
     * @type {string}
     * @memberof SpConfigExportJobStatusAllOfBeta
     */
    'completed': string;
}
/**
 *
 * @export
 * @interface SpConfigExportJobStatusBeta
 */
export interface SpConfigExportJobStatusBeta {
    /**
     * Unique id assigned to this job.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'jobId': string;
    /**
     * Status of the job.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'status': SpConfigExportJobStatusBetaStatusEnum;
    /**
     * Type of the job, either export or import.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'type': SpConfigExportJobStatusBetaTypeEnum;
    /**
     * The time until which the artifacts will be available for download.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'expiration': string;
    /**
     * The time the job was started.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'created': string;
    /**
     * The time of the last update to the job.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'modified': string;
    /**
     * Optional user defined description/name for export job.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'description': string;
    /**
     * The time the job was completed.
     * @type {string}
     * @memberof SpConfigExportJobStatusBeta
     */
    'completed': string;
}
export declare const SpConfigExportJobStatusBetaStatusEnum: {
    readonly NotStarted: "NOT_STARTED";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export type SpConfigExportJobStatusBetaStatusEnum = typeof SpConfigExportJobStatusBetaStatusEnum[keyof typeof SpConfigExportJobStatusBetaStatusEnum];
export declare const SpConfigExportJobStatusBetaTypeEnum: {
    readonly Export: "EXPORT";
    readonly Import: "IMPORT";
};
export type SpConfigExportJobStatusBetaTypeEnum = typeof SpConfigExportJobStatusBetaTypeEnum[keyof typeof SpConfigExportJobStatusBetaTypeEnum];
/**
 * Response model for config export download response.
 * @export
 * @interface SpConfigExportResultsBeta
 */
export interface SpConfigExportResultsBeta {
    /**
     * Current version of the export results object.
     * @type {number}
     * @memberof SpConfigExportResultsBeta
     */
    'version'?: number;
    /**
     * Time the export was completed.
     * @type {string}
     * @memberof SpConfigExportResultsBeta
     */
    'timestamp'?: string;
    /**
     * Name of the tenant where this export originated.
     * @type {string}
     * @memberof SpConfigExportResultsBeta
     */
    'tenant'?: string;
    /**
     * Optional user defined description/name for export job.
     * @type {string}
     * @memberof SpConfigExportResultsBeta
     */
    'description'?: string;
    /**
     *
     * @type {ExportOptionsBeta}
     * @memberof SpConfigExportResultsBeta
     */
    'options'?: ExportOptionsBeta;
    /**
     *
     * @type {Array<ConfigObjectBeta>}
     * @memberof SpConfigExportResultsBeta
     */
    'objects'?: Array<ConfigObjectBeta>;
}
/**
 *
 * @export
 * @interface SpConfigImportJobStatusAllOfBeta
 */
export interface SpConfigImportJobStatusAllOfBeta {
    /**
     * This message contains additional information about the overall status of the job.
     * @type {string}
     * @memberof SpConfigImportJobStatusAllOfBeta
     */
    'message': string;
    /**
     * The time the job was completed.
     * @type {string}
     * @memberof SpConfigImportJobStatusAllOfBeta
     */
    'completed': string;
}
/**
 *
 * @export
 * @interface SpConfigImportJobStatusBeta
 */
export interface SpConfigImportJobStatusBeta {
    /**
     * Unique id assigned to this job.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'jobId': string;
    /**
     * Status of the job.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'status': SpConfigImportJobStatusBetaStatusEnum;
    /**
     * Type of the job, either export or import.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'type': SpConfigImportJobStatusBetaTypeEnum;
    /**
     * The time until which the artifacts will be available for download.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'expiration': string;
    /**
     * The time the job was started.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'created': string;
    /**
     * The time of the last update to the job.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'modified': string;
    /**
     * This message contains additional information about the overall status of the job.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'message': string;
    /**
     * The time the job was completed.
     * @type {string}
     * @memberof SpConfigImportJobStatusBeta
     */
    'completed': string;
}
export declare const SpConfigImportJobStatusBetaStatusEnum: {
    readonly NotStarted: "NOT_STARTED";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export type SpConfigImportJobStatusBetaStatusEnum = typeof SpConfigImportJobStatusBetaStatusEnum[keyof typeof SpConfigImportJobStatusBetaStatusEnum];
export declare const SpConfigImportJobStatusBetaTypeEnum: {
    readonly Export: "EXPORT";
    readonly Import: "IMPORT";
};
export type SpConfigImportJobStatusBetaTypeEnum = typeof SpConfigImportJobStatusBetaTypeEnum[keyof typeof SpConfigImportJobStatusBetaTypeEnum];
/**
 * Response Body for Config Import command.
 * @export
 * @interface SpConfigImportResultsBeta
 */
export interface SpConfigImportResultsBeta {
    /**
     * The results of an object configuration import job.
     * @type {{ [key: string]: ObjectImportResultBeta; }}
     * @memberof SpConfigImportResultsBeta
     */
    'results': {
        [key: string]: ObjectImportResultBeta;
    };
    /**
     * If a backup was performed before the import, this will contain the jobId of the backup job. This id can be used to retrieve the json file of the backup export.
     * @type {string}
     * @memberof SpConfigImportResultsBeta
     */
    'exportJobId'?: string;
}
/**
 *
 * @export
 * @interface SpConfigJobBeta
 */
export interface SpConfigJobBeta {
    /**
     * Unique id assigned to this job.
     * @type {string}
     * @memberof SpConfigJobBeta
     */
    'jobId': string;
    /**
     * Status of the job.
     * @type {string}
     * @memberof SpConfigJobBeta
     */
    'status': SpConfigJobBetaStatusEnum;
    /**
     * Type of the job, either export or import.
     * @type {string}
     * @memberof SpConfigJobBeta
     */
    'type': SpConfigJobBetaTypeEnum;
    /**
     * The time until which the artifacts will be available for download.
     * @type {string}
     * @memberof SpConfigJobBeta
     */
    'expiration': string;
    /**
     * The time the job was started.
     * @type {string}
     * @memberof SpConfigJobBeta
     */
    'created': string;
    /**
     * The time of the last update to the job.
     * @type {string}
     * @memberof SpConfigJobBeta
     */
    'modified': string;
}
export declare const SpConfigJobBetaStatusEnum: {
    readonly NotStarted: "NOT_STARTED";
    readonly InProgress: "IN_PROGRESS";
    readonly Complete: "COMPLETE";
    readonly Cancelled: "CANCELLED";
    readonly Failed: "FAILED";
};
export type SpConfigJobBetaStatusEnum = typeof SpConfigJobBetaStatusEnum[keyof typeof SpConfigJobBetaStatusEnum];
export declare const SpConfigJobBetaTypeEnum: {
    readonly Export: "EXPORT";
    readonly Import: "IMPORT";
};
export type SpConfigJobBetaTypeEnum = typeof SpConfigJobBetaTypeEnum[keyof typeof SpConfigJobBetaTypeEnum];
/**
 * Message model for Config Import/Export.
 * @export
 * @interface SpConfigMessageBeta
 */
export interface SpConfigMessageBeta {
    /**
     * Message key.
     * @type {string}
     * @memberof SpConfigMessageBeta
     */
    'key': string;
    /**
     * Message text.
     * @type {string}
     * @memberof SpConfigMessageBeta
     */
    'text': string;
    /**
     * Message details if any, in key:value pairs.
     * @type {{ [key: string]: object; }}
     * @memberof SpConfigMessageBeta
     */
    'details': {
        [key: string]: object;
    };
}
/**
 * Response model for get object configuration.
 * @export
 * @interface SpConfigObjectBeta
 */
export interface SpConfigObjectBeta {
    /**
     * The object type this configuration is for.
     * @type {string}
     * @memberof SpConfigObjectBeta
     */
    'objectType'?: string;
    /**
     *
     * @type {SpConfigUrlBeta}
     * @memberof SpConfigObjectBeta
     */
    'resolveByIdUrl'?: SpConfigUrlBeta;
    /**
     * Url and query parameters to be used to resolve this type of object by name.
     * @type {Array<SpConfigUrlBeta>}
     * @memberof SpConfigObjectBeta
     */
    'resolveByNameUrl'?: Array<SpConfigUrlBeta>;
    /**
     *
     * @type {SpConfigUrlBeta}
     * @memberof SpConfigObjectBeta
     */
    'exportUrl'?: SpConfigUrlBeta;
    /**
     * Rights needed by the invoker of sp-config/export in order to export this type of object.
     * @type {string}
     * @memberof SpConfigObjectBeta
     */
    'exportRight'?: string;
    /**
     * Pagination limit imposed by the target service for this object type.
     * @type {number}
     * @memberof SpConfigObjectBeta
     */
    'exportLimit'?: number;
    /**
     *
     * @type {SpConfigUrlBeta}
     * @memberof SpConfigObjectBeta
     */
    'importUrl'?: SpConfigUrlBeta;
    /**
     * Rights needed by the invoker of sp-config/import in order to import this type of object.
     * @type {string}
     * @memberof SpConfigObjectBeta
     */
    'importRight'?: string;
    /**
     * Pagination limit imposed by the target service for this object type.
     * @type {number}
     * @memberof SpConfigObjectBeta
     */
    'importLimit'?: number;
    /**
     * List of json paths within an exported object of this type that represent references that need to be resolved.
     * @type {Array<string>}
     * @memberof SpConfigObjectBeta
     */
    'referenceExtractors'?: Array<string> | null;
    /**
     * If true, this type of object will be JWS signed and cannot be modified before import.
     * @type {boolean}
     * @memberof SpConfigObjectBeta
     */
    'signatureRequired'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SpConfigObjectBeta
     */
    'legacyObject'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SpConfigObjectBeta
     */
    'onePerTenant'?: boolean;
}
/**
 * Format of resolver URLs for Object Configurations
 * @export
 * @interface SpConfigUrlBeta
 */
export interface SpConfigUrlBeta {
    /**
     * URL for the target object endpoint.
     * @type {string}
     * @memberof SpConfigUrlBeta
     */
    'url'?: string;
    /**
     * Any query parameters that are needed for the URL.
     * @type {object}
     * @memberof SpConfigUrlBeta
     */
    'query'?: object | null;
}
/**
 *
 * @export
 * @interface SplitBeta
 */
export interface SplitBeta {
    /**
     * This can be either a single character or a regex expression, and is used by the transform to identify the break point between two substrings in the incoming data
     * @type {string}
     * @memberof SplitBeta
     */
    'delimiter': string;
    /**
     * An integer value for the desired array element after the incoming data has been split into a list; the array is a 0-based object, so the first array element would be index 0, the second element would be index 1, etc.
     * @type {string}
     * @memberof SplitBeta
     */
    'index': string;
    /**
     * A boolean (true/false) value which indicates whether an exception should be thrown and returned as an output when an index is out of bounds with the resultant array (i.e., the provided index value is larger than the size of the array)   `true` - The transform should return \"IndexOutOfBoundsException\"   `false` - The transform should return null   If not provided, the transform will default to false and return a null
     * @type {boolean}
     * @memberof SplitBeta
     */
    'throws'?: boolean;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof SplitBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof SplitBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * Standard Log4j log level
 * @export
 * @enum {string}
 */
export declare const StandardLevelBeta: {
    readonly False: "false";
    readonly Fatal: "FATAL";
    readonly Error: "ERROR";
    readonly Warn: "WARN";
    readonly Info: "INFO";
    readonly Debug: "DEBUG";
    readonly Trace: "TRACE";
};
export type StandardLevelBeta = typeof StandardLevelBeta[keyof typeof StandardLevelBeta];
/**
 *
 * @export
 * @interface StartInvocationInputBeta
 */
export interface StartInvocationInputBeta {
    /**
     * Trigger ID
     * @type {string}
     * @memberof StartInvocationInputBeta
     */
    'triggerId'?: string;
    /**
     * Trigger input payload. Its schema is defined in the trigger definition.
     * @type {object}
     * @memberof StartInvocationInputBeta
     */
    'input'?: object;
    /**
     * JSON map of invocation metadata
     * @type {object}
     * @memberof StartInvocationInputBeta
     */
    'contentJson'?: object;
}
/**
 *
 * @export
 * @interface StaticBeta
 */
export interface StaticBeta {
    /**
     * This must evaluate to a JSON string, either through a fixed value or through conditional logic using the Apache Velocity Template Language.
     * @type {string}
     * @memberof StaticBeta
     */
    'values': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof StaticBeta
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 * Response model for connection check, configuration test and ping of source connectors.
 * @export
 * @interface StatusResponseBeta
 */
export interface StatusResponseBeta {
    /**
     * ID of the source
     * @type {string}
     * @memberof StatusResponseBeta
     */
    'id'?: string;
    /**
     * Name of the source
     * @type {string}
     * @memberof StatusResponseBeta
     */
    'name'?: string;
    /**
     * The status of the health check.
     * @type {string}
     * @memberof StatusResponseBeta
     */
    'status'?: StatusResponseBetaStatusEnum;
    /**
     * The number of milliseconds spent on the entire request.
     * @type {number}
     * @memberof StatusResponseBeta
     */
    'elapsedMillis'?: number;
    /**
     * The document contains the results of the health check. The schema of this document depends on the type of source used.
     * @type {object}
     * @memberof StatusResponseBeta
     */
    'details'?: object;
}
export declare const StatusResponseBetaStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Failure: "FAILURE";
};
export type StatusResponseBetaStatusEnum = typeof StatusResponseBetaStatusEnum[keyof typeof StatusResponseBetaStatusEnum];
/**
 *
 * @export
 * @interface SubscriptionBeta
 */
export interface SubscriptionBeta {
    /**
     * Subscription ID.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'id': string;
    /**
     * Subscription name.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'name': string;
    /**
     * Subscription description.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'description'?: string;
    /**
     * ID of trigger subscribed to.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'triggerId': string;
    /**
     * Trigger name of trigger subscribed to.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'triggerName': string;
    /**
     *
     * @type {SubscriptionTypeBeta}
     * @memberof SubscriptionBeta
     */
    'type': SubscriptionTypeBeta;
    /**
     * Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'responseDeadline'?: string;
    /**
     *
     * @type {HttpConfigBeta}
     * @memberof SubscriptionBeta
     */
    'httpConfig'?: HttpConfigBeta;
    /**
     *
     * @type {EventBridgeConfigBeta}
     * @memberof SubscriptionBeta
     */
    'eventBridgeConfig'?: EventBridgeConfigBeta;
    /**
     * Whether subscription should receive real-time trigger invocations or not. Test trigger invocations are always enabled regardless of this option.
     * @type {boolean}
     * @memberof SubscriptionBeta
     */
    'enabled': boolean;
    /**
     * JSONPath filter to conditionally invoke trigger when expression evaluates to true.
     * @type {string}
     * @memberof SubscriptionBeta
     */
    'filter'?: string;
}
/**
 * A JSONPatch Operation as defined by [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)
 * @export
 * @interface SubscriptionPatchRequestInnerBeta
 */
export interface SubscriptionPatchRequestInnerBeta {
    /**
     * The operation to be performed
     * @type {string}
     * @memberof SubscriptionPatchRequestInnerBeta
     */
    'op': SubscriptionPatchRequestInnerBetaOpEnum;
    /**
     * A string JSON Pointer representing the target path to an element to be affected by the operation
     * @type {string}
     * @memberof SubscriptionPatchRequestInnerBeta
     */
    'path': string;
    /**
     *
     * @type {SubscriptionPatchRequestInnerValueBeta}
     * @memberof SubscriptionPatchRequestInnerBeta
     */
    'value'?: SubscriptionPatchRequestInnerValueBeta;
}
export declare const SubscriptionPatchRequestInnerBetaOpEnum: {
    readonly Add: "add";
    readonly Remove: "remove";
    readonly Replace: "replace";
    readonly Move: "move";
    readonly Copy: "copy";
};
export type SubscriptionPatchRequestInnerBetaOpEnum = typeof SubscriptionPatchRequestInnerBetaOpEnum[keyof typeof SubscriptionPatchRequestInnerBetaOpEnum];
/**
 *
 * @export
 * @interface SubscriptionPatchRequestInnerValueAnyOfInnerBeta
 */
export interface SubscriptionPatchRequestInnerValueAnyOfInnerBeta {
}
/**
 * The value to be used for the operation, required for \"add\" and \"replace\" operations
 * @export
 * @interface SubscriptionPatchRequestInnerValueBeta
 */
export interface SubscriptionPatchRequestInnerValueBeta {
}
/**
 *
 * @export
 * @interface SubscriptionPostRequestBeta
 */
export interface SubscriptionPostRequestBeta {
    /**
     * Subscription name.
     * @type {string}
     * @memberof SubscriptionPostRequestBeta
     */
    'name': string;
    /**
     * Subscription description.
     * @type {string}
     * @memberof SubscriptionPostRequestBeta
     */
    'description'?: string;
    /**
     * ID of trigger subscribed to.
     * @type {string}
     * @memberof SubscriptionPostRequestBeta
     */
    'triggerId': string;
    /**
     *
     * @type {SubscriptionTypeBeta}
     * @memberof SubscriptionPostRequestBeta
     */
    'type': SubscriptionTypeBeta;
    /**
     * Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.
     * @type {string}
     * @memberof SubscriptionPostRequestBeta
     */
    'responseDeadline'?: string;
    /**
     *
     * @type {HttpConfigBeta}
     * @memberof SubscriptionPostRequestBeta
     */
    'httpConfig'?: HttpConfigBeta;
    /**
     *
     * @type {EventBridgeConfigBeta}
     * @memberof SubscriptionPostRequestBeta
     */
    'eventBridgeConfig'?: EventBridgeConfigBeta;
    /**
     * Whether subscription should receive real-time trigger invocations or not.  Test trigger invocations are always enabled regardless of this option.
     * @type {boolean}
     * @memberof SubscriptionPostRequestBeta
     */
    'enabled'?: boolean;
    /**
     * JSONPath filter to conditionally invoke trigger when expression evaluates to true.
     * @type {string}
     * @memberof SubscriptionPostRequestBeta
     */
    'filter'?: string;
}
/**
 *
 * @export
 * @interface SubscriptionPutRequestBeta
 */
export interface SubscriptionPutRequestBeta {
    /**
     * Subscription name.
     * @type {string}
     * @memberof SubscriptionPutRequestBeta
     */
    'name'?: string;
    /**
     * Subscription description.
     * @type {string}
     * @memberof SubscriptionPutRequestBeta
     */
    'description'?: string;
    /**
     *
     * @type {SubscriptionTypeBeta}
     * @memberof SubscriptionPutRequestBeta
     */
    'type'?: SubscriptionTypeBeta;
    /**
     * Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.
     * @type {string}
     * @memberof SubscriptionPutRequestBeta
     */
    'responseDeadline'?: string;
    /**
     *
     * @type {HttpConfigBeta}
     * @memberof SubscriptionPutRequestBeta
     */
    'httpConfig'?: HttpConfigBeta;
    /**
     *
     * @type {EventBridgeConfigBeta}
     * @memberof SubscriptionPutRequestBeta
     */
    'eventBridgeConfig'?: EventBridgeConfigBeta;
    /**
     * Whether subscription should receive real-time trigger invocations or not.  Test trigger invocations are always enabled regardless of this option.
     * @type {boolean}
     * @memberof SubscriptionPutRequestBeta
     */
    'enabled'?: boolean;
    /**
     * JSONPath filter to conditionally invoke trigger when expression evaluates to true.
     * @type {string}
     * @memberof SubscriptionPutRequestBeta
     */
    'filter'?: string;
}
/**
 * Subscription type. **NOTE** If type is EVENTBRIDGE, then eventBridgeConfig is required. If type is HTTP, then httpConfig is required.
 * @export
 * @enum {string}
 */
export declare const SubscriptionTypeBeta: {
    readonly Http: "HTTP";
    readonly Eventbridge: "EVENTBRIDGE";
    readonly Inline: "INLINE";
    readonly Script: "SCRIPT";
    readonly Workflow: "WORKFLOW";
};
export type SubscriptionTypeBeta = typeof SubscriptionTypeBeta[keyof typeof SubscriptionTypeBeta];
/**
 *
 * @export
 * @interface SubstringBeta
 */
export interface SubstringBeta {
    /**
     * The index of the first character to include in the returned substring.   If `begin` is set to -1, the transform will begin at character 0 of the input data
     * @type {number}
     * @memberof SubstringBeta
     */
    'begin': number;
    /**
     * This integer value is the number of characters to add to the begin attribute when returning a substring.   This attribute is only used if begin is not -1.
     * @type {number}
     * @memberof SubstringBeta
     */
    'beginOffset'?: number;
    /**
     * The index of the first character to exclude from the returned substring.  If end is -1 or not provided at all, the substring transform will return everything up to the end of the input string.
     * @type {number}
     * @memberof SubstringBeta
     */
    'end'?: number;
    /**
     * This integer value is the number of characters to add to the end attribute when returning a substring.   This attribute is only used if end is provided and is not -1.
     * @type {number}
     * @memberof SubstringBeta
     */
    'endOffset'?: number;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof SubstringBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof SubstringBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface TaggedObjectBeta
 */
export interface TaggedObjectBeta {
    /**
     *
     * @type {TaggedObjectObjectRefBeta}
     * @memberof TaggedObjectBeta
     */
    'objectRef'?: TaggedObjectObjectRefBeta;
    /**
     * Labels to be applied to an Object
     * @type {Array<string>}
     * @memberof TaggedObjectBeta
     */
    'tags'?: Array<string>;
}
/**
 *
 * @export
 * @interface TaggedObjectDtoBeta
 */
export interface TaggedObjectDtoBeta {
    /**
     * DTO type
     * @type {string}
     * @memberof TaggedObjectDtoBeta
     */
    'type'?: TaggedObjectDtoBetaTypeEnum;
    /**
     * ID of the object this reference applies to
     * @type {string}
     * @memberof TaggedObjectDtoBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object this reference applies to
     * @type {string}
     * @memberof TaggedObjectDtoBeta
     */
    'name'?: string | null;
}
export declare const TaggedObjectDtoBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Application: "APPLICATION";
    readonly Campaign: "CAMPAIGN";
    readonly Entitlement: "ENTITLEMENT";
    readonly Identity: "IDENTITY";
    readonly Role: "ROLE";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
};
export type TaggedObjectDtoBetaTypeEnum = typeof TaggedObjectDtoBetaTypeEnum[keyof typeof TaggedObjectDtoBetaTypeEnum];
/**
 *
 * @export
 * @interface TaggedObjectObjectRefBeta
 */
export interface TaggedObjectObjectRefBeta {
    /**
     * DTO type
     * @type {string}
     * @memberof TaggedObjectObjectRefBeta
     */
    'type'?: TaggedObjectObjectRefBetaTypeEnum;
    /**
     * ID of the object to which this reference applies
     * @type {string}
     * @memberof TaggedObjectObjectRefBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of the object to which this reference applies
     * @type {string}
     * @memberof TaggedObjectObjectRefBeta
     */
    'name'?: string | null;
}
export declare const TaggedObjectObjectRefBetaTypeEnum: {
    readonly AccessProfile: "ACCESS_PROFILE";
    readonly Application: "APPLICATION";
    readonly Campaign: "CAMPAIGN";
    readonly Entitlement: "ENTITLEMENT";
    readonly Identity: "IDENTITY";
    readonly Role: "ROLE";
    readonly SodPolicy: "SOD_POLICY";
    readonly Source: "SOURCE";
};
export type TaggedObjectObjectRefBetaTypeEnum = typeof TaggedObjectObjectRefBetaTypeEnum[keyof typeof TaggedObjectObjectRefBetaTypeEnum];
/**
 *
 * @export
 * @interface TargetBeta
 */
export interface TargetBeta {
    /**
     * Target ID
     * @type {string}
     * @memberof TargetBeta
     */
    'id'?: string;
    /**
     * Target type
     * @type {string}
     * @memberof TargetBeta
     */
    'type'?: TargetBetaTypeEnum;
    /**
     * Target name
     * @type {string}
     * @memberof TargetBeta
     */
    'name'?: string;
}
export declare const TargetBetaTypeEnum: {
    readonly Application: "APPLICATION";
    readonly Identity: "IDENTITY";
    readonly Null: "null";
};
export type TargetBetaTypeEnum = typeof TargetBetaTypeEnum[keyof typeof TargetBetaTypeEnum];
/**
 * Definition of a type of task, used to invoke tasks
 * @export
 * @interface TaskDefinitionSummaryBeta
 */
export interface TaskDefinitionSummaryBeta {
    /**
     * System-generated unique ID of the TaskDefinition
     * @type {string}
     * @memberof TaskDefinitionSummaryBeta
     */
    'id': string;
    /**
     * Name of the TaskDefinition
     * @type {string}
     * @memberof TaskDefinitionSummaryBeta
     */
    'uniqueName': string;
    /**
     * Description of the TaskDefinition
     * @type {string}
     * @memberof TaskDefinitionSummaryBeta
     */
    'description': string;
    /**
     * Name of the parent of the TaskDefinition
     * @type {string}
     * @memberof TaskDefinitionSummaryBeta
     */
    'parentName': string;
    /**
     * Executor of the TaskDefinition
     * @type {string}
     * @memberof TaskDefinitionSummaryBeta
     */
    'executor': string | null;
    /**
     * Formal parameters of the TaskDefinition, without values
     * @type {{ [key: string]: any; }}
     * @memberof TaskDefinitionSummaryBeta
     */
    'arguments': {
        [key: string]: any;
    };
}
/**
 * Task result.
 * @export
 * @interface TaskResultDtoBeta
 */
export interface TaskResultDtoBeta {
    /**
     * Task result DTO type.
     * @type {string}
     * @memberof TaskResultDtoBeta
     */
    'type'?: TaskResultDtoBetaTypeEnum;
    /**
     * Task result ID.
     * @type {string}
     * @memberof TaskResultDtoBeta
     */
    'id'?: string;
    /**
     * Task result display name.
     * @type {string}
     * @memberof TaskResultDtoBeta
     */
    'name'?: string | null;
}
export declare const TaskResultDtoBetaTypeEnum: {
    readonly TaskResult: "TASK_RESULT";
};
export type TaskResultDtoBetaTypeEnum = typeof TaskResultDtoBetaTypeEnum[keyof typeof TaskResultDtoBetaTypeEnum];
/**
 *
 * @export
 * @interface TaskResultResponseBeta
 */
export interface TaskResultResponseBeta {
    /**
     * the type of response reference
     * @type {string}
     * @memberof TaskResultResponseBeta
     */
    'type'?: string;
    /**
     * the task ID
     * @type {string}
     * @memberof TaskResultResponseBeta
     */
    'id'?: string;
    /**
     * the task name (not used in this endpoint, always null)
     * @type {string}
     * @memberof TaskResultResponseBeta
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface TaskResultSimplifiedBeta
 */
export interface TaskResultSimplifiedBeta {
    /**
     * Task identifier
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'id'?: string;
    /**
     * Task name
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'name'?: string;
    /**
     * Task description
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'description'?: string;
    /**
     * User or process who launched the task
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'launcher'?: string;
    /**
     * Date time of completion
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'completed'?: string;
    /**
     * Date time when the task was launched
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'launched'?: string;
    /**
     * Task result status
     * @type {string}
     * @memberof TaskResultSimplifiedBeta
     */
    'completionStatus'?: TaskResultSimplifiedBetaCompletionStatusEnum;
}
export declare const TaskResultSimplifiedBetaCompletionStatusEnum: {
    readonly Success: "Success";
    readonly Warning: "Warning";
    readonly Error: "Error";
    readonly Terminated: "Terminated";
    readonly TempError: "TempError";
};
export type TaskResultSimplifiedBetaCompletionStatusEnum = typeof TaskResultSimplifiedBetaCompletionStatusEnum[keyof typeof TaskResultSimplifiedBetaCompletionStatusEnum];
/**
 * Task return details
 * @export
 * @interface TaskReturnDetailsBeta
 */
export interface TaskReturnDetailsBeta {
    /**
     * Display name of the TaskReturnDetails
     * @type {string}
     * @memberof TaskReturnDetailsBeta
     */
    'name': string;
    /**
     * Attribute the TaskReturnDetails is for
     * @type {string}
     * @memberof TaskReturnDetailsBeta
     */
    'attributeName': string;
}
/**
 * Details and current status of a specific task
 * @export
 * @interface TaskStatusBeta
 */
export interface TaskStatusBeta {
    /**
     * System-generated unique ID of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'id': string;
    /**
     * Type of task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'type': TaskStatusBetaTypeEnum;
    /**
     * Name of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'uniqueName': string;
    /**
     * Description of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'description': string;
    /**
     * Name of the parent of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'parentName': string | null;
    /**
     * Service to execute the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'launcher': string;
    /**
     *
     * @type {TargetBeta}
     * @memberof TaskStatusBeta
     */
    'target'?: TargetBeta | null;
    /**
     * Creation date of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'created': string;
    /**
     * Last modification date of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'modified': string;
    /**
     * Launch date of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'launched': string | null;
    /**
     * Completion date of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'completed': string | null;
    /**
     * Completion status of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'completionStatus': TaskStatusBetaCompletionStatusEnum;
    /**
     * Messages associated with the task this TaskStatus represents
     * @type {Array<TaskStatusMessageBeta>}
     * @memberof TaskStatusBeta
     */
    'messages': Array<TaskStatusMessageBeta>;
    /**
     * Return values from the task this TaskStatus represents
     * @type {Array<TaskReturnDetailsBeta>}
     * @memberof TaskStatusBeta
     */
    'returns': Array<TaskReturnDetailsBeta>;
    /**
     * Attributes of the task this TaskStatus represents
     * @type {{ [key: string]: any; }}
     * @memberof TaskStatusBeta
     */
    'attributes': {
        [key: string]: any;
    };
    /**
     * Current progress of the task this TaskStatus represents
     * @type {string}
     * @memberof TaskStatusBeta
     */
    'progress': string | null;
    /**
     * Current percentage completion of the task this TaskStatus represents
     * @type {number}
     * @memberof TaskStatusBeta
     */
    'percentComplete': number;
    /**
     *
     * @type {TaskDefinitionSummaryBeta}
     * @memberof TaskStatusBeta
     */
    'taskDefinitionSummary'?: TaskDefinitionSummaryBeta;
}
export declare const TaskStatusBetaTypeEnum: {
    readonly Quartz: "QUARTZ";
    readonly Qpoc: "QPOC";
    readonly QueuedTask: "QUEUED_TASK";
};
export type TaskStatusBetaTypeEnum = typeof TaskStatusBetaTypeEnum[keyof typeof TaskStatusBetaTypeEnum];
export declare const TaskStatusBetaCompletionStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Warning: "WARNING";
    readonly Error: "ERROR";
    readonly Terminated: "TERMINATED";
    readonly Temperror: "TEMPERROR";
    readonly Null: "null";
};
export type TaskStatusBetaCompletionStatusEnum = typeof TaskStatusBetaCompletionStatusEnum[keyof typeof TaskStatusBetaCompletionStatusEnum];
/**
 * TaskStatus Message
 * @export
 * @interface TaskStatusMessageBeta
 */
export interface TaskStatusMessageBeta {
    /**
     * Type of the message
     * @type {string}
     * @memberof TaskStatusMessageBeta
     */
    'type': TaskStatusMessageBetaTypeEnum;
    /**
     *
     * @type {LocalizedMessageBeta}
     * @memberof TaskStatusMessageBeta
     */
    'localizedText': LocalizedMessageBeta | null;
    /**
     * Key of the message
     * @type {string}
     * @memberof TaskStatusMessageBeta
     */
    'key': string;
    /**
     * Message parameters for internationalization
     * @type {Array<object>}
     * @memberof TaskStatusMessageBeta
     */
    'parameters': Array<object> | null;
}
export declare const TaskStatusMessageBetaTypeEnum: {
    readonly Info: "INFO";
    readonly Warn: "WARN";
    readonly Error: "ERROR";
};
export type TaskStatusMessageBetaTypeEnum = typeof TaskStatusMessageBetaTypeEnum[keyof typeof TaskStatusMessageBetaTypeEnum];
/**
 *
 * @export
 * @interface TemplateBulkDeleteDtoBeta
 */
export interface TemplateBulkDeleteDtoBeta {
    /**
     *
     * @type {string}
     * @memberof TemplateBulkDeleteDtoBeta
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof TemplateBulkDeleteDtoBeta
     */
    'medium'?: TemplateBulkDeleteDtoBetaMediumEnum;
    /**
     * The locale for the message text, a BCP 47 language tag.
     * @type {string}
     * @memberof TemplateBulkDeleteDtoBeta
     */
    'locale'?: string;
}
export declare const TemplateBulkDeleteDtoBetaMediumEnum: {
    readonly Email: "EMAIL";
    readonly Phone: "PHONE";
    readonly Sms: "SMS";
};
export type TemplateBulkDeleteDtoBetaMediumEnum = typeof TemplateBulkDeleteDtoBetaMediumEnum[keyof typeof TemplateBulkDeleteDtoBetaMediumEnum];
/**
 *
 * @export
 * @interface TemplateDtoBeta
 */
export interface TemplateDtoBeta {
    /**
     * The key of the template
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'key': string;
    /**
     * The name of the Task Manager Subscription
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'name'?: string;
    /**
     * The message medium. More mediums may be added in the future.
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'medium': TemplateDtoBetaMediumEnum;
    /**
     * The locale for the message text, a BCP 47 language tag.
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'locale': string;
    /**
     * The subject line in the template
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'subject'?: string;
    /**
     * The header value is now located within the body field. If included with non-null values, will result in a 400.
     * @type {string}
     * @memberof TemplateDtoBeta
     * @deprecated
     */
    'header'?: string | null;
    /**
     * The body in the template
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'body'?: string;
    /**
     * The footer value is now located within the body field. If included with non-null values, will result in a 400.
     * @type {string}
     * @memberof TemplateDtoBeta
     * @deprecated
     */
    'footer'?: string | null;
    /**
     * The \"From:\" address in the template
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'from'?: string;
    /**
     * The \"Reply To\" line in the template
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'replyTo'?: string;
    /**
     * The description in the template
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'description'?: string;
    /**
     * This is auto-generated.
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'id'?: string;
    /**
     * The time when this template is created. This is auto-generated.
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'created'?: string;
    /**
     * The time when this template was last modified. This is auto-generated.
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'modified'?: string;
    /**
     *
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'slackTemplate'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateDtoBeta
     */
    'teamsTemplate'?: string | null;
}
export declare const TemplateDtoBetaMediumEnum: {
    readonly Email: "EMAIL";
    readonly Phone: "PHONE";
    readonly Sms: "SMS";
    readonly Slack: "SLACK";
    readonly Teams: "TEAMS";
};
export type TemplateDtoBetaMediumEnum = typeof TemplateDtoBetaMediumEnum[keyof typeof TemplateDtoBetaMediumEnum];
/**
 *
 * @export
 * @interface TemplateDtoDefaultBeta
 */
export interface TemplateDtoDefaultBeta {
    /**
     * The key of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'key'?: string;
    /**
     * The name of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'name'?: string;
    /**
     * The message medium. More mediums may be added in the future.
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'medium'?: TemplateDtoDefaultBetaMediumEnum;
    /**
     * The locale for the message text, a BCP 47 language tag.
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'locale'?: string;
    /**
     * The subject of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'subject'?: string | null;
    /**
     * The header value is now located within the body field. If included with non-null values, will result in a 400.
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     * @deprecated
     */
    'header'?: string | null;
    /**
     * The body of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'body'?: string;
    /**
     * The footer value is now located within the body field. If included with non-null values, will result in a 400.
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     * @deprecated
     */
    'footer'?: string | null;
    /**
     * The \"From:\" address of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'from'?: string | null;
    /**
     * The \"Reply To\" field of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'replyTo'?: string | null;
    /**
     * The description of the default template
     * @type {string}
     * @memberof TemplateDtoDefaultBeta
     */
    'description'?: string | null;
    /**
     *
     * @type {TemplateSlackBeta}
     * @memberof TemplateDtoDefaultBeta
     */
    'slackTemplate'?: TemplateSlackBeta | null;
    /**
     *
     * @type {TemplateTeamsBeta}
     * @memberof TemplateDtoDefaultBeta
     */
    'teamsTemplate'?: TemplateTeamsBeta | null;
}
export declare const TemplateDtoDefaultBetaMediumEnum: {
    readonly Email: "EMAIL";
    readonly Phone: "PHONE";
    readonly Sms: "SMS";
    readonly Slack: "SLACK";
    readonly Teams: "TEAMS";
};
export type TemplateDtoDefaultBetaMediumEnum = typeof TemplateDtoDefaultBetaMediumEnum[keyof typeof TemplateDtoDefaultBetaMediumEnum];
/**
 *
 * @export
 * @interface TemplateSlackAutoApprovalDataBeta
 */
export interface TemplateSlackAutoApprovalDataBeta {
    /**
     *
     * @type {string}
     * @memberof TemplateSlackAutoApprovalDataBeta
     */
    'isAutoApproved'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackAutoApprovalDataBeta
     */
    'itemId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackAutoApprovalDataBeta
     */
    'itemType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackAutoApprovalDataBeta
     */
    'autoApprovalMessageJSON'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackAutoApprovalDataBeta
     */
    'autoApprovalTitle'?: string | null;
}
/**
 *
 * @export
 * @interface TemplateSlackBeta
 */
export interface TemplateSlackBeta {
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'key'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'text'?: string;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'blocks'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'attachments'?: string;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'notificationType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'approvalId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'requestId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackBeta
     */
    'requestedById'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof TemplateSlackBeta
     */
    'isSubscription'?: boolean | null;
    /**
     *
     * @type {TemplateSlackAutoApprovalDataBeta}
     * @memberof TemplateSlackBeta
     */
    'autoApprovalData'?: TemplateSlackAutoApprovalDataBeta | null;
    /**
     *
     * @type {TemplateSlackCustomFieldsBeta}
     * @memberof TemplateSlackBeta
     */
    'customFields'?: TemplateSlackCustomFieldsBeta | null;
}
/**
 *
 * @export
 * @interface TemplateSlackCustomFieldsBeta
 */
export interface TemplateSlackCustomFieldsBeta {
    /**
     *
     * @type {string}
     * @memberof TemplateSlackCustomFieldsBeta
     */
    'requestType'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackCustomFieldsBeta
     */
    'containsDeny'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackCustomFieldsBeta
     */
    'campaignId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateSlackCustomFieldsBeta
     */
    'campaignStatus'?: string | null;
}
/**
 *
 * @export
 * @interface TemplateTeamsBeta
 */
export interface TemplateTeamsBeta {
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'key'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'title'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'text'?: string;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'messageJSON'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof TemplateTeamsBeta
     */
    'isSubscription'?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'approvalId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'requestId'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'requestedById'?: string | null;
    /**
     *
     * @type {string}
     * @memberof TemplateTeamsBeta
     */
    'notificationType'?: string | null;
    /**
     *
     * @type {TemplateSlackAutoApprovalDataBeta}
     * @memberof TemplateTeamsBeta
     */
    'autoApprovalData'?: TemplateSlackAutoApprovalDataBeta | null;
    /**
     *
     * @type {TemplateSlackCustomFieldsBeta}
     * @memberof TemplateTeamsBeta
     */
    'customFields'?: TemplateSlackCustomFieldsBeta | null;
}
/**
 *
 * @export
 * @interface TenantBeta
 */
export interface TenantBeta {
    /**
     * The unique identifier for the Tenant
     * @type {string}
     * @memberof TenantBeta
     */
    'id'?: string;
    /**
     * Abbreviated name of the Tenant
     * @type {string}
     * @memberof TenantBeta
     */
    'name'?: string;
    /**
     * Human-readable name of the Tenant
     * @type {string}
     * @memberof TenantBeta
     */
    'fullName'?: string;
    /**
     * Deployment pod for the Tenant
     * @type {string}
     * @memberof TenantBeta
     */
    'pod'?: string;
    /**
     * Deployment region for the Tenant
     * @type {string}
     * @memberof TenantBeta
     */
    'region'?: string;
    /**
     * Description of the Tenant
     * @type {string}
     * @memberof TenantBeta
     */
    'description'?: string;
    /**
     *
     * @type {Array<ProductBeta>}
     * @memberof TenantBeta
     */
    'products'?: Array<ProductBeta>;
}
/**
 * Details of any tenant-wide Reassignment Configurations (eg. enabled/disabled)
 * @export
 * @interface TenantConfigurationDetailsBeta
 */
export interface TenantConfigurationDetailsBeta {
    /**
     * Flag to determine if Reassignment Configuration is enabled or disabled for a tenant.  When this flag is set to true, Reassignment Configuration is disabled.
     * @type {boolean}
     * @memberof TenantConfigurationDetailsBeta
     */
    'disabled'?: boolean | null;
}
/**
 * Tenant-wide Reassignment Configuration settings
 * @export
 * @interface TenantConfigurationRequestBeta
 */
export interface TenantConfigurationRequestBeta {
    /**
     *
     * @type {TenantConfigurationDetailsBeta}
     * @memberof TenantConfigurationRequestBeta
     */
    'configDetails'?: TenantConfigurationDetailsBeta;
}
/**
 * Tenant-wide Reassignment Configuration settings
 * @export
 * @interface TenantConfigurationResponseBeta
 */
export interface TenantConfigurationResponseBeta {
    /**
     *
     * @type {AuditDetailsBeta}
     * @memberof TenantConfigurationResponseBeta
     */
    'auditDetails'?: AuditDetailsBeta;
    /**
     *
     * @type {TenantConfigurationDetailsBeta}
     * @memberof TenantConfigurationResponseBeta
     */
    'configDetails'?: TenantConfigurationDetailsBeta;
}
/**
 *
 * @export
 * @interface TenantUiMetadataItemResponseBeta
 */
export interface TenantUiMetadataItemResponseBeta {
    /**
     * Parameter that organizational administrators can adjust to permit another domain to encapsulate IDN within an iframe. If you would like to reset the value use \"null\". It will only allow include into iframe non authenticated portions of the product, such as password reset.
     * @type {string}
     * @memberof TenantUiMetadataItemResponseBeta
     */
    'iframeWhiteList'?: string | null;
    /**
     * Descriptor for the username input field. If you would like to reset the value use \"null\".
     * @type {string}
     * @memberof TenantUiMetadataItemResponseBeta
     */
    'usernameLabel'?: string | null;
    /**
     * Placeholder text displayed in the username input field. If you would like to reset the value use \"null\".
     * @type {string}
     * @memberof TenantUiMetadataItemResponseBeta
     */
    'usernameEmptyText'?: string | null;
}
/**
 *
 * @export
 * @interface TenantUiMetadataItemUpdateRequestBeta
 */
export interface TenantUiMetadataItemUpdateRequestBeta {
    /**
     * Parameter that organizational administrators can adjust to permit another domain to encapsulate IDN within an iframe. If you would like to reset the value use \"null\". It will only allow include into iframe non authenticated portions of the product, such as password reset.
     * @type {string}
     * @memberof TenantUiMetadataItemUpdateRequestBeta
     */
    'iframeWhiteList'?: string | null;
    /**
     * Descriptor for the username input field. If you would like to reset the value use \"null\".
     * @type {string}
     * @memberof TenantUiMetadataItemUpdateRequestBeta
     */
    'usernameLabel'?: string | null;
    /**
     * Placeholder text displayed in the username input field. If you would like to reset the value use \"null\".
     * @type {string}
     * @memberof TenantUiMetadataItemUpdateRequestBeta
     */
    'usernameEmptyText'?: string | null;
}
/**
 *
 * @export
 * @interface TestExternalExecuteWorkflow200ResponseBeta
 */
export interface TestExternalExecuteWorkflow200ResponseBeta {
    /**
     * The input that was received
     * @type {object}
     * @memberof TestExternalExecuteWorkflow200ResponseBeta
     */
    'payload'?: object;
}
/**
 *
 * @export
 * @interface TestExternalExecuteWorkflowRequestBeta
 */
export interface TestExternalExecuteWorkflowRequestBeta {
    /**
     * The test input for the workflow
     * @type {object}
     * @memberof TestExternalExecuteWorkflowRequestBeta
     */
    'input'?: object;
}
/**
 *
 * @export
 * @interface TestInvocationBeta
 */
export interface TestInvocationBeta {
    /**
     * Trigger ID
     * @type {string}
     * @memberof TestInvocationBeta
     */
    'triggerId': string;
    /**
     * Mock input to use for test invocation.  This must adhere to the input schema defined in the trigger being invoked.  If this property is omitted, then the default trigger sample payload will be sent.
     * @type {object}
     * @memberof TestInvocationBeta
     */
    'input'?: object;
    /**
     * JSON map of invocation metadata.
     * @type {object}
     * @memberof TestInvocationBeta
     */
    'contentJson': object;
    /**
     * Only send the test event to the subscription IDs listed.  If omitted, the test event will be sent to all subscribers.
     * @type {Array<string>}
     * @memberof TestInvocationBeta
     */
    'subscriptionIds'?: Array<string>;
}
/**
 *
 * @export
 * @interface TestWorkflow200ResponseBeta
 */
export interface TestWorkflow200ResponseBeta {
    /**
     * The workflow execution id
     * @type {string}
     * @memberof TestWorkflow200ResponseBeta
     */
    'workflowExecutionId'?: string;
}
/**
 *
 * @export
 * @interface TestWorkflowRequestBeta
 */
export interface TestWorkflowRequestBeta {
    /**
     * The test input for the workflow.
     * @type {object}
     * @memberof TestWorkflowRequestBeta
     */
    'input': object;
}
/**
 *
 * @export
 * @interface TokenAuthRequestBeta
 */
export interface TokenAuthRequestBeta {
    /**
     * Token value
     * @type {string}
     * @memberof TokenAuthRequestBeta
     */
    'token': string;
    /**
     * User alias from table spt_identity field named \'name\'
     * @type {string}
     * @memberof TokenAuthRequestBeta
     */
    'userAlias': string;
    /**
     * Token delivery type
     * @type {string}
     * @memberof TokenAuthRequestBeta
     */
    'deliveryType': TokenAuthRequestBetaDeliveryTypeEnum;
}
export declare const TokenAuthRequestBetaDeliveryTypeEnum: {
    readonly SmsPersonal: "SMS_PERSONAL";
    readonly VoicePersonal: "VOICE_PERSONAL";
    readonly SmsWork: "SMS_WORK";
    readonly VoiceWork: "VOICE_WORK";
    readonly EmailWork: "EMAIL_WORK";
    readonly EmailPersonal: "EMAIL_PERSONAL";
};
export type TokenAuthRequestBetaDeliveryTypeEnum = typeof TokenAuthRequestBetaDeliveryTypeEnum[keyof typeof TokenAuthRequestBetaDeliveryTypeEnum];
/**
 *
 * @export
 * @interface TokenAuthResponseBeta
 */
export interface TokenAuthResponseBeta {
    /**
     * MFA Authentication status
     * @type {string}
     * @memberof TokenAuthResponseBeta
     */
    'status'?: TokenAuthResponseBetaStatusEnum;
}
export declare const TokenAuthResponseBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
    readonly Lockout: "LOCKOUT";
    readonly NotEnoughData: "NOT_ENOUGH_DATA";
};
export type TokenAuthResponseBetaStatusEnum = typeof TokenAuthResponseBetaStatusEnum[keyof typeof TokenAuthResponseBetaStatusEnum];
/**
 * @type TransformAttributesBeta
 * Meta-data about the transform. Values in this list are specific to the type of transform to be executed.
 * @export
 */
export type TransformAttributesBeta = AccountAttributeBeta | Base64DecodeBeta | Base64EncodeBeta | ConcatenationBeta | ConditionalBeta | DateCompareBeta | DateFormatBeta | DateMathBeta | DecomposeDiacriticalMarksBeta | E164phoneBeta | FirstValidBeta | ISO3166Beta | IdentityAttribute1Beta | IndexOfBeta | LeftPadBeta | LookupBeta | LowerBeta | NameNormalizerBeta | RandomAlphaNumericBeta | RandomNumericBeta | ReferenceBeta | ReplaceAllBeta | ReplaceBeta | RightPadBeta | RuleBeta | SplitBeta | StaticBeta | SubstringBeta | TrimBeta | UUIDGeneratorBeta | UpperBeta;
/**
 * The representation of an internally- or customer-defined transform.
 * @export
 * @interface TransformBeta
 */
export interface TransformBeta {
    /**
     * Unique name of this transform
     * @type {string}
     * @memberof TransformBeta
     */
    'name': string;
    /**
     * The type of transform operation
     * @type {string}
     * @memberof TransformBeta
     */
    'type': TransformBetaTypeEnum;
    /**
     *
     * @type {TransformAttributesBeta}
     * @memberof TransformBeta
     */
    'attributes': TransformAttributesBeta | null;
}
export declare const TransformBetaTypeEnum: {
    readonly AccountAttribute: "accountAttribute";
    readonly Base64Decode: "base64Decode";
    readonly Base64Encode: "base64Encode";
    readonly Concat: "concat";
    readonly Conditional: "conditional";
    readonly DateCompare: "dateCompare";
    readonly DateFormat: "dateFormat";
    readonly DateMath: "dateMath";
    readonly DecomposeDiacriticalMarks: "decomposeDiacriticalMarks";
    readonly E164phone: "e164phone";
    readonly FirstValid: "firstValid";
    readonly Rule: "rule";
    readonly IdentityAttribute: "identityAttribute";
    readonly IndexOf: "indexOf";
    readonly Iso3166: "iso3166";
    readonly LastIndexOf: "lastIndexOf";
    readonly LeftPad: "leftPad";
    readonly Lookup: "lookup";
    readonly Lower: "lower";
    readonly NormalizeNames: "normalizeNames";
    readonly RandomAlphaNumeric: "randomAlphaNumeric";
    readonly RandomNumeric: "randomNumeric";
    readonly Reference: "reference";
    readonly ReplaceAll: "replaceAll";
    readonly Replace: "replace";
    readonly RightPad: "rightPad";
    readonly Split: "split";
    readonly Static: "static";
    readonly Substring: "substring";
    readonly Trim: "trim";
    readonly Upper: "upper";
    readonly UsernameGenerator: "usernameGenerator";
    readonly Uuid: "uuid";
    readonly DisplayName: "displayName";
    readonly Rfc5646: "rfc5646";
};
export type TransformBetaTypeEnum = typeof TransformBetaTypeEnum[keyof typeof TransformBetaTypeEnum];
/**
 *
 * @export
 * @interface TransformDefinition1AttributesValueBeta
 */
export interface TransformDefinition1AttributesValueBeta {
}
/**
 *
 * @export
 * @interface TransformDefinition1Beta
 */
export interface TransformDefinition1Beta {
    /**
     * The type of the transform definition.
     * @type {string}
     * @memberof TransformDefinition1Beta
     */
    'type'?: string;
    /**
     * Arbitrary key-value pairs to store any metadata for the object
     * @type {{ [key: string]: TransformDefinition1AttributesValueBeta; }}
     * @memberof TransformDefinition1Beta
     */
    'attributes'?: {
        [key: string]: TransformDefinition1AttributesValueBeta;
    };
}
/**
 *
 * @export
 * @interface TransformDefinitionBeta
 */
export interface TransformDefinitionBeta {
    /**
     * The type of the transform definition.
     * @type {string}
     * @memberof TransformDefinitionBeta
     */
    'type'?: string;
    /**
     * Arbitrary key-value pairs to store any metadata for the object
     * @type {{ [key: string]: any; }}
     * @memberof TransformDefinitionBeta
     */
    'attributes'?: {
        [key: string]: any;
    } | null;
}
/**
 *
 * @export
 * @interface TransformReadAllOfBeta
 */
export interface TransformReadAllOfBeta {
    /**
     * Unique ID of this transform
     * @type {string}
     * @memberof TransformReadAllOfBeta
     */
    'id': string;
    /**
     * Indicates whether this is an internal SailPoint-created transform or a customer-created transform
     * @type {boolean}
     * @memberof TransformReadAllOfBeta
     */
    'internal': boolean;
}
/**
 *
 * @export
 * @interface TransformReadBeta
 */
export interface TransformReadBeta {
    /**
     * Unique name of this transform
     * @type {string}
     * @memberof TransformReadBeta
     */
    'name': string;
    /**
     * The type of transform operation
     * @type {string}
     * @memberof TransformReadBeta
     */
    'type': TransformReadBetaTypeEnum;
    /**
     *
     * @type {TransformAttributesBeta}
     * @memberof TransformReadBeta
     */
    'attributes': TransformAttributesBeta | null;
    /**
     * Unique ID of this transform
     * @type {string}
     * @memberof TransformReadBeta
     */
    'id': string;
    /**
     * Indicates whether this is an internal SailPoint-created transform or a customer-created transform
     * @type {boolean}
     * @memberof TransformReadBeta
     */
    'internal': boolean;
}
export declare const TransformReadBetaTypeEnum: {
    readonly AccountAttribute: "accountAttribute";
    readonly Base64Decode: "base64Decode";
    readonly Base64Encode: "base64Encode";
    readonly Concat: "concat";
    readonly Conditional: "conditional";
    readonly DateCompare: "dateCompare";
    readonly DateFormat: "dateFormat";
    readonly DateMath: "dateMath";
    readonly DecomposeDiacriticalMarks: "decomposeDiacriticalMarks";
    readonly E164phone: "e164phone";
    readonly FirstValid: "firstValid";
    readonly Rule: "rule";
    readonly IdentityAttribute: "identityAttribute";
    readonly IndexOf: "indexOf";
    readonly Iso3166: "iso3166";
    readonly LastIndexOf: "lastIndexOf";
    readonly LeftPad: "leftPad";
    readonly Lookup: "lookup";
    readonly Lower: "lower";
    readonly NormalizeNames: "normalizeNames";
    readonly RandomAlphaNumeric: "randomAlphaNumeric";
    readonly RandomNumeric: "randomNumeric";
    readonly Reference: "reference";
    readonly ReplaceAll: "replaceAll";
    readonly Replace: "replace";
    readonly RightPad: "rightPad";
    readonly Split: "split";
    readonly Static: "static";
    readonly Substring: "substring";
    readonly Trim: "trim";
    readonly Upper: "upper";
    readonly UsernameGenerator: "usernameGenerator";
    readonly Uuid: "uuid";
    readonly DisplayName: "displayName";
    readonly Rfc5646: "rfc5646";
};
export type TransformReadBetaTypeEnum = typeof TransformReadBetaTypeEnum[keyof typeof TransformReadBetaTypeEnum];
/**
 *
 * @export
 * @interface TransformRuleBeta
 */
export interface TransformRuleBeta {
    /**
     * This is the name of the Transform rule that needs to be invoked by the transform
     * @type {string}
     * @memberof TransformRuleBeta
     */
    'name': string;
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof TransformRuleBeta
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface TranslationMessageBeta
 */
export interface TranslationMessageBeta {
    /**
     * The key of the translation message
     * @type {string}
     * @memberof TranslationMessageBeta
     */
    'key'?: string;
    /**
     * The values corresponding to the translation messages
     * @type {Array<string>}
     * @memberof TranslationMessageBeta
     */
    'values'?: Array<string>;
}
/**
 *
 * @export
 * @interface TriggerBeta
 */
export interface TriggerBeta {
    /**
     * Unique identifier of the trigger.
     * @type {string}
     * @memberof TriggerBeta
     */
    'id': string;
    /**
     * Trigger Name.
     * @type {string}
     * @memberof TriggerBeta
     */
    'name': string;
    /**
     *
     * @type {TriggerTypeBeta}
     * @memberof TriggerBeta
     */
    'type': TriggerTypeBeta;
    /**
     * Trigger Description.
     * @type {string}
     * @memberof TriggerBeta
     */
    'description'?: string;
    /**
     * The JSON schema of the payload that will be sent by the trigger to the subscribed service.
     * @type {string}
     * @memberof TriggerBeta
     */
    'inputSchema': string;
    /**
     *
     * @type {TriggerExampleInputBeta}
     * @memberof TriggerBeta
     */
    'exampleInput': TriggerExampleInputBeta;
    /**
     * The JSON schema of the response that will be sent by the subscribed service to the trigger in response to an event.  This only applies to a trigger type of `REQUEST_RESPONSE`.
     * @type {string}
     * @memberof TriggerBeta
     */
    'outputSchema'?: string | null;
    /**
     *
     * @type {TriggerExampleOutputBeta}
     * @memberof TriggerBeta
     */
    'exampleOutput'?: TriggerExampleOutputBeta | null;
}
/**
 * @type TriggerExampleInputBeta
 * An example of the JSON payload that will be sent by the trigger to the subscribed service.
 * @export
 */
export type TriggerExampleInputBeta = AccessRequestDynamicApproverBeta | AccessRequestPostApprovalBeta | AccessRequestPreApprovalBeta | AccountAggregationCompletedBeta | AccountAttributesChangedBeta | AccountCorrelatedBeta | AccountUncorrelatedBeta | AccountsCollectedForAggregationBeta | CampaignActivatedBeta | CampaignEndedBeta | CampaignGeneratedBeta | CertificationSignedOffBeta | IdentityAttributesChangedBeta | IdentityCreatedBeta | IdentityDeletedBeta | ProvisioningCompletedBeta | SavedSearchCompleteBeta | SourceAccountCreatedBeta | SourceAccountDeletedBeta | SourceAccountUpdatedBeta | SourceCreatedBeta | SourceDeletedBeta | SourceUpdatedBeta | VAClusterStatusChangeEventBeta;
/**
 * @type TriggerExampleOutputBeta
 * An example of the JSON payload that will be sent by the subscribed service to the trigger in response to an event.
 * @export
 */
export type TriggerExampleOutputBeta = AccessRequestDynamicApprover1Beta | AccessRequestPreApproval1Beta;
/**
 * The type of trigger.
 * @export
 * @enum {string}
 */
export declare const TriggerTypeBeta: {
    readonly RequestResponse: "REQUEST_RESPONSE";
    readonly FireAndForget: "FIRE_AND_FORGET";
};
export type TriggerTypeBeta = typeof TriggerTypeBeta[keyof typeof TriggerTypeBeta];
/**
 *
 * @export
 * @interface TrimBeta
 */
export interface TrimBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof TrimBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof TrimBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface UUIDGeneratorBeta
 */
export interface UUIDGeneratorBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof UUIDGeneratorBeta
     */
    'requiresPeriodicRefresh'?: boolean;
}
/**
 *
 * @export
 * @interface UpdateAccessProfilesInBulk412ResponseBeta
 */
export interface UpdateAccessProfilesInBulk412ResponseBeta {
    /**
     * A message describing the error
     * @type {object}
     * @memberof UpdateAccessProfilesInBulk412ResponseBeta
     */
    'message'?: object;
}
/**
 *
 * @export
 * @interface UpperBeta
 */
export interface UpperBeta {
    /**
     * A value that indicates whether the transform logic should be re-evaluated every evening as part of the identity refresh process
     * @type {boolean}
     * @memberof UpperBeta
     */
    'requiresPeriodicRefresh'?: boolean;
    /**
     * This is an optional attribute that can explicitly define the input data which will be fed into the transform logic. If input is not provided, the transform will take its input from the source and attribute combination configured via the UI.
     * @type {{ [key: string]: any; }}
     * @memberof UpperBeta
     */
    'input'?: {
        [key: string]: any;
    };
}
/**
 * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \'Create Account Profile\', the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \'Update Account Profile\', the provisioning template for the \'Update\' connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \'Enable Account Profile\', the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\'s account is created.  DISABLE - This usage type relates to \'Disable Account Profile\', the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
 * @export
 * @enum {string}
 */
export declare const UsageTypeBeta: {
    readonly Create: "CREATE";
    readonly Update: "UPDATE";
    readonly Enable: "ENABLE";
    readonly Disable: "DISABLE";
    readonly Delete: "DELETE";
    readonly Assign: "ASSIGN";
    readonly Unassign: "UNASSIGN";
    readonly CreateGroup: "CREATE_GROUP";
    readonly UpdateGroup: "UPDATE_GROUP";
    readonly DeleteGroup: "DELETE_GROUP";
    readonly Register: "REGISTER";
    readonly CreateIdentity: "CREATE_IDENTITY";
    readonly UpdateIdentity: "UPDATE_IDENTITY";
    readonly EditGroup: "EDIT_GROUP";
    readonly Unlock: "UNLOCK";
    readonly ChangePassword: "CHANGE_PASSWORD";
};
export type UsageTypeBeta = typeof UsageTypeBeta[keyof typeof UsageTypeBeta];
/**
 *
 * @export
 * @interface V3ConnectorDtoBeta
 */
export interface V3ConnectorDtoBeta {
    /**
     * The connector name
     * @type {string}
     * @memberof V3ConnectorDtoBeta
     */
    'name'?: string;
    /**
     * The connector type
     * @type {string}
     * @memberof V3ConnectorDtoBeta
     */
    'type'?: string;
    /**
     * The connector script name
     * @type {string}
     * @memberof V3ConnectorDtoBeta
     */
    'scriptName'?: string;
    /**
     * The connector class name.
     * @type {string}
     * @memberof V3ConnectorDtoBeta
     */
    'className'?: string | null;
    /**
     * The list of features supported by the connector
     * @type {Array<string>}
     * @memberof V3ConnectorDtoBeta
     */
    'features'?: Array<string> | null;
    /**
     * true if the source is a direct connect source
     * @type {boolean}
     * @memberof V3ConnectorDtoBeta
     */
    'directConnect'?: boolean;
    /**
     * Object containing metadata pertinent to the UI to be used
     * @type {object}
     * @memberof V3ConnectorDtoBeta
     */
    'connectorMetadata'?: object;
    /**
     * The connector status
     * @type {string}
     * @memberof V3ConnectorDtoBeta
     */
    'status'?: string;
}
/**
 * Details about the `CLUSTER` or `SOURCE` that initiated this event.
 * @export
 * @interface VAClusterStatusChangeEventApplicationBeta
 */
export interface VAClusterStatusChangeEventApplicationBeta {
    /**
     * The GUID of the application
     * @type {string}
     * @memberof VAClusterStatusChangeEventApplicationBeta
     */
    'id': string;
    /**
     * The name of the application
     * @type {string}
     * @memberof VAClusterStatusChangeEventApplicationBeta
     */
    'name': string;
    /**
     * Custom map of attributes for a source.  This will only be populated if type is `SOURCE` and the source has a proxy.
     * @type {{ [key: string]: any; }}
     * @memberof VAClusterStatusChangeEventApplicationBeta
     */
    'attributes': {
        [key: string]: any;
    } | null;
}
/**
 *
 * @export
 * @interface VAClusterStatusChangeEventBeta
 */
export interface VAClusterStatusChangeEventBeta {
    /**
     * The date and time the status change occurred.
     * @type {string}
     * @memberof VAClusterStatusChangeEventBeta
     */
    'created': string;
    /**
     * The type of the object that initiated this event.
     * @type {object}
     * @memberof VAClusterStatusChangeEventBeta
     */
    'type': VAClusterStatusChangeEventBetaTypeEnum;
    /**
     *
     * @type {VAClusterStatusChangeEventApplicationBeta}
     * @memberof VAClusterStatusChangeEventBeta
     */
    'application': VAClusterStatusChangeEventApplicationBeta;
    /**
     *
     * @type {VAClusterStatusChangeEventHealthCheckResultBeta}
     * @memberof VAClusterStatusChangeEventBeta
     */
    'healthCheckResult': VAClusterStatusChangeEventHealthCheckResultBeta;
    /**
     *
     * @type {VAClusterStatusChangeEventPreviousHealthCheckResultBeta}
     * @memberof VAClusterStatusChangeEventBeta
     */
    'previousHealthCheckResult': VAClusterStatusChangeEventPreviousHealthCheckResultBeta;
}
export declare const VAClusterStatusChangeEventBetaTypeEnum: {
    readonly Source: "SOURCE";
    readonly Cluster: "CLUSTER";
};
export type VAClusterStatusChangeEventBetaTypeEnum = typeof VAClusterStatusChangeEventBetaTypeEnum[keyof typeof VAClusterStatusChangeEventBetaTypeEnum];
/**
 * The results of the most recent health check.
 * @export
 * @interface VAClusterStatusChangeEventHealthCheckResultBeta
 */
export interface VAClusterStatusChangeEventHealthCheckResultBeta {
    /**
     * Detailed message of the result of the health check.
     * @type {string}
     * @memberof VAClusterStatusChangeEventHealthCheckResultBeta
     */
    'message': string;
    /**
     * The type of the health check result.
     * @type {string}
     * @memberof VAClusterStatusChangeEventHealthCheckResultBeta
     */
    'resultType': string;
    /**
     * The status of the health check.
     * @type {object}
     * @memberof VAClusterStatusChangeEventHealthCheckResultBeta
     */
    'status': VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum;
}
export declare const VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
};
export type VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum = typeof VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum[keyof typeof VAClusterStatusChangeEventHealthCheckResultBetaStatusEnum];
/**
 * The results of the last health check.
 * @export
 * @interface VAClusterStatusChangeEventPreviousHealthCheckResultBeta
 */
export interface VAClusterStatusChangeEventPreviousHealthCheckResultBeta {
    /**
     * Detailed message of the result of the health check.
     * @type {string}
     * @memberof VAClusterStatusChangeEventPreviousHealthCheckResultBeta
     */
    'message': string;
    /**
     * The type of the health check result.
     * @type {string}
     * @memberof VAClusterStatusChangeEventPreviousHealthCheckResultBeta
     */
    'resultType': string;
    /**
     * The status of the health check.
     * @type {object}
     * @memberof VAClusterStatusChangeEventPreviousHealthCheckResultBeta
     */
    'status': VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum;
}
export declare const VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum: {
    readonly Succeeded: "Succeeded";
    readonly Failed: "Failed";
};
export type VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum = typeof VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum[keyof typeof VAClusterStatusChangeEventPreviousHealthCheckResultBetaStatusEnum];
/**
 *
 * @export
 * @interface ValidateFilterInputDtoBeta
 */
export interface ValidateFilterInputDtoBeta {
    /**
     * Mock input to evaluate filter expression against.
     * @type {object}
     * @memberof ValidateFilterInputDtoBeta
     */
    'input': object;
    /**
     * JSONPath filter to conditionally invoke trigger when expression evaluates to true.
     * @type {string}
     * @memberof ValidateFilterInputDtoBeta
     */
    'filter': string;
}
/**
 *
 * @export
 * @interface ValidateFilterOutputDtoBeta
 */
export interface ValidateFilterOutputDtoBeta {
    /**
     * When this field is true, the filter expression is valid against the input.
     * @type {boolean}
     * @memberof ValidateFilterOutputDtoBeta
     */
    'isValid'?: boolean;
    /**
     * When this field is true, the filter expression is using a valid JSON path.
     * @type {boolean}
     * @memberof ValidateFilterOutputDtoBeta
     */
    'isValidJSONPath'?: boolean;
    /**
     * When this field is true, the filter expression is using an existing path.
     * @type {boolean}
     * @memberof ValidateFilterOutputDtoBeta
     */
    'isPathExist'?: boolean;
}
/**
 *
 * @export
 * @interface ValueBeta
 */
export interface ValueBeta {
    /**
     * The type of attribute value
     * @type {string}
     * @memberof ValueBeta
     */
    'type'?: string | null;
    /**
     * The attribute value
     * @type {string}
     * @memberof ValueBeta
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface VendorConnectorMappingBeta
 */
export interface VendorConnectorMappingBeta {
    /**
     * The unique identifier for the vendor-connector mapping.
     * @type {string}
     * @memberof VendorConnectorMappingBeta
     */
    'id'?: string;
    /**
     * The name of the vendor.
     * @type {string}
     * @memberof VendorConnectorMappingBeta
     */
    'vendor'?: string;
    /**
     * The name of the connector.
     * @type {string}
     * @memberof VendorConnectorMappingBeta
     */
    'connector'?: string;
    /**
     * The creation timestamp of the mapping.
     * @type {string}
     * @memberof VendorConnectorMappingBeta
     */
    'createdAt'?: string;
    /**
     * The identifier of the user who created the mapping.
     * @type {string}
     * @memberof VendorConnectorMappingBeta
     */
    'createdBy'?: string;
    /**
     *
     * @type {VendorConnectorMappingUpdatedAtBeta}
     * @memberof VendorConnectorMappingBeta
     */
    'updatedAt'?: VendorConnectorMappingUpdatedAtBeta | null;
    /**
     *
     * @type {VendorConnectorMappingUpdatedByBeta}
     * @memberof VendorConnectorMappingBeta
     */
    'updatedBy'?: VendorConnectorMappingUpdatedByBeta | null;
    /**
     *
     * @type {VendorConnectorMappingDeletedAtBeta}
     * @memberof VendorConnectorMappingBeta
     */
    'deletedAt'?: VendorConnectorMappingDeletedAtBeta | null;
    /**
     *
     * @type {VendorConnectorMappingDeletedByBeta}
     * @memberof VendorConnectorMappingBeta
     */
    'deletedBy'?: VendorConnectorMappingDeletedByBeta | null;
}
/**
 * An object representing the nullable timestamp of when the mapping was deleted.
 * @export
 * @interface VendorConnectorMappingDeletedAtBeta
 */
export interface VendorConnectorMappingDeletedAtBeta {
    /**
     * The timestamp when the mapping was deleted, represented in ISO 8601 format, if applicable.
     * @type {string}
     * @memberof VendorConnectorMappingDeletedAtBeta
     */
    'Time'?: string;
    /**
     * A flag indicating if the \'Time\' field is set and valid, i.e., if the mapping has been deleted.
     * @type {boolean}
     * @memberof VendorConnectorMappingDeletedAtBeta
     */
    'Valid'?: boolean;
}
/**
 * An object representing the nullable identifier of the user who deleted the mapping.
 * @export
 * @interface VendorConnectorMappingDeletedByBeta
 */
export interface VendorConnectorMappingDeletedByBeta {
    /**
     * The identifier of the user who deleted the mapping, if applicable.
     * @type {string}
     * @memberof VendorConnectorMappingDeletedByBeta
     */
    'String'?: string;
    /**
     * A flag indicating if the \'String\' field is set and valid, i.e., if the mapping has been deleted.
     * @type {boolean}
     * @memberof VendorConnectorMappingDeletedByBeta
     */
    'Valid'?: boolean;
}
/**
 * An object representing the nullable timestamp of the last update.
 * @export
 * @interface VendorConnectorMappingUpdatedAtBeta
 */
export interface VendorConnectorMappingUpdatedAtBeta {
    /**
     * The timestamp when the mapping was last updated, represented in ISO 8601 format.
     * @type {string}
     * @memberof VendorConnectorMappingUpdatedAtBeta
     */
    'Time'?: string;
    /**
     * A flag indicating if the \'Time\' field is set and valid.
     * @type {boolean}
     * @memberof VendorConnectorMappingUpdatedAtBeta
     */
    'Valid'?: boolean;
}
/**
 * An object representing the nullable identifier of the user who last updated the mapping.
 * @export
 * @interface VendorConnectorMappingUpdatedByBeta
 */
export interface VendorConnectorMappingUpdatedByBeta {
    /**
     * The identifier of the user who last updated the mapping, if available.
     * @type {string}
     * @memberof VendorConnectorMappingUpdatedByBeta
     */
    'String'?: string;
    /**
     * A flag indicating if the \'String\' field is set and valid.
     * @type {boolean}
     * @memberof VendorConnectorMappingUpdatedByBeta
     */
    'Valid'?: boolean;
}
/**
 *
 * @export
 * @interface VerificationPollRequestBeta
 */
export interface VerificationPollRequestBeta {
    /**
     * Verification request Id
     * @type {string}
     * @memberof VerificationPollRequestBeta
     */
    'requestId': string;
}
/**
 *
 * @export
 * @interface VerificationResponseBeta
 */
export interface VerificationResponseBeta {
    /**
     * The verificationPollRequest request ID
     * @type {string}
     * @memberof VerificationResponseBeta
     */
    'requestId'?: string | null;
    /**
     * MFA Authentication status
     * @type {string}
     * @memberof VerificationResponseBeta
     */
    'status'?: VerificationResponseBetaStatusEnum;
    /**
     * Error messages from MFA verification request
     * @type {string}
     * @memberof VerificationResponseBeta
     */
    'error'?: string | null;
}
export declare const VerificationResponseBetaStatusEnum: {
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Failed: "FAILED";
    readonly Lockout: "LOCKOUT";
    readonly NotEnoughData: "NOT_ENOUGH_DATA";
};
export type VerificationResponseBetaStatusEnum = typeof VerificationResponseBetaStatusEnum[keyof typeof VerificationResponseBetaStatusEnum];
/**
 *
 * @export
 * @interface ViolationContextBeta
 */
export interface ViolationContextBeta {
    /**
     *
     * @type {ViolationContextPolicyBeta}
     * @memberof ViolationContextBeta
     */
    'policy'?: ViolationContextPolicyBeta;
    /**
     *
     * @type {ExceptionAccessCriteriaBeta}
     * @memberof ViolationContextBeta
     */
    'conflictingAccessCriteria'?: ExceptionAccessCriteriaBeta;
}
/**
 *
 * @export
 * @interface ViolationContextPolicyAllOfBeta
 */
export interface ViolationContextPolicyAllOfBeta {
    /**
     *
     * @type {string}
     * @memberof ViolationContextPolicyAllOfBeta
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof ViolationContextPolicyAllOfBeta
     */
    'name'?: string;
}
/**
 * The types of objects supported for SOD policy violations.
 * @export
 * @interface ViolationContextPolicyBeta
 */
export interface ViolationContextPolicyBeta {
    /**
     * The type of object supported for SOD policy violations.
     * @type {object}
     * @memberof ViolationContextPolicyBeta
     */
    'type'?: ViolationContextPolicyBetaTypeEnum;
    /**
     * SOD policy ID.
     * @type {string}
     * @memberof ViolationContextPolicyBeta
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ViolationContextPolicyBeta
     */
    'name'?: string;
}
export declare const ViolationContextPolicyBetaTypeEnum: {
    readonly Entitlement: "ENTITLEMENT";
};
export type ViolationContextPolicyBetaTypeEnum = typeof ViolationContextPolicyBetaTypeEnum[keyof typeof ViolationContextPolicyBetaTypeEnum];
/**
 *
 * @export
 * @interface ViolationOwnerAssignmentConfigBeta
 */
export interface ViolationOwnerAssignmentConfigBeta {
    /**
     * Details about the violations owner. MANAGER - identity\'s manager STATIC - Governance Group or Identity
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigBeta
     */
    'assignmentRule'?: ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum;
    /**
     *
     * @type {ViolationOwnerAssignmentConfigOwnerRefBeta}
     * @memberof ViolationOwnerAssignmentConfigBeta
     */
    'ownerRef'?: ViolationOwnerAssignmentConfigOwnerRefBeta | null;
}
export declare const ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum: {
    readonly Manager: "MANAGER";
    readonly Static: "STATIC";
    readonly Null: "null";
};
export type ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum = typeof ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum[keyof typeof ViolationOwnerAssignmentConfigBetaAssignmentRuleEnum];
/**
 * The owner of the violation assignment config.
 * @export
 * @interface ViolationOwnerAssignmentConfigOwnerRefBeta
 */
export interface ViolationOwnerAssignmentConfigOwnerRefBeta {
    /**
     * Owner type.
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigOwnerRefBeta
     */
    'type'?: ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum;
    /**
     * Owner\'s ID.
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigOwnerRefBeta
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof ViolationOwnerAssignmentConfigOwnerRefBeta
     */
    'name'?: string;
}
export declare const ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum: {
    readonly Identity: "IDENTITY";
    readonly GovernanceGroup: "GOVERNANCE_GROUP";
    readonly Manager: "MANAGER";
    readonly Null: "null";
};
export type ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum = typeof ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum[keyof typeof ViolationOwnerAssignmentConfigOwnerRefBetaTypeEnum];
/**
 * An object containing a listing of the SOD violation reasons detected by this check.
 * @export
 * @interface ViolationPredictionBeta
 */
export interface ViolationPredictionBeta {
    /**
     * List of Violation Contexts
     * @type {Array<ViolationContextBeta>}
     * @memberof ViolationPredictionBeta
     */
    'violationContexts'?: Array<ViolationContextBeta>;
}
/**
 *
 * @export
 * @interface VisibilityCriteriaBeta
 */
export interface VisibilityCriteriaBeta {
    /**
     *
     * @type {ExpressionBeta}
     * @memberof VisibilityCriteriaBeta
     */
    'expression'?: ExpressionBeta;
}
/**
 *
 * @export
 * @interface WorkItemForwardBeta
 */
export interface WorkItemForwardBeta {
    /**
     * The ID of the identity to forward this work item to.
     * @type {string}
     * @memberof WorkItemForwardBeta
     */
    'targetOwnerId': string;
    /**
     * Comments to send to the target owner
     * @type {string}
     * @memberof WorkItemForwardBeta
     */
    'comment': string;
    /**
     * If true, send a notification to the target owner.
     * @type {boolean}
     * @memberof WorkItemForwardBeta
     */
    'sendNotifications'?: boolean;
}
/**
 * The state of a work item
 * @export
 * @enum {string}
 */
export declare const WorkItemStateBeta: {
    readonly Finished: "Finished";
    readonly Rejected: "Rejected";
    readonly Returned: "Returned";
    readonly Expired: "Expired";
    readonly Pending: "Pending";
    readonly Canceled: "Canceled";
    readonly Null: "null";
};
export type WorkItemStateBeta = typeof WorkItemStateBeta[keyof typeof WorkItemStateBeta];
/**
 * The type of the work item
 * @export
 * @enum {string}
 */
export declare const WorkItemTypeBeta: {
    readonly Unknown: "Unknown";
    readonly Generic: "Generic";
    readonly Certification: "Certification";
    readonly Remediation: "Remediation";
    readonly Delegation: "Delegation";
    readonly Approval: "Approval";
    readonly ViolationReview: "ViolationReview";
    readonly Form: "Form";
    readonly PolicyViolation: "PolicyViolation";
    readonly Challenge: "Challenge";
    readonly ImpactAnalysis: "ImpactAnalysis";
    readonly Signoff: "Signoff";
    readonly Event: "Event";
    readonly ManualAction: "ManualAction";
    readonly Test: "Test";
};
export type WorkItemTypeBeta = typeof WorkItemTypeBeta[keyof typeof WorkItemTypeBeta];
/**
 *
 * @export
 * @interface WorkItemsBeta
 */
export interface WorkItemsBeta {
    /**
     * ID of the work item
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'id'?: string;
    /**
     * ID of the requester
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'requesterId'?: string | null;
    /**
     * The displayname of the requester
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'requesterDisplayName'?: string | null;
    /**
     * The ID of the owner
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'ownerId'?: string | null;
    /**
     * The name of the owner
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'ownerName'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'modified'?: string | null;
    /**
     * The description of the work item
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'description'?: string;
    /**
     *
     * @type {WorkItemStateBeta}
     * @memberof WorkItemsBeta
     */
    'state'?: WorkItemStateBeta | null;
    /**
     *
     * @type {WorkItemTypeBeta}
     * @memberof WorkItemsBeta
     */
    'type'?: WorkItemTypeBeta;
    /**
     *
     * @type {Array<RemediationItemDetailsBeta>}
     * @memberof WorkItemsBeta
     */
    'remediationItems'?: Array<RemediationItemDetailsBeta> | null;
    /**
     *
     * @type {Array<ApprovalItemDetailsBeta>}
     * @memberof WorkItemsBeta
     */
    'approvalItems'?: Array<ApprovalItemDetailsBeta> | null;
    /**
     * The work item name
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'name'?: string | null;
    /**
     *
     * @type {string}
     * @memberof WorkItemsBeta
     */
    'completed'?: string | null;
    /**
     * The number of items in the work item
     * @type {number}
     * @memberof WorkItemsBeta
     */
    'numItems'?: number | null;
    /**
     *
     * @type {Array<string>}
     * @memberof WorkItemsBeta
     */
    'errors'?: Array<string>;
    /**
     *
     * @type {FormDetailsBeta}
     * @memberof WorkItemsBeta
     */
    'form'?: FormDetailsBeta | null;
}
/**
 *
 * @export
 * @interface WorkItemsCountBeta
 */
export interface WorkItemsCountBeta {
    /**
     * The count of work items
     * @type {number}
     * @memberof WorkItemsCountBeta
     */
    'count'?: number;
}
/**
 *
 * @export
 * @interface WorkItemsSummaryBeta
 */
export interface WorkItemsSummaryBeta {
    /**
     * The count of open work items
     * @type {number}
     * @memberof WorkItemsSummaryBeta
     */
    'open'?: number;
    /**
     * The count of completed work items
     * @type {number}
     * @memberof WorkItemsSummaryBeta
     */
    'completed'?: number;
    /**
     * The count of total work items
     * @type {number}
     * @memberof WorkItemsSummaryBeta
     */
    'total'?: number;
}
/**
 *
 * @export
 * @interface WorkflowAllOfBeta
 */
export interface WorkflowAllOfBeta {
    /**
     * Workflow ID. This is a UUID generated upon creation.
     * @type {string}
     * @memberof WorkflowAllOfBeta
     */
    'id'?: string;
    /**
     * The date and time the workflow was modified.
     * @type {string}
     * @memberof WorkflowAllOfBeta
     */
    'modified'?: string;
    /**
     *
     * @type {WorkflowModifiedByBeta}
     * @memberof WorkflowAllOfBeta
     */
    'modifiedBy'?: WorkflowModifiedByBeta;
    /**
     * The number of times this workflow has been executed.
     * @type {number}
     * @memberof WorkflowAllOfBeta
     */
    'executionCount'?: number;
    /**
     * The number of times this workflow has failed during execution.
     * @type {number}
     * @memberof WorkflowAllOfBeta
     */
    'failureCount'?: number;
    /**
     * The date and time the workflow was created.
     * @type {string}
     * @memberof WorkflowAllOfBeta
     */
    'created'?: string;
    /**
     *
     * @type {WorkflowAllOfCreatorBeta}
     * @memberof WorkflowAllOfBeta
     */
    'creator'?: WorkflowAllOfCreatorBeta;
}
/**
 * Workflow creator\'s identity.
 * @export
 * @interface WorkflowAllOfCreatorBeta
 */
export interface WorkflowAllOfCreatorBeta {
    /**
     * Workflow creator\'s DTO type.
     * @type {string}
     * @memberof WorkflowAllOfCreatorBeta
     */
    'type'?: WorkflowAllOfCreatorBetaTypeEnum;
    /**
     * Workflow creator\'s identity ID.
     * @type {string}
     * @memberof WorkflowAllOfCreatorBeta
     */
    'id'?: string;
    /**
     * Workflow creator\'s display name.
     * @type {string}
     * @memberof WorkflowAllOfCreatorBeta
     */
    'name'?: string;
}
export declare const WorkflowAllOfCreatorBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkflowAllOfCreatorBetaTypeEnum = typeof WorkflowAllOfCreatorBetaTypeEnum[keyof typeof WorkflowAllOfCreatorBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkflowBeta
 */
export interface WorkflowBeta {
    /**
     * Workflow ID. This is a UUID generated upon creation.
     * @type {string}
     * @memberof WorkflowBeta
     */
    'id'?: string;
    /**
     * The date and time the workflow was modified.
     * @type {string}
     * @memberof WorkflowBeta
     */
    'modified'?: string;
    /**
     *
     * @type {WorkflowModifiedByBeta}
     * @memberof WorkflowBeta
     */
    'modifiedBy'?: WorkflowModifiedByBeta;
    /**
     * The number of times this workflow has been executed.
     * @type {number}
     * @memberof WorkflowBeta
     */
    'executionCount'?: number;
    /**
     * The number of times this workflow has failed during execution.
     * @type {number}
     * @memberof WorkflowBeta
     */
    'failureCount'?: number;
    /**
     * The date and time the workflow was created.
     * @type {string}
     * @memberof WorkflowBeta
     */
    'created'?: string;
    /**
     *
     * @type {WorkflowAllOfCreatorBeta}
     * @memberof WorkflowBeta
     */
    'creator'?: WorkflowAllOfCreatorBeta;
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowBeta
     */
    'name'?: string;
    /**
     *
     * @type {WorkflowBodyOwnerBeta}
     * @memberof WorkflowBeta
     */
    'owner'?: WorkflowBodyOwnerBeta;
    /**
     * Description of what the workflow accomplishes
     * @type {string}
     * @memberof WorkflowBeta
     */
    'description'?: string;
    /**
     *
     * @type {WorkflowDefinitionBeta}
     * @memberof WorkflowBeta
     */
    'definition'?: WorkflowDefinitionBeta;
    /**
     * Enable or disable the workflow.  Workflows cannot be created in an enabled state.
     * @type {boolean}
     * @memberof WorkflowBeta
     */
    'enabled'?: boolean;
    /**
     *
     * @type {WorkflowTriggerBeta}
     * @memberof WorkflowBeta
     */
    'trigger'?: WorkflowTriggerBeta;
}
/**
 *
 * @export
 * @interface WorkflowBodyBeta
 */
export interface WorkflowBodyBeta {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowBodyBeta
     */
    'name'?: string;
    /**
     *
     * @type {WorkflowBodyOwnerBeta}
     * @memberof WorkflowBodyBeta
     */
    'owner'?: WorkflowBodyOwnerBeta;
    /**
     * Description of what the workflow accomplishes
     * @type {string}
     * @memberof WorkflowBodyBeta
     */
    'description'?: string;
    /**
     *
     * @type {WorkflowDefinitionBeta}
     * @memberof WorkflowBodyBeta
     */
    'definition'?: WorkflowDefinitionBeta;
    /**
     * Enable or disable the workflow.  Workflows cannot be created in an enabled state.
     * @type {boolean}
     * @memberof WorkflowBodyBeta
     */
    'enabled'?: boolean;
    /**
     *
     * @type {WorkflowTriggerBeta}
     * @memberof WorkflowBodyBeta
     */
    'trigger'?: WorkflowTriggerBeta;
}
/**
 * The identity that owns the workflow.  The owner\'s permissions in IDN will determine what actions the workflow is allowed to perform.  Ownership can be changed by updating the owner in a PUT or PATCH request.
 * @export
 * @interface WorkflowBodyOwnerBeta
 */
export interface WorkflowBodyOwnerBeta {
    /**
     * The type of object that is referenced
     * @type {string}
     * @memberof WorkflowBodyOwnerBeta
     */
    'type'?: WorkflowBodyOwnerBetaTypeEnum;
    /**
     * The unique ID of the object
     * @type {string}
     * @memberof WorkflowBodyOwnerBeta
     */
    'id'?: string;
    /**
     * The name of the object
     * @type {string}
     * @memberof WorkflowBodyOwnerBeta
     */
    'name'?: string;
}
export declare const WorkflowBodyOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkflowBodyOwnerBetaTypeEnum = typeof WorkflowBodyOwnerBetaTypeEnum[keyof typeof WorkflowBodyOwnerBetaTypeEnum];
/**
 * The map of steps that the workflow will execute.
 * @export
 * @interface WorkflowDefinitionBeta
 */
export interface WorkflowDefinitionBeta {
    /**
     * The name of the starting step.
     * @type {string}
     * @memberof WorkflowDefinitionBeta
     */
    'start'?: string;
    /**
     * One or more step objects that comprise this workflow.  Please see the Workflow documentation to see the JSON schema for each step type.
     * @type {{ [key: string]: any; }}
     * @memberof WorkflowDefinitionBeta
     */
    'steps'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface WorkflowExecutionBeta
 */
export interface WorkflowExecutionBeta {
    /**
     * Workflow execution ID.
     * @type {string}
     * @memberof WorkflowExecutionBeta
     */
    'id'?: string;
    /**
     * Workflow ID.
     * @type {string}
     * @memberof WorkflowExecutionBeta
     */
    'workflowId'?: string;
    /**
     * Backend ID that tracks a workflow request in the system. Provide this ID in a customer support ticket for debugging purposes.
     * @type {string}
     * @memberof WorkflowExecutionBeta
     */
    'requestId'?: string;
    /**
     * Date/time when the workflow started.
     * @type {string}
     * @memberof WorkflowExecutionBeta
     */
    'startTime'?: string;
    /**
     * Date/time when the workflow ended.
     * @type {string}
     * @memberof WorkflowExecutionBeta
     */
    'closeTime'?: string;
    /**
     * Workflow execution status.
     * @type {string}
     * @memberof WorkflowExecutionBeta
     */
    'status'?: WorkflowExecutionBetaStatusEnum;
}
export declare const WorkflowExecutionBetaStatusEnum: {
    readonly Completed: "Completed";
    readonly Failed: "Failed";
    readonly Canceled: "Canceled";
    readonly Executing: "Executing";
};
export type WorkflowExecutionBetaStatusEnum = typeof WorkflowExecutionBetaStatusEnum[keyof typeof WorkflowExecutionBetaStatusEnum];
/**
 *
 * @export
 * @interface WorkflowExecutionEventBeta
 */
export interface WorkflowExecutionEventBeta {
    /**
     * The type of event
     * @type {object}
     * @memberof WorkflowExecutionEventBeta
     */
    'type'?: WorkflowExecutionEventBetaTypeEnum;
    /**
     * The date-time when the event occurred
     * @type {string}
     * @memberof WorkflowExecutionEventBeta
     */
    'timestamp'?: string;
    /**
     * Additional attributes associated with the event
     * @type {object}
     * @memberof WorkflowExecutionEventBeta
     */
    'attributes'?: object;
}
export declare const WorkflowExecutionEventBetaTypeEnum: {
    readonly WorkflowExecutionScheduled: "WorkflowExecutionScheduled";
    readonly WorkflowExecutionStarted: "WorkflowExecutionStarted";
    readonly WorkflowExecutionCompleted: "WorkflowExecutionCompleted";
    readonly WorkflowExecutionFailed: "WorkflowExecutionFailed";
    readonly WorkflowTaskScheduled: "WorkflowTaskScheduled";
    readonly WorkflowTaskStarted: "WorkflowTaskStarted";
    readonly WorkflowTaskCompleted: "WorkflowTaskCompleted";
    readonly WorkflowTaskFailed: "WorkflowTaskFailed";
    readonly ActivityTaskScheduled: "ActivityTaskScheduled";
    readonly ActivityTaskStarted: "ActivityTaskStarted";
    readonly ActivityTaskCompleted: "ActivityTaskCompleted";
    readonly ActivityTaskFailed: "ActivityTaskFailed";
};
export type WorkflowExecutionEventBetaTypeEnum = typeof WorkflowExecutionEventBetaTypeEnum[keyof typeof WorkflowExecutionEventBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkflowLibraryActionBeta
 */
export interface WorkflowLibraryActionBeta {
    /**
     * Action ID. This is a static namespaced ID for the action
     * @type {string}
     * @memberof WorkflowLibraryActionBeta
     */
    'id'?: string;
    /**
     * Action Name
     * @type {string}
     * @memberof WorkflowLibraryActionBeta
     */
    'name'?: string;
    /**
     * Action type
     * @type {string}
     * @memberof WorkflowLibraryActionBeta
     */
    'type'?: string;
    /**
     * Action Description
     * @type {string}
     * @memberof WorkflowLibraryActionBeta
     */
    'description'?: string;
    /**
     * One or more inputs that the action accepts
     * @type {Array<WorkflowLibraryFormFieldsBeta>}
     * @memberof WorkflowLibraryActionBeta
     */
    'formFields'?: Array<WorkflowLibraryFormFieldsBeta> | null;
    /**
     *
     * @type {WorkflowLibraryActionExampleOutputBeta}
     * @memberof WorkflowLibraryActionBeta
     */
    'exampleOutput'?: WorkflowLibraryActionExampleOutputBeta;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryActionBeta
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WorkflowLibraryActionBeta
     */
    'deprecatedBy'?: string;
    /**
     * Version number
     * @type {number}
     * @memberof WorkflowLibraryActionBeta
     */
    'versionNumber'?: number;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryActionBeta
     */
    'isSimulationEnabled'?: boolean;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof WorkflowLibraryActionBeta
     */
    'isDynamicSchema'?: boolean;
    /**
     * Defines the output schema, if any, that this action produces.
     * @type {object}
     * @memberof WorkflowLibraryActionBeta
     */
    'outputSchema'?: object;
}
/**
 * @type WorkflowLibraryActionExampleOutputBeta
 * @export
 */
export type WorkflowLibraryActionExampleOutputBeta = Array<object> | object;
/**
 *
 * @export
 * @interface WorkflowLibraryFormFieldsBeta
 */
export interface WorkflowLibraryFormFieldsBeta {
    /**
     * Description of the form field
     * @type {string}
     * @memberof WorkflowLibraryFormFieldsBeta
     */
    'description'?: string;
    /**
     * Describes the form field in the UI
     * @type {string}
     * @memberof WorkflowLibraryFormFieldsBeta
     */
    'helpText'?: string;
    /**
     * A human readable name for this form field in the UI
     * @type {string}
     * @memberof WorkflowLibraryFormFieldsBeta
     */
    'label'?: string;
    /**
     * The name of the input attribute
     * @type {string}
     * @memberof WorkflowLibraryFormFieldsBeta
     */
    'name'?: string;
    /**
     * Denotes if this field is a required attribute
     * @type {boolean}
     * @memberof WorkflowLibraryFormFieldsBeta
     */
    'required'?: boolean;
    /**
     * The type of the form field
     * @type {string}
     * @memberof WorkflowLibraryFormFieldsBeta
     */
    'type'?: WorkflowLibraryFormFieldsBetaTypeEnum;
}
export declare const WorkflowLibraryFormFieldsBetaTypeEnum: {
    readonly Text: "text";
    readonly Textarea: "textarea";
    readonly Boolean: "boolean";
    readonly Email: "email";
    readonly Url: "url";
    readonly Number: "number";
    readonly Json: "json";
    readonly Checkbox: "checkbox";
    readonly Jsonpath: "jsonpath";
    readonly Select: "select";
    readonly MultiType: "multiType";
    readonly Duration: "duration";
    readonly Toggle: "toggle";
    readonly FormPicker: "formPicker";
    readonly IdentityPicker: "identityPicker";
    readonly GovernanceGroupPicker: "governanceGroupPicker";
    readonly String: "string";
    readonly Object: "object";
    readonly Array: "array";
    readonly Secret: "secret";
    readonly KeyValuePairs: "keyValuePairs";
    readonly EmailPicker: "emailPicker";
    readonly AdvancedToggle: "advancedToggle";
    readonly VariableCreator: "variableCreator";
    readonly HtmlEditor: "htmlEditor";
};
export type WorkflowLibraryFormFieldsBetaTypeEnum = typeof WorkflowLibraryFormFieldsBetaTypeEnum[keyof typeof WorkflowLibraryFormFieldsBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkflowLibraryOperatorBeta
 */
export interface WorkflowLibraryOperatorBeta {
    /**
     * Operator ID.
     * @type {string}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'id'?: string;
    /**
     * Operator friendly name
     * @type {string}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'name'?: string;
    /**
     * Operator type
     * @type {string}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'type'?: string;
    /**
     * Description of the operator
     * @type {string}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'description'?: string;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'isDynamicSchema'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'deprecatedBy'?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'isSimulationEnabled'?: boolean;
    /**
     * One or more inputs that the operator accepts
     * @type {Array<WorkflowLibraryFormFieldsBeta>}
     * @memberof WorkflowLibraryOperatorBeta
     */
    'formFields'?: Array<WorkflowLibraryFormFieldsBeta> | null;
}
/**
 *
 * @export
 * @interface WorkflowLibraryTriggerBeta
 */
export interface WorkflowLibraryTriggerBeta {
    /**
     * Trigger ID. This is a static namespaced ID for the trigger.
     * @type {string}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'id'?: string;
    /**
     * Trigger type
     * @type {string}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'type'?: WorkflowLibraryTriggerBetaTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'deprecated'?: boolean;
    /**
     *
     * @type {string}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'deprecatedBy'?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'isSimulationEnabled'?: boolean;
    /**
     * Example output schema
     * @type {object}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'outputSchema'?: object;
    /**
     * Trigger Name
     * @type {string}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'name'?: string;
    /**
     * Trigger Description
     * @type {string}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'description'?: string;
    /**
     * Determines whether the dynamic output schema is returned in place of the action\'s output schema. The dynamic schema lists non-static properties, like properties of a workflow form where each form has different fields. These will be provided dynamically based on available form fields.
     * @type {boolean}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'isDynamicSchema'?: boolean;
    /**
     * Example trigger payload if applicable
     * @type {object}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'inputExample'?: object | null;
    /**
     * One or more inputs that the trigger accepts
     * @type {Array<WorkflowLibraryFormFieldsBeta>}
     * @memberof WorkflowLibraryTriggerBeta
     */
    'formFields'?: Array<WorkflowLibraryFormFieldsBeta> | null;
}
export declare const WorkflowLibraryTriggerBetaTypeEnum: {
    readonly Event: "EVENT";
    readonly Scheduled: "SCHEDULED";
    readonly External: "EXTERNAL";
};
export type WorkflowLibraryTriggerBetaTypeEnum = typeof WorkflowLibraryTriggerBetaTypeEnum[keyof typeof WorkflowLibraryTriggerBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkflowModifiedByBeta
 */
export interface WorkflowModifiedByBeta {
    /**
     *
     * @type {string}
     * @memberof WorkflowModifiedByBeta
     */
    'type'?: WorkflowModifiedByBetaTypeEnum;
    /**
     * Identity ID
     * @type {string}
     * @memberof WorkflowModifiedByBeta
     */
    'id'?: string;
    /**
     * Human-readable display name of identity.
     * @type {string}
     * @memberof WorkflowModifiedByBeta
     */
    'name'?: string;
}
export declare const WorkflowModifiedByBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkflowModifiedByBetaTypeEnum = typeof WorkflowModifiedByBetaTypeEnum[keyof typeof WorkflowModifiedByBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkflowOAuthClientBeta
 */
export interface WorkflowOAuthClientBeta {
    /**
     * OAuth client ID for the trigger. This is a UUID generated upon creation.
     * @type {string}
     * @memberof WorkflowOAuthClientBeta
     */
    'id'?: string;
    /**
     * OAuthClient secret.
     * @type {string}
     * @memberof WorkflowOAuthClientBeta
     */
    'secret'?: string;
    /**
     * URL for the external trigger to invoke
     * @type {string}
     * @memberof WorkflowOAuthClientBeta
     */
    'url'?: string;
}
/**
 * @type WorkflowTriggerAttributesBeta
 * Workflow Trigger Attributes.
 * @export
 */
export type WorkflowTriggerAttributesBeta = EventAttributesBeta | ExternalAttributesBeta | ScheduledAttributesBeta;
/**
 * The trigger that starts the workflow
 * @export
 * @interface WorkflowTriggerBeta
 */
export interface WorkflowTriggerBeta {
    /**
     * The trigger type
     * @type {string}
     * @memberof WorkflowTriggerBeta
     */
    'type': WorkflowTriggerBetaTypeEnum;
    /**
     *
     * @type {string}
     * @memberof WorkflowTriggerBeta
     */
    'displayName'?: string | null;
    /**
     *
     * @type {WorkflowTriggerAttributesBeta}
     * @memberof WorkflowTriggerBeta
     */
    'attributes': WorkflowTriggerAttributesBeta;
}
export declare const WorkflowTriggerBetaTypeEnum: {
    readonly Event: "EVENT";
    readonly External: "EXTERNAL";
    readonly Scheduled: "SCHEDULED";
};
export type WorkflowTriggerBetaTypeEnum = typeof WorkflowTriggerBetaTypeEnum[keyof typeof WorkflowTriggerBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkgroupBulkDeleteRequestBeta
 */
export interface WorkgroupBulkDeleteRequestBeta {
    /**
     * List of IDs of Governance Groups to be deleted.
     * @type {Array<string>}
     * @memberof WorkgroupBulkDeleteRequestBeta
     */
    'ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface WorkgroupConnectionDtoBeta
 */
export interface WorkgroupConnectionDtoBeta {
    /**
     *
     * @type {ConnectedObjectBeta}
     * @memberof WorkgroupConnectionDtoBeta
     */
    'object'?: ConnectedObjectBeta;
    /**
     * Connection Type.
     * @type {string}
     * @memberof WorkgroupConnectionDtoBeta
     */
    'connectionType'?: WorkgroupConnectionDtoBetaConnectionTypeEnum;
}
export declare const WorkgroupConnectionDtoBetaConnectionTypeEnum: {
    readonly AccessRequestReviewer: "AccessRequestReviewer";
    readonly Owner: "Owner";
    readonly ManagementWorkgroup: "ManagementWorkgroup";
};
export type WorkgroupConnectionDtoBetaConnectionTypeEnum = typeof WorkgroupConnectionDtoBetaConnectionTypeEnum[keyof typeof WorkgroupConnectionDtoBetaConnectionTypeEnum];
/**
 *
 * @export
 * @interface WorkgroupDeleteItemBeta
 */
export interface WorkgroupDeleteItemBeta {
    /**
     * Id of the Governance Group.
     * @type {string}
     * @memberof WorkgroupDeleteItemBeta
     */
    'id': string;
    /**
     *  The HTTP response status code returned for an individual Governance Group that is requested for deletion during a bulk delete operation.  > 204   -  Governance Group deleted successfully.  > 409   - Governance Group is in use,hence can not be deleted.  > 404   - Governance Group not found.
     * @type {string}
     * @memberof WorkgroupDeleteItemBeta
     */
    'status': string;
    /**
     * Human readable status description and containing additional context information about success or failures etc.
     * @type {string}
     * @memberof WorkgroupDeleteItemBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface WorkgroupDtoBeta
 */
export interface WorkgroupDtoBeta {
    /**
     *
     * @type {WorkgroupDtoOwnerBeta}
     * @memberof WorkgroupDtoBeta
     */
    'owner'?: WorkgroupDtoOwnerBeta;
    /**
     * Governance group ID.
     * @type {string}
     * @memberof WorkgroupDtoBeta
     */
    'id'?: string;
    /**
     * Governance group name.
     * @type {string}
     * @memberof WorkgroupDtoBeta
     */
    'name'?: string;
    /**
     * Governance group description.
     * @type {string}
     * @memberof WorkgroupDtoBeta
     */
    'description'?: string;
    /**
     * Number of members in the governance group.
     * @type {number}
     * @memberof WorkgroupDtoBeta
     */
    'memberCount'?: number;
    /**
     * Number of connections in the governance group.
     * @type {number}
     * @memberof WorkgroupDtoBeta
     */
    'connectionCount'?: number;
    /**
     *
     * @type {string}
     * @memberof WorkgroupDtoBeta
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof WorkgroupDtoBeta
     */
    'modified'?: string;
}
/**
 * Governance group owner.
 * @export
 * @interface WorkgroupDtoOwnerAllOfBeta
 */
export interface WorkgroupDtoOwnerAllOfBeta {
    /**
     * The display name of the identity
     * @type {string}
     * @memberof WorkgroupDtoOwnerAllOfBeta
     */
    'displayName'?: string;
    /**
     * The primary email address of the identity
     * @type {string}
     * @memberof WorkgroupDtoOwnerAllOfBeta
     */
    'emailAddress'?: string;
}
/**
 *
 * @export
 * @interface WorkgroupDtoOwnerBeta
 */
export interface WorkgroupDtoOwnerBeta {
    /**
     * Owner\'s DTO type.
     * @type {string}
     * @memberof WorkgroupDtoOwnerBeta
     */
    'type'?: WorkgroupDtoOwnerBetaTypeEnum;
    /**
     * Owner\'s identity ID.
     * @type {string}
     * @memberof WorkgroupDtoOwnerBeta
     */
    'id'?: string;
    /**
     * Owner\'s name.
     * @type {string}
     * @memberof WorkgroupDtoOwnerBeta
     */
    'name'?: string;
    /**
     * The display name of the identity
     * @type {string}
     * @memberof WorkgroupDtoOwnerBeta
     */
    'displayName'?: string;
    /**
     * The primary email address of the identity
     * @type {string}
     * @memberof WorkgroupDtoOwnerBeta
     */
    'emailAddress'?: string;
}
export declare const WorkgroupDtoOwnerBetaTypeEnum: {
    readonly Identity: "IDENTITY";
};
export type WorkgroupDtoOwnerBetaTypeEnum = typeof WorkgroupDtoOwnerBetaTypeEnum[keyof typeof WorkgroupDtoOwnerBetaTypeEnum];
/**
 *
 * @export
 * @interface WorkgroupMemberAddItemBeta
 */
export interface WorkgroupMemberAddItemBeta {
    /**
     * Identifier of identity in bulk member add request.
     * @type {string}
     * @memberof WorkgroupMemberAddItemBeta
     */
    'id': string;
    /**
     *  The HTTP response status code returned for an individual member that is requested for addition during a bulk add operation.   The HTTP response status code returned for an individual Governance Group is requested for deletion.   > 201   - Identity is added into Governance Group members list.  > 409   - Identity is already member of  Governance Group.
     * @type {string}
     * @memberof WorkgroupMemberAddItemBeta
     */
    'status': string;
    /**
     * Human readable status description and containing additional context information about success or failures etc.
     * @type {string}
     * @memberof WorkgroupMemberAddItemBeta
     */
    'description'?: string;
}
/**
 *
 * @export
 * @interface WorkgroupMemberDeleteItemBeta
 */
export interface WorkgroupMemberDeleteItemBeta {
    /**
     * Identifier of identity in bulk member add /remove request.
     * @type {string}
     * @memberof WorkgroupMemberDeleteItemBeta
     */
    'id': string;
    /**
     *  The HTTP response status code returned for an individual  member that is requested for deletion during a bulk delete operation.  > 204   - Identity is removed from Governance Group members list.  > 404   - Identity is not member of Governance Group.
     * @type {string}
     * @memberof WorkgroupMemberDeleteItemBeta
     */
    'status': string;
    /**
     * Human readable status description and containing additional context information about success or failures etc.
     * @type {string}
     * @memberof WorkgroupMemberDeleteItemBeta
     */
    'description'?: string;
}
/**
 * AccessModelMetadataBetaApi - axios parameter creator
 * @export
 */
export declare const AccessModelMetadataBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get single Access Model Metadata Attribute
     * @summary Get Access Model Metadata Attribute
     * @param {string} key Technical name of the Attribute.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessModelMetadataAttribute: (key: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get single Access Model Metadata Attribute Value
     * @summary Get Access Model Metadata Value
     * @param {string} key Technical name of the Attribute.
     * @param {string} value Technical name of the Attribute value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessModelMetadataAttributeValue: (key: string, value: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of Access Model Metadata Attributes
     * @summary List Access Model Metadata Attributes
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessModelMetadataAttribute: (filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of Access Model Metadata Attribute Values
     * @summary List Access Model Metadata Values
     * @param {string} key Technical name of the Attribute.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessModelMetadataAttributeValue: (key: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessModelMetadataBetaApi - functional programming interface
 * @export
 */
export declare const AccessModelMetadataBetaApiFp: (configuration?: Configuration) => {
    /**
     * Get single Access Model Metadata Attribute
     * @summary Get Access Model Metadata Attribute
     * @param {string} key Technical name of the Attribute.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessModelMetadataAttribute(key: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeDTOBeta>>;
    /**
     * Get single Access Model Metadata Attribute Value
     * @summary Get Access Model Metadata Value
     * @param {string} key Technical name of the Attribute.
     * @param {string} value Technical name of the Attribute value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessModelMetadataAttributeValue(key: string, value: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeValueDTOBeta>>;
    /**
     * Get a list of Access Model Metadata Attributes
     * @summary List Access Model Metadata Attributes
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessModelMetadataAttribute(filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeDTOBeta>>>;
    /**
     * Get a list of Access Model Metadata Attribute Values
     * @summary List Access Model Metadata Values
     * @param {string} key Technical name of the Attribute.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessModelMetadataAttributeValue(key: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttributeValueDTOBeta>>>;
};
/**
 * AccessModelMetadataBetaApi - factory interface
 * @export
 */
export declare const AccessModelMetadataBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get single Access Model Metadata Attribute
     * @summary Get Access Model Metadata Attribute
     * @param {string} key Technical name of the Attribute.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessModelMetadataAttribute(key: string, axiosOptions?: any): AxiosPromise<AttributeDTOBeta>;
    /**
     * Get single Access Model Metadata Attribute Value
     * @summary Get Access Model Metadata Value
     * @param {string} key Technical name of the Attribute.
     * @param {string} value Technical name of the Attribute value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessModelMetadataAttributeValue(key: string, value: string, axiosOptions?: any): AxiosPromise<AttributeValueDTOBeta>;
    /**
     * Get a list of Access Model Metadata Attributes
     * @summary List Access Model Metadata Attributes
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessModelMetadataAttribute(filters?: string, axiosOptions?: any): AxiosPromise<Array<AttributeDTOBeta>>;
    /**
     * Get a list of Access Model Metadata Attribute Values
     * @summary List Access Model Metadata Values
     * @param {string} key Technical name of the Attribute.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessModelMetadataAttributeValue(key: string, axiosOptions?: any): AxiosPromise<Array<AttributeValueDTOBeta>>;
};
/**
 * Request parameters for getAccessModelMetadataAttribute operation in AccessModelMetadataBetaApi.
 * @export
 * @interface AccessModelMetadataBetaApiGetAccessModelMetadataAttributeRequest
 */
export interface AccessModelMetadataBetaApiGetAccessModelMetadataAttributeRequest {
    /**
     * Technical name of the Attribute.
     * @type {string}
     * @memberof AccessModelMetadataBetaApiGetAccessModelMetadataAttribute
     */
    readonly key: string;
}
/**
 * Request parameters for getAccessModelMetadataAttributeValue operation in AccessModelMetadataBetaApi.
 * @export
 * @interface AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValueRequest
 */
export interface AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValueRequest {
    /**
     * Technical name of the Attribute.
     * @type {string}
     * @memberof AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValue
     */
    readonly key: string;
    /**
     * Technical name of the Attribute value.
     * @type {string}
     * @memberof AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValue
     */
    readonly value: string;
}
/**
 * Request parameters for listAccessModelMetadataAttribute operation in AccessModelMetadataBetaApi.
 * @export
 * @interface AccessModelMetadataBetaApiListAccessModelMetadataAttributeRequest
 */
export interface AccessModelMetadataBetaApiListAccessModelMetadataAttributeRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq*  **type**: *eq*  **status**: *eq*  **objectTypes**: *eq*  Supported composite operators: *and*
     * @type {string}
     * @memberof AccessModelMetadataBetaApiListAccessModelMetadataAttribute
     */
    readonly filters?: string;
}
/**
 * Request parameters for listAccessModelMetadataAttributeValue operation in AccessModelMetadataBetaApi.
 * @export
 * @interface AccessModelMetadataBetaApiListAccessModelMetadataAttributeValueRequest
 */
export interface AccessModelMetadataBetaApiListAccessModelMetadataAttributeValueRequest {
    /**
     * Technical name of the Attribute.
     * @type {string}
     * @memberof AccessModelMetadataBetaApiListAccessModelMetadataAttributeValue
     */
    readonly key: string;
}
/**
 * AccessModelMetadataBetaApi - object-oriented interface
 * @export
 * @class AccessModelMetadataBetaApi
 * @extends {BaseAPI}
 */
export declare class AccessModelMetadataBetaApi extends BaseAPI {
    /**
     * Get single Access Model Metadata Attribute
     * @summary Get Access Model Metadata Attribute
     * @param {AccessModelMetadataBetaApiGetAccessModelMetadataAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    getAccessModelMetadataAttribute(requestParameters: AccessModelMetadataBetaApiGetAccessModelMetadataAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AttributeDTOBeta, any>>;
    /**
     * Get single Access Model Metadata Attribute Value
     * @summary Get Access Model Metadata Value
     * @param {AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValueRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    getAccessModelMetadataAttributeValue(requestParameters: AccessModelMetadataBetaApiGetAccessModelMetadataAttributeValueRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AttributeValueDTOBeta, any>>;
    /**
     * Get a list of Access Model Metadata Attributes
     * @summary List Access Model Metadata Attributes
     * @param {AccessModelMetadataBetaApiListAccessModelMetadataAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    listAccessModelMetadataAttribute(requestParameters?: AccessModelMetadataBetaApiListAccessModelMetadataAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AttributeDTOBeta[], any>>;
    /**
     * Get a list of Access Model Metadata Attribute Values
     * @summary List Access Model Metadata Values
     * @param {AccessModelMetadataBetaApiListAccessModelMetadataAttributeValueRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessModelMetadataBetaApi
     */
    listAccessModelMetadataAttributeValue(requestParameters: AccessModelMetadataBetaApiListAccessModelMetadataAttributeValueRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AttributeValueDTOBeta[], any>>;
}
/**
 * AccessProfilesBetaApi - axios parameter creator
 * @export
 */
export declare const AccessProfilesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfileBeta} accessProfileBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessProfile: (accessProfileBeta: AccessProfileBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {string} id ID of the Access Profile to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfile: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfileBulkDeleteRequestBeta} accessProfileBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfilesInBulk: (accessProfileBulkDeleteRequestBeta: AccessProfileBulkDeleteRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {string} id ID of the Access Profile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfile: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
     * @summary List Access Profile\'s Entitlements
     * @param {string} id ID of the access profile containing the entitlements.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfileEntitlements: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary List Access Profiles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessProfiles: (forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {string} id ID of the Access Profile to patch
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAccessProfile: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
     * @summary Update Access Profile(s) requestable field.
     * @param {Array<AccessProfileBulkUpdateRequestInnerBeta>} accessProfileBulkUpdateRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccessProfilesInBulk: (accessProfileBulkUpdateRequestInnerBeta: Array<AccessProfileBulkUpdateRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessProfilesBetaApi - functional programming interface
 * @export
 */
export declare const AccessProfilesBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfileBeta} accessProfileBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessProfile(accessProfileBeta: AccessProfileBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfileBeta>>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {string} id ID of the Access Profile to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfile(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfileBulkDeleteRequestBeta} accessProfileBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfilesInBulk(accessProfileBulkDeleteRequestBeta: AccessProfileBulkDeleteRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfileBulkDeleteResponseBeta>>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {string} id ID of the Access Profile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfile(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfileBeta>>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
     * @summary List Access Profile\'s Entitlements
     * @param {string} id ID of the access profile containing the entitlements.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfileEntitlements(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementBeta>>>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary List Access Profiles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessProfiles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessProfileBeta>>>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {string} id ID of the Access Profile to patch
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAccessProfile(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessProfileBeta>>;
    /**
     * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
     * @summary Update Access Profile(s) requestable field.
     * @param {Array<AccessProfileBulkUpdateRequestInnerBeta>} accessProfileBulkUpdateRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccessProfilesInBulk(accessProfileBulkUpdateRequestInnerBeta: Array<AccessProfileBulkUpdateRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessProfileUpdateItemBeta>>>;
};
/**
 * AccessProfilesBetaApi - factory interface
 * @export
 */
export declare const AccessProfilesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfileBeta} accessProfileBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessProfile(accessProfileBeta: AccessProfileBeta, axiosOptions?: any): AxiosPromise<AccessProfileBeta>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {string} id ID of the Access Profile to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfile(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfileBulkDeleteRequestBeta} accessProfileBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessProfilesInBulk(accessProfileBulkDeleteRequestBeta: AccessProfileBulkDeleteRequestBeta, axiosOptions?: any): AxiosPromise<AccessProfileBulkDeleteResponseBeta>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {string} id ID of the Access Profile
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfile(id: string, axiosOptions?: any): AxiosPromise<AccessProfileBeta>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
     * @summary List Access Profile\'s Entitlements
     * @param {string} id ID of the access profile containing the entitlements.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessProfileEntitlements(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<EntitlementBeta>>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary List Access Profiles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessProfiles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: any): AxiosPromise<Array<AccessProfileBeta>>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {string} id ID of the Access Profile to patch
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchAccessProfile(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<AccessProfileBeta>;
    /**
     * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
     * @summary Update Access Profile(s) requestable field.
     * @param {Array<AccessProfileBulkUpdateRequestInnerBeta>} accessProfileBulkUpdateRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccessProfilesInBulk(accessProfileBulkUpdateRequestInnerBeta: Array<AccessProfileBulkUpdateRequestInnerBeta>, axiosOptions?: any): AxiosPromise<Array<AccessProfileUpdateItemBeta>>;
};
/**
 * Request parameters for createAccessProfile operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiCreateAccessProfileRequest
 */
export interface AccessProfilesBetaApiCreateAccessProfileRequest {
    /**
     *
     * @type {AccessProfileBeta}
     * @memberof AccessProfilesBetaApiCreateAccessProfile
     */
    readonly accessProfileBeta: AccessProfileBeta;
}
/**
 * Request parameters for deleteAccessProfile operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiDeleteAccessProfileRequest
 */
export interface AccessProfilesBetaApiDeleteAccessProfileRequest {
    /**
     * ID of the Access Profile to delete
     * @type {string}
     * @memberof AccessProfilesBetaApiDeleteAccessProfile
     */
    readonly id: string;
}
/**
 * Request parameters for deleteAccessProfilesInBulk operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiDeleteAccessProfilesInBulkRequest
 */
export interface AccessProfilesBetaApiDeleteAccessProfilesInBulkRequest {
    /**
     *
     * @type {AccessProfileBulkDeleteRequestBeta}
     * @memberof AccessProfilesBetaApiDeleteAccessProfilesInBulk
     */
    readonly accessProfileBulkDeleteRequestBeta: AccessProfileBulkDeleteRequestBeta;
}
/**
 * Request parameters for getAccessProfile operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiGetAccessProfileRequest
 */
export interface AccessProfilesBetaApiGetAccessProfileRequest {
    /**
     * ID of the Access Profile
     * @type {string}
     * @memberof AccessProfilesBetaApiGetAccessProfile
     */
    readonly id: string;
}
/**
 * Request parameters for getAccessProfileEntitlements operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiGetAccessProfileEntitlementsRequest
 */
export interface AccessProfilesBetaApiGetAccessProfileEntitlementsRequest {
    /**
     * ID of the access profile containing the entitlements.
     * @type {string}
     * @memberof AccessProfilesBetaApiGetAccessProfileEntitlements
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesBetaApiGetAccessProfileEntitlements
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesBetaApiGetAccessProfileEntitlements
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessProfilesBetaApiGetAccessProfileEntitlements
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @type {string}
     * @memberof AccessProfilesBetaApiGetAccessProfileEntitlements
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @type {string}
     * @memberof AccessProfilesBetaApiGetAccessProfileEntitlements
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listAccessProfiles operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiListAccessProfilesRequest
 */
export interface AccessProfilesBetaApiListAccessProfilesRequest {
    /**
     * If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN or SOURCE_SUBADMIN identity. The value of the parameter is either an identity ID, or the special value **me**, which is shorthand for the calling identity\&#39;s ID.  A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an identity that is not a subadmin.
     * @type {string}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly forSubadmin?: string;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*  **source.id**: *eq, in*  Filtering is not supported for access profiles and entitlements that have the \&#39;+\&#39; symbol in their names.
     * @type {string}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly sorters?: string;
    /**
     * If present and not empty, additionally filters access profiles to those which are assigned to the segment(s) with the specified IDs. If segmentation is currently unavailable, specifying this parameter results in an error.
     * @type {string}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly forSegmentIds?: string;
    /**
     * Indicates whether the response list should contain unsegmented access profiles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @type {boolean}
     * @memberof AccessProfilesBetaApiListAccessProfiles
     */
    readonly includeUnsegmented?: boolean;
}
/**
 * Request parameters for patchAccessProfile operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiPatchAccessProfileRequest
 */
export interface AccessProfilesBetaApiPatchAccessProfileRequest {
    /**
     * ID of the Access Profile to patch
     * @type {string}
     * @memberof AccessProfilesBetaApiPatchAccessProfile
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof AccessProfilesBetaApiPatchAccessProfile
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for updateAccessProfilesInBulk operation in AccessProfilesBetaApi.
 * @export
 * @interface AccessProfilesBetaApiUpdateAccessProfilesInBulkRequest
 */
export interface AccessProfilesBetaApiUpdateAccessProfilesInBulkRequest {
    /**
     *
     * @type {Array<AccessProfileBulkUpdateRequestInnerBeta>}
     * @memberof AccessProfilesBetaApiUpdateAccessProfilesInBulk
     */
    readonly accessProfileBulkUpdateRequestInnerBeta: Array<AccessProfileBulkUpdateRequestInnerBeta>;
}
/**
 * AccessProfilesBetaApi - object-oriented interface
 * @export
 * @class AccessProfilesBetaApi
 * @extends {BaseAPI}
 */
export declare class AccessProfilesBetaApi extends BaseAPI {
    /**
     * Use this API to create an access profile. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with only ROLE_SUBADMIN or SOURCE_SUBADMIN authority must be associated with the access profile\'s Source. The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create Access Profile
     * @param {AccessProfilesBetaApiCreateAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    createAccessProfile(requestParameters: AccessProfilesBetaApiCreateAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileBeta, any>>;
    /**
     * This API deletes an existing Access Profile.  The Access Profile must not be in use, for example, Access Profile can not be deleted if they belong to an Application, Life Cycle State or a Role. If it is, a 400 error is returned.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to invoke this API. In addition, a SOURCE_SUBADMIN token must be able to administer the Source associated with the Access Profile.
     * @summary Delete the specified Access Profile
     * @param {AccessProfilesBetaApiDeleteAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    deleteAccessProfile(requestParameters: AccessProfilesBetaApiDeleteAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoint initiates a bulk deletion of one or more access profiles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 access profiles per request.  By default, if any of the indicated access profiles are in use, no deletions will be performed and the **inUse** field of the response indicates the usages that must be removed first. If the request field **bestEffortOnly** is **true**, however, usages are reported in the **inUse** response field but all other indicated access profiles will be deleted. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this endpoint. In addition, a SOURCE_SUBADMIN can only use this endpoint to delete access profiles associated with sources they\'re able to administer.
     * @summary Delete Access Profile(s)
     * @param {AccessProfilesBetaApiDeleteAccessProfilesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    deleteAccessProfilesInBulk(requestParameters: AccessProfilesBetaApiDeleteAccessProfilesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileBulkDeleteResponseBeta, any>>;
    /**
     * This API returns an Access Profile by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get an Access Profile
     * @param {AccessProfilesBetaApiGetAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    getAccessProfile(requestParameters: AccessProfilesBetaApiGetAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileBeta, any>>;
    /**
     * Use this API to get a list of an access profile\'s entitlements.  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a token with SOURCE_SUBADMIN authority must have access to the source associated with the specified access profile.
     * @summary List Access Profile\'s Entitlements
     * @param {AccessProfilesBetaApiGetAccessProfileEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    getAccessProfileEntitlements(requestParameters: AccessProfilesBetaApiGetAccessProfileEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta[], any>>;
    /**
     * Use this API to get a list of access profiles. A token with API, ORG_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary List Access Profiles
     * @param {AccessProfilesBetaApiListAccessProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    listAccessProfiles(requestParameters?: AccessProfilesBetaApiListAccessProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileBeta[], any>>;
    /**
     * This API updates an existing Access Profile. The following fields are patchable: **name**, **description**, **enabled**, **owner**, **requestable**, **accessRequestConfig**, **revokeRequestConfig**, **segments**, **entitlements**, **provisioningCriteria** A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to patch Access Profiles which are associated with Sources they are able to administer. >  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing access profiles, however, any new access profiles as well as any updates to existing descriptions will be limited to 2000 characters.  > You can only add or replace **entitlements** that exist on the source that the access profile is attached to. You can use the **list entitlements** endpoint with the **filters** query parameter to get a list of available entitlements on the access profile\'s source.
     * @summary Patch a specified Access Profile
     * @param {AccessProfilesBetaApiPatchAccessProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    patchAccessProfile(requestParameters: AccessProfilesBetaApiPatchAccessProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileBeta, any>>;
    /**
     * This API initiates a bulk update of field requestable for one or more Access Profiles.  >  If any of the indicated Access Profiles is exists in Organization,then those Access Profiles will be added in **updated**     list of the response.Requestable field of these Access Profiles marked as **true** or **false**.  >  If any of the indicated Access Profiles is not does not exists in Organization,then those Access Profiles will be added in **notFound** list of the response. Access Profiles marked as **notFound** will not be updated. >  A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. In addition, a SOURCE_SUBADMIN may only use this API to update Access Profiles which are associated with Sources they are able to administer.
     * @summary Update Access Profile(s) requestable field.
     * @param {AccessProfilesBetaApiUpdateAccessProfilesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessProfilesBetaApi
     */
    updateAccessProfilesInBulk(requestParameters: AccessProfilesBetaApiUpdateAccessProfilesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessProfileUpdateItemBeta[], any>>;
}
/**
 * AccessRequestApprovalsBetaApi - axios parameter creator
 * @export
 */
export declare const AccessRequestApprovalsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveAccessRequest: (approvalId: string, commentDtoBeta: CommentDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {ForwardApprovalDtoBeta} forwardApprovalDtoBeta Information about the forwarded approval.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardAccessRequest: (approvalId: string, forwardApprovalDtoBeta: ForwardApprovalDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
     * @summary Get Access Requests Approvals Number
     * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestApprovalSummary: (ownerId?: string, fromDate?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompletedApprovals: (ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPendingApprovals: (ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectAccessRequest: (approvalId: string, commentDtoBeta: CommentDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessRequestApprovalsBetaApi - functional programming interface
 * @export
 */
export declare const AccessRequestApprovalsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveAccessRequest(approvalId: string, commentDtoBeta: CommentDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {ForwardApprovalDtoBeta} forwardApprovalDtoBeta Information about the forwarded approval.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardAccessRequest(approvalId: string, forwardApprovalDtoBeta: ForwardApprovalDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
     * @summary Get Access Requests Approvals Number
     * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestApprovalSummary(ownerId?: string, fromDate?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalSummaryBeta>>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompletedApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompletedApprovalBeta>>>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPendingApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PendingApprovalBeta>>>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectAccessRequest(approvalId: string, commentDtoBeta: CommentDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * AccessRequestApprovalsBetaApi - factory interface
 * @export
 */
export declare const AccessRequestApprovalsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveAccessRequest(approvalId: string, commentDtoBeta: CommentDtoBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {ForwardApprovalDtoBeta} forwardApprovalDtoBeta Information about the forwarded approval.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardAccessRequest(approvalId: string, forwardApprovalDtoBeta: ForwardApprovalDtoBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
     * @summary Get Access Requests Approvals Number
     * @param {string} [ownerId] The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {string} [fromDate] This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestApprovalSummary(ownerId?: string, fromDate?: string, axiosOptions?: any): AxiosPromise<ApprovalSummaryBeta>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompletedApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<CompletedApprovalBeta>>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {string} [ownerId] If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPendingApprovals(ownerId?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<PendingApprovalBeta>>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {string} approvalId Approval ID.
     * @param {CommentDtoBeta} commentDtoBeta Reviewer\&#39;s comment.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectAccessRequest(approvalId: string, commentDtoBeta: CommentDtoBeta, axiosOptions?: any): AxiosPromise<object>;
};
/**
 * Request parameters for approveAccessRequest operation in AccessRequestApprovalsBetaApi.
 * @export
 * @interface AccessRequestApprovalsBetaApiApproveAccessRequestRequest
 */
export interface AccessRequestApprovalsBetaApiApproveAccessRequestRequest {
    /**
     * Approval ID.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiApproveAccessRequest
     */
    readonly approvalId: string;
    /**
     * Reviewer\&#39;s comment.
     * @type {CommentDtoBeta}
     * @memberof AccessRequestApprovalsBetaApiApproveAccessRequest
     */
    readonly commentDtoBeta: CommentDtoBeta;
}
/**
 * Request parameters for forwardAccessRequest operation in AccessRequestApprovalsBetaApi.
 * @export
 * @interface AccessRequestApprovalsBetaApiForwardAccessRequestRequest
 */
export interface AccessRequestApprovalsBetaApiForwardAccessRequestRequest {
    /**
     * Approval ID.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiForwardAccessRequest
     */
    readonly approvalId: string;
    /**
     * Information about the forwarded approval.
     * @type {ForwardApprovalDtoBeta}
     * @memberof AccessRequestApprovalsBetaApiForwardAccessRequest
     */
    readonly forwardApprovalDtoBeta: ForwardApprovalDtoBeta;
}
/**
 * Request parameters for getAccessRequestApprovalSummary operation in AccessRequestApprovalsBetaApi.
 * @export
 * @interface AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummaryRequest
 */
export interface AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummaryRequest {
    /**
     * The ID of the owner or approver identity of the approvals. If present, the value returns approval summary for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN user can also fetch all the approvals in the org, when owner-id is not used.    * Non ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummary
     */
    readonly ownerId?: string;
    /**
     * This is the date and time the results will be shown from. It must be in a valid ISO-8601 format.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummary
     */
    readonly fromDate?: string;
}
/**
 * Request parameters for listCompletedApprovals operation in AccessRequestApprovalsBetaApi.
 * @export
 * @interface AccessRequestApprovalsBetaApiListCompletedApprovalsRequest
 */
export interface AccessRequestApprovalsBetaApiListCompletedApprovalsRequest {
    /**
     * If present, the value returns only completed approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiListCompletedApprovals
     */
    readonly ownerId?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsBetaApiListCompletedApprovals
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsBetaApiListCompletedApprovals
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessRequestApprovalsBetaApiListCompletedApprovals
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **requestedFor.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, sw*
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiListCompletedApprovals
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiListCompletedApprovals
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listPendingApprovals operation in AccessRequestApprovalsBetaApi.
 * @export
 * @interface AccessRequestApprovalsBetaApiListPendingApprovalsRequest
 */
export interface AccessRequestApprovalsBetaApiListPendingApprovalsRequest {
    /**
     * If present, the value returns only pending approvals for the specified identity.    * ORG_ADMIN users can call this with any identity ID value.    * ORG_ADMIN users can also fetch all the approvals in the org, when owner-id is not used.    * Non-ORG_ADMIN users can only specify *me* or pass their own identity ID value.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiListPendingApprovals
     */
    readonly ownerId?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsBetaApiListPendingApprovals
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccessRequestApprovalsBetaApiListPendingApprovals
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccessRequestApprovalsBetaApiListPendingApprovals
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **requestedFor.id**: *eq, in*  **modified**: *gt, lt, ge, le, eq, in*
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiListPendingApprovals
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiListPendingApprovals
     */
    readonly sorters?: string;
}
/**
 * Request parameters for rejectAccessRequest operation in AccessRequestApprovalsBetaApi.
 * @export
 * @interface AccessRequestApprovalsBetaApiRejectAccessRequestRequest
 */
export interface AccessRequestApprovalsBetaApiRejectAccessRequestRequest {
    /**
     * Approval ID.
     * @type {string}
     * @memberof AccessRequestApprovalsBetaApiRejectAccessRequest
     */
    readonly approvalId: string;
    /**
     * Reviewer\&#39;s comment.
     * @type {CommentDtoBeta}
     * @memberof AccessRequestApprovalsBetaApiRejectAccessRequest
     */
    readonly commentDtoBeta: CommentDtoBeta;
}
/**
 * AccessRequestApprovalsBetaApi - object-oriented interface
 * @export
 * @class AccessRequestApprovalsBetaApi
 * @extends {BaseAPI}
 */
export declare class AccessRequestApprovalsBetaApi extends BaseAPI {
    /**
     * Use this endpoint to approve an access request approval. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Approve Access Request Approval
     * @param {AccessRequestApprovalsBetaApiApproveAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    approveAccessRequest(requestParameters: AccessRequestApprovalsBetaApiApproveAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to forward an access request approval to a new owner. Only the owner of the approval and ORG_ADMIN users are allowed to perform this action.
     * @summary Forward Access Request Approval
     * @param {AccessRequestApprovalsBetaApiForwardAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    forwardAccessRequest(requestParameters: AccessRequestApprovalsBetaApiForwardAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to return the number of pending, approved and rejected access requests approvals. See the \"owner-id\" query parameter for authorization information.
     * @summary Get Access Requests Approvals Number
     * @param {AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    getAccessRequestApprovalSummary(requestParameters?: AccessRequestApprovalsBetaApiGetAccessRequestApprovalSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApprovalSummaryBeta, any>>;
    /**
     * This endpoint returns list of completed approvals. See *owner-id* query parameter below for authorization info.
     * @summary Completed Access Request Approvals List
     * @param {AccessRequestApprovalsBetaApiListCompletedApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    listCompletedApprovals(requestParameters?: AccessRequestApprovalsBetaApiListCompletedApprovalsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletedApprovalBeta[], any>>;
    /**
     * This endpoint returns a list of pending approvals. See \"owner-id\" query parameter below for authorization info.
     * @summary Pending Access Request Approvals List
     * @param {AccessRequestApprovalsBetaApiListPendingApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    listPendingApprovals(requestParameters?: AccessRequestApprovalsBetaApiListPendingApprovalsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PendingApprovalBeta[], any>>;
    /**
     * Use this API to reject an access request approval. Only the owner of the approval and admin users are allowed to perform this action.
     * @summary Reject Access Request Approval
     * @param {AccessRequestApprovalsBetaApiRejectAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApprovalsBetaApi
     */
    rejectAccessRequest(requestParameters: AccessRequestApprovalsBetaApiRejectAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * AccessRequestIdentityMetricsBetaApi - axios parameter creator
 * @export
 */
export declare const AccessRequestIdentityMetricsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to return information access metrics.
     * @summary Return access request identity metrics
     * @param {string} identityId Manager\&#39;s identity ID.
     * @param {string} requestedObjectId Requested access item\&#39;s ID.
     * @param {string} type Requested access item\&#39;s type.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestIdentityMetrics: (identityId: string, requestedObjectId: string, type: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessRequestIdentityMetricsBetaApi - functional programming interface
 * @export
 */
export declare const AccessRequestIdentityMetricsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to return information access metrics.
     * @summary Return access request identity metrics
     * @param {string} identityId Manager\&#39;s identity ID.
     * @param {string} requestedObjectId Requested access item\&#39;s ID.
     * @param {string} type Requested access item\&#39;s type.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestIdentityMetrics(identityId: string, requestedObjectId: string, type: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * AccessRequestIdentityMetricsBetaApi - factory interface
 * @export
 */
export declare const AccessRequestIdentityMetricsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to return information access metrics.
     * @summary Return access request identity metrics
     * @param {string} identityId Manager\&#39;s identity ID.
     * @param {string} requestedObjectId Requested access item\&#39;s ID.
     * @param {string} type Requested access item\&#39;s type.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestIdentityMetrics(identityId: string, requestedObjectId: string, type: string, axiosOptions?: any): AxiosPromise<object>;
};
/**
 * Request parameters for getAccessRequestIdentityMetrics operation in AccessRequestIdentityMetricsBetaApi.
 * @export
 * @interface AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetricsRequest
 */
export interface AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetricsRequest {
    /**
     * Manager\&#39;s identity ID.
     * @type {string}
     * @memberof AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetrics
     */
    readonly identityId: string;
    /**
     * Requested access item\&#39;s ID.
     * @type {string}
     * @memberof AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetrics
     */
    readonly requestedObjectId: string;
    /**
     * Requested access item\&#39;s type.
     * @type {string}
     * @memberof AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetrics
     */
    readonly type: string;
}
/**
 * AccessRequestIdentityMetricsBetaApi - object-oriented interface
 * @export
 * @class AccessRequestIdentityMetricsBetaApi
 * @extends {BaseAPI}
 */
export declare class AccessRequestIdentityMetricsBetaApi extends BaseAPI {
    /**
     * Use this API to return information access metrics.
     * @summary Return access request identity metrics
     * @param {AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetricsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestIdentityMetricsBetaApi
     */
    getAccessRequestIdentityMetrics(requestParameters: AccessRequestIdentityMetricsBetaApiGetAccessRequestIdentityMetricsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * AccessRequestsBetaApi - axios parameter creator
 * @export
 */
export declare const AccessRequestsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {CancelAccessRequestBeta} cancelAccessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelAccessRequest: (cancelAccessRequestBeta: CancelAccessRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
     * @summary Close Access Request
     * @param {CloseAccessRequestBeta} closeAccessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    closeAccessRequest: (closeAccessRequestBeta: CloseAccessRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequestBeta} accessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessRequest: (accessRequestBeta: AccessRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessRequestStatus: (requestedFor?: string, requestedBy?: string, regardingIdentity?: string, assignedTo?: string, count?: boolean, limit?: number, offset?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestConfigBeta} accessRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setAccessRequestConfig: (accessRequestConfigBeta: AccessRequestConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccessRequestsBetaApi - functional programming interface
 * @export
 */
export declare const AccessRequestsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {CancelAccessRequestBeta} cancelAccessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelAccessRequest(cancelAccessRequestBeta: CancelAccessRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
     * @summary Close Access Request
     * @param {CloseAccessRequestBeta} closeAccessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    closeAccessRequest(closeAccessRequestBeta: CloseAccessRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequestBeta} accessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessRequest(accessRequestBeta: AccessRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestConfigBeta>>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessRequestStatus(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, assignedTo?: string, count?: boolean, limit?: number, offset?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestedItemStatusBeta>>>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestConfigBeta} accessRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setAccessRequestConfig(accessRequestConfigBeta: AccessRequestConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestConfigBeta>>;
};
/**
 * AccessRequestsBetaApi - factory interface
 * @export
 */
export declare const AccessRequestsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {CancelAccessRequestBeta} cancelAccessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelAccessRequest(cancelAccessRequestBeta: CancelAccessRequestBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
     * @summary Close Access Request
     * @param {CloseAccessRequestBeta} closeAccessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    closeAccessRequest(closeAccessRequestBeta: CloseAccessRequestBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequestBeta} accessRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessRequest(accessRequestBeta: AccessRequestBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestConfig(axiosOptions?: any): AxiosPromise<AccessRequestConfigBeta>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {string} [requestedFor] Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [assignedTo] Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @param {boolean} [count] If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccessRequestStatus(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, assignedTo?: string, count?: boolean, limit?: number, offset?: number, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<RequestedItemStatusBeta>>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestConfigBeta} accessRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setAccessRequestConfig(accessRequestConfigBeta: AccessRequestConfigBeta, axiosOptions?: any): AxiosPromise<AccessRequestConfigBeta>;
};
/**
 * Request parameters for cancelAccessRequest operation in AccessRequestsBetaApi.
 * @export
 * @interface AccessRequestsBetaApiCancelAccessRequestRequest
 */
export interface AccessRequestsBetaApiCancelAccessRequestRequest {
    /**
     *
     * @type {CancelAccessRequestBeta}
     * @memberof AccessRequestsBetaApiCancelAccessRequest
     */
    readonly cancelAccessRequestBeta: CancelAccessRequestBeta;
}
/**
 * Request parameters for closeAccessRequest operation in AccessRequestsBetaApi.
 * @export
 * @interface AccessRequestsBetaApiCloseAccessRequestRequest
 */
export interface AccessRequestsBetaApiCloseAccessRequestRequest {
    /**
     *
     * @type {CloseAccessRequestBeta}
     * @memberof AccessRequestsBetaApiCloseAccessRequest
     */
    readonly closeAccessRequestBeta: CloseAccessRequestBeta;
}
/**
 * Request parameters for createAccessRequest operation in AccessRequestsBetaApi.
 * @export
 * @interface AccessRequestsBetaApiCreateAccessRequestRequest
 */
export interface AccessRequestsBetaApiCreateAccessRequestRequest {
    /**
     *
     * @type {AccessRequestBeta}
     * @memberof AccessRequestsBetaApiCreateAccessRequest
     */
    readonly accessRequestBeta: AccessRequestBeta;
}
/**
 * Request parameters for listAccessRequestStatus operation in AccessRequestsBetaApi.
 * @export
 * @interface AccessRequestsBetaApiListAccessRequestStatusRequest
 */
export interface AccessRequestsBetaApiListAccessRequestStatusRequest {
    /**
     * Filter the results by the identity the requests were made for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly requestedFor?: string;
    /**
     * Filter the results by the identity twho made the requests. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly requestedBy?: string;
    /**
     * Filter the results by the specified identity who is either the requester or target of the requests. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @type {string}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly regardingIdentity?: string;
    /**
     * Filter the results by the specified identity who is the owner of the Identity Request Work Item. *me* indicates the current user.
     * @type {string}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly assignedTo?: string;
    /**
     * If this is true, the *X-Total-Count* response header populates with the number of results that would be returned if limit and offset were ignored.
     * @type {boolean}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly count?: boolean;
    /**
     * Max number of results to return.
     * @type {number}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. Defaults to 0 if not specified.
     * @type {number}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **accountActivityItemId**: *eq, in, ge, gt, le, lt, ne, isnull, sw*
     * @type {string}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified, accountActivityItemId, name**
     * @type {string}
     * @memberof AccessRequestsBetaApiListAccessRequestStatus
     */
    readonly sorters?: string;
}
/**
 * Request parameters for setAccessRequestConfig operation in AccessRequestsBetaApi.
 * @export
 * @interface AccessRequestsBetaApiSetAccessRequestConfigRequest
 */
export interface AccessRequestsBetaApiSetAccessRequestConfigRequest {
    /**
     *
     * @type {AccessRequestConfigBeta}
     * @memberof AccessRequestsBetaApiSetAccessRequestConfig
     */
    readonly accessRequestConfigBeta: AccessRequestConfigBeta;
}
/**
 * AccessRequestsBetaApi - object-oriented interface
 * @export
 * @class AccessRequestsBetaApi
 * @extends {BaseAPI}
 */
export declare class AccessRequestsBetaApi extends BaseAPI {
    /**
     * This API endpoint cancels a pending access request. An access request can be cancelled only if it has not passed the approval step. Any token with ORG_ADMIN authority or token of the user who originally requested the access request is required to cancel it.
     * @summary Cancel Access Request
     * @param {AccessRequestsBetaApiCancelAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    cancelAccessRequest(requestParameters: AccessRequestsBetaApiCancelAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This endpoint closes access requests that are stuck in a pending state. It can be used throughout a request\'s lifecycle even after the approval state, unlike the [Cancel Access Request endpoint](https://developer.sailpoint.com/idn/api/v3/cancel-access-request/). A token with ORG_ADMIN authority is required.  To find pending access requests with the UI, navigate to Search and use this query: status: Pending AND \"Access Request\". Use the Column Chooser to select \'Tracking Number\', and use the \'Download\' button to export a CSV containing the tracking numbers.  To find pending access requests with the API, use the [List Account Activities endpoint](https://developer.sailpoint.com/idn/api/v3/list-account-activities/).  Input the IDs from either source.  To track the status of endpoint requests, navigate to Search and use this query: name:\"Close Identity Requests\". Search will include \"Close Identity Requests Started\" audits when requests are initiated and \"Close Identity Requests Completed\" audits when requests are completed. The completion audit will list the identity request IDs that finished in error.  This API triggers the [Provisioning Completed event trigger](https://developer.sailpoint.com/idn/docs/event-triggers/triggers/provisioning-completed/) for each access request that is closed.
     * @summary Close Access Request
     * @param {AccessRequestsBetaApiCloseAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    closeAccessRequest(requestParameters: AccessRequestsBetaApiCloseAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to submit an access request in Identity Security Cloud (ISC), where it follows any ISC approval processes.  Access requests are processed asynchronously by ISC. A successful response from this endpoint means that the request has been submitted to ISC and is queued for processing. Because this endpoint is asynchronous, it doesn\'t return an error if you submit duplicate access requests in quick succession or submit an access request for access that is already in progress, approved, or rejected.  It\'s best practice to check for any existing access requests that reference the same access items before submitting a new access request. This can be accomplished by using the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) or the [Pending Access Request Approvals](https://developer.sailpoint.com/idn/api/v3/list-pending-approvals) APIs. You can also use the [Search API](https://developer.sailpoint.com/idn/api/v3/search) to check the existing access items an identity has before submitting an access request to ensure that you aren\'t requesting access that is already granted. If you use this API to request access that an identity already has, the API will ignore the request.  These ignored requests do not display when you use the [List Access Request Status](https://developer.sailpoint.com/idn/api/v3/list-access-request-status) API.  There are two types of access request:  __GRANT_ACCESS__ * Can be requested for multiple identities in a single request. * Supports self request and request on behalf of other users. Refer to the [Get Access Request Configuration](https://developer.sailpoint.com/idn/api/v3/get-access-request-config) endpoint for request configuration options.   * Allows any authenticated token (except API) to call this endpoint to request to grant access to themselves. Depending on the configuration, a user can request access for others. * Roles, access profiles and entitlements can be requested. * While requesting entitlements, maximum of 25 entitlements and 10 recipients are allowed in a request.   __REVOKE_ACCESS__ * Can only be requested for a single identity at a time. * You cannot use an access request to revoke access from an identity if that access has been granted by role membership or by birthright provisioning.  * Does not support self request. Only manager can request to revoke access for their directly managed employees. * If a `removeDate` is specified, then the access will be removed on that date and time only for roles, access profiles and entitlements. * Roles, access profiles, and entitlements can be requested for revocation. * Revoke requests for entitlements are limited to 1 entitlement per access request currently. * You can specify a `removeDate` if the access doesn\'t already have a sunset date. The `removeDate` must be a future date, in the UTC timezone.  * Allows a manager to request to revoke access for direct employees. A token with ORG_ADMIN authority can also request to revoke access from anyone.  A token with API authority cannot be used to call this endpoint.
     * @summary Submit Access Request
     * @param {AccessRequestsBetaApiCreateAccessRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    createAccessRequest(requestParameters: AccessRequestsBetaApiCreateAccessRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This endpoint returns the current access-request configuration.
     * @summary Get Access Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    getAccessRequestConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestConfigBeta, any>>;
    /**
     * Use this API to return a list of access request statuses based on the specified query parameters. If an access request was made for access that an identity already has, the API ignores the access request.  These ignored requests do not display in the list of access request statuses. Any token with any authority can request their own status. A token with ORG_ADMIN authority is required to call this API to get a list of statuses for other users.
     * @summary Access Request Status
     * @param {AccessRequestsBetaApiListAccessRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    listAccessRequestStatus(requestParameters?: AccessRequestsBetaApiListAccessRequestStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RequestedItemStatusBeta[], any>>;
    /**
     * This endpoint replaces the current access-request configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Access Request Configuration
     * @param {AccessRequestsBetaApiSetAccessRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsBetaApi
     */
    setAccessRequestConfig(requestParameters: AccessRequestsBetaApiSetAccessRequestConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestConfigBeta, any>>;
}
/**
 * AccountActivitiesBetaApi - axios parameter creator
 * @export
 */
export declare const AccountActivitiesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This gets a single account activity by its id.
     * @summary Get Account Activity
     * @param {string} id The account activity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountActivity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [type] The type of account activity.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccountActivities: (requestedFor?: string, requestedBy?: string, regardingIdentity?: string, type?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountActivitiesBetaApi - functional programming interface
 * @export
 */
export declare const AccountActivitiesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This gets a single account activity by its id.
     * @summary Get Account Activity
     * @param {string} id The account activity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountActivity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelableAccountActivityBeta>>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [type] The type of account activity.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccountActivities(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, type?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CancelableAccountActivityBeta>>>;
};
/**
 * AccountActivitiesBetaApi - factory interface
 * @export
 */
export declare const AccountActivitiesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This gets a single account activity by its id.
     * @summary Get Account Activity
     * @param {string} id The account activity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountActivity(id: string, axiosOptions?: any): AxiosPromise<CancelableAccountActivityBeta>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {string} [requestedFor] The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [requestedBy] The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @param {string} [regardingIdentity] The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @param {string} [type] The type of account activity.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccountActivities(requestedFor?: string, requestedBy?: string, regardingIdentity?: string, type?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<CancelableAccountActivityBeta>>;
};
/**
 * Request parameters for getAccountActivity operation in AccountActivitiesBetaApi.
 * @export
 * @interface AccountActivitiesBetaApiGetAccountActivityRequest
 */
export interface AccountActivitiesBetaApiGetAccountActivityRequest {
    /**
     * The account activity id
     * @type {string}
     * @memberof AccountActivitiesBetaApiGetAccountActivity
     */
    readonly id: string;
}
/**
 * Request parameters for listAccountActivities operation in AccountActivitiesBetaApi.
 * @export
 * @interface AccountActivitiesBetaApiListAccountActivitiesRequest
 */
export interface AccountActivitiesBetaApiListAccountActivitiesRequest {
    /**
     * The identity that the activity was requested for. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly requestedFor?: string;
    /**
     * The identity that requested the activity. *me* indicates the current user. Mutually exclusive with *regarding-identity*.
     * @type {string}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly requestedBy?: string;
    /**
     * The specified identity will be either the requester or target of the account activity. *me* indicates the current user. Mutually exclusive with *requested-for* and *requested-by*.
     * @type {string}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly regardingIdentity?: string;
    /**
     * The type of account activity.
     * @type {string}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly type?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **type**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **created**: *gt, lt, ge, le, eq, in, ne, isnull, sw*  **modified**: *gt, lt, ge, le, eq, in, ne, isnull, sw*
     * @type {string}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified**
     * @type {string}
     * @memberof AccountActivitiesBetaApiListAccountActivities
     */
    readonly sorters?: string;
}
/**
 * AccountActivitiesBetaApi - object-oriented interface
 * @export
 * @class AccountActivitiesBetaApi
 * @extends {BaseAPI}
 */
export declare class AccountActivitiesBetaApi extends BaseAPI {
    /**
     * This gets a single account activity by its id.
     * @summary Get Account Activity
     * @param {AccountActivitiesBetaApiGetAccountActivityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountActivitiesBetaApi
     */
    getAccountActivity(requestParameters: AccountActivitiesBetaApiGetAccountActivityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CancelableAccountActivityBeta, any>>;
    /**
     * This gets a collection of account activities that satisfy the given query parameters.
     * @summary List Account Activities
     * @param {AccountActivitiesBetaApiListAccountActivitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountActivitiesBetaApi
     */
    listAccountActivities(requestParameters?: AccountActivitiesBetaApiListAccountActivitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CancelableAccountActivityBeta[], any>>;
}
/**
 * AccountAggregationsBetaApi - axios parameter creator
 * @export
 */
export declare const AccountAggregationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
     * @summary In-progress Account Aggregation status
     * @param {string} id The account aggregation id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAggregationStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountAggregationsBetaApi - functional programming interface
 * @export
 */
export declare const AccountAggregationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
     * @summary In-progress Account Aggregation status
     * @param {string} id The account aggregation id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAggregationStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountAggregationStatusBeta>>;
};
/**
 * AccountAggregationsBetaApi - factory interface
 * @export
 */
export declare const AccountAggregationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
     * @summary In-progress Account Aggregation status
     * @param {string} id The account aggregation id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAggregationStatus(id: string, axiosOptions?: any): AxiosPromise<AccountAggregationStatusBeta>;
};
/**
 * Request parameters for getAccountAggregationStatus operation in AccountAggregationsBetaApi.
 * @export
 * @interface AccountAggregationsBetaApiGetAccountAggregationStatusRequest
 */
export interface AccountAggregationsBetaApiGetAccountAggregationStatusRequest {
    /**
     * The account aggregation id
     * @type {string}
     * @memberof AccountAggregationsBetaApiGetAccountAggregationStatus
     */
    readonly id: string;
}
/**
 * AccountAggregationsBetaApi - object-oriented interface
 * @export
 * @class AccountAggregationsBetaApi
 * @extends {BaseAPI}
 */
export declare class AccountAggregationsBetaApi extends BaseAPI {
    /**
     * This API returns the status of an *in-progress* account aggregation, along with the total number of **NEW**, **CHANGED** and **DELETED** accounts found since the previous aggregation, and the number of those accounts that have been processed so far.  Accounts that have not changed since the previous aggregation are not included in **totalAccounts** and **processedAccounts** counts returned by this API. This is distinct from **Accounts Scanned** shown in the Aggregation UI, which indicates total accounts scanned regardless of whether they changed or not.  Since this endpoint reports on the status of an *in-progress* account aggregation, totalAccounts and processedAccounts may change between calls to this endpoint.  *Only available up to an hour after the aggregation completes. May respond with *404 Not Found* after that.*  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN or DASHBOARD authority is required to call this API.
     * @summary In-progress Account Aggregation status
     * @param {AccountAggregationsBetaApiGetAccountAggregationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountAggregationsBetaApi
     */
    getAccountAggregationStatus(requestParameters: AccountAggregationsBetaApiGetAccountAggregationStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountAggregationStatusBeta, any>>;
}
/**
 * AccountUsagesBetaApi - axios parameter creator
 * @export
 */
export declare const AccountUsagesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {string} accountId ID of IDN account
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesByAccountId: (accountId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountUsagesBetaApi - functional programming interface
 * @export
 */
export declare const AccountUsagesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {string} accountId ID of IDN account
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesByAccountId(accountId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountUsageBeta>>>;
};
/**
 * AccountUsagesBetaApi - factory interface
 * @export
 */
export declare const AccountUsagesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {string} accountId ID of IDN account
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesByAccountId(accountId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccountUsageBeta>>;
};
/**
 * Request parameters for getUsagesByAccountId operation in AccountUsagesBetaApi.
 * @export
 * @interface AccountUsagesBetaApiGetUsagesByAccountIdRequest
 */
export interface AccountUsagesBetaApiGetUsagesByAccountIdRequest {
    /**
     * ID of IDN account
     * @type {string}
     * @memberof AccountUsagesBetaApiGetUsagesByAccountId
     */
    readonly accountId: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountUsagesBetaApiGetUsagesByAccountId
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountUsagesBetaApiGetUsagesByAccountId
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountUsagesBetaApiGetUsagesByAccountId
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @type {string}
     * @memberof AccountUsagesBetaApiGetUsagesByAccountId
     */
    readonly sorters?: string;
}
/**
 * AccountUsagesBetaApi - object-oriented interface
 * @export
 * @class AccountUsagesBetaApi
 * @extends {BaseAPI}
 */
export declare class AccountUsagesBetaApi extends BaseAPI {
    /**
     * This API returns a summary of account usage insights for past 12 months.
     * @summary Returns account usage insights
     * @param {AccountUsagesBetaApiGetUsagesByAccountIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountUsagesBetaApi
     */
    getUsagesByAccountId(requestParameters: AccountUsagesBetaApiGetUsagesByAccountIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountUsageBeta[], any>>;
}
/**
 * AccountsBetaApi - axios parameter creator
 * @export
 */
export declare const AccountsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountAttributesCreateBeta} accountAttributesCreateBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccount: (accountAttributesCreateBeta: AccountAttributesCreateBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountAsync: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {string} id The account id
     * @param {AccountToggleRequestBeta} accountToggleRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccount: (id: string, accountToggleRequestBeta: AccountToggleRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to disable IDN account for a single identity.
     * @summary Disable IDN Account for Identity
     * @param {string} id The identity id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccountForIdentity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits tasks to disable IDN account for each identity provided in the request body.
     * @summary Disable IDN Accounts for Identities
     * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccountsForIdentities: (identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {string} id The account id
     * @param {AccountToggleRequestBeta} accountToggleRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccount: (id: string, accountToggleRequestBeta: AccountToggleRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to enable IDN account for a single identity.
     * @summary Enable IDN Account for Identity
     * @param {string} id The identity id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccountForIdentity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits tasks to enable IDN account for each identity provided in the request body.
     * @summary Enable IDN Accounts for Identities
     * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccountsForIdentities: (identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccount: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {string} id The account id
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEntitlements: (id: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {'SLIM' | 'FULL'} [detailLevel] Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts: (detailLevel?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {AccountAttributesBeta} accountAttributesBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putAccount: (id: string, accountAttributesBeta: AccountAttributesBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReloadAccount: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {string} id The account ID.
     * @param {AccountUnlockRequestBeta} accountUnlockRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unlockAccount: (id: string, accountUnlockRequestBeta: AccountUnlockRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount: (id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountsBetaApi - functional programming interface
 * @export
 */
export declare const AccountsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountAttributesCreateBeta} accountAttributesCreateBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(accountAttributesCreateBeta: AccountAttributesCreateBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountAsync(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultDtoBeta>>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {string} id The account id
     * @param {AccountToggleRequestBeta} accountToggleRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccount(id: string, accountToggleRequestBeta: AccountToggleRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * This API submits a task to disable IDN account for a single identity.
     * @summary Disable IDN Account for Identity
     * @param {string} id The identity id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccountForIdentity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This API submits tasks to disable IDN account for each identity provided in the request body.
     * @summary Disable IDN Accounts for Identities
     * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccountsForIdentities(identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BulkIdentitiesAccountsResponseBeta>>>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {string} id The account id
     * @param {AccountToggleRequestBeta} accountToggleRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccount(id: string, accountToggleRequestBeta: AccountToggleRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * This API submits a task to enable IDN account for a single identity.
     * @summary Enable IDN Account for Identity
     * @param {string} id The identity id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccountForIdentity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This API submits tasks to enable IDN account for each identity provided in the request body.
     * @summary Enable IDN Accounts for Identities
     * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccountsForIdentities(identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BulkIdentitiesAccountsResponseBeta>>>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountBeta>>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {string} id The account id
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEntitlements(id: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementBeta>>>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {'SLIM' | 'FULL'} [detailLevel] Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(detailLevel?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountBeta>>>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {AccountAttributesBeta} accountAttributesBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putAccount(id: string, accountAttributesBeta: AccountAttributesBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReloadAccount(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {string} id The account ID.
     * @param {AccountUnlockRequestBeta} accountUnlockRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unlockAccount(id: string, accountUnlockRequestBeta: AccountUnlockRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountsAsyncResultBeta>>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * AccountsBetaApi - factory interface
 * @export
 */
export declare const AccountsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountAttributesCreateBeta} accountAttributesCreateBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(accountAttributesCreateBeta: AccountAttributesCreateBeta, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccount(id: string, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountAsync(id: string, axiosOptions?: any): AxiosPromise<TaskResultDtoBeta>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {string} id The account id
     * @param {AccountToggleRequestBeta} accountToggleRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccount(id: string, accountToggleRequestBeta: AccountToggleRequestBeta, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * This API submits a task to disable IDN account for a single identity.
     * @summary Disable IDN Account for Identity
     * @param {string} id The identity id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccountForIdentity(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This API submits tasks to disable IDN account for each identity provided in the request body.
     * @summary Disable IDN Accounts for Identities
     * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    disableAccountsForIdentities(identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta, axiosOptions?: any): AxiosPromise<Array<BulkIdentitiesAccountsResponseBeta>>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {string} id The account id
     * @param {AccountToggleRequestBeta} accountToggleRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccount(id: string, accountToggleRequestBeta: AccountToggleRequestBeta, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * This API submits a task to enable IDN account for a single identity.
     * @summary Enable IDN Account for Identity
     * @param {string} id The identity id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccountForIdentity(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This API submits tasks to enable IDN account for each identity provided in the request body.
     * @summary Enable IDN Accounts for Identities
     * @param {IdentitiesAccountsBulkRequestBeta} identitiesAccountsBulkRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    enableAccountsForIdentities(identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta, axiosOptions?: any): AxiosPromise<Array<BulkIdentitiesAccountsResponseBeta>>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {string} id Account ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(id: string, axiosOptions?: any): AxiosPromise<AccountBeta>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {string} id The account id
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEntitlements(id: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<EntitlementBeta>>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {'SLIM' | 'FULL'} [detailLevel] Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listAccounts(detailLevel?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccountBeta>>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {AccountAttributesBeta} accountAttributesBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putAccount(id: string, accountAttributesBeta: AccountAttributesBeta, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {string} id The account id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitReloadAccount(id: string, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {string} id The account ID.
     * @param {AccountUnlockRequestBeta} accountUnlockRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unlockAccount(id: string, accountUnlockRequestBeta: AccountUnlockRequestBeta, axiosOptions?: any): AxiosPromise<AccountsAsyncResultBeta>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {string} id Account ID.
     * @param {Array<object>} requestBody A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(id: string, requestBody: Array<object>, axiosOptions?: any): AxiosPromise<object>;
};
/**
 * Request parameters for createAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiCreateAccountRequest
 */
export interface AccountsBetaApiCreateAccountRequest {
    /**
     *
     * @type {AccountAttributesCreateBeta}
     * @memberof AccountsBetaApiCreateAccount
     */
    readonly accountAttributesCreateBeta: AccountAttributesCreateBeta;
}
/**
 * Request parameters for deleteAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiDeleteAccountRequest
 */
export interface AccountsBetaApiDeleteAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsBetaApiDeleteAccount
     */
    readonly id: string;
}
/**
 * Request parameters for deleteAccountAsync operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiDeleteAccountAsyncRequest
 */
export interface AccountsBetaApiDeleteAccountAsyncRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsBetaApiDeleteAccountAsync
     */
    readonly id: string;
}
/**
 * Request parameters for disableAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiDisableAccountRequest
 */
export interface AccountsBetaApiDisableAccountRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsBetaApiDisableAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountToggleRequestBeta}
     * @memberof AccountsBetaApiDisableAccount
     */
    readonly accountToggleRequestBeta: AccountToggleRequestBeta;
}
/**
 * Request parameters for disableAccountForIdentity operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiDisableAccountForIdentityRequest
 */
export interface AccountsBetaApiDisableAccountForIdentityRequest {
    /**
     * The identity id.
     * @type {string}
     * @memberof AccountsBetaApiDisableAccountForIdentity
     */
    readonly id: string;
}
/**
 * Request parameters for disableAccountsForIdentities operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiDisableAccountsForIdentitiesRequest
 */
export interface AccountsBetaApiDisableAccountsForIdentitiesRequest {
    /**
     *
     * @type {IdentitiesAccountsBulkRequestBeta}
     * @memberof AccountsBetaApiDisableAccountsForIdentities
     */
    readonly identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta;
}
/**
 * Request parameters for enableAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiEnableAccountRequest
 */
export interface AccountsBetaApiEnableAccountRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsBetaApiEnableAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountToggleRequestBeta}
     * @memberof AccountsBetaApiEnableAccount
     */
    readonly accountToggleRequestBeta: AccountToggleRequestBeta;
}
/**
 * Request parameters for enableAccountForIdentity operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiEnableAccountForIdentityRequest
 */
export interface AccountsBetaApiEnableAccountForIdentityRequest {
    /**
     * The identity id.
     * @type {string}
     * @memberof AccountsBetaApiEnableAccountForIdentity
     */
    readonly id: string;
}
/**
 * Request parameters for enableAccountsForIdentities operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiEnableAccountsForIdentitiesRequest
 */
export interface AccountsBetaApiEnableAccountsForIdentitiesRequest {
    /**
     *
     * @type {IdentitiesAccountsBulkRequestBeta}
     * @memberof AccountsBetaApiEnableAccountsForIdentities
     */
    readonly identitiesAccountsBulkRequestBeta: IdentitiesAccountsBulkRequestBeta;
}
/**
 * Request parameters for getAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiGetAccountRequest
 */
export interface AccountsBetaApiGetAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsBetaApiGetAccount
     */
    readonly id: string;
}
/**
 * Request parameters for getAccountEntitlements operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiGetAccountEntitlementsRequest
 */
export interface AccountsBetaApiGetAccountEntitlementsRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsBetaApiGetAccountEntitlements
     */
    readonly id: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsBetaApiGetAccountEntitlements
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsBetaApiGetAccountEntitlements
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountsBetaApiGetAccountEntitlements
     */
    readonly count?: boolean;
}
/**
 * Request parameters for listAccounts operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiListAccountsRequest
 */
export interface AccountsBetaApiListAccountsRequest {
    /**
     * Determines whether Slim, or increased level of detail is provided for each account in the returned list. FULL is the default behavior.
     * @type {'SLIM' | 'FULL'}
     * @memberof AccountsBetaApiListAccounts
     */
    readonly detailLevel?: 'SLIM' | 'FULL';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsBetaApiListAccounts
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof AccountsBetaApiListAccounts
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof AccountsBetaApiListAccounts
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **identityId**: *eq, in, sw*  **name**: *eq, in, sw*  **nativeIdentity**: *eq, in, sw*  **sourceId**: *eq, in, sw*  **uncorrelated**: *eq*  **entitlements**: *eq*  **origin**: *eq, in*  **manuallyCorrelated**: *eq*  **identity.name**: *eq, in, sw*  **identity.correlated**: *eq*  **identity.identityState**: *eq, in*  **source.displayableName**: *eq, in*  **source.authoritative**: *eq*  **source.connectionType**: *eq, in*
     * @type {string}
     * @memberof AccountsBetaApiListAccounts
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, sourceId, identityId, identity.id, nativeIdentity, uuid, manuallyCorrelated, entitlements, origin, identity.name, identity.identityState, identity.correlated, source.displayableName, source.authoritative, source.connectionType**
     * @type {string}
     * @memberof AccountsBetaApiListAccounts
     */
    readonly sorters?: string;
}
/**
 * Request parameters for putAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiPutAccountRequest
 */
export interface AccountsBetaApiPutAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsBetaApiPutAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountAttributesBeta}
     * @memberof AccountsBetaApiPutAccount
     */
    readonly accountAttributesBeta: AccountAttributesBeta;
}
/**
 * Request parameters for submitReloadAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiSubmitReloadAccountRequest
 */
export interface AccountsBetaApiSubmitReloadAccountRequest {
    /**
     * The account id
     * @type {string}
     * @memberof AccountsBetaApiSubmitReloadAccount
     */
    readonly id: string;
}
/**
 * Request parameters for unlockAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiUnlockAccountRequest
 */
export interface AccountsBetaApiUnlockAccountRequest {
    /**
     * The account ID.
     * @type {string}
     * @memberof AccountsBetaApiUnlockAccount
     */
    readonly id: string;
    /**
     *
     * @type {AccountUnlockRequestBeta}
     * @memberof AccountsBetaApiUnlockAccount
     */
    readonly accountUnlockRequestBeta: AccountUnlockRequestBeta;
}
/**
 * Request parameters for updateAccount operation in AccountsBetaApi.
 * @export
 * @interface AccountsBetaApiUpdateAccountRequest
 */
export interface AccountsBetaApiUpdateAccountRequest {
    /**
     * Account ID.
     * @type {string}
     * @memberof AccountsBetaApiUpdateAccount
     */
    readonly id: string;
    /**
     * A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<object>}
     * @memberof AccountsBetaApiUpdateAccount
     */
    readonly requestBody: Array<object>;
}
/**
 * AccountsBetaApi - object-oriented interface
 * @export
 * @class AccountsBetaApi
 * @extends {BaseAPI}
 */
export declare class AccountsBetaApi extends BaseAPI {
    /**
     * This API submits an account creation task and returns the task ID.   The `sourceId` where this account will be created must be included in the `attributes` object. This endpoint creates an account on the source record in your ISC tenant. This is useful for Flat File (`DelimitedFile`) type sources because it allows you to aggregate new accounts without needing to import a new CSV file every time.  However, if you use this endpoint to create an account for a Direct Connection type source, you must ensure that the account also exists on the target source.  The endpoint doesn\'t actually provision the account on the target source, which means that if the account doesn\'t also exist on the target source, an aggregation between the source and your tenant will remove it from your tenant.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Create Account
     * @param {AccountsBetaApiCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    createAccount(requestParameters: AccountsBetaApiCreateAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * Use this API to delete an account.  This endpoint submits an account delete task and returns the task ID.  This endpoint only deletes the account from IdentityNow, not the source itself, which can result in the account\'s returning with the next aggregation between the source and IdentityNow.  To avoid this scenario, it is recommended that you [disable accounts](https://developer.sailpoint.com/idn/api/v3/disable-account) rather than delete them. This will also allow you to reenable the accounts in the future.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API. >**NOTE:** You can only delete accounts from sources of the \"DelimitedFile\" type.**
     * @summary Delete Account
     * @param {AccountsBetaApiDeleteAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    deleteAccount(requestParameters: AccountsBetaApiDeleteAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * Use this endpoint to remove accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove Account
     * @param {AccountsBetaApiDeleteAccountAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    deleteAccountAsync(requestParameters: AccountsBetaApiDeleteAccountAsyncRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultDtoBeta, any>>;
    /**
     * This API submits a task to disable the account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Disable Account
     * @param {AccountsBetaApiDisableAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    disableAccount(requestParameters: AccountsBetaApiDisableAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * This API submits a task to disable IDN account for a single identity.
     * @summary Disable IDN Account for Identity
     * @param {AccountsBetaApiDisableAccountForIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    disableAccountForIdentity(requestParameters: AccountsBetaApiDisableAccountForIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This API submits tasks to disable IDN account for each identity provided in the request body.
     * @summary Disable IDN Accounts for Identities
     * @param {AccountsBetaApiDisableAccountsForIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    disableAccountsForIdentities(requestParameters: AccountsBetaApiDisableAccountsForIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkIdentitiesAccountsResponseBeta[], any>>;
    /**
     * This API submits a task to enable account and returns the task ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Enable Account
     * @param {AccountsBetaApiEnableAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    enableAccount(requestParameters: AccountsBetaApiEnableAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * This API submits a task to enable IDN account for a single identity.
     * @summary Enable IDN Account for Identity
     * @param {AccountsBetaApiEnableAccountForIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    enableAccountForIdentity(requestParameters: AccountsBetaApiEnableAccountForIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This API submits tasks to enable IDN account for each identity provided in the request body.
     * @summary Enable IDN Accounts for Identities
     * @param {AccountsBetaApiEnableAccountsForIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    enableAccountsForIdentities(requestParameters: AccountsBetaApiEnableAccountsForIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkIdentitiesAccountsResponseBeta[], any>>;
    /**
     * Use this API to return the details for a single account by its ID.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Details
     * @param {AccountsBetaApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    getAccount(requestParameters: AccountsBetaApiGetAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountBeta, any>>;
    /**
     * This API returns entitlements of the account.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Account Entitlements
     * @param {AccountsBetaApiGetAccountEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    getAccountEntitlements(requestParameters: AccountsBetaApiGetAccountEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta[], any>>;
    /**
     * This returns a list of accounts.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Accounts List
     * @param {AccountsBetaApiListAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    listAccounts(requestParameters?: AccountsBetaApiListAccountsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountBeta[], any>>;
    /**
     * Use this API to update an account with a PUT request.   This endpoint submits an account update task and returns the task ID.    A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  >**Note: You can only use this PUT endpoint to update accounts from flat file sources.**
     * @summary Update Account
     * @param {AccountsBetaApiPutAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    putAccount(requestParameters: AccountsBetaApiPutAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * This API asynchronously reloads the account directly from the connector and performs a one-time aggregation process.   A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Reload Account
     * @param {AccountsBetaApiSubmitReloadAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    submitReloadAccount(requestParameters: AccountsBetaApiSubmitReloadAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * This API submits a task to unlock an account and returns the task ID.   To use this endpoint to unlock an account that has the `forceProvisioning` option set to true, the `idn:accounts-provisioning:manage` scope is required.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or HELPDESK authority is required to call this API.
     * @summary Unlock Account
     * @param {AccountsBetaApiUnlockAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    unlockAccount(requestParameters: AccountsBetaApiUnlockAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountsAsyncResultBeta, any>>;
    /**
     * Use this API to update account details.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.  This API supports updating an account\'s correlation by modifying the `identityId` and `manuallyCorrelated` fields.  To reassign an account from one identity to another, replace the current `identityId` with a new value.  If the account you\'re assigning was provisioned by Identity Security Cloud (ISC), it\'s possible for ISC to create a new account  for the previous identity as soon as the account is moved. If the account you\'re assigning is authoritative,  this causes the previous identity to become uncorrelated and can even result in its deletion. All accounts that are reassigned will be set to `manuallyCorrelated: true` unless you specify otherwise.  >**Note:** The `attributes` field can only be modified for flat file accounts.
     * @summary Update Account
     * @param {AccountsBetaApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsBetaApi
     */
    updateAccount(requestParameters: AccountsBetaApiUpdateAccountRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * ApplicationDiscoveryBetaApi - axios parameter creator
 * @export
 */
export declare const ApplicationDiscoveryBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDiscoveredApplications: (limit?: number, offset?: number, filter?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManualDiscoverApplicationsCsvTemplate: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getVendorConnectorMappings: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendManualDiscoverApplicationsCsvTemplate: (file: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApplicationDiscoveryBetaApi - functional programming interface
 * @export
 */
export declare const ApplicationDiscoveryBetaApiFp: (configuration?: Configuration) => {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDiscoveredApplications(limit?: number, offset?: number, filter?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<DiscoveredApplicationsInnerBeta>>>>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManualDiscoverApplicationsCsvTemplate(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManualDiscoverApplicationsTemplateBeta>>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getVendorConnectorMappings(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VendorConnectorMappingBeta>>>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendManualDiscoverApplicationsCsvTemplate(file: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ApplicationDiscoveryBetaApi - factory interface
 * @export
 */
export declare const ApplicationDiscoveryBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filter] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDiscoveredApplications(limit?: number, offset?: number, filter?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<Array<DiscoveredApplicationsInnerBeta>>>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getManualDiscoverApplicationsCsvTemplate(axiosOptions?: any): AxiosPromise<ManualDiscoverApplicationsTemplateBeta>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getVendorConnectorMappings(axiosOptions?: any): AxiosPromise<Array<VendorConnectorMappingBeta>>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {any} file The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendManualDiscoverApplicationsCsvTemplate(file: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for getDiscoveredApplications operation in ApplicationDiscoveryBetaApi.
 * @export
 * @interface ApplicationDiscoveryBetaApiGetDiscoveredApplicationsRequest
 */
export interface ApplicationDiscoveryBetaApiGetDiscoveredApplicationsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ApplicationDiscoveryBetaApiGetDiscoveredApplications
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ApplicationDiscoveryBetaApiGetDiscoveredApplications
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)       Filtering is supported for the following fields and operators:  **name**: *eq, sw, co*  **description**: *eq, sw, co*
     * @type {string}
     * @memberof ApplicationDiscoveryBetaApiGetDiscoveredApplications
     */
    readonly filter?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, discoveredAt, discoverySource**
     * @type {string}
     * @memberof ApplicationDiscoveryBetaApiGetDiscoveredApplications
     */
    readonly sorters?: string;
}
/**
 * Request parameters for sendManualDiscoverApplicationsCsvTemplate operation in ApplicationDiscoveryBetaApi.
 * @export
 * @interface ApplicationDiscoveryBetaApiSendManualDiscoverApplicationsCsvTemplateRequest
 */
export interface ApplicationDiscoveryBetaApiSendManualDiscoverApplicationsCsvTemplateRequest {
    /**
     * The CSV file to upload containing &#x60;application_name&#x60; and &#x60;description&#x60; columns. Each row represents an application to be discovered.
     * @type {any}
     * @memberof ApplicationDiscoveryBetaApiSendManualDiscoverApplicationsCsvTemplate
     */
    readonly file: any;
}
/**
 * ApplicationDiscoveryBetaApi - object-oriented interface
 * @export
 * @class ApplicationDiscoveryBetaApi
 * @extends {BaseAPI}
 */
export declare class ApplicationDiscoveryBetaApi extends BaseAPI {
    /**
     * Fetches a list of applications that have been identified within the environment. This includes details such as application names, discovery dates, potential correlated saas_vendors and related suggested connectors.
     * @summary Retrieve discovered applications for tenant
     * @param {ApplicationDiscoveryBetaApiGetDiscoveredApplicationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    getDiscoveredApplications(requestParameters?: ApplicationDiscoveryBetaApiGetDiscoveredApplicationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DiscoveredApplicationsInnerBeta[][], any>>;
    /**
     * This endpoint allows the user to download an example CSV file with two columns `application_name` and `description`.  The CSV file contains a single row with the values \'Example Application\' and \'Example Description\'.  The downloaded template is specifically designed for use with the `/manual-discover-applications` endpoint.
     * @summary CSV template download for discovery
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    getManualDiscoverApplicationsCsvTemplate(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManualDiscoverApplicationsTemplateBeta, any>>;
    /**
     * Retrieves a list of mappings between SaaS vendors and IDN connectors, detailing the connections established for correlation.
     * @summary List vendor connector mappings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    getVendorConnectorMappings(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VendorConnectorMappingBeta[], any>>;
    /**
     * This endpoint supports uploading a CSV file with application data for manual correlation to specific IDN connectors.  If a suitable IDN connector is unavailable, the system will recommend generic connectors instead.
     * @summary CSV Upload to discover applications
     * @param {ApplicationDiscoveryBetaApiSendManualDiscoverApplicationsCsvTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationDiscoveryBetaApi
     */
    sendManualDiscoverApplicationsCsvTemplate(requestParameters: ApplicationDiscoveryBetaApiSendManualDiscoverApplicationsCsvTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ApprovalsBetaApi - axios parameter creator
 * @export
 */
export declare const ApprovalsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
     * @summary Get an approval
     * @param {string} id ID of the approval that is to be returned
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getApproval: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
     * @summary Get Approvals
     * @param {boolean} [mine] Returns the list of approvals for the current caller
     * @param {string} [requesterId] Returns the list of approvals for a given requester ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getApprovals: (mine?: boolean, requesterId?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change the values of a given approval
     * @summary Change an approval
     * @param {ApprovalDtoBeta} approvalDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchApproval: (approvalDtoBeta: ApprovalDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApprovalsBetaApi - functional programming interface
 * @export
 */
export declare const ApprovalsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
     * @summary Get an approval
     * @param {string} id ID of the approval that is to be returned
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getApproval(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalBeta>>;
    /**
     * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
     * @summary Get Approvals
     * @param {boolean} [mine] Returns the list of approvals for the current caller
     * @param {string} [requesterId] Returns the list of approvals for a given requester ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getApprovals(mine?: boolean, requesterId?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApprovalBeta>>>;
    /**
     * Change the values of a given approval
     * @summary Change an approval
     * @param {ApprovalDtoBeta} approvalDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchApproval(approvalDtoBeta: ApprovalDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApprovalBeta>>;
};
/**
 * ApprovalsBetaApi - factory interface
 * @export
 */
export declare const ApprovalsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
     * @summary Get an approval
     * @param {string} id ID of the approval that is to be returned
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getApproval(id: string, axiosOptions?: any): AxiosPromise<ApprovalBeta>;
    /**
     * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
     * @summary Get Approvals
     * @param {boolean} [mine] Returns the list of approvals for the current caller
     * @param {string} [requesterId] Returns the list of approvals for a given requester ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getApprovals(mine?: boolean, requesterId?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<ApprovalBeta>>;
    /**
     * Change the values of a given approval
     * @summary Change an approval
     * @param {ApprovalDtoBeta} approvalDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchApproval(approvalDtoBeta: ApprovalDtoBeta, axiosOptions?: any): AxiosPromise<ApprovalBeta>;
};
/**
 * Request parameters for getApproval operation in ApprovalsBetaApi.
 * @export
 * @interface ApprovalsBetaApiGetApprovalRequest
 */
export interface ApprovalsBetaApiGetApprovalRequest {
    /**
     * ID of the approval that is to be returned
     * @type {string}
     * @memberof ApprovalsBetaApiGetApproval
     */
    readonly id: string;
}
/**
 * Request parameters for getApprovals operation in ApprovalsBetaApi.
 * @export
 * @interface ApprovalsBetaApiGetApprovalsRequest
 */
export interface ApprovalsBetaApiGetApprovalsRequest {
    /**
     * Returns the list of approvals for the current caller
     * @type {boolean}
     * @memberof ApprovalsBetaApiGetApprovals
     */
    readonly mine?: boolean;
    /**
     * Returns the list of approvals for a given requester ID
     * @type {string}
     * @memberof ApprovalsBetaApiGetApprovals
     */
    readonly requesterId?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq*  **referenceType**: *eq*
     * @type {string}
     * @memberof ApprovalsBetaApiGetApprovals
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchApproval operation in ApprovalsBetaApi.
 * @export
 * @interface ApprovalsBetaApiPatchApprovalRequest
 */
export interface ApprovalsBetaApiPatchApprovalRequest {
    /**
     *
     * @type {ApprovalDtoBeta}
     * @memberof ApprovalsBetaApiPatchApproval
     */
    readonly approvalDtoBeta: ApprovalDtoBeta;
}
/**
 * ApprovalsBetaApi - object-oriented interface
 * @export
 * @class ApprovalsBetaApi
 * @extends {BaseAPI}
 */
export declare class ApprovalsBetaApi extends BaseAPI {
    /**
     * Retrieve a single approval for a given approval ID. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.
     * @summary Get an approval
     * @param {ApprovalsBetaApiGetApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsBetaApi
     */
    getApproval(requestParameters: ApprovalsBetaApiGetApprovalRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApprovalBeta, any>>;
    /**
     * Retrieve a list of approvals, which can be filtered by requester ID, status, or reference type. \"Mine\" query parameter can be used and it will return all approvals for the current approver. This endpoint is for generic approvals, different than the access-request-approval endpoint and does not include access-request-approvals.  Absence of all query parameters will will default to mine=true.
     * @summary Get Approvals
     * @param {ApprovalsBetaApiGetApprovalsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsBetaApi
     */
    getApprovals(requestParameters?: ApprovalsBetaApiGetApprovalsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApprovalBeta[], any>>;
    /**
     * Change the values of a given approval
     * @summary Change an approval
     * @param {ApprovalsBetaApiPatchApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ApprovalsBetaApi
     */
    patchApproval(requestParameters: ApprovalsBetaApiPatchApprovalRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ApprovalBeta, any>>;
}
/**
 * AuthProfileBetaApi - axios parameter creator
 * @export
 */
export declare const AuthProfileBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns auth profile information.
     * @summary Get Auth Profile.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProfileConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of auth profiles.
     * @summary Get list of Auth Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProfileConfigList: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
     * @summary Patch a specified Auth Profile
     * @param {string} id ID of the Auth Profile to patch.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchProfileConfig: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthProfileBetaApi - functional programming interface
 * @export
 */
export declare const AuthProfileBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API returns auth profile information.
     * @summary Get Auth Profile.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProfileConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProfileBeta>>;
    /**
     * This API returns a list of auth profiles.
     * @summary Get list of Auth Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProfileConfigList(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthProfileSummaryBeta>>>;
    /**
     * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
     * @summary Patch a specified Auth Profile
     * @param {string} id ID of the Auth Profile to patch.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchProfileConfig(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProfileBeta>>;
};
/**
 * AuthProfileBetaApi - factory interface
 * @export
 */
export declare const AuthProfileBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns auth profile information.
     * @summary Get Auth Profile.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProfileConfig(axiosOptions?: any): AxiosPromise<AuthProfileBeta>;
    /**
     * This API returns a list of auth profiles.
     * @summary Get list of Auth Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProfileConfigList(axiosOptions?: any): AxiosPromise<Array<AuthProfileSummaryBeta>>;
    /**
     * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
     * @summary Patch a specified Auth Profile
     * @param {string} id ID of the Auth Profile to patch.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchProfileConfig(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<AuthProfileBeta>;
};
/**
 * Request parameters for patchProfileConfig operation in AuthProfileBetaApi.
 * @export
 * @interface AuthProfileBetaApiPatchProfileConfigRequest
 */
export interface AuthProfileBetaApiPatchProfileConfigRequest {
    /**
     * ID of the Auth Profile to patch.
     * @type {string}
     * @memberof AuthProfileBetaApiPatchProfileConfig
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof AuthProfileBetaApiPatchProfileConfig
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * AuthProfileBetaApi - object-oriented interface
 * @export
 * @class AuthProfileBetaApi
 * @extends {BaseAPI}
 */
export declare class AuthProfileBetaApi extends BaseAPI {
    /**
     * This API returns auth profile information.
     * @summary Get Auth Profile.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProfileBetaApi
     */
    getProfileConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthProfileBeta, any>>;
    /**
     * This API returns a list of auth profiles.
     * @summary Get list of Auth Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProfileBetaApi
     */
    getProfileConfigList(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthProfileSummaryBeta[], any>>;
    /**
     * This API updates an existing Auth Profile. The following fields are patchable: **offNetwork**, **untrustedGeography**, **applicationId**, **applicationName**, **type**
     * @summary Patch a specified Auth Profile
     * @param {AuthProfileBetaApiPatchProfileConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthProfileBetaApi
     */
    patchProfileConfig(requestParameters: AuthProfileBetaApiPatchProfileConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthProfileBeta, any>>;
}
/**
 * CertificationCampaignsBetaApi - axios parameter creator
 * @export
 */
export declare const CertificationCampaignsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {string} id Campaign ID.
     * @param {CompleteCampaignOptionsBeta} [completeCampaignOptionsBeta] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    completeCampaign: (id: string, completeCampaignOptionsBeta?: CompleteCampaignOptionsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create Campaign
     * @param {CampaignBeta} campaignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createCampaign: (campaignBeta: CampaignBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CampaignTemplateBeta} campaignTemplateBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createCampaignTemplate: (campaignTemplateBeta: CampaignTemplateBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {string} id ID of the campaign template being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaignTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaignTemplateSchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {DeleteCampaignsRequestBeta} deleteCampaignsRequestBeta IDs of the campaigns to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaigns: (deleteCampaignsRequestBeta: DeleteCampaignsRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getActiveCampaigns: (detail?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {string} id ID of the campaign to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaign: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {string} id ID of the campaign whose reports are being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignReports: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignReportsConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {string} id Requested campaign template\&#39;s ID.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplateSchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplates: (limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {string} id The certification campaign ID
     * @param {AdminReviewReassignBeta} adminReviewReassignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    move: (id: string, adminReviewReassignBeta: AdminReviewReassignBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    patchCampaignTemplate: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CampaignReportsConfigBeta} campaignReportsConfigBeta Campaign report configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setCampaignReportsConfig: (campaignReportsConfigBeta: CampaignReportsConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {string} id ID of the campaign template being scheduled.
     * @param {ScheduleBeta} [scheduleBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setCampaignTemplateSchedule: (id: string, scheduleBeta?: ScheduleBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {string} id Campaign ID.
     * @param {ActivateCampaignOptionsBeta} [activateCampaignOptionsBeta] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaign: (id: string, activateCampaignOptionsBeta?: ActivateCampaignOptionsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {string} id ID of the campaign the remediation scan is being run for.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaignRemediationScan: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {string} id ID of the campaign the report is being run for.
     * @param {ReportTypeBeta} type Type of report to run.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaignReport: (id: string, type: ReportTypeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {string} id ID of the campaign template to use for generation.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startGenerateCampaignTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<object>} requestBody A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateCampaign: (id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CertificationCampaignsBetaApi - functional programming interface
 * @export
 */
export declare const CertificationCampaignsBetaApiFp: (configuration?: Configuration) => {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {string} id Campaign ID.
     * @param {CompleteCampaignOptionsBeta} [completeCampaignOptionsBeta] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    completeCampaign(id: string, completeCampaignOptionsBeta?: CompleteCampaignOptionsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create Campaign
     * @param {CampaignBeta} campaignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createCampaign(campaignBeta: CampaignBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignBeta>>;
    /**
     * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CampaignTemplateBeta} campaignTemplateBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createCampaignTemplate(campaignTemplateBeta: CampaignTemplateBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignTemplateBeta>>;
    /**
     * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {string} id ID of the campaign template being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaignTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaignTemplateSchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {DeleteCampaignsRequestBeta} deleteCampaignsRequestBeta IDs of the campaigns to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaigns(deleteCampaignsRequestBeta: DeleteCampaignsRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getActiveCampaigns(detail?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetActiveCampaigns200ResponseInnerBeta>>>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {string} id ID of the campaign to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaign(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlimcampaignBeta>>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {string} id ID of the campaign whose reports are being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignReports(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignReportBeta>>>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignReportsConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignReportsConfigBeta>>;
    /**
     * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {string} id Requested campaign template\&#39;s ID.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignTemplateBeta>>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplateSchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBeta>>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplates(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignTemplateBeta>>>;
    /**
     * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {string} id The certification campaign ID
     * @param {AdminReviewReassignBeta} adminReviewReassignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    move(id: string, adminReviewReassignBeta: AdminReviewReassignBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificationTaskBeta>>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    patchCampaignTemplate(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignTemplateBeta>>;
    /**
     * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CampaignReportsConfigBeta} campaignReportsConfigBeta Campaign report configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setCampaignReportsConfig(campaignReportsConfigBeta: CampaignReportsConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignReportsConfigBeta>>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {string} id ID of the campaign template being scheduled.
     * @param {ScheduleBeta} [scheduleBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setCampaignTemplateSchedule(id: string, scheduleBeta?: ScheduleBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {string} id Campaign ID.
     * @param {ActivateCampaignOptionsBeta} [activateCampaignOptionsBeta] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaign(id: string, activateCampaignOptionsBeta?: ActivateCampaignOptionsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {string} id ID of the campaign the remediation scan is being run for.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaignRemediationScan(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {string} id ID of the campaign the report is being run for.
     * @param {ReportTypeBeta} type Type of report to run.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaignReport(id: string, type: ReportTypeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {string} id ID of the campaign template to use for generation.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startGenerateCampaignTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignReferenceBeta>>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<object>} requestBody A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateCampaign(id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SlimcampaignBeta>>;
};
/**
 * CertificationCampaignsBetaApi - factory interface
 * @export
 */
export declare const CertificationCampaignsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {string} id Campaign ID.
     * @param {CompleteCampaignOptionsBeta} [completeCampaignOptionsBeta] Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    completeCampaign(id: string, completeCampaignOptionsBeta?: CompleteCampaignOptionsBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create Campaign
     * @param {CampaignBeta} campaignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createCampaign(campaignBeta: CampaignBeta, axiosOptions?: any): AxiosPromise<CampaignBeta>;
    /**
     * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CampaignTemplateBeta} campaignTemplateBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createCampaignTemplate(campaignTemplateBeta: CampaignTemplateBeta, axiosOptions?: any): AxiosPromise<CampaignTemplateBeta>;
    /**
     * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {string} id ID of the campaign template being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaignTemplate(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being deleted.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaignTemplateSchedule(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {DeleteCampaignsRequestBeta} deleteCampaignsRequestBeta IDs of the campaigns to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteCampaigns(deleteCampaignsRequestBeta: DeleteCampaignsRequestBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {'SLIM' | 'FULL'} [detail] Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getActiveCampaigns(detail?: 'SLIM' | 'FULL', limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<GetActiveCampaigns200ResponseInnerBeta>>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {string} id ID of the campaign to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaign(id: string, axiosOptions?: any): AxiosPromise<SlimcampaignBeta>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {string} id ID of the campaign whose reports are being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignReports(id: string, axiosOptions?: any): AxiosPromise<Array<CampaignReportBeta>>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignReportsConfig(axiosOptions?: any): AxiosPromise<CampaignReportsConfigBeta>;
    /**
     * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {string} id Requested campaign template\&#39;s ID.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplate(id: string, axiosOptions?: any): AxiosPromise<CampaignTemplateBeta>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {string} id ID of the campaign template whose schedule is being fetched.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplateSchedule(id: string, axiosOptions?: any): AxiosPromise<ScheduleBeta>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCampaignTemplates(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<CampaignTemplateBeta>>;
    /**
     * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {string} id The certification campaign ID
     * @param {AdminReviewReassignBeta} adminReviewReassignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    move(id: string, adminReviewReassignBeta: AdminReviewReassignBeta, axiosOptions?: any): AxiosPromise<CertificationTaskBeta>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    patchCampaignTemplate(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<CampaignTemplateBeta>;
    /**
     * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CampaignReportsConfigBeta} campaignReportsConfigBeta Campaign report configuration.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setCampaignReportsConfig(campaignReportsConfigBeta: CampaignReportsConfigBeta, axiosOptions?: any): AxiosPromise<CampaignReportsConfigBeta>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {string} id ID of the campaign template being scheduled.
     * @param {ScheduleBeta} [scheduleBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setCampaignTemplateSchedule(id: string, scheduleBeta?: ScheduleBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {string} id Campaign ID.
     * @param {ActivateCampaignOptionsBeta} [activateCampaignOptionsBeta] Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaign(id: string, activateCampaignOptionsBeta?: ActivateCampaignOptionsBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {string} id ID of the campaign the remediation scan is being run for.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaignRemediationScan(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {string} id ID of the campaign the report is being run for.
     * @param {ReportTypeBeta} type Type of report to run.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startCampaignReport(id: string, type: ReportTypeBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {string} id ID of the campaign template to use for generation.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startGenerateCampaignTemplate(id: string, axiosOptions?: any): AxiosPromise<CampaignReferenceBeta>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {string} id ID of the campaign template being modified.
     * @param {Array<object>} requestBody A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateCampaign(id: string, requestBody: Array<object>, axiosOptions?: any): AxiosPromise<SlimcampaignBeta>;
};
/**
 * Request parameters for completeCampaign operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiCompleteCampaignRequest
 */
export interface CertificationCampaignsBetaApiCompleteCampaignRequest {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiCompleteCampaign
     */
    readonly id: string;
    /**
     * Optional. Default behavior is for the campaign to auto-approve upon completion, unless autoCompleteAction&#x3D;REVOKE
     * @type {CompleteCampaignOptionsBeta}
     * @memberof CertificationCampaignsBetaApiCompleteCampaign
     */
    readonly completeCampaignOptionsBeta?: CompleteCampaignOptionsBeta;
}
/**
 * Request parameters for createCampaign operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiCreateCampaignRequest
 */
export interface CertificationCampaignsBetaApiCreateCampaignRequest {
    /**
     *
     * @type {CampaignBeta}
     * @memberof CertificationCampaignsBetaApiCreateCampaign
     */
    readonly campaignBeta: CampaignBeta;
}
/**
 * Request parameters for createCampaignTemplate operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiCreateCampaignTemplateRequest
 */
export interface CertificationCampaignsBetaApiCreateCampaignTemplateRequest {
    /**
     *
     * @type {CampaignTemplateBeta}
     * @memberof CertificationCampaignsBetaApiCreateCampaignTemplate
     */
    readonly campaignTemplateBeta: CampaignTemplateBeta;
}
/**
 * Request parameters for deleteCampaignTemplate operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiDeleteCampaignTemplateRequest
 */
export interface CertificationCampaignsBetaApiDeleteCampaignTemplateRequest {
    /**
     * ID of the campaign template being deleted.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiDeleteCampaignTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for deleteCampaignTemplateSchedule operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiDeleteCampaignTemplateScheduleRequest
 */
export interface CertificationCampaignsBetaApiDeleteCampaignTemplateScheduleRequest {
    /**
     * ID of the campaign template whose schedule is being deleted.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiDeleteCampaignTemplateSchedule
     */
    readonly id: string;
}
/**
 * Request parameters for deleteCampaigns operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiDeleteCampaignsRequest
 */
export interface CertificationCampaignsBetaApiDeleteCampaignsRequest {
    /**
     * IDs of the campaigns to delete.
     * @type {DeleteCampaignsRequestBeta}
     * @memberof CertificationCampaignsBetaApiDeleteCampaigns
     */
    readonly deleteCampaignsRequestBeta: DeleteCampaignsRequestBeta;
}
/**
 * Request parameters for getActiveCampaigns operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiGetActiveCampaignsRequest
 */
export interface CertificationCampaignsBetaApiGetActiveCampaignsRequest {
    /**
     * Determines whether slim, or increased level of detail is provided for each campaign in the returned list. Slim is the default behavior.
     * @type {'SLIM' | 'FULL'}
     * @memberof CertificationCampaignsBetaApiGetActiveCampaigns
     */
    readonly detail?: 'SLIM' | 'FULL';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsBetaApiGetActiveCampaigns
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsBetaApiGetActiveCampaigns
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationCampaignsBetaApiGetActiveCampaigns
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **status**: *eq, in*
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetActiveCampaigns
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created**
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetActiveCampaigns
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getCampaign operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiGetCampaignRequest
 */
export interface CertificationCampaignsBetaApiGetCampaignRequest {
    /**
     * ID of the campaign to be retrieved.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetCampaign
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignReports operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiGetCampaignReportsRequest
 */
export interface CertificationCampaignsBetaApiGetCampaignReportsRequest {
    /**
     * ID of the campaign whose reports are being fetched.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetCampaignReports
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignTemplate operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiGetCampaignTemplateRequest
 */
export interface CertificationCampaignsBetaApiGetCampaignTemplateRequest {
    /**
     * Requested campaign template\&#39;s ID.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignTemplateSchedule operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiGetCampaignTemplateScheduleRequest
 */
export interface CertificationCampaignsBetaApiGetCampaignTemplateScheduleRequest {
    /**
     * ID of the campaign template whose schedule is being fetched.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplateSchedule
     */
    readonly id: string;
}
/**
 * Request parameters for getCampaignTemplates operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiGetCampaignTemplatesRequest
 */
export interface CertificationCampaignsBetaApiGetCampaignTemplatesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplates
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplates
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplates
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplates
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, ge, gt, in, le, lt, ne, sw*  **id**: *eq, ge, gt, in, le, lt, ne, sw*
     * @type {string}
     * @memberof CertificationCampaignsBetaApiGetCampaignTemplates
     */
    readonly filters?: string;
}
/**
 * Request parameters for move operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiMoveRequest
 */
export interface CertificationCampaignsBetaApiMoveRequest {
    /**
     * The certification campaign ID
     * @type {string}
     * @memberof CertificationCampaignsBetaApiMove
     */
    readonly id: string;
    /**
     *
     * @type {AdminReviewReassignBeta}
     * @memberof CertificationCampaignsBetaApiMove
     */
    readonly adminReviewReassignBeta: AdminReviewReassignBeta;
}
/**
 * Request parameters for patchCampaignTemplate operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiPatchCampaignTemplateRequest
 */
export interface CertificationCampaignsBetaApiPatchCampaignTemplateRequest {
    /**
     * ID of the campaign template being modified.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiPatchCampaignTemplate
     */
    readonly id: string;
    /**
     * A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * deadlineDuration * campaign (all fields that are allowed during create)
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof CertificationCampaignsBetaApiPatchCampaignTemplate
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for setCampaignReportsConfig operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiSetCampaignReportsConfigRequest
 */
export interface CertificationCampaignsBetaApiSetCampaignReportsConfigRequest {
    /**
     * Campaign report configuration.
     * @type {CampaignReportsConfigBeta}
     * @memberof CertificationCampaignsBetaApiSetCampaignReportsConfig
     */
    readonly campaignReportsConfigBeta: CampaignReportsConfigBeta;
}
/**
 * Request parameters for setCampaignTemplateSchedule operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiSetCampaignTemplateScheduleRequest
 */
export interface CertificationCampaignsBetaApiSetCampaignTemplateScheduleRequest {
    /**
     * ID of the campaign template being scheduled.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiSetCampaignTemplateSchedule
     */
    readonly id: string;
    /**
     *
     * @type {ScheduleBeta}
     * @memberof CertificationCampaignsBetaApiSetCampaignTemplateSchedule
     */
    readonly scheduleBeta?: ScheduleBeta;
}
/**
 * Request parameters for startCampaign operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiStartCampaignRequest
 */
export interface CertificationCampaignsBetaApiStartCampaignRequest {
    /**
     * Campaign ID.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiStartCampaign
     */
    readonly id: string;
    /**
     * Optional. If no timezone is specified, the standard UTC timezone is used (i.e. UTC+00:00). Although this can take any timezone, the intended value is the caller\&#39;s timezone. The activation time calculated from the given timezone may cause the campaign deadline time to be modified, but it will remain within the original date. The timezone must be in a valid ISO 8601 format.
     * @type {ActivateCampaignOptionsBeta}
     * @memberof CertificationCampaignsBetaApiStartCampaign
     */
    readonly activateCampaignOptionsBeta?: ActivateCampaignOptionsBeta;
}
/**
 * Request parameters for startCampaignRemediationScan operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiStartCampaignRemediationScanRequest
 */
export interface CertificationCampaignsBetaApiStartCampaignRemediationScanRequest {
    /**
     * ID of the campaign the remediation scan is being run for.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiStartCampaignRemediationScan
     */
    readonly id: string;
}
/**
 * Request parameters for startCampaignReport operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiStartCampaignReportRequest
 */
export interface CertificationCampaignsBetaApiStartCampaignReportRequest {
    /**
     * ID of the campaign the report is being run for.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiStartCampaignReport
     */
    readonly id: string;
    /**
     * Type of report to run.
     * @type {ReportTypeBeta}
     * @memberof CertificationCampaignsBetaApiStartCampaignReport
     */
    readonly type: ReportTypeBeta;
}
/**
 * Request parameters for startGenerateCampaignTemplate operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiStartGenerateCampaignTemplateRequest
 */
export interface CertificationCampaignsBetaApiStartGenerateCampaignTemplateRequest {
    /**
     * ID of the campaign template to use for generation.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiStartGenerateCampaignTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for updateCampaign operation in CertificationCampaignsBetaApi.
 * @export
 * @interface CertificationCampaignsBetaApiUpdateCampaignRequest
 */
export interface CertificationCampaignsBetaApiUpdateCampaignRequest {
    /**
     * ID of the campaign template being modified.
     * @type {string}
     * @memberof CertificationCampaignsBetaApiUpdateCampaign
     */
    readonly id: string;
    /**
     * A list of campaign update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The fields that can be patched differ based on the status of the campaign.  When the campaign is in the *STAGED* status, you can patch these fields: * name * description * recommendationsEnabled * deadline * emailNotificationEnabled * autoRevokeAllowed  When the campaign is in the *ACTIVE* status, you can patch these fields: * deadline
     * @type {Array<object>}
     * @memberof CertificationCampaignsBetaApiUpdateCampaign
     */
    readonly requestBody: Array<object>;
}
/**
 * CertificationCampaignsBetaApi - object-oriented interface
 * @export
 * @class CertificationCampaignsBetaApi
 * @extends {BaseAPI}
 */
export declare class CertificationCampaignsBetaApi extends BaseAPI {
    /**
     * :::caution  This endpoint will run successfully for any campaigns that are **past due**.  This endpoint will return a content error if the campaign is **not past due**.  :::  Use this API to complete a certification campaign. This functionality is provided to admins so that they can complete a certification even if all items have not been completed. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/complete-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Complete a Campaign
     * @param {CertificationCampaignsBetaApiCompleteCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    completeCampaign(requestParameters: CertificationCampaignsBetaApiCompleteCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to create a certification campaign with the information provided in the request body. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create Campaign
     * @param {CertificationCampaignsBetaApiCreateCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    createCampaign(requestParameters: CertificationCampaignsBetaApiCreateCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignBeta, any>>;
    /**
     * Use this API to create a campaign template based on campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/create-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Create a Campaign Template
     * @param {CertificationCampaignsBetaApiCreateCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    createCampaignTemplate(requestParameters: CertificationCampaignsBetaApiCreateCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplateBeta, any>>;
    /**
     * Use this API to delete a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete a Campaign Template
     * @param {CertificationCampaignsBetaApiDeleteCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    deleteCampaignTemplate(requestParameters: CertificationCampaignsBetaApiDeleteCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to delete the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaign Template Schedule
     * @param {CertificationCampaignsBetaApiDeleteCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    deleteCampaignTemplateSchedule(requestParameters: CertificationCampaignsBetaApiDeleteCampaignTemplateScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to delete certification campaigns whose IDs are specified in the provided list of campaign IDs. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/delete-campaigns).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Delete Campaigns
     * @param {CertificationCampaignsBetaApiDeleteCampaignsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    deleteCampaigns(requestParameters: CertificationCampaignsBetaApiDeleteCampaignsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to get a list of campaigns. The API can provide increased level of detail for each campaign for the correct provided query. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-active-campaigns).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary List Campaigns
     * @param {CertificationCampaignsBetaApiGetActiveCampaignsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getActiveCampaigns(requestParameters?: CertificationCampaignsBetaApiGetActiveCampaignsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetActiveCampaigns200ResponseInnerBeta[], any>>;
    /**
     * Use this API to get information for an existing certification campaign by the campaign\'s ID. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign
     * @param {CertificationCampaignsBetaApiGetCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getCampaign(requestParameters: CertificationCampaignsBetaApiGetCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SlimcampaignBeta, any>>;
    /**
     * Use this API to fetch all reports for a certification campaign by campaign ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports
     * @param {CertificationCampaignsBetaApiGetCampaignReportsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getCampaignReports(requestParameters: CertificationCampaignsBetaApiGetCampaignReportsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReportBeta[], any>>;
    /**
     * Use this API to fetch the configuration for certification campaign reports. The configuration includes only one element - identity attributes defined as custom report columns. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Reports Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getCampaignReportsConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReportsConfigBeta, any>>;
    /**
     * Use this API to fetch a certification campaign template by ID. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get a Campaign Template
     * @param {CertificationCampaignsBetaApiGetCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getCampaignTemplate(requestParameters: CertificationCampaignsBetaApiGetCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplateBeta, any>>;
    /**
     * Use this API to get the schedule for a certification campaign template. The API returns a 404 if there is no schedule set. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/get-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Get Campaign Template Schedule
     * @param {CertificationCampaignsBetaApiGetCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getCampaignTemplateSchedule(requestParameters: CertificationCampaignsBetaApiGetCampaignTemplateScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScheduleBeta, any>>;
    /**
     * Use this API to get a list of all campaign templates. Scope can be reduced through standard V3 query params. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/list-campaign-templates).  The endpoint returns all campaign templates matching the query parameters.  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary List Campaign Templates
     * @param {CertificationCampaignsBetaApiGetCampaignTemplatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    getCampaignTemplates(requestParameters?: CertificationCampaignsBetaApiGetCampaignTemplatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplateBeta[], any>>;
    /**
     * This API reassigns the specified certifications from one identity to another.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/move).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Reassign Certifications
     * @param {CertificationCampaignsBetaApiMoveRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    move(requestParameters: CertificationCampaignsBetaApiMoveRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CertificationTaskBeta, any>>;
    /**
     * Use this API to update individual fields on a certification campaign template, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/patch-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign Template
     * @param {CertificationCampaignsBetaApiPatchCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    patchCampaignTemplate(requestParameters: CertificationCampaignsBetaApiPatchCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignTemplateBeta, any>>;
    /**
     * Use this API to overwrite the configuration for campaign reports. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-reports-config).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Reports Configuration
     * @param {CertificationCampaignsBetaApiSetCampaignReportsConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    setCampaignReportsConfig(requestParameters: CertificationCampaignsBetaApiSetCampaignReportsConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReportsConfigBeta, any>>;
    /**
     * Use this API to set the schedule for a certification campaign template. If a schedule already exists, the API overwrites it with the new one.  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/set-campaign-template-schedule).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Set Campaign Template Schedule
     * @param {CertificationCampaignsBetaApiSetCampaignTemplateScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    setCampaignTemplateSchedule(requestParameters: CertificationCampaignsBetaApiSetCampaignTemplateScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to submit a job to activate the certified campaign with the specified ID. The campaign must be staged. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Activate a Campaign
     * @param {CertificationCampaignsBetaApiStartCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    startCampaign(requestParameters: CertificationCampaignsBetaApiStartCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to run a remediation scan task for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-remediation-scan).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Remediation Scan
     * @param {CertificationCampaignsBetaApiStartCampaignRemediationScanRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    startCampaignRemediationScan(requestParameters: CertificationCampaignsBetaApiStartCampaignRemediationScanRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to run a report for a certification campaign. Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-campaign-report).  A token with ORG_ADMIN, CERT_ADMIN or REPORT_ADMIN authority is required to call this API.
     * @summary Run Campaign Report
     * @param {CertificationCampaignsBetaApiStartCampaignReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    startCampaignReport(requestParameters: CertificationCampaignsBetaApiStartCampaignReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Use this API to generate a new certification campaign from a campaign template.  The campaign object contained in the template has special formatting applied to its name and description fields that determine the generated campaign\'s name/description. Placeholders in those fields are formatted with the current date and time upon generation.  Placeholders consist of a percent sign followed by a letter indicating what should be inserted. For example, \"%Y\" inserts the current year, and a campaign template named \"Campaign for %y\" generates a campaign called \"Campaign for 2020\" (assuming the year at generation time is 2020).  Valid placeholders are the date/time conversion suffix characters supported by [java.util.Formatter](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html).  Though this Beta endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/v3/start-generate-campaign-template).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Generate a Campaign from Template
     * @param {CertificationCampaignsBetaApiStartGenerateCampaignTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    startGenerateCampaignTemplate(requestParameters: CertificationCampaignsBetaApiStartGenerateCampaignTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CampaignReferenceBeta, any>>;
    /**
     * Use this API to update individual fields on a certification campaign, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Though this endpoint has been deprecated, you can find its V3 equivalent [here](https://developer.sailpoint.com/docs/api/beta/update-campaign).  A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API.
     * @summary Update a Campaign
     * @param {CertificationCampaignsBetaApiUpdateCampaignRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationCampaignsBetaApi
     */
    updateCampaign(requestParameters: CertificationCampaignsBetaApiUpdateCampaignRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SlimcampaignBeta, any>>;
}
/**
 * CertificationsBetaApi - axios parameter creator
 * @export
 */
export declare const CertificationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {string} certificationId The certification ID
     * @param {string} itemId The certification item ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getIdentityCertificationItemPermissions: (certificationId: string, itemId: string, filters?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Pending Certification Tasks
     * @param {string} id The identity campaign certification ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationPendingTasks: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Certification Task Status
     * @param {string} id The identity campaign certification ID
     * @param {string} taskId The certification task ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationTaskStatus: (id: string, taskId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {string} id The certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listCertificationReviewers: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassignBeta} reviewReassignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    submitReassignCertsAsync: (id: string, reviewReassignBeta: ReviewReassignBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CertificationsBetaApi - functional programming interface
 * @export
 */
export declare const CertificationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {string} certificationId The certification ID
     * @param {string} itemId The certification item ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getIdentityCertificationItemPermissions(certificationId: string, itemId: string, filters?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PermissionDtoBeta>>>;
    /**
     * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Pending Certification Tasks
     * @param {string} id The identity campaign certification ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationPendingTasks(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityCertificationTaskBeta>>>;
    /**
     * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Certification Task Status
     * @param {string} id The identity campaign certification ID
     * @param {string} taskId The certification task ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationTaskStatus(id: string, taskId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertificationTaskBeta>>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {string} id The certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listCertificationReviewers(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityReferenceWithNameAndEmailBeta>>>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassignBeta} reviewReassignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    submitReassignCertsAsync(id: string, reviewReassignBeta: ReviewReassignBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityCertificationTaskBeta>>;
};
/**
 * CertificationsBetaApi - factory interface
 * @export
 */
export declare const CertificationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {string} certificationId The certification ID
     * @param {string} itemId The certification item ID
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getIdentityCertificationItemPermissions(certificationId: string, itemId: string, filters?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PermissionDtoBeta>>;
    /**
     * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Pending Certification Tasks
     * @param {string} id The identity campaign certification ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationPendingTasks(id: string, axiosOptions?: any): AxiosPromise<Array<IdentityCertificationTaskBeta>>;
    /**
     * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Certification Task Status
     * @param {string} id The identity campaign certification ID
     * @param {string} taskId The certification task ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityCertificationTaskStatus(id: string, taskId: string, axiosOptions?: any): AxiosPromise<IdentityCertificationTaskBeta>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {string} id The certification ID
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listCertificationReviewers(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityReferenceWithNameAndEmailBeta>>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {string} id The identity campaign certification ID
     * @param {ReviewReassignBeta} reviewReassignBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    submitReassignCertsAsync(id: string, reviewReassignBeta: ReviewReassignBeta, axiosOptions?: any): AxiosPromise<IdentityCertificationTaskBeta>;
};
/**
 * Request parameters for getIdentityCertificationItemPermissions operation in CertificationsBetaApi.
 * @export
 * @interface CertificationsBetaApiGetIdentityCertificationItemPermissionsRequest
 */
export interface CertificationsBetaApiGetIdentityCertificationItemPermissionsRequest {
    /**
     * The certification ID
     * @type {string}
     * @memberof CertificationsBetaApiGetIdentityCertificationItemPermissions
     */
    readonly certificationId: string;
    /**
     * The certification item ID
     * @type {string}
     * @memberof CertificationsBetaApiGetIdentityCertificationItemPermissions
     */
    readonly itemId: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **target**: *eq, sw*  **rights**: *ca*  All field values (second filter operands) are case-insensitive for this API.  Only a single *and* or *or* composite filter operator may be used. It must also be used between a target filter and a rights filter, not between 2 filters for the same field.  For example, the following is valid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+target+eq+%22SYS.OBJAUTH2%22&#x60;  The following is invalid: &#x60;?filters&#x3D;rights+ca+(%22CREATE%22)+and+rights+ca+(%SELECT%22)&#x60;
     * @type {string}
     * @memberof CertificationsBetaApiGetIdentityCertificationItemPermissions
     */
    readonly filters?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsBetaApiGetIdentityCertificationItemPermissions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsBetaApiGetIdentityCertificationItemPermissions
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsBetaApiGetIdentityCertificationItemPermissions
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getIdentityCertificationPendingTasks operation in CertificationsBetaApi.
 * @export
 * @interface CertificationsBetaApiGetIdentityCertificationPendingTasksRequest
 */
export interface CertificationsBetaApiGetIdentityCertificationPendingTasksRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsBetaApiGetIdentityCertificationPendingTasks
     */
    readonly id: string;
}
/**
 * Request parameters for getIdentityCertificationTaskStatus operation in CertificationsBetaApi.
 * @export
 * @interface CertificationsBetaApiGetIdentityCertificationTaskStatusRequest
 */
export interface CertificationsBetaApiGetIdentityCertificationTaskStatusRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsBetaApiGetIdentityCertificationTaskStatus
     */
    readonly id: string;
    /**
     * The certification task ID
     * @type {string}
     * @memberof CertificationsBetaApiGetIdentityCertificationTaskStatus
     */
    readonly taskId: string;
}
/**
 * Request parameters for listCertificationReviewers operation in CertificationsBetaApi.
 * @export
 * @interface CertificationsBetaApiListCertificationReviewersRequest
 */
export interface CertificationsBetaApiListCertificationReviewersRequest {
    /**
     * The certification ID
     * @type {string}
     * @memberof CertificationsBetaApiListCertificationReviewers
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsBetaApiListCertificationReviewers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof CertificationsBetaApiListCertificationReviewers
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof CertificationsBetaApiListCertificationReviewers
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **email**: *eq, sw*
     * @type {string}
     * @memberof CertificationsBetaApiListCertificationReviewers
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, email**
     * @type {string}
     * @memberof CertificationsBetaApiListCertificationReviewers
     */
    readonly sorters?: string;
}
/**
 * Request parameters for submitReassignCertsAsync operation in CertificationsBetaApi.
 * @export
 * @interface CertificationsBetaApiSubmitReassignCertsAsyncRequest
 */
export interface CertificationsBetaApiSubmitReassignCertsAsyncRequest {
    /**
     * The identity campaign certification ID
     * @type {string}
     * @memberof CertificationsBetaApiSubmitReassignCertsAsync
     */
    readonly id: string;
    /**
     *
     * @type {ReviewReassignBeta}
     * @memberof CertificationsBetaApiSubmitReassignCertsAsync
     */
    readonly reviewReassignBeta: ReviewReassignBeta;
}
/**
 * CertificationsBetaApi - object-oriented interface
 * @export
 * @class CertificationsBetaApi
 * @extends {BaseAPI}
 */
export declare class CertificationsBetaApi extends BaseAPI {
    /**
     * This API returns the permissions associated with an entitlement certification item based on the certification item\'s ID. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Permissions for Entitlement Certification Item
     * @param {CertificationsBetaApiGetIdentityCertificationItemPermissionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    getIdentityCertificationItemPermissions(requestParameters: CertificationsBetaApiGetIdentityCertificationItemPermissionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PermissionDtoBeta[], any>>;
    /**
     * This API returns the status of all pending (`QUEUED` or `IN_PROGRESS`) tasks for an identity campaign certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Pending Certification Tasks
     * @param {CertificationsBetaApiGetIdentityCertificationPendingTasksRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    getIdentityCertificationPendingTasks(requestParameters: CertificationsBetaApiGetIdentityCertificationPendingTasksRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationTaskBeta[], any>>;
    /**
     * This API returns the status of a certification task. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Certification Task Status
     * @param {CertificationsBetaApiGetIdentityCertificationTaskStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    getIdentityCertificationTaskStatus(requestParameters: CertificationsBetaApiGetIdentityCertificationTaskStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationTaskBeta, any>>;
    /**
     * This API returns a list of reviewers for the certification. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary List of Reviewers for certification
     * @param {CertificationsBetaApiListCertificationReviewersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    listCertificationReviewers(requestParameters: CertificationsBetaApiListCertificationReviewersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityReferenceWithNameAndEmailBeta[], any>>;
    /**
     * This API initiates a task to reassign up to 500 identities or items in an identity campaign certification to another reviewer. The `certification-tasks` API can be used to get an updated status on the task and determine when the reassignment is complete. A token with ORG_ADMIN or CERT_ADMIN authority is required to call this API. Reviewers for this certification can also call this API.
     * @summary Reassign Certifications Asynchronously
     * @param {CertificationsBetaApiSubmitReassignCertsAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof CertificationsBetaApi
     */
    submitReassignCertsAsync(requestParameters: CertificationsBetaApiSubmitReassignCertsAsyncRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCertificationTaskBeta, any>>;
}
/**
 * ConnectorRuleManagementBetaApi - axios parameter creator
 * @export
 */
export declare const ConnectorRuleManagementBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Connector Rule
     * @param {ConnectorRuleCreateRequestBeta} connectorRuleCreateRequestBeta The connector rule to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createConnectorRule: (connectorRuleCreateRequestBeta: ConnectorRuleCreateRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete a Connector-Rule
     * @param {string} id ID of the connector rule to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectorRule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Connector-Rule by ID
     * @param {string} id ID of the connector rule to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorRule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
     * @summary List Connector Rules
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorRuleList: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update a Connector Rule
     * @param {string} id ID of the connector rule to update
     * @param {ConnectorRuleUpdateRequestBeta} [connectorRuleUpdateRequestBeta] The connector rule with updated data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectorRule: (id: string, connectorRuleUpdateRequestBeta?: ConnectorRuleUpdateRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
     * @summary Validate Connector Rule
     * @param {SourceCodeBeta} sourceCodeBeta The code to validate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    validateConnectorRule: (sourceCodeBeta: SourceCodeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConnectorRuleManagementBetaApi - functional programming interface
 * @export
 */
export declare const ConnectorRuleManagementBetaApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Connector Rule
     * @param {ConnectorRuleCreateRequestBeta} connectorRuleCreateRequestBeta The connector rule to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createConnectorRule(connectorRuleCreateRequestBeta: ConnectorRuleCreateRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorRuleResponseBeta>>;
    /**
     * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete a Connector-Rule
     * @param {string} id ID of the connector rule to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectorRule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Connector-Rule by ID
     * @param {string} id ID of the connector rule to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorRule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorRuleResponseBeta>>;
    /**
     * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
     * @summary List Connector Rules
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorRuleList(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectorRuleResponseBeta>>>;
    /**
     * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update a Connector Rule
     * @param {string} id ID of the connector rule to update
     * @param {ConnectorRuleUpdateRequestBeta} [connectorRuleUpdateRequestBeta] The connector rule with updated data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectorRule(id: string, connectorRuleUpdateRequestBeta?: ConnectorRuleUpdateRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorRuleResponseBeta>>;
    /**
     * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
     * @summary Validate Connector Rule
     * @param {SourceCodeBeta} sourceCodeBeta The code to validate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    validateConnectorRule(sourceCodeBeta: SourceCodeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorRuleValidationResponseBeta>>;
};
/**
 * ConnectorRuleManagementBetaApi - factory interface
 * @export
 */
export declare const ConnectorRuleManagementBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Connector Rule
     * @param {ConnectorRuleCreateRequestBeta} connectorRuleCreateRequestBeta The connector rule to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createConnectorRule(connectorRuleCreateRequestBeta: ConnectorRuleCreateRequestBeta, axiosOptions?: any): AxiosPromise<ConnectorRuleResponseBeta>;
    /**
     * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete a Connector-Rule
     * @param {string} id ID of the connector rule to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectorRule(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Connector-Rule by ID
     * @param {string} id ID of the connector rule to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorRule(id: string, axiosOptions?: any): AxiosPromise<ConnectorRuleResponseBeta>;
    /**
     * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
     * @summary List Connector Rules
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorRuleList(axiosOptions?: any): AxiosPromise<Array<ConnectorRuleResponseBeta>>;
    /**
     * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update a Connector Rule
     * @param {string} id ID of the connector rule to update
     * @param {ConnectorRuleUpdateRequestBeta} [connectorRuleUpdateRequestBeta] The connector rule with updated data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectorRule(id: string, connectorRuleUpdateRequestBeta?: ConnectorRuleUpdateRequestBeta, axiosOptions?: any): AxiosPromise<ConnectorRuleResponseBeta>;
    /**
     * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
     * @summary Validate Connector Rule
     * @param {SourceCodeBeta} sourceCodeBeta The code to validate
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    validateConnectorRule(sourceCodeBeta: SourceCodeBeta, axiosOptions?: any): AxiosPromise<ConnectorRuleValidationResponseBeta>;
};
/**
 * Request parameters for createConnectorRule operation in ConnectorRuleManagementBetaApi.
 * @export
 * @interface ConnectorRuleManagementBetaApiCreateConnectorRuleRequest
 */
export interface ConnectorRuleManagementBetaApiCreateConnectorRuleRequest {
    /**
     * The connector rule to create
     * @type {ConnectorRuleCreateRequestBeta}
     * @memberof ConnectorRuleManagementBetaApiCreateConnectorRule
     */
    readonly connectorRuleCreateRequestBeta: ConnectorRuleCreateRequestBeta;
}
/**
 * Request parameters for deleteConnectorRule operation in ConnectorRuleManagementBetaApi.
 * @export
 * @interface ConnectorRuleManagementBetaApiDeleteConnectorRuleRequest
 */
export interface ConnectorRuleManagementBetaApiDeleteConnectorRuleRequest {
    /**
     * ID of the connector rule to delete
     * @type {string}
     * @memberof ConnectorRuleManagementBetaApiDeleteConnectorRule
     */
    readonly id: string;
}
/**
 * Request parameters for getConnectorRule operation in ConnectorRuleManagementBetaApi.
 * @export
 * @interface ConnectorRuleManagementBetaApiGetConnectorRuleRequest
 */
export interface ConnectorRuleManagementBetaApiGetConnectorRuleRequest {
    /**
     * ID of the connector rule to retrieve
     * @type {string}
     * @memberof ConnectorRuleManagementBetaApiGetConnectorRule
     */
    readonly id: string;
}
/**
 * Request parameters for updateConnectorRule operation in ConnectorRuleManagementBetaApi.
 * @export
 * @interface ConnectorRuleManagementBetaApiUpdateConnectorRuleRequest
 */
export interface ConnectorRuleManagementBetaApiUpdateConnectorRuleRequest {
    /**
     * ID of the connector rule to update
     * @type {string}
     * @memberof ConnectorRuleManagementBetaApiUpdateConnectorRule
     */
    readonly id: string;
    /**
     * The connector rule with updated data
     * @type {ConnectorRuleUpdateRequestBeta}
     * @memberof ConnectorRuleManagementBetaApiUpdateConnectorRule
     */
    readonly connectorRuleUpdateRequestBeta?: ConnectorRuleUpdateRequestBeta;
}
/**
 * Request parameters for validateConnectorRule operation in ConnectorRuleManagementBetaApi.
 * @export
 * @interface ConnectorRuleManagementBetaApiValidateConnectorRuleRequest
 */
export interface ConnectorRuleManagementBetaApiValidateConnectorRuleRequest {
    /**
     * The code to validate
     * @type {SourceCodeBeta}
     * @memberof ConnectorRuleManagementBetaApiValidateConnectorRule
     */
    readonly sourceCodeBeta: SourceCodeBeta;
}
/**
 * ConnectorRuleManagementBetaApi - object-oriented interface
 * @export
 * @class ConnectorRuleManagementBetaApi
 * @extends {BaseAPI}
 */
export declare class ConnectorRuleManagementBetaApi extends BaseAPI {
    /**
     * Creates a new connector rule. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Connector Rule
     * @param {ConnectorRuleManagementBetaApiCreateConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    createConnectorRule(requestParameters: ConnectorRuleManagementBetaApiCreateConnectorRuleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorRuleResponseBeta, any>>;
    /**
     * Deletes the connector rule specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete a Connector-Rule
     * @param {ConnectorRuleManagementBetaApiDeleteConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    deleteConnectorRule(requestParameters: ConnectorRuleManagementBetaApiDeleteConnectorRuleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns the connector rule specified by ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Connector-Rule by ID
     * @param {ConnectorRuleManagementBetaApiGetConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    getConnectorRule(requestParameters: ConnectorRuleManagementBetaApiGetConnectorRuleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorRuleResponseBeta, any>>;
    /**
     * Returns the list of connector rules. A token with ORG_ADMIN authority is required to call this API.
     * @summary List Connector Rules
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    getConnectorRuleList(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorRuleResponseBeta[], any>>;
    /**
     * Updates an existing connector rule with the one provided in the request body. Note that the fields \'id\', \'name\', and \'type\' are immutable. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update a Connector Rule
     * @param {ConnectorRuleManagementBetaApiUpdateConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    updateConnectorRule(requestParameters: ConnectorRuleManagementBetaApiUpdateConnectorRuleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorRuleResponseBeta, any>>;
    /**
     * Returns a list of issues within the code to fix, if any. A token with ORG_ADMIN authority is required to call this API.
     * @summary Validate Connector Rule
     * @param {ConnectorRuleManagementBetaApiValidateConnectorRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorRuleManagementBetaApi
     */
    validateConnectorRule(requestParameters: ConnectorRuleManagementBetaApiValidateConnectorRuleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorRuleValidationResponseBeta, any>>;
}
/**
 * ConnectorsBetaApi - axios parameter creator
 * @export
 */
export declare const ConnectorsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorList: (filters?: string, limit?: number, offset?: number, count?: boolean, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConnectorsBetaApi - functional programming interface
 * @export
 */
export declare const ConnectorsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorList(filters?: string, limit?: number, offset?: number, count?: boolean, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V3ConnectorDtoBeta>>>;
};
/**
 * ConnectorsBetaApi - factory interface
 * @export
 */
export declare const ConnectorsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getConnectorList(filters?: string, limit?: number, offset?: number, count?: boolean, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: any): AxiosPromise<Array<V3ConnectorDtoBeta>>;
};
/**
 * Request parameters for getConnectorList operation in ConnectorsBetaApi.
 * @export
 * @interface ConnectorsBetaApiGetConnectorListRequest
 */
export interface ConnectorsBetaApiGetConnectorListRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **type**: *eq*  **directConnect**: *eq*  **category**: *eq*  **features**: *ca*
     * @type {string}
     * @memberof ConnectorsBetaApiGetConnectorList
     */
    readonly filters?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ConnectorsBetaApiGetConnectorList
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ConnectorsBetaApiGetConnectorList
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ConnectorsBetaApiGetConnectorList
     */
    readonly count?: boolean;
    /**
     * The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @type {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'}
     * @memberof ConnectorsBetaApiGetConnectorList
     */
    readonly locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl';
}
/**
 * ConnectorsBetaApi - object-oriented interface
 * @export
 * @class ConnectorsBetaApi
 * @extends {BaseAPI}
 */
export declare class ConnectorsBetaApi extends BaseAPI {
    /**
     * Fetches list of connectors that have \'RELEASED\' status using filtering and pagination. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets connector list
     * @param {ConnectorsBetaApiGetConnectorListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectorsBetaApi
     */
    getConnectorList(requestParameters?: ConnectorsBetaApiGetConnectorListRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<V3ConnectorDtoBeta[], any>>;
}
/**
 * CustomFormsBetaApi - axios parameter creator
 * @export
 */
export declare const CustomFormsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a form definition.
     * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinition: (createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a form definition by template.
     * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionByTemplate: (createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Generate JSON Schema dynamically.
     * @param {FormDefinitionDynamicSchemaRequestBeta} [body] Body is the request payload to create a form definition dynamic schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionDynamicSchema: (body?: FormDefinitionDynamicSchemaRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Upload new form definition file.
     * @param {string} formDefinitionID FormDefinitionID  String specifying FormDefinitionID
     * @param {any} file File specifying the multipart
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionFileRequest: (formDefinitionID: string, file: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Creates a form instance.
     * @param {CreateFormInstanceRequestBeta} [body] Body is the request payload to create a form instance
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormInstance: (body?: CreateFormInstanceRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Deletes a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteFormDefinition: (formDefinitionID: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * No parameters required.
     * @summary List form definitions by tenant.
     * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportFormDefinitionsByTenant: (offset?: number, limit?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Download definition file by fileId.
     * @param {string} formDefinitionID FormDefinitionID  Form definition ID
     * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFileFromS3: (formDefinitionID: string, fileID: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Return a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormDefinitionByKey: (formDefinitionID: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Returns a form instance.
     * @param {string} formInstanceID Form instance ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormInstanceByKey: (formInstanceID: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Download instance file by fileId.
     * @param {string} formInstanceID FormInstanceID  Form instance ID
     * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormInstanceFile: (formInstanceID: string, fileID: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Import form definitions from export.
     * @param {Array<ImportFormDefinitionsRequestInnerBeta>} [body] Body is the request payload to import form definitions
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importFormDefinitions: (body?: Array<ImportFormDefinitionsRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Patch a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form definition, check: https://jsonpatch.com
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchFormDefinition: (formDefinitionID: string, body?: {
        [key: string]: object;
    }[], axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Patch a form instance.
     * @param {string} formInstanceID Form instance ID
     * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form instance, check: https://jsonpatch.com
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchFormInstance: (formInstanceID: string, body?: {
        [key: string]: object;
    }[], axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * No parameters required.
     * @summary Export form definitions by tenant.
     * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormDefinitionsByTenant: (offset?: number, limit?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
     * @summary Retrieves dynamic data by element.
     * @param {string} formInstanceID Form instance ID
     * @param {string} formElementID Form element ID
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormElementDataByElementID: (formInstanceID: string, formElementID: string, limit?: number, filters?: string, query?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * No parameters required.
     * @summary List form instances by tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormInstancesByTenant: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * No parameters required.
     * @summary List predefined select options.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchPreDefinedSelectOptions: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Preview form definition data source.
     * @param {string} formDefinitionID Form definition ID
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @param {FormElementPreviewRequestBeta} [formElementPreviewRequestBeta] Body is the request payload to create a form definition dynamic schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showPreviewDataSource: (formDefinitionID: string, limit?: number, filters?: string, query?: string, formElementPreviewRequestBeta?: FormElementPreviewRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomFormsBetaApi - functional programming interface
 * @export
 */
export declare const CustomFormsBetaApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Creates a form definition.
     * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinition(createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDefinitionResponseBeta>>;
    /**
     *
     * @summary Create a form definition by template.
     * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionByTemplate(createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDefinitionResponseBeta>>;
    /**
     *
     * @summary Generate JSON Schema dynamically.
     * @param {FormDefinitionDynamicSchemaRequestBeta} [body] Body is the request payload to create a form definition dynamic schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionDynamicSchema(body?: FormDefinitionDynamicSchemaRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDefinitionDynamicSchemaResponseBeta>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Upload new form definition file.
     * @param {string} formDefinitionID FormDefinitionID  String specifying FormDefinitionID
     * @param {any} file File specifying the multipart
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionFileRequest(formDefinitionID: string, file: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDefinitionFileUploadResponseBeta>>;
    /**
     *
     * @summary Creates a form instance.
     * @param {CreateFormInstanceRequestBeta} [body] Body is the request payload to create a form instance
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormInstance(body?: CreateFormInstanceRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormInstanceResponseBeta>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Deletes a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteFormDefinition(formDefinitionID: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * No parameters required.
     * @summary List form definitions by tenant.
     * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportFormDefinitionsByTenant(offset?: number, limit?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExportFormDefinitionsByTenant200ResponseInnerBeta>>>;
    /**
     *
     * @summary Download definition file by fileId.
     * @param {string} formDefinitionID FormDefinitionID  Form definition ID
     * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFileFromS3(formDefinitionID: string, fileID: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Return a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormDefinitionByKey(formDefinitionID: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDefinitionResponseBeta>>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Returns a form instance.
     * @param {string} formInstanceID Form instance ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormInstanceByKey(formInstanceID: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormInstanceResponseBeta>>;
    /**
     *
     * @summary Download instance file by fileId.
     * @param {string} formInstanceID FormInstanceID  Form instance ID
     * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormInstanceFile(formInstanceID: string, fileID: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Import form definitions from export.
     * @param {Array<ImportFormDefinitionsRequestInnerBeta>} [body] Body is the request payload to import form definitions
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importFormDefinitions(body?: Array<ImportFormDefinitionsRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImportFormDefinitions202ResponseBeta>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Patch a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form definition, check: https://jsonpatch.com
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchFormDefinition(formDefinitionID: string, body?: {
        [key: string]: object;
    }[], axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormDefinitionResponseBeta>>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Patch a form instance.
     * @param {string} formInstanceID Form instance ID
     * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form instance, check: https://jsonpatch.com
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchFormInstance(formInstanceID: string, body?: {
        [key: string]: object;
    }[], axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormInstanceResponseBeta>>;
    /**
     * No parameters required.
     * @summary Export form definitions by tenant.
     * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormDefinitionsByTenant(offset?: number, limit?: number, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFormDefinitionsByTenantResponseBeta>>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
     * @summary Retrieves dynamic data by element.
     * @param {string} formInstanceID Form instance ID
     * @param {string} formElementID Form element ID
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormElementDataByElementID(formInstanceID: string, formElementID: string, limit?: number, filters?: string, query?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFormElementDataByElementIDResponseBeta>>;
    /**
     * No parameters required.
     * @summary List form instances by tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormInstancesByTenant(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormInstanceResponseBeta>>>;
    /**
     * No parameters required.
     * @summary List predefined select options.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchPreDefinedSelectOptions(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPredefinedSelectOptionsResponseBeta>>;
    /**
     *
     * @summary Preview form definition data source.
     * @param {string} formDefinitionID Form definition ID
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @param {FormElementPreviewRequestBeta} [formElementPreviewRequestBeta] Body is the request payload to create a form definition dynamic schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showPreviewDataSource(formDefinitionID: string, limit?: number, filters?: string, query?: string, formElementPreviewRequestBeta?: FormElementPreviewRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PreviewDataSourceResponseBeta>>;
};
/**
 * CustomFormsBetaApi - factory interface
 * @export
 */
export declare const CustomFormsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Creates a form definition.
     * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinition(createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta, axiosOptions?: any): AxiosPromise<FormDefinitionResponseBeta>;
    /**
     *
     * @summary Create a form definition by template.
     * @param {CreateFormDefinitionRequestBeta} [createFormDefinitionRequestBeta] Body is the request payload to create form definition request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionByTemplate(createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta, axiosOptions?: any): AxiosPromise<FormDefinitionResponseBeta>;
    /**
     *
     * @summary Generate JSON Schema dynamically.
     * @param {FormDefinitionDynamicSchemaRequestBeta} [body] Body is the request payload to create a form definition dynamic schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionDynamicSchema(body?: FormDefinitionDynamicSchemaRequestBeta, axiosOptions?: any): AxiosPromise<FormDefinitionDynamicSchemaResponseBeta>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Upload new form definition file.
     * @param {string} formDefinitionID FormDefinitionID  String specifying FormDefinitionID
     * @param {any} file File specifying the multipart
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormDefinitionFileRequest(formDefinitionID: string, file: any, axiosOptions?: any): AxiosPromise<FormDefinitionFileUploadResponseBeta>;
    /**
     *
     * @summary Creates a form instance.
     * @param {CreateFormInstanceRequestBeta} [body] Body is the request payload to create a form instance
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createFormInstance(body?: CreateFormInstanceRequestBeta, axiosOptions?: any): AxiosPromise<FormInstanceResponseBeta>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Deletes a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteFormDefinition(formDefinitionID: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * No parameters required.
     * @summary List form definitions by tenant.
     * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportFormDefinitionsByTenant(offset?: number, limit?: number, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<ExportFormDefinitionsByTenant200ResponseInnerBeta>>;
    /**
     *
     * @summary Download definition file by fileId.
     * @param {string} formDefinitionID FormDefinitionID  Form definition ID
     * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFileFromS3(formDefinitionID: string, fileID: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Return a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormDefinitionByKey(formDefinitionID: string, axiosOptions?: any): AxiosPromise<FormDefinitionResponseBeta>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Returns a form instance.
     * @param {string} formInstanceID Form instance ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormInstanceByKey(formInstanceID: string, axiosOptions?: any): AxiosPromise<FormInstanceResponseBeta>;
    /**
     *
     * @summary Download instance file by fileId.
     * @param {string} formInstanceID FormInstanceID  Form instance ID
     * @param {string} fileID FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getFormInstanceFile(formInstanceID: string, fileID: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     *
     * @summary Import form definitions from export.
     * @param {Array<ImportFormDefinitionsRequestInnerBeta>} [body] Body is the request payload to import form definitions
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importFormDefinitions(body?: Array<ImportFormDefinitionsRequestInnerBeta>, axiosOptions?: any): AxiosPromise<ImportFormDefinitions202ResponseBeta>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Patch a form definition.
     * @param {string} formDefinitionID Form definition ID
     * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form definition, check: https://jsonpatch.com
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchFormDefinition(formDefinitionID: string, body?: {
        [key: string]: object;
    }[], axiosOptions?: any): AxiosPromise<FormDefinitionResponseBeta>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Patch a form instance.
     * @param {string} formInstanceID Form instance ID
     * @param {Array<{ [key: string]: object; }>} [body] Body is the request payload to patch a form instance, check: https://jsonpatch.com
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchFormInstance(formInstanceID: string, body?: {
        [key: string]: object;
    }[], axiosOptions?: any): AxiosPromise<FormInstanceResponseBeta>;
    /**
     * No parameters required.
     * @summary Export form definitions by tenant.
     * @param {number} [offset] Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormDefinitionsByTenant(offset?: number, limit?: number, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<ListFormDefinitionsByTenantResponseBeta>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
     * @summary Retrieves dynamic data by element.
     * @param {string} formInstanceID Form instance ID
     * @param {string} formElementID Form element ID
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormElementDataByElementID(formInstanceID: string, formElementID: string, limit?: number, filters?: string, query?: string, axiosOptions?: any): AxiosPromise<ListFormElementDataByElementIDResponseBeta>;
    /**
     * No parameters required.
     * @summary List form instances by tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchFormInstancesByTenant(axiosOptions?: any): AxiosPromise<Array<FormInstanceResponseBeta>>;
    /**
     * No parameters required.
     * @summary List predefined select options.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    searchPreDefinedSelectOptions(axiosOptions?: any): AxiosPromise<ListPredefinedSelectOptionsResponseBeta>;
    /**
     *
     * @summary Preview form definition data source.
     * @param {string} formDefinitionID Form definition ID
     * @param {number} [limit] Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @param {string} [query] String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @param {FormElementPreviewRequestBeta} [formElementPreviewRequestBeta] Body is the request payload to create a form definition dynamic schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showPreviewDataSource(formDefinitionID: string, limit?: number, filters?: string, query?: string, formElementPreviewRequestBeta?: FormElementPreviewRequestBeta, axiosOptions?: any): AxiosPromise<PreviewDataSourceResponseBeta>;
};
/**
 * Request parameters for createFormDefinition operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiCreateFormDefinitionRequest
 */
export interface CustomFormsBetaApiCreateFormDefinitionRequest {
    /**
     * Body is the request payload to create form definition request
     * @type {CreateFormDefinitionRequestBeta}
     * @memberof CustomFormsBetaApiCreateFormDefinition
     */
    readonly createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta;
}
/**
 * Request parameters for createFormDefinitionByTemplate operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiCreateFormDefinitionByTemplateRequest
 */
export interface CustomFormsBetaApiCreateFormDefinitionByTemplateRequest {
    /**
     * Body is the request payload to create form definition request
     * @type {CreateFormDefinitionRequestBeta}
     * @memberof CustomFormsBetaApiCreateFormDefinitionByTemplate
     */
    readonly createFormDefinitionRequestBeta?: CreateFormDefinitionRequestBeta;
}
/**
 * Request parameters for createFormDefinitionDynamicSchema operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiCreateFormDefinitionDynamicSchemaRequest
 */
export interface CustomFormsBetaApiCreateFormDefinitionDynamicSchemaRequest {
    /**
     * Body is the request payload to create a form definition dynamic schema
     * @type {FormDefinitionDynamicSchemaRequestBeta}
     * @memberof CustomFormsBetaApiCreateFormDefinitionDynamicSchema
     */
    readonly body?: FormDefinitionDynamicSchemaRequestBeta;
}
/**
 * Request parameters for createFormDefinitionFileRequest operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiCreateFormDefinitionFileRequestRequest
 */
export interface CustomFormsBetaApiCreateFormDefinitionFileRequestRequest {
    /**
     * FormDefinitionID  String specifying FormDefinitionID
     * @type {string}
     * @memberof CustomFormsBetaApiCreateFormDefinitionFileRequest
     */
    readonly formDefinitionID: string;
    /**
     * File specifying the multipart
     * @type {any}
     * @memberof CustomFormsBetaApiCreateFormDefinitionFileRequest
     */
    readonly file: any;
}
/**
 * Request parameters for createFormInstance operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiCreateFormInstanceRequest
 */
export interface CustomFormsBetaApiCreateFormInstanceRequest {
    /**
     * Body is the request payload to create a form instance
     * @type {CreateFormInstanceRequestBeta}
     * @memberof CustomFormsBetaApiCreateFormInstance
     */
    readonly body?: CreateFormInstanceRequestBeta;
}
/**
 * Request parameters for deleteFormDefinition operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiDeleteFormDefinitionRequest
 */
export interface CustomFormsBetaApiDeleteFormDefinitionRequest {
    /**
     * Form definition ID
     * @type {string}
     * @memberof CustomFormsBetaApiDeleteFormDefinition
     */
    readonly formDefinitionID: string;
}
/**
 * Request parameters for exportFormDefinitionsByTenant operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiExportFormDefinitionsByTenantRequest
 */
export interface CustomFormsBetaApiExportFormDefinitionsByTenantRequest {
    /**
     * Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @type {number}
     * @memberof CustomFormsBetaApiExportFormDefinitionsByTenant
     */
    readonly offset?: number;
    /**
     * Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @type {number}
     * @memberof CustomFormsBetaApiExportFormDefinitionsByTenant
     */
    readonly limit?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @type {string}
     * @memberof CustomFormsBetaApiExportFormDefinitionsByTenant
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @type {string}
     * @memberof CustomFormsBetaApiExportFormDefinitionsByTenant
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getFileFromS3 operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiGetFileFromS3Request
 */
export interface CustomFormsBetaApiGetFileFromS3Request {
    /**
     * FormDefinitionID  Form definition ID
     * @type {string}
     * @memberof CustomFormsBetaApiGetFileFromS3
     */
    readonly formDefinitionID: string;
    /**
     * FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @type {string}
     * @memberof CustomFormsBetaApiGetFileFromS3
     */
    readonly fileID: string;
}
/**
 * Request parameters for getFormDefinitionByKey operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiGetFormDefinitionByKeyRequest
 */
export interface CustomFormsBetaApiGetFormDefinitionByKeyRequest {
    /**
     * Form definition ID
     * @type {string}
     * @memberof CustomFormsBetaApiGetFormDefinitionByKey
     */
    readonly formDefinitionID: string;
}
/**
 * Request parameters for getFormInstanceByKey operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiGetFormInstanceByKeyRequest
 */
export interface CustomFormsBetaApiGetFormInstanceByKeyRequest {
    /**
     * Form instance ID
     * @type {string}
     * @memberof CustomFormsBetaApiGetFormInstanceByKey
     */
    readonly formInstanceID: string;
}
/**
 * Request parameters for getFormInstanceFile operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiGetFormInstanceFileRequest
 */
export interface CustomFormsBetaApiGetFormInstanceFileRequest {
    /**
     * FormInstanceID  Form instance ID
     * @type {string}
     * @memberof CustomFormsBetaApiGetFormInstanceFile
     */
    readonly formInstanceID: string;
    /**
     * FileID  String specifying the hashed name of the uploaded file we are retrieving.
     * @type {string}
     * @memberof CustomFormsBetaApiGetFormInstanceFile
     */
    readonly fileID: string;
}
/**
 * Request parameters for importFormDefinitions operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiImportFormDefinitionsRequest
 */
export interface CustomFormsBetaApiImportFormDefinitionsRequest {
    /**
     * Body is the request payload to import form definitions
     * @type {Array<ImportFormDefinitionsRequestInnerBeta>}
     * @memberof CustomFormsBetaApiImportFormDefinitions
     */
    readonly body?: Array<ImportFormDefinitionsRequestInnerBeta>;
}
/**
 * Request parameters for patchFormDefinition operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiPatchFormDefinitionRequest
 */
export interface CustomFormsBetaApiPatchFormDefinitionRequest {
    /**
     * Form definition ID
     * @type {string}
     * @memberof CustomFormsBetaApiPatchFormDefinition
     */
    readonly formDefinitionID: string;
    /**
     * Body is the request payload to patch a form definition, check: https://jsonpatch.com
     * @type {Array<{ [key: string]: object; }>}
     * @memberof CustomFormsBetaApiPatchFormDefinition
     */
    readonly body?: Array<{
        [key: string]: object;
    }>;
}
/**
 * Request parameters for patchFormInstance operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiPatchFormInstanceRequest
 */
export interface CustomFormsBetaApiPatchFormInstanceRequest {
    /**
     * Form instance ID
     * @type {string}
     * @memberof CustomFormsBetaApiPatchFormInstance
     */
    readonly formInstanceID: string;
    /**
     * Body is the request payload to patch a form instance, check: https://jsonpatch.com
     * @type {Array<{ [key: string]: object; }>}
     * @memberof CustomFormsBetaApiPatchFormInstance
     */
    readonly body?: Array<{
        [key: string]: object;
    }>;
}
/**
 * Request parameters for searchFormDefinitionsByTenant operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiSearchFormDefinitionsByTenantRequest
 */
export interface CustomFormsBetaApiSearchFormDefinitionsByTenantRequest {
    /**
     * Offset  Integer specifying the offset of the first result from the beginning of the collection. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). The offset value is record-based, not page-based, and the index starts at 0.
     * @type {number}
     * @memberof CustomFormsBetaApiSearchFormDefinitionsByTenant
     */
    readonly offset?: number;
    /**
     * Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @type {number}
     * @memberof CustomFormsBetaApiSearchFormDefinitionsByTenant
     */
    readonly limit?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *eq, gt, sw, in*  **description**: *eq, gt, sw, in*  **created**: *eq, gt, sw, in*  **modified**: *eq, gt, sw, in*
     * @type {string}
     * @memberof CustomFormsBetaApiSearchFormDefinitionsByTenant
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, description, created, modified**
     * @type {string}
     * @memberof CustomFormsBetaApiSearchFormDefinitionsByTenant
     */
    readonly sorters?: string;
}
/**
 * Request parameters for searchFormElementDataByElementID operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiSearchFormElementDataByElementIDRequest
 */
export interface CustomFormsBetaApiSearchFormElementDataByElementIDRequest {
    /**
     * Form instance ID
     * @type {string}
     * @memberof CustomFormsBetaApiSearchFormElementDataByElementID
     */
    readonly formInstanceID: string;
    /**
     * Form element ID
     * @type {string}
     * @memberof CustomFormsBetaApiSearchFormElementDataByElementID
     */
    readonly formElementID: string;
    /**
     * Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @type {number}
     * @memberof CustomFormsBetaApiSearchFormElementDataByElementID
     */
    readonly limit?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @type {string}
     * @memberof CustomFormsBetaApiSearchFormElementDataByElementID
     */
    readonly filters?: string;
    /**
     * String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @type {string}
     * @memberof CustomFormsBetaApiSearchFormElementDataByElementID
     */
    readonly query?: string;
}
/**
 * Request parameters for showPreviewDataSource operation in CustomFormsBetaApi.
 * @export
 * @interface CustomFormsBetaApiShowPreviewDataSourceRequest
 */
export interface CustomFormsBetaApiShowPreviewDataSourceRequest {
    /**
     * Form definition ID
     * @type {string}
     * @memberof CustomFormsBetaApiShowPreviewDataSource
     */
    readonly formDefinitionID: string;
    /**
     * Limit  Integer specifying the maximum number of records to return in a single API call. The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @type {number}
     * @memberof CustomFormsBetaApiShowPreviewDataSource
     */
    readonly limit?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **value**: *eq, ne, in*  Supported composite operators: *not*  Only a single *not* may be used, and it can only be used with the &#x60;in&#x60; operator. The &#x60;not&#x60; composite operator must be used in front of the field. For example, the following is valid: &#x60;not value in (\&quot;ID01\&quot;)&#x60;
     * @type {string}
     * @memberof CustomFormsBetaApiShowPreviewDataSource
     */
    readonly filters?: string;
    /**
     * String that is passed to the underlying API to filter other (non-ID) fields.  For example, for access  profile data sources, this string will be passed to the access profile api and used with a \&quot;starts with\&quot; filter against  several fields.
     * @type {string}
     * @memberof CustomFormsBetaApiShowPreviewDataSource
     */
    readonly query?: string;
    /**
     * Body is the request payload to create a form definition dynamic schema
     * @type {FormElementPreviewRequestBeta}
     * @memberof CustomFormsBetaApiShowPreviewDataSource
     */
    readonly formElementPreviewRequestBeta?: FormElementPreviewRequestBeta;
}
/**
 * CustomFormsBetaApi - object-oriented interface
 * @export
 * @class CustomFormsBetaApi
 * @extends {BaseAPI}
 */
export declare class CustomFormsBetaApi extends BaseAPI {
    /**
     *
     * @summary Creates a form definition.
     * @param {CustomFormsBetaApiCreateFormDefinitionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    createFormDefinition(requestParameters?: CustomFormsBetaApiCreateFormDefinitionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormDefinitionResponseBeta, any>>;
    /**
     *
     * @summary Create a form definition by template.
     * @param {CustomFormsBetaApiCreateFormDefinitionByTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    createFormDefinitionByTemplate(requestParameters?: CustomFormsBetaApiCreateFormDefinitionByTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormDefinitionResponseBeta, any>>;
    /**
     *
     * @summary Generate JSON Schema dynamically.
     * @param {CustomFormsBetaApiCreateFormDefinitionDynamicSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    createFormDefinitionDynamicSchema(requestParameters?: CustomFormsBetaApiCreateFormDefinitionDynamicSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormDefinitionDynamicSchemaResponseBeta, any>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Upload new form definition file.
     * @param {CustomFormsBetaApiCreateFormDefinitionFileRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    createFormDefinitionFileRequest(requestParameters: CustomFormsBetaApiCreateFormDefinitionFileRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormDefinitionFileUploadResponseBeta, any>>;
    /**
     *
     * @summary Creates a form instance.
     * @param {CustomFormsBetaApiCreateFormInstanceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    createFormInstance(requestParameters?: CustomFormsBetaApiCreateFormInstanceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormInstanceResponseBeta, any>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Deletes a form definition.
     * @param {CustomFormsBetaApiDeleteFormDefinitionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    deleteFormDefinition(requestParameters: CustomFormsBetaApiDeleteFormDefinitionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * No parameters required.
     * @summary List form definitions by tenant.
     * @param {CustomFormsBetaApiExportFormDefinitionsByTenantRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    exportFormDefinitionsByTenant(requestParameters?: CustomFormsBetaApiExportFormDefinitionsByTenantRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportFormDefinitionsByTenant200ResponseInnerBeta[], any>>;
    /**
     *
     * @summary Download definition file by fileId.
     * @param {CustomFormsBetaApiGetFileFromS3Request} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    getFileFromS3(requestParameters: CustomFormsBetaApiGetFileFromS3Request, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Return a form definition.
     * @param {CustomFormsBetaApiGetFormDefinitionByKeyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    getFormDefinitionByKey(requestParameters: CustomFormsBetaApiGetFormDefinitionByKeyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormDefinitionResponseBeta, any>>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Returns a form instance.
     * @param {CustomFormsBetaApiGetFormInstanceByKeyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    getFormInstanceByKey(requestParameters: CustomFormsBetaApiGetFormInstanceByKeyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormInstanceResponseBeta, any>>;
    /**
     *
     * @summary Download instance file by fileId.
     * @param {CustomFormsBetaApiGetFormInstanceFileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    getFormInstanceFile(requestParameters: CustomFormsBetaApiGetFormInstanceFileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Import form definitions from export.
     * @param {CustomFormsBetaApiImportFormDefinitionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    importFormDefinitions(requestParameters?: CustomFormsBetaApiImportFormDefinitionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ImportFormDefinitions202ResponseBeta, any>>;
    /**
     * Parameter `{formDefinitionID}` should match a form definition ID.
     * @summary Patch a form definition.
     * @param {CustomFormsBetaApiPatchFormDefinitionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    patchFormDefinition(requestParameters: CustomFormsBetaApiPatchFormDefinitionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormDefinitionResponseBeta, any>>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID.
     * @summary Patch a form instance.
     * @param {CustomFormsBetaApiPatchFormInstanceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    patchFormInstance(requestParameters: CustomFormsBetaApiPatchFormInstanceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormInstanceResponseBeta, any>>;
    /**
     * No parameters required.
     * @summary Export form definitions by tenant.
     * @param {CustomFormsBetaApiSearchFormDefinitionsByTenantRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    searchFormDefinitionsByTenant(requestParameters?: CustomFormsBetaApiSearchFormDefinitionsByTenantRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFormDefinitionsByTenantResponseBeta, any>>;
    /**
     * Parameter `{formInstanceID}` should match a form instance ID. Parameter `{formElementID}` should match a form element ID at the data source configuration.
     * @summary Retrieves dynamic data by element.
     * @param {CustomFormsBetaApiSearchFormElementDataByElementIDRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    searchFormElementDataByElementID(requestParameters: CustomFormsBetaApiSearchFormElementDataByElementIDRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListFormElementDataByElementIDResponseBeta, any>>;
    /**
     * No parameters required.
     * @summary List form instances by tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    searchFormInstancesByTenant(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FormInstanceResponseBeta[], any>>;
    /**
     * No parameters required.
     * @summary List predefined select options.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    searchPreDefinedSelectOptions(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPredefinedSelectOptionsResponseBeta, any>>;
    /**
     *
     * @summary Preview form definition data source.
     * @param {CustomFormsBetaApiShowPreviewDataSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsBetaApi
     */
    showPreviewDataSource(requestParameters: CustomFormsBetaApiShowPreviewDataSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PreviewDataSourceResponseBeta, any>>;
}
/**
 * CustomPasswordInstructionsBetaApi - axios parameter creator
 * @export
 */
export declare const CustomPasswordInstructionsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Custom Password Instructions
     * @param {CustomPasswordInstructionBeta} customPasswordInstructionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCustomPasswordInstructions: (customPasswordInstructionBeta: CustomPasswordInstructionBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Custom Password Instructions by page ID
     * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to delete.
     * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomPasswordInstructions: (pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish', locale?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Custom Password Instructions by Page ID
     * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to query.
     * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCustomPasswordInstructions: (pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish', locale?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomPasswordInstructionsBetaApi - functional programming interface
 * @export
 */
export declare const CustomPasswordInstructionsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Custom Password Instructions
     * @param {CustomPasswordInstructionBeta} customPasswordInstructionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCustomPasswordInstructions(customPasswordInstructionBeta: CustomPasswordInstructionBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomPasswordInstructionBeta>>;
    /**
     * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Custom Password Instructions by page ID
     * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to delete.
     * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomPasswordInstructions(pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish', locale?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Custom Password Instructions by Page ID
     * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to query.
     * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCustomPasswordInstructions(pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish', locale?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomPasswordInstructionBeta>>;
};
/**
 * CustomPasswordInstructionsBetaApi - factory interface
 * @export
 */
export declare const CustomPasswordInstructionsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Custom Password Instructions
     * @param {CustomPasswordInstructionBeta} customPasswordInstructionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCustomPasswordInstructions(customPasswordInstructionBeta: CustomPasswordInstructionBeta, axiosOptions?: any): AxiosPromise<CustomPasswordInstructionBeta>;
    /**
     * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Custom Password Instructions by page ID
     * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to delete.
     * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteCustomPasswordInstructions(pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish', locale?: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Custom Password Instructions by Page ID
     * @param {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'} pageId The page ID of custom password instructions to query.
     * @param {string} [locale] The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCustomPasswordInstructions(pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish', locale?: string, axiosOptions?: any): AxiosPromise<CustomPasswordInstructionBeta>;
};
/**
 * Request parameters for createCustomPasswordInstructions operation in CustomPasswordInstructionsBetaApi.
 * @export
 * @interface CustomPasswordInstructionsBetaApiCreateCustomPasswordInstructionsRequest
 */
export interface CustomPasswordInstructionsBetaApiCreateCustomPasswordInstructionsRequest {
    /**
     *
     * @type {CustomPasswordInstructionBeta}
     * @memberof CustomPasswordInstructionsBetaApiCreateCustomPasswordInstructions
     */
    readonly customPasswordInstructionBeta: CustomPasswordInstructionBeta;
}
/**
 * Request parameters for deleteCustomPasswordInstructions operation in CustomPasswordInstructionsBetaApi.
 * @export
 * @interface CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructionsRequest
 */
export interface CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructionsRequest {
    /**
     * The page ID of custom password instructions to delete.
     * @type {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'}
     * @memberof CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructions
     */
    readonly pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish';
    /**
     * The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @type {string}
     * @memberof CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructions
     */
    readonly locale?: string;
}
/**
 * Request parameters for getCustomPasswordInstructions operation in CustomPasswordInstructionsBetaApi.
 * @export
 * @interface CustomPasswordInstructionsBetaApiGetCustomPasswordInstructionsRequest
 */
export interface CustomPasswordInstructionsBetaApiGetCustomPasswordInstructionsRequest {
    /**
     * The page ID of custom password instructions to query.
     * @type {'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish'}
     * @memberof CustomPasswordInstructionsBetaApiGetCustomPasswordInstructions
     */
    readonly pageId: 'change-password:enter-password' | 'change-password:finish' | 'flow-selection:select' | 'forget-username:user-email' | 'mfa:enter-code' | 'mfa:enter-kba' | 'mfa:select' | 'reset-password:enter-password' | 'reset-password:enter-username' | 'reset-password:finish' | 'unlock-account:enter-username' | 'unlock-account:finish';
    /**
     * The locale for the custom instructions, a BCP47 language tag. The default value is \\\&quot;default\\\&quot;.
     * @type {string}
     * @memberof CustomPasswordInstructionsBetaApiGetCustomPasswordInstructions
     */
    readonly locale?: string;
}
/**
 * CustomPasswordInstructionsBetaApi - object-oriented interface
 * @export
 * @class CustomPasswordInstructionsBetaApi
 * @extends {BaseAPI}
 */
export declare class CustomPasswordInstructionsBetaApi extends BaseAPI {
    /**
     * This API creates the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Custom Password Instructions
     * @param {CustomPasswordInstructionsBetaApiCreateCustomPasswordInstructionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPasswordInstructionsBetaApi
     */
    createCustomPasswordInstructions(requestParameters: CustomPasswordInstructionsBetaApiCreateCustomPasswordInstructionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomPasswordInstructionBeta, any>>;
    /**
     * This API delete the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Custom Password Instructions by page ID
     * @param {CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPasswordInstructionsBetaApi
     */
    deleteCustomPasswordInstructions(requestParameters: CustomPasswordInstructionsBetaApiDeleteCustomPasswordInstructionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the custom password instructions for the specified page ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Custom Password Instructions by Page ID
     * @param {CustomPasswordInstructionsBetaApiGetCustomPasswordInstructionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomPasswordInstructionsBetaApi
     */
    getCustomPasswordInstructions(requestParameters: CustomPasswordInstructionsBetaApiGetCustomPasswordInstructionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomPasswordInstructionBeta, any>>;
}
/**
 * EntitlementsBetaApi - axios parameter creator
 * @export
 */
export declare const EntitlementsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add single Access Model Metadata to an entitlement.
     * @summary Add metadata to an entitlement.
     * @param {string} id The entitlement id.
     * @param {string} attributeKey Technical name of the Attribute.
     * @param {string} attributeValue Technical name of the Attribute Value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessModelMetadataForEntitlement: (id: string, attributeKey: string, attributeValue: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove single Access Model Metadata from an entitlement.
     * @summary Remove metadata from an entitlement.
     * @param {string} id The entitlement id.
     * @param {string} attributeKey Technical name of the Attribute.
     * @param {string} attributeValue Technical name of the Attribute Value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessModelMetadataFromEntitlement: (id: string, attributeKey: string, attributeValue: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns an entitlement by its ID.
     * @summary Get an entitlement
     * @param {string} id The entitlement ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlement: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the entitlement request config for a specified entitlement.
     * @summary Get Entitlement Request Config
     * @param {string} id Entitlement Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementRequestConfig: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
     * @summary Aggregate Entitlements
     * @param {string} id Source Id
     * @param {any} [csvFile] The CSV file containing the source entitlements to aggregate.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    importEntitlementsBySource: (id: string, csvFile?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all child entitlements of a given entitlement.
     * @summary List of entitlements children
     * @param {string} id Entitlement Id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlementChildren: (id: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all parent entitlements of a given entitlement.
     * @summary List of entitlements parents
     * @param {string} id Entitlement Id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlementParents: (id: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
     * @summary Gets a list of entitlements.
     * @param {string} [accountId] The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
     * @param {string} [segmentedForIdentity] If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlements: (accountId?: string, segmentedForIdentity?: string, forSegmentIds?: string, includeUnsegmented?: boolean, offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Patch an entitlement
     * @param {string} id ID of the entitlement to patch
     * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchEntitlement: (id: string, jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API replaces the entitlement request config for a specified entitlement.
     * @summary Replace Entitlement Request Config
     * @param {string} id Entitlement ID
     * @param {EntitlementRequestConfigBeta} entitlementRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putEntitlementRequestConfig: (id: string, entitlementRequestConfigBeta: EntitlementRequestConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Removes all entitlements on a specific source.
     * @summary Reset Source Entitlements
     * @param {string} id ID of source for the entitlement reset
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    resetSourceEntitlements: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Bulk update an entitlement list
     * @param {EntitlementBulkUpdateRequestBeta} entitlementBulkUpdateRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateEntitlementsInBulk: (entitlementBulkUpdateRequestBeta: EntitlementBulkUpdateRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EntitlementsBetaApi - functional programming interface
 * @export
 */
export declare const EntitlementsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Add single Access Model Metadata to an entitlement.
     * @summary Add metadata to an entitlement.
     * @param {string} id The entitlement id.
     * @param {string} attributeKey Technical name of the Attribute.
     * @param {string} attributeValue Technical name of the Attribute Value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessModelMetadataForEntitlement(id: string, attributeKey: string, attributeValue: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitlementBeta>>;
    /**
     * Remove single Access Model Metadata from an entitlement.
     * @summary Remove metadata from an entitlement.
     * @param {string} id The entitlement id.
     * @param {string} attributeKey Technical name of the Attribute.
     * @param {string} attributeValue Technical name of the Attribute Value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessModelMetadataFromEntitlement(id: string, attributeKey: string, attributeValue: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns an entitlement by its ID.
     * @summary Get an entitlement
     * @param {string} id The entitlement ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlement(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitlementBeta>>;
    /**
     * This API returns the entitlement request config for a specified entitlement.
     * @summary Get Entitlement Request Config
     * @param {string} id Entitlement Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementRequestConfig(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitlementRequestConfigBeta>>;
    /**
     * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
     * @summary Aggregate Entitlements
     * @param {string} id Source Id
     * @param {any} [csvFile] The CSV file containing the source entitlements to aggregate.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    importEntitlementsBySource(id: string, csvFile?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoadEntitlementTaskBeta>>;
    /**
     * This API returns a list of all child entitlements of a given entitlement.
     * @summary List of entitlements children
     * @param {string} id Entitlement Id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlementChildren(id: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementBeta>>>;
    /**
     * This API returns a list of all parent entitlements of a given entitlement.
     * @summary List of entitlements parents
     * @param {string} id Entitlement Id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlementParents(id: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementBeta>>>;
    /**
     * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
     * @summary Gets a list of entitlements.
     * @param {string} [accountId] The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
     * @param {string} [segmentedForIdentity] If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlements(accountId?: string, segmentedForIdentity?: string, forSegmentIds?: string, includeUnsegmented?: boolean, offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementBeta>>>;
    /**
     * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Patch an entitlement
     * @param {string} id ID of the entitlement to patch
     * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchEntitlement(id: string, jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitlementBeta>>;
    /**
     * This API replaces the entitlement request config for a specified entitlement.
     * @summary Replace Entitlement Request Config
     * @param {string} id Entitlement ID
     * @param {EntitlementRequestConfigBeta} entitlementRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putEntitlementRequestConfig(id: string, entitlementRequestConfigBeta: EntitlementRequestConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitlementRequestConfigBeta>>;
    /**
     * Removes all entitlements on a specific source.
     * @summary Reset Source Entitlements
     * @param {string} id ID of source for the entitlement reset
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    resetSourceEntitlements(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitlementSourceResetBaseReferenceDtoBeta>>;
    /**
     * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Bulk update an entitlement list
     * @param {EntitlementBulkUpdateRequestBeta} entitlementBulkUpdateRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateEntitlementsInBulk(entitlementBulkUpdateRequestBeta: EntitlementBulkUpdateRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * EntitlementsBetaApi - factory interface
 * @export
 */
export declare const EntitlementsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add single Access Model Metadata to an entitlement.
     * @summary Add metadata to an entitlement.
     * @param {string} id The entitlement id.
     * @param {string} attributeKey Technical name of the Attribute.
     * @param {string} attributeValue Technical name of the Attribute Value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createAccessModelMetadataForEntitlement(id: string, attributeKey: string, attributeValue: string, axiosOptions?: any): AxiosPromise<EntitlementBeta>;
    /**
     * Remove single Access Model Metadata from an entitlement.
     * @summary Remove metadata from an entitlement.
     * @param {string} id The entitlement id.
     * @param {string} attributeKey Technical name of the Attribute.
     * @param {string} attributeValue Technical name of the Attribute Value.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccessModelMetadataFromEntitlement(id: string, attributeKey: string, attributeValue: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns an entitlement by its ID.
     * @summary Get an entitlement
     * @param {string} id The entitlement ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlement(id: string, axiosOptions?: any): AxiosPromise<EntitlementBeta>;
    /**
     * This API returns the entitlement request config for a specified entitlement.
     * @summary Get Entitlement Request Config
     * @param {string} id Entitlement Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementRequestConfig(id: string, axiosOptions?: any): AxiosPromise<EntitlementRequestConfigBeta>;
    /**
     * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
     * @summary Aggregate Entitlements
     * @param {string} id Source Id
     * @param {any} [csvFile] The CSV file containing the source entitlements to aggregate.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    importEntitlementsBySource(id: string, csvFile?: any, axiosOptions?: any): AxiosPromise<LoadEntitlementTaskBeta>;
    /**
     * This API returns a list of all child entitlements of a given entitlement.
     * @summary List of entitlements children
     * @param {string} id Entitlement Id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlementChildren(id: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<EntitlementBeta>>;
    /**
     * This API returns a list of all parent entitlements of a given entitlement.
     * @summary List of entitlements parents
     * @param {string} id Entitlement Id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlementParents(id: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<EntitlementBeta>>;
    /**
     * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
     * @summary Gets a list of entitlements.
     * @param {string} [accountId] The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
     * @param {string} [segmentedForIdentity] If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listEntitlements(accountId?: string, segmentedForIdentity?: string, forSegmentIds?: string, includeUnsegmented?: boolean, offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<EntitlementBeta>>;
    /**
     * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Patch an entitlement
     * @param {string} id ID of the entitlement to patch
     * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchEntitlement(id: string, jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<EntitlementBeta>;
    /**
     * This API replaces the entitlement request config for a specified entitlement.
     * @summary Replace Entitlement Request Config
     * @param {string} id Entitlement ID
     * @param {EntitlementRequestConfigBeta} entitlementRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putEntitlementRequestConfig(id: string, entitlementRequestConfigBeta: EntitlementRequestConfigBeta, axiosOptions?: any): AxiosPromise<EntitlementRequestConfigBeta>;
    /**
     * Removes all entitlements on a specific source.
     * @summary Reset Source Entitlements
     * @param {string} id ID of source for the entitlement reset
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    resetSourceEntitlements(id: string, axiosOptions?: any): AxiosPromise<EntitlementSourceResetBaseReferenceDtoBeta>;
    /**
     * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Bulk update an entitlement list
     * @param {EntitlementBulkUpdateRequestBeta} entitlementBulkUpdateRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateEntitlementsInBulk(entitlementBulkUpdateRequestBeta: EntitlementBulkUpdateRequestBeta, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for createAccessModelMetadataForEntitlement operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiCreateAccessModelMetadataForEntitlementRequest
 */
export interface EntitlementsBetaApiCreateAccessModelMetadataForEntitlementRequest {
    /**
     * The entitlement id.
     * @type {string}
     * @memberof EntitlementsBetaApiCreateAccessModelMetadataForEntitlement
     */
    readonly id: string;
    /**
     * Technical name of the Attribute.
     * @type {string}
     * @memberof EntitlementsBetaApiCreateAccessModelMetadataForEntitlement
     */
    readonly attributeKey: string;
    /**
     * Technical name of the Attribute Value.
     * @type {string}
     * @memberof EntitlementsBetaApiCreateAccessModelMetadataForEntitlement
     */
    readonly attributeValue: string;
}
/**
 * Request parameters for deleteAccessModelMetadataFromEntitlement operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlementRequest
 */
export interface EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlementRequest {
    /**
     * The entitlement id.
     * @type {string}
     * @memberof EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlement
     */
    readonly id: string;
    /**
     * Technical name of the Attribute.
     * @type {string}
     * @memberof EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlement
     */
    readonly attributeKey: string;
    /**
     * Technical name of the Attribute Value.
     * @type {string}
     * @memberof EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlement
     */
    readonly attributeValue: string;
}
/**
 * Request parameters for getEntitlement operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiGetEntitlementRequest
 */
export interface EntitlementsBetaApiGetEntitlementRequest {
    /**
     * The entitlement ID
     * @type {string}
     * @memberof EntitlementsBetaApiGetEntitlement
     */
    readonly id: string;
}
/**
 * Request parameters for getEntitlementRequestConfig operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiGetEntitlementRequestConfigRequest
 */
export interface EntitlementsBetaApiGetEntitlementRequestConfigRequest {
    /**
     * Entitlement Id
     * @type {string}
     * @memberof EntitlementsBetaApiGetEntitlementRequestConfig
     */
    readonly id: string;
}
/**
 * Request parameters for importEntitlementsBySource operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiImportEntitlementsBySourceRequest
 */
export interface EntitlementsBetaApiImportEntitlementsBySourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof EntitlementsBetaApiImportEntitlementsBySource
     */
    readonly id: string;
    /**
     * The CSV file containing the source entitlements to aggregate.
     * @type {any}
     * @memberof EntitlementsBetaApiImportEntitlementsBySource
     */
    readonly csvFile?: any;
}
/**
 * Request parameters for listEntitlementChildren operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiListEntitlementChildrenRequest
 */
export interface EntitlementsBetaApiListEntitlementChildrenRequest {
    /**
     * Entitlement Id
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlementChildren
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof EntitlementsBetaApiListEntitlementChildren
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof EntitlementsBetaApiListEntitlementChildren
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof EntitlementsBetaApiListEntitlementChildren
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlementChildren
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlementChildren
     */
    readonly filters?: string;
}
/**
 * Request parameters for listEntitlementParents operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiListEntitlementParentsRequest
 */
export interface EntitlementsBetaApiListEntitlementParentsRequest {
    /**
     * Entitlement Id
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlementParents
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof EntitlementsBetaApiListEntitlementParents
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof EntitlementsBetaApiListEntitlementParents
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof EntitlementsBetaApiListEntitlementParents
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id**
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlementParents
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlementParents
     */
    readonly filters?: string;
}
/**
 * Request parameters for listEntitlements operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiListEntitlementsRequest
 */
export interface EntitlementsBetaApiListEntitlementsRequest {
    /**
     * The account ID. If specified, returns only entitlements associated with the given Account. Cannot be specified with the **filters**, **segmented-for-identity**, **for-segment-ids**, or **include-unsegmented** param(s).
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly accountId?: string;
    /**
     * If present and not empty, additionally filters Entitlements to those which are assigned to the Segment(s) which are visible to the Identity with the specified ID. By convention, the value **me** can stand in for the current user\&#39;s Identity ID. Cannot be specified with the **account-id** or **for-segment-ids** param(s). It is also illegal to specify a value that refers to a different user\&#39;s Identity.
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly segmentedForIdentity?: string;
    /**
     * If present and not empty, additionally filters Access Profiles to those which are assigned to the Segment(s) with the specified IDs. Cannot be specified with the **account-id** or **segmented-for-identity** param(s).
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly forSegmentIds?: string;
    /**
     * Whether or not the response list should contain unsegmented Entitlements. If **for-segment-ids** and **segmented-for-identity** are both absent or empty, specifying **include-unsegmented&#x3D;false** results in an error.
     * @type {boolean}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly includeUnsegmented?: boolean;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, type, attribute, value, source.id, requestable**
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*  **type**: *eq, in*  **attribute**: *eq, in*  **value**: *eq, in, sw*  **source.id**: *eq, in*  **requestable**: *eq*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*
     * @type {string}
     * @memberof EntitlementsBetaApiListEntitlements
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchEntitlement operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiPatchEntitlementRequest
 */
export interface EntitlementsBetaApiPatchEntitlementRequest {
    /**
     * ID of the entitlement to patch
     * @type {string}
     * @memberof EntitlementsBetaApiPatchEntitlement
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof EntitlementsBetaApiPatchEntitlement
     */
    readonly jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for putEntitlementRequestConfig operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiPutEntitlementRequestConfigRequest
 */
export interface EntitlementsBetaApiPutEntitlementRequestConfigRequest {
    /**
     * Entitlement ID
     * @type {string}
     * @memberof EntitlementsBetaApiPutEntitlementRequestConfig
     */
    readonly id: string;
    /**
     *
     * @type {EntitlementRequestConfigBeta}
     * @memberof EntitlementsBetaApiPutEntitlementRequestConfig
     */
    readonly entitlementRequestConfigBeta: EntitlementRequestConfigBeta;
}
/**
 * Request parameters for resetSourceEntitlements operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiResetSourceEntitlementsRequest
 */
export interface EntitlementsBetaApiResetSourceEntitlementsRequest {
    /**
     * ID of source for the entitlement reset
     * @type {string}
     * @memberof EntitlementsBetaApiResetSourceEntitlements
     */
    readonly id: string;
}
/**
 * Request parameters for updateEntitlementsInBulk operation in EntitlementsBetaApi.
 * @export
 * @interface EntitlementsBetaApiUpdateEntitlementsInBulkRequest
 */
export interface EntitlementsBetaApiUpdateEntitlementsInBulkRequest {
    /**
     *
     * @type {EntitlementBulkUpdateRequestBeta}
     * @memberof EntitlementsBetaApiUpdateEntitlementsInBulk
     */
    readonly entitlementBulkUpdateRequestBeta: EntitlementBulkUpdateRequestBeta;
}
/**
 * EntitlementsBetaApi - object-oriented interface
 * @export
 * @class EntitlementsBetaApi
 * @extends {BaseAPI}
 */
export declare class EntitlementsBetaApi extends BaseAPI {
    /**
     * Add single Access Model Metadata to an entitlement.
     * @summary Add metadata to an entitlement.
     * @param {EntitlementsBetaApiCreateAccessModelMetadataForEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    createAccessModelMetadataForEntitlement(requestParameters: EntitlementsBetaApiCreateAccessModelMetadataForEntitlementRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta, any>>;
    /**
     * Remove single Access Model Metadata from an entitlement.
     * @summary Remove metadata from an entitlement.
     * @param {EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    deleteAccessModelMetadataFromEntitlement(requestParameters: EntitlementsBetaApiDeleteAccessModelMetadataFromEntitlementRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns an entitlement by its ID.
     * @summary Get an entitlement
     * @param {EntitlementsBetaApiGetEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    getEntitlement(requestParameters: EntitlementsBetaApiGetEntitlementRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta, any>>;
    /**
     * This API returns the entitlement request config for a specified entitlement.
     * @summary Get Entitlement Request Config
     * @param {EntitlementsBetaApiGetEntitlementRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    getEntitlementRequestConfig(requestParameters: EntitlementsBetaApiGetEntitlementRequestConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementRequestConfigBeta, any>>;
    /**
     * Starts an entitlement aggregation on the specified source. Though this endpoint has been deprecated, you can find its Beta equivalent [here](https://developer.sailpoint.com/docs/api/beta/import-entitlements).  If the target source is a direct connection, then the request body must be empty. You will also need to make sure the Content-Type header is not set. If you set the Content-Type header without specifying a body, then you will receive a 500 error.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`.
     * @summary Aggregate Entitlements
     * @param {EntitlementsBetaApiImportEntitlementsBySourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    importEntitlementsBySource(requestParameters: EntitlementsBetaApiImportEntitlementsBySourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoadEntitlementTaskBeta, any>>;
    /**
     * This API returns a list of all child entitlements of a given entitlement.
     * @summary List of entitlements children
     * @param {EntitlementsBetaApiListEntitlementChildrenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    listEntitlementChildren(requestParameters: EntitlementsBetaApiListEntitlementChildrenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta[], any>>;
    /**
     * This API returns a list of all parent entitlements of a given entitlement.
     * @summary List of entitlements parents
     * @param {EntitlementsBetaApiListEntitlementParentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    listEntitlementParents(requestParameters: EntitlementsBetaApiListEntitlementParentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta[], any>>;
    /**
     * This API returns a list of entitlements.  This API can be used in one of the two following ways: either getting entitlements for a specific **account-id**, or getting via use of **filters** (those two options are exclusive).  Any authenticated token can call this API.
     * @summary Gets a list of entitlements.
     * @param {EntitlementsBetaApiListEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    listEntitlements(requestParameters?: EntitlementsBetaApiListEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta[], any>>;
    /**
     * This API updates an existing entitlement using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable: **requestable**, **privileged**, **segments**, **owner**, **name**, **description**, and **manuallyUpdatedFields**  When you\'re patching owner, only owner type and owner id must be provided. Owner name is optional, and it won\'t be modified. If the owner name is provided, it should correspond to the real name. The only owner type currently supported is IDENTITY.  A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Patch an entitlement
     * @param {EntitlementsBetaApiPatchEntitlementRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    patchEntitlement(requestParameters: EntitlementsBetaApiPatchEntitlementRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta, any>>;
    /**
     * This API replaces the entitlement request config for a specified entitlement.
     * @summary Replace Entitlement Request Config
     * @param {EntitlementsBetaApiPutEntitlementRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    putEntitlementRequestConfig(requestParameters: EntitlementsBetaApiPutEntitlementRequestConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementRequestConfigBeta, any>>;
    /**
     * Removes all entitlements on a specific source.
     * @summary Reset Source Entitlements
     * @param {EntitlementsBetaApiResetSourceEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    resetSourceEntitlements(requestParameters: EntitlementsBetaApiResetSourceEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementSourceResetBaseReferenceDtoBeta, any>>;
    /**
     * This API applies an update to every entitlement of the list.  The number of entitlements to update is limited to 50 items maximum.  The JsonPatch update follows the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. allowed operations : **{ \"op\": \"replace\", \"path\": \"/privileged\", \"value\": boolean }**  **{ \"op\": \"replace\", \"path\": \"/requestable\",\"value\": boolean }**   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Bulk update an entitlement list
     * @param {EntitlementsBetaApiUpdateEntitlementsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementsBetaApi
     */
    updateEntitlementsInBulk(requestParameters: EntitlementsBetaApiUpdateEntitlementsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * GovernanceGroupsBetaApi - axios parameter creator
 * @export
 */
export declare const GovernanceGroupsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a new Governance Group.
     * @summary Create a new Governance Group.
     * @param {WorkgroupDtoBeta} workgroupDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkgroup: (workgroupDtoBeta: WorkgroupDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes a Governance Group by its ID.
     * @summary Delete a Governance Group
     * @param {string} id ID of the Governance Group
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Remove members from Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be removed from  a Governance Group members list.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroupMembers: (workgroupId: string, bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
     * @summary Delete Governance Group(s)
     * @param {WorkgroupBulkDeleteRequestBeta} workgroupBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroupsInBulk: (workgroupBulkDeleteRequestBeta: WorkgroupBulkDeleteRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a Governance Groups by its ID.
     * @summary Get Governance Group by Id
     * @param {string} id ID of the Governance Group
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkgroup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns list of connections associated with a Governance Group.
     * @summary List connections for Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listConnections: (workgroupId: string, offset?: number, limit?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns list of members associated with a Governance Group.
     * @summary List Governance Group Members
     * @param {string} workgroupId ID of the Governance Group.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkgroupMembers: (workgroupId: string, offset?: number, limit?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns list of Governance Groups
     * @summary List Governance Groups
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkgroups: (offset?: number, limit?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
     * @summary Patch a Governance Group
     * @param {string} id ID of the Governance Group
     * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkgroup: (id: string, jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Add members to Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be added to a Governance Group members list.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkgroupMembers: (workgroupId: string, bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GovernanceGroupsBetaApi - functional programming interface
 * @export
 */
export declare const GovernanceGroupsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a new Governance Group.
     * @summary Create a new Governance Group.
     * @param {WorkgroupDtoBeta} workgroupDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkgroup(workgroupDtoBeta: WorkgroupDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkgroupDtoBeta>>;
    /**
     * This API deletes a Governance Group by its ID.
     * @summary Delete a Governance Group
     * @param {string} id ID of the Governance Group
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Remove members from Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be removed from  a Governance Group members list.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroupMembers(workgroupId: string, bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkgroupMemberDeleteItemBeta>>>;
    /**
     *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
     * @summary Delete Governance Group(s)
     * @param {WorkgroupBulkDeleteRequestBeta} workgroupBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroupsInBulk(workgroupBulkDeleteRequestBeta: WorkgroupBulkDeleteRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkgroupDeleteItemBeta>>>;
    /**
     * This API returns a Governance Groups by its ID.
     * @summary Get Governance Group by Id
     * @param {string} id ID of the Governance Group
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkgroup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkgroupDtoBeta>>;
    /**
     * This API returns list of connections associated with a Governance Group.
     * @summary List connections for Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listConnections(workgroupId: string, offset?: number, limit?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkgroupConnectionDtoBeta>>>;
    /**
     * This API returns list of members associated with a Governance Group.
     * @summary List Governance Group Members
     * @param {string} workgroupId ID of the Governance Group.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkgroupMembers(workgroupId: string, offset?: number, limit?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListWorkgroupMembers200ResponseInnerBeta>>>;
    /**
     * This API returns list of Governance Groups
     * @summary List Governance Groups
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkgroups(offset?: number, limit?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkgroupDtoBeta>>>;
    /**
     * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
     * @summary Patch a Governance Group
     * @param {string} id ID of the Governance Group
     * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkgroup(id: string, jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkgroupDtoBeta>>;
    /**
     * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Add members to Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be added to a Governance Group members list.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkgroupMembers(workgroupId: string, bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkgroupMemberAddItemBeta>>>;
};
/**
 * GovernanceGroupsBetaApi - factory interface
 * @export
 */
export declare const GovernanceGroupsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a new Governance Group.
     * @summary Create a new Governance Group.
     * @param {WorkgroupDtoBeta} workgroupDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkgroup(workgroupDtoBeta: WorkgroupDtoBeta, axiosOptions?: any): AxiosPromise<WorkgroupDtoBeta>;
    /**
     * This API deletes a Governance Group by its ID.
     * @summary Delete a Governance Group
     * @param {string} id ID of the Governance Group
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroup(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Remove members from Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be removed from  a Governance Group members list.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroupMembers(workgroupId: string, bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>, axiosOptions?: any): AxiosPromise<Array<WorkgroupMemberDeleteItemBeta>>;
    /**
     *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
     * @summary Delete Governance Group(s)
     * @param {WorkgroupBulkDeleteRequestBeta} workgroupBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkgroupsInBulk(workgroupBulkDeleteRequestBeta: WorkgroupBulkDeleteRequestBeta, axiosOptions?: any): AxiosPromise<Array<WorkgroupDeleteItemBeta>>;
    /**
     * This API returns a Governance Groups by its ID.
     * @summary Get Governance Group by Id
     * @param {string} id ID of the Governance Group
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkgroup(id: string, axiosOptions?: any): AxiosPromise<WorkgroupDtoBeta>;
    /**
     * This API returns list of connections associated with a Governance Group.
     * @summary List connections for Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listConnections(workgroupId: string, offset?: number, limit?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<WorkgroupConnectionDtoBeta>>;
    /**
     * This API returns list of members associated with a Governance Group.
     * @summary List Governance Group Members
     * @param {string} workgroupId ID of the Governance Group.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkgroupMembers(workgroupId: string, offset?: number, limit?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<ListWorkgroupMembers200ResponseInnerBeta>>;
    /**
     * This API returns list of Governance Groups
     * @summary List Governance Groups
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkgroups(offset?: number, limit?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<WorkgroupDtoBeta>>;
    /**
     * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
     * @summary Patch a Governance Group
     * @param {string} id ID of the Governance Group
     * @param {Array<JsonPatchOperationBeta>} [jsonPatchOperationBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkgroup(id: string, jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<WorkgroupDtoBeta>;
    /**
     * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Add members to Governance Group
     * @param {string} workgroupId ID of the Governance Group.
     * @param {Array<BulkWorkgroupMembersRequestInnerBeta>} bulkWorkgroupMembersRequestInnerBeta List of identities to be added to a Governance Group members list.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkgroupMembers(workgroupId: string, bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>, axiosOptions?: any): AxiosPromise<Array<WorkgroupMemberAddItemBeta>>;
};
/**
 * Request parameters for createWorkgroup operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiCreateWorkgroupRequest
 */
export interface GovernanceGroupsBetaApiCreateWorkgroupRequest {
    /**
     *
     * @type {WorkgroupDtoBeta}
     * @memberof GovernanceGroupsBetaApiCreateWorkgroup
     */
    readonly workgroupDtoBeta: WorkgroupDtoBeta;
}
/**
 * Request parameters for deleteWorkgroup operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiDeleteWorkgroupRequest
 */
export interface GovernanceGroupsBetaApiDeleteWorkgroupRequest {
    /**
     * ID of the Governance Group
     * @type {string}
     * @memberof GovernanceGroupsBetaApiDeleteWorkgroup
     */
    readonly id: string;
}
/**
 * Request parameters for deleteWorkgroupMembers operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiDeleteWorkgroupMembersRequest
 */
export interface GovernanceGroupsBetaApiDeleteWorkgroupMembersRequest {
    /**
     * ID of the Governance Group.
     * @type {string}
     * @memberof GovernanceGroupsBetaApiDeleteWorkgroupMembers
     */
    readonly workgroupId: string;
    /**
     * List of identities to be removed from  a Governance Group members list.
     * @type {Array<BulkWorkgroupMembersRequestInnerBeta>}
     * @memberof GovernanceGroupsBetaApiDeleteWorkgroupMembers
     */
    readonly bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>;
}
/**
 * Request parameters for deleteWorkgroupsInBulk operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiDeleteWorkgroupsInBulkRequest
 */
export interface GovernanceGroupsBetaApiDeleteWorkgroupsInBulkRequest {
    /**
     *
     * @type {WorkgroupBulkDeleteRequestBeta}
     * @memberof GovernanceGroupsBetaApiDeleteWorkgroupsInBulk
     */
    readonly workgroupBulkDeleteRequestBeta: WorkgroupBulkDeleteRequestBeta;
}
/**
 * Request parameters for getWorkgroup operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiGetWorkgroupRequest
 */
export interface GovernanceGroupsBetaApiGetWorkgroupRequest {
    /**
     * ID of the Governance Group
     * @type {string}
     * @memberof GovernanceGroupsBetaApiGetWorkgroup
     */
    readonly id: string;
}
/**
 * Request parameters for listConnections operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiListConnectionsRequest
 */
export interface GovernanceGroupsBetaApiListConnectionsRequest {
    /**
     * ID of the Governance Group.
     * @type {string}
     * @memberof GovernanceGroupsBetaApiListConnections
     */
    readonly workgroupId: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof GovernanceGroupsBetaApiListConnections
     */
    readonly offset?: number;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof GovernanceGroupsBetaApiListConnections
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof GovernanceGroupsBetaApiListConnections
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof GovernanceGroupsBetaApiListConnections
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listWorkgroupMembers operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiListWorkgroupMembersRequest
 */
export interface GovernanceGroupsBetaApiListWorkgroupMembersRequest {
    /**
     * ID of the Governance Group.
     * @type {string}
     * @memberof GovernanceGroupsBetaApiListWorkgroupMembers
     */
    readonly workgroupId: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof GovernanceGroupsBetaApiListWorkgroupMembers
     */
    readonly offset?: number;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof GovernanceGroupsBetaApiListWorkgroupMembers
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof GovernanceGroupsBetaApiListWorkgroupMembers
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof GovernanceGroupsBetaApiListWorkgroupMembers
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listWorkgroups operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiListWorkgroupsRequest
 */
export interface GovernanceGroupsBetaApiListWorkgroupsRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof GovernanceGroupsBetaApiListWorkgroups
     */
    readonly offset?: number;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof GovernanceGroupsBetaApiListWorkgroups
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof GovernanceGroupsBetaApiListWorkgroups
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, sw*  **name**: *eq, sw, in*  **memberships.identityId**: *eq, in*
     * @type {string}
     * @memberof GovernanceGroupsBetaApiListWorkgroups
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified, id, description**
     * @type {string}
     * @memberof GovernanceGroupsBetaApiListWorkgroups
     */
    readonly sorters?: string;
}
/**
 * Request parameters for patchWorkgroup operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiPatchWorkgroupRequest
 */
export interface GovernanceGroupsBetaApiPatchWorkgroupRequest {
    /**
     * ID of the Governance Group
     * @type {string}
     * @memberof GovernanceGroupsBetaApiPatchWorkgroup
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof GovernanceGroupsBetaApiPatchWorkgroup
     */
    readonly jsonPatchOperationBeta?: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for updateWorkgroupMembers operation in GovernanceGroupsBetaApi.
 * @export
 * @interface GovernanceGroupsBetaApiUpdateWorkgroupMembersRequest
 */
export interface GovernanceGroupsBetaApiUpdateWorkgroupMembersRequest {
    /**
     * ID of the Governance Group.
     * @type {string}
     * @memberof GovernanceGroupsBetaApiUpdateWorkgroupMembers
     */
    readonly workgroupId: string;
    /**
     * List of identities to be added to a Governance Group members list.
     * @type {Array<BulkWorkgroupMembersRequestInnerBeta>}
     * @memberof GovernanceGroupsBetaApiUpdateWorkgroupMembers
     */
    readonly bulkWorkgroupMembersRequestInnerBeta: Array<BulkWorkgroupMembersRequestInnerBeta>;
}
/**
 * GovernanceGroupsBetaApi - object-oriented interface
 * @export
 * @class GovernanceGroupsBetaApi
 * @extends {BaseAPI}
 */
export declare class GovernanceGroupsBetaApi extends BaseAPI {
    /**
     * This API creates a new Governance Group.
     * @summary Create a new Governance Group.
     * @param {GovernanceGroupsBetaApiCreateWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    createWorkgroup(requestParameters: GovernanceGroupsBetaApiCreateWorkgroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupDtoBeta, any>>;
    /**
     * This API deletes a Governance Group by its ID.
     * @summary Delete a Governance Group
     * @param {GovernanceGroupsBetaApiDeleteWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    deleteWorkgroup(requestParameters: GovernanceGroupsBetaApiDeleteWorkgroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API removes one or more  members from a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Remove members from Governance Group
     * @param {GovernanceGroupsBetaApiDeleteWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    deleteWorkgroupMembers(requestParameters: GovernanceGroupsBetaApiDeleteWorkgroupMembersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupMemberDeleteItemBeta[], any>>;
    /**
     *  This API initiates a bulk deletion of one or more Governance Groups.  >  If any of the indicated Governance Groups have one or more connections associated with it,then those Governance Groups will be added in  **inUse** list of the response. Governance Group(s) marked as **inUse** can not be deleted.  >  If any of the indicated Governance Groups is not does not exists in Organization,then those Governance Groups will be added in **notFound** list of the response. Governance Groups marked as **notFound** will not be deleted.  >  If any of the indicated Governance Groups does not have any connections associated with it,then those Governance Groups will be added in **deleted** list of the response. A Governance Group marked as **deleted** will be deleted from current Organization.  >  If the request contains any **inUse** or **notFound** Governance Group IDs then it skips only these Governance Groups for deletion and deletes the rest of Governance Groups which have no connections associated with it.   >  **This API has limit number of Governance Groups can be deleted at one time. If the request contains more then 100 Governance Groups IDs to be deleted then the API will throw an exception.**
     * @summary Delete Governance Group(s)
     * @param {GovernanceGroupsBetaApiDeleteWorkgroupsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    deleteWorkgroupsInBulk(requestParameters: GovernanceGroupsBetaApiDeleteWorkgroupsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupDeleteItemBeta[], any>>;
    /**
     * This API returns a Governance Groups by its ID.
     * @summary Get Governance Group by Id
     * @param {GovernanceGroupsBetaApiGetWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    getWorkgroup(requestParameters: GovernanceGroupsBetaApiGetWorkgroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupDtoBeta, any>>;
    /**
     * This API returns list of connections associated with a Governance Group.
     * @summary List connections for Governance Group
     * @param {GovernanceGroupsBetaApiListConnectionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    listConnections(requestParameters: GovernanceGroupsBetaApiListConnectionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupConnectionDtoBeta[], any>>;
    /**
     * This API returns list of members associated with a Governance Group.
     * @summary List Governance Group Members
     * @param {GovernanceGroupsBetaApiListWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    listWorkgroupMembers(requestParameters: GovernanceGroupsBetaApiListWorkgroupMembersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListWorkgroupMembers200ResponseInnerBeta[], any>>;
    /**
     * This API returns list of Governance Groups
     * @summary List Governance Groups
     * @param {GovernanceGroupsBetaApiListWorkgroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    listWorkgroups(requestParameters?: GovernanceGroupsBetaApiListWorkgroupsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupDtoBeta[], any>>;
    /**
     * This API updates an existing governance group by ID.  The following fields and objects are patchable:   * name   * description   * owner  A token with API or ORG_ADMIN authority is required to call this API.
     * @summary Patch a Governance Group
     * @param {GovernanceGroupsBetaApiPatchWorkgroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    patchWorkgroup(requestParameters: GovernanceGroupsBetaApiPatchWorkgroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupDtoBeta, any>>;
    /**
     * This API adds one or more members to a Governance Group.  A token with API, ORG_ADMIN authority is required to call this API.  >  **Following field of Identity is an optional field in the request.**  >  **name**
     * @summary Add members to Governance Group
     * @param {GovernanceGroupsBetaApiUpdateWorkgroupMembersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceGroupsBetaApi
     */
    updateWorkgroupMembers(requestParameters: GovernanceGroupsBetaApiUpdateWorkgroupMembersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkgroupMemberAddItemBeta[], any>>;
}
/**
 * IAIAccessRequestRecommendationsBetaApi - axios parameter creator
 * @export
 */
export declare const IAIAccessRequestRecommendationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
     * @summary Notification of Ignored Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item to ignore for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsIgnoredItem: (accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
     * @summary Notification of Requested Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item that was requested for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsRequestedItem: (accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access that was viewed for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsViewedItem: (accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations in Bulk
     * @param {Array<AccessRequestRecommendationActionItemDtoBeta>} accessRequestRecommendationActionItemDtoBeta The recommended access items that were viewed for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsViewedItems: (accessRequestRecommendationActionItemDtoBeta: Array<AccessRequestRecommendationActionItemDtoBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
     * @summary Identity Access Request Recommendations
     * @param {string} [identityId] Get access request recommendations for an identityId. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [includeTranslationMessages] If *true* it will populate a list of translation messages in the response.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendations: (identityId?: string, limit?: number, offset?: number, count?: boolean, includeTranslationMessages?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the list of ignored access request recommendations.
     * @summary List of Ignored Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsIgnoredItems: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of requested access request recommendations.
     * @summary List of Requested Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsRequestedItems: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the list of viewed access request recommendations.
     * @summary List of Viewed Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsViewedItems: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAIAccessRequestRecommendationsBetaApi - functional programming interface
 * @export
 */
export declare const IAIAccessRequestRecommendationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
     * @summary Notification of Ignored Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item to ignore for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsIgnoredItem(accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestRecommendationActionItemResponseDtoBeta>>;
    /**
     * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
     * @summary Notification of Requested Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item that was requested for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsRequestedItem(accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestRecommendationActionItemResponseDtoBeta>>;
    /**
     * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access that was viewed for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsViewedItem(accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessRequestRecommendationActionItemResponseDtoBeta>>;
    /**
     * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations in Bulk
     * @param {Array<AccessRequestRecommendationActionItemDtoBeta>} accessRequestRecommendationActionItemDtoBeta The recommended access items that were viewed for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsViewedItems(accessRequestRecommendationActionItemDtoBeta: Array<AccessRequestRecommendationActionItemDtoBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>>;
    /**
     * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
     * @summary Identity Access Request Recommendations
     * @param {string} [identityId] Get access request recommendations for an identityId. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [includeTranslationMessages] If *true* it will populate a list of translation messages in the response.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendations(identityId?: string, limit?: number, offset?: number, count?: boolean, includeTranslationMessages?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessRequestRecommendationItemDetailBeta>>>;
    /**
     * This API returns the list of ignored access request recommendations.
     * @summary List of Ignored Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsIgnoredItems(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>>;
    /**
     * This API returns a list of requested access request recommendations.
     * @summary List of Requested Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsRequestedItems(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>>;
    /**
     * This API returns the list of viewed access request recommendations.
     * @summary List of Viewed Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsViewedItems(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>>;
};
/**
 * IAIAccessRequestRecommendationsBetaApi - factory interface
 * @export
 */
export declare const IAIAccessRequestRecommendationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
     * @summary Notification of Ignored Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item to ignore for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsIgnoredItem(accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: any): AxiosPromise<AccessRequestRecommendationActionItemResponseDtoBeta>;
    /**
     * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
     * @summary Notification of Requested Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access item that was requested for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsRequestedItem(accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: any): AxiosPromise<AccessRequestRecommendationActionItemResponseDtoBeta>;
    /**
     * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations
     * @param {AccessRequestRecommendationActionItemDtoBeta} accessRequestRecommendationActionItemDtoBeta The recommended access that was viewed for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsViewedItem(accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta, axiosOptions?: any): AxiosPromise<AccessRequestRecommendationActionItemResponseDtoBeta>;
    /**
     * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations in Bulk
     * @param {Array<AccessRequestRecommendationActionItemDtoBeta>} accessRequestRecommendationActionItemDtoBeta The recommended access items that were viewed for an identity.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    addAccessRequestRecommendationsViewedItems(accessRequestRecommendationActionItemDtoBeta: Array<AccessRequestRecommendationActionItemDtoBeta>, axiosOptions?: any): AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>;
    /**
     * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
     * @summary Identity Access Request Recommendations
     * @param {string} [identityId] Get access request recommendations for an identityId. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [includeTranslationMessages] If *true* it will populate a list of translation messages in the response.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendations(identityId?: string, limit?: number, offset?: number, count?: boolean, includeTranslationMessages?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccessRequestRecommendationItemDetailBeta>>;
    /**
     * This API returns the list of ignored access request recommendations.
     * @summary List of Ignored Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsIgnoredItems(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>;
    /**
     * This API returns a list of requested access request recommendations.
     * @summary List of Requested Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsRequestedItems(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>;
    /**
     * This API returns the list of viewed access request recommendations.
     * @summary List of Viewed Access Request Recommendations
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAccessRequestRecommendationsViewedItems(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<AccessRequestRecommendationActionItemResponseDtoBeta>>;
};
/**
 * Request parameters for addAccessRequestRecommendationsIgnoredItem operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsIgnoredItemRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsIgnoredItemRequest {
    /**
     * The recommended access item to ignore for an identity.
     * @type {AccessRequestRecommendationActionItemDtoBeta}
     * @memberof IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsIgnoredItem
     */
    readonly accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta;
}
/**
 * Request parameters for addAccessRequestRecommendationsRequestedItem operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsRequestedItemRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsRequestedItemRequest {
    /**
     * The recommended access item that was requested for an identity.
     * @type {AccessRequestRecommendationActionItemDtoBeta}
     * @memberof IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsRequestedItem
     */
    readonly accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta;
}
/**
 * Request parameters for addAccessRequestRecommendationsViewedItem operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemRequest {
    /**
     * The recommended access that was viewed for an identity.
     * @type {AccessRequestRecommendationActionItemDtoBeta}
     * @memberof IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItem
     */
    readonly accessRequestRecommendationActionItemDtoBeta: AccessRequestRecommendationActionItemDtoBeta;
}
/**
 * Request parameters for addAccessRequestRecommendationsViewedItems operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemsRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemsRequest {
    /**
     * The recommended access items that were viewed for an identity.
     * @type {Array<AccessRequestRecommendationActionItemDtoBeta>}
     * @memberof IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItems
     */
    readonly accessRequestRecommendationActionItemDtoBeta: Array<AccessRequestRecommendationActionItemDtoBeta>;
}
/**
 * Request parameters for getAccessRequestRecommendations operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequest {
    /**
     * Get access request recommendations for an identityId. *me* indicates the current user.
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly identityId?: string;
    /**
     * Max number of results to return.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly count?: boolean;
    /**
     * If *true* it will populate a list of translation messages in the response.
     * @type {boolean}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly includeTranslationMessages?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.name**: *co*  **access.type**: *eq, in*  **access.description**: *co, eq, in*
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, access.type**  By default the recommendations are sorted by highest confidence first.
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendations
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getAccessRequestRecommendationsIgnoredItems operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItemsRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItemsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItems
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItems
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItems
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getAccessRequestRecommendationsRequestedItems operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItemsRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItemsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItems
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItems
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItems
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getAccessRequestRecommendationsViewedItems operation in IAIAccessRequestRecommendationsBetaApi.
 * @export
 * @interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItemsRequest
 */
export interface IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItemsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItems
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **access.id**: *eq, in*  **access.type**: *eq, in*  **identityId**: *eq, in*
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItems
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.id, access.type, identityId, timestamp**
     * @type {string}
     * @memberof IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItems
     */
    readonly sorters?: string;
}
/**
 * IAIAccessRequestRecommendationsBetaApi - object-oriented interface
 * @export
 * @class IAIAccessRequestRecommendationsBetaApi
 * @extends {BaseAPI}
 */
export declare class IAIAccessRequestRecommendationsBetaApi extends BaseAPI {
    /**
     * This API ignores a recommended access request item. Once an item is ignored, it will be marked as ignored=true if it is still a recommended item. The consumer can decide to hide ignored recommendations.
     * @summary Notification of Ignored Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsIgnoredItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    addAccessRequestRecommendationsIgnoredItem(requestParameters: IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsIgnoredItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta, any>>;
    /**
     * This API consumes a notification that a recommended access request item was requested. This API does not actually make the request, it is just a notification. This will help provide feedback in order to improve our recommendations.
     * @summary Notification of Requested Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsRequestedItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    addAccessRequestRecommendationsRequestedItem(requestParameters: IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsRequestedItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta, any>>;
    /**
     * This API consumes a notification that a recommended access request item was viewed. Future recommendations with this item will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    addAccessRequestRecommendationsViewedItem(requestParameters: IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta, any>>;
    /**
     * This API consumes a notification that a set of recommended access request item were viewed. Future recommendations with these items will be marked with viewed=true. This can be useful for the consumer to determine if there are any new/unviewed recommendations.
     * @summary Notification of Viewed Access Request Recommendations in Bulk
     * @param {IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    addAccessRequestRecommendationsViewedItems(requestParameters: IAIAccessRequestRecommendationsBetaApiAddAccessRequestRecommendationsViewedItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta[], any>>;
    /**
     * This API returns the access request recommendations for the specified identity. The default identity is *me* which indicates the current user.
     * @summary Identity Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    getAccessRequestRecommendations(requestParameters?: IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationItemDetailBeta[], any>>;
    /**
     * This API returns the list of ignored access request recommendations.
     * @summary List of Ignored Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    getAccessRequestRecommendationsIgnoredItems(requestParameters?: IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsIgnoredItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta[], any>>;
    /**
     * This API returns a list of requested access request recommendations.
     * @summary List of Requested Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    getAccessRequestRecommendationsRequestedItems(requestParameters?: IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsRequestedItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta[], any>>;
    /**
     * This API returns the list of viewed access request recommendations.
     * @summary List of Viewed Access Request Recommendations
     * @param {IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIAccessRequestRecommendationsBetaApi
     */
    getAccessRequestRecommendationsViewedItems(requestParameters?: IAIAccessRequestRecommendationsBetaApiGetAccessRequestRecommendationsViewedItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessRequestRecommendationActionItemResponseDtoBeta[], any>>;
}
/**
 * IAICommonAccessBetaApi - axios parameter creator
 * @export
 */
export declare const IAICommonAccessBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
     * @summary Create common access items
     * @param {CommonAccessItemRequestBeta} commonAccessItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCommonAccess: (commonAccessItemRequestBeta: CommonAccessItemRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
     * @summary Get a paginated list of common access
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCommonAccess: (offset?: number, limit?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
     * @summary Bulk update common access status
     * @param {Array<CommonAccessIDStatusBeta>} commonAccessIDStatusBeta Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCommonAccessStatusInBulk: (commonAccessIDStatusBeta: Array<CommonAccessIDStatusBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAICommonAccessBetaApi - functional programming interface
 * @export
 */
export declare const IAICommonAccessBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
     * @summary Create common access items
     * @param {CommonAccessItemRequestBeta} commonAccessItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCommonAccess(commonAccessItemRequestBeta: CommonAccessItemRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommonAccessItemResponseBeta>>;
    /**
     * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
     * @summary Get a paginated list of common access
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCommonAccess(offset?: number, limit?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommonAccessResponseBeta>>>;
    /**
     * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
     * @summary Bulk update common access status
     * @param {Array<CommonAccessIDStatusBeta>} commonAccessIDStatusBeta Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCommonAccessStatusInBulk(commonAccessIDStatusBeta: Array<CommonAccessIDStatusBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * IAICommonAccessBetaApi - factory interface
 * @export
 */
export declare const IAICommonAccessBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
     * @summary Create common access items
     * @param {CommonAccessItemRequestBeta} commonAccessItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createCommonAccess(commonAccessItemRequestBeta: CommonAccessItemRequestBeta, axiosOptions?: any): AxiosPromise<CommonAccessItemResponseBeta>;
    /**
     * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
     * @summary Get a paginated list of common access
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCommonAccess(offset?: number, limit?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<CommonAccessResponseBeta>>;
    /**
     * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
     * @summary Bulk update common access status
     * @param {Array<CommonAccessIDStatusBeta>} commonAccessIDStatusBeta Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateCommonAccessStatusInBulk(commonAccessIDStatusBeta: Array<CommonAccessIDStatusBeta>, axiosOptions?: any): AxiosPromise<object>;
};
/**
 * Request parameters for createCommonAccess operation in IAICommonAccessBetaApi.
 * @export
 * @interface IAICommonAccessBetaApiCreateCommonAccessRequest
 */
export interface IAICommonAccessBetaApiCreateCommonAccessRequest {
    /**
     *
     * @type {CommonAccessItemRequestBeta}
     * @memberof IAICommonAccessBetaApiCreateCommonAccess
     */
    readonly commonAccessItemRequestBeta: CommonAccessItemRequestBeta;
}
/**
 * Request parameters for getCommonAccess operation in IAICommonAccessBetaApi.
 * @export
 * @interface IAICommonAccessBetaApiGetCommonAccessRequest
 */
export interface IAICommonAccessBetaApiGetCommonAccessRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAICommonAccessBetaApiGetCommonAccess
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAICommonAccessBetaApiGetCommonAccess
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAICommonAccessBetaApiGetCommonAccess
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **status**: *eq, sw*  **reviewedByUser** *eq*  **access.id**: *eq, sw*  **access.type**: *eq*  **access.name**: *sw, eq*  **access.description**: *sw, eq*
     * @type {string}
     * @memberof IAICommonAccessBetaApiGetCommonAccess
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **access.name, status**  By default the common access items are sorted by name, ascending.
     * @type {string}
     * @memberof IAICommonAccessBetaApiGetCommonAccess
     */
    readonly sorters?: string;
}
/**
 * Request parameters for updateCommonAccessStatusInBulk operation in IAICommonAccessBetaApi.
 * @export
 * @interface IAICommonAccessBetaApiUpdateCommonAccessStatusInBulkRequest
 */
export interface IAICommonAccessBetaApiUpdateCommonAccessStatusInBulkRequest {
    /**
     * Confirm or deny in bulk the common access ids that are (or aren\&#39;t) common access
     * @type {Array<CommonAccessIDStatusBeta>}
     * @memberof IAICommonAccessBetaApiUpdateCommonAccessStatusInBulk
     */
    readonly commonAccessIDStatusBeta: Array<CommonAccessIDStatusBeta>;
}
/**
 * IAICommonAccessBetaApi - object-oriented interface
 * @export
 * @class IAICommonAccessBetaApi
 * @extends {BaseAPI}
 */
export declare class IAICommonAccessBetaApi extends BaseAPI {
    /**
     * This API is used to add roles/access profiles to the list of common access for a customer. Requires authorization scope of iai:access-modeling:create
     * @summary Create common access items
     * @param {IAICommonAccessBetaApiCreateCommonAccessRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAICommonAccessBetaApi
     */
    createCommonAccess(requestParameters: IAICommonAccessBetaApiCreateCommonAccessRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CommonAccessItemResponseBeta, any>>;
    /**
     * This endpoint returns the current common access for a customer. The returned items can be filtered and sorted. Requires authorization scope of iai:access-modeling:read
     * @summary Get a paginated list of common access
     * @param {IAICommonAccessBetaApiGetCommonAccessRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAICommonAccessBetaApi
     */
    getCommonAccess(requestParameters?: IAICommonAccessBetaApiGetCommonAccessRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CommonAccessResponseBeta[], any>>;
    /**
     * This submits an update request to the common access application. At this time there are no parameters. Requires authorization scope of iai:access-modeling:update
     * @summary Bulk update common access status
     * @param {IAICommonAccessBetaApiUpdateCommonAccessStatusInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAICommonAccessBetaApi
     */
    updateCommonAccessStatusInBulk(requestParameters: IAICommonAccessBetaApiUpdateCommonAccessStatusInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * IAIMessageCatalogsBetaApi - axios parameter creator
 * @export
 */
export declare const IAIMessageCatalogsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
     * @summary Get Message catalogs
     * @param {'recommender' | 'access-request-recommender'} catalogId The ID of the message catalog.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMessageCatalogs: (catalogId: 'recommender' | 'access-request-recommender', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAIMessageCatalogsBetaApi - functional programming interface
 * @export
 */
export declare const IAIMessageCatalogsBetaApiFp: (configuration?: Configuration) => {
    /**
     * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
     * @summary Get Message catalogs
     * @param {'recommender' | 'access-request-recommender'} catalogId The ID of the message catalog.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMessageCatalogs(catalogId: 'recommender' | 'access-request-recommender', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageCatalogDtoBeta>>>;
};
/**
 * IAIMessageCatalogsBetaApi - factory interface
 * @export
 */
export declare const IAIMessageCatalogsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
     * @summary Get Message catalogs
     * @param {'recommender' | 'access-request-recommender'} catalogId The ID of the message catalog.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMessageCatalogs(catalogId: 'recommender' | 'access-request-recommender', axiosOptions?: any): AxiosPromise<Array<MessageCatalogDtoBeta>>;
};
/**
 * Request parameters for getMessageCatalogs operation in IAIMessageCatalogsBetaApi.
 * @export
 * @interface IAIMessageCatalogsBetaApiGetMessageCatalogsRequest
 */
export interface IAIMessageCatalogsBetaApiGetMessageCatalogsRequest {
    /**
     * The ID of the message catalog.
     * @type {'recommender' | 'access-request-recommender'}
     * @memberof IAIMessageCatalogsBetaApiGetMessageCatalogs
     */
    readonly catalogId: 'recommender' | 'access-request-recommender';
}
/**
 * IAIMessageCatalogsBetaApi - object-oriented interface
 * @export
 * @class IAIMessageCatalogsBetaApi
 * @extends {BaseAPI}
 */
export declare class IAIMessageCatalogsBetaApi extends BaseAPI {
    /**
     * The getMessageCatalogs API returns message catalog based on the language headers in the requested object.
     * @summary Get Message catalogs
     * @param {IAIMessageCatalogsBetaApiGetMessageCatalogsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIMessageCatalogsBetaApi
     */
    getMessageCatalogs(requestParameters: IAIMessageCatalogsBetaApiGetMessageCatalogsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MessageCatalogDtoBeta[], any>>;
}
/**
 * IAIOutliersBetaApi - axios parameter creator
 * @export
 */
export declare const IAIOutliersBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Export
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportOutliersZip: (type?: 'LOW_SIMILARITY' | 'STRUCTURAL', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Summary
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOutlierSnapshots: (limit?: number, offset?: number, type?: 'LOW_SIMILARITY' | 'STRUCTURAL', filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Get Identity Outliers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOutliers: (limit?: number, offset?: number, count?: boolean, type?: 'LOW_SIMILARITY' | 'STRUCTURAL', filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Latest Summary
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLatestIdentityOutlierSnapshots: (type?: 'LOW_SIMILARITY' | 'STRUCTURAL', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier contibuting feature summary
     * @param {string} outlierFeatureId Contributing feature id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOutlierContributingFeatureSummary: (outlierFeatureId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier\'s contibuting features
     * @param {string} outlierId The outlier id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [includeTranslationMessages] Whether or not to include translation messages object in returned response
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPeerGroupOutliersContributingFeatures: (outlierId: string, limit?: number, offset?: number, count?: boolean, includeTranslationMessages?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Ignore
     * @param {Array<string>} requestBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    ignoreIdentityOutliers: (requestBody: Array<string>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Gets a list of access items associated with each identity outlier contributing feature
     * @param {string} outlierId The outlier id
     * @param {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'} contributingFeatureName The name of contributing feature
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [accessType] The type of access item for the identity outlier contributing feature. If not provided, it returns all
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOutliersContributingFeatureAccessItems: (outlierId: string, contributingFeatureName: 'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score', limit?: number, offset?: number, count?: boolean, accessType?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Unignore
     * @param {Array<string>} requestBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unIgnoreIdentityOutliers: (requestBody: Array<string>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAIOutliersBetaApi - functional programming interface
 * @export
 */
export declare const IAIOutliersBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Export
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportOutliersZip(type?: 'LOW_SIMILARITY' | 'STRUCTURAL', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Summary
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOutlierSnapshots(limit?: number, offset?: number, type?: 'LOW_SIMILARITY' | 'STRUCTURAL', filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutlierSummaryBeta>>>;
    /**
     * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Get Identity Outliers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOutliers(limit?: number, offset?: number, count?: boolean, type?: 'LOW_SIMILARITY' | 'STRUCTURAL', filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutlierBeta>>>;
    /**
     * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Latest Summary
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLatestIdentityOutlierSnapshots(type?: 'LOW_SIMILARITY' | 'STRUCTURAL', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LatestOutlierSummaryBeta>>>;
    /**
     * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier contibuting feature summary
     * @param {string} outlierFeatureId Contributing feature id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOutlierContributingFeatureSummary(outlierFeatureId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutlierFeatureSummaryBeta>>;
    /**
     * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier\'s contibuting features
     * @param {string} outlierId The outlier id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [includeTranslationMessages] Whether or not to include translation messages object in returned response
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPeerGroupOutliersContributingFeatures(outlierId: string, limit?: number, offset?: number, count?: boolean, includeTranslationMessages?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutlierContributingFeatureBeta>>>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Ignore
     * @param {Array<string>} requestBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    ignoreIdentityOutliers(requestBody: Array<string>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Gets a list of access items associated with each identity outlier contributing feature
     * @param {string} outlierId The outlier id
     * @param {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'} contributingFeatureName The name of contributing feature
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [accessType] The type of access item for the identity outlier contributing feature. If not provided, it returns all
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOutliersContributingFeatureAccessItems(outlierId: string, contributingFeatureName: 'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score', limit?: number, offset?: number, count?: boolean, accessType?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OutliersContributingFeatureAccessItemsBeta>>>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Unignore
     * @param {Array<string>} requestBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unIgnoreIdentityOutliers(requestBody: Array<string>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * IAIOutliersBetaApi - factory interface
 * @export
 */
export declare const IAIOutliersBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Export
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportOutliersZip(type?: 'LOW_SIMILARITY' | 'STRUCTURAL', axiosOptions?: any): AxiosPromise<any>;
    /**
     * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Summary
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOutlierSnapshots(limit?: number, offset?: number, type?: 'LOW_SIMILARITY' | 'STRUCTURAL', filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<OutlierSummaryBeta>>;
    /**
     * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Get Identity Outliers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOutliers(limit?: number, offset?: number, count?: boolean, type?: 'LOW_SIMILARITY' | 'STRUCTURAL', filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<OutlierBeta>>;
    /**
     * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Latest Summary
     * @param {'LOW_SIMILARITY' | 'STRUCTURAL'} [type] Type of the identity outliers snapshot to filter on
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLatestIdentityOutlierSnapshots(type?: 'LOW_SIMILARITY' | 'STRUCTURAL', axiosOptions?: any): AxiosPromise<Array<LatestOutlierSummaryBeta>>;
    /**
     * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier contibuting feature summary
     * @param {string} outlierFeatureId Contributing feature id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOutlierContributingFeatureSummary(outlierFeatureId: string, axiosOptions?: any): AxiosPromise<OutlierFeatureSummaryBeta>;
    /**
     * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier\'s contibuting features
     * @param {string} outlierId The outlier id
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [includeTranslationMessages] Whether or not to include translation messages object in returned response
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPeerGroupOutliersContributingFeatures(outlierId: string, limit?: number, offset?: number, count?: boolean, includeTranslationMessages?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<OutlierContributingFeatureBeta>>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Ignore
     * @param {Array<string>} requestBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    ignoreIdentityOutliers(requestBody: Array<string>, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Gets a list of access items associated with each identity outlier contributing feature
     * @param {string} outlierId The outlier id
     * @param {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'} contributingFeatureName The name of contributing feature
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [accessType] The type of access item for the identity outlier contributing feature. If not provided, it returns all
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOutliersContributingFeatureAccessItems(outlierId: string, contributingFeatureName: 'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score', limit?: number, offset?: number, count?: boolean, accessType?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<OutliersContributingFeatureAccessItemsBeta>>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Unignore
     * @param {Array<string>} requestBody
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    unIgnoreIdentityOutliers(requestBody: Array<string>, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for exportOutliersZip operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiExportOutliersZipRequest
 */
export interface IAIOutliersBetaApiExportOutliersZipRequest {
    /**
     * Type of the identity outliers snapshot to filter on
     * @type {'LOW_SIMILARITY' | 'STRUCTURAL'}
     * @memberof IAIOutliersBetaApiExportOutliersZip
     */
    readonly type?: 'LOW_SIMILARITY' | 'STRUCTURAL';
}
/**
 * Request parameters for getIdentityOutlierSnapshots operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiGetIdentityOutlierSnapshotsRequest
 */
export interface IAIOutliersBetaApiGetIdentityOutlierSnapshotsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiGetIdentityOutlierSnapshots
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiGetIdentityOutlierSnapshots
     */
    readonly offset?: number;
    /**
     * Type of the identity outliers snapshot to filter on
     * @type {'LOW_SIMILARITY' | 'STRUCTURAL'}
     * @memberof IAIOutliersBetaApiGetIdentityOutlierSnapshots
     */
    readonly type?: 'LOW_SIMILARITY' | 'STRUCTURAL';
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **snapshotDate**: *ge, le*
     * @type {string}
     * @memberof IAIOutliersBetaApiGetIdentityOutlierSnapshots
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **snapshotDate**
     * @type {string}
     * @memberof IAIOutliersBetaApiGetIdentityOutlierSnapshots
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getIdentityOutliers operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiGetIdentityOutliersRequest
 */
export interface IAIOutliersBetaApiGetIdentityOutliersRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiGetIdentityOutliers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiGetIdentityOutliers
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIOutliersBetaApiGetIdentityOutliers
     */
    readonly count?: boolean;
    /**
     * Type of the identity outliers snapshot to filter on
     * @type {'LOW_SIMILARITY' | 'STRUCTURAL'}
     * @memberof IAIOutliersBetaApiGetIdentityOutliers
     */
    readonly type?: 'LOW_SIMILARITY' | 'STRUCTURAL';
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **attributes**: *eq, sw, co, in*  **firstDetectionDate**: *ge, le*  **certStatus**: *eq*  **ignored**: *eq*  **score**: *ge, le*
     * @type {string}
     * @memberof IAIOutliersBetaApiGetIdentityOutliers
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **firstDetectionDate, attributes, score**
     * @type {string}
     * @memberof IAIOutliersBetaApiGetIdentityOutliers
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getLatestIdentityOutlierSnapshots operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiGetLatestIdentityOutlierSnapshotsRequest
 */
export interface IAIOutliersBetaApiGetLatestIdentityOutlierSnapshotsRequest {
    /**
     * Type of the identity outliers snapshot to filter on
     * @type {'LOW_SIMILARITY' | 'STRUCTURAL'}
     * @memberof IAIOutliersBetaApiGetLatestIdentityOutlierSnapshots
     */
    readonly type?: 'LOW_SIMILARITY' | 'STRUCTURAL';
}
/**
 * Request parameters for getOutlierContributingFeatureSummary operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiGetOutlierContributingFeatureSummaryRequest
 */
export interface IAIOutliersBetaApiGetOutlierContributingFeatureSummaryRequest {
    /**
     * Contributing feature id
     * @type {string}
     * @memberof IAIOutliersBetaApiGetOutlierContributingFeatureSummary
     */
    readonly outlierFeatureId: string;
}
/**
 * Request parameters for getPeerGroupOutliersContributingFeatures operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiGetPeerGroupOutliersContributingFeaturesRequest
 */
export interface IAIOutliersBetaApiGetPeerGroupOutliersContributingFeaturesRequest {
    /**
     * The outlier id
     * @type {string}
     * @memberof IAIOutliersBetaApiGetPeerGroupOutliersContributingFeatures
     */
    readonly outlierId: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiGetPeerGroupOutliersContributingFeatures
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiGetPeerGroupOutliersContributingFeatures
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIOutliersBetaApiGetPeerGroupOutliersContributingFeatures
     */
    readonly count?: boolean;
    /**
     * Whether or not to include translation messages object in returned response
     * @type {string}
     * @memberof IAIOutliersBetaApiGetPeerGroupOutliersContributingFeatures
     */
    readonly includeTranslationMessages?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **importance**
     * @type {string}
     * @memberof IAIOutliersBetaApiGetPeerGroupOutliersContributingFeatures
     */
    readonly sorters?: string;
}
/**
 * Request parameters for ignoreIdentityOutliers operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiIgnoreIdentityOutliersRequest
 */
export interface IAIOutliersBetaApiIgnoreIdentityOutliersRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof IAIOutliersBetaApiIgnoreIdentityOutliers
     */
    readonly requestBody: Array<string>;
}
/**
 * Request parameters for listOutliersContributingFeatureAccessItems operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiListOutliersContributingFeatureAccessItemsRequest
 */
export interface IAIOutliersBetaApiListOutliersContributingFeatureAccessItemsRequest {
    /**
     * The outlier id
     * @type {string}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly outlierId: string;
    /**
     * The name of contributing feature
     * @type {'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score'}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly contributingFeatureName: 'radical_entitlement_count' | 'entitlement_count' | 'max_jaccard_similarity' | 'mean_max_bundle_concurrency' | 'single_entitlement_bundle_count' | 'peerless_score';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly count?: boolean;
    /**
     * The type of access item for the identity outlier contributing feature. If not provided, it returns all
     * @type {string}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly accessType?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **displayName**
     * @type {string}
     * @memberof IAIOutliersBetaApiListOutliersContributingFeatureAccessItems
     */
    readonly sorters?: string;
}
/**
 * Request parameters for unIgnoreIdentityOutliers operation in IAIOutliersBetaApi.
 * @export
 * @interface IAIOutliersBetaApiUnIgnoreIdentityOutliersRequest
 */
export interface IAIOutliersBetaApiUnIgnoreIdentityOutliersRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof IAIOutliersBetaApiUnIgnoreIdentityOutliers
     */
    readonly requestBody: Array<string>;
}
/**
 * IAIOutliersBetaApi - object-oriented interface
 * @export
 * @class IAIOutliersBetaApi
 * @extends {BaseAPI}
 */
export declare class IAIOutliersBetaApi extends BaseAPI {
    /**
     * This API exports a list of ignored outliers to a CSV as well as list of non-ignored outliers to a CSV. These two CSVs will be zipped and exported Columns will include: identityID, type, firstDetectionDate, latestDetectionDate, ignored, & attributes (defined set of identity attributes) Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Export
     * @param {IAIOutliersBetaApiExportOutliersZipRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    exportOutliersZip(requestParameters?: IAIOutliersBetaApiExportOutliersZipRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This API receives a summary containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Summary
     * @param {IAIOutliersBetaApiGetIdentityOutlierSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    getIdentityOutlierSnapshots(requestParameters?: IAIOutliersBetaApiGetIdentityOutlierSnapshotsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OutlierSummaryBeta[], any>>;
    /**
     * This API receives a list of outliers, containing data such as: identityId, outlier type, detection dates, identity attributes, if identity is ignore, and certification information Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Get Identity Outliers
     * @param {IAIOutliersBetaApiGetIdentityOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    getIdentityOutliers(requestParameters?: IAIOutliersBetaApiGetIdentityOutliersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OutlierBeta[], any>>;
    /**
     * This API returns a most recent snapshot of each outlier type, each containing: the number of identities that customer has, the number of outliers, and the type of outlier Requires authorization scope of \'iai:outliers-management:read\'
     * @summary IAI Identity Outliers Latest Summary
     * @param {IAIOutliersBetaApiGetLatestIdentityOutlierSnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    getLatestIdentityOutlierSnapshots(requestParameters?: IAIOutliersBetaApiGetLatestIdentityOutlierSnapshotsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LatestOutlierSummaryBeta[], any>>;
    /**
     * This API returns a summary of a contributing feature for an identity outlier. The object contains: contributing feature name (translated text or message key), identity outlier display name, feature values, feature definition and explanation (translated text or message key), peer display name and identityId, access item reference, translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier contibuting feature summary
     * @param {IAIOutliersBetaApiGetOutlierContributingFeatureSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    getOutlierContributingFeatureSummary(requestParameters: IAIOutliersBetaApiGetOutlierContributingFeatureSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OutlierFeatureSummaryBeta, any>>;
    /**
     * This API returns a list of contributing feature objects for a single outlier. The object contains: feature name, feature value type, value, importance, display name (translated text or message key), description (translated text or message key), translation messages object Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Get identity outlier\'s contibuting features
     * @param {IAIOutliersBetaApiGetPeerGroupOutliersContributingFeaturesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    getPeerGroupOutliersContributingFeatures(requestParameters: IAIOutliersBetaApiGetPeerGroupOutliersContributingFeaturesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OutlierContributingFeatureBeta[], any>>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Ignore
     * @param {IAIOutliersBetaApiIgnoreIdentityOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    ignoreIdentityOutliers(requestParameters: IAIOutliersBetaApiIgnoreIdentityOutliersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns a list of the enriched access items associated with each feature filtered by the access item type  The object contains: accessItemId, display name (translated text or message key), description (translated text or message key), accessType, sourceName, extremelyRare Requires authorization scope of \'iai:outliers-management:read\'
     * @summary Gets a list of access items associated with each identity outlier contributing feature
     * @param {IAIOutliersBetaApiListOutliersContributingFeatureAccessItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    listOutliersContributingFeatureAccessItems(requestParameters: IAIOutliersBetaApiListOutliersContributingFeatureAccessItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OutliersContributingFeatureAccessItemsBeta[], any>>;
    /**
     * This API receives a list of IdentityIDs in the request, changes the outliers to be un-ignored--returning a 204 if successful. Requires authorization scope of \'iai:outliers-management:update\'
     * @summary IAI Identity Outliers Unignore
     * @param {IAIOutliersBetaApiUnIgnoreIdentityOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIOutliersBetaApi
     */
    unIgnoreIdentityOutliers(requestParameters: IAIOutliersBetaApiUnIgnoreIdentityOutliersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * IAIPeerGroupStrategiesBetaApi - axios parameter creator
 * @export
 */
export declare const IAIPeerGroupStrategiesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
     * @summary Identity Outliers List
     * @param {string} strategy The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPeerGroupOutliers: (strategy: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAIPeerGroupStrategiesBetaApi - functional programming interface
 * @export
 */
export declare const IAIPeerGroupStrategiesBetaApiFp: (configuration?: Configuration) => {
    /**
     * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
     * @summary Identity Outliers List
     * @param {string} strategy The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPeerGroupOutliers(strategy: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PeerGroupMemberBeta>>>;
};
/**
 * IAIPeerGroupStrategiesBetaApi - factory interface
 * @export
 */
export declare const IAIPeerGroupStrategiesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
     * @summary Identity Outliers List
     * @param {string} strategy The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPeerGroupOutliers(strategy: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PeerGroupMemberBeta>>;
};
/**
 * Request parameters for getPeerGroupOutliers operation in IAIPeerGroupStrategiesBetaApi.
 * @export
 * @interface IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliersRequest
 */
export interface IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliersRequest {
    /**
     * The strategy used to create peer groups. Currently, \&#39;entitlement\&#39; is supported.
     * @type {string}
     * @memberof IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliers
     */
    readonly strategy: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliers
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliers
     */
    readonly count?: boolean;
}
/**
 * IAIPeerGroupStrategiesBetaApi - object-oriented interface
 * @export
 * @class IAIPeerGroupStrategiesBetaApi
 * @extends {BaseAPI}
 */
export declare class IAIPeerGroupStrategiesBetaApi extends BaseAPI {
    /**
     * -- Deprecated : See \'IAI Outliers\' This API will be used by Identity Governance systems to identify identities that are not included in an organization\'s peer groups. By default, 250 identities are returned. You can specify between 1 and 1000 number of identities that can be returned.
     * @summary Identity Outliers List
     * @param {IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof IAIPeerGroupStrategiesBetaApi
     */
    getPeerGroupOutliers(requestParameters: IAIPeerGroupStrategiesBetaApiGetPeerGroupOutliersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PeerGroupMemberBeta[], any>>;
}
/**
 * IAIRecommendationsBetaApi - axios parameter creator
 * @export
 */
export declare const IAIRecommendationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
     * @summary Returns a Recommendation Based on Object
     * @param {RecommendationRequestDtoBeta} recommendationRequestDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendations: (recommendationRequestDtoBeta: RecommendationRequestDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves configuration attributes used by certification recommendations.
     * @summary Get certification recommendation config values
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendationsConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates configuration attributes used by certification recommendations.
     * @summary Update certification recommendation config values
     * @param {RecommendationConfigDtoBeta} recommendationConfigDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateRecommendationsConfig: (recommendationConfigDtoBeta: RecommendationConfigDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAIRecommendationsBetaApi - functional programming interface
 * @export
 */
export declare const IAIRecommendationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
     * @summary Returns a Recommendation Based on Object
     * @param {RecommendationRequestDtoBeta} recommendationRequestDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendations(recommendationRequestDtoBeta: RecommendationRequestDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationResponseDtoBeta>>;
    /**
     * Retrieves configuration attributes used by certification recommendations.
     * @summary Get certification recommendation config values
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendationsConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationConfigDtoBeta>>;
    /**
     * Updates configuration attributes used by certification recommendations.
     * @summary Update certification recommendation config values
     * @param {RecommendationConfigDtoBeta} recommendationConfigDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateRecommendationsConfig(recommendationConfigDtoBeta: RecommendationConfigDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationConfigDtoBeta>>;
};
/**
 * IAIRecommendationsBetaApi - factory interface
 * @export
 */
export declare const IAIRecommendationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
     * @summary Returns a Recommendation Based on Object
     * @param {RecommendationRequestDtoBeta} recommendationRequestDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendations(recommendationRequestDtoBeta: RecommendationRequestDtoBeta, axiosOptions?: any): AxiosPromise<RecommendationResponseDtoBeta>;
    /**
     * Retrieves configuration attributes used by certification recommendations.
     * @summary Get certification recommendation config values
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRecommendationsConfig(axiosOptions?: any): AxiosPromise<RecommendationConfigDtoBeta>;
    /**
     * Updates configuration attributes used by certification recommendations.
     * @summary Update certification recommendation config values
     * @param {RecommendationConfigDtoBeta} recommendationConfigDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateRecommendationsConfig(recommendationConfigDtoBeta: RecommendationConfigDtoBeta, axiosOptions?: any): AxiosPromise<RecommendationConfigDtoBeta>;
};
/**
 * Request parameters for getRecommendations operation in IAIRecommendationsBetaApi.
 * @export
 * @interface IAIRecommendationsBetaApiGetRecommendationsRequest
 */
export interface IAIRecommendationsBetaApiGetRecommendationsRequest {
    /**
     *
     * @type {RecommendationRequestDtoBeta}
     * @memberof IAIRecommendationsBetaApiGetRecommendations
     */
    readonly recommendationRequestDtoBeta: RecommendationRequestDtoBeta;
}
/**
 * Request parameters for updateRecommendationsConfig operation in IAIRecommendationsBetaApi.
 * @export
 * @interface IAIRecommendationsBetaApiUpdateRecommendationsConfigRequest
 */
export interface IAIRecommendationsBetaApiUpdateRecommendationsConfigRequest {
    /**
     *
     * @type {RecommendationConfigDtoBeta}
     * @memberof IAIRecommendationsBetaApiUpdateRecommendationsConfig
     */
    readonly recommendationConfigDtoBeta: RecommendationConfigDtoBeta;
}
/**
 * IAIRecommendationsBetaApi - object-oriented interface
 * @export
 * @class IAIRecommendationsBetaApi
 * @extends {BaseAPI}
 */
export declare class IAIRecommendationsBetaApi extends BaseAPI {
    /**
     * The getRecommendations API returns recommendations based on the requested object. The recommendations are invoked by IdentityIQ and IdentityNow plug-ins that retrieve recommendations based on the performed calculations.
     * @summary Returns a Recommendation Based on Object
     * @param {IAIRecommendationsBetaApiGetRecommendationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRecommendationsBetaApi
     */
    getRecommendations(requestParameters: IAIRecommendationsBetaApiGetRecommendationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecommendationResponseDtoBeta, any>>;
    /**
     * Retrieves configuration attributes used by certification recommendations.
     * @summary Get certification recommendation config values
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRecommendationsBetaApi
     */
    getRecommendationsConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecommendationConfigDtoBeta, any>>;
    /**
     * Updates configuration attributes used by certification recommendations.
     * @summary Update certification recommendation config values
     * @param {IAIRecommendationsBetaApiUpdateRecommendationsConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRecommendationsBetaApi
     */
    updateRecommendationsConfig(requestParameters: IAIRecommendationsBetaApiUpdateRecommendationsConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecommendationConfigDtoBeta, any>>;
}
/**
 * IAIRoleMiningBetaApi - axios parameter creator
 * @export
 */
export declare const IAIRoleMiningBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method starts a job to provision a potential role
     * @summary Create request to provision a potential role into an actual role.
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {number} [minEntitlementPopularity] Minimum popularity required for an entitlement to be included in the provisioned role.
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included in the provisioned role.
     * @param {RoleMiningPotentialRoleProvisionRequestBeta} [roleMiningPotentialRoleProvisionRequestBeta] Required information to create a new role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPotentialRoleProvisionRequest: (sessionId: string, potentialRoleId: string, minEntitlementPopularity?: number, includeCommonAccess?: boolean, roleMiningPotentialRoleProvisionRequestBeta?: RoleMiningPotentialRoleProvisionRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This submits a create role mining session request to the role mining application.
     * @summary Create a role mining session
     * @param {RoleMiningSessionDtoBeta} roleMiningSessionDtoBeta Role mining session parameters
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRoleMiningSessions: (roleMiningSessionDtoBeta: RoleMiningSessionDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint downloads a completed export of information for a potential role in a role mining session.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} exportId The id of a previously run export job for this potential role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    downloadRoleMiningPotentialRoleZip: (sessionId: string, potentialRoleId: string, exportId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRole: (sessionId: string, potentialRoleId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
     * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {RoleMiningPotentialRoleExportRequestBeta} [roleMiningPotentialRoleExportRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRoleAsync: (sessionId: string, potentialRoleId: string, roleMiningPotentialRoleExportRequestBeta?: RoleMiningPotentialRoleExportRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint retrieves information about the current status of a potential role export.
     * @summary Retrieve status of a potential role export job
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} exportId The id of a previously run export job for this potential role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRoleStatus: (sessionId: string, potentialRoleId: string, exportId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all potential role summaries that match the query parameters
     * @summary Retrieves all potential role summaries
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAllPotentialRoleSummaries: (sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns entitlement popularity distribution for a potential role in a role mining session.
     * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementDistributionPotentialRole: (sessionId: string, potentialRoleId: string, includeCommonAccess?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns entitlements for a potential role in a role mining session.
     * @summary Retrieves entitlements for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementsPotentialRole: (sessionId: string, potentialRoleId: string, includeCommonAccess?: boolean, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns excluded entitlements for a potential role in a role mining session.
     * @summary Retrieves excluded entitlements for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getExcludedEntitlementsPotentialRole: (sessionId: string, potentialRoleId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns identities for a potential role in a role mining session.
     * @summary Retrieves identities for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitiesPotentialRole: (sessionId: string, potentialRoleId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns a specific potential role for a role mining session.
     * @summary Retrieve potential role in session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRole: (sessionId: string, potentialRoleId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns the applications of a potential role for a role mining session.
     * @summary Retrieves the applications of a potential role for a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleApplications: (sessionId: string, potentialRoleId: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
     * @summary Retrieves potential role source usage
     * @param {string} potentialRoleId A potential role id
     * @param {string} sourceId A source id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleSourceIdentityUsage: (potentialRoleId: string, sourceId: string, sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns the potential role summaries for a role mining session.
     * @summary Retrieve session\'s potential role summaries
     * @param {string} sessionId The role mining session id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleSummaries: (sessionId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns a specific potential role.
     * @summary Retrieves a specific potential role
     * @param {string} potentialRoleId A potential role id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningPotentialRole: (potentialRoleId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The method retrieves a role mining session.
     * @summary Get a role mining session
     * @param {string} sessionId The role mining session id to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSession: (sessionId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns a role mining session status for a customer.
     * @summary Get role mining session status state
     * @param {string} sessionId The role mining session id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSessionStatus: (sessionId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns all role mining sessions that match the query parameters
     * @summary Retrieves all role mining sessions
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSessions: (filters?: string, sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns all saved potential roles (draft roles).
     * @summary Retrieves all saved potential roles
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSavedPotentialRoles: (sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role in session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId The potential role summary id
     * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPotentialRole: (sessionId: string, potentialRoleId: string, patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role
     * @param {string} potentialRoleId The potential role summary id
     * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleMiningPotentialRole: (potentialRoleId: string, patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
     * @summary Patch a role mining session
     * @param {string} sessionId The role mining session id to be patched
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleMiningSession: (sessionId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint adds or removes entitlements from an exclusion list for a potential role.
     * @summary Edit entitlements for a potential role to exclude some entitlements
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {RoleMiningPotentialRoleEditEntitlementsBeta} roleMiningPotentialRoleEditEntitlementsBeta Role mining session parameters
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateEntitlementsPotentialRole: (sessionId: string, potentialRoleId: string, roleMiningPotentialRoleEditEntitlementsBeta: RoleMiningPotentialRoleEditEntitlementsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IAIRoleMiningBetaApi - functional programming interface
 * @export
 */
export declare const IAIRoleMiningBetaApiFp: (configuration?: Configuration) => {
    /**
     * This method starts a job to provision a potential role
     * @summary Create request to provision a potential role into an actual role.
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {number} [minEntitlementPopularity] Minimum popularity required for an entitlement to be included in the provisioned role.
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included in the provisioned role.
     * @param {RoleMiningPotentialRoleProvisionRequestBeta} [roleMiningPotentialRoleProvisionRequestBeta] Required information to create a new role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPotentialRoleProvisionRequest(sessionId: string, potentialRoleId: string, minEntitlementPopularity?: number, includeCommonAccess?: boolean, roleMiningPotentialRoleProvisionRequestBeta?: RoleMiningPotentialRoleProvisionRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningPotentialRoleSummaryBeta>>;
    /**
     * This submits a create role mining session request to the role mining application.
     * @summary Create a role mining session
     * @param {RoleMiningSessionDtoBeta} roleMiningSessionDtoBeta Role mining session parameters
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRoleMiningSessions(roleMiningSessionDtoBeta: RoleMiningSessionDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningSessionResponseBeta>>;
    /**
     * This endpoint downloads a completed export of information for a potential role in a role mining session.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} exportId The id of a previously run export job for this potential role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    downloadRoleMiningPotentialRoleZip(sessionId: string, potentialRoleId: string, exportId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRole(sessionId: string, potentialRoleId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
     * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {RoleMiningPotentialRoleExportRequestBeta} [roleMiningPotentialRoleExportRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRoleAsync(sessionId: string, potentialRoleId: string, roleMiningPotentialRoleExportRequestBeta?: RoleMiningPotentialRoleExportRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningPotentialRoleExportResponseBeta>>;
    /**
     * This endpoint retrieves information about the current status of a potential role export.
     * @summary Retrieve status of a potential role export job
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} exportId The id of a previously run export job for this potential role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRoleStatus(sessionId: string, potentialRoleId: string, exportId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningPotentialRoleExportResponseBeta>>;
    /**
     * Returns all potential role summaries that match the query parameters
     * @summary Retrieves all potential role summaries
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAllPotentialRoleSummaries(sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningPotentialRoleSummaryBeta>>>;
    /**
     * This method returns entitlement popularity distribution for a potential role in a role mining session.
     * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementDistributionPotentialRole(sessionId: string, potentialRoleId: string, includeCommonAccess?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: number;
    }>>;
    /**
     * This method returns entitlements for a potential role in a role mining session.
     * @summary Retrieves entitlements for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementsPotentialRole(sessionId: string, potentialRoleId: string, includeCommonAccess?: boolean, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningEntitlementBeta>>>;
    /**
     * This method returns excluded entitlements for a potential role in a role mining session.
     * @summary Retrieves excluded entitlements for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getExcludedEntitlementsPotentialRole(sessionId: string, potentialRoleId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningEntitlementBeta>>>;
    /**
     * This method returns identities for a potential role in a role mining session.
     * @summary Retrieves identities for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitiesPotentialRole(sessionId: string, potentialRoleId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningIdentityBeta>>>;
    /**
     * This method returns a specific potential role for a role mining session.
     * @summary Retrieve potential role in session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRole(sessionId: string, potentialRoleId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningPotentialRoleBeta>>;
    /**
     * This method returns the applications of a potential role for a role mining session.
     * @summary Retrieves the applications of a potential role for a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleApplications(sessionId: string, potentialRoleId: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningPotentialRoleApplicationBeta>>>;
    /**
     * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
     * @summary Retrieves potential role source usage
     * @param {string} potentialRoleId A potential role id
     * @param {string} sourceId A source id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleSourceIdentityUsage(potentialRoleId: string, sourceId: string, sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningPotentialRoleSourceUsageBeta>>>;
    /**
     * This method returns the potential role summaries for a role mining session.
     * @summary Retrieve session\'s potential role summaries
     * @param {string} sessionId The role mining session id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleSummaries(sessionId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningPotentialRoleSummaryBeta>>>;
    /**
     * This method returns a specific potential role.
     * @summary Retrieves a specific potential role
     * @param {string} potentialRoleId A potential role id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningPotentialRole(potentialRoleId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningPotentialRoleBeta>>;
    /**
     * The method retrieves a role mining session.
     * @summary Get a role mining session
     * @param {string} sessionId The role mining session id to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSession(sessionId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningSessionResponseBeta>>;
    /**
     * This method returns a role mining session status for a customer.
     * @summary Get role mining session status state
     * @param {string} sessionId The role mining session id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSessionStatus(sessionId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningSessionStatusBeta>>;
    /**
     * Returns all role mining sessions that match the query parameters
     * @summary Retrieves all role mining sessions
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSessions(filters?: string, sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningSessionResponseBeta>>>;
    /**
     * This method returns all saved potential roles (draft roles).
     * @summary Retrieves all saved potential roles
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSavedPotentialRoles(sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleMiningSessionDraftRoleDtoBeta>>>;
    /**
     * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role in session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId The potential role summary id
     * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPotentialRole(sessionId: string, potentialRoleId: string, patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role
     * @param {string} potentialRoleId The potential role summary id
     * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleMiningPotentialRole(potentialRoleId: string, patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
     * @summary Patch a role mining session
     * @param {string} sessionId The role mining session id to be patched
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleMiningSession(sessionId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This endpoint adds or removes entitlements from an exclusion list for a potential role.
     * @summary Edit entitlements for a potential role to exclude some entitlements
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {RoleMiningPotentialRoleEditEntitlementsBeta} roleMiningPotentialRoleEditEntitlementsBeta Role mining session parameters
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateEntitlementsPotentialRole(sessionId: string, potentialRoleId: string, roleMiningPotentialRoleEditEntitlementsBeta: RoleMiningPotentialRoleEditEntitlementsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleMiningPotentialRoleBeta>>;
};
/**
 * IAIRoleMiningBetaApi - factory interface
 * @export
 */
export declare const IAIRoleMiningBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method starts a job to provision a potential role
     * @summary Create request to provision a potential role into an actual role.
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {number} [minEntitlementPopularity] Minimum popularity required for an entitlement to be included in the provisioned role.
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included in the provisioned role.
     * @param {RoleMiningPotentialRoleProvisionRequestBeta} [roleMiningPotentialRoleProvisionRequestBeta] Required information to create a new role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPotentialRoleProvisionRequest(sessionId: string, potentialRoleId: string, minEntitlementPopularity?: number, includeCommonAccess?: boolean, roleMiningPotentialRoleProvisionRequestBeta?: RoleMiningPotentialRoleProvisionRequestBeta, axiosOptions?: any): AxiosPromise<RoleMiningPotentialRoleSummaryBeta>;
    /**
     * This submits a create role mining session request to the role mining application.
     * @summary Create a role mining session
     * @param {RoleMiningSessionDtoBeta} roleMiningSessionDtoBeta Role mining session parameters
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRoleMiningSessions(roleMiningSessionDtoBeta: RoleMiningSessionDtoBeta, axiosOptions?: any): AxiosPromise<RoleMiningSessionResponseBeta>;
    /**
     * This endpoint downloads a completed export of information for a potential role in a role mining session.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} exportId The id of a previously run export job for this potential role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    downloadRoleMiningPotentialRoleZip(sessionId: string, potentialRoleId: string, exportId: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRole(sessionId: string, potentialRoleId: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
     * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {RoleMiningPotentialRoleExportRequestBeta} [roleMiningPotentialRoleExportRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRoleAsync(sessionId: string, potentialRoleId: string, roleMiningPotentialRoleExportRequestBeta?: RoleMiningPotentialRoleExportRequestBeta, axiosOptions?: any): AxiosPromise<RoleMiningPotentialRoleExportResponseBeta>;
    /**
     * This endpoint retrieves information about the current status of a potential role export.
     * @summary Retrieve status of a potential role export job
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} exportId The id of a previously run export job for this potential role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportRoleMiningPotentialRoleStatus(sessionId: string, potentialRoleId: string, exportId: string, axiosOptions?: any): AxiosPromise<RoleMiningPotentialRoleExportResponseBeta>;
    /**
     * Returns all potential role summaries that match the query parameters
     * @summary Retrieves all potential role summaries
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getAllPotentialRoleSummaries(sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningPotentialRoleSummaryBeta>>;
    /**
     * This method returns entitlement popularity distribution for a potential role in a role mining session.
     * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementDistributionPotentialRole(sessionId: string, potentialRoleId: string, includeCommonAccess?: boolean, axiosOptions?: any): AxiosPromise<{
        [key: string]: number;
    }>;
    /**
     * This method returns entitlements for a potential role in a role mining session.
     * @summary Retrieves entitlements for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {boolean} [includeCommonAccess] Boolean determining whether common access entitlements will be included or not
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementsPotentialRole(sessionId: string, potentialRoleId: string, includeCommonAccess?: boolean, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningEntitlementBeta>>;
    /**
     * This method returns excluded entitlements for a potential role in a role mining session.
     * @summary Retrieves excluded entitlements for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getExcludedEntitlementsPotentialRole(sessionId: string, potentialRoleId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningEntitlementBeta>>;
    /**
     * This method returns identities for a potential role in a role mining session.
     * @summary Retrieves identities for a potential role in a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitiesPotentialRole(sessionId: string, potentialRoleId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningIdentityBeta>>;
    /**
     * This method returns a specific potential role for a role mining session.
     * @summary Retrieve potential role in session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRole(sessionId: string, potentialRoleId: string, axiosOptions?: any): AxiosPromise<RoleMiningPotentialRoleBeta>;
    /**
     * This method returns the applications of a potential role for a role mining session.
     * @summary Retrieves the applications of a potential role for a role mining session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleApplications(sessionId: string, potentialRoleId: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningPotentialRoleApplicationBeta>>;
    /**
     * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
     * @summary Retrieves potential role source usage
     * @param {string} potentialRoleId A potential role id
     * @param {string} sourceId A source id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleSourceIdentityUsage(potentialRoleId: string, sourceId: string, sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningPotentialRoleSourceUsageBeta>>;
    /**
     * This method returns the potential role summaries for a role mining session.
     * @summary Retrieve session\'s potential role summaries
     * @param {string} sessionId The role mining session id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPotentialRoleSummaries(sessionId: string, sorters?: string, filters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningPotentialRoleSummaryBeta>>;
    /**
     * This method returns a specific potential role.
     * @summary Retrieves a specific potential role
     * @param {string} potentialRoleId A potential role id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningPotentialRole(potentialRoleId: string, axiosOptions?: any): AxiosPromise<RoleMiningPotentialRoleBeta>;
    /**
     * The method retrieves a role mining session.
     * @summary Get a role mining session
     * @param {string} sessionId The role mining session id to be retrieved.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSession(sessionId: string, axiosOptions?: any): AxiosPromise<RoleMiningSessionResponseBeta>;
    /**
     * This method returns a role mining session status for a customer.
     * @summary Get role mining session status state
     * @param {string} sessionId The role mining session id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSessionStatus(sessionId: string, axiosOptions?: any): AxiosPromise<RoleMiningSessionStatusBeta>;
    /**
     * Returns all role mining sessions that match the query parameters
     * @summary Retrieves all role mining sessions
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleMiningSessions(filters?: string, sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningSessionResponseBeta>>;
    /**
     * This method returns all saved potential roles (draft roles).
     * @summary Retrieves all saved potential roles
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSavedPotentialRoles(sorters?: string, offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleMiningSessionDraftRoleDtoBeta>>;
    /**
     * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role in session
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId The potential role summary id
     * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPotentialRole(sessionId: string, potentialRoleId: string, patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role
     * @param {string} potentialRoleId The potential role summary id
     * @param {Array<PatchPotentialRoleRequestInnerBeta>} patchPotentialRoleRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleMiningPotentialRole(potentialRoleId: string, patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>, axiosOptions?: any): AxiosPromise<object>;
    /**
     * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
     * @summary Patch a role mining session
     * @param {string} sessionId The role mining session id to be patched
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleMiningSession(sessionId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This endpoint adds or removes entitlements from an exclusion list for a potential role.
     * @summary Edit entitlements for a potential role to exclude some entitlements
     * @param {string} sessionId The role mining session id
     * @param {string} potentialRoleId A potential role id in a role mining session
     * @param {RoleMiningPotentialRoleEditEntitlementsBeta} roleMiningPotentialRoleEditEntitlementsBeta Role mining session parameters
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateEntitlementsPotentialRole(sessionId: string, potentialRoleId: string, roleMiningPotentialRoleEditEntitlementsBeta: RoleMiningPotentialRoleEditEntitlementsBeta, axiosOptions?: any): AxiosPromise<RoleMiningPotentialRoleBeta>;
};
/**
 * Request parameters for createPotentialRoleProvisionRequest operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequestRequest
 */
export interface IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequestRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequest
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequest
     */
    readonly potentialRoleId: string;
    /**
     * Minimum popularity required for an entitlement to be included in the provisioned role.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequest
     */
    readonly minEntitlementPopularity?: number;
    /**
     * Boolean determining whether common access entitlements will be included in the provisioned role.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequest
     */
    readonly includeCommonAccess?: boolean;
    /**
     * Required information to create a new role
     * @type {RoleMiningPotentialRoleProvisionRequestBeta}
     * @memberof IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequest
     */
    readonly roleMiningPotentialRoleProvisionRequestBeta?: RoleMiningPotentialRoleProvisionRequestBeta;
}
/**
 * Request parameters for createRoleMiningSessions operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiCreateRoleMiningSessionsRequest
 */
export interface IAIRoleMiningBetaApiCreateRoleMiningSessionsRequest {
    /**
     * Role mining session parameters
     * @type {RoleMiningSessionDtoBeta}
     * @memberof IAIRoleMiningBetaApiCreateRoleMiningSessions
     */
    readonly roleMiningSessionDtoBeta: RoleMiningSessionDtoBeta;
}
/**
 * Request parameters for downloadRoleMiningPotentialRoleZip operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZipRequest
 */
export interface IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZipRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZip
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZip
     */
    readonly potentialRoleId: string;
    /**
     * The id of a previously run export job for this potential role
     * @type {string}
     * @memberof IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZip
     */
    readonly exportId: string;
}
/**
 * Request parameters for exportRoleMiningPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiExportRoleMiningPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiExportRoleMiningPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRole
     */
    readonly potentialRoleId: string;
}
/**
 * Request parameters for exportRoleMiningPotentialRoleAsync operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsyncRequest
 */
export interface IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsyncRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsync
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsync
     */
    readonly potentialRoleId: string;
    /**
     *
     * @type {RoleMiningPotentialRoleExportRequestBeta}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsync
     */
    readonly roleMiningPotentialRoleExportRequestBeta?: RoleMiningPotentialRoleExportRequestBeta;
}
/**
 * Request parameters for exportRoleMiningPotentialRoleStatus operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatusRequest
 */
export interface IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatusRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatus
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatus
     */
    readonly potentialRoleId: string;
    /**
     * The id of a previously run export job for this potential role
     * @type {string}
     * @memberof IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatus
     */
    readonly exportId: string;
}
/**
 * Request parameters for getAllPotentialRoleSummaries operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetAllPotentialRoleSummariesRequest
 */
export interface IAIRoleMiningBetaApiGetAllPotentialRoleSummariesRequest {
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate, identityCount, entitlementCount, freshness, quality**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetAllPotentialRoleSummaries
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co, ge, gt, le, lt*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq, ge, gt, le, lt*  **scopingMethod**: *eq*  **sessionState**: *eq*  **identityAttribute**: *co*
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetAllPotentialRoleSummaries
     */
    readonly filters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetAllPotentialRoleSummaries
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetAllPotentialRoleSummaries
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetAllPotentialRoleSummaries
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getEntitlementDistributionPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     * Boolean determining whether common access entitlements will be included or not
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRole
     */
    readonly includeCommonAccess?: boolean;
}
/**
 * Request parameters for getEntitlementsPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetEntitlementsPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiGetEntitlementsPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     * Boolean determining whether common access entitlements will be included or not
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly includeCommonAccess?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity, entitlementName, applicationName**  The default sort is **popularity** in descending order.
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly filters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetEntitlementsPotentialRole
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getExcludedEntitlementsPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **popularity**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **applicationName**: *sw*  **entitlementRef.name**: *sw*
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly filters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRole
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getIdentitiesPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetIdentitiesPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiGetIdentitiesPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly filters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetIdentitiesPotentialRole
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiGetPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRole
     */
    readonly potentialRoleId: string;
}
/**
 * Request parameters for getPotentialRoleApplications operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetPotentialRoleApplicationsRequest
 */
export interface IAIRoleMiningBetaApiGetPotentialRoleApplicationsRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleApplications
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleApplications
     */
    readonly potentialRoleId: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleApplications
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleApplications
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleApplications
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getPotentialRoleSourceIdentityUsage operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsageRequest
 */
export interface IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsageRequest {
    /**
     * A potential role id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsage
     */
    readonly potentialRoleId: string;
    /**
     * A source id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsage
     */
    readonly sourceId: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **displayName, email, usageCount**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsage
     */
    readonly sorters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsage
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsage
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsage
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getPotentialRoleSummaries operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetPotentialRoleSummariesRequest
 */
export interface IAIRoleMiningBetaApiGetPotentialRoleSummariesRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSummaries
     */
    readonly sessionId: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdDate**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSummaries
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **createdById**: *eq, sw, co*  **createdByName**: *eq, sw, co*  **description**: *sw, co*  **endDate**: *le, lt*  **freshness**: *eq, ge, gt, le, lt*  **name**: *eq, sw, co*  **quality**: *eq, ge, gt, le, lt*  **startDate**: *ge, gt*  **saved**: *eq*  **type**: *eq*
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSummaries
     */
    readonly filters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSummaries
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSummaries
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetPotentialRoleSummaries
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getRoleMiningPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetRoleMiningPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiGetRoleMiningPotentialRoleRequest {
    /**
     * A potential role id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningPotentialRole
     */
    readonly potentialRoleId: string;
}
/**
 * Request parameters for getRoleMiningSession operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetRoleMiningSessionRequest
 */
export interface IAIRoleMiningBetaApiGetRoleMiningSessionRequest {
    /**
     * The role mining session id to be retrieved.
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSession
     */
    readonly sessionId: string;
}
/**
 * Request parameters for getRoleMiningSessionStatus operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetRoleMiningSessionStatusRequest
 */
export interface IAIRoleMiningBetaApiGetRoleMiningSessionStatusRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSessionStatus
     */
    readonly sessionId: string;
}
/**
 * Request parameters for getRoleMiningSessions operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetRoleMiningSessionsRequest
 */
export interface IAIRoleMiningBetaApiGetRoleMiningSessionsRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **saved**: *eq*  **name**: *eq, sw*
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSessions
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **createdBy, createdDate**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSessions
     */
    readonly sorters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSessions
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSessions
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetRoleMiningSessions
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getSavedPotentialRoles operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiGetSavedPotentialRolesRequest
 */
export interface IAIRoleMiningBetaApiGetSavedPotentialRolesRequest {
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters/) Sorting is supported for the following fields: **modified**
     * @type {string}
     * @memberof IAIRoleMiningBetaApiGetSavedPotentialRoles
     */
    readonly sorters?: string;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetSavedPotentialRoles
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IAIRoleMiningBetaApiGetSavedPotentialRoles
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IAIRoleMiningBetaApiGetSavedPotentialRoles
     */
    readonly count?: boolean;
}
/**
 * Request parameters for patchPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiPatchPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiPatchPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiPatchPotentialRole
     */
    readonly sessionId: string;
    /**
     * The potential role summary id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiPatchPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     *
     * @type {Array<PatchPotentialRoleRequestInnerBeta>}
     * @memberof IAIRoleMiningBetaApiPatchPotentialRole
     */
    readonly patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>;
}
/**
 * Request parameters for patchRoleMiningPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiPatchRoleMiningPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiPatchRoleMiningPotentialRoleRequest {
    /**
     * The potential role summary id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiPatchRoleMiningPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     *
     * @type {Array<PatchPotentialRoleRequestInnerBeta>}
     * @memberof IAIRoleMiningBetaApiPatchRoleMiningPotentialRole
     */
    readonly patchPotentialRoleRequestInnerBeta: Array<PatchPotentialRoleRequestInnerBeta>;
}
/**
 * Request parameters for patchRoleMiningSession operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiPatchRoleMiningSessionRequest
 */
export interface IAIRoleMiningBetaApiPatchRoleMiningSessionRequest {
    /**
     * The role mining session id to be patched
     * @type {string}
     * @memberof IAIRoleMiningBetaApiPatchRoleMiningSession
     */
    readonly sessionId: string;
    /**
     * Replace pruneThreshold and/or minNumIdentitiesInPotentialRole in role mining session. Update saved status or saved name for a role mining session.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof IAIRoleMiningBetaApiPatchRoleMiningSession
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for updateEntitlementsPotentialRole operation in IAIRoleMiningBetaApi.
 * @export
 * @interface IAIRoleMiningBetaApiUpdateEntitlementsPotentialRoleRequest
 */
export interface IAIRoleMiningBetaApiUpdateEntitlementsPotentialRoleRequest {
    /**
     * The role mining session id
     * @type {string}
     * @memberof IAIRoleMiningBetaApiUpdateEntitlementsPotentialRole
     */
    readonly sessionId: string;
    /**
     * A potential role id in a role mining session
     * @type {string}
     * @memberof IAIRoleMiningBetaApiUpdateEntitlementsPotentialRole
     */
    readonly potentialRoleId: string;
    /**
     * Role mining session parameters
     * @type {RoleMiningPotentialRoleEditEntitlementsBeta}
     * @memberof IAIRoleMiningBetaApiUpdateEntitlementsPotentialRole
     */
    readonly roleMiningPotentialRoleEditEntitlementsBeta: RoleMiningPotentialRoleEditEntitlementsBeta;
}
/**
 * IAIRoleMiningBetaApi - object-oriented interface
 * @export
 * @class IAIRoleMiningBetaApi
 * @extends {BaseAPI}
 */
export declare class IAIRoleMiningBetaApi extends BaseAPI {
    /**
     * This method starts a job to provision a potential role
     * @summary Create request to provision a potential role into an actual role.
     * @param {IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    createPotentialRoleProvisionRequest(requestParameters: IAIRoleMiningBetaApiCreatePotentialRoleProvisionRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleSummaryBeta, any>>;
    /**
     * This submits a create role mining session request to the role mining application.
     * @summary Create a role mining session
     * @param {IAIRoleMiningBetaApiCreateRoleMiningSessionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    createRoleMiningSessions(requestParameters: IAIRoleMiningBetaApiCreateRoleMiningSessionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningSessionResponseBeta, any>>;
    /**
     * This endpoint downloads a completed export of information for a potential role in a role mining session.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZipRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    downloadRoleMiningPotentialRoleZip(requestParameters: IAIRoleMiningBetaApiDownloadRoleMiningPotentialRoleZipRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This endpoint downloads all the information for a potential role in a role mining session. Includes identities and entitlements in the potential role.
     * @summary Export (download) details for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiExportRoleMiningPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    exportRoleMiningPotentialRole(requestParameters: IAIRoleMiningBetaApiExportRoleMiningPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This endpoint uploads all the information for a potential role in a role mining session to S3 as a downloadable zip archive.  Includes identities and entitlements in the potential role.
     * @summary Asynchronously export details for a potential role in a role mining session and upload to S3
     * @param {IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    exportRoleMiningPotentialRoleAsync(requestParameters: IAIRoleMiningBetaApiExportRoleMiningPotentialRoleAsyncRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleExportResponseBeta, any>>;
    /**
     * This endpoint retrieves information about the current status of a potential role export.
     * @summary Retrieve status of a potential role export job
     * @param {IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    exportRoleMiningPotentialRoleStatus(requestParameters: IAIRoleMiningBetaApiExportRoleMiningPotentialRoleStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleExportResponseBeta, any>>;
    /**
     * Returns all potential role summaries that match the query parameters
     * @summary Retrieves all potential role summaries
     * @param {IAIRoleMiningBetaApiGetAllPotentialRoleSummariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getAllPotentialRoleSummaries(requestParameters?: IAIRoleMiningBetaApiGetAllPotentialRoleSummariesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleSummaryBeta[], any>>;
    /**
     * This method returns entitlement popularity distribution for a potential role in a role mining session.
     * @summary Retrieves entitlement popularity distribution for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getEntitlementDistributionPotentialRole(requestParameters: IAIRoleMiningBetaApiGetEntitlementDistributionPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: number;
    }, any>>;
    /**
     * This method returns entitlements for a potential role in a role mining session.
     * @summary Retrieves entitlements for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetEntitlementsPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getEntitlementsPotentialRole(requestParameters: IAIRoleMiningBetaApiGetEntitlementsPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningEntitlementBeta[], any>>;
    /**
     * This method returns excluded entitlements for a potential role in a role mining session.
     * @summary Retrieves excluded entitlements for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getExcludedEntitlementsPotentialRole(requestParameters: IAIRoleMiningBetaApiGetExcludedEntitlementsPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningEntitlementBeta[], any>>;
    /**
     * This method returns identities for a potential role in a role mining session.
     * @summary Retrieves identities for a potential role in a role mining session
     * @param {IAIRoleMiningBetaApiGetIdentitiesPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getIdentitiesPotentialRole(requestParameters: IAIRoleMiningBetaApiGetIdentitiesPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningIdentityBeta[], any>>;
    /**
     * This method returns a specific potential role for a role mining session.
     * @summary Retrieve potential role in session
     * @param {IAIRoleMiningBetaApiGetPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getPotentialRole(requestParameters: IAIRoleMiningBetaApiGetPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleBeta, any>>;
    /**
     * This method returns the applications of a potential role for a role mining session.
     * @summary Retrieves the applications of a potential role for a role mining session
     * @param {IAIRoleMiningBetaApiGetPotentialRoleApplicationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getPotentialRoleApplications(requestParameters: IAIRoleMiningBetaApiGetPotentialRoleApplicationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleApplicationBeta[], any>>;
    /**
     * This method returns source usageCount (as number of days in the last 90 days) for each identity in a potential role.
     * @summary Retrieves potential role source usage
     * @param {IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsageRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getPotentialRoleSourceIdentityUsage(requestParameters: IAIRoleMiningBetaApiGetPotentialRoleSourceIdentityUsageRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleSourceUsageBeta[], any>>;
    /**
     * This method returns the potential role summaries for a role mining session.
     * @summary Retrieve session\'s potential role summaries
     * @param {IAIRoleMiningBetaApiGetPotentialRoleSummariesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getPotentialRoleSummaries(requestParameters: IAIRoleMiningBetaApiGetPotentialRoleSummariesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleSummaryBeta[], any>>;
    /**
     * This method returns a specific potential role.
     * @summary Retrieves a specific potential role
     * @param {IAIRoleMiningBetaApiGetRoleMiningPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getRoleMiningPotentialRole(requestParameters: IAIRoleMiningBetaApiGetRoleMiningPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleBeta, any>>;
    /**
     * The method retrieves a role mining session.
     * @summary Get a role mining session
     * @param {IAIRoleMiningBetaApiGetRoleMiningSessionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getRoleMiningSession(requestParameters: IAIRoleMiningBetaApiGetRoleMiningSessionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningSessionResponseBeta, any>>;
    /**
     * This method returns a role mining session status for a customer.
     * @summary Get role mining session status state
     * @param {IAIRoleMiningBetaApiGetRoleMiningSessionStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getRoleMiningSessionStatus(requestParameters: IAIRoleMiningBetaApiGetRoleMiningSessionStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningSessionStatusBeta, any>>;
    /**
     * Returns all role mining sessions that match the query parameters
     * @summary Retrieves all role mining sessions
     * @param {IAIRoleMiningBetaApiGetRoleMiningSessionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getRoleMiningSessions(requestParameters?: IAIRoleMiningBetaApiGetRoleMiningSessionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningSessionResponseBeta[], any>>;
    /**
     * This method returns all saved potential roles (draft roles).
     * @summary Retrieves all saved potential roles
     * @param {IAIRoleMiningBetaApiGetSavedPotentialRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    getSavedPotentialRoles(requestParameters?: IAIRoleMiningBetaApiGetSavedPotentialRolesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningSessionDraftRoleDtoBeta[], any>>;
    /**
     * This method updates an existing potential role using the role mining session id and the potential role summary id.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role in session
     * @param {IAIRoleMiningBetaApiPatchPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    patchPotentialRole(requestParameters: IAIRoleMiningBetaApiPatchPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This method updates an existing potential role.  The following fields can be modified:  * `description`  * `name`  * `saved`   >**NOTE: All other fields cannot be modified.**
     * @summary Update a potential role
     * @param {IAIRoleMiningBetaApiPatchRoleMiningPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    patchRoleMiningPotentialRole(requestParameters: IAIRoleMiningBetaApiPatchRoleMiningPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * The  method updates an existing role mining session using PATCH. Supports op in {\"replace\"} and changes to pruneThreshold and/or minNumIdentitiesInPotentialRole. The potential roles in this role mining session is then re-calculated.
     * @summary Patch a role mining session
     * @param {IAIRoleMiningBetaApiPatchRoleMiningSessionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    patchRoleMiningSession(requestParameters: IAIRoleMiningBetaApiPatchRoleMiningSessionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This endpoint adds or removes entitlements from an exclusion list for a potential role.
     * @summary Edit entitlements for a potential role to exclude some entitlements
     * @param {IAIRoleMiningBetaApiUpdateEntitlementsPotentialRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IAIRoleMiningBetaApi
     */
    updateEntitlementsPotentialRole(requestParameters: IAIRoleMiningBetaApiUpdateEntitlementsPotentialRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleMiningPotentialRoleBeta, any>>;
}
/**
 * IconsBetaApi - axios parameter creator
 * @export
 */
export declare const IconsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an icon
     * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
     * @param {string} objectId Object id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIcon: (objectType: string, objectId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update an icon
     * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
     * @param {string} objectId Object id.
     * @param {any} image file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setIcon: (objectType: string, objectId: string, image: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IconsBetaApi - functional programming interface
 * @export
 */
export declare const IconsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an icon
     * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
     * @param {string} objectId Object id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIcon(objectType: string, objectId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update an icon
     * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
     * @param {string} objectId Object id.
     * @param {any} image file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setIcon(objectType: string, objectId: string, image: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetIcon200ResponseBeta>>;
};
/**
 * IconsBetaApi - factory interface
 * @export
 */
export declare const IconsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an icon
     * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
     * @param {string} objectId Object id.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIcon(objectType: string, objectId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update an icon
     * @param {string} objectType Object type. Available options [\&#39;application\&#39;]
     * @param {string} objectId Object id.
     * @param {any} image file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setIcon(objectType: string, objectId: string, image: any, axiosOptions?: any): AxiosPromise<SetIcon200ResponseBeta>;
};
/**
 * Request parameters for deleteIcon operation in IconsBetaApi.
 * @export
 * @interface IconsBetaApiDeleteIconRequest
 */
export interface IconsBetaApiDeleteIconRequest {
    /**
     * Object type. Available options [\&#39;application\&#39;]
     * @type {string}
     * @memberof IconsBetaApiDeleteIcon
     */
    readonly objectType: string;
    /**
     * Object id.
     * @type {string}
     * @memberof IconsBetaApiDeleteIcon
     */
    readonly objectId: string;
}
/**
 * Request parameters for setIcon operation in IconsBetaApi.
 * @export
 * @interface IconsBetaApiSetIconRequest
 */
export interface IconsBetaApiSetIconRequest {
    /**
     * Object type. Available options [\&#39;application\&#39;]
     * @type {string}
     * @memberof IconsBetaApiSetIcon
     */
    readonly objectType: string;
    /**
     * Object id.
     * @type {string}
     * @memberof IconsBetaApiSetIcon
     */
    readonly objectId: string;
    /**
     * file with icon. Allowed mime-types [\\\&#39;image/png\\\&#39;, \\\&#39;image/jpeg\\\&#39;]
     * @type {any}
     * @memberof IconsBetaApiSetIcon
     */
    readonly image: any;
}
/**
 * IconsBetaApi - object-oriented interface
 * @export
 * @class IconsBetaApi
 * @extends {BaseAPI}
 */
export declare class IconsBetaApi extends BaseAPI {
    /**
     * This API endpoint delete an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an icon
     * @param {IconsBetaApiDeleteIconRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IconsBetaApi
     */
    deleteIcon(requestParameters: IconsBetaApiDeleteIconRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API endpoint updates an icon by object type and object id. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update an icon
     * @param {IconsBetaApiSetIconRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IconsBetaApi
     */
    setIcon(requestParameters: IconsBetaApiSetIconRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SetIcon200ResponseBeta, any>>;
}
/**
 * IdentitiesBetaApi - axios parameter creator
 * @export
 */
export declare const IdentitiesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The API returns successful response if the requested identity was deleted.
     * @summary Delete identity
     * @param {string} id Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a single identity using the Identity ID.
     * @summary Identity Details
     * @param {string} id Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
     * @summary Get ownership details
     * @param {string} identityId Identity ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOwnershipDetails: (identityId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Role assignment details
     * @param {string} identityId Identity Id
     * @param {string} assignmentId Assignment Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignment: (identityId: string, assignmentId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
     * @summary List role assignments
     * @param {string} identityId Identity Id to get the role assignments for
     * @param {string} [roleId] Role Id to filter the role assignments with
     * @param {string} [roleName] Role name to filter the role assignments with
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignments: (identityId: string, roleId?: string, roleName?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of identities.
     * @summary List Identities
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
     * @param {'CORRELATED_ONLY' | 'NONE'} [defaultFilter] Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentities: (filters?: string, sorters?: string, defaultFilter?: 'CORRELATED_ONLY' | 'NONE', count?: boolean, limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
     * @summary Reset an identity
     * @param {string} identityId Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    resetIdentity: (identityId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Send password reset email
     * @param {SendAccountVerificationRequestBeta} sendAccountVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendIdentityVerificationAccountToken: (sendAccountVerificationRequestBeta: SendAccountVerificationRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Invite identities to register
     * @param {InviteIdentitiesRequestBeta} inviteIdentitiesRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startIdentitiesInvite: (inviteIdentitiesRequestBeta: InviteIdentitiesRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Process a list of identityIds
     * @param {ProcessIdentitiesRequestBeta} processIdentitiesRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startIdentityProcessing: (processIdentitiesRequestBeta: ProcessIdentitiesRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Attribute synchronization for single identity.
     * @param {string} identityId The Identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    synchronizeAttributesForIdentity: (identityId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IdentitiesBetaApi - functional programming interface
 * @export
 */
export declare const IdentitiesBetaApiFp: (configuration?: Configuration) => {
    /**
     * The API returns successful response if the requested identity was deleted.
     * @summary Delete identity
     * @param {string} id Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns a single identity using the Identity ID.
     * @summary Identity Details
     * @param {string} id Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityBeta>>;
    /**
     * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
     * @summary Get ownership details
     * @param {string} identityId Identity ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOwnershipDetails(identityId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityOwnershipAssociationDetailsBeta>>;
    /**
     *
     * @summary Role assignment details
     * @param {string} identityId Identity Id
     * @param {string} assignmentId Assignment Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignment(identityId: string, assignmentId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentDtoBeta>>;
    /**
     * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
     * @summary List role assignments
     * @param {string} identityId Identity Id to get the role assignments for
     * @param {string} [roleId] Role Id to filter the role assignments with
     * @param {string} [roleName] Role name to filter the role assignments with
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignments(identityId: string, roleId?: string, roleName?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetRoleAssignments200ResponseInnerBeta>>>;
    /**
     * This API returns a list of identities.
     * @summary List Identities
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
     * @param {'CORRELATED_ONLY' | 'NONE'} [defaultFilter] Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentities(filters?: string, sorters?: string, defaultFilter?: 'CORRELATED_ONLY' | 'NONE', count?: boolean, limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityBeta>>>;
    /**
     * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
     * @summary Reset an identity
     * @param {string} identityId Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    resetIdentity(identityId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Send password reset email
     * @param {SendAccountVerificationRequestBeta} sendAccountVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendIdentityVerificationAccountToken(sendAccountVerificationRequestBeta: SendAccountVerificationRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Invite identities to register
     * @param {InviteIdentitiesRequestBeta} inviteIdentitiesRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startIdentitiesInvite(inviteIdentitiesRequestBeta: InviteIdentitiesRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskStatusBeta>>;
    /**
     * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Process a list of identityIds
     * @param {ProcessIdentitiesRequestBeta} processIdentitiesRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startIdentityProcessing(processIdentitiesRequestBeta: ProcessIdentitiesRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultResponseBeta>>;
    /**
     * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Attribute synchronization for single identity.
     * @param {string} identityId The Identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    synchronizeAttributesForIdentity(identityId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentitySyncJobBeta>>;
};
/**
 * IdentitiesBetaApi - factory interface
 * @export
 */
export declare const IdentitiesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The API returns successful response if the requested identity was deleted.
     * @summary Delete identity
     * @param {string} id Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentity(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns a single identity using the Identity ID.
     * @summary Identity Details
     * @param {string} id Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentity(id: string, axiosOptions?: any): AxiosPromise<IdentityBeta>;
    /**
     * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
     * @summary Get ownership details
     * @param {string} identityId Identity ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityOwnershipDetails(identityId: string, axiosOptions?: any): AxiosPromise<IdentityOwnershipAssociationDetailsBeta>;
    /**
     *
     * @summary Role assignment details
     * @param {string} identityId Identity Id
     * @param {string} assignmentId Assignment Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignment(identityId: string, assignmentId: string, axiosOptions?: any): AxiosPromise<RoleAssignmentDtoBeta>;
    /**
     * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
     * @summary List role assignments
     * @param {string} identityId Identity Id to get the role assignments for
     * @param {string} [roleId] Role Id to filter the role assignments with
     * @param {string} [roleName] Role name to filter the role assignments with
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignments(identityId: string, roleId?: string, roleName?: string, axiosOptions?: any): AxiosPromise<Array<GetRoleAssignments200ResponseInnerBeta>>;
    /**
     * This API returns a list of identities.
     * @summary List Identities
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
     * @param {'CORRELATED_ONLY' | 'NONE'} [defaultFilter] Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentities(filters?: string, sorters?: string, defaultFilter?: 'CORRELATED_ONLY' | 'NONE', count?: boolean, limit?: number, offset?: number, axiosOptions?: any): AxiosPromise<Array<IdentityBeta>>;
    /**
     * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
     * @summary Reset an identity
     * @param {string} identityId Identity Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    resetIdentity(identityId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Send password reset email
     * @param {SendAccountVerificationRequestBeta} sendAccountVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendIdentityVerificationAccountToken(sendAccountVerificationRequestBeta: SendAccountVerificationRequestBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Invite identities to register
     * @param {InviteIdentitiesRequestBeta} inviteIdentitiesRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startIdentitiesInvite(inviteIdentitiesRequestBeta: InviteIdentitiesRequestBeta, axiosOptions?: any): AxiosPromise<TaskStatusBeta>;
    /**
     * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Process a list of identityIds
     * @param {ProcessIdentitiesRequestBeta} processIdentitiesRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startIdentityProcessing(processIdentitiesRequestBeta: ProcessIdentitiesRequestBeta, axiosOptions?: any): AxiosPromise<TaskResultResponseBeta>;
    /**
     * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Attribute synchronization for single identity.
     * @param {string} identityId The Identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    synchronizeAttributesForIdentity(identityId: string, axiosOptions?: any): AxiosPromise<IdentitySyncJobBeta>;
};
/**
 * Request parameters for deleteIdentity operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiDeleteIdentityRequest
 */
export interface IdentitiesBetaApiDeleteIdentityRequest {
    /**
     * Identity Id
     * @type {string}
     * @memberof IdentitiesBetaApiDeleteIdentity
     */
    readonly id: string;
}
/**
 * Request parameters for getIdentity operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiGetIdentityRequest
 */
export interface IdentitiesBetaApiGetIdentityRequest {
    /**
     * Identity Id
     * @type {string}
     * @memberof IdentitiesBetaApiGetIdentity
     */
    readonly id: string;
}
/**
 * Request parameters for getIdentityOwnershipDetails operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiGetIdentityOwnershipDetailsRequest
 */
export interface IdentitiesBetaApiGetIdentityOwnershipDetailsRequest {
    /**
     * Identity ID.
     * @type {string}
     * @memberof IdentitiesBetaApiGetIdentityOwnershipDetails
     */
    readonly identityId: string;
}
/**
 * Request parameters for getRoleAssignment operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiGetRoleAssignmentRequest
 */
export interface IdentitiesBetaApiGetRoleAssignmentRequest {
    /**
     * Identity Id
     * @type {string}
     * @memberof IdentitiesBetaApiGetRoleAssignment
     */
    readonly identityId: string;
    /**
     * Assignment Id
     * @type {string}
     * @memberof IdentitiesBetaApiGetRoleAssignment
     */
    readonly assignmentId: string;
}
/**
 * Request parameters for getRoleAssignments operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiGetRoleAssignmentsRequest
 */
export interface IdentitiesBetaApiGetRoleAssignmentsRequest {
    /**
     * Identity Id to get the role assignments for
     * @type {string}
     * @memberof IdentitiesBetaApiGetRoleAssignments
     */
    readonly identityId: string;
    /**
     * Role Id to filter the role assignments with
     * @type {string}
     * @memberof IdentitiesBetaApiGetRoleAssignments
     */
    readonly roleId?: string;
    /**
     * Role name to filter the role assignments with
     * @type {string}
     * @memberof IdentitiesBetaApiGetRoleAssignments
     */
    readonly roleName?: string;
}
/**
 * Request parameters for listIdentities operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiListIdentitiesRequest
 */
export interface IdentitiesBetaApiListIdentitiesRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **alias**: *eq, sw*  **firstname**: *eq, sw*  **lastname**: *eq, sw*  **email**: *eq, sw*  **cloudStatus**: *eq*  **processingState**: *eq*  **correlated**: *eq*  **protected**: *eq*
     * @type {string}
     * @memberof IdentitiesBetaApiListIdentities
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, alias, cloudStatus**
     * @type {string}
     * @memberof IdentitiesBetaApiListIdentities
     */
    readonly sorters?: string;
    /**
     * Adds additional filter to filters query parameter.  CORRELATED_ONLY adds correlated&#x3D;true and returns only identities that are correlated.  NONE does not add any and returns all identities that satisfy filters query parameter.
     * @type {'CORRELATED_ONLY' | 'NONE'}
     * @memberof IdentitiesBetaApiListIdentities
     */
    readonly defaultFilter?: 'CORRELATED_ONLY' | 'NONE';
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentitiesBetaApiListIdentities
     */
    readonly count?: boolean;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentitiesBetaApiListIdentities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentitiesBetaApiListIdentities
     */
    readonly offset?: number;
}
/**
 * Request parameters for resetIdentity operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiResetIdentityRequest
 */
export interface IdentitiesBetaApiResetIdentityRequest {
    /**
     * Identity Id
     * @type {string}
     * @memberof IdentitiesBetaApiResetIdentity
     */
    readonly identityId: string;
}
/**
 * Request parameters for sendIdentityVerificationAccountToken operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiSendIdentityVerificationAccountTokenRequest
 */
export interface IdentitiesBetaApiSendIdentityVerificationAccountTokenRequest {
    /**
     *
     * @type {SendAccountVerificationRequestBeta}
     * @memberof IdentitiesBetaApiSendIdentityVerificationAccountToken
     */
    readonly sendAccountVerificationRequestBeta: SendAccountVerificationRequestBeta;
}
/**
 * Request parameters for startIdentitiesInvite operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiStartIdentitiesInviteRequest
 */
export interface IdentitiesBetaApiStartIdentitiesInviteRequest {
    /**
     *
     * @type {InviteIdentitiesRequestBeta}
     * @memberof IdentitiesBetaApiStartIdentitiesInvite
     */
    readonly inviteIdentitiesRequestBeta: InviteIdentitiesRequestBeta;
}
/**
 * Request parameters for startIdentityProcessing operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiStartIdentityProcessingRequest
 */
export interface IdentitiesBetaApiStartIdentityProcessingRequest {
    /**
     *
     * @type {ProcessIdentitiesRequestBeta}
     * @memberof IdentitiesBetaApiStartIdentityProcessing
     */
    readonly processIdentitiesRequestBeta: ProcessIdentitiesRequestBeta;
}
/**
 * Request parameters for synchronizeAttributesForIdentity operation in IdentitiesBetaApi.
 * @export
 * @interface IdentitiesBetaApiSynchronizeAttributesForIdentityRequest
 */
export interface IdentitiesBetaApiSynchronizeAttributesForIdentityRequest {
    /**
     * The Identity id
     * @type {string}
     * @memberof IdentitiesBetaApiSynchronizeAttributesForIdentity
     */
    readonly identityId: string;
}
/**
 * IdentitiesBetaApi - object-oriented interface
 * @export
 * @class IdentitiesBetaApi
 * @extends {BaseAPI}
 */
export declare class IdentitiesBetaApi extends BaseAPI {
    /**
     * The API returns successful response if the requested identity was deleted.
     * @summary Delete identity
     * @param {IdentitiesBetaApiDeleteIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    deleteIdentity(requestParameters: IdentitiesBetaApiDeleteIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns a single identity using the Identity ID.
     * @summary Identity Details
     * @param {IdentitiesBetaApiGetIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    getIdentity(requestParameters: IdentitiesBetaApiGetIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityBeta, any>>;
    /**
     * Use this API to return an identity\'s owned objects that will cause problems for deleting the identity.  Use this API as a checklist of objects that you need to reassign to a different identity before you can delete the identity.  For a full list of objects owned by an identity, use the [Search API](https://developer.sailpoint.com/docs/api/v3/search-post/).  When you search for identities, the returned identities have a property, `owns`, that contains a more comprehensive list of identity\'s owned objects.
     * @summary Get ownership details
     * @param {IdentitiesBetaApiGetIdentityOwnershipDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    getIdentityOwnershipDetails(requestParameters: IdentitiesBetaApiGetIdentityOwnershipDetailsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityOwnershipAssociationDetailsBeta, any>>;
    /**
     *
     * @summary Role assignment details
     * @param {IdentitiesBetaApiGetRoleAssignmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    getRoleAssignment(requestParameters: IdentitiesBetaApiGetRoleAssignmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleAssignmentDtoBeta, any>>;
    /**
     * This returns either a list of Role Assignments when querying with either a Role Id or Role Name, or a list of Role Assignment References if querying with only identity Id.
     * @summary List role assignments
     * @param {IdentitiesBetaApiGetRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    getRoleAssignments(requestParameters: IdentitiesBetaApiGetRoleAssignmentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetRoleAssignments200ResponseInnerBeta[], any>>;
    /**
     * This API returns a list of identities.
     * @summary List Identities
     * @param {IdentitiesBetaApiListIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    listIdentities(requestParameters?: IdentitiesBetaApiListIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityBeta[], any>>;
    /**
     * Use this endpoint to reset a user\'s identity if they have forgotten their authentication information like their answers to knowledge-based questions. Resetting an identity de-registers the user and removes any elevated user levels they have.
     * @summary Reset an identity
     * @param {IdentitiesBetaApiResetIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    resetIdentity(requestParameters: IdentitiesBetaApiResetIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API sends an email with the link to start Password Reset. After selecting the link an identity will be able to set up a new password. Emails expire after 2 hours.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Send password reset email
     * @param {IdentitiesBetaApiSendIdentityVerificationAccountTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    sendIdentityVerificationAccountToken(requestParameters: IdentitiesBetaApiSendIdentityVerificationAccountTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API submits a task for inviting given identities via email to complete registration. The invitation email will include the link. After selecting the link an identity will be able to set up password and log in into the system. Invitations expire after 7 days. By default invitations send to the work identity email. It can be changed in Admin > Identities > Identity Profiles by selecting corresponding profile and editing Invitation Options.  This task will send an invitation email only for unregistered identities.  The executed task status can be checked by Task Management > [Get task status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status)  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Invite identities to register
     * @param {IdentitiesBetaApiStartIdentitiesInviteRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    startIdentitiesInvite(requestParameters: IdentitiesBetaApiStartIdentitiesInviteRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskStatusBeta, any>>;
    /**
     * This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.   This endpoint will perform the following tasks: 1. Calculate identity attributes, including applying or running any rules or transforms (e.g. calculate Lifecycle State at a point-in-time it\'s expected to change). 2. Evaluate role assignments, leading to assignment of new roles and removal of existing roles. 3. Enforce provisioning for any assigned accesses that haven\'t been fulfilled (e.g. failure due to source health). 4. Recalculate manager relationships. 5. Potentially clean-up identity processing errors, assuming the error has been resolved.  A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Process a list of identityIds
     * @param {IdentitiesBetaApiStartIdentityProcessingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    startIdentityProcessing(requestParameters: IdentitiesBetaApiStartIdentityProcessingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultResponseBeta, any>>;
    /**
     * This end-point performs attribute synchronization for a selected identity. The endpoint can be called once in 10 seconds per identity. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Attribute synchronization for single identity.
     * @param {IdentitiesBetaApiSynchronizeAttributesForIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentitiesBetaApi
     */
    synchronizeAttributesForIdentity(requestParameters: IdentitiesBetaApiSynchronizeAttributesForIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentitySyncJobBeta, any>>;
}
/**
 * IdentityAttributesBetaApi - axios parameter creator
 * @export
 */
export declare const IdentityAttributesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Identity Attribute
     * @param {IdentityAttributeBeta} identityAttributeBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityAttribute: (identityAttributeBeta: IdentityAttributeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityAttribute: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Bulk delete Identity Attributes
     * @param {IdentityAttributeNamesBeta} identityAttributeNamesBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityAttributesInBulk: (identityAttributeNamesBeta: IdentityAttributeNamesBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets an identity attribute for a given technical name.
     * @summary Get Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityAttribute: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a collection of identity attributes.
     * @summary List Identity Attributes
     * @param {boolean} [includeSystem] Include \&#39;system\&#39; attributes in the response.
     * @param {boolean} [includeSilent] Include \&#39;silent\&#39; attributes in the response.
     * @param {boolean} [searchableOnly] Include only \&#39;searchable\&#39; attributes in the response.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAttributes: (includeSystem?: boolean, includeSilent?: boolean, searchableOnly?: boolean, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {IdentityAttributeBeta} identityAttributeBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putIdentityAttribute: (name: string, identityAttributeBeta: IdentityAttributeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IdentityAttributesBetaApi - functional programming interface
 * @export
 */
export declare const IdentityAttributesBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Identity Attribute
     * @param {IdentityAttributeBeta} identityAttributeBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityAttribute(identityAttributeBeta: IdentityAttributeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityAttributeBeta>>;
    /**
     * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityAttribute(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Bulk delete Identity Attributes
     * @param {IdentityAttributeNamesBeta} identityAttributeNamesBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityAttributesInBulk(identityAttributeNamesBeta: IdentityAttributeNamesBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets an identity attribute for a given technical name.
     * @summary Get Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityAttribute(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityAttributeBeta>>;
    /**
     * Use this API to get a collection of identity attributes.
     * @summary List Identity Attributes
     * @param {boolean} [includeSystem] Include \&#39;system\&#39; attributes in the response.
     * @param {boolean} [includeSilent] Include \&#39;silent\&#39; attributes in the response.
     * @param {boolean} [searchableOnly] Include only \&#39;searchable\&#39; attributes in the response.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAttributes(includeSystem?: boolean, includeSilent?: boolean, searchableOnly?: boolean, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityAttributeBeta>>>;
    /**
     * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {IdentityAttributeBeta} identityAttributeBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putIdentityAttribute(name: string, identityAttributeBeta: IdentityAttributeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityAttributeBeta>>;
};
/**
 * IdentityAttributesBetaApi - factory interface
 * @export
 */
export declare const IdentityAttributesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Identity Attribute
     * @param {IdentityAttributeBeta} identityAttributeBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityAttribute(identityAttributeBeta: IdentityAttributeBeta, axiosOptions?: any): AxiosPromise<IdentityAttributeBeta>;
    /**
     * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityAttribute(name: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Bulk delete Identity Attributes
     * @param {IdentityAttributeNamesBeta} identityAttributeNamesBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityAttributesInBulk(identityAttributeNamesBeta: IdentityAttributeNamesBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets an identity attribute for a given technical name.
     * @summary Get Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityAttribute(name: string, axiosOptions?: any): AxiosPromise<IdentityAttributeBeta>;
    /**
     * Use this API to get a collection of identity attributes.
     * @summary List Identity Attributes
     * @param {boolean} [includeSystem] Include \&#39;system\&#39; attributes in the response.
     * @param {boolean} [includeSilent] Include \&#39;silent\&#39; attributes in the response.
     * @param {boolean} [searchableOnly] Include only \&#39;searchable\&#39; attributes in the response.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAttributes(includeSystem?: boolean, includeSilent?: boolean, searchableOnly?: boolean, count?: boolean, axiosOptions?: any): AxiosPromise<Array<IdentityAttributeBeta>>;
    /**
     * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Identity Attribute
     * @param {string} name The attribute\&#39;s technical name.
     * @param {IdentityAttributeBeta} identityAttributeBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putIdentityAttribute(name: string, identityAttributeBeta: IdentityAttributeBeta, axiosOptions?: any): AxiosPromise<IdentityAttributeBeta>;
};
/**
 * Request parameters for createIdentityAttribute operation in IdentityAttributesBetaApi.
 * @export
 * @interface IdentityAttributesBetaApiCreateIdentityAttributeRequest
 */
export interface IdentityAttributesBetaApiCreateIdentityAttributeRequest {
    /**
     *
     * @type {IdentityAttributeBeta}
     * @memberof IdentityAttributesBetaApiCreateIdentityAttribute
     */
    readonly identityAttributeBeta: IdentityAttributeBeta;
}
/**
 * Request parameters for deleteIdentityAttribute operation in IdentityAttributesBetaApi.
 * @export
 * @interface IdentityAttributesBetaApiDeleteIdentityAttributeRequest
 */
export interface IdentityAttributesBetaApiDeleteIdentityAttributeRequest {
    /**
     * The attribute\&#39;s technical name.
     * @type {string}
     * @memberof IdentityAttributesBetaApiDeleteIdentityAttribute
     */
    readonly name: string;
}
/**
 * Request parameters for deleteIdentityAttributesInBulk operation in IdentityAttributesBetaApi.
 * @export
 * @interface IdentityAttributesBetaApiDeleteIdentityAttributesInBulkRequest
 */
export interface IdentityAttributesBetaApiDeleteIdentityAttributesInBulkRequest {
    /**
     *
     * @type {IdentityAttributeNamesBeta}
     * @memberof IdentityAttributesBetaApiDeleteIdentityAttributesInBulk
     */
    readonly identityAttributeNamesBeta: IdentityAttributeNamesBeta;
}
/**
 * Request parameters for getIdentityAttribute operation in IdentityAttributesBetaApi.
 * @export
 * @interface IdentityAttributesBetaApiGetIdentityAttributeRequest
 */
export interface IdentityAttributesBetaApiGetIdentityAttributeRequest {
    /**
     * The attribute\&#39;s technical name.
     * @type {string}
     * @memberof IdentityAttributesBetaApiGetIdentityAttribute
     */
    readonly name: string;
}
/**
 * Request parameters for listIdentityAttributes operation in IdentityAttributesBetaApi.
 * @export
 * @interface IdentityAttributesBetaApiListIdentityAttributesRequest
 */
export interface IdentityAttributesBetaApiListIdentityAttributesRequest {
    /**
     * Include \&#39;system\&#39; attributes in the response.
     * @type {boolean}
     * @memberof IdentityAttributesBetaApiListIdentityAttributes
     */
    readonly includeSystem?: boolean;
    /**
     * Include \&#39;silent\&#39; attributes in the response.
     * @type {boolean}
     * @memberof IdentityAttributesBetaApiListIdentityAttributes
     */
    readonly includeSilent?: boolean;
    /**
     * Include only \&#39;searchable\&#39; attributes in the response.
     * @type {boolean}
     * @memberof IdentityAttributesBetaApiListIdentityAttributes
     */
    readonly searchableOnly?: boolean;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityAttributesBetaApiListIdentityAttributes
     */
    readonly count?: boolean;
}
/**
 * Request parameters for putIdentityAttribute operation in IdentityAttributesBetaApi.
 * @export
 * @interface IdentityAttributesBetaApiPutIdentityAttributeRequest
 */
export interface IdentityAttributesBetaApiPutIdentityAttributeRequest {
    /**
     * The attribute\&#39;s technical name.
     * @type {string}
     * @memberof IdentityAttributesBetaApiPutIdentityAttribute
     */
    readonly name: string;
    /**
     *
     * @type {IdentityAttributeBeta}
     * @memberof IdentityAttributesBetaApiPutIdentityAttribute
     */
    readonly identityAttributeBeta: IdentityAttributeBeta;
}
/**
 * IdentityAttributesBetaApi - object-oriented interface
 * @export
 * @class IdentityAttributesBetaApi
 * @extends {BaseAPI}
 */
export declare class IdentityAttributesBetaApi extends BaseAPI {
    /**
     * Use this API to create a new identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Identity Attribute
     * @param {IdentityAttributesBetaApiCreateIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    createIdentityAttribute(requestParameters: IdentityAttributesBetaApiCreateIdentityAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityAttributeBeta, any>>;
    /**
     * This deletes an identity attribute with the given name.  The `system` and `standard` properties must be set to false before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Identity Attribute
     * @param {IdentityAttributesBetaApiDeleteIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    deleteIdentityAttribute(requestParameters: IdentityAttributesBetaApiDeleteIdentityAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Use this API to bulk delete identity attributes for a given set of names. Attributes that are currently mapped in an identity profile cannot be deleted.  The `system` and `standard` properties must be set to \'false\' before you can delete an identity attribute.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Bulk delete Identity Attributes
     * @param {IdentityAttributesBetaApiDeleteIdentityAttributesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    deleteIdentityAttributesInBulk(requestParameters: IdentityAttributesBetaApiDeleteIdentityAttributesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets an identity attribute for a given technical name.
     * @summary Get Identity Attribute
     * @param {IdentityAttributesBetaApiGetIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    getIdentityAttribute(requestParameters: IdentityAttributesBetaApiGetIdentityAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityAttributeBeta, any>>;
    /**
     * Use this API to get a collection of identity attributes.
     * @summary List Identity Attributes
     * @param {IdentityAttributesBetaApiListIdentityAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    listIdentityAttributes(requestParameters?: IdentityAttributesBetaApiListIdentityAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityAttributeBeta[], any>>;
    /**
     * This updates an existing identity attribute.  Making an attribute searchable requires that the `system`, `standard`, and `multi` properties be set to false.   A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Identity Attribute
     * @param {IdentityAttributesBetaApiPutIdentityAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityAttributesBetaApi
     */
    putIdentityAttribute(requestParameters: IdentityAttributesBetaApiPutIdentityAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityAttributeBeta, any>>;
}
/**
 * IdentityHistoryBetaApi - axios parameter creator
 * @export
 */
export declare const IdentityHistoryBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
     * @param {string} id The identity id
     * @param {string} [snapshot1] The snapshot 1 of identity
     * @param {string} [snapshot2] The snapshot 2 of identity
     * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    compareIdentitySnapshots: (id: string, snapshot1?: string, snapshot2?: string, accessItemTypes?: Array<string>, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
     * @param {string} id The identity id
     * @param {string} accessType The specific type which needs to be compared
     * @param {boolean} [accessAssociated] Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
     * @param {string} [snapshot1] The snapshot 1 of identity
     * @param {string} [snapshot2] The snapshot 2 of identity
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    compareIdentitySnapshotsAccessType: (id: string, accessType: string, accessAssociated?: boolean, snapshot1?: string, snapshot2?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Get latest snapshot of identity
     * @param {string} id The identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getHistoricalIdentity: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all events for the given identity
     * @param {string} id The identity id
     * @param {string} [from] The optional instant until which access events are returned
     * @param {Array<string>} [eventTypes] An optional list of event types to return.  If null or empty, all events are returned
     * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getHistoricalIdentityEvents: (id: string, from?: string, eventTypes?: Array<string>, accessItemTypes?: Array<string>, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets an identity snapshot at a given date
     * @param {string} id The identity id
     * @param {string} date The specified date
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySnapshot: (id: string, date: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the summary for the event count for a specific identity
     * @param {string} id The identity id
     * @param {string} [before] The date before which snapshot summary is required
     * @param {'day' | 'month'} [interval] The interval indicating day or month. Defaults to month if not specified
     * @param {string} [timeZone] The time zone. Defaults to UTC if not provided
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySnapshotSummary: (id: string, before?: string, interval?: 'day' | 'month', timeZone?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the start date of the identity
     * @param {string} id The identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityStartDate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the identities
     * @param {string} [startsWithQuery] This param is used for starts-with search for first, last and display name of the identity
     * @param {boolean} [isDeleted] Indicates if we want to only list down deleted identities or not.
     * @param {boolean} [isActive] Indicates if we want to only list active or inactive identities.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listHistoricalIdentities: (startsWithQuery?: string, isDeleted?: boolean, isActive?: boolean, limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of access items for the identity filtered by item type
     * @param {string} id The identity id
     * @param {string} [type] The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
     * @param {string} [query] This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAccessItems: (id: string, type?: string, filters?: string, sorters?: string, query?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a list of identity access items at a specified date, filtered by item type.
     * @summary Get Identity Access Items Snapshot
     * @param {string} id Identity ID.
     * @param {string} date Specified date.
     * @param {string} [type] Access item type.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySnapshotAccessItems: (id: string, date: string, type?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the snapshots for the identity
     * @param {string} id The identity id
     * @param {string} [start] The specified start date
     * @param {'day' | 'month'} [interval] The interval indicating the range in day or month for the specified interval-name
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySnapshots: (id: string, start?: string, interval?: 'day' | 'month', limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IdentityHistoryBetaApi - functional programming interface
 * @export
 */
export declare const IdentityHistoryBetaApiFp: (configuration?: Configuration) => {
    /**
     * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
     * @param {string} id The identity id
     * @param {string} [snapshot1] The snapshot 1 of identity
     * @param {string} [snapshot2] The snapshot 2 of identity
     * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    compareIdentitySnapshots(id: string, snapshot1?: string, snapshot2?: string, accessItemTypes?: Array<string>, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityCompareResponseBeta>>>;
    /**
     * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
     * @param {string} id The identity id
     * @param {string} accessType The specific type which needs to be compared
     * @param {boolean} [accessAssociated] Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
     * @param {string} [snapshot1] The snapshot 1 of identity
     * @param {string} [snapshot2] The snapshot 2 of identity
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    compareIdentitySnapshotsAccessType(id: string, accessType: string, accessAssociated?: boolean, snapshot1?: string, snapshot2?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccessItemDiffBeta>>>;
    /**
     * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Get latest snapshot of identity
     * @param {string} id The identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getHistoricalIdentity(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityHistoryResponseBeta>>;
    /**
     * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all events for the given identity
     * @param {string} id The identity id
     * @param {string} [from] The optional instant until which access events are returned
     * @param {Array<string>} [eventTypes] An optional list of event types to return.  If null or empty, all events are returned
     * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getHistoricalIdentityEvents(id: string, from?: string, eventTypes?: Array<string>, accessItemTypes?: Array<string>, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetHistoricalIdentityEvents200ResponseInnerBeta>>>;
    /**
     * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets an identity snapshot at a given date
     * @param {string} id The identity id
     * @param {string} date The specified date
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySnapshot(id: string, date: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityHistoryResponseBeta>>;
    /**
     * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the summary for the event count for a specific identity
     * @param {string} id The identity id
     * @param {string} [before] The date before which snapshot summary is required
     * @param {'day' | 'month'} [interval] The interval indicating day or month. Defaults to month if not specified
     * @param {string} [timeZone] The time zone. Defaults to UTC if not provided
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySnapshotSummary(id: string, before?: string, interval?: 'day' | 'month', timeZone?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MetricResponseBeta>>>;
    /**
     * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the start date of the identity
     * @param {string} id The identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityStartDate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the identities
     * @param {string} [startsWithQuery] This param is used for starts-with search for first, last and display name of the identity
     * @param {boolean} [isDeleted] Indicates if we want to only list down deleted identities or not.
     * @param {boolean} [isActive] Indicates if we want to only list active or inactive identities.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listHistoricalIdentities(startsWithQuery?: string, isDeleted?: boolean, isActive?: boolean, limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityListItemBeta>>>;
    /**
     * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of access items for the identity filtered by item type
     * @param {string} id The identity id
     * @param {string} [type] The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
     * @param {string} [query] This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAccessItems(id: string, type?: string, filters?: string, sorters?: string, query?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListIdentityAccessItems200ResponseInnerBeta>>>;
    /**
     * Use this API to get a list of identity access items at a specified date, filtered by item type.
     * @summary Get Identity Access Items Snapshot
     * @param {string} id Identity ID.
     * @param {string} date Specified date.
     * @param {string} [type] Access item type.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySnapshotAccessItems(id: string, date: string, type?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListIdentityAccessItems200ResponseInnerBeta>>>;
    /**
     * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the snapshots for the identity
     * @param {string} id The identity id
     * @param {string} [start] The specified start date
     * @param {'day' | 'month'} [interval] The interval indicating the range in day or month for the specified interval-name
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySnapshots(id: string, start?: string, interval?: 'day' | 'month', limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentitySnapshotSummaryResponseBeta>>>;
};
/**
 * IdentityHistoryBetaApi - factory interface
 * @export
 */
export declare const IdentityHistoryBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
     * @param {string} id The identity id
     * @param {string} [snapshot1] The snapshot 1 of identity
     * @param {string} [snapshot2] The snapshot 2 of identity
     * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    compareIdentitySnapshots(id: string, snapshot1?: string, snapshot2?: string, accessItemTypes?: Array<string>, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<IdentityCompareResponseBeta>>;
    /**
     * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
     * @param {string} id The identity id
     * @param {string} accessType The specific type which needs to be compared
     * @param {boolean} [accessAssociated] Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
     * @param {string} [snapshot1] The snapshot 1 of identity
     * @param {string} [snapshot2] The snapshot 2 of identity
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    compareIdentitySnapshotsAccessType(id: string, accessType: string, accessAssociated?: boolean, snapshot1?: string, snapshot2?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<AccessItemDiffBeta>>;
    /**
     * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Get latest snapshot of identity
     * @param {string} id The identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getHistoricalIdentity(id: string, axiosOptions?: any): AxiosPromise<IdentityHistoryResponseBeta>;
    /**
     * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all events for the given identity
     * @param {string} id The identity id
     * @param {string} [from] The optional instant until which access events are returned
     * @param {Array<string>} [eventTypes] An optional list of event types to return.  If null or empty, all events are returned
     * @param {Array<string>} [accessItemTypes] An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getHistoricalIdentityEvents(id: string, from?: string, eventTypes?: Array<string>, accessItemTypes?: Array<string>, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<GetHistoricalIdentityEvents200ResponseInnerBeta>>;
    /**
     * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets an identity snapshot at a given date
     * @param {string} id The identity id
     * @param {string} date The specified date
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySnapshot(id: string, date: string, axiosOptions?: any): AxiosPromise<IdentityHistoryResponseBeta>;
    /**
     * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the summary for the event count for a specific identity
     * @param {string} id The identity id
     * @param {string} [before] The date before which snapshot summary is required
     * @param {'day' | 'month'} [interval] The interval indicating day or month. Defaults to month if not specified
     * @param {string} [timeZone] The time zone. Defaults to UTC if not provided
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentitySnapshotSummary(id: string, before?: string, interval?: 'day' | 'month', timeZone?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<MetricResponseBeta>>;
    /**
     * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the start date of the identity
     * @param {string} id The identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityStartDate(id: string, axiosOptions?: any): AxiosPromise<string>;
    /**
     * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the identities
     * @param {string} [startsWithQuery] This param is used for starts-with search for first, last and display name of the identity
     * @param {boolean} [isDeleted] Indicates if we want to only list down deleted identities or not.
     * @param {boolean} [isActive] Indicates if we want to only list active or inactive identities.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listHistoricalIdentities(startsWithQuery?: string, isDeleted?: boolean, isActive?: boolean, limit?: number, offset?: number, axiosOptions?: any): AxiosPromise<Array<IdentityListItemBeta>>;
    /**
     * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of access items for the identity filtered by item type
     * @param {string} id The identity id
     * @param {string} [type] The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
     * @param {string} [query] This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityAccessItems(id: string, type?: string, filters?: string, sorters?: string, query?: string, axiosOptions?: any): AxiosPromise<Array<ListIdentityAccessItems200ResponseInnerBeta>>;
    /**
     * Use this API to get a list of identity access items at a specified date, filtered by item type.
     * @summary Get Identity Access Items Snapshot
     * @param {string} id Identity ID.
     * @param {string} date Specified date.
     * @param {string} [type] Access item type.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySnapshotAccessItems(id: string, date: string, type?: string, axiosOptions?: any): AxiosPromise<Array<ListIdentityAccessItems200ResponseInnerBeta>>;
    /**
     * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the snapshots for the identity
     * @param {string} id The identity id
     * @param {string} [start] The specified start date
     * @param {'day' | 'month'} [interval] The interval indicating the range in day or month for the specified interval-name
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentitySnapshots(id: string, start?: string, interval?: 'day' | 'month', limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<IdentitySnapshotSummaryResponseBeta>>;
};
/**
 * Request parameters for compareIdentitySnapshots operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiCompareIdentitySnapshotsRequest
 */
export interface IdentityHistoryBetaApiCompareIdentitySnapshotsRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly id: string;
    /**
     * The snapshot 1 of identity
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly snapshot1?: string;
    /**
     * The snapshot 2 of identity
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly snapshot2?: string;
    /**
     * An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @type {Array<string>}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly accessItemTypes?: Array<string>;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshots
     */
    readonly count?: boolean;
}
/**
 * Request parameters for compareIdentitySnapshotsAccessType operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiCompareIdentitySnapshotsAccessTypeRequest
 */
export interface IdentityHistoryBetaApiCompareIdentitySnapshotsAccessTypeRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly id: string;
    /**
     * The specific type which needs to be compared
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly accessType: string;
    /**
     * Indicates if added or removed access needs to be returned. true - added, false - removed, null - both added &amp; removed
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly accessAssociated?: boolean;
    /**
     * The snapshot 1 of identity
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly snapshot1?: string;
    /**
     * The snapshot 2 of identity
     * @type {string}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly snapshot2?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiCompareIdentitySnapshotsAccessType
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getHistoricalIdentity operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiGetHistoricalIdentityRequest
 */
export interface IdentityHistoryBetaApiGetHistoricalIdentityRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentity
     */
    readonly id: string;
}
/**
 * Request parameters for getHistoricalIdentityEvents operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiGetHistoricalIdentityEventsRequest
 */
export interface IdentityHistoryBetaApiGetHistoricalIdentityEventsRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly id: string;
    /**
     * The optional instant until which access events are returned
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly from?: string;
    /**
     * An optional list of event types to return.  If null or empty, all events are returned
     * @type {Array<string>}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly eventTypes?: Array<string>;
    /**
     * An optional list of access item types (app, account, entitlement, etc...) to return.   If null or empty, all access items types are returned
     * @type {Array<string>}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly accessItemTypes?: Array<string>;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiGetHistoricalIdentityEvents
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getIdentitySnapshot operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiGetIdentitySnapshotRequest
 */
export interface IdentityHistoryBetaApiGetIdentitySnapshotRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshot
     */
    readonly id: string;
    /**
     * The specified date
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshot
     */
    readonly date: string;
}
/**
 * Request parameters for getIdentitySnapshotSummary operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiGetIdentitySnapshotSummaryRequest
 */
export interface IdentityHistoryBetaApiGetIdentitySnapshotSummaryRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly id: string;
    /**
     * The date before which snapshot summary is required
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly before?: string;
    /**
     * The interval indicating day or month. Defaults to month if not specified
     * @type {'day' | 'month'}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly interval?: 'day' | 'month';
    /**
     * The time zone. Defaults to UTC if not provided
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly timeZone?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiGetIdentitySnapshotSummary
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getIdentityStartDate operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiGetIdentityStartDateRequest
 */
export interface IdentityHistoryBetaApiGetIdentityStartDateRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiGetIdentityStartDate
     */
    readonly id: string;
}
/**
 * Request parameters for listHistoricalIdentities operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiListHistoricalIdentitiesRequest
 */
export interface IdentityHistoryBetaApiListHistoricalIdentitiesRequest {
    /**
     * This param is used for starts-with search for first, last and display name of the identity
     * @type {string}
     * @memberof IdentityHistoryBetaApiListHistoricalIdentities
     */
    readonly startsWithQuery?: string;
    /**
     * Indicates if we want to only list down deleted identities or not.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiListHistoricalIdentities
     */
    readonly isDeleted?: boolean;
    /**
     * Indicates if we want to only list active or inactive identities.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiListHistoricalIdentities
     */
    readonly isActive?: boolean;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiListHistoricalIdentities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiListHistoricalIdentities
     */
    readonly offset?: number;
}
/**
 * Request parameters for listIdentityAccessItems operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiListIdentityAccessItemsRequest
 */
export interface IdentityHistoryBetaApiListIdentityAccessItemsRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentityAccessItems
     */
    readonly id: string;
    /**
     * The type of access item for the identity. If not provided, it defaults to account.  Types of access items: **accessProfile, account, app, entitlement, role**
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentityAccessItems
     */
    readonly type?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **source**: *eq*  **standalone**: *eq*  **privileged**: *eq*  **attribute**: *eq*  **cloudGoverned**: *eq*
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentityAccessItems
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, value, standalone, privileged, attribute, source, cloudGoverned, removeDate, nativeIdentity, entitlementCount**
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentityAccessItems
     */
    readonly sorters?: string;
    /**
     * This param is used to search if certain fields of the access item contain the string provided.  Searching is supported for the following fields depending on the type:  Access Profiles: **name, description**  Accounts: **name, nativeIdentity**  Apps: **name**  Entitlements: **name, value, description**  Roles: **name, description**
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentityAccessItems
     */
    readonly query?: string;
}
/**
 * Request parameters for listIdentitySnapshotAccessItems operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiListIdentitySnapshotAccessItemsRequest
 */
export interface IdentityHistoryBetaApiListIdentitySnapshotAccessItemsRequest {
    /**
     * Identity ID.
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshotAccessItems
     */
    readonly id: string;
    /**
     * Specified date.
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshotAccessItems
     */
    readonly date: string;
    /**
     * Access item type.
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshotAccessItems
     */
    readonly type?: string;
}
/**
 * Request parameters for listIdentitySnapshots operation in IdentityHistoryBetaApi.
 * @export
 * @interface IdentityHistoryBetaApiListIdentitySnapshotsRequest
 */
export interface IdentityHistoryBetaApiListIdentitySnapshotsRequest {
    /**
     * The identity id
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshots
     */
    readonly id: string;
    /**
     * The specified start date
     * @type {string}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshots
     */
    readonly start?: string;
    /**
     * The interval indicating the range in day or month for the specified interval-name
     * @type {'day' | 'month'}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshots
     */
    readonly interval?: 'day' | 'month';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshots
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshots
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityHistoryBetaApiListIdentitySnapshots
     */
    readonly count?: boolean;
}
/**
 * IdentityHistoryBetaApi - object-oriented interface
 * @export
 * @class IdentityHistoryBetaApi
 * @extends {BaseAPI}
 */
export declare class IdentityHistoryBetaApi extends BaseAPI {
    /**
     * This method gets a difference of count for each access item types for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a difference of count for each access item types for the given identity between 2 snapshots
     * @param {IdentityHistoryBetaApiCompareIdentitySnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    compareIdentitySnapshots(requestParameters: IdentityHistoryBetaApiCompareIdentitySnapshotsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityCompareResponseBeta[], any>>;
    /**
     * This method gets a list of differences of specific accessType for the given identity between 2 snapshots Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of differences of specific accessType for the given identity between 2 snapshots
     * @param {IdentityHistoryBetaApiCompareIdentitySnapshotsAccessTypeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    compareIdentitySnapshotsAccessType(requestParameters: IdentityHistoryBetaApiCompareIdentitySnapshotsAccessTypeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccessItemDiffBeta[], any>>;
    /**
     * This method retrieves a specified identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Get latest snapshot of identity
     * @param {IdentityHistoryBetaApiGetHistoricalIdentityRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    getHistoricalIdentity(requestParameters: IdentityHistoryBetaApiGetHistoricalIdentityRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityHistoryResponseBeta, any>>;
    /**
     * This method retrieves all access events for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all events for the given identity
     * @param {IdentityHistoryBetaApiGetHistoricalIdentityEventsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    getHistoricalIdentityEvents(requestParameters: IdentityHistoryBetaApiGetHistoricalIdentityEventsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetHistoricalIdentityEvents200ResponseInnerBeta[], any>>;
    /**
     * This method retrieves a specified identity snapshot at a given date Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets an identity snapshot at a given date
     * @param {IdentityHistoryBetaApiGetIdentitySnapshotRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    getIdentitySnapshot(requestParameters: IdentityHistoryBetaApiGetIdentitySnapshotRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityHistoryResponseBeta, any>>;
    /**
     * This method gets the summary for the event count for a specific identity by month/day Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the summary for the event count for a specific identity
     * @param {IdentityHistoryBetaApiGetIdentitySnapshotSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    getIdentitySnapshotSummary(requestParameters: IdentityHistoryBetaApiGetIdentitySnapshotSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MetricResponseBeta[], any>>;
    /**
     * This method retrieves start date of the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets the start date of the identity
     * @param {IdentityHistoryBetaApiGetIdentityStartDateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    getIdentityStartDate(requestParameters: IdentityHistoryBetaApiGetIdentityStartDateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * This gets the list of identities for the customer. This list end point does not support count=true request param. The total  count of identities would never be returned even if the count param is specified in the request Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the identities
     * @param {IdentityHistoryBetaApiListHistoricalIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    listHistoricalIdentities(requestParameters?: IdentityHistoryBetaApiListHistoricalIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityListItemBeta[], any>>;
    /**
     * This method retrieves a list of access item for the identity filtered by the access item type Requires authorization scope of \'idn:identity-history:read\'
     * @summary Gets a list of access items for the identity filtered by item type
     * @param {IdentityHistoryBetaApiListIdentityAccessItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    listIdentityAccessItems(requestParameters: IdentityHistoryBetaApiListIdentityAccessItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListIdentityAccessItems200ResponseInnerBeta[], any>>;
    /**
     * Use this API to get a list of identity access items at a specified date, filtered by item type.
     * @summary Get Identity Access Items Snapshot
     * @param {IdentityHistoryBetaApiListIdentitySnapshotAccessItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    listIdentitySnapshotAccessItems(requestParameters: IdentityHistoryBetaApiListIdentitySnapshotAccessItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListIdentityAccessItems200ResponseInnerBeta[], any>>;
    /**
     * This method retrieves all the snapshots for the identity Requires authorization scope of \'idn:identity-history:read\'
     * @summary Lists all the snapshots for the identity
     * @param {IdentityHistoryBetaApiListIdentitySnapshotsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityHistoryBetaApi
     */
    listIdentitySnapshots(requestParameters: IdentityHistoryBetaApiListIdentitySnapshotsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentitySnapshotSummaryResponseBeta[], any>>;
}
/**
 * IdentityProfilesBetaApi - axios parameter creator
 * @export
 */
export declare const IdentityProfilesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfileBeta} identityProfileBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityProfile: (identityProfileBeta: IdentityProfileBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfile: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {Array<string>} requestBody Identity Profile bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfiles: (requestBody: Array<string>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportIdentityProfiles: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Default identity attribute config
     * @param {string} identityProfileId The Identity Profile ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultIdentityAttributeConfig: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Gets a single Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProfile: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {Array<IdentityProfileExportedObjectBeta>} identityProfileExportedObjectBeta Previously exported Identity Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importIdentityProfiles: (identityProfileExportedObjectBeta: Array<IdentityProfileExportedObjectBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityProfiles: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityPreviewRequestBeta} identityPreviewRequestBeta Identity Preview request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showGenerateIdentityPreview: (identityPreviewRequestBeta: IdentityPreviewRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {string} identityProfileId The Identity Profile ID to be processed
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncIdentityProfile: (identityProfileId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProfile: (identityProfileId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IdentityProfilesBetaApi - functional programming interface
 * @export
 */
export declare const IdentityProfilesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfileBeta} identityProfileBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityProfile(identityProfileBeta: IdentityProfileBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProfileBeta>>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfile(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultSimplifiedBeta>>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {Array<string>} requestBody Identity Profile bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfiles(requestBody: Array<string>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultSimplifiedBeta>>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityProfileExportedObjectBeta>>>;
    /**
     * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Default identity attribute config
     * @param {string} identityProfileId The Identity Profile ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultIdentityAttributeConfig(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityAttributeConfigBeta>>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Gets a single Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProfile(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProfileBeta>>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {Array<IdentityProfileExportedObjectBeta>} identityProfileExportedObjectBeta Previously exported Identity Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importIdentityProfiles(identityProfileExportedObjectBeta: Array<IdentityProfileExportedObjectBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectImportResultBeta>>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityProfileBeta>>>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityPreviewRequestBeta} identityPreviewRequestBeta Identity Preview request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showGenerateIdentityPreview(identityPreviewRequestBeta: IdentityPreviewRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityPreviewResponseBeta>>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {string} identityProfileId The Identity Profile ID to be processed
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncIdentityProfile(identityProfileId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProfile(identityProfileId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProfileBeta>>;
};
/**
 * IdentityProfilesBetaApi - factory interface
 * @export
 */
export declare const IdentityProfilesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfileBeta} identityProfileBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createIdentityProfile(identityProfileBeta: IdentityProfileBeta, axiosOptions?: any): AxiosPromise<IdentityProfileBeta>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {string} identityProfileId The Identity Profile ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfile(identityProfileId: string, axiosOptions?: any): AxiosPromise<TaskResultSimplifiedBeta>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {Array<string>} requestBody Identity Profile bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteIdentityProfiles(requestBody: Array<string>, axiosOptions?: any): AxiosPromise<TaskResultSimplifiedBeta>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityProfileExportedObjectBeta>>;
    /**
     * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Default identity attribute config
     * @param {string} identityProfileId The Identity Profile ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDefaultIdentityAttributeConfig(identityProfileId: string, axiosOptions?: any): AxiosPromise<IdentityAttributeConfigBeta>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Gets a single Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityProfile(identityProfileId: string, axiosOptions?: any): AxiosPromise<IdentityProfileBeta>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {Array<IdentityProfileExportedObjectBeta>} identityProfileExportedObjectBeta Previously exported Identity Profiles.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importIdentityProfiles(identityProfileExportedObjectBeta: Array<IdentityProfileExportedObjectBeta>, axiosOptions?: any): AxiosPromise<ObjectImportResultBeta>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listIdentityProfiles(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<IdentityProfileBeta>>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityPreviewRequestBeta} identityPreviewRequestBeta Identity Preview request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    showGenerateIdentityPreview(identityPreviewRequestBeta: IdentityPreviewRequestBeta, axiosOptions?: any): AxiosPromise<IdentityPreviewResponseBeta>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {string} identityProfileId The Identity Profile ID to be processed
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncIdentityProfile(identityProfileId: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {string} identityProfileId The Identity Profile ID
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateIdentityProfile(identityProfileId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<IdentityProfileBeta>;
};
/**
 * Request parameters for createIdentityProfile operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiCreateIdentityProfileRequest
 */
export interface IdentityProfilesBetaApiCreateIdentityProfileRequest {
    /**
     *
     * @type {IdentityProfileBeta}
     * @memberof IdentityProfilesBetaApiCreateIdentityProfile
     */
    readonly identityProfileBeta: IdentityProfileBeta;
}
/**
 * Request parameters for deleteIdentityProfile operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiDeleteIdentityProfileRequest
 */
export interface IdentityProfilesBetaApiDeleteIdentityProfileRequest {
    /**
     * The Identity Profile ID.
     * @type {string}
     * @memberof IdentityProfilesBetaApiDeleteIdentityProfile
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for deleteIdentityProfiles operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiDeleteIdentityProfilesRequest
 */
export interface IdentityProfilesBetaApiDeleteIdentityProfilesRequest {
    /**
     * Identity Profile bulk delete request body.
     * @type {Array<string>}
     * @memberof IdentityProfilesBetaApiDeleteIdentityProfiles
     */
    readonly requestBody: Array<string>;
}
/**
 * Request parameters for exportIdentityProfiles operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiExportIdentityProfilesRequest
 */
export interface IdentityProfilesBetaApiExportIdentityProfilesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesBetaApiExportIdentityProfiles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesBetaApiExportIdentityProfiles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityProfilesBetaApiExportIdentityProfiles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne*  **name**: *eq, ne*  **priority**: *eq, ne*
     * @type {string}
     * @memberof IdentityProfilesBetaApiExportIdentityProfiles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority**
     * @type {string}
     * @memberof IdentityProfilesBetaApiExportIdentityProfiles
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getDefaultIdentityAttributeConfig operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiGetDefaultIdentityAttributeConfigRequest
 */
export interface IdentityProfilesBetaApiGetDefaultIdentityAttributeConfigRequest {
    /**
     * The Identity Profile ID
     * @type {string}
     * @memberof IdentityProfilesBetaApiGetDefaultIdentityAttributeConfig
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for getIdentityProfile operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiGetIdentityProfileRequest
 */
export interface IdentityProfilesBetaApiGetIdentityProfileRequest {
    /**
     * The Identity Profile ID
     * @type {string}
     * @memberof IdentityProfilesBetaApiGetIdentityProfile
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for importIdentityProfiles operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiImportIdentityProfilesRequest
 */
export interface IdentityProfilesBetaApiImportIdentityProfilesRequest {
    /**
     * Previously exported Identity Profiles.
     * @type {Array<IdentityProfileExportedObjectBeta>}
     * @memberof IdentityProfilesBetaApiImportIdentityProfiles
     */
    readonly identityProfileExportedObjectBeta: Array<IdentityProfileExportedObjectBeta>;
}
/**
 * Request parameters for listIdentityProfiles operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiListIdentityProfilesRequest
 */
export interface IdentityProfilesBetaApiListIdentityProfilesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesBetaApiListIdentityProfiles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof IdentityProfilesBetaApiListIdentityProfiles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof IdentityProfilesBetaApiListIdentityProfiles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ne, ge, gt, in, le, lt, isnull, sw*  **name**: *eq, ne, in, le, lt, isnull, sw*  **priority**: *eq, ne*
     * @type {string}
     * @memberof IdentityProfilesBetaApiListIdentityProfiles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, priority, created, modified, owner.id, owner.name**
     * @type {string}
     * @memberof IdentityProfilesBetaApiListIdentityProfiles
     */
    readonly sorters?: string;
}
/**
 * Request parameters for showGenerateIdentityPreview operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiShowGenerateIdentityPreviewRequest
 */
export interface IdentityProfilesBetaApiShowGenerateIdentityPreviewRequest {
    /**
     * Identity Preview request body.
     * @type {IdentityPreviewRequestBeta}
     * @memberof IdentityProfilesBetaApiShowGenerateIdentityPreview
     */
    readonly identityPreviewRequestBeta: IdentityPreviewRequestBeta;
}
/**
 * Request parameters for syncIdentityProfile operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiSyncIdentityProfileRequest
 */
export interface IdentityProfilesBetaApiSyncIdentityProfileRequest {
    /**
     * The Identity Profile ID to be processed
     * @type {string}
     * @memberof IdentityProfilesBetaApiSyncIdentityProfile
     */
    readonly identityProfileId: string;
}
/**
 * Request parameters for updateIdentityProfile operation in IdentityProfilesBetaApi.
 * @export
 * @interface IdentityProfilesBetaApiUpdateIdentityProfileRequest
 */
export interface IdentityProfilesBetaApiUpdateIdentityProfileRequest {
    /**
     * The Identity Profile ID
     * @type {string}
     * @memberof IdentityProfilesBetaApiUpdateIdentityProfile
     */
    readonly identityProfileId: string;
    /**
     * A list of Identity Profile update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof IdentityProfilesBetaApiUpdateIdentityProfile
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * IdentityProfilesBetaApi - object-oriented interface
 * @export
 * @class IdentityProfilesBetaApi
 * @extends {BaseAPI}
 */
export declare class IdentityProfilesBetaApi extends BaseAPI {
    /**
     * This creates an Identity Profile.  A token with ORG_ADMIN authority is required to call this API to create an Identity Profile.
     * @summary Create an Identity Profile
     * @param {IdentityProfilesBetaApiCreateIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    createIdentityProfile(requestParameters: IdentityProfilesBetaApiCreateIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfileBeta, any>>;
    /**
     * This deletes an Identity Profile based on ID.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete an Identity Profile
     * @param {IdentityProfilesBetaApiDeleteIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    deleteIdentityProfile(requestParameters: IdentityProfilesBetaApiDeleteIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultSimplifiedBeta, any>>;
    /**
     * This deletes multiple Identity Profiles via a list of supplied IDs.  On success, this endpoint will return a reference to the bulk delete task result.  A token with ORG_ADMIN authority is required to call this API.  The following rights are required to access this endpoint: idn:identity-profile:delete
     * @summary Delete Identity Profiles
     * @param {IdentityProfilesBetaApiDeleteIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    deleteIdentityProfiles(requestParameters: IdentityProfilesBetaApiDeleteIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultSimplifiedBeta, any>>;
    /**
     * This exports existing identity profiles in the format specified by the sp-config service.
     * @summary Export Identity Profiles
     * @param {IdentityProfilesBetaApiExportIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    exportIdentityProfiles(requestParameters?: IdentityProfilesBetaApiExportIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfileExportedObjectBeta[], any>>;
    /**
     * This returns the default identity attribute config A token with ORG_ADMIN authority is required to call this API to get the default identity attribute config.
     * @summary Default identity attribute config
     * @param {IdentityProfilesBetaApiGetDefaultIdentityAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    getDefaultIdentityAttributeConfig(requestParameters: IdentityProfilesBetaApiGetDefaultIdentityAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityAttributeConfigBeta, any>>;
    /**
     * This returns a single Identity Profile based on ID.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Gets a single Identity Profile
     * @param {IdentityProfilesBetaApiGetIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    getIdentityProfile(requestParameters: IdentityProfilesBetaApiGetIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfileBeta, any>>;
    /**
     * This imports previously exported identity profiles.
     * @summary Import Identity Profiles
     * @param {IdentityProfilesBetaApiImportIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    importIdentityProfiles(requestParameters: IdentityProfilesBetaApiImportIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ObjectImportResultBeta, any>>;
    /**
     * This returns a list of Identity Profiles based on the specified query parameters. A token with ORG_ADMIN or API authority is required to call this API to get a list of Identity Profiles.
     * @summary Identity Profiles List
     * @param {IdentityProfilesBetaApiListIdentityProfilesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    listIdentityProfiles(requestParameters?: IdentityProfilesBetaApiListIdentityProfilesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfileBeta[], any>>;
    /**
     * Use this API to generate a non-persisted preview of the identity object after applying `IdentityAttributeConfig` sent in request body. This API only allows `accountAttribute`, `reference` and `rule` transform types in the `IdentityAttributeConfig` sent in the request body. A token with ORG_ADMIN authority is required to call this API to generate an identity preview.
     * @summary Generate Identity Profile Preview
     * @param {IdentityProfilesBetaApiShowGenerateIdentityPreviewRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    showGenerateIdentityPreview(requestParameters: IdentityProfilesBetaApiShowGenerateIdentityPreviewRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityPreviewResponseBeta, any>>;
    /**
     * Process identities under the profile This operation should not be used to schedule your own identity processing or to perform system wide identity refreshes. The system will use a combination of [event-based processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#event-based-processing) and [scheduled processing](https://documentation.sailpoint.com/saas/help/setup/identity_processing.html?h=process#scheduled-processing) that runs every day at 8:00 AM and 8:00 PM in the tenant\'s timezone to keep your identities synchronized.  This should only be run on identity profiles that have the `identityRefreshRequired` attribute set to `true`. If `identityRefreshRequired` is false, then there is no benefit to running this operation. Typically, this operation is performed when a change is made to the identity profile or its related lifecycle states that requires a refresh. This operation will perform the following activities on all identities under the identity profile. 1. Updates identity attribute according to the identity profile mappings. 2. Determines the identity\'s correct manager through manager correlation. 3. Updates the identity\'s access according to their assigned lifecycle state. 4. Updates the identity\'s access based on role assignment criteria. A token with ORG_ADMIN authority is required to call this API.
     * @summary Process identities under profile
     * @param {IdentityProfilesBetaApiSyncIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    syncIdentityProfile(requestParameters: IdentityProfilesBetaApiSyncIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This updates the specified Identity Profile.  A token with ORG_ADMIN authority is required to call this API to update the Identity Profile.  Some fields of the Schema cannot be updated. These fields are listed below: * id * name * created * modified * identityCount * identityRefreshRequired * Authoritative Source and Identity Attribute Configuration cannot be modified at once.
     * @summary Update the Identity Profile
     * @param {IdentityProfilesBetaApiUpdateIdentityProfileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProfilesBetaApi
     */
    updateIdentityProfile(requestParameters: IdentityProfilesBetaApiUpdateIdentityProfileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdentityProfileBeta, any>>;
}
/**
 * LifecycleStatesBetaApi - axios parameter creator
 * @export
 */
export declare const LifecycleStatesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {string} identityProfileId Identity Profile ID.
     * @param {string} lifecycleStateId Lifecycle State ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleStates: (identityProfileId: string, lifecycleStateId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {string} identityProfileId Identity Profile ID.
     * @param {string} lifecycleStateId Lifecycle State ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateLifecycleStates: (identityProfileId: string, lifecycleStateId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LifecycleStatesBetaApi - functional programming interface
 * @export
 */
export declare const LifecycleStatesBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {string} identityProfileId Identity Profile ID.
     * @param {string} lifecycleStateId Lifecycle State ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleStates(identityProfileId: string, lifecycleStateId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifecycleStateBeta>>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {string} identityProfileId Identity Profile ID.
     * @param {string} lifecycleStateId Lifecycle State ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateLifecycleStates(identityProfileId: string, lifecycleStateId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LifecycleStateBeta>>;
};
/**
 * LifecycleStatesBetaApi - factory interface
 * @export
 */
export declare const LifecycleStatesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {string} identityProfileId Identity Profile ID.
     * @param {string} lifecycleStateId Lifecycle State ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getLifecycleStates(identityProfileId: string, lifecycleStateId: string, axiosOptions?: any): AxiosPromise<LifecycleStateBeta>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {string} identityProfileId Identity Profile ID.
     * @param {string} lifecycleStateId Lifecycle State ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateLifecycleStates(identityProfileId: string, lifecycleStateId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<LifecycleStateBeta>;
};
/**
 * Request parameters for getLifecycleStates operation in LifecycleStatesBetaApi.
 * @export
 * @interface LifecycleStatesBetaApiGetLifecycleStatesRequest
 */
export interface LifecycleStatesBetaApiGetLifecycleStatesRequest {
    /**
     * Identity Profile ID.
     * @type {string}
     * @memberof LifecycleStatesBetaApiGetLifecycleStates
     */
    readonly identityProfileId: string;
    /**
     * Lifecycle State ID.
     * @type {string}
     * @memberof LifecycleStatesBetaApiGetLifecycleStates
     */
    readonly lifecycleStateId: string;
}
/**
 * Request parameters for updateLifecycleStates operation in LifecycleStatesBetaApi.
 * @export
 * @interface LifecycleStatesBetaApiUpdateLifecycleStatesRequest
 */
export interface LifecycleStatesBetaApiUpdateLifecycleStatesRequest {
    /**
     * Identity Profile ID.
     * @type {string}
     * @memberof LifecycleStatesBetaApiUpdateLifecycleStates
     */
    readonly identityProfileId: string;
    /**
     * Lifecycle State ID.
     * @type {string}
     * @memberof LifecycleStatesBetaApiUpdateLifecycleStates
     */
    readonly lifecycleStateId: string;
    /**
     * A list of lifecycle state update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields can be updated: * enabled * description * accountActions * accessProfileIds * emailNotificationOption
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof LifecycleStatesBetaApiUpdateLifecycleStates
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * LifecycleStatesBetaApi - object-oriented interface
 * @export
 * @class LifecycleStatesBetaApi
 * @extends {BaseAPI}
 */
export declare class LifecycleStatesBetaApi extends BaseAPI {
    /**
     * Use this endpoint to get a lifecycle state by its ID and its associated identity profile ID.   A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Lifecycle State
     * @param {LifecycleStatesBetaApiGetLifecycleStatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesBetaApi
     */
    getLifecycleStates(requestParameters: LifecycleStatesBetaApiGetLifecycleStatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecycleStateBeta, any>>;
    /**
     * Use this endpoint to update individual lifecycle state fields, using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Lifecycle State
     * @param {LifecycleStatesBetaApiUpdateLifecycleStatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof LifecycleStatesBetaApi
     */
    updateLifecycleStates(requestParameters: LifecycleStatesBetaApiUpdateLifecycleStatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LifecycleStateBeta, any>>;
}
/**
 * MFAConfigurationBetaApi - axios parameter creator
 * @export
 */
export declare const MFAConfigurationBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteMFAConfig: (method: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFADuoConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAKbaConfig: (allLanguages?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAOktaConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MfaDuoConfigBeta} mfaDuoConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFADuoConfig: (mfaDuoConfigBeta: MfaDuoConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAKBAConfig: (kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MfaOktaConfigBeta} mfaOktaConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAOktaConfig: (mfaOktaConfigBeta: MfaOktaConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testMFAConfig: (method: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MFAConfigurationBetaApi - functional programming interface
 * @export
 */
export declare const MFAConfigurationBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteMFAConfig(method: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaOktaConfigBeta>>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFADuoConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaDuoConfigBeta>>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAKbaConfig(allLanguages?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KbaQuestionBeta>>>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAOktaConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaOktaConfigBeta>>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MfaDuoConfigBeta} mfaDuoConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFADuoConfig(mfaDuoConfigBeta: MfaDuoConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaDuoConfigBeta>>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAKBAConfig(kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KbaAnswerResponseItemBeta>>>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MfaOktaConfigBeta} mfaOktaConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAOktaConfig(mfaOktaConfigBeta: MfaOktaConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaOktaConfigBeta>>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testMFAConfig(method: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MfaConfigTestResponseBeta>>;
};
/**
 * MFAConfigurationBetaApi - factory interface
 * @export
 */
export declare const MFAConfigurationBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteMFAConfig(method: string, axiosOptions?: any): AxiosPromise<MfaOktaConfigBeta>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFADuoConfig(axiosOptions?: any): AxiosPromise<MfaDuoConfigBeta>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {boolean} [allLanguages] Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAKbaConfig(allLanguages?: boolean, axiosOptions?: any): AxiosPromise<Array<KbaQuestionBeta>>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMFAOktaConfig(axiosOptions?: any): AxiosPromise<MfaOktaConfigBeta>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MfaDuoConfigBeta} mfaDuoConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFADuoConfig(mfaDuoConfigBeta: MfaDuoConfigBeta, axiosOptions?: any): AxiosPromise<MfaDuoConfigBeta>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAKBAConfig(kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>, axiosOptions?: any): AxiosPromise<Array<KbaAnswerResponseItemBeta>>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MfaOktaConfigBeta} mfaOktaConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setMFAOktaConfig(mfaOktaConfigBeta: MfaOktaConfigBeta, axiosOptions?: any): AxiosPromise<MfaOktaConfigBeta>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testMFAConfig(method: string, axiosOptions?: any): AxiosPromise<MfaConfigTestResponseBeta>;
};
/**
 * Request parameters for deleteMFAConfig operation in MFAConfigurationBetaApi.
 * @export
 * @interface MFAConfigurationBetaApiDeleteMFAConfigRequest
 */
export interface MFAConfigurationBetaApiDeleteMFAConfigRequest {
    /**
     * The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @type {string}
     * @memberof MFAConfigurationBetaApiDeleteMFAConfig
     */
    readonly method: string;
}
/**
 * Request parameters for getMFAKbaConfig operation in MFAConfigurationBetaApi.
 * @export
 * @interface MFAConfigurationBetaApiGetMFAKbaConfigRequest
 */
export interface MFAConfigurationBetaApiGetMFAKbaConfigRequest {
    /**
     * Indicator whether the question text should be returned in all configured languages    * If true, the question text is returned in all languages that it is configured in.    * If false, the question text is returned in the user locale if available, else for the default locale.     * If not passed, it behaves the same way as passing this parameter as false
     * @type {boolean}
     * @memberof MFAConfigurationBetaApiGetMFAKbaConfig
     */
    readonly allLanguages?: boolean;
}
/**
 * Request parameters for setMFADuoConfig operation in MFAConfigurationBetaApi.
 * @export
 * @interface MFAConfigurationBetaApiSetMFADuoConfigRequest
 */
export interface MFAConfigurationBetaApiSetMFADuoConfigRequest {
    /**
     *
     * @type {MfaDuoConfigBeta}
     * @memberof MFAConfigurationBetaApiSetMFADuoConfig
     */
    readonly mfaDuoConfigBeta: MfaDuoConfigBeta;
}
/**
 * Request parameters for setMFAKBAConfig operation in MFAConfigurationBetaApi.
 * @export
 * @interface MFAConfigurationBetaApiSetMFAKBAConfigRequest
 */
export interface MFAConfigurationBetaApiSetMFAKBAConfigRequest {
    /**
     *
     * @type {Array<KbaAnswerRequestItemBeta>}
     * @memberof MFAConfigurationBetaApiSetMFAKBAConfig
     */
    readonly kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>;
}
/**
 * Request parameters for setMFAOktaConfig operation in MFAConfigurationBetaApi.
 * @export
 * @interface MFAConfigurationBetaApiSetMFAOktaConfigRequest
 */
export interface MFAConfigurationBetaApiSetMFAOktaConfigRequest {
    /**
     *
     * @type {MfaOktaConfigBeta}
     * @memberof MFAConfigurationBetaApiSetMFAOktaConfig
     */
    readonly mfaOktaConfigBeta: MfaOktaConfigBeta;
}
/**
 * Request parameters for testMFAConfig operation in MFAConfigurationBetaApi.
 * @export
 * @interface MFAConfigurationBetaApiTestMFAConfigRequest
 */
export interface MFAConfigurationBetaApiTestMFAConfigRequest {
    /**
     * The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39; and \&#39;duo-web\&#39;.
     * @type {string}
     * @memberof MFAConfigurationBetaApiTestMFAConfig
     */
    readonly method: string;
}
/**
 * MFAConfigurationBetaApi - object-oriented interface
 * @export
 * @class MFAConfigurationBetaApi
 * @extends {BaseAPI}
 */
export declare class MFAConfigurationBetaApi extends BaseAPI {
    /**
     * This API removes the configuration for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete MFA method configuration
     * @param {MFAConfigurationBetaApiDeleteMFAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    deleteMFAConfig(requestParameters: MFAConfigurationBetaApiDeleteMFAConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaOktaConfigBeta, any>>;
    /**
     * This API returns the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Duo MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    getMFADuoConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaDuoConfigBeta, any>>;
    /**
     * This API returns the KBA configuration for MFA. A token with USER or ORG_ADMIN authority is required to call this API.
     * @summary Configuration of KBA MFA method
     * @param {MFAConfigurationBetaApiGetMFAKbaConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    getMFAKbaConfig(requestParameters?: MFAConfigurationBetaApiGetMFAKbaConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KbaQuestionBeta[], any>>;
    /**
     * This API returns the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configuration of Okta MFA method
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    getMFAOktaConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaOktaConfigBeta, any>>;
    /**
     * This API sets the configuration of an Duo MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Duo MFA configuration
     * @param {MFAConfigurationBetaApiSetMFADuoConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    setMFADuoConfig(requestParameters: MFAConfigurationBetaApiSetMFADuoConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaDuoConfigBeta, any>>;
    /**
     * This API sets answers to challenge questions.  Any configured questions omitted from the request are removed from user KBA configuration. A token with USER authority is required to call this API.
     * @summary Set MFA KBA configuration
     * @param {MFAConfigurationBetaApiSetMFAKBAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    setMFAKBAConfig(requestParameters: MFAConfigurationBetaApiSetMFAKBAConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KbaAnswerResponseItemBeta[], any>>;
    /**
     * This API sets the configuration of an Okta MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Set Okta MFA configuration
     * @param {MFAConfigurationBetaApiSetMFAOktaConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    setMFAOktaConfig(requestParameters: MFAConfigurationBetaApiSetMFAOktaConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaOktaConfigBeta, any>>;
    /**
     * This API validates that the configuration is valid and will properly authenticate with the MFA provider identified by the method path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary MFA method\'s test configuration
     * @param {MFAConfigurationBetaApiTestMFAConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAConfigurationBetaApi
     */
    testMFAConfig(requestParameters: MFAConfigurationBetaApiTestMFAConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MfaConfigTestResponseBeta, any>>;
}
/**
 * MFAControllerBetaApi - axios parameter creator
 * @export
 */
export declare const MFAControllerBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {SendTokenRequestBeta} sendTokenRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSendToken: (sendTokenRequestBeta: SendTokenRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @param {VerificationPollRequestBeta} verificationPollRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingVerificationStatus: (method: string, verificationPollRequestBeta: VerificationPollRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {DuoVerificationRequestBeta} duoVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendDuoVerifyRequest: (duoVerificationRequestBeta: DuoVerificationRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendKbaAnswers: (kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {OktaVerificationRequestBeta} oktaVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendOktaVerifyRequest: (oktaVerificationRequestBeta: OktaVerificationRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {TokenAuthRequestBeta} tokenAuthRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTokenAuthRequest: (tokenAuthRequestBeta: TokenAuthRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MFAControllerBetaApi - functional programming interface
 * @export
 */
export declare const MFAControllerBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {SendTokenRequestBeta} sendTokenRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSendToken(sendTokenRequestBeta: SendTokenRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendTokenResponseBeta>>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @param {VerificationPollRequestBeta} verificationPollRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingVerificationStatus(method: string, verificationPollRequestBeta: VerificationPollRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponseBeta>>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {DuoVerificationRequestBeta} duoVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendDuoVerifyRequest(duoVerificationRequestBeta: DuoVerificationRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponseBeta>>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendKbaAnswers(kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KbaAuthResponseBeta>>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {OktaVerificationRequestBeta} oktaVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendOktaVerifyRequest(oktaVerificationRequestBeta: OktaVerificationRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponseBeta>>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {TokenAuthRequestBeta} tokenAuthRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTokenAuthRequest(tokenAuthRequestBeta: TokenAuthRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthResponseBeta>>;
};
/**
 * MFAControllerBetaApi - factory interface
 * @export
 */
export declare const MFAControllerBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {SendTokenRequestBeta} sendTokenRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSendToken(sendTokenRequestBeta: SendTokenRequestBeta, axiosOptions?: any): AxiosPromise<SendTokenResponseBeta>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {string} method The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @param {VerificationPollRequestBeta} verificationPollRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingVerificationStatus(method: string, verificationPollRequestBeta: VerificationPollRequestBeta, axiosOptions?: any): AxiosPromise<VerificationResponseBeta>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {DuoVerificationRequestBeta} duoVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendDuoVerifyRequest(duoVerificationRequestBeta: DuoVerificationRequestBeta, axiosOptions?: any): AxiosPromise<VerificationResponseBeta>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {Array<KbaAnswerRequestItemBeta>} kbaAnswerRequestItemBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendKbaAnswers(kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>, axiosOptions?: any): AxiosPromise<KbaAuthResponseBeta>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {OktaVerificationRequestBeta} oktaVerificationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendOktaVerifyRequest(oktaVerificationRequestBeta: OktaVerificationRequestBeta, axiosOptions?: any): AxiosPromise<VerificationResponseBeta>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {TokenAuthRequestBeta} tokenAuthRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTokenAuthRequest(tokenAuthRequestBeta: TokenAuthRequestBeta, axiosOptions?: any): AxiosPromise<TokenAuthResponseBeta>;
};
/**
 * Request parameters for createSendToken operation in MFAControllerBetaApi.
 * @export
 * @interface MFAControllerBetaApiCreateSendTokenRequest
 */
export interface MFAControllerBetaApiCreateSendTokenRequest {
    /**
     *
     * @type {SendTokenRequestBeta}
     * @memberof MFAControllerBetaApiCreateSendToken
     */
    readonly sendTokenRequestBeta: SendTokenRequestBeta;
}
/**
 * Request parameters for pingVerificationStatus operation in MFAControllerBetaApi.
 * @export
 * @interface MFAControllerBetaApiPingVerificationStatusRequest
 */
export interface MFAControllerBetaApiPingVerificationStatusRequest {
    /**
     * The name of the MFA method. The currently supported method names are \&#39;okta-verify\&#39;, \&#39;duo-web\&#39;, \&#39;kba\&#39;,\&#39;token\&#39;, \&#39;rsa\&#39;
     * @type {string}
     * @memberof MFAControllerBetaApiPingVerificationStatus
     */
    readonly method: string;
    /**
     *
     * @type {VerificationPollRequestBeta}
     * @memberof MFAControllerBetaApiPingVerificationStatus
     */
    readonly verificationPollRequestBeta: VerificationPollRequestBeta;
}
/**
 * Request parameters for sendDuoVerifyRequest operation in MFAControllerBetaApi.
 * @export
 * @interface MFAControllerBetaApiSendDuoVerifyRequestRequest
 */
export interface MFAControllerBetaApiSendDuoVerifyRequestRequest {
    /**
     *
     * @type {DuoVerificationRequestBeta}
     * @memberof MFAControllerBetaApiSendDuoVerifyRequest
     */
    readonly duoVerificationRequestBeta: DuoVerificationRequestBeta;
}
/**
 * Request parameters for sendKbaAnswers operation in MFAControllerBetaApi.
 * @export
 * @interface MFAControllerBetaApiSendKbaAnswersRequest
 */
export interface MFAControllerBetaApiSendKbaAnswersRequest {
    /**
     *
     * @type {Array<KbaAnswerRequestItemBeta>}
     * @memberof MFAControllerBetaApiSendKbaAnswers
     */
    readonly kbaAnswerRequestItemBeta: Array<KbaAnswerRequestItemBeta>;
}
/**
 * Request parameters for sendOktaVerifyRequest operation in MFAControllerBetaApi.
 * @export
 * @interface MFAControllerBetaApiSendOktaVerifyRequestRequest
 */
export interface MFAControllerBetaApiSendOktaVerifyRequestRequest {
    /**
     *
     * @type {OktaVerificationRequestBeta}
     * @memberof MFAControllerBetaApiSendOktaVerifyRequest
     */
    readonly oktaVerificationRequestBeta: OktaVerificationRequestBeta;
}
/**
 * Request parameters for sendTokenAuthRequest operation in MFAControllerBetaApi.
 * @export
 * @interface MFAControllerBetaApiSendTokenAuthRequestRequest
 */
export interface MFAControllerBetaApiSendTokenAuthRequestRequest {
    /**
     *
     * @type {TokenAuthRequestBeta}
     * @memberof MFAControllerBetaApiSendTokenAuthRequest
     */
    readonly tokenAuthRequestBeta: TokenAuthRequestBeta;
}
/**
 * MFAControllerBetaApi - object-oriented interface
 * @export
 * @class MFAControllerBetaApi
 * @extends {BaseAPI}
 */
export declare class MFAControllerBetaApi extends BaseAPI {
    /**
     * This API send token request.
     * @summary Create and send user token
     * @param {MFAControllerBetaApiCreateSendTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    createSendToken(requestParameters: MFAControllerBetaApiCreateSendTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SendTokenResponseBeta, any>>;
    /**
     * This API poll the VerificationPollRequest for the specified MFA method. A token with ORG_ADMIN authority is required to call this API.
     * @summary Polling MFA method by VerificationPollRequest
     * @param {MFAControllerBetaApiPingVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    pingVerificationStatus(requestParameters: MFAControllerBetaApiPingVerificationStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponseBeta, any>>;
    /**
     * This API Authenticates the user via Duo-Web MFA method.
     * @summary Verifying authentication via Duo method
     * @param {MFAControllerBetaApiSendDuoVerifyRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    sendDuoVerifyRequest(requestParameters: MFAControllerBetaApiSendDuoVerifyRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponseBeta, any>>;
    /**
     * This API Authenticate user in KBA MFA method.
     * @summary Authenticate KBA provided MFA method
     * @param {MFAControllerBetaApiSendKbaAnswersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    sendKbaAnswers(requestParameters: MFAControllerBetaApiSendKbaAnswersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<KbaAuthResponseBeta, any>>;
    /**
     * This API Authenticates the user via Okta-Verify MFA method. Request requires a header called \'slpt-forwarding\', and it must contain a remote IP Address of caller.
     * @summary Verifying authentication via Okta method
     * @param {MFAControllerBetaApiSendOktaVerifyRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    sendOktaVerifyRequest(requestParameters: MFAControllerBetaApiSendOktaVerifyRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponseBeta, any>>;
    /**
     * This API Authenticate user in Token MFA method.
     * @summary Authenticate Token provided MFA method
     * @param {MFAControllerBetaApiSendTokenAuthRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof MFAControllerBetaApi
     */
    sendTokenAuthRequest(requestParameters: MFAControllerBetaApiSendTokenAuthRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TokenAuthResponseBeta, any>>;
}
/**
 * ManagedClientsBetaApi - axios parameter creator
 * @export
 */
export declare const ManagedClientsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve Managed Client Status by ID.
     * @summary Specified Managed Client Status.
     * @param {string} id ID of the Managed Client Status to get
     * @param {ManagedClientTypeBeta} type Type of the Managed Client Status to get
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedClientStatus: (id: string, type: ManagedClientTypeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a status detail passed in from the client
     * @summary Handle status request from client
     * @param {string} id ID of the Managed Client Status to update
     * @param {ManagedClientStatusBeta} managedClientStatusBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateManagedClientStatus: (id: string, managedClientStatusBeta: ManagedClientStatusBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ManagedClientsBetaApi - functional programming interface
 * @export
 */
export declare const ManagedClientsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve Managed Client Status by ID.
     * @summary Specified Managed Client Status.
     * @param {string} id ID of the Managed Client Status to get
     * @param {ManagedClientTypeBeta} type Type of the Managed Client Status to get
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedClientStatus(id: string, type: ManagedClientTypeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClientStatusBeta>>;
    /**
     * Update a status detail passed in from the client
     * @summary Handle status request from client
     * @param {string} id ID of the Managed Client Status to update
     * @param {ManagedClientStatusBeta} managedClientStatusBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateManagedClientStatus(id: string, managedClientStatusBeta: ManagedClientStatusBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClientStatusAggResponseBeta>>;
};
/**
 * ManagedClientsBetaApi - factory interface
 * @export
 */
export declare const ManagedClientsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve Managed Client Status by ID.
     * @summary Specified Managed Client Status.
     * @param {string} id ID of the Managed Client Status to get
     * @param {ManagedClientTypeBeta} type Type of the Managed Client Status to get
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedClientStatus(id: string, type: ManagedClientTypeBeta, axiosOptions?: any): AxiosPromise<ManagedClientStatusBeta>;
    /**
     * Update a status detail passed in from the client
     * @summary Handle status request from client
     * @param {string} id ID of the Managed Client Status to update
     * @param {ManagedClientStatusBeta} managedClientStatusBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updateManagedClientStatus(id: string, managedClientStatusBeta: ManagedClientStatusBeta, axiosOptions?: any): AxiosPromise<ManagedClientStatusAggResponseBeta>;
};
/**
 * Request parameters for getManagedClientStatus operation in ManagedClientsBetaApi.
 * @export
 * @interface ManagedClientsBetaApiGetManagedClientStatusRequest
 */
export interface ManagedClientsBetaApiGetManagedClientStatusRequest {
    /**
     * ID of the Managed Client Status to get
     * @type {string}
     * @memberof ManagedClientsBetaApiGetManagedClientStatus
     */
    readonly id: string;
    /**
     * Type of the Managed Client Status to get
     * @type {ManagedClientTypeBeta}
     * @memberof ManagedClientsBetaApiGetManagedClientStatus
     */
    readonly type: ManagedClientTypeBeta;
}
/**
 * Request parameters for updateManagedClientStatus operation in ManagedClientsBetaApi.
 * @export
 * @interface ManagedClientsBetaApiUpdateManagedClientStatusRequest
 */
export interface ManagedClientsBetaApiUpdateManagedClientStatusRequest {
    /**
     * ID of the Managed Client Status to update
     * @type {string}
     * @memberof ManagedClientsBetaApiUpdateManagedClientStatus
     */
    readonly id: string;
    /**
     *
     * @type {ManagedClientStatusBeta}
     * @memberof ManagedClientsBetaApiUpdateManagedClientStatus
     */
    readonly managedClientStatusBeta: ManagedClientStatusBeta;
}
/**
 * ManagedClientsBetaApi - object-oriented interface
 * @export
 * @class ManagedClientsBetaApi
 * @extends {BaseAPI}
 */
export declare class ManagedClientsBetaApi extends BaseAPI {
    /**
     * Retrieve Managed Client Status by ID.
     * @summary Specified Managed Client Status.
     * @param {ManagedClientsBetaApiGetManagedClientStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClientsBetaApi
     */
    getManagedClientStatus(requestParameters: ManagedClientsBetaApiGetManagedClientStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClientStatusBeta, any>>;
    /**
     * Update a status detail passed in from the client
     * @summary Handle status request from client
     * @param {ManagedClientsBetaApiUpdateManagedClientStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClientsBetaApi
     */
    updateManagedClientStatus(requestParameters: ManagedClientsBetaApiUpdateManagedClientStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClientStatusAggResponseBeta, any>>;
}
/**
 * ManagedClustersBetaApi - axios parameter creator
 * @export
 */
export declare const ManagedClustersBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get managed cluster\'s log configuration.
     * @summary Get managed cluster\'s log configuration
     * @param {string} id ID of ManagedCluster to get log configuration for
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getClientLogConfiguration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified ManagedCluster.
     * @param {string} id ID of the ManagedCluster to get
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedCluster: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedClusters: (offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update managed cluster\'s log configuration
     * @summary Update managed cluster\'s log configuration
     * @param {string} id ID of ManagedCluster to update log configuration for
     * @param {ClientLogConfigurationBeta} clientLogConfigurationBeta ClientLogConfiguration for given ManagedCluster
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putClientLogConfiguration: (id: string, clientLogConfigurationBeta: ClientLogConfigurationBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ManagedClustersBetaApi - functional programming interface
 * @export
 */
export declare const ManagedClustersBetaApiFp: (configuration?: Configuration) => {
    /**
     * Get managed cluster\'s log configuration.
     * @summary Get managed cluster\'s log configuration
     * @param {string} id ID of ManagedCluster to get log configuration for
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getClientLogConfiguration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientLogConfigurationBeta>>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified ManagedCluster.
     * @param {string} id ID of the ManagedCluster to get
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedCluster(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManagedClusterBeta>>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedClusters(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ManagedClusterBeta>>>;
    /**
     * Update managed cluster\'s log configuration
     * @summary Update managed cluster\'s log configuration
     * @param {string} id ID of ManagedCluster to update log configuration for
     * @param {ClientLogConfigurationBeta} clientLogConfigurationBeta ClientLogConfiguration for given ManagedCluster
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putClientLogConfiguration(id: string, clientLogConfigurationBeta: ClientLogConfigurationBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientLogConfigurationBeta>>;
};
/**
 * ManagedClustersBetaApi - factory interface
 * @export
 */
export declare const ManagedClustersBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get managed cluster\'s log configuration.
     * @summary Get managed cluster\'s log configuration
     * @param {string} id ID of ManagedCluster to get log configuration for
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getClientLogConfiguration(id: string, axiosOptions?: any): AxiosPromise<ClientLogConfigurationBeta>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified ManagedCluster.
     * @param {string} id ID of the ManagedCluster to get
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedCluster(id: string, axiosOptions?: any): AxiosPromise<ManagedClusterBeta>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getManagedClusters(offset?: number, limit?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<ManagedClusterBeta>>;
    /**
     * Update managed cluster\'s log configuration
     * @summary Update managed cluster\'s log configuration
     * @param {string} id ID of ManagedCluster to update log configuration for
     * @param {ClientLogConfigurationBeta} clientLogConfigurationBeta ClientLogConfiguration for given ManagedCluster
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putClientLogConfiguration(id: string, clientLogConfigurationBeta: ClientLogConfigurationBeta, axiosOptions?: any): AxiosPromise<ClientLogConfigurationBeta>;
};
/**
 * Request parameters for getClientLogConfiguration operation in ManagedClustersBetaApi.
 * @export
 * @interface ManagedClustersBetaApiGetClientLogConfigurationRequest
 */
export interface ManagedClustersBetaApiGetClientLogConfigurationRequest {
    /**
     * ID of ManagedCluster to get log configuration for
     * @type {string}
     * @memberof ManagedClustersBetaApiGetClientLogConfiguration
     */
    readonly id: string;
}
/**
 * Request parameters for getManagedCluster operation in ManagedClustersBetaApi.
 * @export
 * @interface ManagedClustersBetaApiGetManagedClusterRequest
 */
export interface ManagedClustersBetaApiGetManagedClusterRequest {
    /**
     * ID of the ManagedCluster to get
     * @type {string}
     * @memberof ManagedClustersBetaApiGetManagedCluster
     */
    readonly id: string;
}
/**
 * Request parameters for getManagedClusters operation in ManagedClustersBetaApi.
 * @export
 * @interface ManagedClustersBetaApiGetManagedClustersRequest
 */
export interface ManagedClustersBetaApiGetManagedClustersRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ManagedClustersBetaApiGetManagedClusters
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ManagedClustersBetaApiGetManagedClusters
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ManagedClustersBetaApiGetManagedClusters
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **operational**: *eq*
     * @type {string}
     * @memberof ManagedClustersBetaApiGetManagedClusters
     */
    readonly filters?: string;
}
/**
 * Request parameters for putClientLogConfiguration operation in ManagedClustersBetaApi.
 * @export
 * @interface ManagedClustersBetaApiPutClientLogConfigurationRequest
 */
export interface ManagedClustersBetaApiPutClientLogConfigurationRequest {
    /**
     * ID of ManagedCluster to update log configuration for
     * @type {string}
     * @memberof ManagedClustersBetaApiPutClientLogConfiguration
     */
    readonly id: string;
    /**
     * ClientLogConfiguration for given ManagedCluster
     * @type {ClientLogConfigurationBeta}
     * @memberof ManagedClustersBetaApiPutClientLogConfiguration
     */
    readonly clientLogConfigurationBeta: ClientLogConfigurationBeta;
}
/**
 * ManagedClustersBetaApi - object-oriented interface
 * @export
 * @class ManagedClustersBetaApi
 * @extends {BaseAPI}
 */
export declare class ManagedClustersBetaApi extends BaseAPI {
    /**
     * Get managed cluster\'s log configuration.
     * @summary Get managed cluster\'s log configuration
     * @param {ManagedClustersBetaApiGetClientLogConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    getClientLogConfiguration(requestParameters: ManagedClustersBetaApiGetClientLogConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ClientLogConfigurationBeta, any>>;
    /**
     * Retrieve a ManagedCluster by ID.
     * @summary Get a specified ManagedCluster.
     * @param {ManagedClustersBetaApiGetManagedClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    getManagedCluster(requestParameters: ManagedClustersBetaApiGetManagedClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClusterBeta, any>>;
    /**
     * Retrieve all Managed Clusters for the current Org, based on request context.
     * @summary Retrieve all Managed Clusters.
     * @param {ManagedClustersBetaApiGetManagedClustersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    getManagedClusters(requestParameters?: ManagedClustersBetaApiGetManagedClustersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ManagedClusterBeta[], any>>;
    /**
     * Update managed cluster\'s log configuration
     * @summary Update managed cluster\'s log configuration
     * @param {ManagedClustersBetaApiPutClientLogConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ManagedClustersBetaApi
     */
    putClientLogConfiguration(requestParameters: ManagedClustersBetaApiPutClientLogConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ClientLogConfigurationBeta, any>>;
}
/**
 * NonEmployeeLifecycleManagementBetaApi - axios parameter creator
 * @export
 */
export declare const NonEmployeeLifecycleManagementBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Approve a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeApprovalDecisionBeta} nonEmployeeApprovalDecisionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveNonEmployeeRequest: (id: string, nonEmployeeApprovalDecisionBeta: NonEmployeeApprovalDecisionBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Record
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee record creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRecord: (nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will create a non-employee request and notify the approver
     * @summary Create Non-Employee Request
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee creation request body
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRequest: (nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Source
     * @param {NonEmployeeSourceRequestBodyBeta} nonEmployeeSourceRequestBodyBeta Non-Employee source creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSource: (nonEmployeeSourceRequestBodyBeta: NonEmployeeSourceRequestBodyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
     * @summary Create Non-Employee Source Schema Attribute
     * @param {string} sourceId The Source id
     * @param {NonEmployeeSchemaAttributeBodyBeta} nonEmployeeSchemaAttributeBodyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSourceSchemaAttributes: (sourceId: string, nonEmployeeSchemaAttributeBodyBeta: NonEmployeeSchemaAttributeBodyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete a non-employee record.
     * @summary Delete Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecord: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
     * @summary Delete Multiple Non-Employee Records
     * @param {DeleteNonEmployeeRecordInBulkRequestBeta} deleteNonEmployeeRecordInBulkRequestBeta Non-Employee bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecordInBulk: (deleteNonEmployeeRecordInBulkRequestBeta: DeleteNonEmployeeRecordInBulkRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete a non-employee request.
     * @summary Delete Non-Employee Request
     * @param {string} id Non-Employee request id in the UUID format
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRequest: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source.
     * @summary Delete Non-Employee Source\'s Schema Attribute
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSchemaAttribute: (attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will delete a non-employee source.
     * @summary Delete Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSource: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source.
     * @summary Delete all custom schema attributes
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSourceSchemaAttributes: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This requests a CSV download for all non-employees from a provided source.
     * @summary Exports Non-Employee Records to CSV
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeRecords: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
     * @summary Exports Source Schema Template
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeSourceSchemaTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Get a non-employee approval item detail
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {string} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApproval: (id: string, includeDetail?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApprovalSummary: (requestedFor: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
     * @summary Bulk upload status on source
     * @param {string} id Source ID (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeBulkUploadStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a non-employee record.
     * @summary Get a Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRecord: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a non-employee request.
     * @summary Get a Non-Employee Request
     * @param {string} id Non-Employee request id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequest: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequestSummary: (requestedFor: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSchemaAttribute: (attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a non-employee source.
     * @summary Get a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSource: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
     * @summary List Schema Attributes Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSourceSchemaAttributes: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
     * @summary Imports, or Updates, Non-Employee Records
     * @param {string} id Source Id (UUID)
     * @param {any} data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importNonEmployeeRecordsInBulk: (id: string, data: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee approval requests.
     * @summary Get List of Non-Employee Approval Requests
     * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeApproval: (requestedFor?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee records.
     * @summary List Non-Employee Records
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRecords: (limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee requests.
     * @summary List Non-Employee Requests
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRequests: (requestedFor: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of non-employee sources.
     * @summary List Non-Employee Sources
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {boolean} nonEmployeeCount The flag to determine whether return a non-employee count associate with source.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeSources: (requestedFor: string, nonEmployeeCount: boolean, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will patch a non-employee record.
     * @summary Patch Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeRecord: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId.
     * @summary Patch Non-Employee Source\'s Schema Attribute
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSchemaAttribute: (attributeId: string, sourceId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
     * @summary Patch a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSource: (sourceId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint will reject an approval item request and notify user.
     * @summary Reject a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeRejectApprovalDecisionBeta} nonEmployeeRejectApprovalDecisionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectNonEmployeeRequest: (id: string, nonEmployeeRejectApprovalDecisionBeta: NonEmployeeRejectApprovalDecisionBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This request will update a non-employee record.
     * @summary Update Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateNonEmployeeRecord: (id: string, nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NonEmployeeLifecycleManagementBetaApi - functional programming interface
 * @export
 */
export declare const NonEmployeeLifecycleManagementBetaApiFp: (configuration?: Configuration) => {
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Approve a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeApprovalDecisionBeta} nonEmployeeApprovalDecisionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveNonEmployeeRequest(id: string, nonEmployeeApprovalDecisionBeta: NonEmployeeApprovalDecisionBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalItemBeta>>;
    /**
     * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Record
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee record creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRecord(nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecordBeta>>;
    /**
     * This request will create a non-employee request and notify the approver
     * @summary Create Non-Employee Request
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee creation request body
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRequest(nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRequestBeta>>;
    /**
     * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Source
     * @param {NonEmployeeSourceRequestBodyBeta} nonEmployeeSourceRequestBodyBeta Non-Employee source creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSource(nonEmployeeSourceRequestBodyBeta: NonEmployeeSourceRequestBodyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSourceWithCloudExternalIdBeta>>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
     * @summary Create Non-Employee Source Schema Attribute
     * @param {string} sourceId The Source id
     * @param {NonEmployeeSchemaAttributeBodyBeta} nonEmployeeSchemaAttributeBodyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSourceSchemaAttributes(sourceId: string, nonEmployeeSchemaAttributeBodyBeta: NonEmployeeSchemaAttributeBodyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSchemaAttributeBeta>>;
    /**
     * This request will delete a non-employee record.
     * @summary Delete Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecord(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
     * @summary Delete Multiple Non-Employee Records
     * @param {DeleteNonEmployeeRecordInBulkRequestBeta} deleteNonEmployeeRecordInBulkRequestBeta Non-Employee bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecordInBulk(deleteNonEmployeeRecordInBulkRequestBeta: DeleteNonEmployeeRecordInBulkRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This request will delete a non-employee request.
     * @summary Delete Non-Employee Request
     * @param {string} id Non-Employee request id in the UUID format
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRequest(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source.
     * @summary Delete Non-Employee Source\'s Schema Attribute
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This request will delete a non-employee source.
     * @summary Delete Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSource(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source.
     * @summary Delete all custom schema attributes
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This requests a CSV download for all non-employees from a provided source.
     * @summary Exports Non-Employee Records to CSV
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeRecords(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
     * @summary Exports Source Schema Template
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeSourceSchemaTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Get a non-employee approval item detail
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {string} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApproval(id: string, includeDetail?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalItemDetailBeta>>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApprovalSummary(requestedFor: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalSummaryBeta>>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
     * @summary Bulk upload status on source
     * @param {string} id Source ID (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeBulkUploadStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeBulkUploadStatusBeta>>;
    /**
     * This gets a non-employee record.
     * @summary Get a Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRecord(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecordBeta>>;
    /**
     * This gets a non-employee request.
     * @summary Get a Non-Employee Request
     * @param {string} id Non-Employee request id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequest(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRequestBeta>>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequestSummary(requestedFor: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRequestSummaryBeta>>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSchemaAttributeBeta>>;
    /**
     * This gets a non-employee source.
     * @summary Get a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSource(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSourceBeta>>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
     * @summary List Schema Attributes Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeSchemaAttributeBeta>>>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
     * @summary Imports, or Updates, Non-Employee Records
     * @param {string} id Source Id (UUID)
     * @param {any} data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importNonEmployeeRecordsInBulk(id: string, data: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeBulkUploadJobBeta>>;
    /**
     * This gets a list of non-employee approval requests.
     * @summary Get List of Non-Employee Approval Requests
     * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeApproval(requestedFor?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeApprovalItemBeta>>>;
    /**
     * This gets a list of non-employee records.
     * @summary List Non-Employee Records
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRecords(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeRecordBeta>>>;
    /**
     * This gets a list of non-employee requests.
     * @summary List Non-Employee Requests
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRequests(requestedFor: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeRequestBeta>>>;
    /**
     * This gets a list of non-employee sources.
     * @summary List Non-Employee Sources
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {boolean} nonEmployeeCount The flag to determine whether return a non-employee count associate with source.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeSources(requestedFor: string, nonEmployeeCount: boolean, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NonEmployeeSourceWithNECountBeta>>>;
    /**
     * This request will patch a non-employee record.
     * @summary Patch Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeRecord(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecordBeta>>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId.
     * @summary Patch Non-Employee Source\'s Schema Attribute
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSchemaAttributeBeta>>;
    /**
     * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
     * @summary Patch a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSource(sourceId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeSourceBeta>>;
    /**
     * This endpoint will reject an approval item request and notify user.
     * @summary Reject a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeRejectApprovalDecisionBeta} nonEmployeeRejectApprovalDecisionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectNonEmployeeRequest(id: string, nonEmployeeRejectApprovalDecisionBeta: NonEmployeeRejectApprovalDecisionBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeApprovalItemBeta>>;
    /**
     * This request will update a non-employee record.
     * @summary Update Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateNonEmployeeRecord(id: string, nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NonEmployeeRecordBeta>>;
};
/**
 * NonEmployeeLifecycleManagementBetaApi - factory interface
 * @export
 */
export declare const NonEmployeeLifecycleManagementBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Approve a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeApprovalDecisionBeta} nonEmployeeApprovalDecisionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveNonEmployeeRequest(id: string, nonEmployeeApprovalDecisionBeta: NonEmployeeApprovalDecisionBeta, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalItemBeta>;
    /**
     * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Record
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee record creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRecord(nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: any): AxiosPromise<NonEmployeeRecordBeta>;
    /**
     * This request will create a non-employee request and notify the approver
     * @summary Create Non-Employee Request
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-Employee creation request body
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeRequest(nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: any): AxiosPromise<NonEmployeeRequestBeta>;
    /**
     * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Source
     * @param {NonEmployeeSourceRequestBodyBeta} nonEmployeeSourceRequestBodyBeta Non-Employee source creation request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSource(nonEmployeeSourceRequestBodyBeta: NonEmployeeSourceRequestBodyBeta, axiosOptions?: any): AxiosPromise<NonEmployeeSourceWithCloudExternalIdBeta>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
     * @summary Create Non-Employee Source Schema Attribute
     * @param {string} sourceId The Source id
     * @param {NonEmployeeSchemaAttributeBodyBeta} nonEmployeeSchemaAttributeBodyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNonEmployeeSourceSchemaAttributes(sourceId: string, nonEmployeeSchemaAttributeBodyBeta: NonEmployeeSchemaAttributeBodyBeta, axiosOptions?: any): AxiosPromise<NonEmployeeSchemaAttributeBeta>;
    /**
     * This request will delete a non-employee record.
     * @summary Delete Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecord(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
     * @summary Delete Multiple Non-Employee Records
     * @param {DeleteNonEmployeeRecordInBulkRequestBeta} deleteNonEmployeeRecordInBulkRequestBeta Non-Employee bulk delete request body.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRecordInBulk(deleteNonEmployeeRecordInBulkRequestBeta: DeleteNonEmployeeRecordInBulkRequestBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This request will delete a non-employee request.
     * @summary Delete Non-Employee Request
     * @param {string} id Non-Employee request id in the UUID format
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeRequest(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source.
     * @summary Delete Non-Employee Source\'s Schema Attribute
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This request will delete a non-employee source.
     * @summary Delete Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSource(sourceId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source.
     * @summary Delete all custom schema attributes
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This requests a CSV download for all non-employees from a provided source.
     * @summary Exports Non-Employee Records to CSV
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeRecords(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
     * @summary Exports Source Schema Template
     * @param {string} id Source Id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportNonEmployeeSourceSchemaTemplate(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Get a non-employee approval item detail
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {string} [includeDetail] The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApproval(id: string, includeDetail?: string, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalItemDetailBeta>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {string} requestedFor The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeApprovalSummary(requestedFor: string, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalSummaryBeta>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
     * @summary Bulk upload status on source
     * @param {string} id Source ID (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeBulkUploadStatus(id: string, axiosOptions?: any): AxiosPromise<NonEmployeeBulkUploadStatusBeta>;
    /**
     * This gets a non-employee record.
     * @summary Get a Non-Employee Record
     * @param {string} id Non-Employee record id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRecord(id: string, axiosOptions?: any): AxiosPromise<NonEmployeeRecordBeta>;
    /**
     * This gets a non-employee request.
     * @summary Get a Non-Employee Request
     * @param {string} id Non-Employee request id (UUID)
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequest(id: string, axiosOptions?: any): AxiosPromise<NonEmployeeRequestBeta>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {string} requestedFor The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeRequestSummary(requestedFor: string, axiosOptions?: any): AxiosPromise<NonEmployeeRequestSummaryBeta>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, axiosOptions?: any): AxiosPromise<NonEmployeeSchemaAttributeBeta>;
    /**
     * This gets a non-employee source.
     * @summary Get a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSource(sourceId: string, axiosOptions?: any): AxiosPromise<NonEmployeeSourceBeta>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
     * @summary List Schema Attributes Non-Employee Source
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNonEmployeeSourceSchemaAttributes(sourceId: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeSchemaAttributeBeta>>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
     * @summary Imports, or Updates, Non-Employee Records
     * @param {string} id Source Id (UUID)
     * @param {any} data
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importNonEmployeeRecordsInBulk(id: string, data: any, axiosOptions?: any): AxiosPromise<NonEmployeeBulkUploadJobBeta>;
    /**
     * This gets a list of non-employee approval requests.
     * @summary Get List of Non-Employee Approval Requests
     * @param {string} [requestedFor] The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeApproval(requestedFor?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeApprovalItemBeta>>;
    /**
     * This gets a list of non-employee records.
     * @summary List Non-Employee Records
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRecords(limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeRecordBeta>>;
    /**
     * This gets a list of non-employee requests.
     * @summary List Non-Employee Requests
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeRequests(requestedFor: string, limit?: number, offset?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeRequestBeta>>;
    /**
     * This gets a list of non-employee sources.
     * @summary List Non-Employee Sources
     * @param {string} requestedFor The identity for whom the request was made. *me* indicates the current user.
     * @param {boolean} nonEmployeeCount The flag to determine whether return a non-employee count associate with source.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNonEmployeeSources(requestedFor: string, nonEmployeeCount: boolean, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<NonEmployeeSourceWithNECountBeta>>;
    /**
     * This request will patch a non-employee record.
     * @summary Patch Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeRecord(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<NonEmployeeRecordBeta>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId.
     * @summary Patch Non-Employee Source\'s Schema Attribute
     * @param {string} attributeId The Schema Attribute Id (UUID)
     * @param {string} sourceId The Source id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSchemaAttribute(attributeId: string, sourceId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<NonEmployeeSchemaAttributeBeta>;
    /**
     * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
     * @summary Patch a Non-Employee Source
     * @param {string} sourceId Source Id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchNonEmployeeSource(sourceId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<NonEmployeeSourceBeta>;
    /**
     * This endpoint will reject an approval item request and notify user.
     * @summary Reject a Non-Employee Request
     * @param {string} id Non-Employee approval item id (UUID)
     * @param {NonEmployeeRejectApprovalDecisionBeta} nonEmployeeRejectApprovalDecisionBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectNonEmployeeRequest(id: string, nonEmployeeRejectApprovalDecisionBeta: NonEmployeeRejectApprovalDecisionBeta, axiosOptions?: any): AxiosPromise<NonEmployeeApprovalItemBeta>;
    /**
     * This request will update a non-employee record.
     * @summary Update Non-Employee Record
     * @param {string} id Non-employee record id (UUID)
     * @param {NonEmployeeRequestBodyBeta} nonEmployeeRequestBodyBeta Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateNonEmployeeRecord(id: string, nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta, axiosOptions?: any): AxiosPromise<NonEmployeeRecordBeta>;
};
/**
 * Request parameters for approveNonEmployeeRequest operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequestRequest {
    /**
     * Non-Employee approval item id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequest
     */
    readonly id: string;
    /**
     *
     * @type {NonEmployeeApprovalDecisionBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequest
     */
    readonly nonEmployeeApprovalDecisionBeta: NonEmployeeApprovalDecisionBeta;
}
/**
 * Request parameters for createNonEmployeeRecord operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRecordRequest {
    /**
     * Non-Employee record creation request body.
     * @type {NonEmployeeRequestBodyBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRecord
     */
    readonly nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta;
}
/**
 * Request parameters for createNonEmployeeRequest operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRequestRequest {
    /**
     * Non-Employee creation request body
     * @type {NonEmployeeRequestBodyBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRequest
     */
    readonly nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta;
}
/**
 * Request parameters for createNonEmployeeSource operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceRequest {
    /**
     * Non-Employee source creation request body.
     * @type {NonEmployeeSourceRequestBodyBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSource
     */
    readonly nonEmployeeSourceRequestBodyBeta: NonEmployeeSourceRequestBodyBeta;
}
/**
 * Request parameters for createNonEmployeeSourceSchemaAttributes operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributesRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributes
     */
    readonly sourceId: string;
    /**
     *
     * @type {NonEmployeeSchemaAttributeBodyBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributes
     */
    readonly nonEmployeeSchemaAttributeBodyBeta: NonEmployeeSchemaAttributeBodyBeta;
}
/**
 * Request parameters for deleteNonEmployeeRecord operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordRequest {
    /**
     * Non-Employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecord
     */
    readonly id: string;
}
/**
 * Request parameters for deleteNonEmployeeRecordInBulk operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordInBulkRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordInBulkRequest {
    /**
     * Non-Employee bulk delete request body.
     * @type {DeleteNonEmployeeRecordInBulkRequestBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordInBulk
     */
    readonly deleteNonEmployeeRecordInBulkRequestBeta: DeleteNonEmployeeRecordInBulkRequestBeta;
}
/**
 * Request parameters for deleteNonEmployeeRequest operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRequestRequest {
    /**
     * Non-Employee request id in the UUID format
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRequest
     */
    readonly id: string;
}
/**
 * Request parameters for deleteNonEmployeeSchemaAttribute operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttributeRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttributeRequest {
    /**
     * The Schema Attribute Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttribute
     */
    readonly attributeId: string;
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttribute
     */
    readonly sourceId: string;
}
/**
 * Request parameters for deleteNonEmployeeSource operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSource
     */
    readonly sourceId: string;
}
/**
 * Request parameters for deleteNonEmployeeSourceSchemaAttributes operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceSchemaAttributesRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceSchemaAttributesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceSchemaAttributes
     */
    readonly sourceId: string;
}
/**
 * Request parameters for exportNonEmployeeRecords operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiExportNonEmployeeRecordsRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiExportNonEmployeeRecordsRequest {
    /**
     * Source Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiExportNonEmployeeRecords
     */
    readonly id: string;
}
/**
 * Request parameters for exportNonEmployeeSourceSchemaTemplate operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiExportNonEmployeeSourceSchemaTemplateRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiExportNonEmployeeSourceSchemaTemplateRequest {
    /**
     * Source Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiExportNonEmployeeSourceSchemaTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeApproval operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalRequest {
    /**
     * Non-Employee approval item id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApproval
     */
    readonly id: string;
    /**
     * The object nonEmployeeRequest will not be included detail when set to false. *Default value is true*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApproval
     */
    readonly includeDetail?: string;
}
/**
 * Request parameters for getNonEmployeeApprovalSummary operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalSummaryRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalSummaryRequest {
    /**
     * The identity (UUID) of the approver for whom for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalSummary
     */
    readonly requestedFor: string;
}
/**
 * Request parameters for getNonEmployeeBulkUploadStatus operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeBulkUploadStatusRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeBulkUploadStatusRequest {
    /**
     * Source ID (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeBulkUploadStatus
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeRecord operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRecordRequest {
    /**
     * Non-Employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRecord
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeRequest operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestRequest {
    /**
     * Non-Employee request id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequest
     */
    readonly id: string;
}
/**
 * Request parameters for getNonEmployeeRequestSummary operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestSummaryRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestSummaryRequest {
    /**
     * The identity (UUID) of the non-employee account manager for whom the summary is being retrieved. Use \&quot;me\&quot; instead to indicate the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestSummary
     */
    readonly requestedFor: string;
}
/**
 * Request parameters for getNonEmployeeSchemaAttribute operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttributeRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttributeRequest {
    /**
     * The Schema Attribute Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttribute
     */
    readonly attributeId: string;
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttribute
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getNonEmployeeSource operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSource
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getNonEmployeeSourceSchemaAttributes operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceSchemaAttributesRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceSchemaAttributesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceSchemaAttributes
     */
    readonly sourceId: string;
}
/**
 * Request parameters for importNonEmployeeRecordsInBulk operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulkRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulkRequest {
    /**
     * Source Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulk
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulk
     */
    readonly data: any;
}
/**
 * Request parameters for listNonEmployeeApproval operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeApprovalRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeApprovalRequest {
    /**
     * The identity for whom the request was made. *me* indicates the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeApproval
     */
    readonly requestedFor?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeApproval
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeApproval
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeApproval
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **approvalStatus**: *eq*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeApproval
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, modified**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeApproval
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listNonEmployeeRecords operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecordsRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecordsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecords
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecords
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecords
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, accountName, sourceId, manager, firstName, lastName, email, phone, startDate, endDate, created, modified**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecords
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecords
     */
    readonly filters?: string;
}
/**
 * Request parameters for listNonEmployeeRequests operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequestsRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequestsRequest {
    /**
     * The identity for whom the request was made. *me* indicates the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequests
     */
    readonly requestedFor: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequests
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequests
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequests
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created, approvalStatus, firstName, lastName, email, phone, accountName, startDate, endDate**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequests
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **sourceId**: *eq*
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequests
     */
    readonly filters?: string;
}
/**
 * Request parameters for listNonEmployeeSources operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeSourcesRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiListNonEmployeeSourcesRequest {
    /**
     * The identity for whom the request was made. *me* indicates the current user.
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeSources
     */
    readonly requestedFor: string;
    /**
     * The flag to determine whether return a non-employee count associate with source.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeSources
     */
    readonly nonEmployeeCount: boolean;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeSources
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeSources
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeSources
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, sourceId**
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiListNonEmployeeSources
     */
    readonly sorters?: string;
}
/**
 * Request parameters for patchNonEmployeeRecord operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecordRequest {
    /**
     * Non-employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecord
     */
    readonly id: string;
    /**
     * A list of non-employee update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecord
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for patchNonEmployeeSchemaAttribute operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttributeRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttributeRequest {
    /**
     * The Schema Attribute Id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttribute
     */
    readonly attributeId: string;
    /**
     * The Source id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttribute
     */
    readonly sourceId: string;
    /**
     * A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. The following properties are allowed for update \&#39;:\&#39; \&#39;label\&#39;, \&#39;helpText\&#39;, \&#39;placeholder\&#39;, \&#39;required\&#39;.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttribute
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for patchNonEmployeeSource operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSourceRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSourceRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSource
     */
    readonly sourceId: string;
    /**
     * A list of non-employee source update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSource
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for rejectNonEmployeeRequest operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequestRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequestRequest {
    /**
     * Non-Employee approval item id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequest
     */
    readonly id: string;
    /**
     *
     * @type {NonEmployeeRejectApprovalDecisionBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequest
     */
    readonly nonEmployeeRejectApprovalDecisionBeta: NonEmployeeRejectApprovalDecisionBeta;
}
/**
 * Request parameters for updateNonEmployeeRecord operation in NonEmployeeLifecycleManagementBetaApi.
 * @export
 * @interface NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecordRequest
 */
export interface NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecordRequest {
    /**
     * Non-employee record id (UUID)
     * @type {string}
     * @memberof NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecord
     */
    readonly id: string;
    /**
     * Non-employee record creation request body. Attributes are restricted by user type. Owner of source can update end date. Organization admins can update all available fields.
     * @type {NonEmployeeRequestBodyBeta}
     * @memberof NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecord
     */
    readonly nonEmployeeRequestBodyBeta: NonEmployeeRequestBodyBeta;
}
/**
 * NonEmployeeLifecycleManagementBetaApi - object-oriented interface
 * @export
 * @class NonEmployeeLifecycleManagementBetaApi
 * @extends {BaseAPI}
 */
export declare class NonEmployeeLifecycleManagementBetaApi extends BaseAPI {
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Approve a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    approveNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementBetaApiApproveNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItemBeta, any>>;
    /**
     * This request will create a non-employee record. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    createNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecordBeta, any>>;
    /**
     * This request will create a non-employee request and notify the approver
     * @summary Create Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    createNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequestBeta, any>>;
    /**
     * This request will create a non-employee source. Request will require the following security scope: \'idn:nesr:create\'
     * @summary Create Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    createNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSourceWithCloudExternalIdBeta, any>>;
    /**
     * This API creates a new schema attribute for Non-Employee Source. The schema technical name must be unique in the source. Attempts to create a schema attribute with an existing name will result in a \"400.1.409 Reference conflict\" response. At most, 10 custom attributes can be created per schema. Attempts to create more than 10 will result in a \"400.1.4 Limit violation\" response.
     * @summary Create Non-Employee Source Schema Attribute
     * @param {NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    createNonEmployeeSourceSchemaAttributes(requestParameters: NonEmployeeLifecycleManagementBetaApiCreateNonEmployeeSourceSchemaAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttributeBeta, any>>;
    /**
     * This request will delete a non-employee record.
     * @summary Delete Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    deleteNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This request will delete multiple non-employee records based on the non-employee ids provided. Request will require the following scope: \'idn:nesr:delete\'
     * @summary Delete Multiple Non-Employee Records
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    deleteNonEmployeeRecordInBulk(requestParameters: NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRecordInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This request will delete a non-employee request.
     * @summary Delete Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    deleteNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This end-point deletes a specific schema attribute for a non-employee source.
     * @summary Delete Non-Employee Source\'s Schema Attribute
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    deleteNonEmployeeSchemaAttribute(requestParameters: NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSchemaAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This request will delete a non-employee source.
     * @summary Delete Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    deleteNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This end-point deletes all custom schema attributes for a non-employee source.
     * @summary Delete all custom schema attributes
     * @param {NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    deleteNonEmployeeSourceSchemaAttributes(requestParameters: NonEmployeeLifecycleManagementBetaApiDeleteNonEmployeeSourceSchemaAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This requests a CSV download for all non-employees from a provided source.
     * @summary Exports Non-Employee Records to CSV
     * @param {NonEmployeeLifecycleManagementBetaApiExportNonEmployeeRecordsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    exportNonEmployeeRecords(requestParameters: NonEmployeeLifecycleManagementBetaApiExportNonEmployeeRecordsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This requests a download for the Source Schema Template for a provided source. Request will require the following security scope: idn:nesr:read\'
     * @summary Exports Source Schema Template
     * @param {NonEmployeeLifecycleManagementBetaApiExportNonEmployeeSourceSchemaTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    exportNonEmployeeSourceSchemaTemplate(requestParameters: NonEmployeeLifecycleManagementBetaApiExportNonEmployeeSourceSchemaTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Approves a non-employee approval request and notifies the next approver.
     * @summary Get a non-employee approval item detail
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeApproval(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItemDetailBeta, any>>;
    /**
     * This request will retrieve a summary of non-employee approval requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular approver by passing in that approver\'s id. 2. The current user is an approver, in which case \"me\" should be provided as the `requested-for` value. This will provide the approver with a summary of the approval items assigned to him or her.
     * @summary Get Summary of Non-Employee Approval Requests
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeApprovalSummary(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeApprovalSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalSummaryBeta, any>>;
    /**
     * The nonEmployeeBulkUploadStatus API returns the status of the newest bulk upload job for the specified source.
     * @summary Bulk upload status on source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeBulkUploadStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeBulkUploadStatus(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeBulkUploadStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeBulkUploadStatusBeta, any>>;
    /**
     * This gets a non-employee record.
     * @summary Get a Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecordBeta, any>>;
    /**
     * This gets a non-employee request.
     * @summary Get a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequestBeta, any>>;
    /**
     * This request will retrieve a summary of non-employee requests. There are two contextual uses for the `requested-for` path parameter: 1. The current user is the Org Admin, in which case he or she may request a summary of all non-employee approval requests assigned to a particular account manager by passing in that manager\'s id. 2. The current user is an account manager, in which case \"me\" should be provided as the `requested-for` value. This will provide the user with a summary of the non-employee requests in the source(s) he or she manages.
     * @summary Get Summary of Non-Employee Requests
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeRequestSummary(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeRequestSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequestSummaryBeta, any>>;
    /**
     * This API gets a schema attribute by Id for the specified Non-Employee SourceId.
     * @summary Get Schema Attribute Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeSchemaAttribute(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSchemaAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttributeBeta, any>>;
    /**
     * This gets a non-employee source.
     * @summary Get a Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSourceBeta, any>>;
    /**
     * This API gets the list of schema attributes for the specified Non-Employee SourceId. There are 8 mandatory attributes added to each new Non-Employee Source automatically. Additionaly, user can add up to 10 custom attributes. This interface returns all the mandatory attributes followed by any custom attributes. At most, a total of 18 attributes will be returned.
     * @summary List Schema Attributes Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceSchemaAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    getNonEmployeeSourceSchemaAttributes(requestParameters: NonEmployeeLifecycleManagementBetaApiGetNonEmployeeSourceSchemaAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttributeBeta[], any>>;
    /**
     * This post will import, or update, Non-Employee records found in the CSV. Request will need the following security scope: \'idn:nesr:create\'
     * @summary Imports, or Updates, Non-Employee Records
     * @param {NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    importNonEmployeeRecordsInBulk(requestParameters: NonEmployeeLifecycleManagementBetaApiImportNonEmployeeRecordsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeBulkUploadJobBeta, any>>;
    /**
     * This gets a list of non-employee approval requests.
     * @summary Get List of Non-Employee Approval Requests
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    listNonEmployeeApproval(requestParameters?: NonEmployeeLifecycleManagementBetaApiListNonEmployeeApprovalRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItemBeta[], any>>;
    /**
     * This gets a list of non-employee records.
     * @summary List Non-Employee Records
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecordsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    listNonEmployeeRecords(requestParameters?: NonEmployeeLifecycleManagementBetaApiListNonEmployeeRecordsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecordBeta[], any>>;
    /**
     * This gets a list of non-employee requests.
     * @summary List Non-Employee Requests
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequestsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    listNonEmployeeRequests(requestParameters: NonEmployeeLifecycleManagementBetaApiListNonEmployeeRequestsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRequestBeta[], any>>;
    /**
     * This gets a list of non-employee sources.
     * @summary List Non-Employee Sources
     * @param {NonEmployeeLifecycleManagementBetaApiListNonEmployeeSourcesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    listNonEmployeeSources(requestParameters: NonEmployeeLifecycleManagementBetaApiListNonEmployeeSourcesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSourceWithNECountBeta[], any>>;
    /**
     * This request will patch a non-employee record.
     * @summary Patch Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    patchNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecordBeta, any>>;
    /**
     * This end-point patches a specific schema attribute for a non-employee SourceId.
     * @summary Patch Non-Employee Source\'s Schema Attribute
     * @param {NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttributeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    patchNonEmployeeSchemaAttribute(requestParameters: NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSchemaAttributeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSchemaAttributeBeta, any>>;
    /**
     * patch a non-employee source. (Partial Update)  Patchable field: **name, description, approvers, accountManagers**
     * @summary Patch a Non-Employee Source
     * @param {NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    patchNonEmployeeSource(requestParameters: NonEmployeeLifecycleManagementBetaApiPatchNonEmployeeSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeSourceBeta, any>>;
    /**
     * This endpoint will reject an approval item request and notify user.
     * @summary Reject a Non-Employee Request
     * @param {NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    rejectNonEmployeeRequest(requestParameters: NonEmployeeLifecycleManagementBetaApiRejectNonEmployeeRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeApprovalItemBeta, any>>;
    /**
     * This request will update a non-employee record.
     * @summary Update Non-Employee Record
     * @param {NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NonEmployeeLifecycleManagementBetaApi
     */
    updateNonEmployeeRecord(requestParameters: NonEmployeeLifecycleManagementBetaApiUpdateNonEmployeeRecordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NonEmployeeRecordBeta, any>>;
}
/**
 * NotificationsBetaApi - axios parameter creator
 * @export
 */
export declare const NotificationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
     * @summary Verify domain address via DKIM
     * @param {DomainAddressBeta} domainAddressBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createDomainDkim: (domainAddressBeta: DomainAddressBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
     * @summary Create Notification Template
     * @param {TemplateDtoBeta} templateDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNotificationTemplate: (templateDtoBeta: TemplateDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new sender email address and initiate verification process.
     * @summary Create Verified From Address
     * @param {EmailStatusDtoBeta} emailStatusDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVerifiedFromAddress: (emailStatusDtoBeta: EmailStatusDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
     * @summary Bulk Delete Notification Templates
     * @param {Array<TemplateBulkDeleteDtoBeta>} templateBulkDeleteDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNotificationTemplatesInBulk: (templateBulkDeleteDtoBeta: Array<TemplateBulkDeleteDtoBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a verified sender email address
     * @summary Delete Verified From Address
     * @param {string} id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVerifiedFromAddress: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
     * @summary Get DKIM Attributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDkimAttributes: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve MAIL FROM attributes for a given AWS SES identity.
     * @summary Get MAIL FROM Attributes
     * @param {string} id Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMailFromAttributes: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a template that you have modified for your site by Id.
     * @summary Get Notification Template By Id
     * @param {string} id Id of the Notification Template
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationTemplate: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
     * @summary Get Notification Template Context
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsTemplateContext: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of sender email addresses and their verification statuses
     * @summary List From Addresses
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listFromAddresses: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of notification preferences for tenant.
     * @summary List Notification Preferences for tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationPreferences: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the default templates used for notifications, such as emails from IdentityNow.
     * @summary List Notification Template Defaults
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationTemplateDefaults: (limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the templates that you have modified for your site.
     * @summary List Notification Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationTemplates: (limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
     * @summary Change MAIL FROM domain
     * @param {MailFromAttributesDtoBeta} mailFromAttributesDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putMailFromAttributes: (mailFromAttributesDtoBeta: MailFromAttributesDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Send a Test Notification
     * @summary Send Test Notification
     * @param {SendTestNotificationRequestDtoBeta} sendTestNotificationRequestDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTestNotification: (sendTestNotificationRequestDtoBeta: SendTestNotificationRequestDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NotificationsBetaApi - functional programming interface
 * @export
 */
export declare const NotificationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
     * @summary Verify domain address via DKIM
     * @param {DomainAddressBeta} domainAddressBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createDomainDkim(domainAddressBeta: DomainAddressBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainStatusDtoBeta>>;
    /**
     * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
     * @summary Create Notification Template
     * @param {TemplateDtoBeta} templateDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNotificationTemplate(templateDtoBeta: TemplateDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateDtoBeta>>;
    /**
     * Create a new sender email address and initiate verification process.
     * @summary Create Verified From Address
     * @param {EmailStatusDtoBeta} emailStatusDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVerifiedFromAddress(emailStatusDtoBeta: EmailStatusDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailStatusDtoBeta>>;
    /**
     * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
     * @summary Bulk Delete Notification Templates
     * @param {Array<TemplateBulkDeleteDtoBeta>} templateBulkDeleteDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNotificationTemplatesInBulk(templateBulkDeleteDtoBeta: Array<TemplateBulkDeleteDtoBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a verified sender email address
     * @summary Delete Verified From Address
     * @param {string} id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVerifiedFromAddress(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
     * @summary Get DKIM Attributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDkimAttributes(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DkimAttributesBeta>>>;
    /**
     * Retrieve MAIL FROM attributes for a given AWS SES identity.
     * @summary Get MAIL FROM Attributes
     * @param {string} id Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMailFromAttributes(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailFromAttributesBeta>>;
    /**
     * This gets a template that you have modified for your site by Id.
     * @summary Get Notification Template By Id
     * @param {string} id Id of the Notification Template
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationTemplate(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateDtoBeta>>>;
    /**
     * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
     * @summary Get Notification Template Context
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsTemplateContext(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationTemplateContextBeta>>;
    /**
     * Retrieve a list of sender email addresses and their verification statuses
     * @summary List From Addresses
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listFromAddresses(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmailStatusDtoBeta>>>;
    /**
     * Returns a list of notification preferences for tenant.
     * @summary List Notification Preferences for tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationPreferences(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PreferencesDtoBeta>>>;
    /**
     * This lists the default templates used for notifications, such as emails from IdentityNow.
     * @summary List Notification Template Defaults
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationTemplateDefaults(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateDtoDefaultBeta>>>;
    /**
     * This lists the templates that you have modified for your site.
     * @summary List Notification Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationTemplates(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateDtoBeta>>>;
    /**
     * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
     * @summary Change MAIL FROM domain
     * @param {MailFromAttributesDtoBeta} mailFromAttributesDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putMailFromAttributes(mailFromAttributesDtoBeta: MailFromAttributesDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailFromAttributesBeta>>;
    /**
     * Send a Test Notification
     * @summary Send Test Notification
     * @param {SendTestNotificationRequestDtoBeta} sendTestNotificationRequestDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTestNotification(sendTestNotificationRequestDtoBeta: SendTestNotificationRequestDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * NotificationsBetaApi - factory interface
 * @export
 */
export declare const NotificationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
     * @summary Verify domain address via DKIM
     * @param {DomainAddressBeta} domainAddressBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createDomainDkim(domainAddressBeta: DomainAddressBeta, axiosOptions?: any): AxiosPromise<DomainStatusDtoBeta>;
    /**
     * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
     * @summary Create Notification Template
     * @param {TemplateDtoBeta} templateDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createNotificationTemplate(templateDtoBeta: TemplateDtoBeta, axiosOptions?: any): AxiosPromise<TemplateDtoBeta>;
    /**
     * Create a new sender email address and initiate verification process.
     * @summary Create Verified From Address
     * @param {EmailStatusDtoBeta} emailStatusDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVerifiedFromAddress(emailStatusDtoBeta: EmailStatusDtoBeta, axiosOptions?: any): AxiosPromise<EmailStatusDtoBeta>;
    /**
     * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
     * @summary Bulk Delete Notification Templates
     * @param {Array<TemplateBulkDeleteDtoBeta>} templateBulkDeleteDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNotificationTemplatesInBulk(templateBulkDeleteDtoBeta: Array<TemplateBulkDeleteDtoBeta>, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Delete a verified sender email address
     * @summary Delete Verified From Address
     * @param {string} id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVerifiedFromAddress(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
     * @summary Get DKIM Attributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getDkimAttributes(axiosOptions?: any): AxiosPromise<Array<DkimAttributesBeta>>;
    /**
     * Retrieve MAIL FROM attributes for a given AWS SES identity.
     * @summary Get MAIL FROM Attributes
     * @param {string} id Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getMailFromAttributes(id: string, axiosOptions?: any): AxiosPromise<MailFromAttributesBeta>;
    /**
     * This gets a template that you have modified for your site by Id.
     * @summary Get Notification Template By Id
     * @param {string} id Id of the Notification Template
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationTemplate(id: string, axiosOptions?: any): AxiosPromise<Array<TemplateDtoBeta>>;
    /**
     * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
     * @summary Get Notification Template Context
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNotificationsTemplateContext(axiosOptions?: any): AxiosPromise<NotificationTemplateContextBeta>;
    /**
     * Retrieve a list of sender email addresses and their verification statuses
     * @summary List From Addresses
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listFromAddresses(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<EmailStatusDtoBeta>>;
    /**
     * Returns a list of notification preferences for tenant.
     * @summary List Notification Preferences for tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationPreferences(axiosOptions?: any): AxiosPromise<Array<PreferencesDtoBeta>>;
    /**
     * This lists the default templates used for notifications, such as emails from IdentityNow.
     * @summary List Notification Template Defaults
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationTemplateDefaults(limit?: number, offset?: number, filters?: string, axiosOptions?: any): AxiosPromise<Array<TemplateDtoDefaultBeta>>;
    /**
     * This lists the templates that you have modified for your site.
     * @summary List Notification Templates
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listNotificationTemplates(limit?: number, offset?: number, filters?: string, axiosOptions?: any): AxiosPromise<Array<TemplateDtoBeta>>;
    /**
     * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
     * @summary Change MAIL FROM domain
     * @param {MailFromAttributesDtoBeta} mailFromAttributesDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putMailFromAttributes(mailFromAttributesDtoBeta: MailFromAttributesDtoBeta, axiosOptions?: any): AxiosPromise<MailFromAttributesBeta>;
    /**
     * Send a Test Notification
     * @summary Send Test Notification
     * @param {SendTestNotificationRequestDtoBeta} sendTestNotificationRequestDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    sendTestNotification(sendTestNotificationRequestDtoBeta: SendTestNotificationRequestDtoBeta, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for createDomainDkim operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiCreateDomainDkimRequest
 */
export interface NotificationsBetaApiCreateDomainDkimRequest {
    /**
     *
     * @type {DomainAddressBeta}
     * @memberof NotificationsBetaApiCreateDomainDkim
     */
    readonly domainAddressBeta: DomainAddressBeta;
}
/**
 * Request parameters for createNotificationTemplate operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiCreateNotificationTemplateRequest
 */
export interface NotificationsBetaApiCreateNotificationTemplateRequest {
    /**
     *
     * @type {TemplateDtoBeta}
     * @memberof NotificationsBetaApiCreateNotificationTemplate
     */
    readonly templateDtoBeta: TemplateDtoBeta;
}
/**
 * Request parameters for createVerifiedFromAddress operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiCreateVerifiedFromAddressRequest
 */
export interface NotificationsBetaApiCreateVerifiedFromAddressRequest {
    /**
     *
     * @type {EmailStatusDtoBeta}
     * @memberof NotificationsBetaApiCreateVerifiedFromAddress
     */
    readonly emailStatusDtoBeta: EmailStatusDtoBeta;
}
/**
 * Request parameters for deleteNotificationTemplatesInBulk operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiDeleteNotificationTemplatesInBulkRequest
 */
export interface NotificationsBetaApiDeleteNotificationTemplatesInBulkRequest {
    /**
     *
     * @type {Array<TemplateBulkDeleteDtoBeta>}
     * @memberof NotificationsBetaApiDeleteNotificationTemplatesInBulk
     */
    readonly templateBulkDeleteDtoBeta: Array<TemplateBulkDeleteDtoBeta>;
}
/**
 * Request parameters for deleteVerifiedFromAddress operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiDeleteVerifiedFromAddressRequest
 */
export interface NotificationsBetaApiDeleteVerifiedFromAddressRequest {
    /**
     *
     * @type {string}
     * @memberof NotificationsBetaApiDeleteVerifiedFromAddress
     */
    readonly id: string;
}
/**
 * Request parameters for getMailFromAttributes operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiGetMailFromAttributesRequest
 */
export interface NotificationsBetaApiGetMailFromAttributesRequest {
    /**
     * Returns the MX and TXT record to be put in your DNS, as well as the MAIL FROM domain status
     * @type {string}
     * @memberof NotificationsBetaApiGetMailFromAttributes
     */
    readonly id: string;
}
/**
 * Request parameters for getNotificationTemplate operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiGetNotificationTemplateRequest
 */
export interface NotificationsBetaApiGetNotificationTemplateRequest {
    /**
     * Id of the Notification Template
     * @type {string}
     * @memberof NotificationsBetaApiGetNotificationTemplate
     */
    readonly id: string;
}
/**
 * Request parameters for listFromAddresses operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiListFromAddressesRequest
 */
export interface NotificationsBetaApiListFromAddressesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NotificationsBetaApiListFromAddresses
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NotificationsBetaApiListFromAddresses
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof NotificationsBetaApiListFromAddresses
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **email**: *eq, ge, le, sw*
     * @type {string}
     * @memberof NotificationsBetaApiListFromAddresses
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **email**
     * @type {string}
     * @memberof NotificationsBetaApiListFromAddresses
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listNotificationTemplateDefaults operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiListNotificationTemplateDefaultsRequest
 */
export interface NotificationsBetaApiListNotificationTemplateDefaultsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NotificationsBetaApiListNotificationTemplateDefaults
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NotificationsBetaApiListNotificationTemplateDefaults
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @type {string}
     * @memberof NotificationsBetaApiListNotificationTemplateDefaults
     */
    readonly filters?: string;
}
/**
 * Request parameters for listNotificationTemplates operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiListNotificationTemplatesRequest
 */
export interface NotificationsBetaApiListNotificationTemplatesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NotificationsBetaApiListNotificationTemplates
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof NotificationsBetaApiListNotificationTemplates
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **key**: *eq, in, sw*  **medium**: *eq, sw*  **locale**: *eq, sw*
     * @type {string}
     * @memberof NotificationsBetaApiListNotificationTemplates
     */
    readonly filters?: string;
}
/**
 * Request parameters for putMailFromAttributes operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiPutMailFromAttributesRequest
 */
export interface NotificationsBetaApiPutMailFromAttributesRequest {
    /**
     *
     * @type {MailFromAttributesDtoBeta}
     * @memberof NotificationsBetaApiPutMailFromAttributes
     */
    readonly mailFromAttributesDtoBeta: MailFromAttributesDtoBeta;
}
/**
 * Request parameters for sendTestNotification operation in NotificationsBetaApi.
 * @export
 * @interface NotificationsBetaApiSendTestNotificationRequest
 */
export interface NotificationsBetaApiSendTestNotificationRequest {
    /**
     *
     * @type {SendTestNotificationRequestDtoBeta}
     * @memberof NotificationsBetaApiSendTestNotification
     */
    readonly sendTestNotificationRequestDtoBeta: SendTestNotificationRequestDtoBeta;
}
/**
 * NotificationsBetaApi - object-oriented interface
 * @export
 * @class NotificationsBetaApi
 * @extends {BaseAPI}
 */
export declare class NotificationsBetaApi extends BaseAPI {
    /**
     * Create a domain to be verified via DKIM (DomainKeys Identified Mail)
     * @summary Verify domain address via DKIM
     * @param {NotificationsBetaApiCreateDomainDkimRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    createDomainDkim(requestParameters: NotificationsBetaApiCreateDomainDkimRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainStatusDtoBeta, any>>;
    /**
     * This creates a template for your site.   You can also use this endpoint to update a template.  First, copy the response body from the [get notification template endpoint](https://developer.sailpoint.com/idn/api/beta/get-notification-template) for a template you wish to update and paste it into the request body for this endpoint.   Modify the fields you want to change and submit the POST request when ready.
     * @summary Create Notification Template
     * @param {NotificationsBetaApiCreateNotificationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    createNotificationTemplate(requestParameters: NotificationsBetaApiCreateNotificationTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TemplateDtoBeta, any>>;
    /**
     * Create a new sender email address and initiate verification process.
     * @summary Create Verified From Address
     * @param {NotificationsBetaApiCreateVerifiedFromAddressRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    createVerifiedFromAddress(requestParameters: NotificationsBetaApiCreateVerifiedFromAddressRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailStatusDtoBeta, any>>;
    /**
     * This lets you bulk delete templates that you previously created for your site. Since this is a beta feature, please contact support to enable usage.
     * @summary Bulk Delete Notification Templates
     * @param {NotificationsBetaApiDeleteNotificationTemplatesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    deleteNotificationTemplatesInBulk(requestParameters: NotificationsBetaApiDeleteNotificationTemplatesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a verified sender email address
     * @summary Delete Verified From Address
     * @param {NotificationsBetaApiDeleteVerifiedFromAddressRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    deleteVerifiedFromAddress(requestParameters: NotificationsBetaApiDeleteVerifiedFromAddressRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve DKIM (DomainKeys Identified Mail) attributes for all your tenants\' AWS SES identities. Limits retrieval to 100 identities per call.
     * @summary Get DKIM Attributes
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    getDkimAttributes(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DkimAttributesBeta[], any>>;
    /**
     * Retrieve MAIL FROM attributes for a given AWS SES identity.
     * @summary Get MAIL FROM Attributes
     * @param {NotificationsBetaApiGetMailFromAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    getMailFromAttributes(requestParameters: NotificationsBetaApiGetMailFromAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MailFromAttributesBeta, any>>;
    /**
     * This gets a template that you have modified for your site by Id.
     * @summary Get Notification Template By Id
     * @param {NotificationsBetaApiGetNotificationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    getNotificationTemplate(requestParameters: NotificationsBetaApiGetNotificationTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TemplateDtoBeta[], any>>;
    /**
     * The notification service maintains metadata to construct the notification templates or supply any information during the event propagation. The data-store where this information is retrieved is called \"Global Context\" (a.k.a. notification template context). It defines a set of attributes  that will be available per tenant (organization).
     * @summary Get Notification Template Context
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    getNotificationsTemplateContext(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NotificationTemplateContextBeta, any>>;
    /**
     * Retrieve a list of sender email addresses and their verification statuses
     * @summary List From Addresses
     * @param {NotificationsBetaApiListFromAddressesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    listFromAddresses(requestParameters?: NotificationsBetaApiListFromAddressesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailStatusDtoBeta[], any>>;
    /**
     * Returns a list of notification preferences for tenant.
     * @summary List Notification Preferences for tenant.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    listNotificationPreferences(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PreferencesDtoBeta[], any>>;
    /**
     * This lists the default templates used for notifications, such as emails from IdentityNow.
     * @summary List Notification Template Defaults
     * @param {NotificationsBetaApiListNotificationTemplateDefaultsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    listNotificationTemplateDefaults(requestParameters?: NotificationsBetaApiListNotificationTemplateDefaultsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TemplateDtoDefaultBeta[], any>>;
    /**
     * This lists the templates that you have modified for your site.
     * @summary List Notification Templates
     * @param {NotificationsBetaApiListNotificationTemplatesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    listNotificationTemplates(requestParameters?: NotificationsBetaApiListNotificationTemplatesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TemplateDtoBeta[], any>>;
    /**
     * Change the MAIL FROM domain of an AWS SES email identity and provide the MX and TXT records to be placed in the caller\'s DNS
     * @summary Change MAIL FROM domain
     * @param {NotificationsBetaApiPutMailFromAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    putMailFromAttributes(requestParameters: NotificationsBetaApiPutMailFromAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MailFromAttributesBeta, any>>;
    /**
     * Send a Test Notification
     * @summary Send Test Notification
     * @param {NotificationsBetaApiSendTestNotificationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsBetaApi
     */
    sendTestNotification(requestParameters: NotificationsBetaApiSendTestNotificationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * OAuthClientsBetaApi - axios parameter creator
 * @export
 */
export declare const OAuthClientsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {CreateOAuthClientRequestBeta} createOAuthClientRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createOauthClient: (createOAuthClientRequestBeta: CreateOAuthClientRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteOauthClient: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOauthClient: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOauthClients: (filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
     * @summary Patch OAuth Client
     * @param {string} id The OAuth client id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOauthClient: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OAuthClientsBetaApi - functional programming interface
 * @export
 */
export declare const OAuthClientsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {CreateOAuthClientRequestBeta} createOAuthClientRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createOauthClient(createOAuthClientRequestBeta: CreateOAuthClientRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOAuthClientResponseBeta>>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteOauthClient(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOauthClient(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOAuthClientResponseBeta>>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOauthClients(filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetOAuthClientResponseBeta>>>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
     * @summary Patch OAuth Client
     * @param {string} id The OAuth client id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOauthClient(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOAuthClientResponseBeta>>;
};
/**
 * OAuthClientsBetaApi - factory interface
 * @export
 */
export declare const OAuthClientsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {CreateOAuthClientRequestBeta} createOAuthClientRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createOauthClient(createOAuthClientRequestBeta: CreateOAuthClientRequestBeta, axiosOptions?: any): AxiosPromise<CreateOAuthClientResponseBeta>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteOauthClient(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {string} id The OAuth client id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOauthClient(id: string, axiosOptions?: any): AxiosPromise<GetOAuthClientResponseBeta>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listOauthClients(filters?: string, axiosOptions?: any): AxiosPromise<Array<GetOAuthClientResponseBeta>>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
     * @summary Patch OAuth Client
     * @param {string} id The OAuth client id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOauthClient(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<GetOAuthClientResponseBeta>;
};
/**
 * Request parameters for createOauthClient operation in OAuthClientsBetaApi.
 * @export
 * @interface OAuthClientsBetaApiCreateOauthClientRequest
 */
export interface OAuthClientsBetaApiCreateOauthClientRequest {
    /**
     *
     * @type {CreateOAuthClientRequestBeta}
     * @memberof OAuthClientsBetaApiCreateOauthClient
     */
    readonly createOAuthClientRequestBeta: CreateOAuthClientRequestBeta;
}
/**
 * Request parameters for deleteOauthClient operation in OAuthClientsBetaApi.
 * @export
 * @interface OAuthClientsBetaApiDeleteOauthClientRequest
 */
export interface OAuthClientsBetaApiDeleteOauthClientRequest {
    /**
     * The OAuth client id
     * @type {string}
     * @memberof OAuthClientsBetaApiDeleteOauthClient
     */
    readonly id: string;
}
/**
 * Request parameters for getOauthClient operation in OAuthClientsBetaApi.
 * @export
 * @interface OAuthClientsBetaApiGetOauthClientRequest
 */
export interface OAuthClientsBetaApiGetOauthClientRequest {
    /**
     * The OAuth client id
     * @type {string}
     * @memberof OAuthClientsBetaApiGetOauthClient
     */
    readonly id: string;
}
/**
 * Request parameters for listOauthClients operation in OAuthClientsBetaApi.
 * @export
 * @interface OAuthClientsBetaApiListOauthClientsRequest
 */
export interface OAuthClientsBetaApiListOauthClientsRequest {
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @type {string}
     * @memberof OAuthClientsBetaApiListOauthClients
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchOauthClient operation in OAuthClientsBetaApi.
 * @export
 * @interface OAuthClientsBetaApiPatchOauthClientRequest
 */
export interface OAuthClientsBetaApiPatchOauthClientRequest {
    /**
     * The OAuth client id
     * @type {string}
     * @memberof OAuthClientsBetaApiPatchOauthClient
     */
    readonly id: string;
    /**
     * A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * tenant * businessName * homepageUrl * name * description * accessTokenValiditySeconds * refreshTokenValiditySeconds * redirectUris * grantTypes * accessType * enabled * strongAuthSupported * claimsSupported
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof OAuthClientsBetaApiPatchOauthClient
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * OAuthClientsBetaApi - object-oriented interface
 * @export
 * @class OAuthClientsBetaApi
 * @extends {BaseAPI}
 */
export declare class OAuthClientsBetaApi extends BaseAPI {
    /**
     * This creates an OAuth client.
     * @summary Create OAuth Client
     * @param {OAuthClientsBetaApiCreateOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    createOauthClient(requestParameters: OAuthClientsBetaApiCreateOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateOAuthClientResponseBeta, any>>;
    /**
     * This deletes an OAuth client.
     * @summary Delete OAuth Client
     * @param {OAuthClientsBetaApiDeleteOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    deleteOauthClient(requestParameters: OAuthClientsBetaApiDeleteOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets details of an OAuth client.
     * @summary Get OAuth Client
     * @param {OAuthClientsBetaApiGetOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    getOauthClient(requestParameters: OAuthClientsBetaApiGetOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOAuthClientResponseBeta, any>>;
    /**
     * This gets a list of OAuth clients.
     * @summary List OAuth Clients
     * @param {OAuthClientsBetaApiListOauthClientsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    listOauthClients(requestParameters?: OAuthClientsBetaApiListOauthClientsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOAuthClientResponseBeta[], any>>;
    /**
     * This performs a targeted update to the field(s) of an OAuth client. Request will require a security scope of  - sp:oauth-client:manage
     * @summary Patch OAuth Client
     * @param {OAuthClientsBetaApiPatchOauthClientRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OAuthClientsBetaApi
     */
    patchOauthClient(requestParameters: OAuthClientsBetaApiPatchOauthClientRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetOAuthClientResponseBeta, any>>;
}
/**
 * OrgConfigBetaApi - axios parameter creator
 * @export
 */
export declare const OrgConfigBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get org configuration with only external (org admin) accessible properties for the current org.
     * @summary Get Org configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOrgConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of valid time zones that can be set in org configurations.
     * @summary Get list of time zones
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getValidTimeZones: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
     * @summary Patch an Org configuration property
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOrgConfig: (jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrgConfigBetaApi - functional programming interface
 * @export
 */
export declare const OrgConfigBetaApiFp: (configuration?: Configuration) => {
    /**
     * Get org configuration with only external (org admin) accessible properties for the current org.
     * @summary Get Org configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOrgConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgConfigBeta>>;
    /**
     * Get a list of valid time zones that can be set in org configurations.
     * @summary Get list of time zones
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getValidTimeZones(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
     * @summary Patch an Org configuration property
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOrgConfig(jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgConfigBeta>>;
};
/**
 * OrgConfigBetaApi - factory interface
 * @export
 */
export declare const OrgConfigBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get org configuration with only external (org admin) accessible properties for the current org.
     * @summary Get Org configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getOrgConfig(axiosOptions?: any): AxiosPromise<OrgConfigBeta>;
    /**
     * Get a list of valid time zones that can be set in org configurations.
     * @summary Get list of time zones
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getValidTimeZones(axiosOptions?: any): AxiosPromise<Array<string>>;
    /**
     * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
     * @summary Patch an Org configuration property
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchOrgConfig(jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<OrgConfigBeta>;
};
/**
 * Request parameters for patchOrgConfig operation in OrgConfigBetaApi.
 * @export
 * @interface OrgConfigBetaApiPatchOrgConfigRequest
 */
export interface OrgConfigBetaApiPatchOrgConfigRequest {
    /**
     * A list of schema attribute update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof OrgConfigBetaApiPatchOrgConfig
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * OrgConfigBetaApi - object-oriented interface
 * @export
 * @class OrgConfigBetaApi
 * @extends {BaseAPI}
 */
export declare class OrgConfigBetaApi extends BaseAPI {
    /**
     * Get org configuration with only external (org admin) accessible properties for the current org.
     * @summary Get Org configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigBetaApi
     */
    getOrgConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrgConfigBeta, any>>;
    /**
     * Get a list of valid time zones that can be set in org configurations.
     * @summary Get list of time zones
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigBetaApi
     */
    getValidTimeZones(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Patch configuration of the current org using http://jsonpatch.com/ syntax.  Commonly used for changing the time zone of an org.
     * @summary Patch an Org configuration property
     * @param {OrgConfigBetaApiPatchOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigBetaApi
     */
    patchOrgConfig(requestParameters: OrgConfigBetaApiPatchOrgConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OrgConfigBeta, any>>;
}
/**
 * PasswordConfigurationBetaApi - axios parameter creator
 * @export
 */
export declare const PasswordConfigurationBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordOrgConfig: (passwordOrgConfigBeta: PasswordOrgConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordOrgConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordOrgConfig: (passwordOrgConfigBeta: PasswordOrgConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordConfigurationBetaApi - functional programming interface
 * @export
 */
export declare const PasswordConfigurationBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordOrgConfig(passwordOrgConfigBeta: PasswordOrgConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordOrgConfigBeta>>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordOrgConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordOrgConfigBeta>>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordOrgConfig(passwordOrgConfigBeta: PasswordOrgConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordOrgConfigBeta>>;
};
/**
 * PasswordConfigurationBetaApi - factory interface
 * @export
 */
export declare const PasswordConfigurationBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordOrgConfig(passwordOrgConfigBeta: PasswordOrgConfigBeta, axiosOptions?: any): AxiosPromise<PasswordOrgConfigBeta>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordOrgConfig(axiosOptions?: any): AxiosPromise<PasswordOrgConfigBeta>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordOrgConfigBeta} passwordOrgConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordOrgConfig(passwordOrgConfigBeta: PasswordOrgConfigBeta, axiosOptions?: any): AxiosPromise<PasswordOrgConfigBeta>;
};
/**
 * Request parameters for createPasswordOrgConfig operation in PasswordConfigurationBetaApi.
 * @export
 * @interface PasswordConfigurationBetaApiCreatePasswordOrgConfigRequest
 */
export interface PasswordConfigurationBetaApiCreatePasswordOrgConfigRequest {
    /**
     *
     * @type {PasswordOrgConfigBeta}
     * @memberof PasswordConfigurationBetaApiCreatePasswordOrgConfig
     */
    readonly passwordOrgConfigBeta: PasswordOrgConfigBeta;
}
/**
 * Request parameters for putPasswordOrgConfig operation in PasswordConfigurationBetaApi.
 * @export
 * @interface PasswordConfigurationBetaApiPutPasswordOrgConfigRequest
 */
export interface PasswordConfigurationBetaApiPutPasswordOrgConfigRequest {
    /**
     *
     * @type {PasswordOrgConfigBeta}
     * @memberof PasswordConfigurationBetaApiPutPasswordOrgConfig
     */
    readonly passwordOrgConfigBeta: PasswordOrgConfigBeta;
}
/**
 * PasswordConfigurationBetaApi - object-oriented interface
 * @export
 * @class PasswordConfigurationBetaApi
 * @extends {BaseAPI}
 */
export declare class PasswordConfigurationBetaApi extends BaseAPI {
    /**
     * This API creates the password org config. Unspecified fields will use default value. To be able to use the custom password instructions, you must set the `customInstructionsEnabled` field to \"true\". Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Create Password Org Config
     * @param {PasswordConfigurationBetaApiCreatePasswordOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationBetaApi
     */
    createPasswordOrgConfig(requestParameters: PasswordConfigurationBetaApiCreatePasswordOrgConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordOrgConfigBeta, any>>;
    /**
     * This API returns the password org config . Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:read\'
     * @summary Get Password Org Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationBetaApi
     */
    getPasswordOrgConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordOrgConfigBeta, any>>;
    /**
     * This API updates the password org config for specified fields. Other fields will keep original value. You must set the `customInstructionsEnabled` field to \"true\" to be able to use custom password instructions.  Requires ORG_ADMIN, API role or authorization scope of \'idn:password-org-config:write\'
     * @summary Update Password Org Config
     * @param {PasswordConfigurationBetaApiPutPasswordOrgConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordConfigurationBetaApi
     */
    putPasswordOrgConfig(requestParameters: PasswordConfigurationBetaApiPutPasswordOrgConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordOrgConfigBeta, any>>;
}
/**
 * PasswordDictionaryBetaApi - axios parameter creator
 * @export
 */
export declare const PasswordDictionaryBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordDictionary: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordDictionary: (file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordDictionaryBetaApi - functional programming interface
 * @export
 */
export declare const PasswordDictionaryBetaApiFp: (configuration?: Configuration) => {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordDictionary(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordDictionary(file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PasswordDictionaryBetaApi - factory interface
 * @export
 */
export declare const PasswordDictionaryBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordDictionary(axiosOptions?: any): AxiosPromise<string>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putPasswordDictionary(file?: any, axiosOptions?: any): AxiosPromise<void>;
};
/**
 * Request parameters for putPasswordDictionary operation in PasswordDictionaryBetaApi.
 * @export
 * @interface PasswordDictionaryBetaApiPutPasswordDictionaryRequest
 */
export interface PasswordDictionaryBetaApiPutPasswordDictionaryRequest {
    /**
     *
     * @type {any}
     * @memberof PasswordDictionaryBetaApiPutPasswordDictionary
     */
    readonly file?: any;
}
/**
 * PasswordDictionaryBetaApi - object-oriented interface
 * @export
 * @class PasswordDictionaryBetaApi
 * @extends {BaseAPI}
 */
export declare class PasswordDictionaryBetaApi extends BaseAPI {
    /**
     * This gets password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Get Password Dictionary
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordDictionaryBetaApi
     */
    getPasswordDictionary(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * This updates password dictionary for the organization. A token with ORG_ADMIN authority is required to call this API. The password dictionary file can contain lines that are: 1. comment lines - the first character is \'#\', can be 128 Unicode codepoints in length, and are ignored during processing 2. empty lines 3. locale line - the first line that starts with \"locale=\" is considered to be locale line, the rest are treated as normal content lines 4. line containing the password dictionary word - it must start with non-whitespace character and only non-whitespace characters are allowed;         maximum length of the line is 128 Unicode codepoints   Password dictionary file may not contain more than 2,500 lines (not counting whitespace lines, comment lines and locale line).   Password dict file must contain UTF-8 characters only.  # Sample password text file  ```  # Password dictionary small test file  locale=en_US  # Password dictionary prohibited words  qwerty abcd aaaaa password qazxsws  ```
     * @summary Update Password Dictionary
     * @param {PasswordDictionaryBetaApiPutPasswordDictionaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordDictionaryBetaApi
     */
    putPasswordDictionary(requestParameters?: PasswordDictionaryBetaApiPutPasswordDictionaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PasswordManagementBetaApi - axios parameter creator
 * @export
 */
export declare const PasswordManagementBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
     * @summary Generate a digit token
     * @param {PasswordDigitTokenResetBeta} passwordDigitTokenResetBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    generateDigitToken: (passwordDigitTokenResetBeta: PasswordDigitTokenResetBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {string} id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityPasswordChangeStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordInfoQueryDTOBeta} passwordInfoQueryDTOBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryPasswordInfo: (passwordInfoQueryDTOBeta: PasswordInfoQueryDTOBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordChangeRequestBeta} passwordChangeRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setIdentityPassword: (passwordChangeRequestBeta: PasswordChangeRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordManagementBetaApi - functional programming interface
 * @export
 */
export declare const PasswordManagementBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
     * @summary Generate a digit token
     * @param {PasswordDigitTokenResetBeta} passwordDigitTokenResetBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    generateDigitToken(passwordDigitTokenResetBeta: PasswordDigitTokenResetBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordDigitTokenBeta>>;
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {string} id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityPasswordChangeStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordStatusBeta>>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordInfoQueryDTOBeta} passwordInfoQueryDTOBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryPasswordInfo(passwordInfoQueryDTOBeta: PasswordInfoQueryDTOBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordInfoBeta>>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordChangeRequestBeta} passwordChangeRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setIdentityPassword(passwordChangeRequestBeta: PasswordChangeRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChangeResponseBeta>>;
};
/**
 * PasswordManagementBetaApi - factory interface
 * @export
 */
export declare const PasswordManagementBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
     * @summary Generate a digit token
     * @param {PasswordDigitTokenResetBeta} passwordDigitTokenResetBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    generateDigitToken(passwordDigitTokenResetBeta: PasswordDigitTokenResetBeta, axiosOptions?: any): AxiosPromise<PasswordDigitTokenBeta>;
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {string} id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getIdentityPasswordChangeStatus(id: string, axiosOptions?: any): AxiosPromise<PasswordStatusBeta>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordInfoQueryDTOBeta} passwordInfoQueryDTOBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    queryPasswordInfo(passwordInfoQueryDTOBeta: PasswordInfoQueryDTOBeta, axiosOptions?: any): AxiosPromise<PasswordInfoBeta>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordChangeRequestBeta} passwordChangeRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setIdentityPassword(passwordChangeRequestBeta: PasswordChangeRequestBeta, axiosOptions?: any): AxiosPromise<PasswordChangeResponseBeta>;
};
/**
 * Request parameters for generateDigitToken operation in PasswordManagementBetaApi.
 * @export
 * @interface PasswordManagementBetaApiGenerateDigitTokenRequest
 */
export interface PasswordManagementBetaApiGenerateDigitTokenRequest {
    /**
     *
     * @type {PasswordDigitTokenResetBeta}
     * @memberof PasswordManagementBetaApiGenerateDigitToken
     */
    readonly passwordDigitTokenResetBeta: PasswordDigitTokenResetBeta;
}
/**
 * Request parameters for getIdentityPasswordChangeStatus operation in PasswordManagementBetaApi.
 * @export
 * @interface PasswordManagementBetaApiGetIdentityPasswordChangeStatusRequest
 */
export interface PasswordManagementBetaApiGetIdentityPasswordChangeStatusRequest {
    /**
     *
     * @type {string}
     * @memberof PasswordManagementBetaApiGetIdentityPasswordChangeStatus
     */
    readonly id: string;
}
/**
 * Request parameters for queryPasswordInfo operation in PasswordManagementBetaApi.
 * @export
 * @interface PasswordManagementBetaApiQueryPasswordInfoRequest
 */
export interface PasswordManagementBetaApiQueryPasswordInfoRequest {
    /**
     *
     * @type {PasswordInfoQueryDTOBeta}
     * @memberof PasswordManagementBetaApiQueryPasswordInfo
     */
    readonly passwordInfoQueryDTOBeta: PasswordInfoQueryDTOBeta;
}
/**
 * Request parameters for setIdentityPassword operation in PasswordManagementBetaApi.
 * @export
 * @interface PasswordManagementBetaApiSetIdentityPasswordRequest
 */
export interface PasswordManagementBetaApiSetIdentityPasswordRequest {
    /**
     *
     * @type {PasswordChangeRequestBeta}
     * @memberof PasswordManagementBetaApiSetIdentityPassword
     */
    readonly passwordChangeRequestBeta: PasswordChangeRequestBeta;
}
/**
 * PasswordManagementBetaApi - object-oriented interface
 * @export
 * @class PasswordManagementBetaApi
 * @extends {BaseAPI}
 */
export declare class PasswordManagementBetaApi extends BaseAPI {
    /**
     * This API is used to generate a digit token for password management. Requires authorization scope of \"idn:password-digit-token:create\".
     * @summary Generate a digit token
     * @param {PasswordManagementBetaApiGenerateDigitTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    generateDigitToken(requestParameters: PasswordManagementBetaApiGenerateDigitTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordDigitTokenBeta, any>>;
    /**
     * This API returns the status of a password change request. A token with identity owner or trusted API client application authority is required to call this API.
     * @summary Get Password Change Request Status
     * @param {PasswordManagementBetaApiGetIdentityPasswordChangeStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    getIdentityPasswordChangeStatus(requestParameters: PasswordManagementBetaApiGetIdentityPasswordChangeStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordStatusBeta, any>>;
    /**
     * This API is used to query password related information.   A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow)  is required to call this API.  \"API authority\" refers to a token that only has the \"client_credentials\"  grant type, and therefore no user context. A [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens)  or a token generated with the [authorization_code](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow)  grant type will **NOT** work on this endpoint, and a `403 Forbidden` response  will be returned.
     * @summary Query Password Info
     * @param {PasswordManagementBetaApiQueryPasswordInfoRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    queryPasswordInfo(requestParameters: PasswordManagementBetaApiQueryPasswordInfoRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordInfoBeta, any>>;
    /**
     * This API is used to set a password for an identity.   An identity can change their own password (as well as any of their accounts\' passwords) if they use a token generated by their ISC user, such as a [personal access token](https://developer.sailpoint.com/idn/api/authentication#personal-access-tokens) or [\"authorization_code\" derived OAuth token](https://developer.sailpoint.com/idn/api/authentication#authorization-code-grant-flow).  A token with [API authority](https://developer.sailpoint.com/idn/api/authentication#client-credentials-grant-flow) can be used to change **any** identity\'s password or the password of any of the identity\'s accounts.  \"API authority\" refers to a token that only has the \"client_credentials\" grant type.  >**Note: If you want to set an identity\'s source account password, you must enable `PASSWORD` as one of the source\'s features. You can use the [PATCH Source endpoint](https://developer.sailpoint.com/docs/api/v3/update-source) to add the `PASSWORD` feature.**  You can use this endpoint to generate an `encryptedPassword` (RSA encrypted using publicKey).  To do so, follow these steps:  1. Use [Query Password Info](https://developer.sailpoint.com/idn/api/v3/query-password-info) to get the following information: `identityId`, `sourceId`, `publicKeyId`, `publicKey`, `accounts`, and `policies`.   2. Choose an account from the previous response that you will provide as an `accountId` in your request to set an encrypted password.   3. Use [Set Identity\'s Password](https://developer.sailpoint.com/idn/api/v3/set-password) and provide the information you got from your earlier query. Then add this code to your request to get the encrypted password:  ```java import javax.crypto.Cipher; import java.security.KeyFactory; import java.security.PublicKey; import java.security.spec.X509EncodedKeySpec; import java util.Base64;  String encrypt(String publicKey, String toEncrypt) throws Exception {   byte[] publicKeyBytes = Base64.getDecoder().decode(publicKey);   byte[] encryptedBytes = encryptRsa(publicKeyBytes, toEncrypt.getBytes(\"UTF-8\"));   return Base64.getEncoder().encodeToString(encryptedBytes); }  private byte[] encryptRsa(byte[] publicKeyBytes, byte[] toEncryptBytes) throws Exception {   PublicKey key = KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(publicKeyBytes));   String transformation = \"RSA/ECB/PKCS1Padding\";   Cipher cipher = Cipher.getInstance(transformation);   cipher.init(1, key);   return cipher.doFinal(toEncryptBytes); } ```      In this example, `toEncrypt` refers to the plain text password you are setting and then encrypting, and the `publicKey` refers to the publicKey you got from the first request you sent.   You can then use [Get Password Change Request Status](https://developer.sailpoint.com/idn/api/v3/get-password-change-status) to check the password change request status. To do so, you must provide the `requestId` from your earlier request to set the password.
     * @summary Set Identity\'s Password
     * @param {PasswordManagementBetaApiSetIdentityPasswordRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordManagementBetaApi
     */
    setIdentityPassword(requestParameters: PasswordManagementBetaApiSetIdentityPasswordRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordChangeResponseBeta, any>>;
}
/**
 * PasswordPoliciesBetaApi - axios parameter creator
 * @export
 */
export declare const PasswordPoliciesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordPolicy: (passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {string} id The ID of password policy to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {string} id The ID of password policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordPolicyById: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPasswordPolicies: (limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {string} id The ID of password policy to update.
     * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPasswordPolicy: (id: string, passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordPoliciesBetaApi - functional programming interface
 * @export
 */
export declare const PasswordPoliciesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordPolicy(passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyV3DtoBeta>>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {string} id The ID of password policy to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {string} id The ID of password policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordPolicyById(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyV3DtoBeta>>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPasswordPolicies(limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PasswordPolicyV3DtoBeta>>>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {string} id The ID of password policy to update.
     * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPasswordPolicy(id: string, passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordPolicyV3DtoBeta>>;
};
/**
 * PasswordPoliciesBetaApi - factory interface
 * @export
 */
export declare const PasswordPoliciesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordPolicy(passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta, axiosOptions?: any): AxiosPromise<PasswordPolicyV3DtoBeta>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {string} id The ID of password policy to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordPolicy(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {string} id The ID of password policy to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordPolicyById(id: string, axiosOptions?: any): AxiosPromise<PasswordPolicyV3DtoBeta>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPasswordPolicies(limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PasswordPolicyV3DtoBeta>>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {string} id The ID of password policy to update.
     * @param {PasswordPolicyV3DtoBeta} passwordPolicyV3DtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setPasswordPolicy(id: string, passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta, axiosOptions?: any): AxiosPromise<PasswordPolicyV3DtoBeta>;
};
/**
 * Request parameters for createPasswordPolicy operation in PasswordPoliciesBetaApi.
 * @export
 * @interface PasswordPoliciesBetaApiCreatePasswordPolicyRequest
 */
export interface PasswordPoliciesBetaApiCreatePasswordPolicyRequest {
    /**
     *
     * @type {PasswordPolicyV3DtoBeta}
     * @memberof PasswordPoliciesBetaApiCreatePasswordPolicy
     */
    readonly passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta;
}
/**
 * Request parameters for deletePasswordPolicy operation in PasswordPoliciesBetaApi.
 * @export
 * @interface PasswordPoliciesBetaApiDeletePasswordPolicyRequest
 */
export interface PasswordPoliciesBetaApiDeletePasswordPolicyRequest {
    /**
     * The ID of password policy to delete.
     * @type {string}
     * @memberof PasswordPoliciesBetaApiDeletePasswordPolicy
     */
    readonly id: string;
}
/**
 * Request parameters for getPasswordPolicyById operation in PasswordPoliciesBetaApi.
 * @export
 * @interface PasswordPoliciesBetaApiGetPasswordPolicyByIdRequest
 */
export interface PasswordPoliciesBetaApiGetPasswordPolicyByIdRequest {
    /**
     * The ID of password policy to retrieve.
     * @type {string}
     * @memberof PasswordPoliciesBetaApiGetPasswordPolicyById
     */
    readonly id: string;
}
/**
 * Request parameters for listPasswordPolicies operation in PasswordPoliciesBetaApi.
 * @export
 * @interface PasswordPoliciesBetaApiListPasswordPoliciesRequest
 */
export interface PasswordPoliciesBetaApiListPasswordPoliciesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordPoliciesBetaApiListPasswordPolicies
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordPoliciesBetaApiListPasswordPolicies
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof PasswordPoliciesBetaApiListPasswordPolicies
     */
    readonly count?: boolean;
}
/**
 * Request parameters for setPasswordPolicy operation in PasswordPoliciesBetaApi.
 * @export
 * @interface PasswordPoliciesBetaApiSetPasswordPolicyRequest
 */
export interface PasswordPoliciesBetaApiSetPasswordPolicyRequest {
    /**
     * The ID of password policy to update.
     * @type {string}
     * @memberof PasswordPoliciesBetaApiSetPasswordPolicy
     */
    readonly id: string;
    /**
     *
     * @type {PasswordPolicyV3DtoBeta}
     * @memberof PasswordPoliciesBetaApiSetPasswordPolicy
     */
    readonly passwordPolicyV3DtoBeta: PasswordPolicyV3DtoBeta;
}
/**
 * PasswordPoliciesBetaApi - object-oriented interface
 * @export
 * @class PasswordPoliciesBetaApi
 * @extends {BaseAPI}
 */
export declare class PasswordPoliciesBetaApi extends BaseAPI {
    /**
     * This API creates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Policy
     * @param {PasswordPoliciesBetaApiCreatePasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    createPasswordPolicy(requestParameters: PasswordPoliciesBetaApiCreatePasswordPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3DtoBeta, any>>;
    /**
     * This API deletes the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Policy by ID
     * @param {PasswordPoliciesBetaApiDeletePasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    deletePasswordPolicy(requestParameters: PasswordPoliciesBetaApiDeletePasswordPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the password policy for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Policy by ID
     * @param {PasswordPoliciesBetaApiGetPasswordPolicyByIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    getPasswordPolicyById(requestParameters: PasswordPoliciesBetaApiGetPasswordPolicyByIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3DtoBeta, any>>;
    /**
     * This gets list of all Password Policies. Requires role of ORG_ADMIN
     * @summary List Password Policies
     * @param {PasswordPoliciesBetaApiListPasswordPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    listPasswordPolicies(requestParameters?: PasswordPoliciesBetaApiListPasswordPoliciesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3DtoBeta[], any>>;
    /**
     * This API updates the specified password policy. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Policy by ID
     * @param {PasswordPoliciesBetaApiSetPasswordPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordPoliciesBetaApi
     */
    setPasswordPolicy(requestParameters: PasswordPoliciesBetaApiSetPasswordPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordPolicyV3DtoBeta, any>>;
}
/**
 * PasswordSyncGroupsBetaApi - axios parameter creator
 * @export
 */
export declare const PasswordSyncGroupsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordSyncGroup: (passwordSyncGroupBeta: PasswordSyncGroupBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {string} id The ID of password sync group to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordSyncGroup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {string} id The ID of password sync group to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroup: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroups: (limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {string} id The ID of password sync group to update.
     * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordSyncGroup: (id: string, passwordSyncGroupBeta: PasswordSyncGroupBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PasswordSyncGroupsBetaApi - functional programming interface
 * @export
 */
export declare const PasswordSyncGroupsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordSyncGroup(passwordSyncGroupBeta: PasswordSyncGroupBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordSyncGroupBeta>>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {string} id The ID of password sync group to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordSyncGroup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {string} id The ID of password sync group to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroup(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordSyncGroupBeta>>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroups(limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PasswordSyncGroupBeta>>>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {string} id The ID of password sync group to update.
     * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordSyncGroup(id: string, passwordSyncGroupBeta: PasswordSyncGroupBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordSyncGroupBeta>>;
};
/**
 * PasswordSyncGroupsBetaApi - factory interface
 * @export
 */
export declare const PasswordSyncGroupsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPasswordSyncGroup(passwordSyncGroupBeta: PasswordSyncGroupBeta, axiosOptions?: any): AxiosPromise<PasswordSyncGroupBeta>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {string} id The ID of password sync group to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePasswordSyncGroup(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {string} id The ID of password sync group to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroup(id: string, axiosOptions?: any): AxiosPromise<PasswordSyncGroupBeta>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPasswordSyncGroups(limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<PasswordSyncGroupBeta>>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {string} id The ID of password sync group to update.
     * @param {PasswordSyncGroupBeta} passwordSyncGroupBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePasswordSyncGroup(id: string, passwordSyncGroupBeta: PasswordSyncGroupBeta, axiosOptions?: any): AxiosPromise<PasswordSyncGroupBeta>;
};
/**
 * Request parameters for createPasswordSyncGroup operation in PasswordSyncGroupsBetaApi.
 * @export
 * @interface PasswordSyncGroupsBetaApiCreatePasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsBetaApiCreatePasswordSyncGroupRequest {
    /**
     *
     * @type {PasswordSyncGroupBeta}
     * @memberof PasswordSyncGroupsBetaApiCreatePasswordSyncGroup
     */
    readonly passwordSyncGroupBeta: PasswordSyncGroupBeta;
}
/**
 * Request parameters for deletePasswordSyncGroup operation in PasswordSyncGroupsBetaApi.
 * @export
 * @interface PasswordSyncGroupsBetaApiDeletePasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsBetaApiDeletePasswordSyncGroupRequest {
    /**
     * The ID of password sync group to delete.
     * @type {string}
     * @memberof PasswordSyncGroupsBetaApiDeletePasswordSyncGroup
     */
    readonly id: string;
}
/**
 * Request parameters for getPasswordSyncGroup operation in PasswordSyncGroupsBetaApi.
 * @export
 * @interface PasswordSyncGroupsBetaApiGetPasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsBetaApiGetPasswordSyncGroupRequest {
    /**
     * The ID of password sync group to retrieve.
     * @type {string}
     * @memberof PasswordSyncGroupsBetaApiGetPasswordSyncGroup
     */
    readonly id: string;
}
/**
 * Request parameters for getPasswordSyncGroups operation in PasswordSyncGroupsBetaApi.
 * @export
 * @interface PasswordSyncGroupsBetaApiGetPasswordSyncGroupsRequest
 */
export interface PasswordSyncGroupsBetaApiGetPasswordSyncGroupsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordSyncGroupsBetaApiGetPasswordSyncGroups
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof PasswordSyncGroupsBetaApiGetPasswordSyncGroups
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof PasswordSyncGroupsBetaApiGetPasswordSyncGroups
     */
    readonly count?: boolean;
}
/**
 * Request parameters for updatePasswordSyncGroup operation in PasswordSyncGroupsBetaApi.
 * @export
 * @interface PasswordSyncGroupsBetaApiUpdatePasswordSyncGroupRequest
 */
export interface PasswordSyncGroupsBetaApiUpdatePasswordSyncGroupRequest {
    /**
     * The ID of password sync group to update.
     * @type {string}
     * @memberof PasswordSyncGroupsBetaApiUpdatePasswordSyncGroup
     */
    readonly id: string;
    /**
     *
     * @type {PasswordSyncGroupBeta}
     * @memberof PasswordSyncGroupsBetaApiUpdatePasswordSyncGroup
     */
    readonly passwordSyncGroupBeta: PasswordSyncGroupBeta;
}
/**
 * PasswordSyncGroupsBetaApi - object-oriented interface
 * @export
 * @class PasswordSyncGroupsBetaApi
 * @extends {BaseAPI}
 */
export declare class PasswordSyncGroupsBetaApi extends BaseAPI {
    /**
     * This API creates a password sync group based on the specifications provided. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Password Sync Group
     * @param {PasswordSyncGroupsBetaApiCreatePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    createPasswordSyncGroup(requestParameters: PasswordSyncGroupsBetaApiCreatePasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroupBeta, any>>;
    /**
     * This API deletes the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete Password Sync Group by ID
     * @param {PasswordSyncGroupsBetaApiDeletePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    deletePasswordSyncGroup(requestParameters: PasswordSyncGroupsBetaApiDeletePasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the sync group for the specified ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group by ID
     * @param {PasswordSyncGroupsBetaApiGetPasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    getPasswordSyncGroup(requestParameters: PasswordSyncGroupsBetaApiGetPasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroupBeta, any>>;
    /**
     * This API returns a list of password sync groups. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Password Sync Group List
     * @param {PasswordSyncGroupsBetaApiGetPasswordSyncGroupsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    getPasswordSyncGroups(requestParameters?: PasswordSyncGroupsBetaApiGetPasswordSyncGroupsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroupBeta[], any>>;
    /**
     * This API updates the specified password sync group. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Password Sync Group by ID
     * @param {PasswordSyncGroupsBetaApiUpdatePasswordSyncGroupRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordSyncGroupsBetaApi
     */
    updatePasswordSyncGroup(requestParameters: PasswordSyncGroupsBetaApiUpdatePasswordSyncGroupRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordSyncGroupBeta, any>>;
}
/**
 * PersonalAccessTokensBetaApi - axios parameter creator
 * @export
 */
export declare const PersonalAccessTokensBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {CreatePersonalAccessTokenRequestBeta} createPersonalAccessTokenRequestBeta Name and scope of personal access token.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken: (createPersonalAccessTokenRequestBeta: CreatePersonalAccessTokenRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {string} id The personal access token id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens: (ownerId?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token.
     * @summary Patch Personal Access Token
     * @param {string} id The Personal Access Token id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPersonalAccessToken: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PersonalAccessTokensBetaApi - functional programming interface
 * @export
 */
export declare const PersonalAccessTokensBetaApiFp: (configuration?: Configuration) => {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {CreatePersonalAccessTokenRequestBeta} createPersonalAccessTokenRequestBeta Name and scope of personal access token.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(createPersonalAccessTokenRequestBeta: CreatePersonalAccessTokenRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePersonalAccessTokenResponseBeta>>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {string} id The personal access token id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(ownerId?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetPersonalAccessTokenResponseBeta>>>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token.
     * @summary Patch Personal Access Token
     * @param {string} id The Personal Access Token id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPersonalAccessToken(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPersonalAccessTokenResponseBeta>>;
};
/**
 * PersonalAccessTokensBetaApi - factory interface
 * @export
 */
export declare const PersonalAccessTokensBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {CreatePersonalAccessTokenRequestBeta} createPersonalAccessTokenRequestBeta Name and scope of personal access token.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createPersonalAccessToken(createPersonalAccessTokenRequestBeta: CreatePersonalAccessTokenRequestBeta, axiosOptions?: any): AxiosPromise<CreatePersonalAccessTokenResponseBeta>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {string} id The personal access token id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonalAccessToken(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {string} [ownerId] The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listPersonalAccessTokens(ownerId?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<GetPersonalAccessTokenResponseBeta>>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token.
     * @summary Patch Personal Access Token
     * @param {string} id The Personal Access Token id
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchPersonalAccessToken(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<GetPersonalAccessTokenResponseBeta>;
};
/**
 * Request parameters for createPersonalAccessToken operation in PersonalAccessTokensBetaApi.
 * @export
 * @interface PersonalAccessTokensBetaApiCreatePersonalAccessTokenRequest
 */
export interface PersonalAccessTokensBetaApiCreatePersonalAccessTokenRequest {
    /**
     * Name and scope of personal access token.
     * @type {CreatePersonalAccessTokenRequestBeta}
     * @memberof PersonalAccessTokensBetaApiCreatePersonalAccessToken
     */
    readonly createPersonalAccessTokenRequestBeta: CreatePersonalAccessTokenRequestBeta;
}
/**
 * Request parameters for deletePersonalAccessToken operation in PersonalAccessTokensBetaApi.
 * @export
 * @interface PersonalAccessTokensBetaApiDeletePersonalAccessTokenRequest
 */
export interface PersonalAccessTokensBetaApiDeletePersonalAccessTokenRequest {
    /**
     * The personal access token id
     * @type {string}
     * @memberof PersonalAccessTokensBetaApiDeletePersonalAccessToken
     */
    readonly id: string;
}
/**
 * Request parameters for listPersonalAccessTokens operation in PersonalAccessTokensBetaApi.
 * @export
 * @interface PersonalAccessTokensBetaApiListPersonalAccessTokensRequest
 */
export interface PersonalAccessTokensBetaApiListPersonalAccessTokensRequest {
    /**
     * The identity ID of the owner whose personal access tokens should be listed.  If \&quot;me\&quot;, the caller should have the following right: \&#39;idn:my-personal-access-tokens:read\&#39; If an actual owner ID or if the &#x60;owner-id&#x60; parameter is omitted in the request,  the caller should have the following right: \&#39;idn:all-personal-access-tokens:read\&#39;.  If the caller has the following right, then managed personal access tokens associated with &#x60;owner-id&#x60; will be retrieved: \&#39;idn:managed-personal-access-tokens:read\&#39;
     * @type {string}
     * @memberof PersonalAccessTokensBetaApiListPersonalAccessTokens
     */
    readonly ownerId?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **lastUsed**: *le, isnull*
     * @type {string}
     * @memberof PersonalAccessTokensBetaApiListPersonalAccessTokens
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchPersonalAccessToken operation in PersonalAccessTokensBetaApi.
 * @export
 * @interface PersonalAccessTokensBetaApiPatchPersonalAccessTokenRequest
 */
export interface PersonalAccessTokensBetaApiPatchPersonalAccessTokenRequest {
    /**
     * The Personal Access Token id
     * @type {string}
     * @memberof PersonalAccessTokensBetaApiPatchPersonalAccessToken
     */
    readonly id: string;
    /**
     * A list of OAuth client update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * scope
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof PersonalAccessTokensBetaApiPatchPersonalAccessToken
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * PersonalAccessTokensBetaApi - object-oriented interface
 * @export
 * @class PersonalAccessTokensBetaApi
 * @extends {BaseAPI}
 */
export declare class PersonalAccessTokensBetaApi extends BaseAPI {
    /**
     * This creates a personal access token.
     * @summary Create Personal Access Token
     * @param {PersonalAccessTokensBetaApiCreatePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    createPersonalAccessToken(requestParameters: PersonalAccessTokensBetaApiCreatePersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePersonalAccessTokenResponseBeta, any>>;
    /**
     * This deletes a personal access token.
     * @summary Delete Personal Access Token
     * @param {PersonalAccessTokensBetaApiDeletePersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    deletePersonalAccessToken(requestParameters: PersonalAccessTokensBetaApiDeletePersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets a collection of personal access tokens associated with the optional `owner-id`.  query parameter. If the `owner-id` query parameter is omitted, all personal access tokens  for a tenant will be retrieved, but the caller must have the \'idn:all-personal-access-tokens:read\' right.
     * @summary List Personal Access Tokens
     * @param {PersonalAccessTokensBetaApiListPersonalAccessTokensRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    listPersonalAccessTokens(requestParameters?: PersonalAccessTokensBetaApiListPersonalAccessTokensRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPersonalAccessTokenResponseBeta[], any>>;
    /**
     * This performs a targeted update to the field(s) of a Personal Access Token.
     * @summary Patch Personal Access Token
     * @param {PersonalAccessTokensBetaApiPatchPersonalAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonalAccessTokensBetaApi
     */
    patchPersonalAccessToken(requestParameters: PersonalAccessTokensBetaApiPatchPersonalAccessTokenRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPersonalAccessTokenResponseBeta, any>>;
}
/**
 * PublicIdentitiesConfigBetaApi - axios parameter creator
 * @export
 */
export declare const PublicIdentitiesConfigBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This gets details of public identity config.
     * @summary Get Public Identity Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentityConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates the details of public identity config.
     * @summary Update Public Identity Config
     * @param {PublicIdentityConfigBeta} publicIdentityConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicIdentityConfig: (publicIdentityConfigBeta: PublicIdentityConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PublicIdentitiesConfigBetaApi - functional programming interface
 * @export
 */
export declare const PublicIdentitiesConfigBetaApiFp: (configuration?: Configuration) => {
    /**
     * This gets details of public identity config.
     * @summary Get Public Identity Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentityConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicIdentityConfigBeta>>;
    /**
     * This updates the details of public identity config.
     * @summary Update Public Identity Config
     * @param {PublicIdentityConfigBeta} publicIdentityConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicIdentityConfig(publicIdentityConfigBeta: PublicIdentityConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicIdentityConfigBeta>>;
};
/**
 * PublicIdentitiesConfigBetaApi - factory interface
 * @export
 */
export declare const PublicIdentitiesConfigBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This gets details of public identity config.
     * @summary Get Public Identity Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPublicIdentityConfig(axiosOptions?: any): AxiosPromise<PublicIdentityConfigBeta>;
    /**
     * This updates the details of public identity config.
     * @summary Update Public Identity Config
     * @param {PublicIdentityConfigBeta} publicIdentityConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicIdentityConfig(publicIdentityConfigBeta: PublicIdentityConfigBeta, axiosOptions?: any): AxiosPromise<PublicIdentityConfigBeta>;
};
/**
 * Request parameters for updatePublicIdentityConfig operation in PublicIdentitiesConfigBetaApi.
 * @export
 * @interface PublicIdentitiesConfigBetaApiUpdatePublicIdentityConfigRequest
 */
export interface PublicIdentitiesConfigBetaApiUpdatePublicIdentityConfigRequest {
    /**
     *
     * @type {PublicIdentityConfigBeta}
     * @memberof PublicIdentitiesConfigBetaApiUpdatePublicIdentityConfig
     */
    readonly publicIdentityConfigBeta: PublicIdentityConfigBeta;
}
/**
 * PublicIdentitiesConfigBetaApi - object-oriented interface
 * @export
 * @class PublicIdentitiesConfigBetaApi
 * @extends {BaseAPI}
 */
export declare class PublicIdentitiesConfigBetaApi extends BaseAPI {
    /**
     * This gets details of public identity config.
     * @summary Get Public Identity Config
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesConfigBetaApi
     */
    getPublicIdentityConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicIdentityConfigBeta, any>>;
    /**
     * This updates the details of public identity config.
     * @summary Update Public Identity Config
     * @param {PublicIdentitiesConfigBetaApiUpdatePublicIdentityConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIdentitiesConfigBetaApi
     */
    updatePublicIdentityConfig(requestParameters: PublicIdentitiesConfigBetaApiUpdatePublicIdentityConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PublicIdentityConfigBeta, any>>;
}
/**
 * RequestableObjectsBetaApi - axios parameter creator
 * @export
 */
export declare const RequestableObjectsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @param {Array<RequestableObjectTypeBeta>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @param {Array<RequestableObjectRequestStatusBeta>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRequestableObjects: (identityId?: string, types?: Array<RequestableObjectTypeBeta>, term?: string, statuses?: Array<RequestableObjectRequestStatusBeta>, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RequestableObjectsBetaApi - functional programming interface
 * @export
 */
export declare const RequestableObjectsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @param {Array<RequestableObjectTypeBeta>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @param {Array<RequestableObjectRequestStatusBeta>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRequestableObjects(identityId?: string, types?: Array<RequestableObjectTypeBeta>, term?: string, statuses?: Array<RequestableObjectRequestStatusBeta>, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequestableObjectBeta>>>;
};
/**
 * RequestableObjectsBetaApi - factory interface
 * @export
 */
export declare const RequestableObjectsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {string} [identityId] If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @param {Array<RequestableObjectTypeBeta>} [types] Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @param {string} [term] It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @param {Array<RequestableObjectRequestStatusBeta>} [statuses] Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRequestableObjects(identityId?: string, types?: Array<RequestableObjectTypeBeta>, term?: string, statuses?: Array<RequestableObjectRequestStatusBeta>, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<RequestableObjectBeta>>;
};
/**
 * Request parameters for listRequestableObjects operation in RequestableObjectsBetaApi.
 * @export
 * @interface RequestableObjectsBetaApiListRequestableObjectsRequest
 */
export interface RequestableObjectsBetaApiListRequestableObjectsRequest {
    /**
     * If present, the value returns only requestable objects for the specified identity.  * Admin users can call this with any identity ID value.  * Non-admin users can only specify *me* or pass their own identity ID value.  * If absent, returns a list of all requestable objects for the tenant. Only admin users can make such a call. In this case, the available, pending, assigned accesses will not be annotated in the result.
     * @type {string}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly identityId?: string;
    /**
     * Filters the results to the specified type/types, where each type is one of ROLE or ACCESS_PROFILE. If absent, all types are returned. Support for additional types may be added in the future without notice.
     * @type {Array<RequestableObjectTypeBeta>}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly types?: Array<RequestableObjectTypeBeta>;
    /**
     * It allows searching requestable access items with a partial match on the name or description. If term is provided, then the *filter* query parameter will be ignored.
     * @type {string}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly term?: string;
    /**
     * Filters the result to the specified status/statuses, where each status is one of AVAILABLE, ASSIGNED, or PENDING. It is an error to specify this parameter without also specifying an *identity-id* parameter. Additional statuses may be added in the future without notice.
     * @type {Array<RequestableObjectRequestStatusBeta>}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly statuses?: Array<RequestableObjectRequestStatusBeta>;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in, sw*
     * @type {string}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof RequestableObjectsBetaApiListRequestableObjects
     */
    readonly sorters?: string;
}
/**
 * RequestableObjectsBetaApi - object-oriented interface
 * @export
 * @class RequestableObjectsBetaApi
 * @extends {BaseAPI}
 */
export declare class RequestableObjectsBetaApi extends BaseAPI {
    /**
     * This endpoint returns a list of acccess items that that can be requested through the Access Request endpoints. Access items are marked with AVAILABLE, PENDING or ASSIGNED with respect to the identity provided using *identity-id* query param. Any authenticated token can call this endpoint to see their requestable access items. A token with ORG_ADMIN authority is required to call this endpoint to return a list of all of the requestable access items for the org or for another identity.
     * @summary Requestable Objects List
     * @param {RequestableObjectsBetaApiListRequestableObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestableObjectsBetaApi
     */
    listRequestableObjects(requestParameters?: RequestableObjectsBetaApiListRequestableObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RequestableObjectBeta[], any>>;
}
/**
 * RoleInsightsBetaApi - axios parameter creator
 * @export
 */
export declare const RoleInsightsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
     * @summary Generate insights for roles
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createRoleInsightRequests: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns the entitlement insights for a role.
     * @summary Download entitlement insights for a role
     * @param {string} insightId The role insight id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    downloadRoleInsightsEntitlementsChanges: (insightId: string, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
     * @summary Get identities for a suggested entitlement (for a role)
     * @param {string} insightId The role insight id
     * @param {string} entitlementId The entitlement id
     * @param {boolean} [hasEntitlement] Identity has this entitlement or not
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementChangesIdentities: (insightId: string, entitlementId: string, hasEntitlement?: boolean, offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets role insights information for a role.
     * @summary Get a single role insight
     * @param {string} insightId The role insight id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsight: (insightId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns detailed role insights for each role.
     * @summary Get role insights
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsights: (offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
     * @summary Get current entitlement for a role
     * @param {string} insightId The role insight id
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsCurrentEntitlements: (insightId: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns entitlement insights for a role.
     * @summary Get entitlement insights for a role
     * @param {string} insightId The role insight id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsEntitlementsChanges: (insightId: string, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint returns details of a prior role insights request.
     * @summary Returns metadata from prior request.
     * @param {string} id The role insights request id
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getRoleInsightsRequests: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method returns high level summary information for role insights for a customer.
     * @summary Get role insights summary information
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsSummary: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleInsightsBetaApi - functional programming interface
 * @export
 */
export declare const RoleInsightsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
     * @summary Generate insights for roles
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createRoleInsightRequests(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleInsightsResponseBeta>>;
    /**
     * This endpoint returns the entitlement insights for a role.
     * @summary Download entitlement insights for a role
     * @param {string} insightId The role insight id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    downloadRoleInsightsEntitlementsChanges(insightId: string, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
     * @summary Get identities for a suggested entitlement (for a role)
     * @param {string} insightId The role insight id
     * @param {string} entitlementId The entitlement id
     * @param {boolean} [hasEntitlement] Identity has this entitlement or not
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementChangesIdentities(insightId: string, entitlementId: string, hasEntitlement?: boolean, offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleInsightsIdentitiesBeta>>>;
    /**
     * This endpoint gets role insights information for a role.
     * @summary Get a single role insight
     * @param {string} insightId The role insight id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsight(insightId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleInsightBeta>>;
    /**
     * This method returns detailed role insights for each role.
     * @summary Get role insights
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsights(offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleInsightBeta>>>;
    /**
     * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
     * @summary Get current entitlement for a role
     * @param {string} insightId The role insight id
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsCurrentEntitlements(insightId: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleInsightsEntitlementBeta>>>;
    /**
     * This endpoint returns entitlement insights for a role.
     * @summary Get entitlement insights for a role
     * @param {string} insightId The role insight id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsEntitlementsChanges(insightId: string, sorters?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleInsightsEntitlementChangesBeta>>>;
    /**
     * This endpoint returns details of a prior role insights request.
     * @summary Returns metadata from prior request.
     * @param {string} id The role insights request id
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getRoleInsightsRequests(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleInsightsResponseBeta>>;
    /**
     * This method returns high level summary information for role insights for a customer.
     * @summary Get role insights summary information
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsSummary(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleInsightsSummaryBeta>>;
};
/**
 * RoleInsightsBetaApi - factory interface
 * @export
 */
export declare const RoleInsightsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
     * @summary Generate insights for roles
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createRoleInsightRequests(axiosOptions?: any): AxiosPromise<RoleInsightsResponseBeta>;
    /**
     * This endpoint returns the entitlement insights for a role.
     * @summary Download entitlement insights for a role
     * @param {string} insightId The role insight id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    downloadRoleInsightsEntitlementsChanges(insightId: string, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<string>;
    /**
     * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
     * @summary Get identities for a suggested entitlement (for a role)
     * @param {string} insightId The role insight id
     * @param {string} entitlementId The entitlement id
     * @param {boolean} [hasEntitlement] Identity has this entitlement or not
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEntitlementChangesIdentities(insightId: string, entitlementId: string, hasEntitlement?: boolean, offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<RoleInsightsIdentitiesBeta>>;
    /**
     * This endpoint gets role insights information for a role.
     * @summary Get a single role insight
     * @param {string} insightId The role insight id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsight(insightId: string, axiosOptions?: any): AxiosPromise<RoleInsightBeta>;
    /**
     * This method returns detailed role insights for each role.
     * @summary Get role insights
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsights(offset?: number, limit?: number, count?: boolean, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<RoleInsightBeta>>;
    /**
     * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
     * @summary Get current entitlement for a role
     * @param {string} insightId The role insight id
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsCurrentEntitlements(insightId: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<RoleInsightsEntitlementBeta>>;
    /**
     * This endpoint returns entitlement insights for a role.
     * @summary Get entitlement insights for a role
     * @param {string} insightId The role insight id
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsEntitlementsChanges(insightId: string, sorters?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<RoleInsightsEntitlementChangesBeta>>;
    /**
     * This endpoint returns details of a prior role insights request.
     * @summary Returns metadata from prior request.
     * @param {string} id The role insights request id
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getRoleInsightsRequests(id: string, axiosOptions?: any): AxiosPromise<RoleInsightsResponseBeta>;
    /**
     * This method returns high level summary information for role insights for a customer.
     * @summary Get role insights summary information
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleInsightsSummary(axiosOptions?: any): AxiosPromise<RoleInsightsSummaryBeta>;
};
/**
 * Request parameters for downloadRoleInsightsEntitlementsChanges operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChangesRequest
 */
export interface RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChangesRequest {
    /**
     * The role insight id
     * @type {string}
     * @memberof RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChanges
     */
    readonly insightId: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess**  The default sort is **identitiesWithAccess** in descending order.
     * @type {string}
     * @memberof RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChanges
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @type {string}
     * @memberof RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChanges
     */
    readonly filters?: string;
}
/**
 * Request parameters for getEntitlementChangesIdentities operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiGetEntitlementChangesIdentitiesRequest
 */
export interface RoleInsightsBetaApiGetEntitlementChangesIdentitiesRequest {
    /**
     * The role insight id
     * @type {string}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly insightId: string;
    /**
     * The entitlement id
     * @type {string}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly entitlementId: string;
    /**
     * Identity has this entitlement or not
     * @type {boolean}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly hasEntitlement?: boolean;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*
     * @type {string}
     * @memberof RoleInsightsBetaApiGetEntitlementChangesIdentities
     */
    readonly filters?: string;
}
/**
 * Request parameters for getRoleInsight operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiGetRoleInsightRequest
 */
export interface RoleInsightsBetaApiGetRoleInsightRequest {
    /**
     * The role insight id
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsight
     */
    readonly insightId: string;
}
/**
 * Request parameters for getRoleInsights operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiGetRoleInsightsRequest
 */
export interface RoleInsightsBetaApiGetRoleInsightsRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RoleInsightsBetaApiGetRoleInsights
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RoleInsightsBetaApiGetRoleInsights
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RoleInsightsBetaApiGetRoleInsights
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **numberOfUpdates, identitiesWithAccess, totalNumberOfIdentities**
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsights
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **ownerName**: *sw*  **description**: *sw*
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsights
     */
    readonly filters?: string;
}
/**
 * Request parameters for getRoleInsightsCurrentEntitlements operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiGetRoleInsightsCurrentEntitlementsRequest
 */
export interface RoleInsightsBetaApiGetRoleInsightsCurrentEntitlementsRequest {
    /**
     * The role insight id
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsightsCurrentEntitlements
     */
    readonly insightId: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsightsCurrentEntitlements
     */
    readonly filters?: string;
}
/**
 * Request parameters for getRoleInsightsEntitlementsChanges operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiGetRoleInsightsEntitlementsChangesRequest
 */
export interface RoleInsightsBetaApiGetRoleInsightsEntitlementsChangesRequest {
    /**
     * The role insight id
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsightsEntitlementsChanges
     */
    readonly insightId: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **identitiesWithAccess, name**
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsightsEntitlementsChanges
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **name**: *sw*  **description**: *sw*
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsightsEntitlementsChanges
     */
    readonly filters?: string;
}
/**
 * Request parameters for getRoleInsightsRequests operation in RoleInsightsBetaApi.
 * @export
 * @interface RoleInsightsBetaApiGetRoleInsightsRequestsRequest
 */
export interface RoleInsightsBetaApiGetRoleInsightsRequestsRequest {
    /**
     * The role insights request id
     * @type {string}
     * @memberof RoleInsightsBetaApiGetRoleInsightsRequests
     */
    readonly id: string;
}
/**
 * RoleInsightsBetaApi - object-oriented interface
 * @export
 * @class RoleInsightsBetaApi
 * @extends {BaseAPI}
 */
export declare class RoleInsightsBetaApi extends BaseAPI {
    /**
     * Submits a create role insights request to the role insights application. At this time there are no parameters. All business roles will be processed for the customer.
     * @summary Generate insights for roles
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    createRoleInsightRequests(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightsResponseBeta, any>>;
    /**
     * This endpoint returns the entitlement insights for a role.
     * @summary Download entitlement insights for a role
     * @param {RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChangesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    downloadRoleInsightsEntitlementsChanges(requestParameters: RoleInsightsBetaApiDownloadRoleInsightsEntitlementsChangesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Role insights suggests entitlements to be added for a role. This endpoint returns a list of identities in the role, with or without the entitlements, for a suggested entitlement so that the user can see which identities would be affected if the suggested entitlement were to be added to the role.
     * @summary Get identities for a suggested entitlement (for a role)
     * @param {RoleInsightsBetaApiGetEntitlementChangesIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getEntitlementChangesIdentities(requestParameters: RoleInsightsBetaApiGetEntitlementChangesIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightsIdentitiesBeta[], any>>;
    /**
     * This endpoint gets role insights information for a role.
     * @summary Get a single role insight
     * @param {RoleInsightsBetaApiGetRoleInsightRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getRoleInsight(requestParameters: RoleInsightsBetaApiGetRoleInsightRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightBeta, any>>;
    /**
     * This method returns detailed role insights for each role.
     * @summary Get role insights
     * @param {RoleInsightsBetaApiGetRoleInsightsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getRoleInsights(requestParameters?: RoleInsightsBetaApiGetRoleInsightsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightBeta[], any>>;
    /**
     * This endpoint gets the entitlements for a role. The term \"current\" is to distinguish from the entitlement(s) an insight might recommend adding.
     * @summary Get current entitlement for a role
     * @param {RoleInsightsBetaApiGetRoleInsightsCurrentEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getRoleInsightsCurrentEntitlements(requestParameters: RoleInsightsBetaApiGetRoleInsightsCurrentEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightsEntitlementBeta[], any>>;
    /**
     * This endpoint returns entitlement insights for a role.
     * @summary Get entitlement insights for a role
     * @param {RoleInsightsBetaApiGetRoleInsightsEntitlementsChangesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getRoleInsightsEntitlementsChanges(requestParameters: RoleInsightsBetaApiGetRoleInsightsEntitlementsChangesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightsEntitlementChangesBeta[], any>>;
    /**
     * This endpoint returns details of a prior role insights request.
     * @summary Returns metadata from prior request.
     * @param {RoleInsightsBetaApiGetRoleInsightsRequestsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getRoleInsightsRequests(requestParameters: RoleInsightsBetaApiGetRoleInsightsRequestsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightsResponseBeta, any>>;
    /**
     * This method returns high level summary information for role insights for a customer.
     * @summary Get role insights summary information
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInsightsBetaApi
     */
    getRoleInsightsSummary(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInsightsSummaryBeta, any>>;
}
/**
 * RolesBetaApi - axios parameter creator
 * @export
 */
export declare const RolesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {RoleBeta} roleBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRole: (roleBeta: RoleBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RoleBulkDeleteRequestBeta} roleBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBulkRoles: (roleBulkDeleteRequestBeta: RoleBulkDeleteRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRole: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Identities assigned a Role
     * @param {string} id ID of the Role for which the assigned Identities are to be listed
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignedIdentities: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List role\'s Entitlements
     * @param {string} id ID of the containing role
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleEntitlements: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRoles: (forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {string} id ID of the Role to patch
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRole: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RolesBetaApi - functional programming interface
 * @export
 */
export declare const RolesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {RoleBeta} roleBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRole(roleBeta: RoleBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBeta>>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RoleBulkDeleteRequestBeta} roleBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBulkRoles(roleBulkDeleteRequestBeta: RoleBulkDeleteRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultDtoBeta>>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRole(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBeta>>;
    /**
     *
     * @summary Identities assigned a Role
     * @param {string} id ID of the Role for which the assigned Identities are to be listed
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignedIdentities(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleIdentityBeta>>>;
    /**
     * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List role\'s Entitlements
     * @param {string} id ID of the containing role
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleEntitlements(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntitlementBeta>>>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleBeta>>>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {string} id ID of the Role to patch
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRole(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBeta>>;
};
/**
 * RolesBetaApi - factory interface
 * @export
 */
export declare const RolesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {RoleBeta} roleBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createRole(roleBeta: RoleBeta, axiosOptions?: any): AxiosPromise<RoleBeta>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RoleBulkDeleteRequestBeta} roleBulkDeleteRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteBulkRoles(roleBulkDeleteRequestBeta: RoleBulkDeleteRequestBeta, axiosOptions?: any): AxiosPromise<TaskResultDtoBeta>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {string} id ID of the Role
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRole(id: string, axiosOptions?: any): AxiosPromise<RoleBeta>;
    /**
     *
     * @summary Identities assigned a Role
     * @param {string} id ID of the Role for which the assigned Identities are to be listed
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleAssignedIdentities(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<RoleIdentityBeta>>;
    /**
     * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List role\'s Entitlements
     * @param {string} id ID of the containing role
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getRoleEntitlements(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<EntitlementBeta>>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {string} [forSubadmin] If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @param {number} [limit] Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @param {string} [forSegmentIds] If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @param {boolean} [includeUnsegmented] Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listRoles(forSubadmin?: string, limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSegmentIds?: string, includeUnsegmented?: boolean, axiosOptions?: any): AxiosPromise<Array<RoleBeta>>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {string} id ID of the Role to patch
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchRole(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<RoleBeta>;
};
/**
 * Request parameters for createRole operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiCreateRoleRequest
 */
export interface RolesBetaApiCreateRoleRequest {
    /**
     *
     * @type {RoleBeta}
     * @memberof RolesBetaApiCreateRole
     */
    readonly roleBeta: RoleBeta;
}
/**
 * Request parameters for deleteBulkRoles operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiDeleteBulkRolesRequest
 */
export interface RolesBetaApiDeleteBulkRolesRequest {
    /**
     *
     * @type {RoleBulkDeleteRequestBeta}
     * @memberof RolesBetaApiDeleteBulkRoles
     */
    readonly roleBulkDeleteRequestBeta: RoleBulkDeleteRequestBeta;
}
/**
 * Request parameters for deleteRole operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiDeleteRoleRequest
 */
export interface RolesBetaApiDeleteRoleRequest {
    /**
     * ID of the Role
     * @type {string}
     * @memberof RolesBetaApiDeleteRole
     */
    readonly id: string;
}
/**
 * Request parameters for getRole operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiGetRoleRequest
 */
export interface RolesBetaApiGetRoleRequest {
    /**
     * ID of the Role
     * @type {string}
     * @memberof RolesBetaApiGetRole
     */
    readonly id: string;
}
/**
 * Request parameters for getRoleAssignedIdentities operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiGetRoleAssignedIdentitiesRequest
 */
export interface RolesBetaApiGetRoleAssignedIdentitiesRequest {
    /**
     * ID of the Role for which the assigned Identities are to be listed
     * @type {string}
     * @memberof RolesBetaApiGetRoleAssignedIdentities
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesBetaApiGetRoleAssignedIdentities
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesBetaApiGetRoleAssignedIdentities
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RolesBetaApiGetRoleAssignedIdentities
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **aliasName**: *eq, sw*  **email**: *eq, sw*  **name**: *eq, sw, co*
     * @type {string}
     * @memberof RolesBetaApiGetRoleAssignedIdentities
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, aliasName, email**
     * @type {string}
     * @memberof RolesBetaApiGetRoleAssignedIdentities
     */
    readonly sorters?: string;
}
/**
 * Request parameters for getRoleEntitlements operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiGetRoleEntitlementsRequest
 */
export interface RolesBetaApiGetRoleEntitlementsRequest {
    /**
     * ID of the containing role
     * @type {string}
     * @memberof RolesBetaApiGetRoleEntitlements
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesBetaApiGetRoleEntitlements
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesBetaApiGetRoleEntitlements
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RolesBetaApiGetRoleEntitlements
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **attribute**: *eq, sw*  **value**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **source.id**: *eq, in*
     * @type {string}
     * @memberof RolesBetaApiGetRoleEntitlements
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, attribute, value, created, modified**
     * @type {string}
     * @memberof RolesBetaApiGetRoleEntitlements
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listRoles operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiListRolesRequest
 */
export interface RolesBetaApiListRolesRequest {
    /**
     * If provided, filters the returned list according to what is visible to the indicated ROLE_SUBADMIN Identity. The value of the parameter is either an Identity ID, or the special value **me**, which is shorthand for the calling Identity\&#39;s ID. A 400 Bad Request error is returned if the **for-subadmin** parameter is specified for an Identity that is not a subadmin.
     * @type {string}
     * @memberof RolesBetaApiListRoles
     */
    readonly forSubadmin?: string;
    /**
     * Note that for this API the maximum value for limit is 50. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesBetaApiListRoles
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof RolesBetaApiListRoles
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof RolesBetaApiListRoles
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, sw*  **created**: *gt, lt, ge, le*  **modified**: *gt, lt, ge, le*  **owner.id**: *eq, in*  **requestable**: *eq*
     * @type {string}
     * @memberof RolesBetaApiListRoles
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name, created, modified**
     * @type {string}
     * @memberof RolesBetaApiListRoles
     */
    readonly sorters?: string;
    /**
     * If present and not empty, additionally filters Roles to those which are assigned to the Segment(s) with the specified IDs.  If segmentation is currently unavailable, specifying this parameter results in an error.
     * @type {string}
     * @memberof RolesBetaApiListRoles
     */
    readonly forSegmentIds?: string;
    /**
     * Whether or not the response list should contain unsegmented Roles. If *for-segment-ids* is absent or empty, specifying *include-unsegmented* as false results in an error.
     * @type {boolean}
     * @memberof RolesBetaApiListRoles
     */
    readonly includeUnsegmented?: boolean;
}
/**
 * Request parameters for patchRole operation in RolesBetaApi.
 * @export
 * @interface RolesBetaApiPatchRoleRequest
 */
export interface RolesBetaApiPatchRoleRequest {
    /**
     * ID of the Role to patch
     * @type {string}
     * @memberof RolesBetaApiPatchRole
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof RolesBetaApiPatchRole
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * RolesBetaApi - object-oriented interface
 * @export
 * @class RolesBetaApi
 * @extends {BaseAPI}
 */
export declare class RolesBetaApi extends BaseAPI {
    /**
     * This API creates a role.  You must have a token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority to call this API.   In addition, a ROLE_SUBADMIN may not create a role including an access profile if that access profile is associated with a source the ROLE_SUBADMIN is not associated with themselves.   The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles. However, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.
     * @summary Create a Role
     * @param {RolesBetaApiCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    createRole(requestParameters: RolesBetaApiCreateRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleBeta, any>>;
    /**
     * This endpoint initiates a bulk deletion of one or more roles. When the request is successful, the endpoint returns the bulk delete\'s task result ID.  To follow the task, you can use [Get Task Status by ID](https://developer.sailpoint.com/docs/api/beta/get-task-status), which will return the task result\'s status and information.  This endpoint can only bulk delete up to a limit of 50 roles per request.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this endpoint. In addition, a token with ROLE_SUBADMIN authority can only call this endpoint if all roles included in the request are associated with sources with management workgroups the ROLE_SUBADMIN is a member of.
     * @summary Delete Role(s)
     * @param {RolesBetaApiDeleteBulkRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    deleteBulkRoles(requestParameters: RolesBetaApiDeleteBulkRolesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultDtoBeta, any>>;
    /**
     * This API deletes a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Delete a Role
     * @param {RolesBetaApiDeleteRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    deleteRole(requestParameters: RolesBetaApiDeleteRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns a Role by its ID.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all Access Profiles included in the Role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.
     * @summary Get a Role
     * @param {RolesBetaApiGetRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    getRole(requestParameters: RolesBetaApiGetRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleBeta, any>>;
    /**
     *
     * @summary Identities assigned a Role
     * @param {RolesBetaApiGetRoleAssignedIdentitiesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    getRoleAssignedIdentities(requestParameters: RolesBetaApiGetRoleAssignedIdentitiesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleIdentityBeta[], any>>;
    /**
     * This API lists the Entitlements associated with a given role.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List role\'s Entitlements
     * @param {RolesBetaApiGetRoleEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    getRoleEntitlements(requestParameters: RolesBetaApiGetRoleEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EntitlementBeta[], any>>;
    /**
     * This API returns a list of Roles.  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary List Roles
     * @param {RolesBetaApiListRolesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    listRoles(requestParameters?: RolesBetaApiListRolesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleBeta[], any>>;
    /**
     * This API updates an existing role using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.  The following fields are patchable:  * name * description * enabled * owner * accessProfiles * membership * requestable * accessRequestConfig * revokeRequestConfig * segments  A token with API, ORG_ADMIN, ROLE_ADMIN, or ROLE_SUBADMIN authority is required to call this API. In addition, a token with ROLE_SUBADMIN authority may only call this API if all access profiles included in the role are associated to Sources with management workgroups of which the ROLE_SUBADMIN is a member.  The maximum supported length for the description field is 2000 characters. Longer descriptions will be preserved for existing roles, however, any new roles as well as any updates to existing descriptions will be limited to 2000 characters.  When you use this API to modify a role\'s membership identities, you can only modify up to a limit of 500 membership identities at a time.
     * @summary Patch a specified Role
     * @param {RolesBetaApiPatchRoleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesBetaApi
     */
    patchRole(requestParameters: RolesBetaApiPatchRoleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleBeta, any>>;
}
/**
 * SIMIntegrationsBetaApi - axios parameter creator
 * @export
 */
export declare const SIMIntegrationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new SIM integration
     * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta DTO containing the details of the SIM integration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSIMIntegration: (simIntegrationDetailsBeta: SimIntegrationDetailsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a SIM integration
     * @param {string} id The id of the integration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSIMIntegration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a SIM integration details.
     * @param {string} id The id of the integration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSIMIntegration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List the existing SIM integrations.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSIMIntegrations: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM beforeProvisioningRule attribute.
     * @param {string} id SIM integration id
     * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchBeforeProvisioningRule: (id: string, jsonPatchBeta: JsonPatchBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM attribute.
     * @param {string} id SIM integration id
     * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSIMAttributes: (id: string, jsonPatchBeta: JsonPatchBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update an existing SIM integration
     * @param {string} id The id of the integration.
     * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta The full DTO of the integration containing the updated model
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSIMIntegration: (id: string, simIntegrationDetailsBeta: SimIntegrationDetailsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SIMIntegrationsBetaApi - functional programming interface
 * @export
 */
export declare const SIMIntegrationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new SIM integration
     * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta DTO containing the details of the SIM integration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSIMIntegration(simIntegrationDetailsBeta: SimIntegrationDetailsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a SIM integration
     * @param {string} id The id of the integration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSIMIntegration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a SIM integration details.
     * @param {string} id The id of the integration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSIMIntegration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List the existing SIM integrations.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSIMIntegrations(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM beforeProvisioningRule attribute.
     * @param {string} id SIM integration id
     * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchBeforeProvisioningRule(id: string, jsonPatchBeta: JsonPatchBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM attribute.
     * @param {string} id SIM integration id
     * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSIMAttributes(id: string, jsonPatchBeta: JsonPatchBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update an existing SIM integration
     * @param {string} id The id of the integration.
     * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta The full DTO of the integration containing the updated model
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSIMIntegration(id: string, simIntegrationDetailsBeta: SimIntegrationDetailsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
};
/**
 * SIMIntegrationsBetaApi - factory interface
 * @export
 */
export declare const SIMIntegrationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new SIM integration
     * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta DTO containing the details of the SIM integration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSIMIntegration(simIntegrationDetailsBeta: SimIntegrationDetailsBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a SIM integration
     * @param {string} id The id of the integration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSIMIntegration(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a SIM integration details.
     * @param {string} id The id of the integration.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSIMIntegration(id: string, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List the existing SIM integrations.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSIMIntegrations(axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM beforeProvisioningRule attribute.
     * @param {string} id SIM integration id
     * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchBeforeProvisioningRule(id: string, jsonPatchBeta: JsonPatchBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM attribute.
     * @param {string} id SIM integration id
     * @param {JsonPatchBeta} jsonPatchBeta The JsonPatch object that describes the changes of SIM
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSIMAttributes(id: string, jsonPatchBeta: JsonPatchBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update an existing SIM integration
     * @param {string} id The id of the integration.
     * @param {SimIntegrationDetailsBeta} simIntegrationDetailsBeta The full DTO of the integration containing the updated model
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSIMIntegration(id: string, simIntegrationDetailsBeta: SimIntegrationDetailsBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
};
/**
 * Request parameters for createSIMIntegration operation in SIMIntegrationsBetaApi.
 * @export
 * @interface SIMIntegrationsBetaApiCreateSIMIntegrationRequest
 */
export interface SIMIntegrationsBetaApiCreateSIMIntegrationRequest {
    /**
     * DTO containing the details of the SIM integration
     * @type {SimIntegrationDetailsBeta}
     * @memberof SIMIntegrationsBetaApiCreateSIMIntegration
     */
    readonly simIntegrationDetailsBeta: SimIntegrationDetailsBeta;
}
/**
 * Request parameters for deleteSIMIntegration operation in SIMIntegrationsBetaApi.
 * @export
 * @interface SIMIntegrationsBetaApiDeleteSIMIntegrationRequest
 */
export interface SIMIntegrationsBetaApiDeleteSIMIntegrationRequest {
    /**
     * The id of the integration to delete.
     * @type {string}
     * @memberof SIMIntegrationsBetaApiDeleteSIMIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getSIMIntegration operation in SIMIntegrationsBetaApi.
 * @export
 * @interface SIMIntegrationsBetaApiGetSIMIntegrationRequest
 */
export interface SIMIntegrationsBetaApiGetSIMIntegrationRequest {
    /**
     * The id of the integration.
     * @type {string}
     * @memberof SIMIntegrationsBetaApiGetSIMIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for patchBeforeProvisioningRule operation in SIMIntegrationsBetaApi.
 * @export
 * @interface SIMIntegrationsBetaApiPatchBeforeProvisioningRuleRequest
 */
export interface SIMIntegrationsBetaApiPatchBeforeProvisioningRuleRequest {
    /**
     * SIM integration id
     * @type {string}
     * @memberof SIMIntegrationsBetaApiPatchBeforeProvisioningRule
     */
    readonly id: string;
    /**
     * The JsonPatch object that describes the changes of SIM beforeProvisioningRule.
     * @type {JsonPatchBeta}
     * @memberof SIMIntegrationsBetaApiPatchBeforeProvisioningRule
     */
    readonly jsonPatchBeta: JsonPatchBeta;
}
/**
 * Request parameters for patchSIMAttributes operation in SIMIntegrationsBetaApi.
 * @export
 * @interface SIMIntegrationsBetaApiPatchSIMAttributesRequest
 */
export interface SIMIntegrationsBetaApiPatchSIMAttributesRequest {
    /**
     * SIM integration id
     * @type {string}
     * @memberof SIMIntegrationsBetaApiPatchSIMAttributes
     */
    readonly id: string;
    /**
     * The JsonPatch object that describes the changes of SIM
     * @type {JsonPatchBeta}
     * @memberof SIMIntegrationsBetaApiPatchSIMAttributes
     */
    readonly jsonPatchBeta: JsonPatchBeta;
}
/**
 * Request parameters for putSIMIntegration operation in SIMIntegrationsBetaApi.
 * @export
 * @interface SIMIntegrationsBetaApiPutSIMIntegrationRequest
 */
export interface SIMIntegrationsBetaApiPutSIMIntegrationRequest {
    /**
     * The id of the integration.
     * @type {string}
     * @memberof SIMIntegrationsBetaApiPutSIMIntegration
     */
    readonly id: string;
    /**
     * The full DTO of the integration containing the updated model
     * @type {SimIntegrationDetailsBeta}
     * @memberof SIMIntegrationsBetaApiPutSIMIntegration
     */
    readonly simIntegrationDetailsBeta: SimIntegrationDetailsBeta;
}
/**
 * SIMIntegrationsBetaApi - object-oriented interface
 * @export
 * @class SIMIntegrationsBetaApi
 * @extends {BaseAPI}
 */
export declare class SIMIntegrationsBetaApi extends BaseAPI {
    /**
     * Create a new SIM Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new SIM integration
     * @param {SIMIntegrationsBetaApiCreateSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    createSIMIntegration(requestParameters: SIMIntegrationsBetaApiCreateSIMIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a SIM integration
     * @param {SIMIntegrationsBetaApiDeleteSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    deleteSIMIntegration(requestParameters: SIMIntegrationsBetaApiDeleteSIMIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the details of a SIM integration. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a SIM integration details.
     * @param {SIMIntegrationsBetaApiGetSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    getSIMIntegration(requestParameters: SIMIntegrationsBetaApiGetSIMIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * List the existing SIM integrations. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List the existing SIM integrations.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    getSIMIntegrations(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Patch a SIM beforeProvisioningRule attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM beforeProvisioningRule attribute.
     * @param {SIMIntegrationsBetaApiPatchBeforeProvisioningRuleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    patchBeforeProvisioningRule(requestParameters: SIMIntegrationsBetaApiPatchBeforeProvisioningRuleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Patch a SIM attribute given a JsonPatch object. A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Patch a SIM attribute.
     * @param {SIMIntegrationsBetaApiPatchSIMAttributesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    patchSIMAttributes(requestParameters: SIMIntegrationsBetaApiPatchSIMAttributesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Update an existing SIM integration.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update an existing SIM integration
     * @param {SIMIntegrationsBetaApiPutSIMIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SIMIntegrationsBetaApi
     */
    putSIMIntegration(requestParameters: SIMIntegrationsBetaApiPutSIMIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
}
/**
 * SODPoliciesBetaApi - axios parameter creator
 * @export
 */
export declare const SODPoliciesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SodPolicyBeta} sodPolicyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createSodPolicy: (sodPolicyBeta: SodPolicyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {string} id The ID of the SOD Policy to delete.
     * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSodPolicy: (id: string, logical?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy schedule
     * @param {string} id The ID of the SOD policy the schedule must be deleted for.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSodPolicySchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download custom violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {string} fileName Custom Name for the  file.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCustomViolationReport: (reportResultId: string, fileName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getDefaultViolationReport: (reportResultId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodAllReportRunStatus: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
     * @summary Get SOD policy schedule
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodPolicySchedule: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get violation report run status
     * @param {string} reportResultId The ID of the report reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodViolationReportRunStatus: (reportResultId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get SOD violation report status
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodViolationReportStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listSodPolicies: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch a SOD policy
     * @param {string} id The ID of the SOD policy being modified.
     * @param {Array<object>} requestBody A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    patchSodPolicy: (id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD Policy schedule
     * @param {string} id The ID of the SOD policy to update its schedule.
     * @param {SodPolicyScheduleBeta} sodPolicyScheduleBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putPolicySchedule: (id: string, sodPolicyScheduleBeta: SodPolicyScheduleBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {string} id The ID of the SOD policy to update.
     * @param {SodPolicyBeta} sodPolicyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putSodPolicy: (id: string, sodPolicyBeta: SodPolicyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
     * @summary Runs all policies for org
     * @param {MultiPolicyRequestBeta} [multiPolicyRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startSodAllPoliciesForOrg: (multiPolicyRequestBeta?: MultiPolicyRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
     * @summary Runs SOD policy violation report
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startSodPolicy: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SODPoliciesBetaApi - functional programming interface
 * @export
 */
export declare const SODPoliciesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SodPolicyBeta} sodPolicyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createSodPolicy(sodPolicyBeta: SodPolicyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicyBeta>>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {string} id The ID of the SOD Policy to delete.
     * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSodPolicy(id: string, logical?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy schedule
     * @param {string} id The ID of the SOD policy the schedule must be deleted for.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSodPolicySchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download custom violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {string} fileName Custom Name for the  file.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCustomViolationReport(reportResultId: string, fileName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getDefaultViolationReport(reportResultId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodAllReportRunStatus(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReferenceBeta>>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicyBeta>>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
     * @summary Get SOD policy schedule
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodPolicySchedule(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicyScheduleBeta>>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get violation report run status
     * @param {string} reportResultId The ID of the report reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodViolationReportRunStatus(reportResultId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReferenceBeta>>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get SOD violation report status
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodViolationReportStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReferenceBeta>>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listSodPolicies(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SodPolicyBeta>>>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch a SOD policy
     * @param {string} id The ID of the SOD policy being modified.
     * @param {Array<object>} requestBody A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    patchSodPolicy(id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicyBeta>>;
    /**
     * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD Policy schedule
     * @param {string} id The ID of the SOD policy to update its schedule.
     * @param {SodPolicyScheduleBeta} sodPolicyScheduleBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putPolicySchedule(id: string, sodPolicyScheduleBeta: SodPolicyScheduleBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicyScheduleBeta>>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {string} id The ID of the SOD policy to update.
     * @param {SodPolicyBeta} sodPolicyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putSodPolicy(id: string, sodPolicyBeta: SodPolicyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SodPolicyBeta>>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
     * @summary Runs all policies for org
     * @param {MultiPolicyRequestBeta} [multiPolicyRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startSodAllPoliciesForOrg(multiPolicyRequestBeta?: MultiPolicyRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReferenceBeta>>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
     * @summary Runs SOD policy violation report
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startSodPolicy(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportResultReferenceBeta>>;
};
/**
 * SODPoliciesBetaApi - factory interface
 * @export
 */
export declare const SODPoliciesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SodPolicyBeta} sodPolicyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createSodPolicy(sodPolicyBeta: SodPolicyBeta, axiosOptions?: any): AxiosPromise<SodPolicyBeta>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {string} id The ID of the SOD Policy to delete.
     * @param {boolean} [logical] Indicates whether this is a soft delete (logical true) or a hard delete.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSodPolicy(id: string, logical?: boolean, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy schedule
     * @param {string} id The ID of the SOD policy the schedule must be deleted for.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSodPolicySchedule(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download custom violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {string} fileName Custom Name for the  file.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getCustomViolationReport(reportResultId: string, fileName: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download violation report
     * @param {string} reportResultId The ID of the report reference to download.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getDefaultViolationReport(reportResultId: string, axiosOptions?: any): AxiosPromise<any>;
    /**
     * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodAllReportRunStatus(axiosOptions?: any): AxiosPromise<ReportResultReferenceBeta>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodPolicy(id: string, axiosOptions?: any): AxiosPromise<SodPolicyBeta>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
     * @summary Get SOD policy schedule
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodPolicySchedule(id: string, axiosOptions?: any): AxiosPromise<SodPolicyScheduleBeta>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get violation report run status
     * @param {string} reportResultId The ID of the report reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodViolationReportRunStatus(reportResultId: string, axiosOptions?: any): AxiosPromise<ReportResultReferenceBeta>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get SOD violation report status
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSodViolationReportStatus(id: string, axiosOptions?: any): AxiosPromise<ReportResultReferenceBeta>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listSodPolicies(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<SodPolicyBeta>>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch a SOD policy
     * @param {string} id The ID of the SOD policy being modified.
     * @param {Array<object>} requestBody A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    patchSodPolicy(id: string, requestBody: Array<object>, axiosOptions?: any): AxiosPromise<SodPolicyBeta>;
    /**
     * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD Policy schedule
     * @param {string} id The ID of the SOD policy to update its schedule.
     * @param {SodPolicyScheduleBeta} sodPolicyScheduleBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putPolicySchedule(id: string, sodPolicyScheduleBeta: SodPolicyScheduleBeta, axiosOptions?: any): AxiosPromise<SodPolicyScheduleBeta>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {string} id The ID of the SOD policy to update.
     * @param {SodPolicyBeta} sodPolicyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    putSodPolicy(id: string, sodPolicyBeta: SodPolicyBeta, axiosOptions?: any): AxiosPromise<SodPolicyBeta>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
     * @summary Runs all policies for org
     * @param {MultiPolicyRequestBeta} [multiPolicyRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startSodAllPoliciesForOrg(multiPolicyRequestBeta?: MultiPolicyRequestBeta, axiosOptions?: any): AxiosPromise<ReportResultReferenceBeta>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
     * @summary Runs SOD policy violation report
     * @param {string} id The SOD policy ID to run.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startSodPolicy(id: string, axiosOptions?: any): AxiosPromise<ReportResultReferenceBeta>;
};
/**
 * Request parameters for createSodPolicy operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiCreateSodPolicyRequest
 */
export interface SODPoliciesBetaApiCreateSodPolicyRequest {
    /**
     *
     * @type {SodPolicyBeta}
     * @memberof SODPoliciesBetaApiCreateSodPolicy
     */
    readonly sodPolicyBeta: SodPolicyBeta;
}
/**
 * Request parameters for deleteSodPolicy operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiDeleteSodPolicyRequest
 */
export interface SODPoliciesBetaApiDeleteSodPolicyRequest {
    /**
     * The ID of the SOD Policy to delete.
     * @type {string}
     * @memberof SODPoliciesBetaApiDeleteSodPolicy
     */
    readonly id: string;
    /**
     * Indicates whether this is a soft delete (logical true) or a hard delete.
     * @type {boolean}
     * @memberof SODPoliciesBetaApiDeleteSodPolicy
     */
    readonly logical?: boolean;
}
/**
 * Request parameters for deleteSodPolicySchedule operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiDeleteSodPolicyScheduleRequest
 */
export interface SODPoliciesBetaApiDeleteSodPolicyScheduleRequest {
    /**
     * The ID of the SOD policy the schedule must be deleted for.
     * @type {string}
     * @memberof SODPoliciesBetaApiDeleteSodPolicySchedule
     */
    readonly id: string;
}
/**
 * Request parameters for getCustomViolationReport operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiGetCustomViolationReportRequest
 */
export interface SODPoliciesBetaApiGetCustomViolationReportRequest {
    /**
     * The ID of the report reference to download.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetCustomViolationReport
     */
    readonly reportResultId: string;
    /**
     * Custom Name for the  file.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetCustomViolationReport
     */
    readonly fileName: string;
}
/**
 * Request parameters for getDefaultViolationReport operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiGetDefaultViolationReportRequest
 */
export interface SODPoliciesBetaApiGetDefaultViolationReportRequest {
    /**
     * The ID of the report reference to download.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetDefaultViolationReport
     */
    readonly reportResultId: string;
}
/**
 * Request parameters for getSodPolicy operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiGetSodPolicyRequest
 */
export interface SODPoliciesBetaApiGetSodPolicyRequest {
    /**
     * The ID of the object reference to retrieve.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetSodPolicy
     */
    readonly id: string;
}
/**
 * Request parameters for getSodPolicySchedule operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiGetSodPolicyScheduleRequest
 */
export interface SODPoliciesBetaApiGetSodPolicyScheduleRequest {
    /**
     * The ID of the object reference to retrieve.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetSodPolicySchedule
     */
    readonly id: string;
}
/**
 * Request parameters for getSodViolationReportRunStatus operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiGetSodViolationReportRunStatusRequest
 */
export interface SODPoliciesBetaApiGetSodViolationReportRunStatusRequest {
    /**
     * The ID of the report reference to retrieve.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetSodViolationReportRunStatus
     */
    readonly reportResultId: string;
}
/**
 * Request parameters for getSodViolationReportStatus operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiGetSodViolationReportStatusRequest
 */
export interface SODPoliciesBetaApiGetSodViolationReportStatusRequest {
    /**
     * The ID of the object reference to retrieve.
     * @type {string}
     * @memberof SODPoliciesBetaApiGetSodViolationReportStatus
     */
    readonly id: string;
}
/**
 * Request parameters for listSodPolicies operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiListSodPoliciesRequest
 */
export interface SODPoliciesBetaApiListSodPoliciesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SODPoliciesBetaApiListSodPolicies
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SODPoliciesBetaApiListSodPolicies
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SODPoliciesBetaApiListSodPolicies
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq, in*  **state**: *eq, in*
     * @type {string}
     * @memberof SODPoliciesBetaApiListSodPolicies
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name, created, modified, description**
     * @type {string}
     * @memberof SODPoliciesBetaApiListSodPolicies
     */
    readonly sorters?: string;
}
/**
 * Request parameters for patchSodPolicy operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiPatchSodPolicyRequest
 */
export interface SODPoliciesBetaApiPatchSodPolicyRequest {
    /**
     * The ID of the SOD policy being modified.
     * @type {string}
     * @memberof SODPoliciesBetaApiPatchSodPolicy
     */
    readonly id: string;
    /**
     * A list of SOD Policy update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * ownerRef * externalPolicyReference * compensatingControls * correctionAdvice * state * tags * violationOwnerAssignmentConfig * scheduled * conflictingAccessCriteria
     * @type {Array<object>}
     * @memberof SODPoliciesBetaApiPatchSodPolicy
     */
    readonly requestBody: Array<object>;
}
/**
 * Request parameters for putPolicySchedule operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiPutPolicyScheduleRequest
 */
export interface SODPoliciesBetaApiPutPolicyScheduleRequest {
    /**
     * The ID of the SOD policy to update its schedule.
     * @type {string}
     * @memberof SODPoliciesBetaApiPutPolicySchedule
     */
    readonly id: string;
    /**
     *
     * @type {SodPolicyScheduleBeta}
     * @memberof SODPoliciesBetaApiPutPolicySchedule
     */
    readonly sodPolicyScheduleBeta: SodPolicyScheduleBeta;
}
/**
 * Request parameters for putSodPolicy operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiPutSodPolicyRequest
 */
export interface SODPoliciesBetaApiPutSodPolicyRequest {
    /**
     * The ID of the SOD policy to update.
     * @type {string}
     * @memberof SODPoliciesBetaApiPutSodPolicy
     */
    readonly id: string;
    /**
     *
     * @type {SodPolicyBeta}
     * @memberof SODPoliciesBetaApiPutSodPolicy
     */
    readonly sodPolicyBeta: SodPolicyBeta;
}
/**
 * Request parameters for startSodAllPoliciesForOrg operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiStartSodAllPoliciesForOrgRequest
 */
export interface SODPoliciesBetaApiStartSodAllPoliciesForOrgRequest {
    /**
     *
     * @type {MultiPolicyRequestBeta}
     * @memberof SODPoliciesBetaApiStartSodAllPoliciesForOrg
     */
    readonly multiPolicyRequestBeta?: MultiPolicyRequestBeta;
}
/**
 * Request parameters for startSodPolicy operation in SODPoliciesBetaApi.
 * @export
 * @interface SODPoliciesBetaApiStartSodPolicyRequest
 */
export interface SODPoliciesBetaApiStartSodPolicyRequest {
    /**
     * The SOD policy ID to run.
     * @type {string}
     * @memberof SODPoliciesBetaApiStartSodPolicy
     */
    readonly id: string;
}
/**
 * SODPoliciesBetaApi - object-oriented interface
 * @export
 * @class SODPoliciesBetaApi
 * @extends {BaseAPI}
 */
export declare class SODPoliciesBetaApi extends BaseAPI {
    /**
     * This creates both General and Conflicting Access Based policy, with a limit of 50 entitlements for each (left & right) criteria for Conflicting Access Based SOD policy. Requires role of ORG_ADMIN.
     * @summary Create SOD policy
     * @param {SODPoliciesBetaApiCreateSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    createSodPolicy(requestParameters: SODPoliciesBetaApiCreateSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyBeta, any>>;
    /**
     * This deletes a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy by ID
     * @param {SODPoliciesBetaApiDeleteSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    deleteSodPolicy(requestParameters: SODPoliciesBetaApiDeleteSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This deletes schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Delete SOD policy schedule
     * @param {SODPoliciesBetaApiDeleteSodPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    deleteSodPolicySchedule(requestParameters: SODPoliciesBetaApiDeleteSodPolicyScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This allows to download a specified named violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download custom violation report
     * @param {SODPoliciesBetaApiGetCustomViolationReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getCustomViolationReport(requestParameters: SODPoliciesBetaApiGetCustomViolationReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This allows to download a violation report for a given report reference. Requires role of ORG_ADMIN.
     * @summary Download violation report
     * @param {SODPoliciesBetaApiGetDefaultViolationReportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getDefaultViolationReport(requestParameters: SODPoliciesBetaApiGetDefaultViolationReportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * This endpoint gets the status for a violation report for all policy run. Requires role of ORG_ADMIN.
     * @summary Get multi-report run task status
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getSodAllReportRunStatus(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReferenceBeta, any>>;
    /**
     * This gets specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Get SOD policy by ID
     * @param {SODPoliciesBetaApiGetSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getSodPolicy(requestParameters: SODPoliciesBetaApiGetSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyBeta, any>>;
    /**
     * This endpoint gets a specified SOD policy\'s schedule. Requires the role of ORG_ADMIN.
     * @summary Get SOD policy schedule
     * @param {SODPoliciesBetaApiGetSodPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getSodPolicySchedule(requestParameters: SODPoliciesBetaApiGetSodPolicyScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyScheduleBeta, any>>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get violation report run status
     * @param {SODPoliciesBetaApiGetSodViolationReportRunStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getSodViolationReportRunStatus(requestParameters: SODPoliciesBetaApiGetSodViolationReportRunStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReferenceBeta, any>>;
    /**
     * This gets the status for a violation report run task that has already been invoked. Requires role of ORG_ADMIN.
     * @summary Get SOD violation report status
     * @param {SODPoliciesBetaApiGetSodViolationReportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    getSodViolationReportStatus(requestParameters: SODPoliciesBetaApiGetSodViolationReportStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReferenceBeta, any>>;
    /**
     * This gets list of all SOD policies. Requires role of ORG_ADMIN
     * @summary List SOD policies
     * @param {SODPoliciesBetaApiListSodPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    listSodPolicies(requestParameters?: SODPoliciesBetaApiListSodPoliciesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyBeta[], any>>;
    /**
     * Allows updating SOD Policy fields other than [\"id\",\"created\",\"creatorId\",\"policyQuery\",\"type\"] using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Requires role of ORG_ADMIN. This endpoint can only patch CONFLICTING_ACCESS_BASED type policies. Do not use this endpoint to patch general policies - doing so will build an API exception.
     * @summary Patch a SOD policy
     * @param {SODPoliciesBetaApiPatchSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    patchSodPolicy(requestParameters: SODPoliciesBetaApiPatchSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyBeta, any>>;
    /**
     * This updates schedule for a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD Policy schedule
     * @param {SODPoliciesBetaApiPutPolicyScheduleRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    putPolicySchedule(requestParameters: SODPoliciesBetaApiPutPolicyScheduleRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyScheduleBeta, any>>;
    /**
     * This updates a specified SOD policy. Requires role of ORG_ADMIN.
     * @summary Update SOD policy by ID
     * @param {SODPoliciesBetaApiPutSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    putSodPolicy(requestParameters: SODPoliciesBetaApiPutSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SodPolicyBeta, any>>;
    /**
     * Runs multi-policy report for the org. If a policy reports more than 5000 violations, the report mentions that the violation limit was exceeded for that policy. If the request is empty, the report runs for all policies. Otherwise, the report runs for only the filtered policy list provided. Requires role of ORG_ADMIN.
     * @summary Runs all policies for org
     * @param {SODPoliciesBetaApiStartSodAllPoliciesForOrgRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    startSodAllPoliciesForOrg(requestParameters?: SODPoliciesBetaApiStartSodAllPoliciesForOrgRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReferenceBeta, any>>;
    /**
     * This invokes processing of violation report for given SOD policy. If the policy reports more than 5000 violations, the report returns with violation limit exceeded message. Requires role of ORG_ADMIN.
     * @summary Runs SOD policy violation report
     * @param {SODPoliciesBetaApiStartSodPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODPoliciesBetaApi
     */
    startSodPolicy(requestParameters: SODPoliciesBetaApiStartSodPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ReportResultReferenceBeta, any>>;
}
/**
 * SODViolationsBetaApi - axios parameter creator
 * @export
 */
export declare const SODViolationsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {IdentityWithNewAccessBeta} identityWithNewAccessBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startPredictSodViolations: (identityWithNewAccessBeta: IdentityWithNewAccessBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SODViolationsBetaApi - functional programming interface
 * @export
 */
export declare const SODViolationsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {IdentityWithNewAccessBeta} identityWithNewAccessBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startPredictSodViolations(identityWithNewAccessBeta: IdentityWithNewAccessBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViolationPredictionBeta>>;
};
/**
 * SODViolationsBetaApi - factory interface
 * @export
 */
export declare const SODViolationsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {IdentityWithNewAccessBeta} identityWithNewAccessBeta
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startPredictSodViolations(identityWithNewAccessBeta: IdentityWithNewAccessBeta, axiosOptions?: any): AxiosPromise<ViolationPredictionBeta>;
};
/**
 * Request parameters for startPredictSodViolations operation in SODViolationsBetaApi.
 * @export
 * @interface SODViolationsBetaApiStartPredictSodViolationsRequest
 */
export interface SODViolationsBetaApiStartPredictSodViolationsRequest {
    /**
     *
     * @type {IdentityWithNewAccessBeta}
     * @memberof SODViolationsBetaApiStartPredictSodViolations
     */
    readonly identityWithNewAccessBeta: IdentityWithNewAccessBeta;
}
/**
 * SODViolationsBetaApi - object-oriented interface
 * @export
 * @class SODViolationsBetaApi
 * @extends {BaseAPI}
 */
export declare class SODViolationsBetaApi extends BaseAPI {
    /**
     * This API is used to check if granting some additional accesses would cause the subject to be in violation of any SOD policies. Returns the violations that would be caused.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Predict SOD violations for identity.
     * @param {SODViolationsBetaApiStartPredictSodViolationsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SODViolationsBetaApi
     */
    startPredictSodViolations(requestParameters: SODViolationsBetaApiStartPredictSodViolationsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ViolationPredictionBeta, any>>;
}
/**
 * SPConfigBetaApi - axios parameter creator
 * @export
 */
export declare const SPConfigBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
     * @summary Initiates configuration objects export job
     * @param {ExportPayloadBeta} exportPayloadBeta Export options control what will be included in the export.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportSpConfig: (exportPayloadBeta: ExportPayloadBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Download export job result.
     * @param {string} id The ID of the export job whose results will be downloaded.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigExport: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Get export job status
     * @param {string} id The ID of the export job whose status will be returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigExportStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
     * @summary Download import job result
     * @param {string} id The ID of the import job whose results will be downloaded.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigImport: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Get import job status
     * @param {string} id The ID of the import job whose status will be returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigImportStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Initiates configuration objects import job
     * @param {any} data JSON file containing the objects to be imported.
     * @param {boolean} [preview] This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
     * @param {ImportOptionsBeta} [options]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSpConfig: (data: any, preview?: boolean, options?: ImportOptionsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
     * @summary Get config object details
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSpConfigObjects: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SPConfigBetaApi - functional programming interface
 * @export
 */
export declare const SPConfigBetaApiFp: (configuration?: Configuration) => {
    /**
     * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
     * @summary Initiates configuration objects export job
     * @param {ExportPayloadBeta} exportPayloadBeta Export options control what will be included in the export.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportSpConfig(exportPayloadBeta: ExportPayloadBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpConfigExportJobBeta>>;
    /**
     * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Download export job result.
     * @param {string} id The ID of the export job whose results will be downloaded.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigExport(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpConfigExportResultsBeta>>;
    /**
     * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Get export job status
     * @param {string} id The ID of the export job whose status will be returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigExportStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpConfigExportJobStatusBeta>>;
    /**
     * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
     * @summary Download import job result
     * @param {string} id The ID of the import job whose results will be downloaded.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigImport(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpConfigImportResultsBeta>>;
    /**
     * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Get import job status
     * @param {string} id The ID of the import job whose status will be returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigImportStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpConfigImportJobStatusBeta>>;
    /**
     * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Initiates configuration objects import job
     * @param {any} data JSON file containing the objects to be imported.
     * @param {boolean} [preview] This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
     * @param {ImportOptionsBeta} [options]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSpConfig(data: any, preview?: boolean, options?: ImportOptionsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpConfigJobBeta>>;
    /**
     * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
     * @summary Get config object details
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSpConfigObjects(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpConfigObjectBeta>>>;
};
/**
 * SPConfigBetaApi - factory interface
 * @export
 */
export declare const SPConfigBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
     * @summary Initiates configuration objects export job
     * @param {ExportPayloadBeta} exportPayloadBeta Export options control what will be included in the export.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    exportSpConfig(exportPayloadBeta: ExportPayloadBeta, axiosOptions?: any): AxiosPromise<SpConfigExportJobBeta>;
    /**
     * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Download export job result.
     * @param {string} id The ID of the export job whose results will be downloaded.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigExport(id: string, axiosOptions?: any): AxiosPromise<SpConfigExportResultsBeta>;
    /**
     * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Get export job status
     * @param {string} id The ID of the export job whose status will be returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigExportStatus(id: string, axiosOptions?: any): AxiosPromise<SpConfigExportJobStatusBeta>;
    /**
     * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
     * @summary Download import job result
     * @param {string} id The ID of the import job whose results will be downloaded.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigImport(id: string, axiosOptions?: any): AxiosPromise<SpConfigImportResultsBeta>;
    /**
     * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Get import job status
     * @param {string} id The ID of the import job whose status will be returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSpConfigImportStatus(id: string, axiosOptions?: any): AxiosPromise<SpConfigImportJobStatusBeta>;
    /**
     * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Initiates configuration objects import job
     * @param {any} data JSON file containing the objects to be imported.
     * @param {boolean} [preview] This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
     * @param {ImportOptionsBeta} [options]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSpConfig(data: any, preview?: boolean, options?: ImportOptionsBeta, axiosOptions?: any): AxiosPromise<SpConfigJobBeta>;
    /**
     * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
     * @summary Get config object details
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSpConfigObjects(axiosOptions?: any): AxiosPromise<Array<SpConfigObjectBeta>>;
};
/**
 * Request parameters for exportSpConfig operation in SPConfigBetaApi.
 * @export
 * @interface SPConfigBetaApiExportSpConfigRequest
 */
export interface SPConfigBetaApiExportSpConfigRequest {
    /**
     * Export options control what will be included in the export.
     * @type {ExportPayloadBeta}
     * @memberof SPConfigBetaApiExportSpConfig
     */
    readonly exportPayloadBeta: ExportPayloadBeta;
}
/**
 * Request parameters for getSpConfigExport operation in SPConfigBetaApi.
 * @export
 * @interface SPConfigBetaApiGetSpConfigExportRequest
 */
export interface SPConfigBetaApiGetSpConfigExportRequest {
    /**
     * The ID of the export job whose results will be downloaded.
     * @type {string}
     * @memberof SPConfigBetaApiGetSpConfigExport
     */
    readonly id: string;
}
/**
 * Request parameters for getSpConfigExportStatus operation in SPConfigBetaApi.
 * @export
 * @interface SPConfigBetaApiGetSpConfigExportStatusRequest
 */
export interface SPConfigBetaApiGetSpConfigExportStatusRequest {
    /**
     * The ID of the export job whose status will be returned.
     * @type {string}
     * @memberof SPConfigBetaApiGetSpConfigExportStatus
     */
    readonly id: string;
}
/**
 * Request parameters for getSpConfigImport operation in SPConfigBetaApi.
 * @export
 * @interface SPConfigBetaApiGetSpConfigImportRequest
 */
export interface SPConfigBetaApiGetSpConfigImportRequest {
    /**
     * The ID of the import job whose results will be downloaded.
     * @type {string}
     * @memberof SPConfigBetaApiGetSpConfigImport
     */
    readonly id: string;
}
/**
 * Request parameters for getSpConfigImportStatus operation in SPConfigBetaApi.
 * @export
 * @interface SPConfigBetaApiGetSpConfigImportStatusRequest
 */
export interface SPConfigBetaApiGetSpConfigImportStatusRequest {
    /**
     * The ID of the import job whose status will be returned.
     * @type {string}
     * @memberof SPConfigBetaApiGetSpConfigImportStatus
     */
    readonly id: string;
}
/**
 * Request parameters for importSpConfig operation in SPConfigBetaApi.
 * @export
 * @interface SPConfigBetaApiImportSpConfigRequest
 */
export interface SPConfigBetaApiImportSpConfigRequest {
    /**
     * JSON file containing the objects to be imported.
     * @type {any}
     * @memberof SPConfigBetaApiImportSpConfig
     */
    readonly data: any;
    /**
     * This option is intended to give the user information about how an import operation would proceed, without having any effect on the target tenant. If this parameter is \&quot;true\&quot;, no objects will be imported. Instead, the import process will pre-process the import file and attempt to resolve references within imported objects. The import result file will contain messages pertaining to how specific references were resolved, any errors associated with the preprocessing, and messages indicating which objects would be imported.
     * @type {boolean}
     * @memberof SPConfigBetaApiImportSpConfig
     */
    readonly preview?: boolean;
    /**
     *
     * @type {ImportOptionsBeta}
     * @memberof SPConfigBetaApiImportSpConfig
     */
    readonly options?: ImportOptionsBeta;
}
/**
 * SPConfigBetaApi - object-oriented interface
 * @export
 * @class SPConfigBetaApi
 * @extends {BaseAPI}
 */
export declare class SPConfigBetaApi extends BaseAPI {
    /**
     * This post will export objects from the tenant to a JSON configuration file. For more information about the object types that currently support export functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects).
     * @summary Initiates configuration objects export job
     * @param {SPConfigBetaApiExportSpConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    exportSpConfig(requestParameters: SPConfigBetaApiExportSpConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigExportJobBeta, any>>;
    /**
     * This endpoint gets the export file resulting from the export job with the requested `id` and downloads it to a file. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Download export job result.
     * @param {SPConfigBetaApiGetSpConfigExportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    getSpConfigExport(requestParameters: SPConfigBetaApiGetSpConfigExportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigExportResultsBeta, any>>;
    /**
     * This gets the status of the export job identified by the `id` parameter. The request will need one of the following security scopes: - sp:config:read - sp:config:manage
     * @summary Get export job status
     * @param {SPConfigBetaApiGetSpConfigExportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    getSpConfigExportStatus(requestParameters: SPConfigBetaApiGetSpConfigExportStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigExportJobStatusBeta, any>>;
    /**
     * This gets import file resulting from the import job with the requested id and downloads it to a file. The downloaded file will contain the results of the import operation, including any error, warning or informational messages associated with the import. The request will need the following security scope: - sp:config:manage
     * @summary Download import job result
     * @param {SPConfigBetaApiGetSpConfigImportRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    getSpConfigImport(requestParameters: SPConfigBetaApiGetSpConfigImportRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigImportResultsBeta, any>>;
    /**
     * This gets the status of the import job identified by the `id` parameter. For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Get import job status
     * @param {SPConfigBetaApiGetSpConfigImportStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    getSpConfigImportStatus(requestParameters: SPConfigBetaApiGetSpConfigImportStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigImportJobStatusBeta, any>>;
    /**
     * This post will import objects from a JSON configuration file into a tenant. By default, every import will first export all existing objects supported by sp-config as a backup before the import is attempted. The backup is provided so that the state of the configuration prior to the import is available for inspection or restore if needed. The backup can be skipped by setting \"excludeBackup\" to true in the import options. If a backup is performed, the id of the backup will be provided in the ImportResult as the \"exportJobId\". This can be downloaded  using the /sp-config/export/{exportJobId}/download endpoint. You cannot currently import from the Non-Employee Lifecycle Management (NELM) source. You cannot use this endpoint to back up or store NELM data.  For more information about the object types that currently support import functionality, refer to [SaaS Configuration](https://developer.sailpoint.com/idn/docs/saas-configuration/#supported-objects). The request will need the following security scope: - sp:config:manage
     * @summary Initiates configuration objects import job
     * @param {SPConfigBetaApiImportSpConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    importSpConfig(requestParameters: SPConfigBetaApiImportSpConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigJobBeta, any>>;
    /**
     * This gets the list of object configurations which are known to the tenant export/import service. Object configurations that contain \"importUrl\" and \"exportUrl\" are available for export/import.
     * @summary Get config object details
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SPConfigBetaApi
     */
    listSpConfigObjects(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SpConfigObjectBeta[], any>>;
}
/**
 * SearchAttributeConfigurationBetaApi - axios parameter creator
 * @export
 */
export declare const SearchAttributeConfigurationBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create extended search attributes in IdentityNow.
     * @param {SearchAttributeConfigBeta} searchAttributeConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSearchAttributeConfig: (searchAttributeConfigBeta: SearchAttributeConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an extended search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSearchAttributeConfig: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve a list of extended search attributes in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSearchAttributeConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get the details of a specific extended search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSingleSearchAttributeConfig: (name: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update the details of a specific extended search attribute in IdentityNow.
     * @param {string} name Name of the Search Attribute Configuration to patch.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSearchAttributeConfig: (name: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SearchAttributeConfigurationBetaApi - functional programming interface
 * @export
 */
export declare const SearchAttributeConfigurationBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create extended search attributes in IdentityNow.
     * @param {SearchAttributeConfigBeta} searchAttributeConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSearchAttributeConfig(searchAttributeConfigBeta: SearchAttributeConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an extended search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSearchAttributeConfig(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve a list of extended search attributes in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSearchAttributeConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchAttributeConfigBeta>>>;
    /**
     * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get the details of a specific extended search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSingleSearchAttributeConfig(name: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SearchAttributeConfigBeta>>>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update the details of a specific extended search attribute in IdentityNow.
     * @param {string} name Name of the Search Attribute Configuration to patch.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSearchAttributeConfig(name: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchAttributeConfigBeta>>;
};
/**
 * SearchAttributeConfigurationBetaApi - factory interface
 * @export
 */
export declare const SearchAttributeConfigurationBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create extended search attributes in IdentityNow.
     * @param {SearchAttributeConfigBeta} searchAttributeConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSearchAttributeConfig(searchAttributeConfigBeta: SearchAttributeConfigBeta, axiosOptions?: any): AxiosPromise<object>;
    /**
     * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an extended search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSearchAttributeConfig(name: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve a list of extended search attributes in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSearchAttributeConfig(axiosOptions?: any): AxiosPromise<Array<SearchAttributeConfigBeta>>;
    /**
     * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get the details of a specific extended search attribute in IdentityNow.
     * @param {string} name Name of the extended search attribute configuration to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSingleSearchAttributeConfig(name: string, axiosOptions?: any): AxiosPromise<Array<SearchAttributeConfigBeta>>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update the details of a specific extended search attribute in IdentityNow.
     * @param {string} name Name of the Search Attribute Configuration to patch.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSearchAttributeConfig(name: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<SearchAttributeConfigBeta>;
};
/**
 * Request parameters for createSearchAttributeConfig operation in SearchAttributeConfigurationBetaApi.
 * @export
 * @interface SearchAttributeConfigurationBetaApiCreateSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationBetaApiCreateSearchAttributeConfigRequest {
    /**
     *
     * @type {SearchAttributeConfigBeta}
     * @memberof SearchAttributeConfigurationBetaApiCreateSearchAttributeConfig
     */
    readonly searchAttributeConfigBeta: SearchAttributeConfigBeta;
}
/**
 * Request parameters for deleteSearchAttributeConfig operation in SearchAttributeConfigurationBetaApi.
 * @export
 * @interface SearchAttributeConfigurationBetaApiDeleteSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationBetaApiDeleteSearchAttributeConfigRequest {
    /**
     * Name of the extended search attribute configuration to delete.
     * @type {string}
     * @memberof SearchAttributeConfigurationBetaApiDeleteSearchAttributeConfig
     */
    readonly name: string;
}
/**
 * Request parameters for getSingleSearchAttributeConfig operation in SearchAttributeConfigurationBetaApi.
 * @export
 * @interface SearchAttributeConfigurationBetaApiGetSingleSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationBetaApiGetSingleSearchAttributeConfigRequest {
    /**
     * Name of the extended search attribute configuration to delete.
     * @type {string}
     * @memberof SearchAttributeConfigurationBetaApiGetSingleSearchAttributeConfig
     */
    readonly name: string;
}
/**
 * Request parameters for patchSearchAttributeConfig operation in SearchAttributeConfigurationBetaApi.
 * @export
 * @interface SearchAttributeConfigurationBetaApiPatchSearchAttributeConfigRequest
 */
export interface SearchAttributeConfigurationBetaApiPatchSearchAttributeConfigRequest {
    /**
     * Name of the Search Attribute Configuration to patch.
     * @type {string}
     * @memberof SearchAttributeConfigurationBetaApiPatchSearchAttributeConfig
     */
    readonly name: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof SearchAttributeConfigurationBetaApiPatchSearchAttributeConfig
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * SearchAttributeConfigurationBetaApi - object-oriented interface
 * @export
 * @class SearchAttributeConfigurationBetaApi
 * @extends {BaseAPI}
 */
export declare class SearchAttributeConfigurationBetaApi extends BaseAPI {
    /**
     * This API accepts an attribute name, an attribute display name and a list of name/value pair associates of application IDs to attribute names.  It will then validate the inputs and configure/create and attribute promotion configuration in the Link ObjectConfig. A token with ORG_ADMIN authority is required to call this API.
     * @summary Configure/create extended search attributes in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiCreateSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    createSearchAttributeConfig(requestParameters: SearchAttributeConfigurationBetaApiCreateSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * This API accepts an extended attribute name and deletes the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Delete an extended search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiDeleteSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    deleteSearchAttributeConfig(requestParameters: SearchAttributeConfigurationBetaApiDeleteSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API retrieves a list of attribute/application associates currently configured in IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Retrieve a list of extended search attributes in IdentityNow.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    getSearchAttributeConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchAttributeConfigBeta[], any>>;
    /**
     * This API accepts an extended attribute name and retrieves the corresponding extended attribute configuration. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get the details of a specific extended search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiGetSingleSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    getSingleSearchAttributeConfig(requestParameters: SearchAttributeConfigurationBetaApiGetSingleSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchAttributeConfigBeta[], any>>;
    /**
     * This API updates an existing Search Attribute Configuration. The following fields are patchable: **name**, **displayName**, **applicationAttributes** A token with ORG_ADMIN authority is required to call this API.
     * @summary Update the details of a specific extended search attribute in IdentityNow.
     * @param {SearchAttributeConfigurationBetaApiPatchSearchAttributeConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAttributeConfigurationBetaApi
     */
    patchSearchAttributeConfig(requestParameters: SearchAttributeConfigurationBetaApiPatchSearchAttributeConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchAttributeConfigBeta, any>>;
}
/**
 * SegmentsBetaApi - axios parameter creator
 * @export
 */
export declare const SegmentsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {SegmentBeta} segmentBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSegment: (segmentBeta: SegmentBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {string} id The segment ID to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSegment: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {string} id The segment ID to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSegment: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSegments: (limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {string} id The segment ID to modify.
     * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSegment: (id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SegmentsBetaApi - functional programming interface
 * @export
 */
export declare const SegmentsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {SegmentBeta} segmentBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSegment(segmentBeta: SegmentBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentBeta>>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {string} id The segment ID to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSegment(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {string} id The segment ID to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSegment(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentBeta>>;
    /**
     * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSegments(limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SegmentBeta>>>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {string} id The segment ID to modify.
     * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSegment(id: string, requestBody: Array<object>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentBeta>>;
};
/**
 * SegmentsBetaApi - factory interface
 * @export
 */
export declare const SegmentsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {SegmentBeta} segmentBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSegment(segmentBeta: SegmentBeta, axiosOptions?: any): AxiosPromise<SegmentBeta>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {string} id The segment ID to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSegment(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {string} id The segment ID to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSegment(id: string, axiosOptions?: any): AxiosPromise<SegmentBeta>;
    /**
     * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSegments(limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<SegmentBeta>>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {string} id The segment ID to modify.
     * @param {Array<object>} requestBody A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSegment(id: string, requestBody: Array<object>, axiosOptions?: any): AxiosPromise<SegmentBeta>;
};
/**
 * Request parameters for createSegment operation in SegmentsBetaApi.
 * @export
 * @interface SegmentsBetaApiCreateSegmentRequest
 */
export interface SegmentsBetaApiCreateSegmentRequest {
    /**
     *
     * @type {SegmentBeta}
     * @memberof SegmentsBetaApiCreateSegment
     */
    readonly segmentBeta: SegmentBeta;
}
/**
 * Request parameters for deleteSegment operation in SegmentsBetaApi.
 * @export
 * @interface SegmentsBetaApiDeleteSegmentRequest
 */
export interface SegmentsBetaApiDeleteSegmentRequest {
    /**
     * The segment ID to delete.
     * @type {string}
     * @memberof SegmentsBetaApiDeleteSegment
     */
    readonly id: string;
}
/**
 * Request parameters for getSegment operation in SegmentsBetaApi.
 * @export
 * @interface SegmentsBetaApiGetSegmentRequest
 */
export interface SegmentsBetaApiGetSegmentRequest {
    /**
     * The segment ID to retrieve.
     * @type {string}
     * @memberof SegmentsBetaApiGetSegment
     */
    readonly id: string;
}
/**
 * Request parameters for listSegments operation in SegmentsBetaApi.
 * @export
 * @interface SegmentsBetaApiListSegmentsRequest
 */
export interface SegmentsBetaApiListSegmentsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SegmentsBetaApiListSegments
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SegmentsBetaApiListSegments
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SegmentsBetaApiListSegments
     */
    readonly count?: boolean;
}
/**
 * Request parameters for patchSegment operation in SegmentsBetaApi.
 * @export
 * @interface SegmentsBetaApiPatchSegmentRequest
 */
export interface SegmentsBetaApiPatchSegmentRequest {
    /**
     * The segment ID to modify.
     * @type {string}
     * @memberof SegmentsBetaApiPatchSegment
     */
    readonly id: string;
    /**
     * A list of segment update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  The following fields are patchable: * name * description * owner * visibilityCriteria * active
     * @type {Array<object>}
     * @memberof SegmentsBetaApiPatchSegment
     */
    readonly requestBody: Array<object>;
}
/**
 * SegmentsBetaApi - object-oriented interface
 * @export
 * @class SegmentsBetaApi
 * @extends {BaseAPI}
 */
export declare class SegmentsBetaApi extends BaseAPI {
    /**
     * This API creates a segment.  >**Note:** Segment definitions may take time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Create Segment
     * @param {SegmentsBetaApiCreateSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    createSegment(requestParameters: SegmentsBetaApiCreateSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SegmentBeta, any>>;
    /**
     * This API deletes the segment specified by the given ID. >**Note:** Segment deletion may take some time to go into effect.  A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Delete Segment by ID
     * @param {SegmentsBetaApiDeleteSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    deleteSegment(requestParameters: SegmentsBetaApiDeleteSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the segment specified by the given ID. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Get Segment by ID
     * @param {SegmentsBetaApiGetSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    getSegment(requestParameters: SegmentsBetaApiGetSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SegmentBeta, any>>;
    /**
     * This API returns a list of all segments. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary List Segments
     * @param {SegmentsBetaApiListSegmentsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    listSegments(requestParameters?: SegmentsBetaApiListSegmentsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SegmentBeta[], any>>;
    /**
     * Use this API to update segment fields by using the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. >**Note:** Changes to a segment may take some time to propagate to all identities. A token with ORG_ADMIN or API authority is required to call this API.
     * @summary Update Segment
     * @param {SegmentsBetaApiPatchSegmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsBetaApi
     */
    patchSegment(requestParameters: SegmentsBetaApiPatchSegmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SegmentBeta, any>>;
}
/**
 * ServiceDeskIntegrationBetaApi - axios parameter creator
 * @export
 */
export declare const ServiceDeskIntegrationBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of a new integration to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createServiceDeskIntegration: (serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {string} id ID of Service Desk integration to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceDeskIntegration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {string} id ID of the Service Desk integration to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegration: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationList: (offset?: number, limit?: number, sorters?: string, filters?: string, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {string} scriptName The scriptName value of the Service Desk integration template to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTemplate: (scriptName: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTypes: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusCheckDetails: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {string} id ID of the Service Desk integration to update
     * @param {PatchServiceDeskIntegrationRequestBeta} patchServiceDeskIntegrationRequestBeta A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchServiceDeskIntegration: (id: string, patchServiceDeskIntegrationRequestBeta: PatchServiceDeskIntegrationRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {string} id ID of the Service Desk integration to update
     * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of the integration to update
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putServiceDeskIntegration: (id: string, serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {QueuedCheckConfigDetailsBeta} queuedCheckConfigDetailsBeta the modified time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateStatusCheckDetails: (queuedCheckConfigDetailsBeta: QueuedCheckConfigDetailsBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServiceDeskIntegrationBetaApi - functional programming interface
 * @export
 */
export declare const ServiceDeskIntegrationBetaApiFp: (configuration?: Configuration) => {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of a new integration to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createServiceDeskIntegration(serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {string} id ID of Service Desk integration to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceDeskIntegration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {string} id ID of the Service Desk integration to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegration(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationList(offset?: number, limit?: number, sorters?: string, filters?: string, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceDeskIntegrationDtoBeta>>>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {string} scriptName The scriptName value of the Service Desk integration template to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTemplate(scriptName: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationTemplateDtoBeta>>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTypes(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceDeskIntegrationTemplateTypeBeta>>>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusCheckDetails(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueuedCheckConfigDetailsBeta>>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {string} id ID of the Service Desk integration to update
     * @param {PatchServiceDeskIntegrationRequestBeta} patchServiceDeskIntegrationRequestBeta A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchServiceDeskIntegration(id: string, patchServiceDeskIntegrationRequestBeta: PatchServiceDeskIntegrationRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {string} id ID of the Service Desk integration to update
     * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of the integration to update
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putServiceDeskIntegration(id: string, serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDeskIntegrationDtoBeta>>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {QueuedCheckConfigDetailsBeta} queuedCheckConfigDetailsBeta the modified time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateStatusCheckDetails(queuedCheckConfigDetailsBeta: QueuedCheckConfigDetailsBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueuedCheckConfigDetailsBeta>>;
};
/**
 * ServiceDeskIntegrationBetaApi - factory interface
 * @export
 */
export declare const ServiceDeskIntegrationBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of a new integration to create
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createServiceDeskIntegration(serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {string} id ID of Service Desk integration to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteServiceDeskIntegration(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {string} id ID of the Service Desk integration to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegration(id: string, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationList(offset?: number, limit?: number, sorters?: string, filters?: string, count?: boolean, axiosOptions?: any): AxiosPromise<Array<ServiceDeskIntegrationDtoBeta>>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {string} scriptName The scriptName value of the Service Desk integration template to get
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTemplate(scriptName: string, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationTemplateDtoBeta>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getServiceDeskIntegrationTypes(axiosOptions?: any): AxiosPromise<Array<ServiceDeskIntegrationTemplateTypeBeta>>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusCheckDetails(axiosOptions?: any): AxiosPromise<QueuedCheckConfigDetailsBeta>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {string} id ID of the Service Desk integration to update
     * @param {PatchServiceDeskIntegrationRequestBeta} patchServiceDeskIntegrationRequestBeta A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchServiceDeskIntegration(id: string, patchServiceDeskIntegrationRequestBeta: PatchServiceDeskIntegrationRequestBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {string} id ID of the Service Desk integration to update
     * @param {ServiceDeskIntegrationDtoBeta} serviceDeskIntegrationDtoBeta The specifics of the integration to update
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putServiceDeskIntegration(id: string, serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta, axiosOptions?: any): AxiosPromise<ServiceDeskIntegrationDtoBeta>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {QueuedCheckConfigDetailsBeta} queuedCheckConfigDetailsBeta the modified time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateStatusCheckDetails(queuedCheckConfigDetailsBeta: QueuedCheckConfigDetailsBeta, axiosOptions?: any): AxiosPromise<QueuedCheckConfigDetailsBeta>;
};
/**
 * Request parameters for createServiceDeskIntegration operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiCreateServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationBetaApiCreateServiceDeskIntegrationRequest {
    /**
     * The specifics of a new integration to create
     * @type {ServiceDeskIntegrationDtoBeta}
     * @memberof ServiceDeskIntegrationBetaApiCreateServiceDeskIntegration
     */
    readonly serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta;
}
/**
 * Request parameters for deleteServiceDeskIntegration operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiDeleteServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationBetaApiDeleteServiceDeskIntegrationRequest {
    /**
     * ID of Service Desk integration to delete
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiDeleteServiceDeskIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getServiceDeskIntegration operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationRequest {
    /**
     * ID of the Service Desk integration to get
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegration
     */
    readonly id: string;
}
/**
 * Request parameters for getServiceDeskIntegrationList operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationListRequest
 */
export interface ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationListRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationList
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationList
     */
    readonly limit?: number;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **name**
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationList
     */
    readonly sorters?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **name**: *eq*  **type**: *eq, in*  **cluster**: *eq, in*
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationList
     */
    readonly filters?: string;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationList
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getServiceDeskIntegrationTemplate operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationTemplateRequest
 */
export interface ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationTemplateRequest {
    /**
     * The scriptName value of the Service Desk integration template to get
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationTemplate
     */
    readonly scriptName: string;
}
/**
 * Request parameters for patchServiceDeskIntegration operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiPatchServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationBetaApiPatchServiceDeskIntegrationRequest {
    /**
     * ID of the Service Desk integration to update
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiPatchServiceDeskIntegration
     */
    readonly id: string;
    /**
     * A list of SDIM update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  Only &#x60;replace&#x60; operations are accepted by this endpoint.  A 403 Forbidden Error indicates that you attempted to PATCH a operation that is not allowed.
     * @type {PatchServiceDeskIntegrationRequestBeta}
     * @memberof ServiceDeskIntegrationBetaApiPatchServiceDeskIntegration
     */
    readonly patchServiceDeskIntegrationRequestBeta: PatchServiceDeskIntegrationRequestBeta;
}
/**
 * Request parameters for putServiceDeskIntegration operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiPutServiceDeskIntegrationRequest
 */
export interface ServiceDeskIntegrationBetaApiPutServiceDeskIntegrationRequest {
    /**
     * ID of the Service Desk integration to update
     * @type {string}
     * @memberof ServiceDeskIntegrationBetaApiPutServiceDeskIntegration
     */
    readonly id: string;
    /**
     * The specifics of the integration to update
     * @type {ServiceDeskIntegrationDtoBeta}
     * @memberof ServiceDeskIntegrationBetaApiPutServiceDeskIntegration
     */
    readonly serviceDeskIntegrationDtoBeta: ServiceDeskIntegrationDtoBeta;
}
/**
 * Request parameters for updateStatusCheckDetails operation in ServiceDeskIntegrationBetaApi.
 * @export
 * @interface ServiceDeskIntegrationBetaApiUpdateStatusCheckDetailsRequest
 */
export interface ServiceDeskIntegrationBetaApiUpdateStatusCheckDetailsRequest {
    /**
     * the modified time check configuration
     * @type {QueuedCheckConfigDetailsBeta}
     * @memberof ServiceDeskIntegrationBetaApiUpdateStatusCheckDetails
     */
    readonly queuedCheckConfigDetailsBeta: QueuedCheckConfigDetailsBeta;
}
/**
 * ServiceDeskIntegrationBetaApi - object-oriented interface
 * @export
 * @class ServiceDeskIntegrationBetaApi
 * @extends {BaseAPI}
 */
export declare class ServiceDeskIntegrationBetaApi extends BaseAPI {
    /**
     * Create a new Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Create new Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiCreateServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    createServiceDeskIntegration(requestParameters: ServiceDeskIntegrationBetaApiCreateServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Delete an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Delete a Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiDeleteServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    deleteServiceDeskIntegration(requestParameters: ServiceDeskIntegrationBetaApiDeleteServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get an existing Service Desk integration by ID.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get a Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    getServiceDeskIntegration(requestParameters: ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Get a list of ServiceDeskIntegrationDto for existing Service Desk Integrations.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary List existing Service Desk Integrations
     * @param {ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    getServiceDeskIntegrationList(requestParameters?: ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationListRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta[], any>>;
    /**
     * This API endpoint returns an existing Service Desk integration template by scriptName.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk integration template by scriptName.
     * @param {ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationTemplateRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    getServiceDeskIntegrationTemplate(requestParameters: ServiceDeskIntegrationBetaApiGetServiceDeskIntegrationTemplateRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationTemplateDtoBeta, any>>;
    /**
     * This API endpoint returns the current list of supported Service Desk integration types.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Service Desk Integration Types List.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    getServiceDeskIntegrationTypes(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationTemplateTypeBeta[], any>>;
    /**
     * Get the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Get the time check configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    getStatusCheckDetails(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<QueuedCheckConfigDetailsBeta, any>>;
    /**
     * Update an existing ServiceDeskIntegration by ID with a PATCH request.
     * @summary Service Desk Integration Update PATCH
     * @param {ServiceDeskIntegrationBetaApiPatchServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    patchServiceDeskIntegration(requestParameters: ServiceDeskIntegrationBetaApiPatchServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Update an existing Service Desk integration by ID with updated value in JSON form as the request body.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update a Service Desk integration
     * @param {ServiceDeskIntegrationBetaApiPutServiceDeskIntegrationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    putServiceDeskIntegration(requestParameters: ServiceDeskIntegrationBetaApiPutServiceDeskIntegrationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ServiceDeskIntegrationDtoBeta, any>>;
    /**
     * Update the time check configuration of queued SDIM tickets.  A token with Org Admin or Service Desk Admin authority is required to access this endpoint.
     * @summary Update the time check configuration
     * @param {ServiceDeskIntegrationBetaApiUpdateStatusCheckDetailsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDeskIntegrationBetaApi
     */
    updateStatusCheckDetails(requestParameters: ServiceDeskIntegrationBetaApiUpdateStatusCheckDetailsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<QueuedCheckConfigDetailsBeta, any>>;
}
/**
 * SourceUsagesBetaApi - axios parameter creator
 * @export
 */
export declare const SourceUsagesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {string} sourceId ID of IDN source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusBySourceId: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {string} sourceId ID of IDN source
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesBySourceId: (sourceId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SourceUsagesBetaApi - functional programming interface
 * @export
 */
export declare const SourceUsagesBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {string} sourceId ID of IDN source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusBySourceId(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceUsageStatusBeta>>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {string} sourceId ID of IDN source
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesBySourceId(sourceId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SourceUsageBeta>>>;
};
/**
 * SourceUsagesBetaApi - factory interface
 * @export
 */
export declare const SourceUsagesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {string} sourceId ID of IDN source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getStatusBySourceId(sourceId: string, axiosOptions?: any): AxiosPromise<SourceUsageStatusBeta>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {string} sourceId ID of IDN source
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getUsagesBySourceId(sourceId: string, limit?: number, offset?: number, count?: boolean, sorters?: string, axiosOptions?: any): AxiosPromise<Array<SourceUsageBeta>>;
};
/**
 * Request parameters for getStatusBySourceId operation in SourceUsagesBetaApi.
 * @export
 * @interface SourceUsagesBetaApiGetStatusBySourceIdRequest
 */
export interface SourceUsagesBetaApiGetStatusBySourceIdRequest {
    /**
     * ID of IDN source
     * @type {string}
     * @memberof SourceUsagesBetaApiGetStatusBySourceId
     */
    readonly sourceId: string;
}
/**
 * Request parameters for getUsagesBySourceId operation in SourceUsagesBetaApi.
 * @export
 * @interface SourceUsagesBetaApiGetUsagesBySourceIdRequest
 */
export interface SourceUsagesBetaApiGetUsagesBySourceIdRequest {
    /**
     * ID of IDN source
     * @type {string}
     * @memberof SourceUsagesBetaApiGetUsagesBySourceId
     */
    readonly sourceId: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourceUsagesBetaApiGetUsagesBySourceId
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourceUsagesBetaApiGetUsagesBySourceId
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SourceUsagesBetaApiGetUsagesBySourceId
     */
    readonly count?: boolean;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **date**
     * @type {string}
     * @memberof SourceUsagesBetaApiGetUsagesBySourceId
     */
    readonly sorters?: string;
}
/**
 * SourceUsagesBetaApi - object-oriented interface
 * @export
 * @class SourceUsagesBetaApi
 * @extends {BaseAPI}
 */
export declare class SourceUsagesBetaApi extends BaseAPI {
    /**
     * This API returns the status of the source usage insights setup by IDN source ID.
     * @summary Finds status of source usage
     * @param {SourceUsagesBetaApiGetStatusBySourceIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceUsagesBetaApi
     */
    getStatusBySourceId(requestParameters: SourceUsagesBetaApiGetStatusBySourceIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceUsageStatusBeta, any>>;
    /**
     * This API returns a summary of source usage insights for past 12 months.
     * @summary Returns source usage insights
     * @param {SourceUsagesBetaApiGetUsagesBySourceIdRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourceUsagesBetaApi
     */
    getUsagesBySourceId(requestParameters: SourceUsagesBetaApiGetUsagesBySourceIdRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceUsageBeta[], any>>;
}
/**
 * SourcesBetaApi - axios parameter creator
 * @export
 */
export declare const SourcesBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    _delete: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {string} sourceId The Source id
     * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createProvisioningPolicy: (sourceId: string, provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {SourceBeta} sourceBeta
     * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSource: (sourceBeta: SourceBeta, provisionAsCsv?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {string} sourceId Source ID.
     * @param {SchemaBeta} schemaBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSourceSchema: (sourceId: string, schemaBeta: SchemaBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove All Accounts in a Source
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountsAsync: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Native Change Detection Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNativeChangeDetectionConfig: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteProvisioningPolicy: (sourceId: string, usageType: UsageTypeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceSchema: (sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Source Correlation Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCorrelationConfig: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Native Change Detection Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNativeChangeDetectionConfig: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProvisioningPolicy: (sourceId: string, usageType: UsageTypeBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSource: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads source accounts schema template
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceAccountsSchema: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Attribute Sync Config
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceAttrSyncConfig: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets source config with language translations
     * @param {string} id The Source id
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConfig: (id: string, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source Entitlement Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceEntitlementRequestConfig: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Downloads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceEntitlementsSchema: (id: string, schemaName?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchema: (sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {string} sourceId Source ID.
     * @param {'group' | 'user'} [includeTypes] If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchemas: (sourceId: string, includeTypes?: 'group' | 'user', axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Account Aggregation
     * @param {string} id Source Id
     * @param {any} [file] The CSV file containing the source accounts to aggregate.
     * @param {string} [disableOptimization] Use this flag to reprocess every account whether or not the data has changed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importAccounts: (id: string, file?: any, disableOptimization?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Entitlement Aggregation
     * @param {string} id Source Id
     * @param {any} [file] The CSV file containing the source entitlements to aggregate.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importEntitlements: (id: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.
     * @summary Uploads source accounts schema template
     * @param {string} id The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceAccountsSchema: (id: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {string} sourceId The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceConnectorFile: (sourceId: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.
     * @summary Uploads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceEntitlementsSchema: (id: string, schemaName?: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
     * @summary Process Uncorrelated Accounts
     * @param {string} id Source Id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importUncorrelatedAccounts: (id: string, file?: any, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listProvisioningPolicies: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSources: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSubadmin?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
     * @summary Peek source connector\'s resource objects
     * @param {string} sourceId The ID of the Source
     * @param {ResourceObjectsRequestBeta} resourceObjectsRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    peekResourceObjects: (sourceId: string, resourceObjectsRequestBeta: ResourceObjectsRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Ping cluster for source connector
     * @param {string} sourceId The ID of the Source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingCluster: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Source Correlation Configuration
     * @param {string} id The source id
     * @param {CorrelationConfigBeta} correlationConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putCorrelationConfig: (id: string, correlationConfigBeta: CorrelationConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Native Change Detection Configuration
     * @param {string} id The source id
     * @param {NativeChangeDetectionConfigBeta} nativeChangeDetectionConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putNativeChangeDetectionConfig: (id: string, nativeChangeDetectionConfigBeta: NativeChangeDetectionConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putProvisioningPolicy: (sourceId: string, usageType: UsageTypeBeta, provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {string} id Source ID.
     * @param {SourceBeta} sourceBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSource: (id: string, sourceBeta: SourceBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Attribute Sync Config
     * @param {string} id The source id
     * @param {AttrSyncSourceConfigBeta} attrSyncSourceConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceAttrSyncConfig: (id: string, attrSyncSourceConfigBeta: AttrSyncSourceConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
     * @summary Update Source Schema (Full)
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {SchemaBeta} schemaBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceSchema: (sourceId: string, schemaId: string, schemaBeta: SchemaBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Synchronize single source attributes.
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncAttributesForSource: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
     * @summary Test configuration for source connector
     * @param {string} sourceId The ID of the Source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSourceConfiguration: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary Check connection for source connector.
     * @param {string} sourceId The ID of the Source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSourceConnection: (sourceId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {string} sourceId The Source id.
     * @param {Array<ProvisioningPolicyDtoBeta>} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPoliciesInBulk: (sourceId: string, provisioningPolicyDtoBeta: Array<ProvisioningPolicyDtoBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {string} sourceId The Source id.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPolicy: (sourceId: string, usageType: UsageTypeBeta, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {string} id Source ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSource: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source Entitlement Request Configuration
     * @param {SourceEntitlementRequestConfigBeta} sourceEntitlementRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceEntitlementRequestConfig: (sourceEntitlementRequestConfigBeta: SourceEntitlementRequestConfigBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceSchema: (sourceId: string, schemaId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SourcesBetaApi - functional programming interface
 * @export
 */
export declare const SourcesBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delete202ResponseBeta>>;
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {string} sourceId The Source id
     * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createProvisioningPolicy(sourceId: string, provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDtoBeta>>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {SourceBeta} sourceBeta
     * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSource(sourceBeta: SourceBeta, provisionAsCsv?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBeta>>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {string} sourceId Source ID.
     * @param {SchemaBeta} schemaBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSourceSchema(sourceId: string, schemaBeta: SchemaBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaBeta>>;
    /**
     * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove All Accounts in a Source
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountsAsync(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskResultDtoBeta>>;
    /**
     * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Native Change Detection Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNativeChangeDetectionConfig(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceSchema(sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Source Correlation Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCorrelationConfig(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorrelationConfigBeta>>;
    /**
     * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Native Change Detection Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNativeChangeDetectionConfig(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NativeChangeDetectionConfigBeta>>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDtoBeta>>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSource(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBeta>>;
    /**
     *
     * @summary Downloads source accounts schema template
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceAccountsSchema(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Attribute Sync Config
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceAttrSyncConfig(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttrSyncSourceConfigBeta>>;
    /**
     * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets source config with language translations
     * @param {string} id The Source id
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConfig(id: string, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectorDetailBeta>>;
    /**
     * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source Entitlement Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceEntitlementRequestConfig(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceEntitlementRequestConfigBeta>>;
    /**
     *
     * @summary Downloads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceEntitlementsSchema(id: string, schemaName?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchema(sourceId: string, schemaId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaBeta>>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {string} sourceId Source ID.
     * @param {'group' | 'user'} [includeTypes] If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchemas(sourceId: string, includeTypes?: 'group' | 'user', axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SchemaBeta>>>;
    /**
     * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Account Aggregation
     * @param {string} id Source Id
     * @param {any} [file] The CSV file containing the source accounts to aggregate.
     * @param {string} [disableOptimization] Use this flag to reprocess every account whether or not the data has changed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importAccounts(id: string, file?: any, disableOptimization?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoadAccountsTaskBeta>>;
    /**
     * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Entitlement Aggregation
     * @param {string} id Source Id
     * @param {any} [file] The CSV file containing the source entitlements to aggregate.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importEntitlements(id: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoadEntitlementTaskBeta>>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.
     * @summary Uploads source accounts schema template
     * @param {string} id The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceAccountsSchema(id: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaBeta>>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {string} sourceId The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceConnectorFile(sourceId: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBeta>>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.
     * @summary Uploads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceEntitlementsSchema(id: string, schemaName?: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaBeta>>;
    /**
     * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
     * @summary Process Uncorrelated Accounts
     * @param {string} id Source Id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importUncorrelatedAccounts(id: string, file?: any, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoadUncorrelatedAccountsTaskBeta>>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listProvisioningPolicies(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProvisioningPolicyDtoBeta>>>;
    /**
     * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSources(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSubadmin?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SourceBeta>>>;
    /**
     * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
     * @summary Peek source connector\'s resource objects
     * @param {string} sourceId The ID of the Source
     * @param {ResourceObjectsRequestBeta} resourceObjectsRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    peekResourceObjects(sourceId: string, resourceObjectsRequestBeta: ResourceObjectsRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceObjectsResponseBeta>>;
    /**
     * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Ping cluster for source connector
     * @param {string} sourceId The ID of the Source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingCluster(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponseBeta>>;
    /**
     * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Source Correlation Configuration
     * @param {string} id The source id
     * @param {CorrelationConfigBeta} correlationConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putCorrelationConfig(id: string, correlationConfigBeta: CorrelationConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CorrelationConfigBeta>>;
    /**
     * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Native Change Detection Configuration
     * @param {string} id The source id
     * @param {NativeChangeDetectionConfigBeta} nativeChangeDetectionConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putNativeChangeDetectionConfig(id: string, nativeChangeDetectionConfigBeta: NativeChangeDetectionConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NativeChangeDetectionConfigBeta>>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDtoBeta>>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {string} id Source ID.
     * @param {SourceBeta} sourceBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSource(id: string, sourceBeta: SourceBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBeta>>;
    /**
     * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Attribute Sync Config
     * @param {string} id The source id
     * @param {AttrSyncSourceConfigBeta} attrSyncSourceConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceAttrSyncConfig(id: string, attrSyncSourceConfigBeta: AttrSyncSourceConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttrSyncSourceConfigBeta>>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
     * @summary Update Source Schema (Full)
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {SchemaBeta} schemaBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceSchema(sourceId: string, schemaId: string, schemaBeta: SchemaBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaBeta>>;
    /**
     * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Synchronize single source attributes.
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncAttributesForSource(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceSyncJobBeta>>;
    /**
     * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
     * @summary Test configuration for source connector
     * @param {string} sourceId The ID of the Source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSourceConfiguration(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponseBeta>>;
    /**
     * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary Check connection for source connector.
     * @param {string} sourceId The ID of the Source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSourceConnection(sourceId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponseBeta>>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {string} sourceId The Source id.
     * @param {Array<ProvisioningPolicyDtoBeta>} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPoliciesInBulk(sourceId: string, provisioningPolicyDtoBeta: Array<ProvisioningPolicyDtoBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProvisioningPolicyDtoBeta>>>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {string} sourceId The Source id.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvisioningPolicyDtoBeta>>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {string} id Source ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSource(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceBeta>>;
    /**
     * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source Entitlement Request Configuration
     * @param {SourceEntitlementRequestConfigBeta} sourceEntitlementRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceEntitlementRequestConfig(sourceEntitlementRequestConfigBeta: SourceEntitlementRequestConfigBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceEntitlementRequestConfigBeta>>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceSchema(sourceId: string, schemaId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchemaBeta>>;
};
/**
 * SourcesBetaApi - factory interface
 * @export
 */
export declare const SourcesBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    _delete(id: string, axiosOptions?: any): AxiosPromise<Delete202ResponseBeta>;
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {string} sourceId The Source id
     * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createProvisioningPolicy(sourceId: string, provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDtoBeta>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {SourceBeta} sourceBeta
     * @param {boolean} [provisionAsCsv] If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSource(sourceBeta: SourceBeta, provisionAsCsv?: boolean, axiosOptions?: any): AxiosPromise<SourceBeta>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {string} sourceId Source ID.
     * @param {SchemaBeta} schemaBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSourceSchema(sourceId: string, schemaBeta: SchemaBeta, axiosOptions?: any): AxiosPromise<SchemaBeta>;
    /**
     * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove All Accounts in a Source
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountsAsync(id: string, axiosOptions?: any): AxiosPromise<TaskResultDtoBeta>;
    /**
     * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Native Change Detection Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteNativeChangeDetectionConfig(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSourceSchema(sourceId: string, schemaId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Source Correlation Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCorrelationConfig(id: string, axiosOptions?: any): AxiosPromise<CorrelationConfigBeta>;
    /**
     * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Native Change Detection Configuration
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getNativeChangeDetectionConfig(id: string, axiosOptions?: any): AxiosPromise<NativeChangeDetectionConfigBeta>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDtoBeta>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {string} id Source ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSource(id: string, axiosOptions?: any): AxiosPromise<SourceBeta>;
    /**
     *
     * @summary Downloads source accounts schema template
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceAccountsSchema(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Attribute Sync Config
     * @param {string} id The source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceAttrSyncConfig(id: string, axiosOptions?: any): AxiosPromise<AttrSyncSourceConfigBeta>;
    /**
     * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets source config with language translations
     * @param {string} id The Source id
     * @param {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'} [locale] The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceConfig(id: string, locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl', axiosOptions?: any): AxiosPromise<ConnectorDetailBeta>;
    /**
     * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source Entitlement Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceEntitlementRequestConfig(axiosOptions?: any): AxiosPromise<SourceEntitlementRequestConfigBeta>;
    /**
     *
     * @summary Downloads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceEntitlementsSchema(id: string, schemaName?: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchema(sourceId: string, schemaId: string, axiosOptions?: any): AxiosPromise<SchemaBeta>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {string} sourceId Source ID.
     * @param {'group' | 'user'} [includeTypes] If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSourceSchemas(sourceId: string, includeTypes?: 'group' | 'user', axiosOptions?: any): AxiosPromise<Array<SchemaBeta>>;
    /**
     * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Account Aggregation
     * @param {string} id Source Id
     * @param {any} [file] The CSV file containing the source accounts to aggregate.
     * @param {string} [disableOptimization] Use this flag to reprocess every account whether or not the data has changed.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importAccounts(id: string, file?: any, disableOptimization?: string, axiosOptions?: any): AxiosPromise<LoadAccountsTaskBeta>;
    /**
     * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Entitlement Aggregation
     * @param {string} id Source Id
     * @param {any} [file] The CSV file containing the source entitlements to aggregate.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importEntitlements(id: string, file?: any, axiosOptions?: any): AxiosPromise<LoadEntitlementTaskBeta>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.
     * @summary Uploads source accounts schema template
     * @param {string} id The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceAccountsSchema(id: string, file?: any, axiosOptions?: any): AxiosPromise<SchemaBeta>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {string} sourceId The Source id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceConnectorFile(sourceId: string, file?: any, axiosOptions?: any): AxiosPromise<SourceBeta>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.
     * @summary Uploads source entitlements schema template
     * @param {string} id The Source id
     * @param {string} [schemaName] Name of entitlement schema
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importSourceEntitlementsSchema(id: string, schemaName?: string, file?: any, axiosOptions?: any): AxiosPromise<SchemaBeta>;
    /**
     * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
     * @summary Process Uncorrelated Accounts
     * @param {string} id Source Id
     * @param {any} [file]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    importUncorrelatedAccounts(id: string, file?: any, axiosOptions?: any): AxiosPromise<LoadUncorrelatedAccountsTaskBeta>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {string} sourceId The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listProvisioningPolicies(sourceId: string, axiosOptions?: any): AxiosPromise<Array<ProvisioningPolicyDtoBeta>>;
    /**
     * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @param {string} [forSubadmin] Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSources(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, forSubadmin?: string, axiosOptions?: any): AxiosPromise<Array<SourceBeta>>;
    /**
     * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
     * @summary Peek source connector\'s resource objects
     * @param {string} sourceId The ID of the Source
     * @param {ResourceObjectsRequestBeta} resourceObjectsRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    peekResourceObjects(sourceId: string, resourceObjectsRequestBeta: ResourceObjectsRequestBeta, axiosOptions?: any): AxiosPromise<ResourceObjectsResponseBeta>;
    /**
     * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Ping cluster for source connector
     * @param {string} sourceId The ID of the Source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    pingCluster(sourceId: string, axiosOptions?: any): AxiosPromise<StatusResponseBeta>;
    /**
     * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Source Correlation Configuration
     * @param {string} id The source id
     * @param {CorrelationConfigBeta} correlationConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putCorrelationConfig(id: string, correlationConfigBeta: CorrelationConfigBeta, axiosOptions?: any): AxiosPromise<CorrelationConfigBeta>;
    /**
     * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Native Change Detection Configuration
     * @param {string} id The source id
     * @param {NativeChangeDetectionConfigBeta} nativeChangeDetectionConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putNativeChangeDetectionConfig(id: string, nativeChangeDetectionConfigBeta: NativeChangeDetectionConfigBeta, axiosOptions?: any): AxiosPromise<NativeChangeDetectionConfigBeta>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {string} sourceId The Source ID.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {ProvisioningPolicyDtoBeta} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDtoBeta>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {string} id Source ID.
     * @param {SourceBeta} sourceBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSource(id: string, sourceBeta: SourceBeta, axiosOptions?: any): AxiosPromise<SourceBeta>;
    /**
     * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Attribute Sync Config
     * @param {string} id The source id
     * @param {AttrSyncSourceConfigBeta} attrSyncSourceConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceAttrSyncConfig(id: string, attrSyncSourceConfigBeta: AttrSyncSourceConfigBeta, axiosOptions?: any): AxiosPromise<AttrSyncSourceConfigBeta>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
     * @summary Update Source Schema (Full)
     * @param {string} sourceId The Source ID.
     * @param {string} schemaId The Schema ID.
     * @param {SchemaBeta} schemaBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putSourceSchema(sourceId: string, schemaId: string, schemaBeta: SchemaBeta, axiosOptions?: any): AxiosPromise<SchemaBeta>;
    /**
     * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Synchronize single source attributes.
     * @param {string} id The Source id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    syncAttributesForSource(id: string, axiosOptions?: any): AxiosPromise<SourceSyncJobBeta>;
    /**
     * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
     * @summary Test configuration for source connector
     * @param {string} sourceId The ID of the Source
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSourceConfiguration(sourceId: string, axiosOptions?: any): AxiosPromise<StatusResponseBeta>;
    /**
     * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary Check connection for source connector.
     * @param {string} sourceId The ID of the Source.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSourceConnection(sourceId: string, axiosOptions?: any): AxiosPromise<StatusResponseBeta>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {string} sourceId The Source id.
     * @param {Array<ProvisioningPolicyDtoBeta>} provisioningPolicyDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPoliciesInBulk(sourceId: string, provisioningPolicyDtoBeta: Array<ProvisioningPolicyDtoBeta>, axiosOptions?: any): AxiosPromise<Array<ProvisioningPolicyDtoBeta>>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {string} sourceId The Source id.
     * @param {UsageTypeBeta} usageType The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateProvisioningPolicy(sourceId: string, usageType: UsageTypeBeta, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<ProvisioningPolicyDtoBeta>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {string} id Source ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSource(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<SourceBeta>;
    /**
     * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source Entitlement Request Configuration
     * @param {SourceEntitlementRequestConfigBeta} sourceEntitlementRequestConfigBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceEntitlementRequestConfig(sourceEntitlementRequestConfigBeta: SourceEntitlementRequestConfigBeta, axiosOptions?: any): AxiosPromise<SourceEntitlementRequestConfigBeta>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {string} sourceId The Source id.
     * @param {string} schemaId The Schema id.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the schema.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSourceSchema(sourceId: string, schemaId: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<SchemaBeta>;
};
/**
 * Request parameters for _delete operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiDeleteRequest
 */
export interface SourcesBetaApiDeleteRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesBetaApiDelete
     */
    readonly id: string;
}
/**
 * Request parameters for createProvisioningPolicy operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiCreateProvisioningPolicyRequest
 */
export interface SourcesBetaApiCreateProvisioningPolicyRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiCreateProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     *
     * @type {ProvisioningPolicyDtoBeta}
     * @memberof SourcesBetaApiCreateProvisioningPolicy
     */
    readonly provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta;
}
/**
 * Request parameters for createSource operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiCreateSourceRequest
 */
export interface SourcesBetaApiCreateSourceRequest {
    /**
     *
     * @type {SourceBeta}
     * @memberof SourcesBetaApiCreateSource
     */
    readonly sourceBeta: SourceBeta;
    /**
     * If this parameter is &#x60;true&#x60;, it configures the source as a Delimited File (CSV) source. Setting this to &#x60;true&#x60; will automatically set the &#x60;type&#x60; of the source to &#x60;DelimitedFile&#x60;.  You must use this query parameter to create a Delimited File source as you would in the UI.  If you don\&#39;t set this query parameter and you attempt to set the &#x60;type&#x60; attribute directly, the request won\&#39;t correctly generate the source.
     * @type {boolean}
     * @memberof SourcesBetaApiCreateSource
     */
    readonly provisionAsCsv?: boolean;
}
/**
 * Request parameters for createSourceSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiCreateSourceSchemaRequest
 */
export interface SourcesBetaApiCreateSourceSchemaRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesBetaApiCreateSourceSchema
     */
    readonly sourceId: string;
    /**
     *
     * @type {SchemaBeta}
     * @memberof SourcesBetaApiCreateSourceSchema
     */
    readonly schemaBeta: SchemaBeta;
}
/**
 * Request parameters for deleteAccountsAsync operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiDeleteAccountsAsyncRequest
 */
export interface SourcesBetaApiDeleteAccountsAsyncRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiDeleteAccountsAsync
     */
    readonly id: string;
}
/**
 * Request parameters for deleteNativeChangeDetectionConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiDeleteNativeChangeDetectionConfigRequest
 */
export interface SourcesBetaApiDeleteNativeChangeDetectionConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiDeleteNativeChangeDetectionConfig
     */
    readonly id: string;
}
/**
 * Request parameters for deleteProvisioningPolicy operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiDeleteProvisioningPolicyRequest
 */
export interface SourcesBetaApiDeleteProvisioningPolicyRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesBetaApiDeleteProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageTypeBeta}
     * @memberof SourcesBetaApiDeleteProvisioningPolicy
     */
    readonly usageType: UsageTypeBeta;
}
/**
 * Request parameters for deleteSourceSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiDeleteSourceSchemaRequest
 */
export interface SourcesBetaApiDeleteSourceSchemaRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesBetaApiDeleteSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema ID.
     * @type {string}
     * @memberof SourcesBetaApiDeleteSourceSchema
     */
    readonly schemaId: string;
}
/**
 * Request parameters for getCorrelationConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetCorrelationConfigRequest
 */
export interface SourcesBetaApiGetCorrelationConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiGetCorrelationConfig
     */
    readonly id: string;
}
/**
 * Request parameters for getNativeChangeDetectionConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetNativeChangeDetectionConfigRequest
 */
export interface SourcesBetaApiGetNativeChangeDetectionConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiGetNativeChangeDetectionConfig
     */
    readonly id: string;
}
/**
 * Request parameters for getProvisioningPolicy operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetProvisioningPolicyRequest
 */
export interface SourcesBetaApiGetProvisioningPolicyRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesBetaApiGetProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageTypeBeta}
     * @memberof SourcesBetaApiGetProvisioningPolicy
     */
    readonly usageType: UsageTypeBeta;
}
/**
 * Request parameters for getSource operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceRequest
 */
export interface SourcesBetaApiGetSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesBetaApiGetSource
     */
    readonly id: string;
}
/**
 * Request parameters for getSourceAccountsSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceAccountsSchemaRequest
 */
export interface SourcesBetaApiGetSourceAccountsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiGetSourceAccountsSchema
     */
    readonly id: string;
}
/**
 * Request parameters for getSourceAttrSyncConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceAttrSyncConfigRequest
 */
export interface SourcesBetaApiGetSourceAttrSyncConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiGetSourceAttrSyncConfig
     */
    readonly id: string;
}
/**
 * Request parameters for getSourceConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceConfigRequest
 */
export interface SourcesBetaApiGetSourceConfigRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiGetSourceConfig
     */
    readonly id: string;
    /**
     * The locale to apply to the config. If no viable locale is given, it will default to \&quot;en\&quot;
     * @type {'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl'}
     * @memberof SourcesBetaApiGetSourceConfig
     */
    readonly locale?: 'de' | 'false' | 'fi' | 'sv' | 'ru' | 'pt' | 'ko' | 'zh-TW' | 'en' | 'it' | 'fr' | 'zh-CN' | 'hu' | 'es' | 'cs' | 'ja' | 'pl' | 'da' | 'nl';
}
/**
 * Request parameters for getSourceEntitlementsSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceEntitlementsSchemaRequest
 */
export interface SourcesBetaApiGetSourceEntitlementsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiGetSourceEntitlementsSchema
     */
    readonly id: string;
    /**
     * Name of entitlement schema
     * @type {string}
     * @memberof SourcesBetaApiGetSourceEntitlementsSchema
     */
    readonly schemaName?: string;
}
/**
 * Request parameters for getSourceSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceSchemaRequest
 */
export interface SourcesBetaApiGetSourceSchemaRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesBetaApiGetSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema ID.
     * @type {string}
     * @memberof SourcesBetaApiGetSourceSchema
     */
    readonly schemaId: string;
}
/**
 * Request parameters for getSourceSchemas operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiGetSourceSchemasRequest
 */
export interface SourcesBetaApiGetSourceSchemasRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesBetaApiGetSourceSchemas
     */
    readonly sourceId: string;
    /**
     * If set to \&#39;group\&#39;, then the account schema is filtered and only group schemas are returned. Only a value of \&#39;group\&#39; is recognized.
     * @type {'group' | 'user'}
     * @memberof SourcesBetaApiGetSourceSchemas
     */
    readonly includeTypes?: 'group' | 'user';
}
/**
 * Request parameters for importAccounts operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiImportAccountsRequest
 */
export interface SourcesBetaApiImportAccountsRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof SourcesBetaApiImportAccounts
     */
    readonly id: string;
    /**
     * The CSV file containing the source accounts to aggregate.
     * @type {any}
     * @memberof SourcesBetaApiImportAccounts
     */
    readonly file?: any;
    /**
     * Use this flag to reprocess every account whether or not the data has changed.
     * @type {string}
     * @memberof SourcesBetaApiImportAccounts
     */
    readonly disableOptimization?: string;
}
/**
 * Request parameters for importEntitlements operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiImportEntitlementsRequest
 */
export interface SourcesBetaApiImportEntitlementsRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof SourcesBetaApiImportEntitlements
     */
    readonly id: string;
    /**
     * The CSV file containing the source entitlements to aggregate.
     * @type {any}
     * @memberof SourcesBetaApiImportEntitlements
     */
    readonly file?: any;
}
/**
 * Request parameters for importSourceAccountsSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiImportSourceAccountsSchemaRequest
 */
export interface SourcesBetaApiImportSourceAccountsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiImportSourceAccountsSchema
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof SourcesBetaApiImportSourceAccountsSchema
     */
    readonly file?: any;
}
/**
 * Request parameters for importSourceConnectorFile operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiImportSourceConnectorFileRequest
 */
export interface SourcesBetaApiImportSourceConnectorFileRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiImportSourceConnectorFile
     */
    readonly sourceId: string;
    /**
     *
     * @type {any}
     * @memberof SourcesBetaApiImportSourceConnectorFile
     */
    readonly file?: any;
}
/**
 * Request parameters for importSourceEntitlementsSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiImportSourceEntitlementsSchemaRequest
 */
export interface SourcesBetaApiImportSourceEntitlementsSchemaRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiImportSourceEntitlementsSchema
     */
    readonly id: string;
    /**
     * Name of entitlement schema
     * @type {string}
     * @memberof SourcesBetaApiImportSourceEntitlementsSchema
     */
    readonly schemaName?: string;
    /**
     *
     * @type {any}
     * @memberof SourcesBetaApiImportSourceEntitlementsSchema
     */
    readonly file?: any;
}
/**
 * Request parameters for importUncorrelatedAccounts operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiImportUncorrelatedAccountsRequest
 */
export interface SourcesBetaApiImportUncorrelatedAccountsRequest {
    /**
     * Source Id
     * @type {string}
     * @memberof SourcesBetaApiImportUncorrelatedAccounts
     */
    readonly id: string;
    /**
     *
     * @type {any}
     * @memberof SourcesBetaApiImportUncorrelatedAccounts
     */
    readonly file?: any;
}
/**
 * Request parameters for listProvisioningPolicies operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiListProvisioningPoliciesRequest
 */
export interface SourcesBetaApiListProvisioningPoliciesRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiListProvisioningPolicies
     */
    readonly sourceId: string;
}
/**
 * Request parameters for listSources operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiListSourcesRequest
 */
export interface SourcesBetaApiListSourcesRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourcesBetaApiListSources
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof SourcesBetaApiListSources
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof SourcesBetaApiListSources
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **name**: *co, eq, in, sw, ge, gt, ne, isnull*  **type**: *eq, in, ge, gt, ne, isnull, sw*  **owner.id**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **features**: *ca, co*  **created**: *eq*  **modified**: *eq*  **managementWorkgroup.id**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **description**: *eq, sw*  **authoritative**: *eq, ne, isnull*  **healthy**: *isnull*  **status**: *eq, in, ge, gt, le, lt, ne, isnull, sw*  **connectionType**: *eq, ge, gt, in, le, lt, ne, isnull, sw*  **connectorName**: *eq, ge, gt, in, ne, isnull, sw*  **category**: *co, eq, ge, gt, in, le, lt, ne, sw*
     * @type {string}
     * @memberof SourcesBetaApiListSources
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **type, created, modified, name, owner.name, healthy, status, id, description, owner.id, accountCorrelationConfig.id, accountCorrelationConfig.name, managerCorrelationRule.type, managerCorrelationRule.id, managerCorrelationRule.name, authoritative, managementWorkgroup.id, connectorName, connectionType**
     * @type {string}
     * @memberof SourcesBetaApiListSources
     */
    readonly sorters?: string;
    /**
     * Filter the returned list of sources for the identity specified by the parameter, which is the id of an identity with the role SOURCE_SUBADMIN. By convention, the value **me** indicates the identity id of the current user. Subadmins may only view Sources which they are able to administer; all other Sources will be filtered out when this parameter is set. If the current user is a SOURCE_SUBADMIN but fails to pass a valid value for this parameter, a 403 Forbidden is returned.
     * @type {string}
     * @memberof SourcesBetaApiListSources
     */
    readonly forSubadmin?: string;
}
/**
 * Request parameters for peekResourceObjects operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPeekResourceObjectsRequest
 */
export interface SourcesBetaApiPeekResourceObjectsRequest {
    /**
     * The ID of the Source
     * @type {string}
     * @memberof SourcesBetaApiPeekResourceObjects
     */
    readonly sourceId: string;
    /**
     *
     * @type {ResourceObjectsRequestBeta}
     * @memberof SourcesBetaApiPeekResourceObjects
     */
    readonly resourceObjectsRequestBeta: ResourceObjectsRequestBeta;
}
/**
 * Request parameters for pingCluster operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPingClusterRequest
 */
export interface SourcesBetaApiPingClusterRequest {
    /**
     * The ID of the Source
     * @type {string}
     * @memberof SourcesBetaApiPingCluster
     */
    readonly sourceId: string;
}
/**
 * Request parameters for putCorrelationConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPutCorrelationConfigRequest
 */
export interface SourcesBetaApiPutCorrelationConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiPutCorrelationConfig
     */
    readonly id: string;
    /**
     *
     * @type {CorrelationConfigBeta}
     * @memberof SourcesBetaApiPutCorrelationConfig
     */
    readonly correlationConfigBeta: CorrelationConfigBeta;
}
/**
 * Request parameters for putNativeChangeDetectionConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPutNativeChangeDetectionConfigRequest
 */
export interface SourcesBetaApiPutNativeChangeDetectionConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiPutNativeChangeDetectionConfig
     */
    readonly id: string;
    /**
     *
     * @type {NativeChangeDetectionConfigBeta}
     * @memberof SourcesBetaApiPutNativeChangeDetectionConfig
     */
    readonly nativeChangeDetectionConfigBeta: NativeChangeDetectionConfigBeta;
}
/**
 * Request parameters for putProvisioningPolicy operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPutProvisioningPolicyRequest
 */
export interface SourcesBetaApiPutProvisioningPolicyRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesBetaApiPutProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageTypeBeta}
     * @memberof SourcesBetaApiPutProvisioningPolicy
     */
    readonly usageType: UsageTypeBeta;
    /**
     *
     * @type {ProvisioningPolicyDtoBeta}
     * @memberof SourcesBetaApiPutProvisioningPolicy
     */
    readonly provisioningPolicyDtoBeta: ProvisioningPolicyDtoBeta;
}
/**
 * Request parameters for putSource operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPutSourceRequest
 */
export interface SourcesBetaApiPutSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesBetaApiPutSource
     */
    readonly id: string;
    /**
     *
     * @type {SourceBeta}
     * @memberof SourcesBetaApiPutSource
     */
    readonly sourceBeta: SourceBeta;
}
/**
 * Request parameters for putSourceAttrSyncConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPutSourceAttrSyncConfigRequest
 */
export interface SourcesBetaApiPutSourceAttrSyncConfigRequest {
    /**
     * The source id
     * @type {string}
     * @memberof SourcesBetaApiPutSourceAttrSyncConfig
     */
    readonly id: string;
    /**
     *
     * @type {AttrSyncSourceConfigBeta}
     * @memberof SourcesBetaApiPutSourceAttrSyncConfig
     */
    readonly attrSyncSourceConfigBeta: AttrSyncSourceConfigBeta;
}
/**
 * Request parameters for putSourceSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiPutSourceSchemaRequest
 */
export interface SourcesBetaApiPutSourceSchemaRequest {
    /**
     * The Source ID.
     * @type {string}
     * @memberof SourcesBetaApiPutSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema ID.
     * @type {string}
     * @memberof SourcesBetaApiPutSourceSchema
     */
    readonly schemaId: string;
    /**
     *
     * @type {SchemaBeta}
     * @memberof SourcesBetaApiPutSourceSchema
     */
    readonly schemaBeta: SchemaBeta;
}
/**
 * Request parameters for syncAttributesForSource operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiSyncAttributesForSourceRequest
 */
export interface SourcesBetaApiSyncAttributesForSourceRequest {
    /**
     * The Source id
     * @type {string}
     * @memberof SourcesBetaApiSyncAttributesForSource
     */
    readonly id: string;
}
/**
 * Request parameters for testSourceConfiguration operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiTestSourceConfigurationRequest
 */
export interface SourcesBetaApiTestSourceConfigurationRequest {
    /**
     * The ID of the Source
     * @type {string}
     * @memberof SourcesBetaApiTestSourceConfiguration
     */
    readonly sourceId: string;
}
/**
 * Request parameters for testSourceConnection operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiTestSourceConnectionRequest
 */
export interface SourcesBetaApiTestSourceConnectionRequest {
    /**
     * The ID of the Source.
     * @type {string}
     * @memberof SourcesBetaApiTestSourceConnection
     */
    readonly sourceId: string;
}
/**
 * Request parameters for updateProvisioningPoliciesInBulk operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiUpdateProvisioningPoliciesInBulkRequest
 */
export interface SourcesBetaApiUpdateProvisioningPoliciesInBulkRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesBetaApiUpdateProvisioningPoliciesInBulk
     */
    readonly sourceId: string;
    /**
     *
     * @type {Array<ProvisioningPolicyDtoBeta>}
     * @memberof SourcesBetaApiUpdateProvisioningPoliciesInBulk
     */
    readonly provisioningPolicyDtoBeta: Array<ProvisioningPolicyDtoBeta>;
}
/**
 * Request parameters for updateProvisioningPolicy operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiUpdateProvisioningPolicyRequest
 */
export interface SourcesBetaApiUpdateProvisioningPolicyRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesBetaApiUpdateProvisioningPolicy
     */
    readonly sourceId: string;
    /**
     * The type of provisioning policy usage.  In IdentityNow, a source can support various provisioning operations. For example, when a joiner is added to a source, this may trigger both CREATE and UPDATE provisioning operations.  Each usage type is considered a provisioning policy.  A source can have any number of these provisioning policies defined.  These are the common usage types:  CREATE - This usage type relates to \&#39;Create Account Profile\&#39;, the provisioning template for the account to be created. For example, this would be used for a joiner on a source.   UPDATE - This usage type relates to \&#39;Update Account Profile\&#39;, the provisioning template for the \&#39;Update\&#39; connector operations. For example, this would be used for an attribute sync on a source. ENABLE - This usage type relates to \&#39;Enable Account Profile\&#39;, the provisioning template for the account to be enabled. For example, this could be used for a joiner on a source once the joiner\&#39;s account is created.  DISABLE - This usage type relates to \&#39;Disable Account Profile\&#39;, the provisioning template for the account to be disabled. For example, this could be used when a leaver is removed temporarily from a source.  You can use these four usage types for all your provisioning policy needs.
     * @type {UsageTypeBeta}
     * @memberof SourcesBetaApiUpdateProvisioningPolicy
     */
    readonly usageType: UsageTypeBeta;
    /**
     * The JSONPatch payload used to update the schema.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof SourcesBetaApiUpdateProvisioningPolicy
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for updateSource operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiUpdateSourceRequest
 */
export interface SourcesBetaApiUpdateSourceRequest {
    /**
     * Source ID.
     * @type {string}
     * @memberof SourcesBetaApiUpdateSource
     */
    readonly id: string;
    /**
     * A list of account update operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard. Any password changes are submitted as plain-text and encrypted upon receipt in Identity Security Cloud (ISC).
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof SourcesBetaApiUpdateSource
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for updateSourceEntitlementRequestConfig operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiUpdateSourceEntitlementRequestConfigRequest
 */
export interface SourcesBetaApiUpdateSourceEntitlementRequestConfigRequest {
    /**
     *
     * @type {SourceEntitlementRequestConfigBeta}
     * @memberof SourcesBetaApiUpdateSourceEntitlementRequestConfig
     */
    readonly sourceEntitlementRequestConfigBeta: SourceEntitlementRequestConfigBeta;
}
/**
 * Request parameters for updateSourceSchema operation in SourcesBetaApi.
 * @export
 * @interface SourcesBetaApiUpdateSourceSchemaRequest
 */
export interface SourcesBetaApiUpdateSourceSchemaRequest {
    /**
     * The Source id.
     * @type {string}
     * @memberof SourcesBetaApiUpdateSourceSchema
     */
    readonly sourceId: string;
    /**
     * The Schema id.
     * @type {string}
     * @memberof SourcesBetaApiUpdateSourceSchema
     */
    readonly schemaId: string;
    /**
     * The JSONPatch payload used to update the schema.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof SourcesBetaApiUpdateSourceSchema
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * SourcesBetaApi - object-oriented interface
 * @export
 * @class SourcesBetaApi
 * @extends {BaseAPI}
 */
export declare class SourcesBetaApi extends BaseAPI {
    /**
     * Use this API to delete a specific source in Identity Security Cloud (ISC). The API removes all the accounts on the source first, and then it deletes the source. You can retrieve the actual task execution status with this method: GET `/task-status/{id}` A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Delete Source by ID
     * @param {SourcesBetaApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    _delete(requestParameters: SourcesBetaApiDeleteRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Delete202ResponseBeta, any>>;
    /**
     * This API generates a create policy/template based on field value transforms. This API is intended for use when setting up JDBC Provisioning type sources, but it will also work on other source types. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with ORG_ADMIN authority is required to call this API.
     * @summary Create Provisioning Policy
     * @param {SourcesBetaApiCreateProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    createProvisioningPolicy(requestParameters: SourcesBetaApiCreateProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDtoBeta, any>>;
    /**
     * This creates a specific source with a full source JSON representation. Any passwords are submitted as plain-text and encrypted upon receipt in IdentityNow. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Creates a source in IdentityNow.
     * @param {SourcesBetaApiCreateSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    createSource(requestParameters: SourcesBetaApiCreateSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceBeta, any>>;
    /**
     * Use this API to create a new schema on the specified source in Identity Security Cloud (ISC).
     * @summary Create Schema on Source
     * @param {SourcesBetaApiCreateSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    createSourceSchema(requestParameters: SourcesBetaApiCreateSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta, any>>;
    /**
     * Use this endpoint to remove all accounts from the system without provisioning changes to the source. Accounts that are removed could be re-created during the next aggregation.  This endpoint is good for: * Removing accounts that no longer exist on the source. * Removing accounts that won\'t be aggregated following updates to the source configuration. * Forcing accounts to be re-created following the next aggregation to re-run account processing, support testing, etc.
     * @summary Remove All Accounts in a Source
     * @param {SourcesBetaApiDeleteAccountsAsyncRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    deleteAccountsAsync(requestParameters: SourcesBetaApiDeleteAccountsAsyncRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskResultDtoBeta, any>>;
    /**
     * Deletes the native change detection configuration for the source specified by the given ID. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Native Change Detection Configuration
     * @param {SourcesBetaApiDeleteNativeChangeDetectionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    deleteNativeChangeDetectionConfig(requestParameters: SourcesBetaApiDeleteNativeChangeDetectionConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deletes the provisioning policy with the specified usage on an application. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Delete Provisioning Policy by UsageType
     * @param {SourcesBetaApiDeleteProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    deleteProvisioningPolicy(requestParameters: SourcesBetaApiDeleteProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete Source Schema by ID
     * @param {SourcesBetaApiDeleteSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    deleteSourceSchema(requestParameters: SourcesBetaApiDeleteSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the existing correlation configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get Source Correlation Configuration
     * @param {SourcesBetaApiGetCorrelationConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getCorrelationConfig(requestParameters: SourcesBetaApiGetCorrelationConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CorrelationConfigBeta, any>>;
    /**
     * This API returns the existing native change detection configuration for a source specified by the given ID. A token with ORG_ADMIN authority is required to call this API.
     * @summary Native Change Detection Configuration
     * @param {SourcesBetaApiGetNativeChangeDetectionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getNativeChangeDetectionConfig(requestParameters: SourcesBetaApiGetNativeChangeDetectionConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NativeChangeDetectionConfigBeta, any>>;
    /**
     * This end-point retrieves the ProvisioningPolicy with the specified usage on the specified Source in IdentityNow. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Provisioning Policy by UsageType
     * @param {SourcesBetaApiGetProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getProvisioningPolicy(requestParameters: SourcesBetaApiGetProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDtoBeta, any>>;
    /**
     * Use this API to get a source by a specified ID in Identity Security Cloud (ISC). A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source by ID
     * @param {SourcesBetaApiGetSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSource(requestParameters: SourcesBetaApiGetSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceBeta, any>>;
    /**
     *
     * @summary Downloads source accounts schema template
     * @param {SourcesBetaApiGetSourceAccountsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceAccountsSchema(requestParameters: SourcesBetaApiGetSourceAccountsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the existing attribute synchronization configuration for a source specified by the given ID. The response contains all attributes, regardless of whether they enabled or not. A token with ORG_ADMIN or HELPDESK authority is required to call this API.
     * @summary Attribute Sync Config
     * @param {SourcesBetaApiGetSourceAttrSyncConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceAttrSyncConfig(requestParameters: SourcesBetaApiGetSourceAttrSyncConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AttrSyncSourceConfigBeta, any>>;
    /**
     * Looks up and returns the source config for the requested source id after populating the source config values and applying language translations. A token with ORG_ADMIN authority is required to call this API.
     * @summary Gets source config with language translations
     * @param {SourcesBetaApiGetSourceConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceConfig(requestParameters: SourcesBetaApiGetSourceConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConnectorDetailBeta, any>>;
    /**
     * This API gets the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Get Source Entitlement Request Configuration
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceEntitlementRequestConfig(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceEntitlementRequestConfigBeta, any>>;
    /**
     *
     * @summary Downloads source entitlements schema template
     * @param {SourcesBetaApiGetSourceEntitlementsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceEntitlementsSchema(requestParameters: SourcesBetaApiGetSourceEntitlementsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get the Source Schema by ID in IdentityNow.
     * @summary Get Source Schema by ID
     * @param {SourcesBetaApiGetSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceSchema(requestParameters: SourcesBetaApiGetSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta, any>>;
    /**
     * Use this API to list the schemas that exist on the specified source in Identity Security Cloud (ISC).
     * @summary List Schemas on Source
     * @param {SourcesBetaApiGetSourceSchemasRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    getSourceSchemas(requestParameters: SourcesBetaApiGetSourceSchemasRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta[], any>>;
    /**
     * Starts an account aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body. You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Account Aggregation
     * @param {SourcesBetaApiImportAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    importAccounts(requestParameters: SourcesBetaApiImportAccountsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoadAccountsTaskBeta, any>>;
    /**
     * Starts an entitlement aggregation on the specified source.  If the target source is a delimited file source, then the CSV file needs to be included in the request body.  You will also need to set the Content-Type header to `multipart/form-data`. A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Entitlement Aggregation
     * @param {SourcesBetaApiImportEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    importEntitlements(requestParameters: SourcesBetaApiImportEntitlementsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoadEntitlementTaskBeta, any>>;
    /**
     * This API uploads a source schema template file to configure a source\'s account attributes.
     * @summary Uploads source accounts schema template
     * @param {SourcesBetaApiImportSourceAccountsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    importSourceAccountsSchema(requestParameters: SourcesBetaApiImportSourceAccountsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta, any>>;
    /**
     * This uploads a supplemental source connector file (like jdbc driver jars) to a source\'s S3 bucket. This also sends ETS and Audit events. A token with ORG_ADMIN authority is required to call this API.
     * @summary Upload connector file to source
     * @param {SourcesBetaApiImportSourceConnectorFileRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    importSourceConnectorFile(requestParameters: SourcesBetaApiImportSourceConnectorFileRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceBeta, any>>;
    /**
     * This API uploads a source schema template file to configure a source\'s entitlement attributes.
     * @summary Uploads source entitlements schema template
     * @param {SourcesBetaApiImportSourceEntitlementsSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    importSourceEntitlementsSchema(requestParameters: SourcesBetaApiImportSourceEntitlementsSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta, any>>;
    /**
     * File is required for upload. You will also need to set the Content-Type header to `multipart/form-data`
     * @summary Process Uncorrelated Accounts
     * @param {SourcesBetaApiImportUncorrelatedAccountsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    importUncorrelatedAccounts(requestParameters: SourcesBetaApiImportUncorrelatedAccountsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoadUncorrelatedAccountsTaskBeta, any>>;
    /**
     * This end-point lists all the ProvisioningPolicies in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Lists ProvisioningPolicies
     * @param {SourcesBetaApiListProvisioningPoliciesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    listProvisioningPolicies(requestParameters: SourcesBetaApiListProvisioningPoliciesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDtoBeta[], any>>;
    /**
     * This end-point lists all the sources in IdentityNow.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or ROLE_SUBADMIN authority is required to call this API.
     * @summary Lists all sources in IdentityNow.
     * @param {SourcesBetaApiListSourcesRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    listSources(requestParameters?: SourcesBetaApiListSourcesRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceBeta[], any>>;
    /**
     * Retrieves a sample of data returned from account and group aggregation requests. A token with ORG_ADMIN authority is required to call this API.
     * @summary Peek source connector\'s resource objects
     * @param {SourcesBetaApiPeekResourceObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    peekResourceObjects(requestParameters: SourcesBetaApiPeekResourceObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResourceObjectsResponseBeta, any>>;
    /**
     * This endpoint validates that the cluster being used by the source is reachable from IdentityNow. A token with ORG_ADMIN authority is required to call this API.
     * @summary Ping cluster for source connector
     * @param {SourcesBetaApiPingClusterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    pingCluster(requestParameters: SourcesBetaApiPingClusterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusResponseBeta, any>>;
    /**
     * Replaces the correlation configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Source Correlation Configuration
     * @param {SourcesBetaApiPutCorrelationConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    putCorrelationConfig(requestParameters: SourcesBetaApiPutCorrelationConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CorrelationConfigBeta, any>>;
    /**
     * Replaces the native change detection configuration for the source specified by the given ID with the configuration provided in the request body.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Native Change Detection Configuration
     * @param {SourcesBetaApiPutNativeChangeDetectionConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    putNativeChangeDetectionConfig(requestParameters: SourcesBetaApiPutNativeChangeDetectionConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NativeChangeDetectionConfigBeta, any>>;
    /**
     * This end-point updates the provisioning policy with the specified usage on the specified source in IdentityNow. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Provisioning Policy by UsageType
     * @param {SourcesBetaApiPutProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    putProvisioningPolicy(requestParameters: SourcesBetaApiPutProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDtoBeta, any>>;
    /**
     * Use this API to update a source in Identity Security Cloud (ISC), using a full object representation. This means that when you use this API, it completely replaces the existing source configuration.  These fields are immutable, so they cannot be changed:  * id * type * authoritative * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source (Full)
     * @param {SourcesBetaApiPutSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    putSource(requestParameters: SourcesBetaApiPutSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceBeta, any>>;
    /**
     * Replaces the attribute synchronization configuration for the source specified by the given ID with the configuration provided in the request body. Only the \"enabled\" field of the values in the \"attributes\" array is mutable. Attempting to change other attributes or add new values to the \"attributes\" array will result in an error.      A token with ORG_ADMIN authority is required to call this API.
     * @summary Update Attribute Sync Config
     * @param {SourcesBetaApiPutSourceAttrSyncConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    putSourceAttrSyncConfig(requestParameters: SourcesBetaApiPutSourceAttrSyncConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AttrSyncSourceConfigBeta, any>>;
    /**
     * This API will completely replace an existing Schema with the submitted payload. Some fields of the Schema cannot be updated. These fields are listed below. * id * name * created * modified Any attempt to modify these fields will result in an error response with a status code of 400.
     * @summary Update Source Schema (Full)
     * @param {SourcesBetaApiPutSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    putSourceSchema(requestParameters: SourcesBetaApiPutSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta, any>>;
    /**
     * This end-point performs attribute synchronization for a selected source. A token with ORG_ADMIN or SOURCE_ADMIN authority is required to call this API.
     * @summary Synchronize single source attributes.
     * @param {SourcesBetaApiSyncAttributesForSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    syncAttributesForSource(requestParameters: SourcesBetaApiSyncAttributesForSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceSyncJobBeta, any>>;
    /**
     * This endpoint performs a more detailed validation of the source\'s configuration that can take longer than the lighter weight credential validation performed by the checkConnection API. A token with ORG_ADMIN authority is required to call this API.
     * @summary Test configuration for source connector
     * @param {SourcesBetaApiTestSourceConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    testSourceConfiguration(requestParameters: SourcesBetaApiTestSourceConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusResponseBeta, any>>;
    /**
     * This endpoint validates that the configured credentials are valid and will properly authenticate with the source identified by the sourceId path parameter. A token with ORG_ADMIN authority is required to call this API.
     * @summary Check connection for source connector.
     * @param {SourcesBetaApiTestSourceConnectionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    testSourceConnection(requestParameters: SourcesBetaApiTestSourceConnectionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StatusResponseBeta, any>>;
    /**
     * This end-point updates a list of provisioning policies on the specified source in IdentityNow. A token with API, or ORG_ADMIN authority is required to call this API.
     * @summary Bulk Update Provisioning Policies
     * @param {SourcesBetaApiUpdateProvisioningPoliciesInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    updateProvisioningPoliciesInBulk(requestParameters: SourcesBetaApiUpdateProvisioningPoliciesInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDtoBeta[], any>>;
    /**
     * This API selectively updates an existing Provisioning Policy using a JSONPatch payload. Transforms can be used in the provisioning policy to create a new attribute that you only need during provisioning. Refer to [Transforms in Provisioning Policies](https://developer.sailpoint.com/idn/docs/transforms/guides/transforms-in-provisioning-policies) for more information. A token with API, ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Partial update of Provisioning Policy
     * @param {SourcesBetaApiUpdateProvisioningPolicyRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    updateProvisioningPolicy(requestParameters: SourcesBetaApiUpdateProvisioningPolicyRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProvisioningPolicyDtoBeta, any>>;
    /**
     * Use this API to partially update a source in Identity Security Cloud (ISC), using a list of patch operations according to the [JSON Patch](https://tools.ietf.org/html/rfc6902) standard.  These fields are immutable, so they cannot be changed: * id * type * authoritative * created * modified * connector * connectorClass * passwordPolicies  Attempts to modify these fields will result in a 400 error.  A token with ORG_ADMIN, SOURCE_ADMIN, SOURCE_SUBADMIN, or API authority is required to call this API.
     * @summary Update Source (Partial)
     * @param {SourcesBetaApiUpdateSourceRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    updateSource(requestParameters: SourcesBetaApiUpdateSourceRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceBeta, any>>;
    /**
     * This API replaces the current entitlement request configuration for a source. This source-level configuration should apply for all the entitlements in the source.  Access request to any entitlements in the source should follow this configuration unless a separate entitlement-level configuration is defined. - During access request, this source-level entitlement request configuration overrides the global organization-level configuration. - However, the entitlement-level configuration (if defined) overrides this source-level configuration.  A token with ORG_ADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Update Source Entitlement Request Configuration
     * @param {SourcesBetaApiUpdateSourceEntitlementRequestConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    updateSourceEntitlementRequestConfig(requestParameters: SourcesBetaApiUpdateSourceEntitlementRequestConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SourceEntitlementRequestConfigBeta, any>>;
    /**
     * Use this API to selectively update an existing Schema using a JSONPatch payload.   The following schema fields are immutable and cannot be updated:  - id - name - created - modified   To switch an account attribute to a group entitlement, you need to have the following in place:  - `isEntitlement: true` - Must define a schema for the group and [add it to the source](https://developer.sailpoint.com/idn/api/beta/create-source-schema) before updating the `isGroup` flag.  For example, here is the `group` account attribute referencing a schema that defines the group: ```json {     \"name\": \"groups\",     \"type\": \"STRING\",     \"schema\": {         \"type\": \"CONNECTOR_SCHEMA\",         \"id\": \"2c9180887671ff8c01767b4671fc7d60\",         \"name\": \"group\"     },     \"description\": \"The groups, roles etc. that reference account group objects\",     \"isMulti\": true,     \"isEntitlement\": true,     \"isGroup\": true } ```
     * @summary Update Source Schema (Partial)
     * @param {SourcesBetaApiUpdateSourceSchemaRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SourcesBetaApi
     */
    updateSourceSchema(requestParameters: SourcesBetaApiUpdateSourceSchemaRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SchemaBeta, any>>;
}
/**
 * SuggestedEntitlementDescriptionBetaApi - axios parameter creator
 * @export
 */
export declare const SuggestedEntitlementDescriptionBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
     * @summary Submit Sed Batch Stats Request
     * @param {string} batchId Batch Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSedBatchStats: (batchId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Sed Batches. API responses with Sed Batch Status
     * @summary List Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSedBatches: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List of Suggested Entitlement Description
     * @summary List Suggested Entitlement Description
     * @param {number} [limit] Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
     * @param {boolean} [count] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
     * @param {boolean} [countOnly] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
     * @param {boolean} [requestedByAnyone] By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
     * @param {boolean} [showPendingStatusOnly] Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSeds: (limit?: number, filters?: string, count?: boolean, countOnly?: boolean, requestedByAnyone?: boolean, showPendingStatusOnly?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Patch Suggested Entitlement Description
     * @summary Patch Suggested Entitlement Description
     * @param {string} id id is sed id
     * @param {Array<SedPatchBeta>} sedPatchBeta Sed Patch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSed: (id: string, sedPatchBeta: Array<SedPatchBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
     * @summary Submit Bulk Approval Request
     * @param {Array<SedApprovalBeta>} sedApprovalBeta Sed Approval
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedApproval: (sedApprovalBeta: Array<SedApprovalBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
     * @summary Submit Sed Assignment Request
     * @param {SedAssignmentBeta} sedAssignmentBeta Sed Assignment Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedAssignment: (sedAssignmentBeta: SedAssignmentBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
     * @summary Submit Sed Batch Request
     * @param {SedBatchRequestBeta} [sedBatchRequestBeta] Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedBatchRequest: (sedBatchRequestBeta?: SedBatchRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SuggestedEntitlementDescriptionBetaApi - functional programming interface
 * @export
 */
export declare const SuggestedEntitlementDescriptionBetaApiFp: (configuration?: Configuration) => {
    /**
     * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
     * @summary Submit Sed Batch Stats Request
     * @param {string} batchId Batch Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSedBatchStats(batchId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SedBatchStatsBeta>>;
    /**
     * List Sed Batches. API responses with Sed Batch Status
     * @summary List Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSedBatches(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SedBatchStatusBeta>>;
    /**
     * List of Suggested Entitlement Description
     * @summary List Suggested Entitlement Description
     * @param {number} [limit] Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
     * @param {boolean} [count] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
     * @param {boolean} [countOnly] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
     * @param {boolean} [requestedByAnyone] By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
     * @param {boolean} [showPendingStatusOnly] Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSeds(limit?: number, filters?: string, count?: boolean, countOnly?: boolean, requestedByAnyone?: boolean, showPendingStatusOnly?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SedBeta>>>;
    /**
     * Patch Suggested Entitlement Description
     * @summary Patch Suggested Entitlement Description
     * @param {string} id id is sed id
     * @param {Array<SedPatchBeta>} sedPatchBeta Sed Patch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSed(id: string, sedPatchBeta: Array<SedPatchBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SedBeta>>;
    /**
     * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
     * @summary Submit Bulk Approval Request
     * @param {Array<SedApprovalBeta>} sedApprovalBeta Sed Approval
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedApproval(sedApprovalBeta: Array<SedApprovalBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SedApprovalStatusBeta>>>;
    /**
     * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
     * @summary Submit Sed Assignment Request
     * @param {SedAssignmentBeta} sedAssignmentBeta Sed Assignment Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedAssignment(sedAssignmentBeta: SedAssignmentBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SedAssignmentResponseBeta>>;
    /**
     * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
     * @summary Submit Sed Batch Request
     * @param {SedBatchRequestBeta} [sedBatchRequestBeta] Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedBatchRequest(sedBatchRequestBeta?: SedBatchRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SedBatchResponseBeta>>;
};
/**
 * SuggestedEntitlementDescriptionBetaApi - factory interface
 * @export
 */
export declare const SuggestedEntitlementDescriptionBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
     * @summary Submit Sed Batch Stats Request
     * @param {string} batchId Batch Id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSedBatchStats(batchId: string, axiosOptions?: any): AxiosPromise<SedBatchStatsBeta>;
    /**
     * List Sed Batches. API responses with Sed Batch Status
     * @summary List Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getSedBatches(axiosOptions?: any): AxiosPromise<SedBatchStatusBeta>;
    /**
     * List of Suggested Entitlement Description
     * @summary List Suggested Entitlement Description
     * @param {number} [limit] Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
     * @param {boolean} [count] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
     * @param {boolean} [countOnly] If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
     * @param {boolean} [requestedByAnyone] By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
     * @param {boolean} [showPendingStatusOnly] Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSeds(limit?: number, filters?: string, count?: boolean, countOnly?: boolean, requestedByAnyone?: boolean, showPendingStatusOnly?: boolean, axiosOptions?: any): AxiosPromise<Array<SedBeta>>;
    /**
     * Patch Suggested Entitlement Description
     * @summary Patch Suggested Entitlement Description
     * @param {string} id id is sed id
     * @param {Array<SedPatchBeta>} sedPatchBeta Sed Patch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSed(id: string, sedPatchBeta: Array<SedPatchBeta>, axiosOptions?: any): AxiosPromise<SedBeta>;
    /**
     * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
     * @summary Submit Bulk Approval Request
     * @param {Array<SedApprovalBeta>} sedApprovalBeta Sed Approval
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedApproval(sedApprovalBeta: Array<SedApprovalBeta>, axiosOptions?: any): AxiosPromise<Array<SedApprovalStatusBeta>>;
    /**
     * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
     * @summary Submit Sed Assignment Request
     * @param {SedAssignmentBeta} sedAssignmentBeta Sed Assignment Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedAssignment(sedAssignmentBeta: SedAssignmentBeta, axiosOptions?: any): AxiosPromise<SedAssignmentResponseBeta>;
    /**
     * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
     * @summary Submit Sed Batch Request
     * @param {SedBatchRequestBeta} [sedBatchRequestBeta] Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitSedBatchRequest(sedBatchRequestBeta?: SedBatchRequestBeta, axiosOptions?: any): AxiosPromise<SedBatchResponseBeta>;
};
/**
 * Request parameters for getSedBatchStats operation in SuggestedEntitlementDescriptionBetaApi.
 * @export
 * @interface SuggestedEntitlementDescriptionBetaApiGetSedBatchStatsRequest
 */
export interface SuggestedEntitlementDescriptionBetaApiGetSedBatchStatsRequest {
    /**
     * Batch Id
     * @type {string}
     * @memberof SuggestedEntitlementDescriptionBetaApiGetSedBatchStats
     */
    readonly batchId: string;
}
/**
 * Request parameters for listSeds operation in SuggestedEntitlementDescriptionBetaApi.
 * @export
 * @interface SuggestedEntitlementDescriptionBetaApiListSedsRequest
 */
export interface SuggestedEntitlementDescriptionBetaApiListSedsRequest {
    /**
     * Integer specifying the maximum number of records to return in a single API call.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). If it is not specified, a default limit is used.
     * @type {number}
     * @memberof SuggestedEntitlementDescriptionBetaApiListSeds
     */
    readonly limit?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **batchId**: *eq*  **status**: *eq, ne, in*  **displayName**: *eq, co*
     * @type {string}
     * @memberof SuggestedEntitlementDescriptionBetaApiListSeds
     */
    readonly filters?: string;
    /**
     * If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored.  The standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results). Since requesting a total count can have a performance impact, it is recommended not to send &#x60;count&#x3D;true&#x60; if that value will not be used.
     * @type {boolean}
     * @memberof SuggestedEntitlementDescriptionBetaApiListSeds
     */
    readonly count?: boolean;
    /**
     * If &#x60;true&#x60; it will populate the &#x60;X-Total-Count&#x60; response header with the number of results that would be returned if &#x60;limit&#x60; and &#x60;offset&#x60; were ignored. This parameter differs from the Coun parameter in that this one skip executing the actual query and always return an empty array.
     * @type {boolean}
     * @memberof SuggestedEntitlementDescriptionBetaApiListSeds
     */
    readonly countOnly?: boolean;
    /**
     * By default, the ListSeds API will only return items that you have requested to be generated.   This option will allow you to see all items that have been requested
     * @type {boolean}
     * @memberof SuggestedEntitlementDescriptionBetaApiListSeds
     */
    readonly requestedByAnyone?: boolean;
    /**
     * Will limit records to items that are in \&quot;suggested\&quot; or \&quot;approved\&quot; status
     * @type {boolean}
     * @memberof SuggestedEntitlementDescriptionBetaApiListSeds
     */
    readonly showPendingStatusOnly?: boolean;
}
/**
 * Request parameters for patchSed operation in SuggestedEntitlementDescriptionBetaApi.
 * @export
 * @interface SuggestedEntitlementDescriptionBetaApiPatchSedRequest
 */
export interface SuggestedEntitlementDescriptionBetaApiPatchSedRequest {
    /**
     * id is sed id
     * @type {string}
     * @memberof SuggestedEntitlementDescriptionBetaApiPatchSed
     */
    readonly id: string;
    /**
     * Sed Patch Request
     * @type {Array<SedPatchBeta>}
     * @memberof SuggestedEntitlementDescriptionBetaApiPatchSed
     */
    readonly sedPatchBeta: Array<SedPatchBeta>;
}
/**
 * Request parameters for submitSedApproval operation in SuggestedEntitlementDescriptionBetaApi.
 * @export
 * @interface SuggestedEntitlementDescriptionBetaApiSubmitSedApprovalRequest
 */
export interface SuggestedEntitlementDescriptionBetaApiSubmitSedApprovalRequest {
    /**
     * Sed Approval
     * @type {Array<SedApprovalBeta>}
     * @memberof SuggestedEntitlementDescriptionBetaApiSubmitSedApproval
     */
    readonly sedApprovalBeta: Array<SedApprovalBeta>;
}
/**
 * Request parameters for submitSedAssignment operation in SuggestedEntitlementDescriptionBetaApi.
 * @export
 * @interface SuggestedEntitlementDescriptionBetaApiSubmitSedAssignmentRequest
 */
export interface SuggestedEntitlementDescriptionBetaApiSubmitSedAssignmentRequest {
    /**
     * Sed Assignment Request
     * @type {SedAssignmentBeta}
     * @memberof SuggestedEntitlementDescriptionBetaApiSubmitSedAssignment
     */
    readonly sedAssignmentBeta: SedAssignmentBeta;
}
/**
 * Request parameters for submitSedBatchRequest operation in SuggestedEntitlementDescriptionBetaApi.
 * @export
 * @interface SuggestedEntitlementDescriptionBetaApiSubmitSedBatchRequestRequest
 */
export interface SuggestedEntitlementDescriptionBetaApiSubmitSedBatchRequestRequest {
    /**
     * Sed Batch Request
     * @type {SedBatchRequestBeta}
     * @memberof SuggestedEntitlementDescriptionBetaApiSubmitSedBatchRequest
     */
    readonly sedBatchRequestBeta?: SedBatchRequestBeta;
}
/**
 * SuggestedEntitlementDescriptionBetaApi - object-oriented interface
 * @export
 * @class SuggestedEntitlementDescriptionBetaApi
 * @extends {BaseAPI}
 */
export declare class SuggestedEntitlementDescriptionBetaApi extends BaseAPI {
    /**
     * Submit Sed Batch Stats Request. Submits batchId in the path param (e.g. {batchId}/stats). API responses with stats of the batchId.
     * @summary Submit Sed Batch Stats Request
     * @param {SuggestedEntitlementDescriptionBetaApiGetSedBatchStatsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    getSedBatchStats(requestParameters: SuggestedEntitlementDescriptionBetaApiGetSedBatchStatsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedBatchStatsBeta, any>>;
    /**
     * List Sed Batches. API responses with Sed Batch Status
     * @summary List Sed Batch Request
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    getSedBatches(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedBatchStatusBeta, any>>;
    /**
     * List of Suggested Entitlement Description
     * @summary List Suggested Entitlement Description
     * @param {SuggestedEntitlementDescriptionBetaApiListSedsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    listSeds(requestParameters?: SuggestedEntitlementDescriptionBetaApiListSedsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedBeta[], any>>;
    /**
     * Patch Suggested Entitlement Description
     * @summary Patch Suggested Entitlement Description
     * @param {SuggestedEntitlementDescriptionBetaApiPatchSedRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    patchSed(requestParameters: SuggestedEntitlementDescriptionBetaApiPatchSedRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedBeta, any>>;
    /**
     * Submit Bulk Approval Request for SED. Request body takes list of SED Ids. API responses with list of SED Approval Status
     * @summary Submit Bulk Approval Request
     * @param {SuggestedEntitlementDescriptionBetaApiSubmitSedApprovalRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    submitSedApproval(requestParameters: SuggestedEntitlementDescriptionBetaApiSubmitSedApprovalRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedApprovalStatusBeta[], any>>;
    /**
     * Submit Assignment Request. Request body has an assignee, and list of SED Ids that are assigned to that assignee API responses with batchId that groups all approval requests together
     * @summary Submit Sed Assignment Request
     * @param {SuggestedEntitlementDescriptionBetaApiSubmitSedAssignmentRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    submitSedAssignment(requestParameters: SuggestedEntitlementDescriptionBetaApiSubmitSedAssignmentRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedAssignmentResponseBeta, any>>;
    /**
     * Submit Sed Batch Request. Request body has a list of entitlement Ids that user wants to have description generated by LLM. API responses with batchId that groups Ids together
     * @summary Submit Sed Batch Request
     * @param {SuggestedEntitlementDescriptionBetaApiSubmitSedBatchRequestRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof SuggestedEntitlementDescriptionBetaApi
     */
    submitSedBatchRequest(requestParameters?: SuggestedEntitlementDescriptionBetaApiSubmitSedBatchRequestRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SedBatchResponseBeta, any>>;
}
/**
 * TaggedObjectsBetaApi - axios parameter creator
 * @export
 */
export declare const TaggedObjectsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
     * @param {string} id The ID of the object reference to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaggedObject: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsToManyObject: (bulkTaggedObjectBeta: BulkTaggedObjectBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaggedObject: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjects: (limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjectsByType: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
     * @param {string} id The ID of the object reference to update.
     * @param {TaggedObjectBeta} taggedObjectBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTaggedObject: (type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, taggedObjectBeta: TaggedObjectBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObjectBeta} taggedObjectBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagToObject: (taggedObjectBeta: TaggedObjectBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagsToManyObjects: (bulkTaggedObjectBeta: BulkTaggedObjectBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaggedObjectsBetaApi - functional programming interface
 * @export
 */
export declare const TaggedObjectsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
     * @param {string} id The ID of the object reference to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsToManyObject(bulkTaggedObjectBeta: BulkTaggedObjectBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaggedObjectBeta>>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjects(limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaggedObjectBeta>>>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjectsByType(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaggedObjectBeta>>>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
     * @param {string} id The ID of the object reference to update.
     * @param {TaggedObjectBeta} taggedObjectBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, taggedObjectBeta: TaggedObjectBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaggedObjectBeta>>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObjectBeta} taggedObjectBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagToObject(taggedObjectBeta: TaggedObjectBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagsToManyObjects(bulkTaggedObjectBeta: BulkTaggedObjectBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkTaggedObjectBeta>>;
};
/**
 * TaggedObjectsBetaApi - factory interface
 * @export
 */
export declare const TaggedObjectsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to delete.
     * @param {string} id The ID of the object reference to delete.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsToManyObject(bulkTaggedObjectBeta: BulkTaggedObjectBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {string} id The ID of the object reference to retrieve.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, axiosOptions?: any): AxiosPromise<TaggedObjectBeta>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjects(limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<TaggedObjectBeta>>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to retrieve.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTaggedObjectsByType(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<TaggedObjectBeta>>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'} type The type of tagged object to update.
     * @param {string} id The ID of the object reference to update.
     * @param {TaggedObjectBeta} taggedObjectBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTaggedObject(type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE', id: string, taggedObjectBeta: TaggedObjectBeta, axiosOptions?: any): AxiosPromise<TaggedObjectBeta>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObjectBeta} taggedObjectBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagToObject(taggedObjectBeta: TaggedObjectBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {BulkTaggedObjectBeta} bulkTaggedObjectBeta Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTagsToManyObjects(bulkTaggedObjectBeta: BulkTaggedObjectBeta, axiosOptions?: any): AxiosPromise<BulkTaggedObjectBeta>;
};
/**
 * Request parameters for deleteTaggedObject operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiDeleteTaggedObjectRequest
 */
export interface TaggedObjectsBetaApiDeleteTaggedObjectRequest {
    /**
     * The type of tagged object to delete.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsBetaApiDeleteTaggedObject
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * The ID of the object reference to delete.
     * @type {string}
     * @memberof TaggedObjectsBetaApiDeleteTaggedObject
     */
    readonly id: string;
}
/**
 * Request parameters for deleteTagsToManyObject operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiDeleteTagsToManyObjectRequest
 */
export interface TaggedObjectsBetaApiDeleteTagsToManyObjectRequest {
    /**
     * Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @type {BulkTaggedObjectBeta}
     * @memberof TaggedObjectsBetaApiDeleteTagsToManyObject
     */
    readonly bulkTaggedObjectBeta: BulkTaggedObjectBeta;
}
/**
 * Request parameters for getTaggedObject operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiGetTaggedObjectRequest
 */
export interface TaggedObjectsBetaApiGetTaggedObjectRequest {
    /**
     * The type of tagged object to retrieve.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsBetaApiGetTaggedObject
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * The ID of the object reference to retrieve.
     * @type {string}
     * @memberof TaggedObjectsBetaApiGetTaggedObject
     */
    readonly id: string;
}
/**
 * Request parameters for listTaggedObjects operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiListTaggedObjectsRequest
 */
export interface TaggedObjectsBetaApiListTaggedObjectsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsBetaApiListTaggedObjects
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsBetaApiListTaggedObjects
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaggedObjectsBetaApiListTaggedObjects
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq, in*  **objectRef.type**: *eq, in*  **tagName**: *eq, in*
     * @type {string}
     * @memberof TaggedObjectsBetaApiListTaggedObjects
     */
    readonly filters?: string;
}
/**
 * Request parameters for listTaggedObjectsByType operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiListTaggedObjectsByTypeRequest
 */
export interface TaggedObjectsBetaApiListTaggedObjectsByTypeRequest {
    /**
     * The type of tagged object to retrieve.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsBetaApiListTaggedObjectsByType
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsBetaApiListTaggedObjectsByType
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaggedObjectsBetaApiListTaggedObjectsByType
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaggedObjectsBetaApiListTaggedObjectsByType
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **objectRef.id**: *eq*  **objectRef.type**: *eq*
     * @type {string}
     * @memberof TaggedObjectsBetaApiListTaggedObjectsByType
     */
    readonly filters?: string;
}
/**
 * Request parameters for putTaggedObject operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiPutTaggedObjectRequest
 */
export interface TaggedObjectsBetaApiPutTaggedObjectRequest {
    /**
     * The type of tagged object to update.
     * @type {'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE'}
     * @memberof TaggedObjectsBetaApiPutTaggedObject
     */
    readonly type: 'ACCESS_PROFILE' | 'APPLICATION' | 'CAMPAIGN' | 'ENTITLEMENT' | 'IDENTITY' | 'ROLE' | 'SOD_POLICY' | 'SOURCE';
    /**
     * The ID of the object reference to update.
     * @type {string}
     * @memberof TaggedObjectsBetaApiPutTaggedObject
     */
    readonly id: string;
    /**
     *
     * @type {TaggedObjectBeta}
     * @memberof TaggedObjectsBetaApiPutTaggedObject
     */
    readonly taggedObjectBeta: TaggedObjectBeta;
}
/**
 * Request parameters for setTagToObject operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiSetTagToObjectRequest
 */
export interface TaggedObjectsBetaApiSetTagToObjectRequest {
    /**
     *
     * @type {TaggedObjectBeta}
     * @memberof TaggedObjectsBetaApiSetTagToObject
     */
    readonly taggedObjectBeta: TaggedObjectBeta;
}
/**
 * Request parameters for setTagsToManyObjects operation in TaggedObjectsBetaApi.
 * @export
 * @interface TaggedObjectsBetaApiSetTagsToManyObjectsRequest
 */
export interface TaggedObjectsBetaApiSetTagsToManyObjectsRequest {
    /**
     * Supported object types are ACCESS_PROFILE, APPLICATION, CAMPAIGN, ENTITLEMENT, IDENTITY, ROLE, SOD_POLICY, SOURCE.
     * @type {BulkTaggedObjectBeta}
     * @memberof TaggedObjectsBetaApiSetTagsToManyObjects
     */
    readonly bulkTaggedObjectBeta: BulkTaggedObjectBeta;
}
/**
 * TaggedObjectsBetaApi - object-oriented interface
 * @export
 * @class TaggedObjectsBetaApi
 * @extends {BaseAPI}
 */
export declare class TaggedObjectsBetaApi extends BaseAPI {
    /**
     * This deletes a tagged object for the specified type.
     * @summary Delete Tagged Object
     * @param {TaggedObjectsBetaApiDeleteTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    deleteTaggedObject(requestParameters: TaggedObjectsBetaApiDeleteTaggedObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API removes tags from multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Remove Tags from Multiple Objects
     * @param {TaggedObjectsBetaApiDeleteTagsToManyObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    deleteTagsToManyObject(requestParameters: TaggedObjectsBetaApiDeleteTagsToManyObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets a tagged object for the specified type.
     * @summary Get Tagged Object
     * @param {TaggedObjectsBetaApiGetTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    getTaggedObject(requestParameters: TaggedObjectsBetaApiGetTaggedObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObjectBeta, any>>;
    /**
     * This API returns a list of all tagged objects.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects
     * @param {TaggedObjectsBetaApiListTaggedObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    listTaggedObjects(requestParameters?: TaggedObjectsBetaApiListTaggedObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObjectBeta[], any>>;
    /**
     * This API returns a list of all tagged objects by type.  Any authenticated token may be used to call this API.
     * @summary List Tagged Objects by Type
     * @param {TaggedObjectsBetaApiListTaggedObjectsByTypeRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    listTaggedObjectsByType(requestParameters: TaggedObjectsBetaApiListTaggedObjectsByTypeRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObjectBeta[], any>>;
    /**
     * This updates a tagged object for the specified type.
     * @summary Update Tagged Object
     * @param {TaggedObjectsBetaApiPutTaggedObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    putTaggedObject(requestParameters: TaggedObjectsBetaApiPutTaggedObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaggedObjectBeta, any>>;
    /**
     * This adds a tag to an object.  Any authenticated token may be used to call this API.
     * @summary Add Tag to Object
     * @param {TaggedObjectsBetaApiSetTagToObjectRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    setTagToObject(requestParameters: TaggedObjectsBetaApiSetTagToObjectRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API adds tags to multiple objects.  A token with API, CERT_ADMIN, ORG_ADMIN, REPORT_ADMIN, ROLE_ADMIN, ROLE_SUBADMIN, SOURCE_ADMIN, or SOURCE_SUBADMIN authority is required to call this API.
     * @summary Tag Multiple Objects
     * @param {TaggedObjectsBetaApiSetTagsToManyObjectsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaggedObjectsBetaApi
     */
    setTagsToManyObjects(requestParameters: TaggedObjectsBetaApiSetTagsToManyObjectsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkTaggedObjectBeta, any>>;
}
/**
 * TaskManagementBetaApi - axios parameter creator
 * @export
 */
export declare const TaskManagementBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve headers for a list of TaskStatus for pending tasks.
     * @summary Retrieve headers only for pending task list.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTaskHeaders: (offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of TaskStatus for pending tasks.
     * @summary Retrieve a pending task list.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTasks: (offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a TaskStatus for a task by task ID.
     * @summary Get task status by ID.
     * @param {string} id Task ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaskStatus: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
     * @summary Retrieve a task status list.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaskStatusList: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
     * @summary Update task status by ID
     * @param {string} id Task ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskStatus: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaskManagementBetaApi - functional programming interface
 * @export
 */
export declare const TaskManagementBetaApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve headers for a list of TaskStatus for pending tasks.
     * @summary Retrieve headers only for pending task list.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTaskHeaders(offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Retrieve a list of TaskStatus for pending tasks.
     * @summary Retrieve a pending task list.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTasks(offset?: number, limit?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskStatusBeta>>>;
    /**
     * Get a TaskStatus for a task by task ID.
     * @summary Get task status by ID.
     * @param {string} id Task ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaskStatus(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskStatusBeta>>;
    /**
     * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
     * @summary Retrieve a task status list.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaskStatusList(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskStatusBeta>>>;
    /**
     * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
     * @summary Update task status by ID
     * @param {string} id Task ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskStatus(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskStatusBeta>>;
};
/**
 * TaskManagementBetaApi - factory interface
 * @export
 */
export declare const TaskManagementBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve headers for a list of TaskStatus for pending tasks.
     * @summary Retrieve headers only for pending task list.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTaskHeaders(offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Retrieve a list of TaskStatus for pending tasks.
     * @summary Retrieve a pending task list.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getPendingTasks(offset?: number, limit?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<TaskStatusBeta>>;
    /**
     * Get a TaskStatus for a task by task ID.
     * @summary Get task status by ID.
     * @param {string} id Task ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaskStatus(id: string, axiosOptions?: any): AxiosPromise<TaskStatusBeta>;
    /**
     * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
     * @summary Retrieve a task status list.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTaskStatusList(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<TaskStatusBeta>>;
    /**
     * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
     * @summary Update task status by ID
     * @param {string} id Task ID.
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta The JSONPatch payload used to update the object.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTaskStatus(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<TaskStatusBeta>;
};
/**
 * Request parameters for getPendingTaskHeaders operation in TaskManagementBetaApi.
 * @export
 * @interface TaskManagementBetaApiGetPendingTaskHeadersRequest
 */
export interface TaskManagementBetaApiGetPendingTaskHeadersRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaskManagementBetaApiGetPendingTaskHeaders
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaskManagementBetaApiGetPendingTaskHeaders
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaskManagementBetaApiGetPendingTaskHeaders
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getPendingTasks operation in TaskManagementBetaApi.
 * @export
 * @interface TaskManagementBetaApiGetPendingTasksRequest
 */
export interface TaskManagementBetaApiGetPendingTasksRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaskManagementBetaApiGetPendingTasks
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaskManagementBetaApiGetPendingTasks
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaskManagementBetaApiGetPendingTasks
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getTaskStatus operation in TaskManagementBetaApi.
 * @export
 * @interface TaskManagementBetaApiGetTaskStatusRequest
 */
export interface TaskManagementBetaApiGetTaskStatusRequest {
    /**
     * Task ID.
     * @type {string}
     * @memberof TaskManagementBetaApiGetTaskStatus
     */
    readonly id: string;
}
/**
 * Request parameters for getTaskStatusList operation in TaskManagementBetaApi.
 * @export
 * @interface TaskManagementBetaApiGetTaskStatusListRequest
 */
export interface TaskManagementBetaApiGetTaskStatusListRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaskManagementBetaApiGetTaskStatusList
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TaskManagementBetaApiGetTaskStatusList
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TaskManagementBetaApiGetTaskStatusList
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, in*  **sourceId**: *eq, in*  **completionStatus**: *eq, in*  **type**: *eq, in*
     * @type {string}
     * @memberof TaskManagementBetaApiGetTaskStatusList
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **created**
     * @type {string}
     * @memberof TaskManagementBetaApiGetTaskStatusList
     */
    readonly sorters?: string;
}
/**
 * Request parameters for updateTaskStatus operation in TaskManagementBetaApi.
 * @export
 * @interface TaskManagementBetaApiUpdateTaskStatusRequest
 */
export interface TaskManagementBetaApiUpdateTaskStatusRequest {
    /**
     * Task ID.
     * @type {string}
     * @memberof TaskManagementBetaApiUpdateTaskStatus
     */
    readonly id: string;
    /**
     * The JSONPatch payload used to update the object.
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof TaskManagementBetaApiUpdateTaskStatus
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * TaskManagementBetaApi - object-oriented interface
 * @export
 * @class TaskManagementBetaApi
 * @extends {BaseAPI}
 */
export declare class TaskManagementBetaApi extends BaseAPI {
    /**
     * Retrieve headers for a list of TaskStatus for pending tasks.
     * @summary Retrieve headers only for pending task list.
     * @param {TaskManagementBetaApiGetPendingTaskHeadersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    getPendingTaskHeaders(requestParameters?: TaskManagementBetaApiGetPendingTaskHeadersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Retrieve a list of TaskStatus for pending tasks.
     * @summary Retrieve a pending task list.
     * @param {TaskManagementBetaApiGetPendingTasksRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    getPendingTasks(requestParameters?: TaskManagementBetaApiGetPendingTasksRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskStatusBeta[], any>>;
    /**
     * Get a TaskStatus for a task by task ID.
     * @summary Get task status by ID.
     * @param {TaskManagementBetaApiGetTaskStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    getTaskStatus(requestParameters: TaskManagementBetaApiGetTaskStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskStatusBeta, any>>;
    /**
     * Use this endpoint to get a list of **completed** tasks. To get a list of tasks **in-progress**, please use the [get pending tasks](https://developer.sailpoint.com/docs/api/beta/get-pending-tasks) endpoint.
     * @summary Retrieve a task status list.
     * @param {TaskManagementBetaApiGetTaskStatusListRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    getTaskStatusList(requestParameters?: TaskManagementBetaApiGetTaskStatusListRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskStatusBeta[], any>>;
    /**
     * Update a current task status by task ID. Use this API to clear a pending task by updating the completionStatus and completed attributes.
     * @summary Update task status by ID
     * @param {TaskManagementBetaApiUpdateTaskStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskManagementBetaApi
     */
    updateTaskStatus(requestParameters: TaskManagementBetaApiUpdateTaskStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskStatusBeta, any>>;
}
/**
 * TenantBetaApi - axios parameter creator
 * @export
 */
export declare const TenantBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This rest endpoint can be used to retrieve tenant details.
     * @summary Get Tenant Information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenant: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantBetaApi - functional programming interface
 * @export
 */
export declare const TenantBetaApiFp: (configuration?: Configuration) => {
    /**
     * This rest endpoint can be used to retrieve tenant details.
     * @summary Get Tenant Information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantBeta>>;
};
/**
 * TenantBetaApi - factory interface
 * @export
 */
export declare const TenantBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This rest endpoint can be used to retrieve tenant details.
     * @summary Get Tenant Information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(axiosOptions?: any): AxiosPromise<TenantBeta>;
};
/**
 * TenantBetaApi - object-oriented interface
 * @export
 * @class TenantBetaApi
 * @extends {BaseAPI}
 */
export declare class TenantBetaApi extends BaseAPI {
    /**
     * This rest endpoint can be used to retrieve tenant details.
     * @summary Get Tenant Information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantBetaApi
     */
    getTenant(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantBeta, any>>;
}
/**
 * TransformsBetaApi - axios parameter creator
 * @export
 */
export declare const TransformsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {TransformBeta} transformBeta The transform to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createTransform: (transformBeta: TransformBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {string} id ID of the transform to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransform: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {string} id ID of the transform to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransform: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [name] Name of the transform to retrieve from the list.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTransforms: (offset?: number, limit?: number, count?: boolean, name?: string, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {string} id ID of the transform to update
     * @param {TransformBeta} [transformBeta] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTransform: (id: string, transformBeta?: TransformBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransformsBetaApi - functional programming interface
 * @export
 */
export declare const TransformsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {TransformBeta} transformBeta The transform to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createTransform(transformBeta: TransformBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformReadBeta>>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {string} id ID of the transform to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransform(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {string} id ID of the transform to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransform(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformReadBeta>>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [name] Name of the transform to retrieve from the list.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTransforms(offset?: number, limit?: number, count?: boolean, name?: string, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransformReadBeta>>>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {string} id ID of the transform to update
     * @param {TransformBeta} [transformBeta] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTransform(id: string, transformBeta?: TransformBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransformReadBeta>>;
};
/**
 * TransformsBetaApi - factory interface
 * @export
 */
export declare const TransformsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {TransformBeta} transformBeta The transform to be created.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createTransform(transformBeta: TransformBeta, axiosOptions?: any): AxiosPromise<TransformReadBeta>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {string} id ID of the transform to delete
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransform(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {string} id ID of the transform to retrieve
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTransform(id: string, axiosOptions?: any): AxiosPromise<TransformReadBeta>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [name] Name of the transform to retrieve from the list.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTransforms(offset?: number, limit?: number, count?: boolean, name?: string, filters?: string, axiosOptions?: any): AxiosPromise<Array<TransformReadBeta>>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {string} id ID of the transform to update
     * @param {TransformBeta} [transformBeta] The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateTransform(id: string, transformBeta?: TransformBeta, axiosOptions?: any): AxiosPromise<TransformReadBeta>;
};
/**
 * Request parameters for createTransform operation in TransformsBetaApi.
 * @export
 * @interface TransformsBetaApiCreateTransformRequest
 */
export interface TransformsBetaApiCreateTransformRequest {
    /**
     * The transform to be created.
     * @type {TransformBeta}
     * @memberof TransformsBetaApiCreateTransform
     */
    readonly transformBeta: TransformBeta;
}
/**
 * Request parameters for deleteTransform operation in TransformsBetaApi.
 * @export
 * @interface TransformsBetaApiDeleteTransformRequest
 */
export interface TransformsBetaApiDeleteTransformRequest {
    /**
     * ID of the transform to delete
     * @type {string}
     * @memberof TransformsBetaApiDeleteTransform
     */
    readonly id: string;
}
/**
 * Request parameters for getTransform operation in TransformsBetaApi.
 * @export
 * @interface TransformsBetaApiGetTransformRequest
 */
export interface TransformsBetaApiGetTransformRequest {
    /**
     * ID of the transform to retrieve
     * @type {string}
     * @memberof TransformsBetaApiGetTransform
     */
    readonly id: string;
}
/**
 * Request parameters for listTransforms operation in TransformsBetaApi.
 * @export
 * @interface TransformsBetaApiListTransformsRequest
 */
export interface TransformsBetaApiListTransformsRequest {
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TransformsBetaApiListTransforms
     */
    readonly offset?: number;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TransformsBetaApiListTransforms
     */
    readonly limit?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TransformsBetaApiListTransforms
     */
    readonly count?: boolean;
    /**
     * Name of the transform to retrieve from the list.
     * @type {string}
     * @memberof TransformsBetaApiListTransforms
     */
    readonly name?: string;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **internal**: *eq*  **name**: *eq, sw*
     * @type {string}
     * @memberof TransformsBetaApiListTransforms
     */
    readonly filters?: string;
}
/**
 * Request parameters for updateTransform operation in TransformsBetaApi.
 * @export
 * @interface TransformsBetaApiUpdateTransformRequest
 */
export interface TransformsBetaApiUpdateTransformRequest {
    /**
     * ID of the transform to update
     * @type {string}
     * @memberof TransformsBetaApiUpdateTransform
     */
    readonly id: string;
    /**
     * The updated transform object. Must include \&quot;name\&quot;, \&quot;type\&quot;, and \&quot;attributes\&quot; fields, but \&quot;name\&quot; and \&quot;type\&quot; must not be modified.
     * @type {TransformBeta}
     * @memberof TransformsBetaApiUpdateTransform
     */
    readonly transformBeta?: TransformBeta;
}
/**
 * TransformsBetaApi - object-oriented interface
 * @export
 * @class TransformsBetaApi
 * @extends {BaseAPI}
 */
export declare class TransformsBetaApi extends BaseAPI {
    /**
     * Creates a new transform object immediately. By default, the internal flag is set to false to indicate that this is a custom transform. Only SailPoint employees have the ability to create a transform with internal set to true. Newly created Transforms can be used in the Identity Profile mappings within the UI. A token with transform write authority is required to call this API.
     * @summary Create transform
     * @param {TransformsBetaApiCreateTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    createTransform(requestParameters: TransformsBetaApiCreateTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformReadBeta, any>>;
    /**
     * Deletes the transform specified by the given ID. Attempting to delete a transform that is used in one or more Identity Profile mappings will result in an error. If this occurs, you must first remove the transform from all mappings before deleting the transform. A token with transform delete authority is required to call this API.
     * @summary Delete a transform
     * @param {TransformsBetaApiDeleteTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    deleteTransform(requestParameters: TransformsBetaApiDeleteTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API returns the transform specified by the given ID. A token with transform read authority is required to call this API.
     * @summary Transform by ID
     * @param {TransformsBetaApiGetTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    getTransform(requestParameters: TransformsBetaApiGetTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformReadBeta, any>>;
    /**
     * Gets a list of all saved transform objects. A token with transforms-list read authority is required to call this API.
     * @summary List transforms
     * @param {TransformsBetaApiListTransformsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    listTransforms(requestParameters?: TransformsBetaApiListTransformsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformReadBeta[], any>>;
    /**
     * Replaces the transform specified by the given ID with the transform provided in the request body. Only the \"attributes\" field is mutable. Attempting to change other properties (ex. \"name\" and \"type\") will result in an error. A token with transform write authority is required to call this API.
     * @summary Update a transform
     * @param {TransformsBetaApiUpdateTransformRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TransformsBetaApi
     */
    updateTransform(requestParameters: TransformsBetaApiUpdateTransformRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TransformReadBeta, any>>;
}
/**
 * TriggersBetaApi - axios parameter creator
 * @export
 */
export declare const TriggersBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Completes an invocation to a REQUEST_RESPONSE type trigger.
     * @summary Complete Trigger Invocation
     * @param {string} id The ID of the invocation to complete.
     * @param {CompleteInvocationBeta} completeInvocationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeTriggerInvocation: (id: string, completeInvocationBeta: CompleteInvocationBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
     * @summary Create a Subscription
     * @param {SubscriptionPostRequestBeta} subscriptionPostRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription: (subscriptionPostRequestBeta: SubscriptionPostRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes an existing subscription to a trigger.
     * @summary Delete a Subscription
     * @param {string} id Subscription ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscription: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of all trigger subscriptions.
     * @summary List Subscriptions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSubscriptions: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
     * @summary List Latest Invocation Statuses
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTriggerInvocationStatus: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a list of triggers that are available in the tenant.
     * @summary List Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTriggers: (limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
     * @summary Patch a Subscription
     * @param {string} id ID of the Subscription to patch
     * @param {Array<SubscriptionPatchRequestInnerBeta>} subscriptionPatchRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSubscription: (id: string, subscriptionPatchRequestInnerBeta: Array<SubscriptionPatchRequestInnerBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
     * @summary Start a Test Invocation
     * @param {TestInvocationBeta} testInvocationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startTestTriggerInvocation: (testInvocationBeta: TestInvocationBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
     * @summary Validate a Subscription Filter
     * @param {ValidateFilterInputDtoBeta} validateFilterInputDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSubscriptionFilter: (validateFilterInputDtoBeta: ValidateFilterInputDtoBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
     * @summary Update a Subscription
     * @param {string} id Subscription ID
     * @param {SubscriptionPutRequestBeta} subscriptionPutRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription: (id: string, subscriptionPutRequestBeta: SubscriptionPutRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TriggersBetaApi - functional programming interface
 * @export
 */
export declare const TriggersBetaApiFp: (configuration?: Configuration) => {
    /**
     * Completes an invocation to a REQUEST_RESPONSE type trigger.
     * @summary Complete Trigger Invocation
     * @param {string} id The ID of the invocation to complete.
     * @param {CompleteInvocationBeta} completeInvocationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeTriggerInvocation(id: string, completeInvocationBeta: CompleteInvocationBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
     * @summary Create a Subscription
     * @param {SubscriptionPostRequestBeta} subscriptionPostRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(subscriptionPostRequestBeta: SubscriptionPostRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionBeta>>;
    /**
     * Deletes an existing subscription to a trigger.
     * @summary Delete a Subscription
     * @param {string} id Subscription ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscription(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Gets a list of all trigger subscriptions.
     * @summary List Subscriptions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSubscriptions(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubscriptionBeta>>>;
    /**
     * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
     * @summary List Latest Invocation Statuses
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTriggerInvocationStatus(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvocationStatusBeta>>>;
    /**
     * Gets a list of triggers that are available in the tenant.
     * @summary List Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTriggers(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TriggerBeta>>>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
     * @summary Patch a Subscription
     * @param {string} id ID of the Subscription to patch
     * @param {Array<SubscriptionPatchRequestInnerBeta>} subscriptionPatchRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSubscription(id: string, subscriptionPatchRequestInnerBeta: Array<SubscriptionPatchRequestInnerBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionBeta>>;
    /**
     * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
     * @summary Start a Test Invocation
     * @param {TestInvocationBeta} testInvocationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startTestTriggerInvocation(testInvocationBeta: TestInvocationBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvocationBeta>>>;
    /**
     * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
     * @summary Validate a Subscription Filter
     * @param {ValidateFilterInputDtoBeta} validateFilterInputDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSubscriptionFilter(validateFilterInputDtoBeta: ValidateFilterInputDtoBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateFilterOutputDtoBeta>>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
     * @summary Update a Subscription
     * @param {string} id Subscription ID
     * @param {SubscriptionPutRequestBeta} subscriptionPutRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(id: string, subscriptionPutRequestBeta: SubscriptionPutRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionBeta>>;
};
/**
 * TriggersBetaApi - factory interface
 * @export
 */
export declare const TriggersBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Completes an invocation to a REQUEST_RESPONSE type trigger.
     * @summary Complete Trigger Invocation
     * @param {string} id The ID of the invocation to complete.
     * @param {CompleteInvocationBeta} completeInvocationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeTriggerInvocation(id: string, completeInvocationBeta: CompleteInvocationBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
     * @summary Create a Subscription
     * @param {SubscriptionPostRequestBeta} subscriptionPostRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(subscriptionPostRequestBeta: SubscriptionPostRequestBeta, axiosOptions?: any): AxiosPromise<SubscriptionBeta>;
    /**
     * Deletes an existing subscription to a trigger.
     * @summary Delete a Subscription
     * @param {string} id Subscription ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscription(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Gets a list of all trigger subscriptions.
     * @summary List Subscriptions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listSubscriptions(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<SubscriptionBeta>>;
    /**
     * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
     * @summary List Latest Invocation Statuses
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTriggerInvocationStatus(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<InvocationStatusBeta>>;
    /**
     * Gets a list of triggers that are available in the tenant.
     * @summary List Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
     * @param {string} [sorters] Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listTriggers(limit?: number, offset?: number, count?: boolean, filters?: string, sorters?: string, axiosOptions?: any): AxiosPromise<Array<TriggerBeta>>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
     * @summary Patch a Subscription
     * @param {string} id ID of the Subscription to patch
     * @param {Array<SubscriptionPatchRequestInnerBeta>} subscriptionPatchRequestInnerBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchSubscription(id: string, subscriptionPatchRequestInnerBeta: Array<SubscriptionPatchRequestInnerBeta>, axiosOptions?: any): AxiosPromise<SubscriptionBeta>;
    /**
     * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
     * @summary Start a Test Invocation
     * @param {TestInvocationBeta} testInvocationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    startTestTriggerInvocation(testInvocationBeta: TestInvocationBeta, axiosOptions?: any): AxiosPromise<Array<InvocationBeta>>;
    /**
     * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
     * @summary Validate a Subscription Filter
     * @param {ValidateFilterInputDtoBeta} validateFilterInputDtoBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testSubscriptionFilter(validateFilterInputDtoBeta: ValidateFilterInputDtoBeta, axiosOptions?: any): AxiosPromise<ValidateFilterOutputDtoBeta>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
     * @summary Update a Subscription
     * @param {string} id Subscription ID
     * @param {SubscriptionPutRequestBeta} subscriptionPutRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscription(id: string, subscriptionPutRequestBeta: SubscriptionPutRequestBeta, axiosOptions?: any): AxiosPromise<SubscriptionBeta>;
};
/**
 * Request parameters for completeTriggerInvocation operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiCompleteTriggerInvocationRequest
 */
export interface TriggersBetaApiCompleteTriggerInvocationRequest {
    /**
     * The ID of the invocation to complete.
     * @type {string}
     * @memberof TriggersBetaApiCompleteTriggerInvocation
     */
    readonly id: string;
    /**
     *
     * @type {CompleteInvocationBeta}
     * @memberof TriggersBetaApiCompleteTriggerInvocation
     */
    readonly completeInvocationBeta: CompleteInvocationBeta;
}
/**
 * Request parameters for createSubscription operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiCreateSubscriptionRequest
 */
export interface TriggersBetaApiCreateSubscriptionRequest {
    /**
     *
     * @type {SubscriptionPostRequestBeta}
     * @memberof TriggersBetaApiCreateSubscription
     */
    readonly subscriptionPostRequestBeta: SubscriptionPostRequestBeta;
}
/**
 * Request parameters for deleteSubscription operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiDeleteSubscriptionRequest
 */
export interface TriggersBetaApiDeleteSubscriptionRequest {
    /**
     * Subscription ID
     * @type {string}
     * @memberof TriggersBetaApiDeleteSubscription
     */
    readonly id: string;
}
/**
 * Request parameters for listSubscriptions operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiListSubscriptionsRequest
 */
export interface TriggersBetaApiListSubscriptionsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TriggersBetaApiListSubscriptions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TriggersBetaApiListSubscriptions
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TriggersBetaApiListSubscriptions
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*  **triggerId**: *eq*  **type**: *eq, le*
     * @type {string}
     * @memberof TriggersBetaApiListSubscriptions
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, triggerName**
     * @type {string}
     * @memberof TriggersBetaApiListSubscriptions
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listTriggerInvocationStatus operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiListTriggerInvocationStatusRequest
 */
export interface TriggersBetaApiListTriggerInvocationStatusRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TriggersBetaApiListTriggerInvocationStatus
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TriggersBetaApiListTriggerInvocationStatus
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TriggersBetaApiListTriggerInvocationStatus
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **triggerId**: *eq*  **subscriptionId**: *eq*
     * @type {string}
     * @memberof TriggersBetaApiListTriggerInvocationStatus
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **triggerId, subscriptionName, created, completed**
     * @type {string}
     * @memberof TriggersBetaApiListTriggerInvocationStatus
     */
    readonly sorters?: string;
}
/**
 * Request parameters for listTriggers operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiListTriggersRequest
 */
export interface TriggersBetaApiListTriggersRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TriggersBetaApiListTriggers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof TriggersBetaApiListTriggers
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof TriggersBetaApiListTriggers
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq, ge, le*
     * @type {string}
     * @memberof TriggersBetaApiListTriggers
     */
    readonly filters?: string;
    /**
     * Sort results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#sorting-results)  Sorting is supported for the following fields: **id, name**
     * @type {string}
     * @memberof TriggersBetaApiListTriggers
     */
    readonly sorters?: string;
}
/**
 * Request parameters for patchSubscription operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiPatchSubscriptionRequest
 */
export interface TriggersBetaApiPatchSubscriptionRequest {
    /**
     * ID of the Subscription to patch
     * @type {string}
     * @memberof TriggersBetaApiPatchSubscription
     */
    readonly id: string;
    /**
     *
     * @type {Array<SubscriptionPatchRequestInnerBeta>}
     * @memberof TriggersBetaApiPatchSubscription
     */
    readonly subscriptionPatchRequestInnerBeta: Array<SubscriptionPatchRequestInnerBeta>;
}
/**
 * Request parameters for startTestTriggerInvocation operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiStartTestTriggerInvocationRequest
 */
export interface TriggersBetaApiStartTestTriggerInvocationRequest {
    /**
     *
     * @type {TestInvocationBeta}
     * @memberof TriggersBetaApiStartTestTriggerInvocation
     */
    readonly testInvocationBeta: TestInvocationBeta;
}
/**
 * Request parameters for testSubscriptionFilter operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiTestSubscriptionFilterRequest
 */
export interface TriggersBetaApiTestSubscriptionFilterRequest {
    /**
     *
     * @type {ValidateFilterInputDtoBeta}
     * @memberof TriggersBetaApiTestSubscriptionFilter
     */
    readonly validateFilterInputDtoBeta: ValidateFilterInputDtoBeta;
}
/**
 * Request parameters for updateSubscription operation in TriggersBetaApi.
 * @export
 * @interface TriggersBetaApiUpdateSubscriptionRequest
 */
export interface TriggersBetaApiUpdateSubscriptionRequest {
    /**
     * Subscription ID
     * @type {string}
     * @memberof TriggersBetaApiUpdateSubscription
     */
    readonly id: string;
    /**
     *
     * @type {SubscriptionPutRequestBeta}
     * @memberof TriggersBetaApiUpdateSubscription
     */
    readonly subscriptionPutRequestBeta: SubscriptionPutRequestBeta;
}
/**
 * TriggersBetaApi - object-oriented interface
 * @export
 * @class TriggersBetaApi
 * @extends {BaseAPI}
 */
export declare class TriggersBetaApi extends BaseAPI {
    /**
     * Completes an invocation to a REQUEST_RESPONSE type trigger.
     * @summary Complete Trigger Invocation
     * @param {TriggersBetaApiCompleteTriggerInvocationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    completeTriggerInvocation(requestParameters: TriggersBetaApiCompleteTriggerInvocationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This API creates a new subscription to a trigger and defines trigger invocation details. The type of subscription determines which config object is required: * HTTP subscriptions require httpConfig * EventBridge subscriptions require eventBridgeConfig
     * @summary Create a Subscription
     * @param {TriggersBetaApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    createSubscription(requestParameters: TriggersBetaApiCreateSubscriptionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionBeta, any>>;
    /**
     * Deletes an existing subscription to a trigger.
     * @summary Delete a Subscription
     * @param {TriggersBetaApiDeleteSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    deleteSubscription(requestParameters: TriggersBetaApiDeleteSubscriptionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Gets a list of all trigger subscriptions.
     * @summary List Subscriptions
     * @param {TriggersBetaApiListSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    listSubscriptions(requestParameters?: TriggersBetaApiListSubscriptionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionBeta[], any>>;
    /**
     * Gets a list of latest invocation statuses. Statuses of successful invocations are available for up to 24 hours. Statuses of failed invocations are available for up to 48 hours. This endpoint may only fetch up to 2000 invocations, and should not be treated as a representation of the full history of invocations.
     * @summary List Latest Invocation Statuses
     * @param {TriggersBetaApiListTriggerInvocationStatusRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    listTriggerInvocationStatus(requestParameters?: TriggersBetaApiListTriggerInvocationStatusRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvocationStatusBeta[], any>>;
    /**
     * Gets a list of triggers that are available in the tenant.
     * @summary List Triggers
     * @param {TriggersBetaApiListTriggersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    listTriggers(requestParameters?: TriggersBetaApiListTriggersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TriggerBeta[], any>>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a set of instructions to modify a subscription partially. The following fields are patchable:  **name**, **description**, **enabled**, **type**, **filter**, **responseDeadline**, **httpConfig**, **eventBridgeConfig**, **workflowConfig**
     * @summary Patch a Subscription
     * @param {TriggersBetaApiPatchSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    patchSubscription(requestParameters: TriggersBetaApiPatchSubscriptionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionBeta, any>>;
    /**
     * Initiate a test event for all subscribers of the specified event trigger.  If there are no subscribers to the specified trigger in the tenant, then no test event will be sent.
     * @summary Start a Test Invocation
     * @param {TriggersBetaApiStartTestTriggerInvocationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    startTestTriggerInvocation(requestParameters: TriggersBetaApiStartTestTriggerInvocationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvocationBeta[], any>>;
    /**
     * Validates a JSONPath filter expression against a provided mock input. Request requires a security scope of:
     * @summary Validate a Subscription Filter
     * @param {TriggersBetaApiTestSubscriptionFilterRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    testSubscriptionFilter(requestParameters: TriggersBetaApiTestSubscriptionFilterRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ValidateFilterOutputDtoBeta, any>>;
    /**
     * This API updates a trigger subscription in IdentityNow, using a full object representation. In other words, the existing   Subscription is completely replaced. The following fields are immutable:     * id    * triggerId     Attempts to modify these fields result in 400.
     * @summary Update a Subscription
     * @param {TriggersBetaApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof TriggersBetaApi
     */
    updateSubscription(requestParameters: TriggersBetaApiUpdateSubscriptionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionBeta, any>>;
}
/**
 * UIMetadataBetaApi - axios parameter creator
 * @export
 */
export declare const UIMetadataBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get a tenant UI metadata
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUiMetadata: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update tenant UI metadata
     * @param {TenantUiMetadataItemUpdateRequestBeta} tenantUiMetadataItemUpdateRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTenantUiMetadata: (tenantUiMetadataItemUpdateRequestBeta: TenantUiMetadataItemUpdateRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UIMetadataBetaApi - functional programming interface
 * @export
 */
export declare const UIMetadataBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get a tenant UI metadata
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUiMetadata(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantUiMetadataItemResponseBeta>>;
    /**
     * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update tenant UI metadata
     * @param {TenantUiMetadataItemUpdateRequestBeta} tenantUiMetadataItemUpdateRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTenantUiMetadata(tenantUiMetadataItemUpdateRequestBeta: TenantUiMetadataItemUpdateRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantUiMetadataItemResponseBeta>>;
};
/**
 * UIMetadataBetaApi - factory interface
 * @export
 */
export declare const UIMetadataBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get a tenant UI metadata
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenantUiMetadata(axiosOptions?: any): AxiosPromise<TenantUiMetadataItemResponseBeta>;
    /**
     * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update tenant UI metadata
     * @param {TenantUiMetadataItemUpdateRequestBeta} tenantUiMetadataItemUpdateRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    setTenantUiMetadata(tenantUiMetadataItemUpdateRequestBeta: TenantUiMetadataItemUpdateRequestBeta, axiosOptions?: any): AxiosPromise<TenantUiMetadataItemResponseBeta>;
};
/**
 * Request parameters for setTenantUiMetadata operation in UIMetadataBetaApi.
 * @export
 * @interface UIMetadataBetaApiSetTenantUiMetadataRequest
 */
export interface UIMetadataBetaApiSetTenantUiMetadataRequest {
    /**
     *
     * @type {TenantUiMetadataItemUpdateRequestBeta}
     * @memberof UIMetadataBetaApiSetTenantUiMetadata
     */
    readonly tenantUiMetadataItemUpdateRequestBeta: TenantUiMetadataItemUpdateRequestBeta;
}
/**
 * UIMetadataBetaApi - object-oriented interface
 * @export
 * @class UIMetadataBetaApi
 * @extends {BaseAPI}
 */
export declare class UIMetadataBetaApi extends BaseAPI {
    /**
     * This API endpoint retrieves UI metadata configured for your tenant. A token with ORG_ADMIN authority is required to call this API.
     * @summary Get a tenant UI metadata
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UIMetadataBetaApi
     */
    getTenantUiMetadata(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantUiMetadataItemResponseBeta, any>>;
    /**
     * This API endpoint updates UI metadata for your tenant. These changes may require up to 5 minutes to take effect on the UI. A token with ORG_ADMIN authority is required to call this API.
     * @summary Update tenant UI metadata
     * @param {UIMetadataBetaApiSetTenantUiMetadataRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof UIMetadataBetaApi
     */
    setTenantUiMetadata(requestParameters: UIMetadataBetaApiSetTenantUiMetadataRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantUiMetadataItemResponseBeta, any>>;
}
/**
 * VendorConnectorMappingsBetaApi - axios parameter creator
 * @export
 */
export declare const VendorConnectorMappingsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVendorConnectorMapping: (vendorConnectorMappingBeta: VendorConnectorMappingBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVendorConnectorMapping: (vendorConnectorMappingBeta: VendorConnectorMappingBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VendorConnectorMappingsBetaApi - functional programming interface
 * @export
 */
export declare const VendorConnectorMappingsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVendorConnectorMapping(vendorConnectorMappingBeta: VendorConnectorMappingBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorConnectorMappingBeta>>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVendorConnectorMapping(vendorConnectorMappingBeta: VendorConnectorMappingBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteVendorConnectorMapping200ResponseBeta>>;
};
/**
 * VendorConnectorMappingsBetaApi - factory interface
 * @export
 */
export declare const VendorConnectorMappingsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createVendorConnectorMapping(vendorConnectorMappingBeta: VendorConnectorMappingBeta, axiosOptions?: any): AxiosPromise<VendorConnectorMappingBeta>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMappingBeta} vendorConnectorMappingBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteVendorConnectorMapping(vendorConnectorMappingBeta: VendorConnectorMappingBeta, axiosOptions?: any): AxiosPromise<DeleteVendorConnectorMapping200ResponseBeta>;
};
/**
 * Request parameters for createVendorConnectorMapping operation in VendorConnectorMappingsBetaApi.
 * @export
 * @interface VendorConnectorMappingsBetaApiCreateVendorConnectorMappingRequest
 */
export interface VendorConnectorMappingsBetaApiCreateVendorConnectorMappingRequest {
    /**
     *
     * @type {VendorConnectorMappingBeta}
     * @memberof VendorConnectorMappingsBetaApiCreateVendorConnectorMapping
     */
    readonly vendorConnectorMappingBeta: VendorConnectorMappingBeta;
}
/**
 * Request parameters for deleteVendorConnectorMapping operation in VendorConnectorMappingsBetaApi.
 * @export
 * @interface VendorConnectorMappingsBetaApiDeleteVendorConnectorMappingRequest
 */
export interface VendorConnectorMappingsBetaApiDeleteVendorConnectorMappingRequest {
    /**
     *
     * @type {VendorConnectorMappingBeta}
     * @memberof VendorConnectorMappingsBetaApiDeleteVendorConnectorMapping
     */
    readonly vendorConnectorMappingBeta: VendorConnectorMappingBeta;
}
/**
 * VendorConnectorMappingsBetaApi - object-oriented interface
 * @export
 * @class VendorConnectorMappingsBetaApi
 * @extends {BaseAPI}
 */
export declare class VendorConnectorMappingsBetaApi extends BaseAPI {
    /**
     * Creates a new mapping between a SaaS vendor and an IDN connector to establish correlation paths.
     * @summary Create a vendor connector mapping
     * @param {VendorConnectorMappingsBetaApiCreateVendorConnectorMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorConnectorMappingsBetaApi
     */
    createVendorConnectorMapping(requestParameters: VendorConnectorMappingsBetaApiCreateVendorConnectorMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VendorConnectorMappingBeta, any>>;
    /**
     * Soft deletes a mapping between a SaaS vendor and an IDN connector, removing the established correlation.
     * @summary Delete a vendor connector mapping
     * @param {VendorConnectorMappingsBetaApiDeleteVendorConnectorMappingRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorConnectorMappingsBetaApi
     */
    deleteVendorConnectorMapping(requestParameters: VendorConnectorMappingsBetaApiDeleteVendorConnectorMappingRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DeleteVendorConnectorMapping200ResponseBeta, any>>;
}
/**
 * WorkItemsBetaApi - axios parameter creator
 * @export
 */
export declare const WorkItemsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItem: (id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItemsInBulk: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeWorkItem: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
     * @summary Forward a Work Item
     * @param {string} id The ID of the work item
     * @param {WorkItemForwardBeta} workItemForwardBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardWorkItem: (id: string, workItemForwardBeta: WorkItemForwardBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCompletedWorkItems: (ownerId?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountCompletedWorkItems: (ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountWorkItems: (ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {string} id ID of the work item.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItem: (id: string, ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItemsSummary: (ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkItems: (limit?: number, offset?: number, count?: boolean, ownerId?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItem: (id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItemsInBulk: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {string} id The ID of the work item
     * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitAccountSelection: (id: string, requestBody: {
        [key: string]: any;
    }, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkItemsBetaApi - functional programming interface
 * @export
 */
export declare const WorkItemsBetaApiFp: (configuration?: Configuration) => {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItem(id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsBeta>>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItemsInBulk(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsBeta>>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeWorkItem(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsBeta>>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
     * @summary Forward a Work Item
     * @param {string} id The ID of the work item
     * @param {WorkItemForwardBeta} workItemForwardBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardWorkItem(id: string, workItemForwardBeta: WorkItemForwardBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCompletedWorkItems(ownerId?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItemsBeta>>>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountCompletedWorkItems(ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItemsCountBeta>>>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountWorkItems(ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsCountBeta>>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {string} id ID of the work item.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItem(id: string, ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItemsBeta>>>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItemsSummary(ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsSummaryBeta>>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkItems(limit?: number, offset?: number, count?: boolean, ownerId?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkItemsBeta>>>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItem(id: string, approvalItemId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsBeta>>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItemsInBulk(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsBeta>>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {string} id The ID of the work item
     * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitAccountSelection(id: string, requestBody: {
        [key: string]: any;
    }, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkItemsBeta>>;
};
/**
 * WorkItemsBetaApi - factory interface
 * @export
 */
export declare const WorkItemsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItem(id: string, approvalItemId: string, axiosOptions?: any): AxiosPromise<WorkItemsBeta>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    approveApprovalItemsInBulk(id: string, axiosOptions?: any): AxiosPromise<WorkItemsBeta>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    completeWorkItem(id: string, axiosOptions?: any): AxiosPromise<WorkItemsBeta>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
     * @summary Forward a Work Item
     * @param {string} id The ID of the work item
     * @param {WorkItemForwardBeta} workItemForwardBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    forwardWorkItem(id: string, workItemForwardBeta: WorkItemForwardBeta, axiosOptions?: any): AxiosPromise<void>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {string} [ownerId] The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCompletedWorkItems(ownerId?: string, limit?: number, offset?: number, count?: boolean, axiosOptions?: any): AxiosPromise<Array<WorkItemsBeta>>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountCompletedWorkItems(ownerId?: string, axiosOptions?: any): AxiosPromise<Array<WorkItemsCountBeta>>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getCountWorkItems(ownerId?: string, axiosOptions?: any): AxiosPromise<WorkItemsCountBeta>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {string} id ID of the work item.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItem(id: string, ownerId?: string, axiosOptions?: any): AxiosPromise<Array<WorkItemsBeta>>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkItemsSummary(ownerId?: string, axiosOptions?: any): AxiosPromise<WorkItemsSummaryBeta>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [ownerId] ID of the work item owner.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkItems(limit?: number, offset?: number, count?: boolean, ownerId?: string, axiosOptions?: any): AxiosPromise<Array<WorkItemsBeta>>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {string} id The ID of the work item
     * @param {string} approvalItemId The ID of the approval item.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItem(id: string, approvalItemId: string, axiosOptions?: any): AxiosPromise<WorkItemsBeta>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {string} id The ID of the work item
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    rejectApprovalItemsInBulk(id: string, axiosOptions?: any): AxiosPromise<WorkItemsBeta>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {string} id The ID of the work item
     * @param {{ [key: string]: any; }} requestBody Account Selection Data map, keyed on fieldName
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    submitAccountSelection(id: string, requestBody: {
        [key: string]: any;
    }, axiosOptions?: any): AxiosPromise<WorkItemsBeta>;
};
/**
 * Request parameters for approveApprovalItem operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiApproveApprovalItemRequest
 */
export interface WorkItemsBetaApiApproveApprovalItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiApproveApprovalItem
     */
    readonly id: string;
    /**
     * The ID of the approval item.
     * @type {string}
     * @memberof WorkItemsBetaApiApproveApprovalItem
     */
    readonly approvalItemId: string;
}
/**
 * Request parameters for approveApprovalItemsInBulk operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiApproveApprovalItemsInBulkRequest
 */
export interface WorkItemsBetaApiApproveApprovalItemsInBulkRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiApproveApprovalItemsInBulk
     */
    readonly id: string;
}
/**
 * Request parameters for completeWorkItem operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiCompleteWorkItemRequest
 */
export interface WorkItemsBetaApiCompleteWorkItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiCompleteWorkItem
     */
    readonly id: string;
}
/**
 * Request parameters for forwardWorkItem operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiForwardWorkItemRequest
 */
export interface WorkItemsBetaApiForwardWorkItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiForwardWorkItem
     */
    readonly id: string;
    /**
     *
     * @type {WorkItemForwardBeta}
     * @memberof WorkItemsBetaApiForwardWorkItem
     */
    readonly workItemForwardBeta: WorkItemForwardBeta;
}
/**
 * Request parameters for getCompletedWorkItems operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiGetCompletedWorkItemsRequest
 */
export interface WorkItemsBetaApiGetCompletedWorkItemsRequest {
    /**
     * The id of the owner of the work item list being requested.  Either an admin, or the owning/current user must make this request.
     * @type {string}
     * @memberof WorkItemsBetaApiGetCompletedWorkItems
     */
    readonly ownerId?: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsBetaApiGetCompletedWorkItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsBetaApiGetCompletedWorkItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof WorkItemsBetaApiGetCompletedWorkItems
     */
    readonly count?: boolean;
}
/**
 * Request parameters for getCountCompletedWorkItems operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiGetCountCompletedWorkItemsRequest
 */
export interface WorkItemsBetaApiGetCountCompletedWorkItemsRequest {
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsBetaApiGetCountCompletedWorkItems
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for getCountWorkItems operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiGetCountWorkItemsRequest
 */
export interface WorkItemsBetaApiGetCountWorkItemsRequest {
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsBetaApiGetCountWorkItems
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for getWorkItem operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiGetWorkItemRequest
 */
export interface WorkItemsBetaApiGetWorkItemRequest {
    /**
     * ID of the work item.
     * @type {string}
     * @memberof WorkItemsBetaApiGetWorkItem
     */
    readonly id: string;
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsBetaApiGetWorkItem
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for getWorkItemsSummary operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiGetWorkItemsSummaryRequest
 */
export interface WorkItemsBetaApiGetWorkItemsSummaryRequest {
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsBetaApiGetWorkItemsSummary
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for listWorkItems operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiListWorkItemsRequest
 */
export interface WorkItemsBetaApiListWorkItemsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsBetaApiListWorkItems
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkItemsBetaApiListWorkItems
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof WorkItemsBetaApiListWorkItems
     */
    readonly count?: boolean;
    /**
     * ID of the work item owner.
     * @type {string}
     * @memberof WorkItemsBetaApiListWorkItems
     */
    readonly ownerId?: string;
}
/**
 * Request parameters for rejectApprovalItem operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiRejectApprovalItemRequest
 */
export interface WorkItemsBetaApiRejectApprovalItemRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiRejectApprovalItem
     */
    readonly id: string;
    /**
     * The ID of the approval item.
     * @type {string}
     * @memberof WorkItemsBetaApiRejectApprovalItem
     */
    readonly approvalItemId: string;
}
/**
 * Request parameters for rejectApprovalItemsInBulk operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiRejectApprovalItemsInBulkRequest
 */
export interface WorkItemsBetaApiRejectApprovalItemsInBulkRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiRejectApprovalItemsInBulk
     */
    readonly id: string;
}
/**
 * Request parameters for submitAccountSelection operation in WorkItemsBetaApi.
 * @export
 * @interface WorkItemsBetaApiSubmitAccountSelectionRequest
 */
export interface WorkItemsBetaApiSubmitAccountSelectionRequest {
    /**
     * The ID of the work item
     * @type {string}
     * @memberof WorkItemsBetaApiSubmitAccountSelection
     */
    readonly id: string;
    /**
     * Account Selection Data map, keyed on fieldName
     * @type {{ [key: string]: any; }}
     * @memberof WorkItemsBetaApiSubmitAccountSelection
     */
    readonly requestBody: {
        [key: string]: any;
    };
}
/**
 * WorkItemsBetaApi - object-oriented interface
 * @export
 * @class WorkItemsBetaApi
 * @extends {BaseAPI}
 */
export declare class WorkItemsBetaApi extends BaseAPI {
    /**
     * This API approves an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Approve an Approval Item
     * @param {WorkItemsBetaApiApproveApprovalItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    approveApprovalItem(requestParameters: WorkItemsBetaApiApproveApprovalItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta, any>>;
    /**
     * This API bulk approves Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk approve Approval Items
     * @param {WorkItemsBetaApiApproveApprovalItemsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    approveApprovalItemsInBulk(requestParameters: WorkItemsBetaApiApproveApprovalItemsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta, any>>;
    /**
     * This API completes a work item. Either an admin, or the owning/current user must make this request.
     * @summary Complete a Work Item
     * @param {WorkItemsBetaApiCompleteWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    completeWorkItem(requestParameters: WorkItemsBetaApiCompleteWorkItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta, any>>;
    /**
     * This API forwards a work item to a new owner. Either an admin, or the owning/current user must make this request.
     * @summary Forward a Work Item
     * @param {WorkItemsBetaApiForwardWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    forwardWorkItem(requestParameters: WorkItemsBetaApiForwardWorkItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This gets a collection of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Completed Work Items
     * @param {WorkItemsBetaApiGetCompletedWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    getCompletedWorkItems(requestParameters?: WorkItemsBetaApiGetCompletedWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta[], any>>;
    /**
     * This gets a count of completed work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Completed Work Items
     * @param {WorkItemsBetaApiGetCountCompletedWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    getCountCompletedWorkItems(requestParameters?: WorkItemsBetaApiGetCountCompletedWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsCountBeta[], any>>;
    /**
     * This gets a count of work items belonging to either the specified user(admin required), or the current user.
     * @summary Count Work Items
     * @param {WorkItemsBetaApiGetCountWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    getCountWorkItems(requestParameters?: WorkItemsBetaApiGetCountWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsCountBeta, any>>;
    /**
     * This gets the details of a Work Item belonging to either the specified user(admin required), or the current user.
     * @summary Get a Work Item
     * @param {WorkItemsBetaApiGetWorkItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    getWorkItem(requestParameters: WorkItemsBetaApiGetWorkItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta[], any>>;
    /**
     * This gets a summary of work items belonging to either the specified user(admin required), or the current user.
     * @summary Work Items Summary
     * @param {WorkItemsBetaApiGetWorkItemsSummaryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    getWorkItemsSummary(requestParameters?: WorkItemsBetaApiGetWorkItemsSummaryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsSummaryBeta, any>>;
    /**
     * This gets a collection of work items belonging to either the specified user(admin required), or the current user.
     * @summary List Work Items
     * @param {WorkItemsBetaApiListWorkItemsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    listWorkItems(requestParameters?: WorkItemsBetaApiListWorkItemsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta[], any>>;
    /**
     * This API rejects an Approval Item. Either an admin, or the owning/current user must make this request.
     * @summary Reject an Approval Item
     * @param {WorkItemsBetaApiRejectApprovalItemRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    rejectApprovalItem(requestParameters: WorkItemsBetaApiRejectApprovalItemRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta, any>>;
    /**
     * This API bulk rejects Approval Items. Either an admin, or the owning/current user must make this request.
     * @summary Bulk reject Approval Items
     * @param {WorkItemsBetaApiRejectApprovalItemsInBulkRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    rejectApprovalItemsInBulk(requestParameters: WorkItemsBetaApiRejectApprovalItemsInBulkRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta, any>>;
    /**
     * This API submits account selections. Either an admin, or the owning/current user must make this request.
     * @summary Submit Account Selections
     * @param {WorkItemsBetaApiSubmitAccountSelectionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkItemsBetaApi
     */
    submitAccountSelection(requestParameters: WorkItemsBetaApiSubmitAccountSelectionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkItemsBeta, any>>;
}
/**
 * WorkReassignmentBetaApi - axios parameter creator
 * @export
 */
export declare const WorkReassignmentBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new Reassignment Configuration for the specified identity.
     * @summary Create a Reassignment Configuration
     * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createReassignmentConfiguration: (configurationItemRequestBeta: ConfigurationItemRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deletes all Reassignment Configuration for the specified identity
     * @summary Delete Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteReassignmentConfiguration: (identityId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
     * @summary Evaluate Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {ConfigTypeEnumBeta} configType Reassignment work type
     * @param {Array<string>} [exclusionFilters] Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluateReassignmentConfiguration: (identityId: string, configType: ConfigTypeEnumBeta, exclusionFilters?: Array<string>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets a collection of types which are available in the Reassignment Configuration UI.
     * @summary List Reassignment Config Types
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReassignmentConfigTypes: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the Reassignment Configuration for an identity.
     * @summary Get Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReassignmentConfiguration: (identityId: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
     * @summary Get Tenant-wide Reassignment Configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenantConfigConfiguration: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets all Reassignment configuration for the current org.
     * @summary List Reassignment Configurations
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listReassignmentConfigurations: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
     * @summary Update Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putReassignmentConfig: (identityId: string, configurationItemRequestBeta: ConfigurationItemRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
     * @summary Update Tenant-wide Reassignment Configuration settings
     * @param {TenantConfigurationRequestBeta} tenantConfigurationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTenantConfiguration: (tenantConfigurationRequestBeta: TenantConfigurationRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkReassignmentBetaApi - functional programming interface
 * @export
 */
export declare const WorkReassignmentBetaApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new Reassignment Configuration for the specified identity.
     * @summary Create a Reassignment Configuration
     * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createReassignmentConfiguration(configurationItemRequestBeta: ConfigurationItemRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationItemResponseBeta>>;
    /**
     * Deletes all Reassignment Configuration for the specified identity
     * @summary Delete Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteReassignmentConfiguration(identityId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
     * @summary Evaluate Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {ConfigTypeEnumBeta} configType Reassignment work type
     * @param {Array<string>} [exclusionFilters] Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluateReassignmentConfiguration(identityId: string, configType: ConfigTypeEnumBeta, exclusionFilters?: Array<string>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EvaluateResponseBeta>>>;
    /**
     * Gets a collection of types which are available in the Reassignment Configuration UI.
     * @summary List Reassignment Config Types
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReassignmentConfigTypes(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigTypeBeta>>>;
    /**
     * Gets the Reassignment Configuration for an identity.
     * @summary Get Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReassignmentConfiguration(identityId: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationResponseBeta>>;
    /**
     * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
     * @summary Get Tenant-wide Reassignment Configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenantConfigConfiguration(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantConfigurationResponseBeta>>;
    /**
     * Gets all Reassignment configuration for the current org.
     * @summary List Reassignment Configurations
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listReassignmentConfigurations(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigurationResponseBeta>>>;
    /**
     * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
     * @summary Update Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putReassignmentConfig(identityId: string, configurationItemRequestBeta: ConfigurationItemRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigurationItemResponseBeta>>;
    /**
     * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
     * @summary Update Tenant-wide Reassignment Configuration settings
     * @param {TenantConfigurationRequestBeta} tenantConfigurationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTenantConfiguration(tenantConfigurationRequestBeta: TenantConfigurationRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantConfigurationResponseBeta>>;
};
/**
 * WorkReassignmentBetaApi - factory interface
 * @export
 */
export declare const WorkReassignmentBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new Reassignment Configuration for the specified identity.
     * @summary Create a Reassignment Configuration
     * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createReassignmentConfiguration(configurationItemRequestBeta: ConfigurationItemRequestBeta, axiosOptions?: any): AxiosPromise<ConfigurationItemResponseBeta>;
    /**
     * Deletes all Reassignment Configuration for the specified identity
     * @summary Delete Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteReassignmentConfiguration(identityId: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
     * @summary Evaluate Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {ConfigTypeEnumBeta} configType Reassignment work type
     * @param {Array<string>} [exclusionFilters] Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluateReassignmentConfiguration(identityId: string, configType: ConfigTypeEnumBeta, exclusionFilters?: Array<string>, axiosOptions?: any): AxiosPromise<Array<EvaluateResponseBeta>>;
    /**
     * Gets a collection of types which are available in the Reassignment Configuration UI.
     * @summary List Reassignment Config Types
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReassignmentConfigTypes(axiosOptions?: any): AxiosPromise<Array<ConfigTypeBeta>>;
    /**
     * Gets the Reassignment Configuration for an identity.
     * @summary Get Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getReassignmentConfiguration(identityId: string, axiosOptions?: any): AxiosPromise<ConfigurationResponseBeta>;
    /**
     * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
     * @summary Get Tenant-wide Reassignment Configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getTenantConfigConfiguration(axiosOptions?: any): AxiosPromise<TenantConfigurationResponseBeta>;
    /**
     * Gets all Reassignment configuration for the current org.
     * @summary List Reassignment Configurations
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listReassignmentConfigurations(axiosOptions?: any): AxiosPromise<Array<ConfigurationResponseBeta>>;
    /**
     * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
     * @summary Update Reassignment Configuration
     * @param {string} identityId unique identity id
     * @param {ConfigurationItemRequestBeta} configurationItemRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putReassignmentConfig(identityId: string, configurationItemRequestBeta: ConfigurationItemRequestBeta, axiosOptions?: any): AxiosPromise<ConfigurationItemResponseBeta>;
    /**
     * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
     * @summary Update Tenant-wide Reassignment Configuration settings
     * @param {TenantConfigurationRequestBeta} tenantConfigurationRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    putTenantConfiguration(tenantConfigurationRequestBeta: TenantConfigurationRequestBeta, axiosOptions?: any): AxiosPromise<TenantConfigurationResponseBeta>;
};
/**
 * Request parameters for createReassignmentConfiguration operation in WorkReassignmentBetaApi.
 * @export
 * @interface WorkReassignmentBetaApiCreateReassignmentConfigurationRequest
 */
export interface WorkReassignmentBetaApiCreateReassignmentConfigurationRequest {
    /**
     *
     * @type {ConfigurationItemRequestBeta}
     * @memberof WorkReassignmentBetaApiCreateReassignmentConfiguration
     */
    readonly configurationItemRequestBeta: ConfigurationItemRequestBeta;
}
/**
 * Request parameters for deleteReassignmentConfiguration operation in WorkReassignmentBetaApi.
 * @export
 * @interface WorkReassignmentBetaApiDeleteReassignmentConfigurationRequest
 */
export interface WorkReassignmentBetaApiDeleteReassignmentConfigurationRequest {
    /**
     * unique identity id
     * @type {string}
     * @memberof WorkReassignmentBetaApiDeleteReassignmentConfiguration
     */
    readonly identityId: string;
}
/**
 * Request parameters for getEvaluateReassignmentConfiguration operation in WorkReassignmentBetaApi.
 * @export
 * @interface WorkReassignmentBetaApiGetEvaluateReassignmentConfigurationRequest
 */
export interface WorkReassignmentBetaApiGetEvaluateReassignmentConfigurationRequest {
    /**
     * unique identity id
     * @type {string}
     * @memberof WorkReassignmentBetaApiGetEvaluateReassignmentConfiguration
     */
    readonly identityId: string;
    /**
     * Reassignment work type
     * @type {ConfigTypeEnumBeta}
     * @memberof WorkReassignmentBetaApiGetEvaluateReassignmentConfiguration
     */
    readonly configType: ConfigTypeEnumBeta;
    /**
     * Exclusion filters that disable parts of the reassignment evaluation. Possible values are listed below: - &#x60;SELF_REVIEW_DELEGATION&#x60;: This will exclude delegations of self-review reassignments
     * @type {Array<string>}
     * @memberof WorkReassignmentBetaApiGetEvaluateReassignmentConfiguration
     */
    readonly exclusionFilters?: Array<string>;
}
/**
 * Request parameters for getReassignmentConfiguration operation in WorkReassignmentBetaApi.
 * @export
 * @interface WorkReassignmentBetaApiGetReassignmentConfigurationRequest
 */
export interface WorkReassignmentBetaApiGetReassignmentConfigurationRequest {
    /**
     * unique identity id
     * @type {string}
     * @memberof WorkReassignmentBetaApiGetReassignmentConfiguration
     */
    readonly identityId: string;
}
/**
 * Request parameters for putReassignmentConfig operation in WorkReassignmentBetaApi.
 * @export
 * @interface WorkReassignmentBetaApiPutReassignmentConfigRequest
 */
export interface WorkReassignmentBetaApiPutReassignmentConfigRequest {
    /**
     * unique identity id
     * @type {string}
     * @memberof WorkReassignmentBetaApiPutReassignmentConfig
     */
    readonly identityId: string;
    /**
     *
     * @type {ConfigurationItemRequestBeta}
     * @memberof WorkReassignmentBetaApiPutReassignmentConfig
     */
    readonly configurationItemRequestBeta: ConfigurationItemRequestBeta;
}
/**
 * Request parameters for putTenantConfiguration operation in WorkReassignmentBetaApi.
 * @export
 * @interface WorkReassignmentBetaApiPutTenantConfigurationRequest
 */
export interface WorkReassignmentBetaApiPutTenantConfigurationRequest {
    /**
     *
     * @type {TenantConfigurationRequestBeta}
     * @memberof WorkReassignmentBetaApiPutTenantConfiguration
     */
    readonly tenantConfigurationRequestBeta: TenantConfigurationRequestBeta;
}
/**
 * WorkReassignmentBetaApi - object-oriented interface
 * @export
 * @class WorkReassignmentBetaApi
 * @extends {BaseAPI}
 */
export declare class WorkReassignmentBetaApi extends BaseAPI {
    /**
     * Creates a new Reassignment Configuration for the specified identity.
     * @summary Create a Reassignment Configuration
     * @param {WorkReassignmentBetaApiCreateReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    createReassignmentConfiguration(requestParameters: WorkReassignmentBetaApiCreateReassignmentConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationItemResponseBeta, any>>;
    /**
     * Deletes all Reassignment Configuration for the specified identity
     * @summary Delete Reassignment Configuration
     * @param {WorkReassignmentBetaApiDeleteReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    deleteReassignmentConfiguration(requestParameters: WorkReassignmentBetaApiDeleteReassignmentConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Evaluates the Reassignment Configuration for an `Identity` to determine if work items for the specified type should be reassigned. If a valid Reassignment Configuration is found for the identity & work type, then a lookup is initiated which recursively fetches the Reassignment Configuration for the next `TargetIdentity` until no more results are found or a max depth of 5. That lookup trail is provided in the response and the final reassigned identity in the lookup list is returned as the `reassignToId` property. If no Reassignment Configuration is found for the specified identity & config type then the requested Identity ID will be used as the `reassignToId` value and the lookupTrail node will be empty.
     * @summary Evaluate Reassignment Configuration
     * @param {WorkReassignmentBetaApiGetEvaluateReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    getEvaluateReassignmentConfiguration(requestParameters: WorkReassignmentBetaApiGetEvaluateReassignmentConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EvaluateResponseBeta[], any>>;
    /**
     * Gets a collection of types which are available in the Reassignment Configuration UI.
     * @summary List Reassignment Config Types
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    getReassignmentConfigTypes(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigTypeBeta[], any>>;
    /**
     * Gets the Reassignment Configuration for an identity.
     * @summary Get Reassignment Configuration
     * @param {WorkReassignmentBetaApiGetReassignmentConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    getReassignmentConfiguration(requestParameters: WorkReassignmentBetaApiGetReassignmentConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationResponseBeta, any>>;
    /**
     * Gets the global Reassignment Configuration settings for the requestor\'s tenant.
     * @summary Get Tenant-wide Reassignment Configuration settings
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    getTenantConfigConfiguration(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantConfigurationResponseBeta, any>>;
    /**
     * Gets all Reassignment configuration for the current org.
     * @summary List Reassignment Configurations
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    listReassignmentConfigurations(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationResponseBeta[], any>>;
    /**
     * Replaces existing Reassignment configuration for an identity with the newly provided configuration.
     * @summary Update Reassignment Configuration
     * @param {WorkReassignmentBetaApiPutReassignmentConfigRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    putReassignmentConfig(requestParameters: WorkReassignmentBetaApiPutReassignmentConfigRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ConfigurationItemResponseBeta, any>>;
    /**
     * Replaces existing Tenant-wide Reassignment Configuration settings with the newly provided settings.
     * @summary Update Tenant-wide Reassignment Configuration settings
     * @param {WorkReassignmentBetaApiPutTenantConfigurationRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkReassignmentBetaApi
     */
    putTenantConfiguration(requestParameters: WorkReassignmentBetaApiPutTenantConfigurationRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantConfigurationResponseBeta, any>>;
}
/**
 * WorkflowsBetaApi - axios parameter creator
 * @export
 */
export declare const WorkflowsBetaApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {string} id The workflow execution ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelWorkflowExecution: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {CreateWorkflowRequestBeta} createWorkflowRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow: (createWorkflowRequestBeta: CreateWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {string} id Id of the Workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {string} id Workflow execution ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecution: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {string} id Id of the workflow execution
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutionHistory: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {string} id Workflow ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutions: (id: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompleteWorkflowLibrary: (limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryActions: (limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryOperators: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryTriggers: (limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflows: (axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {string} id Id of the Workflow
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkflow: (id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {PostExternalExecuteWorkflowRequestBeta} [postExternalExecuteWorkflowRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    postExternalExecuteWorkflow: (id: string, postExternalExecuteWorkflowRequestBeta?: PostExternalExecuteWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    postWorkflowExternalTrigger: (id: string, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {TestExternalExecuteWorkflowRequestBeta} [testExternalExecuteWorkflowRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testExternalExecuteWorkflow: (id: string, testExternalExecuteWorkflowRequestBeta?: TestExternalExecuteWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {string} id Id of the workflow
     * @param {TestWorkflowRequestBeta} testWorkflowRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testWorkflow: (id: string, testWorkflowRequestBeta: TestWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {string} id Id of the Workflow
     * @param {WorkflowBodyBeta} workflowBodyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflow: (id: string, workflowBodyBeta: WorkflowBodyBeta, axiosOptions?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkflowsBetaApi - functional programming interface
 * @export
 */
export declare const WorkflowsBetaApiFp: (configuration?: Configuration) => {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {string} id The workflow execution ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelWorkflowExecution(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {CreateWorkflowRequestBeta} createWorkflowRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow(createWorkflowRequestBeta: CreateWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowBeta>>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {string} id Id of the Workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowBeta>>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {string} id Workflow execution ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecution(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {string} id Id of the workflow execution
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutionHistory(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowExecutionEventBeta>>>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {string} id Workflow ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutions(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowExecutionBeta>>>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompleteWorkflowLibrary(limit?: number, offset?: number, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListCompleteWorkflowLibrary200ResponseInnerBeta>>>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryActions(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowLibraryActionBeta>>>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryOperators(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowLibraryOperatorBeta>>>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryTriggers(limit?: number, offset?: number, filters?: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowLibraryTriggerBeta>>>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflows(axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowBeta>>>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {string} id Id of the Workflow
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkflow(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowBeta>>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {PostExternalExecuteWorkflowRequestBeta} [postExternalExecuteWorkflowRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    postExternalExecuteWorkflow(id: string, postExternalExecuteWorkflowRequestBeta?: PostExternalExecuteWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostExternalExecuteWorkflow200ResponseBeta>>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    postWorkflowExternalTrigger(id: string, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowOAuthClientBeta>>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {TestExternalExecuteWorkflowRequestBeta} [testExternalExecuteWorkflowRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testExternalExecuteWorkflow(id: string, testExternalExecuteWorkflowRequestBeta?: TestExternalExecuteWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestExternalExecuteWorkflow200ResponseBeta>>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {string} id Id of the workflow
     * @param {TestWorkflowRequestBeta} testWorkflowRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testWorkflow(id: string, testWorkflowRequestBeta: TestWorkflowRequestBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestWorkflow200ResponseBeta>>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {string} id Id of the Workflow
     * @param {WorkflowBodyBeta} workflowBodyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflow(id: string, workflowBodyBeta: WorkflowBodyBeta, axiosOptions?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowBeta>>;
};
/**
 * WorkflowsBetaApi - factory interface
 * @export
 */
export declare const WorkflowsBetaApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {string} id The workflow execution ID
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    cancelWorkflowExecution(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {CreateWorkflowRequestBeta} createWorkflowRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflow(createWorkflowRequestBeta: CreateWorkflowRequestBeta, axiosOptions?: any): AxiosPromise<WorkflowBeta>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {string} id Id of the Workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflow(id: string, axiosOptions?: any): AxiosPromise<void>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflow(id: string, axiosOptions?: any): AxiosPromise<WorkflowBeta>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {string} id Workflow execution ID.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecution(id: string, axiosOptions?: any): AxiosPromise<object>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {string} id Id of the workflow execution
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutionHistory(id: string, axiosOptions?: any): AxiosPromise<Array<WorkflowExecutionEventBeta>>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {string} id Workflow ID.
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {boolean} [count] If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowExecutions(id: string, limit?: number, offset?: number, count?: boolean, filters?: string, axiosOptions?: any): AxiosPromise<Array<WorkflowExecutionBeta>>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listCompleteWorkflowLibrary(limit?: number, offset?: number, axiosOptions?: any): AxiosPromise<Array<ListCompleteWorkflowLibrary200ResponseInnerBeta>>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryActions(limit?: number, offset?: number, filters?: string, axiosOptions?: any): AxiosPromise<Array<WorkflowLibraryActionBeta>>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryOperators(axiosOptions?: any): AxiosPromise<Array<WorkflowLibraryOperatorBeta>>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {number} [limit] Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {number} [offset] Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @param {string} [filters] Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowLibraryTriggers(limit?: number, offset?: number, filters?: string, axiosOptions?: any): AxiosPromise<Array<WorkflowLibraryTriggerBeta>>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflows(axiosOptions?: any): AxiosPromise<Array<WorkflowBeta>>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {string} id Id of the Workflow
     * @param {Array<JsonPatchOperationBeta>} jsonPatchOperationBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    patchWorkflow(id: string, jsonPatchOperationBeta: Array<JsonPatchOperationBeta>, axiosOptions?: any): AxiosPromise<WorkflowBeta>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {PostExternalExecuteWorkflowRequestBeta} [postExternalExecuteWorkflowRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    postExternalExecuteWorkflow(id: string, postExternalExecuteWorkflowRequestBeta?: PostExternalExecuteWorkflowRequestBeta, axiosOptions?: any): AxiosPromise<PostExternalExecuteWorkflow200ResponseBeta>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {string} id Id of the workflow
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    postWorkflowExternalTrigger(id: string, axiosOptions?: any): AxiosPromise<WorkflowOAuthClientBeta>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {string} id Id of the workflow
     * @param {TestExternalExecuteWorkflowRequestBeta} [testExternalExecuteWorkflowRequestBeta]
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testExternalExecuteWorkflow(id: string, testExternalExecuteWorkflowRequestBeta?: TestExternalExecuteWorkflowRequestBeta, axiosOptions?: any): AxiosPromise<TestExternalExecuteWorkflow200ResponseBeta>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {string} id Id of the workflow
     * @param {TestWorkflowRequestBeta} testWorkflowRequestBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    testWorkflow(id: string, testWorkflowRequestBeta: TestWorkflowRequestBeta, axiosOptions?: any): AxiosPromise<TestWorkflow200ResponseBeta>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {string} id Id of the Workflow
     * @param {WorkflowBodyBeta} workflowBodyBeta
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflow(id: string, workflowBodyBeta: WorkflowBodyBeta, axiosOptions?: any): AxiosPromise<WorkflowBeta>;
};
/**
 * Request parameters for cancelWorkflowExecution operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiCancelWorkflowExecutionRequest
 */
export interface WorkflowsBetaApiCancelWorkflowExecutionRequest {
    /**
     * The workflow execution ID
     * @type {string}
     * @memberof WorkflowsBetaApiCancelWorkflowExecution
     */
    readonly id: string;
}
/**
 * Request parameters for createWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiCreateWorkflowRequest
 */
export interface WorkflowsBetaApiCreateWorkflowRequest {
    /**
     *
     * @type {CreateWorkflowRequestBeta}
     * @memberof WorkflowsBetaApiCreateWorkflow
     */
    readonly createWorkflowRequestBeta: CreateWorkflowRequestBeta;
}
/**
 * Request parameters for deleteWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiDeleteWorkflowRequest
 */
export interface WorkflowsBetaApiDeleteWorkflowRequest {
    /**
     * Id of the Workflow
     * @type {string}
     * @memberof WorkflowsBetaApiDeleteWorkflow
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiGetWorkflowRequest
 */
export interface WorkflowsBetaApiGetWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsBetaApiGetWorkflow
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflowExecution operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiGetWorkflowExecutionRequest
 */
export interface WorkflowsBetaApiGetWorkflowExecutionRequest {
    /**
     * Workflow execution ID.
     * @type {string}
     * @memberof WorkflowsBetaApiGetWorkflowExecution
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflowExecutionHistory operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiGetWorkflowExecutionHistoryRequest
 */
export interface WorkflowsBetaApiGetWorkflowExecutionHistoryRequest {
    /**
     * Id of the workflow execution
     * @type {string}
     * @memberof WorkflowsBetaApiGetWorkflowExecutionHistory
     */
    readonly id: string;
}
/**
 * Request parameters for getWorkflowExecutions operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiGetWorkflowExecutionsRequest
 */
export interface WorkflowsBetaApiGetWorkflowExecutionsRequest {
    /**
     * Workflow ID.
     * @type {string}
     * @memberof WorkflowsBetaApiGetWorkflowExecutions
     */
    readonly id: string;
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiGetWorkflowExecutions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiGetWorkflowExecutions
     */
    readonly offset?: number;
    /**
     * If *true* it will populate the *X-Total-Count* response header with the number of results that would be returned if *limit* and *offset* were ignored.  Since requesting a total count can have a performance impact, it is recommended not to send **count&#x3D;true** if that value will not be used.  See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {boolean}
     * @memberof WorkflowsBetaApiGetWorkflowExecutions
     */
    readonly count?: boolean;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **startTime**: *eq, lt, le, gt, ge*  **status**: *eq*
     * @type {string}
     * @memberof WorkflowsBetaApiGetWorkflowExecutions
     */
    readonly filters?: string;
}
/**
 * Request parameters for listCompleteWorkflowLibrary operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiListCompleteWorkflowLibraryRequest
 */
export interface WorkflowsBetaApiListCompleteWorkflowLibraryRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiListCompleteWorkflowLibrary
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiListCompleteWorkflowLibrary
     */
    readonly offset?: number;
}
/**
 * Request parameters for listWorkflowLibraryActions operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiListWorkflowLibraryActionsRequest
 */
export interface WorkflowsBetaApiListWorkflowLibraryActionsRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiListWorkflowLibraryActions
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiListWorkflowLibraryActions
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @type {string}
     * @memberof WorkflowsBetaApiListWorkflowLibraryActions
     */
    readonly filters?: string;
}
/**
 * Request parameters for listWorkflowLibraryTriggers operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiListWorkflowLibraryTriggersRequest
 */
export interface WorkflowsBetaApiListWorkflowLibraryTriggersRequest {
    /**
     * Max number of results to return. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiListWorkflowLibraryTriggers
     */
    readonly limit?: number;
    /**
     * Offset into the full result set. Usually specified with *limit* to paginate through the results. See [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters) for more information.
     * @type {number}
     * @memberof WorkflowsBetaApiListWorkflowLibraryTriggers
     */
    readonly offset?: number;
    /**
     * Filter results using the standard syntax described in [V3 API Standard Collection Parameters](https://developer.sailpoint.com/idn/api/standard-collection-parameters#filtering-results)  Filtering is supported for the following fields and operators:  **id**: *eq*
     * @type {string}
     * @memberof WorkflowsBetaApiListWorkflowLibraryTriggers
     */
    readonly filters?: string;
}
/**
 * Request parameters for patchWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiPatchWorkflowRequest
 */
export interface WorkflowsBetaApiPatchWorkflowRequest {
    /**
     * Id of the Workflow
     * @type {string}
     * @memberof WorkflowsBetaApiPatchWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {Array<JsonPatchOperationBeta>}
     * @memberof WorkflowsBetaApiPatchWorkflow
     */
    readonly jsonPatchOperationBeta: Array<JsonPatchOperationBeta>;
}
/**
 * Request parameters for postExternalExecuteWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiPostExternalExecuteWorkflowRequest
 */
export interface WorkflowsBetaApiPostExternalExecuteWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsBetaApiPostExternalExecuteWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {PostExternalExecuteWorkflowRequestBeta}
     * @memberof WorkflowsBetaApiPostExternalExecuteWorkflow
     */
    readonly postExternalExecuteWorkflowRequestBeta?: PostExternalExecuteWorkflowRequestBeta;
}
/**
 * Request parameters for postWorkflowExternalTrigger operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiPostWorkflowExternalTriggerRequest
 */
export interface WorkflowsBetaApiPostWorkflowExternalTriggerRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsBetaApiPostWorkflowExternalTrigger
     */
    readonly id: string;
}
/**
 * Request parameters for testExternalExecuteWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiTestExternalExecuteWorkflowRequest
 */
export interface WorkflowsBetaApiTestExternalExecuteWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsBetaApiTestExternalExecuteWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {TestExternalExecuteWorkflowRequestBeta}
     * @memberof WorkflowsBetaApiTestExternalExecuteWorkflow
     */
    readonly testExternalExecuteWorkflowRequestBeta?: TestExternalExecuteWorkflowRequestBeta;
}
/**
 * Request parameters for testWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiTestWorkflowRequest
 */
export interface WorkflowsBetaApiTestWorkflowRequest {
    /**
     * Id of the workflow
     * @type {string}
     * @memberof WorkflowsBetaApiTestWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {TestWorkflowRequestBeta}
     * @memberof WorkflowsBetaApiTestWorkflow
     */
    readonly testWorkflowRequestBeta: TestWorkflowRequestBeta;
}
/**
 * Request parameters for updateWorkflow operation in WorkflowsBetaApi.
 * @export
 * @interface WorkflowsBetaApiUpdateWorkflowRequest
 */
export interface WorkflowsBetaApiUpdateWorkflowRequest {
    /**
     * Id of the Workflow
     * @type {string}
     * @memberof WorkflowsBetaApiUpdateWorkflow
     */
    readonly id: string;
    /**
     *
     * @type {WorkflowBodyBeta}
     * @memberof WorkflowsBetaApiUpdateWorkflow
     */
    readonly workflowBodyBeta: WorkflowBodyBeta;
}
/**
 * WorkflowsBetaApi - object-oriented interface
 * @export
 * @class WorkflowsBetaApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsBetaApi extends BaseAPI {
    /**
     * Use this API to cancel a running workflow execution.
     * @summary Cancel Workflow Execution by ID
     * @param {WorkflowsBetaApiCancelWorkflowExecutionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    cancelWorkflowExecution(requestParameters: WorkflowsBetaApiCancelWorkflowExecutionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new workflow with the desired trigger and steps specified in the request body.
     * @summary Create Workflow
     * @param {WorkflowsBetaApiCreateWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    createWorkflow(requestParameters: WorkflowsBetaApiCreateWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowBeta, any>>;
    /**
     * Delete a workflow.  **Enabled workflows cannot be deleted**.  They must first be disabled.
     * @summary Delete Workflow By Id
     * @param {WorkflowsBetaApiDeleteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    deleteWorkflow(requestParameters: WorkflowsBetaApiDeleteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a single workflow by id.
     * @summary Get Workflow By Id
     * @param {WorkflowsBetaApiGetWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    getWorkflow(requestParameters: WorkflowsBetaApiGetWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowBeta, any>>;
    /**
     * Use this API to get a single workflow execution. Workflow executions are available for up to 90 days before being archived. If you attempt to access a workflow execution that has been archived, you will receive a \"404 Not Found\" response.
     * @summary Get Workflow Execution
     * @param {WorkflowsBetaApiGetWorkflowExecutionRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    getWorkflowExecution(requestParameters: WorkflowsBetaApiGetWorkflowExecutionRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Get a detailed history of a single workflow execution.  Workflow executions are available for up to 90 days before being archived.  If you attempt to access a workflow execution that has been archived, you will receive a 404 Not Found.
     * @summary Get Workflow Execution History
     * @param {WorkflowsBetaApiGetWorkflowExecutionHistoryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    getWorkflowExecutionHistory(requestParameters: WorkflowsBetaApiGetWorkflowExecutionHistoryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowExecutionEventBeta[], any>>;
    /**
     * Use this API to list a specified workflow\'s executions. Workflow executions are available for up to 90 days before being archived. By default, you can get a maximum of 250 executions.  To get executions past the first 250 records, you can do the following:  1. Use the [Get Workflows](https://developer.sailpoint.com/idn/api/beta/list-workflows) endpoint to get your workflows.  2. Get your workflow ID from the response.  3. You can then do either of the following:     - Filter to find relevant workflow executions.   For example, you can filter for failed workflow executions: `GET /workflows/:workflowID/executions?filters=status eq \"Failed\"`    - Paginate through results with the `offset` parameter.    For example, you can page through 50 executions per page and use that as a way to get to the records past the first 250.    Refer to [Paginating Results](https://developer.sailpoint.com/idn/api/standard-collection-parameters#paginating-results) for more information about the query parameters you can use to achieve pagination.
     * @summary List Workflow Executions
     * @param {WorkflowsBetaApiGetWorkflowExecutionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    getWorkflowExecutions(requestParameters: WorkflowsBetaApiGetWorkflowExecutionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowExecutionBeta[], any>>;
    /**
     * This lists all triggers, actions, and operators in the library
     * @summary List Complete Workflow Library
     * @param {WorkflowsBetaApiListCompleteWorkflowLibraryRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    listCompleteWorkflowLibrary(requestParameters?: WorkflowsBetaApiListCompleteWorkflowLibraryRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListCompleteWorkflowLibrary200ResponseInnerBeta[], any>>;
    /**
     * This lists the workflow actions available to you.
     * @summary List Workflow Library Actions
     * @param {WorkflowsBetaApiListWorkflowLibraryActionsRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    listWorkflowLibraryActions(requestParameters?: WorkflowsBetaApiListWorkflowLibraryActionsRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowLibraryActionBeta[], any>>;
    /**
     * This lists the workflow operators available to you
     * @summary List Workflow Library Operators
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    listWorkflowLibraryOperators(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowLibraryOperatorBeta[], any>>;
    /**
     * This lists the workflow triggers available to you
     * @summary List Workflow Library Triggers
     * @param {WorkflowsBetaApiListWorkflowLibraryTriggersRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    listWorkflowLibraryTriggers(requestParameters?: WorkflowsBetaApiListWorkflowLibraryTriggersRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowLibraryTriggerBeta[], any>>;
    /**
     * List all workflows in the tenant.
     * @summary List Workflows
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    listWorkflows(axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowBeta[], any>>;
    /**
     * Partially update an existing Workflow using [JSON Patch](https://tools.ietf.org/html/rfc6902) syntax.
     * @summary Patch Workflow
     * @param {WorkflowsBetaApiPatchWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    patchWorkflow(requestParameters: WorkflowsBetaApiPatchWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowBeta, any>>;
    /**
     * This endpoint allows a service outside of IdentityNow to initiate a workflow that uses the \"External Trigger\" step.  The external service will invoke this endpoint with the input data it wants to send to the workflow in the body.
     * @summary Execute Workflow via External Trigger
     * @param {WorkflowsBetaApiPostExternalExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    postExternalExecuteWorkflow(requestParameters: WorkflowsBetaApiPostExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PostExternalExecuteWorkflow200ResponseBeta, any>>;
    /**
     * Create OAuth client ID, client secret, and callback URL for use in an external trigger.  External triggers will need this information to generate an access token to authenticate to the callback URL and submit a trigger payload that will initiate the workflow.
     * @summary Generate External Trigger OAuth Client
     * @param {WorkflowsBetaApiPostWorkflowExternalTriggerRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    postWorkflowExternalTrigger(requestParameters: WorkflowsBetaApiPostWorkflowExternalTriggerRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowOAuthClientBeta, any>>;
    /**
     * Validate a workflow with an \"External Trigger\" can receive input.  The response includes the input that the workflow received, which can be used to validate that the input is intact when it reaches the workflow.
     * @summary Test Workflow via External Trigger
     * @param {WorkflowsBetaApiTestExternalExecuteWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    testExternalExecuteWorkflow(requestParameters: WorkflowsBetaApiTestExternalExecuteWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestExternalExecuteWorkflow200ResponseBeta, any>>;
    /**
     * Test a workflow with the provided input data.  The input data should resemble the input that the trigger will send the workflow.  See the [event trigger documentation](https://developer.sailpoint.com/idn/docs/event-triggers/available) for an example input for the trigger that initiates this workflow. This endpoint will return an execution ID, which can be used to lookup more information about the execution using the `Get a Workflow Execution` endpoint. **This will cause a live run of the workflow, which could result in unintended modifications to your IDN tenant.**
     * @summary Test Workflow By Id
     * @param {WorkflowsBetaApiTestWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    testWorkflow(requestParameters: WorkflowsBetaApiTestWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestWorkflow200ResponseBeta, any>>;
    /**
     * Perform a full update of a workflow.  The updated workflow object is returned in the response.
     * @summary Update Workflow
     * @param {WorkflowsBetaApiUpdateWorkflowRequest} requestParameters Request parameters.
     * @param {*} [axiosOptions] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsBetaApi
     */
    updateWorkflow(requestParameters: WorkflowsBetaApiUpdateWorkflowRequest, axiosOptions?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkflowBeta, any>>;
}
